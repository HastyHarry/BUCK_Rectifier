
Eltek_Control_v.1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b150  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000818  0800b328  0800b328  0001b328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb40  0800bb40  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb40  0800bb40  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb40  0800bb40  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb40  0800bb40  0001bb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb44  0800bb44  0001bb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800bb48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b9b0  2000002c  0800bb74  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b9dc  0800bb74  0002b9dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002746e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048cc  00000000  00000000  000474ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e50  00000000  00000000  0004bd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd8  00000000  00000000  0004dbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c8f0  00000000  00000000  0004f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cdb3  00000000  00000000  0007c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00130820  00000000  00000000  00098e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c9683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080c0  00000000  00000000  001c9700  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b310 	.word	0x0800b310

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	0800b310 	.word	0x0800b310

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <DATA_Write_Theta_PLL>:
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DATA_Write_Theta_PLL(float Theta)                             
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	ed87 0a01 	vstr	s0, [r7, #4]

  DATA_theta_PLL=Theta;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <DATA_Write_Theta_PLL+0x1c>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	20000090 	.word	0x20000090

08000ab4 <DATA_Read_Theta_PLL>:
  * @retval DATA_theta_PLL (radians)
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
float DATA_Read_Theta_PLL(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  
  return DATA_theta_PLL;
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <DATA_Read_Theta_PLL+0x18>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	ee07 3a90 	vmov	s15, r3
}
 8000ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	20000090 	.word	0x20000090

08000ad0 <DATA_CURR_Write_ClarkePark>:
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void DATA_CURR_Write_ClarkePark(TRANSFORM_QDO_t Results_ClarkePark)
                                
 {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	eef0 6a40 	vmov.f32	s13, s0
 8000ada:	eeb0 7a60 	vmov.f32	s14, s1
 8000ade:	eef0 7a41 	vmov.f32	s15, s2
 8000ae2:	edc7 6a01 	vstr	s13, [r7, #4]
 8000ae6:	ed87 7a02 	vstr	s14, [r7, #8]
 8000aea:	edc7 7a03 	vstr	s15, [r7, #12]
                                
DATA_CURR_ClarkePark.axd=Results_ClarkePark.axd;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000af2:	6013      	str	r3, [r2, #0]
DATA_CURR_ClarkePark.axq=Results_ClarkePark.axq;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000af8:	6053      	str	r3, [r2, #4]
DATA_CURR_ClarkePark.axo=Results_ClarkePark.axo;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000afe:	6093      	str	r3, [r2, #8]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	20000064 	.word	0x20000064

08000b10 <DATA_VOLT_Write_ClarkePark>:
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void DATA_VOLT_Write_ClarkePark(TRANSFORM_QDO_t Results_ClarkePark)
                                
 {
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	eef0 6a40 	vmov.f32	s13, s0
 8000b1a:	eeb0 7a60 	vmov.f32	s14, s1
 8000b1e:	eef0 7a41 	vmov.f32	s15, s2
 8000b22:	edc7 6a01 	vstr	s13, [r7, #4]
 8000b26:	ed87 7a02 	vstr	s14, [r7, #8]
 8000b2a:	edc7 7a03 	vstr	s15, [r7, #12]
                                
DATA_VOLT_ClarkePark.axd=Results_ClarkePark.axd;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b32:	6013      	str	r3, [r2, #0]
DATA_VOLT_ClarkePark.axq=Results_ClarkePark.axq;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b38:	6053      	str	r3, [r2, #4]
DATA_VOLT_ClarkePark.axo=Results_ClarkePark.axo;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b3e:	6093      	str	r3, [r2, #8]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	20000078 	.word	0x20000078

08000b50 <DATA_Acquisition_from_DMA>:
* @retval None
*
* @note Function valid for STM32G4xx microconroller family  
*/
void DATA_Acquisition_from_DMA(uint32_t* p_ADC1_Data,uint32_t* p_ADC2_Data)                            
{   
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
//  VDC_ADC.Vdc_pos=p_ADC2_Data[0];
//  VDC_ADC.Vdc_neg=p_ADC2_Data[1];
//#elif STDES_PFCBIDIR_REV2

//T_ext=p_ADC2_Data[2];//////
  T_int=p_ADC1_Data[7];//////
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	331c      	adds	r3, #28
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <DATA_Acquisition_from_DMA+0x74>)
 8000b64:	801a      	strh	r2, [r3, #0]
  //AC Side Voltage
  VAC_ADC.phA=p_ADC1_Data[2];
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <DATA_Acquisition_from_DMA+0x78>)
 8000b6c:	6013      	str	r3, [r2, #0]
  VAC_ADC.phB=p_ADC1_Data[3];
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <DATA_Acquisition_from_DMA+0x78>)
 8000b74:	6053      	str	r3, [r2, #4]
  VAC_ADC.phC=p_ADC1_Data[4];
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <DATA_Acquisition_from_DMA+0x78>)
 8000b7c:	6093      	str	r3, [r2, #8]
  //AC Side Current                           
  IAC_ADC.phA=p_ADC1_Data[0];
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b84:	6013      	str	r3, [r2, #0]
  IAC_ADC.phB=p_ADC1_Data[1];
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b8c:	6053      	str	r3, [r2, #4]

  IAC_ADC.phC = IAC_ADC.phA+IAC_ADC.phB - 2048 ;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b9e:	6093      	str	r3, [r2, #8]

  //IAC_ADC.phC=p_ADC1_Data[];
  // DC Side Current
  //IDC_ADC.IDC_adc=p_ADC1_Data[3];
  //VDC                         
  VDC_ADC.Vdc_pos=p_ADC1_Data[5];
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <DATA_Acquisition_from_DMA+0x80>)
 8000ba6:	6013      	str	r3, [r2, #0]
  VDC_ADC.Vdc_neg=4096-p_ADC1_Data[6];
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3318      	adds	r3, #24
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000bb2:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <DATA_Acquisition_from_DMA+0x80>)
 8000bb4:	6053      	str	r3, [r2, #4]
//  VDC_ADC.Vdc_neg=p_ADC1_Data[7];
//  IDC_ADC.Idc_adc=p_ADC1_Data[8];
//#else
//  SELECT DEFINE
//#endif
} 
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	200000a4 	.word	0x200000a4
 8000bc8:	20000098 	.word	0x20000098
 8000bcc:	20000054 	.word	0x20000054
 8000bd0:	20000070 	.word	0x20000070

08000bd4 <Read_GRID>:
  * 
  * @retval VAC_ADC, pointer to VoltageAC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
VoltageAC_ADC_Struct* Read_GRID(void){
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return &VAC_ADC;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <Read_GRID+0x10>)
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	20000098 	.word	0x20000098

08000be8 <Read_Curr_GRID>:
  * 
  * @retval IAC_ADC, pointer to CurrentAC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
CurrentAC_ADC_Struct* Read_Curr_GRID(void){
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return &IAC_ADC;
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <Read_Curr_GRID+0x10>)
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	20000054 	.word	0x20000054

08000bfc <Read_Curr_DC>:
  * 
  * @retval IAC_ADC, pointer to CurrentDC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
CurrentDC_ADC_Struct* Read_Curr_DC(void){
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return &IDC_ADC;
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <Read_Curr_DC+0x10>)
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	20000060 	.word	0x20000060

08000c10 <Read_Volt_DC>:
  * 
  * @retval VDC_ADC, pointer to VoltageDC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
VoltageDC_ADC_Struct* Read_Volt_DC(void){
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return &VDC_ADC;
 8000c14:	4b02      	ldr	r3, [pc, #8]	; (8000c20 <Read_Volt_DC+0x10>)
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000070 	.word	0x20000070

08000c24 <DPC_FLT_Faulterror_Set>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx and STM32F74x microconroller family   
  */
void DPC_FLT_Faulterror_Set(DPC_FAULTERROR_LIST_TypeDef eFaulterror){
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uwFaultErrorVector |= eFaulterror;                                                    /*!< Set fault/error in the faulterror vector*/
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <DPC_FLT_Faulterror_Set+0x20>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	4a03      	ldr	r2, [pc, #12]	; (8000c44 <DPC_FLT_Faulterror_Set+0x20>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	200000a8 	.word	0x200000a8

08000c48 <Current_Decoupling_Control>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void Current_Decoupling_Control(CDC_Struct *pCDC_sub,PI_STRUCT_t *pPI_ID_CURR_CTRL_sub, PI_STRUCT_t *pPI_IQ_CURR_CTRL_sub ,float *pVd_ctrl_FF_sub, float *pVq_ctrl_FF_sub){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b090      	sub	sp, #64	; 0x40
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	603b      	str	r3, [r7, #0]
 
float fomegagrid_sub=pCDC_sub->omegagrid;                                                       ///Omega grid value expressed in Hz - Related to decoupled terms
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
float fInductor_sub=pCDC_sub->Inductor;                                                         ///Inductor value expressed in H - Related to decoupled terms
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
float fId_ref_sub=pCDC_sub->Id_ref;                                                             ///Local variable - d-axis current referance
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
float fIq_ref_sub=pCDC_sub->Iq_ref;                                                             ///Local variable - q-axis current referance
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
float fId_feed_sub=pCDC_sub->Id_feed;                                                           ///Local variable - d-axis current feedback
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
float fIq_feed_sub=pCDC_sub->Iq_feed;                                                           ///Local variable - q-axis current feedback
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
float fVq_Curr_Ctrl_sub;                                                                        ///Local variable - q-axis PI output
float fVd_Decoupling_sub;                                                                       ///Local variable - d-axis decoupling term
float fVq_Decoupling_sub;                                                                       ///Local variable - d-axis decoupling term
//float *pVd_ctrl_FF_sub;                                                                          ///Local variable - d-axis FeefForward term
//float *pVq_ctrl_FF_sub;                                                                          ///Local variable - d-axis FeefForward term
float fVdc_sub=pCDC_sub->Vdc_feed;                                                              ///Local variable - Vdc feedback
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24

  fVd_Curr_Ctrl_sub=PI(fId_ref_sub, fId_feed_sub , pPI_ID_CURR_CTRL_sub);                       ///d-axis PI regulator block
 8000c80:	68b8      	ldr	r0, [r7, #8]
 8000c82:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8000c86:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8000c8a:	f001 fba9 	bl	80023e0 <PI>
 8000c8e:	ed87 0a08 	vstr	s0, [r7, #32]
  fVq_Curr_Ctrl_sub=PI(fIq_ref_sub, fIq_feed_sub , pPI_IQ_CURR_CTRL_sub);                       ///q-axis PI regulator block
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8000c98:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8000c9c:	f001 fba0 	bl	80023e0 <PI>
 8000ca0:	ed87 0a07 	vstr	s0, [r7, #28]

  if(pCDC_sub->Decoupling_Enable==SET)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d130      	bne.n	8000d10 <Current_Decoupling_Control+0xc8>
  {
  pCDC_sub->Vd_Decoupling=fVd_Decoupling_sub=fIq_feed_sub*fomegagrid_sub*fInductor_sub;         ///d-axis decoupling term block
 8000cae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000cb2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cba:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc2:	edc7 7a06 	vstr	s15, [r7, #24]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	631a      	str	r2, [r3, #48]	; 0x30
  pCDC_sub->Vq_Decoupling=fVq_Decoupling_sub=fId_feed_sub*fomegagrid_sub*fInductor_sub;         ///q-axis decoupling term block
 8000ccc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000cd0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce0:	edc7 7a05 	vstr	s15, [r7, #20]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
  pCDC_sub->Vd_Curr_Ctrl=(fVd_Curr_Ctrl_sub-fVd_Decoupling_sub);                                ///d-axis decoupling term applied
 8000cea:	ed97 7a08 	vldr	s14, [r7, #32]
 8000cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	edc3 7a08 	vstr	s15, [r3, #32]
  pCDC_sub->Vq_Curr_Ctrl=(fVq_Curr_Ctrl_sub+fVq_Decoupling_sub);                                ///q-axis decoupling term applied
 8000cfc:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d00:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8000d0e:	e005      	b.n	8000d1c <Current_Decoupling_Control+0xd4>
  }
  else
  {
  pCDC_sub->Vd_Curr_Ctrl=fVd_Curr_Ctrl_sub;                                                    ///d-axis decoupling term bypassed
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6a3a      	ldr	r2, [r7, #32]
 8000d14:	621a      	str	r2, [r3, #32]
  pCDC_sub->Vq_Curr_Ctrl=fVq_Curr_Ctrl_sub;                                                    ///q-axis decoupling term bypassed
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	69fa      	ldr	r2, [r7, #28]
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  
  
  if(pCDC_sub->FF_Enable==SET)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d105      	bne.n	8000d32 <Current_Decoupling_Control+0xea>
  {
  FeedForward_Control(pCDC_sub,pVd_ctrl_FF_sub,pVq_ctrl_FF_sub);                                ///dq-axis Feed_Forward applied
 8000d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d28:	6839      	ldr	r1, [r7, #0]
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f000 f837 	bl	8000d9e <FeedForward_Control>
 8000d30:	e007      	b.n	8000d42 <Current_Decoupling_Control+0xfa>
  }
  else
  {
    *pVd_ctrl_FF_sub=pCDC_sub->Vd_Curr_Ctrl;                                                    ///d-axis Feed_Forward bypassed
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6a1a      	ldr	r2, [r3, #32]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	601a      	str	r2, [r3, #0]
    *pVq_ctrl_FF_sub=pCDC_sub->Vq_Curr_Ctrl;                                                    ///q-axis Feed_Forward bypassed                        
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d40:	601a      	str	r2, [r3, #0]
  }
  
  if(pCDC_sub->VDC_FF_Enable==SET)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d114      	bne.n	8000d76 <Current_Decoupling_Control+0x12e>
  {
    *pVd_ctrl_FF_sub=*pVq_ctrl_FF_sub/fVdc_sub;                                                 ///d-axis - Vdc Feed_Forward applied 
 8000d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d4e:	edd3 6a00 	vldr	s13, [r3]
 8000d52:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	edc3 7a00 	vstr	s15, [r3]
    *pVq_ctrl_FF_sub=*pVq_ctrl_FF_sub/fVdc_sub;                                                 ///q-axis - Vdc Feed_Forward applied 
 8000d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d62:	edd3 6a00 	vldr	s13, [r3]
 8000d66:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d70:	edc3 7a00 	vstr	s15, [r3]
 8000d74:	e007      	b.n	8000d86 <Current_Decoupling_Control+0x13e>
  }
  else
  {
    *pVd_ctrl_FF_sub=pCDC_sub->Vd_Curr_Ctrl;                                                    ///d-axis - Vdc Feed_Forward bypassed
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6a1a      	ldr	r2, [r3, #32]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	601a      	str	r2, [r3, #0]
    *pVq_ctrl_FF_sub=pCDC_sub->Vq_Curr_Ctrl;                                                    ///q-axis - Vdc Feed_Forward bypassed  
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d84:	601a      	str	r2, [r3, #0]
  }
  
  
  *pVd_ctrl_FF_sub=*pVd_ctrl_FF_sub;                                                               ///d-axis Vcontrol CDC output term
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	601a      	str	r2, [r3, #0]
  *pVq_ctrl_FF_sub=*pVq_ctrl_FF_sub;                                                               ///q-axis Vcontrol CDC output term
 8000d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d94:	601a      	str	r2, [r3, #0]
  
}
 8000d96:	bf00      	nop
 8000d98:	3740      	adds	r7, #64	; 0x40
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <FeedForward_Control>:
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 

void FeedForward_Control(CDC_Struct *pCDC_sub,float *pVd_ctrl_FF_sub, float *pVq_ctrl_FF_sub)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b089      	sub	sp, #36	; 0x24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
float fVd_feed_sub=pCDC_sub->Vd_feed;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	61fb      	str	r3, [r7, #28]
float fVq_feed_sub=pCDC_sub->Vq_feed; 
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	61bb      	str	r3, [r7, #24]
float fVd_ctrl_sub=pCDC_sub->Vd_Curr_Ctrl;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6a1b      	ldr	r3, [r3, #32]
 8000dba:	617b      	str	r3, [r7, #20]
float fVq_ctrl_sub=pCDC_sub->Vq_Curr_Ctrl;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc0:	613b      	str	r3, [r7, #16]


pCDC_sub->Vd_ctrl_FF=fVd_feed_sub-fVd_ctrl_sub;
 8000dc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
pCDC_sub->Vq_ctrl_FF=fVq_feed_sub-fVq_ctrl_sub;  
 8000dd4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000dd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  
  *pVd_ctrl_FF_sub=pCDC_sub->Vd_ctrl_FF;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	601a      	str	r2, [r3, #0]
  *pVq_ctrl_FF_sub=pCDC_sub->Vq_ctrl_FF;  
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	601a      	str	r2, [r3, #0]
}
 8000df6:	bf00      	nop
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <Voltage_Control>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void Voltage_Control(VOLTAGECTRL_Struct *VOLTAGECTRL_sub,PI_STRUCT_t *PI_VDC_CTRL_sub, float *Id_ctrl_sub){
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  float Vdc_ref_sub=VOLTAGECTRL_sub->Vdc_ref;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	617b      	str	r3, [r7, #20]
  float Vdc_feed_sub=VOLTAGECTRL_sub->Vdc_feed;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	613b      	str	r3, [r7, #16]
  
  PI(Vdc_ref_sub, Vdc_feed_sub , PI_VDC_CTRL_sub);
 8000e1a:	68b8      	ldr	r0, [r7, #8]
 8000e1c:	edd7 0a04 	vldr	s1, [r7, #16]
 8000e20:	ed97 0a05 	vldr	s0, [r7, #20]
 8000e24:	f001 fadc 	bl	80023e0 <PI>
  VOLTAGECTRL_sub->Id_ctrl=PI_VDC_CTRL_sub->PIout_sat;
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	69da      	ldr	r2, [r3, #28]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	609a      	str	r2, [r3, #8]
  *Id_ctrl_sub=PI_VDC_CTRL_sub->PIout_sat;
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	69da      	ldr	r2, [r3, #28]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <DPC_LPCNTRL_PFC_Mode_Reset>:
  * @retval null 
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DPC_LPCNTRL_PFC_Mode_Reset(PI_STRUCT_t *PI_VDC_CTRL, CDC_Struct *CDC)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
        PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode      
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <DPC_LPCNTRL_PFC_Mode>:
  * @retval null 
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DPC_LPCNTRL_PFC_Mode(PFC_CTRL_t *pPFC_CTRL_loc, PI_STRUCT_t *PI_VDC_CTRL, VOLTAGECTRL_Struct *VOLTAGECTRL, CDC_Struct *CDC,TRANSFORM_QDO_t *V_DQO_CTRL,TRANSFORM_QDO_t *Current_qdo,TRANSFORM_QDO_t *Voltage_qdo,VoltageDC_ADC_NORM_Struct *VOLTAGE_ADC_DC_IN_PHY)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b08a      	sub	sp, #40	; 0x28
 8000e72:	af02      	add	r7, sp, #8
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	603b      	str	r3, [r7, #0]
  
  float Id_ctrl_sub=0;
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  float Vd_ctrl_FF=0;
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  float Vq_ctrl_FF=0;
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  

  
  pPFC_CTRL_loc->VOLTAGECTRL=*VOLTAGECTRL;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	33ec      	adds	r3, #236	; 0xec
 8000e94:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  pPFC_CTRL_loc->CDC=*CDC;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	3314      	adds	r3, #20
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	22d8      	movs	r2, #216	; 0xd8
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f00a fa1f 	bl	800b2e8 <memcpy>
  
   if(pPFC_CTRL_loc->PFC_CTRL_State==VOLTAGE_LOOP) /// Voltage and Current control closed
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	789b      	ldrb	r3, [r3, #2]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d15c      	bne.n	8000f6c <DPC_LPCNTRL_PFC_Mode+0xfe>
  {   
    PI_VDC_CTRL->resetPI=pPFC_CTRL_loc->VdcCTRL_Reset;          ///Release PI accumulator
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	785a      	ldrb	r2, [r3, #1]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    VOLTAGECTRL->Vdc_ref=pPFC_CTRL_loc->PFC_VDC_Ref;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	8a1b      	ldrh	r3, [r3, #16]
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	edc3 7a00 	vstr	s15, [r3]
    VOLTAGECTRL->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;   
 8000ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	605a      	str	r2, [r3, #4]
    CDC->pPI_ID_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    CDC->Id_feed=Current_qdo->axd;                              ///Pass dq current feedback to CDC struct (d-axis)
 8000ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	611a      	str	r2, [r3, #16]
    CDC->Iq_feed=Current_qdo->axq;                              ///Pass dq current feedback to CDC struct (q-axis)
 8000efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	615a      	str	r2, [r3, #20]
    CDC->Vd_feed=Voltage_qdo->axd;                              ///Pass dq voltage feedback to CDC struct (d-axis)
 8000f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
    CDC->Vq_feed=Voltage_qdo->axq;                              ///Pass dq voltage feedback to CDC struct (q-axis)    
 8000f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
    CDC->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;               ///Pass DC voltage feedback to CDC struct 
 8000f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    Voltage_Control(VOLTAGECTRL, PI_VDC_CTRL,&Id_ctrl_sub);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	461a      	mov	r2, r3
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff6c 	bl	8000e02 <Voltage_Control>
    CDC->Id_ref=Id_ctrl_sub;
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	609a      	str	r2, [r3, #8]
    CDC->Iq_ref=0;  
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
    Current_Decoupling_Control(CDC,&CDC->pPI_ID_CURR_CTRL,&CDC->pPI_IQ_CURR_CTRL, &Vd_ctrl_FF,&Vq_ctrl_FF);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8000f44:	f107 0018 	add.w	r0, r7, #24
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6838      	ldr	r0, [r7, #0]
 8000f52:	f7ff fe79 	bl	8000c48 <Current_Decoupling_Control>
    
    V_DQO_CTRL->axd=Vd_ctrl_FF;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f60:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0; 
 8000f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
    V_DQO_CTRL->axd=0;
    V_DQO_CTRL->axq=0;
    V_DQO_CTRL->axo=0;
  }

}
 8000f6a:	e08e      	b.n	800108a <DPC_LPCNTRL_PFC_Mode+0x21c>
  else if(pPFC_CTRL_loc->PFC_CTRL_State==CURRENT_LOOP) /// Only Current control closed
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	789b      	ldrb	r3, [r3, #2]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d13b      	bne.n	8000fec <DPC_LPCNTRL_PFC_Mode+0x17e>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	781a      	ldrb	r2, [r3, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->Id_feed=Current_qdo->axd;                              ///Pass dq current feedback to CDC struct (d-axis)
 8000f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	611a      	str	r2, [r3, #16]
    CDC->Iq_feed=Current_qdo->axq;                              ///Pass dq current feedback to CDC struct (q-axis)
 8000f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	615a      	str	r2, [r3, #20]
    CDC->Vd_feed=Voltage_qdo->axd;                              ///Pass dq voltage feedback to CDC struct (d-axis)
 8000fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
    CDC->Vq_feed=Voltage_qdo->axq;                              ///Pass dq voltage feedback to CDC struct (q-axis) 
 8000fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
    CDC->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;               ///Pass DC voltage feedback to CDC struct 
 8000fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
    Current_Decoupling_Control(CDC,&CDC->pPI_ID_CURR_CTRL,&CDC->pPI_IQ_CURR_CTRL, &Vd_ctrl_FF,&Vq_ctrl_FF);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8000fc4:	f107 0018 	add.w	r0, r7, #24
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6838      	ldr	r0, [r7, #0]
 8000fd2:	f7ff fe39 	bl	8000c48 <Current_Decoupling_Control>
    V_DQO_CTRL->axd=Vd_ctrl_FF;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fda:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 8000fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
}
 8000fea:	e04e      	b.n	800108a <DPC_LPCNTRL_PFC_Mode+0x21c>
  else if(pPFC_CTRL_loc->PFC_CTRL_State==OPEN_LOOP) /// Open LOOP
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	789b      	ldrb	r3, [r3, #2]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d132      	bne.n	800105a <DPC_LPCNTRL_PFC_Mode+0x1ec>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode 
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->Vd_Curr_Ctrl=pPFC_CTRL_loc->V_DQO_CTRL_MAN.axd;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	621a      	str	r2, [r3, #32]
    CDC->Vq_Curr_Ctrl=pPFC_CTRL_loc->V_DQO_CTRL_MAN.axq;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
    if(CDC->FF_Enable==SET)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001022:	2b01      	cmp	r3, #1
 8001024:	d108      	bne.n	8001038 <DPC_LPCNTRL_PFC_Mode+0x1ca>
    FeedForward_Control(CDC,&Vd_ctrl_FF,&Vq_ctrl_FF);                                ///dq-axis Feed_Forward applied
 8001026:	f107 0214 	add.w	r2, r7, #20
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	4619      	mov	r1, r3
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f7ff feb4 	bl	8000d9e <FeedForward_Control>
 8001036:	e005      	b.n	8001044 <DPC_LPCNTRL_PFC_Mode+0x1d6>
    Vd_ctrl_FF=CDC->Vd_Curr_Ctrl;                                                    ///d-axis Feed_Forward bypassed
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	61bb      	str	r3, [r7, #24]
    Vq_ctrl_FF=CDC->Vq_Curr_Ctrl;                                                    ///q-axis Feed_Forward bypassed                        
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	617b      	str	r3, [r7, #20]
    V_DQO_CTRL->axd=Vd_ctrl_FF;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104e:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 8001050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
}
 8001058:	e017      	b.n	800108a <DPC_LPCNTRL_PFC_Mode+0x21c>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    V_DQO_CTRL->axd=0;
 8001072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=0;
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 8001082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
}
 800108a:	bf00      	nop
 800108c:	3720      	adds	r7, #32
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <DPC_LPCNTRL_Burst_Mode>:
* @retval none 
*
* @note Working with DPC_LPCNTRL_Burst_Check
* @note Function valid for STM32G4xx microconroller family  
*/ 
void DPC_LPCNTRL_Burst_Mode(uint32_t* p_Data_Sub,BURST_STRUCT *BURST_CTRL_f,uint32_t* iDC_Data_Sub,DPC_PWM_TypeDef *tDPC_PWM_loc){ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b088      	sub	sp, #32
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	603b      	str	r3, [r7, #0]
  uint16_t Vout_load_min;                                                               /*!< Local histeresis lower ouput DC voltage Thrueshold expressed in Bits */
  uint16_t I_load_Burst;                                                                /*!< */    
  float Burst_Duty;                                                                     /*!< */  

  
  if (BURST_CTRL_f->Burst_Enable==SET){                                                 /** If Burst_Enable is SET */  
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	7e1b      	ldrb	r3, [r3, #24]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d177      	bne.n	8001198 <DPC_LPCNTRL_Burst_Mode+0x106>
    
    Vout_load=p_Data_Sub[0]+p_Data_Sub[1];                                              /*!< Pass voltages data in local terms ([0]=VDC_upper  [1]=VDC_lower) */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3304      	adds	r3, #4
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	82fb      	strh	r3, [r7, #22]
    Vout_load_max=BURST_CTRL_f->Vout_max;                                               /*!< Set higher output voltage term*/
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	88db      	ldrh	r3, [r3, #6]
 80010be:	82bb      	strh	r3, [r7, #20]
    Vout_load_min=BURST_CTRL_f->Vout_min;                                               /*!< Set lower output voltage term*/  
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	891b      	ldrh	r3, [r3, #8]
 80010c4:	827b      	strh	r3, [r7, #18]
    BURST_CTRL_f->Vout_load=Vout_load;                                                  /*!< Store output voltage in "BURST_CTRL" struct */
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	8afa      	ldrh	r2, [r7, #22]
 80010ca:	801a      	strh	r2, [r3, #0]
    I_load_Burst=iDC_Data_Sub[0];                                                       /// [0]=Iload  
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	83fb      	strh	r3, [r7, #30]

    
  if(BURST_CTRL_f->BURST_Status==BURST_Progress || BURST_CTRL_f->BURST_Status==BURST_Run){    
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	7f9b      	ldrb	r3, [r3, #30]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d003      	beq.n	80010e2 <DPC_LPCNTRL_Burst_Mode+0x50>
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	7f9b      	ldrb	r3, [r3, #30]
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d15a      	bne.n	8001198 <DPC_LPCNTRL_Burst_Mode+0x106>
    
    if(BURST_CTRL_f->Duty_noload>BURST_CTRL_f->Duty_Limit){                              ///Start Check Duty LIMIT  
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dd03      	ble.n	8001100 <DPC_LPCNTRL_Burst_Mode+0x6e>
      BURST_CTRL_f->Duty_noload=BURST_CTRL_f->Duty_Limit;
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60da      	str	r2, [r3, #12]
    }//End Check Duty_noload LIMIT
    if(BURST_CTRL_f->Duty_lowload>BURST_CTRL_f->Duty_Limit){                             ///Start Check Duty LIMIT  
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	ed93 7a04 	vldr	s14, [r3, #16]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	edd3 7a05 	vldr	s15, [r3, #20]
 800110c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	dd03      	ble.n	800111e <DPC_LPCNTRL_Burst_Mode+0x8c>
      BURST_CTRL_f->Duty_lowload=BURST_CTRL_f->Duty_Limit;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	611a      	str	r2, [r3, #16]
    }//End Check Duty_lowload LIMIT
    

    if(I_load_Burst<=(BURST_CTRL_f->Iout_no_load_threshold)){                           ///NO_LOAD  Check        
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	8b5b      	ldrh	r3, [r3, #26]
 8001122:	8bfa      	ldrh	r2, [r7, #30]
 8001124:	429a      	cmp	r2, r3
 8001126:	d803      	bhi.n	8001130 <DPC_LPCNTRL_Burst_Mode+0x9e>
    Burst_Duty=BURST_CTRL_f->Duty_noload;
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	e00c      	b.n	800114a <DPC_LPCNTRL_Burst_Mode+0xb8>
    }
    else if(I_load_Burst>(BURST_CTRL_f->Iout_no_load_threshold) || I_load_Burst<=(BURST_CTRL_f->Iout_low_load_threshold)){                     ///LOW_LOAD  Check        
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	8b5b      	ldrh	r3, [r3, #26]
 8001134:	8bfa      	ldrh	r2, [r7, #30]
 8001136:	429a      	cmp	r2, r3
 8001138:	d804      	bhi.n	8001144 <DPC_LPCNTRL_Burst_Mode+0xb2>
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	8b9b      	ldrh	r3, [r3, #28]
 800113e:	8bfa      	ldrh	r2, [r7, #30]
 8001140:	429a      	cmp	r2, r3
 8001142:	d802      	bhi.n	800114a <DPC_LPCNTRL_Burst_Mode+0xb8>
    Burst_Duty=BURST_CTRL_f->Duty_lowload;
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	61bb      	str	r3, [r7, #24]
    }    
 
    DPC_PWM_Send_Burst_PWM(tDPC_PWM_loc,Burst_Duty,Burst_Duty,Burst_Duty);  /*!< Refresh BURST Duty*/    
 800114a:	ed97 1a06 	vldr	s2, [r7, #24]
 800114e:	edd7 0a06 	vldr	s1, [r7, #24]
 8001152:	ed97 0a06 	vldr	s0, [r7, #24]
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f000 fe3c 	bl	8001dd4 <DPC_PWM_Send_Burst_PWM>
      
//      if (Vout_load>Vout_load_max && BURST_CTRL_f->BURST_PACKAGE==SET)                  /*!< Occured when Vout overcome higher trueshold and BURST_Flag is active*/
      if (Vout_load>Vout_load_max)                                                      /*!< Occured when Vout overcome higher trueshold and BURST_Flag is active*/
 800115c:	8afa      	ldrh	r2, [r7, #22]
 800115e:	8abb      	ldrh	r3, [r7, #20]
 8001160:	429a      	cmp	r2, r3
 8001162:	d908      	bls.n	8001176 <DPC_LPCNTRL_Burst_Mode+0xe4>

      {
        DPC_PWM_OutDisable();                                                           /*!< DISABLE BURST PWM*/
 8001164:	f001 f81c 	bl	80021a0 <DPC_PWM_OutDisable>
        BURST_CTRL_f->BURST_PACKAGE=RESET;                                              /*!< BURST_Flag become RESET (Burst Inactive)*/
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2200      	movs	r2, #0
 800116c:	729a      	strb	r2, [r3, #10]
        BURST_CTRL_f->BURST_IN_RANGE=RESET;                                             /*!< BURST_IN_RANGE_Flag become RESET (Vout higher then limit)*/
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2200      	movs	r2, #0
 8001172:	72da      	strb	r2, [r3, #11]
 8001174:	e010      	b.n	8001198 <DPC_LPCNTRL_Burst_Mode+0x106>
      }
//      else if (Vout_load<Vout_load_min && BURST_CTRL_f->BURST_PACKAGE==RESET)           /*!< Occured when Vout is lower then low-trueshold and BURST_Flag is stopped*/
      else if (Vout_load<Vout_load_min)                                                 /*!< Occured when Vout is lower then low-trueshold and BURST_Flag is stopped*/
 8001176:	8afa      	ldrh	r2, [r7, #22]
 8001178:	8a7b      	ldrh	r3, [r7, #18]
 800117a:	429a      	cmp	r2, r3
 800117c:	d209      	bcs.n	8001192 <DPC_LPCNTRL_Burst_Mode+0x100>
      {   
        DPC_PWM_OutEnable(tDPC_PWM_loc);                                               /*!< ENABLE BURST PWM*/
 800117e:	6838      	ldr	r0, [r7, #0]
 8001180:	f001 f814 	bl	80021ac <DPC_PWM_OutEnable>
        BURST_CTRL_f->BURST_PACKAGE=SET;                                                /*!< BURST_Flag become SET (Burst Active)*/
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2201      	movs	r2, #1
 8001188:	729a      	strb	r2, [r3, #10]
        BURST_CTRL_f->BURST_IN_RANGE=RESET;                                             /*!< BURST_IN_RANGE_Flag become RESET (Vout lower then limit)*/
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2200      	movs	r2, #0
 800118e:	72da      	strb	r2, [r3, #11]
 8001190:	e002      	b.n	8001198 <DPC_LPCNTRL_Burst_Mode+0x106>
      }
      else                                                                              /*!< Occured in inner hysteresis window*/
      {
        BURST_CTRL_f->BURST_IN_RANGE=SET;   
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2201      	movs	r2, #1
 8001196:	72da      	strb	r2, [r3, #11]
  }
  else                                                                                  /** If Burst_Enable is RESET */ 
  {
    //
  } 
  BURST_CTRL_f->uI_load_Burst=I_load_Burst;  
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	8bfa      	ldrh	r2, [r7, #30]
 800119c:	841a      	strh	r2, [r3, #32]
  BURST_CTRL_f->Burst_Duty=Burst_Duty;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <DPC_LPCNTRL_CDC_Init>:
  * 
  * @retval none 
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DPC_LPCNTRL_CDC_Init(CDC_Struct *CDC_local,float omegagrid_loc,float Inductor_loc,FlagStatus FF_Enable_SET,FlagStatus Decoupling_Enable_SET,FlagStatus VDC_FF_Enable_SET){
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80011b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4603      	mov	r3, r0
 80011c4:	70fb      	strb	r3, [r7, #3]
 80011c6:	460b      	mov	r3, r1
 80011c8:	70bb      	strb	r3, [r7, #2]
 80011ca:	4613      	mov	r3, r2
 80011cc:	707b      	strb	r3, [r7, #1]
  CDC_local->omegagrid=omegagrid_loc;                   /*!< Set omega in Current Decaupling Control*/
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	601a      	str	r2, [r3, #0]
  CDC_local->Inductor=Inductor_loc;                     /*!< Set Inductor value in Current Decaupling Control*/
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	605a      	str	r2, [r3, #4]
  CDC_local->FF_Enable=FF_Enable_SET;                   /*!< Set Initial state of AC FeedForward in Current Decoupling Control*/
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	78fa      	ldrb	r2, [r7, #3]
 80011de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  CDC_local->Decoupling_Enable=Decoupling_Enable_SET;   /*!< Set Initial state of Decoupling compensator in Current Decoupling Control*/
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	78ba      	ldrb	r2, [r7, #2]
 80011e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  CDC_local->VDC_FF_Enable=VDC_FF_Enable_SET;           /*!< Set Initial state of DC FeedForward in Current Decoupling Control*/
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	787a      	ldrb	r2, [r7, #1]
 80011ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <DPC_LPCNTRL_PFC_Init>:
* @retval TBD 
*
* @note Function valid for STM32G4xx microconroller family  
*/ 
void DPC_LPCNTRL_PFC_Init(PFC_CTRL_t *pPFC_CTRL_loc,PFC_CTRL_State_TypeDef PFC_CTRL_State,uint16_t PFC_VDC_Ref_loc,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 80011fe:	b480      	push	{r7}
 8001200:	b087      	sub	sp, #28
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	72fb      	strb	r3, [r7, #11]
 800120c:	4613      	mov	r3, r2
 800120e:	813b      	strh	r3, [r7, #8]
  uint16_t PFC_VDC_Ref_BITs_loc;                                                                                /// Local variable to pass Output voltage reference  (Expressed in BITs)   
  PFC_VDC_Ref_BITs_loc=(uint16_t)(((float)PFC_VDC_Ref_loc*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);   /// (V_dc_ref [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias
 8001210:	893b      	ldrh	r3, [r7, #8]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	edd3 7a08 	vldr	s15, [r3, #32]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001232:	ee17 3a90 	vmov	r3, s15
 8001236:	82fb      	strh	r3, [r7, #22]
  
  pPFC_CTRL_loc->PFC_VDC_Ref=PFC_VDC_Ref_loc;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	893a      	ldrh	r2, [r7, #8]
 800123c:	821a      	strh	r2, [r3, #16]
  pPFC_CTRL_loc->PFC_VDC_Ref_BITs=PFC_VDC_Ref_BITs_loc;    
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	8afa      	ldrh	r2, [r7, #22]
 8001242:	825a      	strh	r2, [r3, #18]
  pPFC_CTRL_loc->CDC_Reset=RESET;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
  pPFC_CTRL_loc->VdcCTRL_Reset=RESET;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	705a      	strb	r2, [r3, #1]
  pPFC_CTRL_loc->PFC_CTRL_State=PFC_CTRL_State;   
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	7afa      	ldrb	r2, [r7, #11]
 8001254:	709a      	strb	r2, [r3, #2]
  
}
 8001256:	bf00      	nop
 8001258:	371c      	adds	r7, #28
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <FastSin>:
  * @retval SinTable: value of sin  
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    

float FastSin(float theta){
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t tempAdj;
  
    if (theta < 0.0f) theta += DOUBLE_PI;
 800126e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d507      	bpl.n	800128c <FastSin+0x28>
 800127c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001280:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80012f0 <FastSin+0x8c>
 8001284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001288:	edc7 7a01 	vstr	s15, [r7, #4]
    if (theta > DOUBLE_PI) theta -= DOUBLE_PI; 
 800128c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001290:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80012f0 <FastSin+0x8c>
 8001294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129c:	dd07      	ble.n	80012ae <FastSin+0x4a>
 800129e:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80012f0 <FastSin+0x8c>
 80012a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012aa:	edc7 7a01 	vstr	s15, [r7, #4]
    
    tempAdj = (uint16_t) (Multiplier*theta);
 80012ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012f4 <FastSin+0x90>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012be:	ee17 3a90 	vmov	r3, s15
 80012c2:	81fb      	strh	r3, [r7, #14]
    if(tempAdj >= LUT_SAMPLE ){
 80012c4:	89fb      	ldrh	r3, [r7, #14]
 80012c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ca:	d302      	bcc.n	80012d2 <FastSin+0x6e>
      tempAdj = LUT_SAMPLE-1;
 80012cc:	f240 13ff 	movw	r3, #511	; 0x1ff
 80012d0:	81fb      	strh	r3, [r7, #14]
    }
  return SinTable[tempAdj] ;
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <FastSin+0x94>)
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	ee07 3a90 	vmov	s15, r3
} 
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40c90fdb 	.word	0x40c90fdb
 80012f4:	42a2f983 	.word	0x42a2f983
 80012f8:	0800b328 	.word	0x0800b328

080012fc <FastCos>:
  * 
  * @retval SinTable: value of Cos  
  *
  * @note Function valid for STM32G4xx microconroller family  
  */      
float FastCos(float theta){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	ed87 0a01 	vstr	s0, [r7, #4]
  
    return FastSin(HALF_PI - theta);
 8001306:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001328 <FastCos+0x2c>
 800130a:	edd7 7a01 	vldr	s15, [r7, #4]
 800130e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	f7ff ffa5 	bl	8001264 <FastSin>
 800131a:	eef0 7a40 	vmov.f32	s15, s0
    }
 800131e:	eeb0 0a67 	vmov.f32	s0, s15
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	3fc90fdb 	.word	0x3fc90fdb

0800132c <Integral>:
*
* @retval integrator output value.
*
* @note Function valid for STM32G4xx microconroller family  
*/
float Integral(INTEGRATOR_STRUCT *pInteg, float Input) {
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	ed87 0a00 	vstr	s0, [r7]
  
  pInteg->Integral_in=Input;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	609a      	str	r2, [r3, #8]
  
  pInteg->Integral_prev=pInteg->Integralout;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	605a      	str	r2, [r3, #4]
  
  pInteg->Integralout=pInteg->Integral_prev+(pInteg->Integral_in*pInteg->Ts);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	ed93 7a01 	vldr	s14, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	edc3 7a03 	vstr	s15, [r3, #12]
  return(pInteg->Integralout);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	ee07 3a90 	vmov	s15, r3
}
 800136e:	eeb0 0a67 	vmov.f32	s0, s15
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <DPC_MISC_Check_DCLoad>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

DPC_Load_Status_TypeDef DPC_MISC_Check_DCLoad(DPC_Load_TypeDef *DPC_Load_loc,DPC_Load_Limit_TypeDef DC_Load_Limit_sub)
{
 800137c:	b084      	sub	sp, #16
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800138a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  uint16_t VDC;
  VoltageDC_ADC_Struct* DATA_VDC;  
  CurrentDC_ADC_Struct* DATA_IDC;
  
  DATA_VDC =  Read_Volt_DC(); 
 800138e:	f7ff fc3f 	bl	8000c10 <Read_Volt_DC>
 8001392:	6138      	str	r0, [r7, #16]
  DATA_IDC = Read_Curr_DC(); 
 8001394:	f7ff fc32 	bl	8000bfc <Read_Curr_DC>
 8001398:	60f8      	str	r0, [r7, #12]
  
  VDC=DATA_VDC->Vdc_pos+DATA_VDC->Vdc_neg;
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29a      	uxth	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	817b      	strh	r3, [r7, #10]
  
  DPC_Load_Status_TypeDef Load_Status;
 
  
  if((DATA_VDC->Vdc_pos > DC_Load_Limit_sub.V_cap_Limit) || (DATA_VDC->Vdc_neg > DC_Load_Limit_sub.V_cap_Limit)){  
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d804      	bhi.n	80013be <DPC_MISC_Check_DCLoad+0x42>
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d907      	bls.n	80013ce <DPC_MISC_Check_DCLoad+0x52>
    DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 80013be:	f000 feef 	bl	80021a0 <DPC_PWM_OutDisable>
//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
    Load_Status=OVERVOLTAGE_CAP;
 80013c2:	2305      	movs	r3, #5
 80013c4:	75fb      	strb	r3, [r7, #23]
    DPC_FLT_Faulterror_Set(FAULT_OVC);    
 80013c6:	2004      	movs	r0, #4
 80013c8:	f7ff fc2c 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 80013cc:	e049      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
  }
  else if (VDC>DC_Load_Limit_sub.V_dc_Limit){
 80013ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013d0:	897a      	ldrh	r2, [r7, #10]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d907      	bls.n	80013e6 <DPC_MISC_Check_DCLoad+0x6a>
    DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 80013d6:	f000 fee3 	bl	80021a0 <DPC_PWM_OutDisable>
//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
    Load_Status=OVERVOLTAGE_LOAD;
 80013da:	2303      	movs	r3, #3
 80013dc:	75fb      	strb	r3, [r7, #23]
    DPC_FLT_Faulterror_Set(FAULT_OVL);
 80013de:	2002      	movs	r0, #2
 80013e0:	f7ff fc20 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 80013e4:	e03d      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
  }
  else {
    if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_Over_load_Threshold)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d305      	bcc.n	80013fc <DPC_MISC_Check_DCLoad+0x80>
    {
      Load_Status=OVERCURRENT_LOAD;
 80013f0:	2304      	movs	r3, #4
 80013f2:	75fb      	strb	r3, [r7, #23]
      DPC_FLT_Faulterror_Set(FAULT_OCL);       
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fc15 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 80013fa:	e032      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_Low_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==LOW_LOAD || DPC_Load_loc->DPC_Load_Status==NO_LOAD))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001402:	4293      	cmp	r3, r2
 8001404:	d30a      	bcc.n	800141c <DPC_MISC_Check_DCLoad+0xa0>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d003      	beq.n	8001416 <DPC_MISC_Check_DCLoad+0x9a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <DPC_MISC_Check_DCLoad+0xa0>
    {
      Load_Status=ON_LOAD;
 8001416:	2302      	movs	r3, #2
 8001418:	75fb      	strb	r3, [r7, #23]
 800141a:	e022      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else if(DATA_IDC->IDC_adc<=DC_Load_Limit_sub.I_Low_load_Min_Threshold && (DPC_Load_loc->DPC_Load_Status==ON_LOAD))
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001422:	4293      	cmp	r3, r2
 8001424:	d806      	bhi.n	8001434 <DPC_MISC_Check_DCLoad+0xb8>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d102      	bne.n	8001434 <DPC_MISC_Check_DCLoad+0xb8>
    {
      Load_Status=LOW_LOAD;
 800142e:	2301      	movs	r3, #1
 8001430:	75fb      	strb	r3, [r7, #23]
 8001432:	e016      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_No_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==NO_LOAD))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800143a:	4293      	cmp	r3, r2
 800143c:	d306      	bcc.n	800144c <DPC_MISC_Check_DCLoad+0xd0>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <DPC_MISC_Check_DCLoad+0xd0>
    {
      Load_Status=LOW_LOAD;
 8001446:	2301      	movs	r3, #1
 8001448:	75fb      	strb	r3, [r7, #23]
 800144a:	e00a      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else if(DATA_IDC->IDC_adc<=DC_Load_Limit_sub.I_No_load_Min_Threshold)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001452:	4293      	cmp	r3, r2
 8001454:	d802      	bhi.n	800145c <DPC_MISC_Check_DCLoad+0xe0>
    {
      Load_Status=NO_LOAD;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
 800145a:	e002      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else
    {
      Load_Status=DPC_Load_loc->DPC_Load_Status;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  DPC_Load_loc->DPC_Load_Status=Load_Status;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7dfa      	ldrb	r2, [r7, #23]
 8001466:	701a      	strb	r2, [r3, #0]
  return Load_Status;
 8001468:	7dfb      	ldrb	r3, [r7, #23]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001474:	b004      	add	sp, #16
 8001476:	4770      	bx	lr

08001478 <DPC_MISC_DCLoad_Init>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

void DPC_MISC_DCLoad_Init(DPC_Load_Limit_TypeDef *DC_Load_Limit_sub,uint16_t V_dc_Limit_VOLT,uint16_t V_cap_Limit_VOLT,float I_dc_NO_LOAD_Limit_AMP,float I_dc_LOW_LOAD_Limit_AMP,float I_dc_OVER_LOAD_Limit_AMP,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b08d      	sub	sp, #52	; 0x34
 800147c:	af00      	add	r7, sp, #0
 800147e:	6178      	str	r0, [r7, #20]
 8001480:	ed87 0a03 	vstr	s0, [r7, #12]
 8001484:	edc7 0a02 	vstr	s1, [r7, #8]
 8001488:	ed87 1a01 	vstr	s2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	460b      	mov	r3, r1
 8001490:	827b      	strh	r3, [r7, #18]
 8001492:	4613      	mov	r3, r2
 8001494:	823b      	strh	r3, [r7, #16]
  uint16_t I_dc_LOW_LOAD_Min_Limit_loc;                                                                 /// Local variable to pass Output current Min theshold (Expressed in AMPs) to determinate Light Load Condition  
  uint16_t I_dc_OVER_LOAD_Limit_loc;                                                                    /// Local variable to pass Output current theshold (Expressed in AMPs)to determinate Over Load Condition
  

  
  V_cap_Limit_loc=(uint16_t)(((float)V_cap_Limit_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);                                        /// (Vcap_limit_Threshold [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias 
 8001496:	8a3b      	ldrh	r3, [r7, #16]
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80014b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b8:	ee17 3a90 	vmov	r3, s15
 80014bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
  V_dc_Limit_loc=(uint16_t)(((float)V_dc_Limit_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);                                          /// (Vdc_limit_Threshold [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias
 80014be:	8a7b      	ldrh	r3, [r7, #18]
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e0:	ee17 3a90 	vmov	r3, s15
 80014e4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  I_dc_NO_LOAD_Limit_loc=(uint16_t)(((float)I_dc_NO_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                           /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80014ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80014fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001502:	ee17 3a90 	vmov	r3, s15
 8001506:	857b      	strh	r3, [r7, #42]	; 0x2a
  I_dc_NO_LOAD_Delta_Limit_loc=(uint16_t)((I_dc_NO_LOAD_Limit_loc - DPC_ADC_Conf_loc->B_Idc)*((float)DPC_NO_LOAD_DELTA_CURR*0.01));                     ///
 8001508:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151c:	ee17 0a90 	vmov	r0, s15
 8001520:	f7fe ffde 	bl	80004e0 <__aeabi_f2d>
 8001524:	a33c      	add	r3, pc, #240	; (adr r3, 8001618 <DPC_MISC_DCLoad_Init+0x1a0>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f831 	bl	8000590 <__aeabi_dmul>
 800152e:	4603      	mov	r3, r0
 8001530:	460c      	mov	r4, r1
 8001532:	4618      	mov	r0, r3
 8001534:	4621      	mov	r1, r4
 8001536:	f7ff fa3d 	bl	80009b4 <__aeabi_d2uiz>
 800153a:	4603      	mov	r3, r0
 800153c:	853b      	strh	r3, [r7, #40]	; 0x28
  I_dc_NO_LOAD_Max_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc + I_dc_NO_LOAD_Delta_Limit_loc);                                                 /// 
 800153e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001540:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001542:	4413      	add	r3, r2
 8001544:	84fb      	strh	r3, [r7, #38]	; 0x26
  I_dc_NO_LOAD_Min_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc - I_dc_NO_LOAD_Delta_Limit_loc);                                                 /// 
 8001546:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001548:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	84bb      	strh	r3, [r7, #36]	; 0x24

  I_dc_LOW_LOAD_Limit_loc=(uint16_t)(((float)I_dc_LOW_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                         /// (IDC_Light_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001554:	edd7 7a02 	vldr	s15, [r7, #8]
 8001558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800156a:	ee17 3a90 	vmov	r3, s15
 800156e:	847b      	strh	r3, [r7, #34]	; 0x22
  I_dc_LOW_LOAD_Delta_Limit_loc=(uint16_t)((I_dc_LOW_LOAD_Limit_loc - DPC_ADC_Conf_loc->B_Idc)*((float)DPC_LOW_LOAD_DELTA_CURR*0.01));                   ///
 8001570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001584:	ee17 0a90 	vmov	r0, s15
 8001588:	f7fe ffaa 	bl	80004e0 <__aeabi_f2d>
 800158c:	a324      	add	r3, pc, #144	; (adr r3, 8001620 <DPC_MISC_DCLoad_Init+0x1a8>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7fe fffd 	bl	8000590 <__aeabi_dmul>
 8001596:	4603      	mov	r3, r0
 8001598:	460c      	mov	r4, r1
 800159a:	4618      	mov	r0, r3
 800159c:	4621      	mov	r1, r4
 800159e:	f7ff fa09 	bl	80009b4 <__aeabi_d2uiz>
 80015a2:	4603      	mov	r3, r0
 80015a4:	843b      	strh	r3, [r7, #32]
  I_dc_LOW_LOAD_Max_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc + I_dc_LOW_LOAD_Delta_Limit_loc);                                               /// 
 80015a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80015a8:	8c3b      	ldrh	r3, [r7, #32]
 80015aa:	4413      	add	r3, r2
 80015ac:	83fb      	strh	r3, [r7, #30]
  I_dc_LOW_LOAD_Min_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc - I_dc_LOW_LOAD_Delta_Limit_loc);                                               /// 
 80015ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80015b0:	8c3b      	ldrh	r3, [r7, #32]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	83bb      	strh	r3, [r7, #28]

  I_dc_OVER_LOAD_Limit_loc=(uint16_t)(((float)I_dc_OVER_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                       /// (IDC_Over_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias   
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80015bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80015c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80015ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d2:	ee17 3a90 	vmov	r3, s15
 80015d6:	837b      	strh	r3, [r7, #26]
  
  DC_Load_Limit_sub->V_cap_Limit=V_cap_Limit_loc;  
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80015dc:	801a      	strh	r2, [r3, #0]
  DC_Load_Limit_sub->V_dc_Limit=V_dc_Limit_loc;  
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015e2:	821a      	strh	r2, [r3, #16]
  DC_Load_Limit_sub->I_No_load_Threshold=I_dc_NO_LOAD_Limit_loc;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80015e8:	805a      	strh	r2, [r3, #2]
  DC_Load_Limit_sub->I_No_load_Max_Threshold=I_dc_NO_LOAD_Max_Limit_loc;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015ee:	809a      	strh	r2, [r3, #4]
  DC_Load_Limit_sub->I_No_load_Min_Threshold=I_dc_NO_LOAD_Min_Limit_loc;  
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015f4:	80da      	strh	r2, [r3, #6]
  DC_Load_Limit_sub->I_Low_load_Threshold=I_dc_LOW_LOAD_Limit_loc;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80015fa:	811a      	strh	r2, [r3, #8]
  DC_Load_Limit_sub->I_Low_load_Max_Threshold=I_dc_LOW_LOAD_Max_Limit_loc;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	8bfa      	ldrh	r2, [r7, #30]
 8001600:	815a      	strh	r2, [r3, #10]
  DC_Load_Limit_sub->I_Low_load_Min_Threshold=I_dc_LOW_LOAD_Min_Limit_loc;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	8bba      	ldrh	r2, [r7, #28]
 8001606:	819a      	strh	r2, [r3, #12]
  DC_Load_Limit_sub->I_Over_load_Threshold=I_dc_OVER_LOAD_Limit_loc;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	8b7a      	ldrh	r2, [r7, #26]
 800160c:	81da      	strh	r2, [r3, #14]
  
  
}
 800160e:	bf00      	nop
 8001610:	3734      	adds	r7, #52	; 0x34
 8001612:	46bd      	mov	sp, r7
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	bf00      	nop
 8001618:	9999999a 	.word	0x9999999a
 800161c:	3fc99999 	.word	0x3fc99999
 8001620:	33333333 	.word	0x33333333
 8001624:	3fd33333 	.word	0x3fd33333

08001628 <DPC_MISC_ACSource_Init>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

void DPC_MISC_ACSource_Init(DPC_Source_Limit_TypeDef *AC_Source_Limit_sub,uint16_t V_ac_Limit_VOLT,uint16_t V_ac_UV_Limit_VOLT,uint16_t V_ac_UVLO_Limit_VOLT,uint16_t V_ac_Low_Limit_VOLT,uint16_t I_ac_Limit_AMP,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8001628:	b480      	push	{r7}
 800162a:	b08b      	sub	sp, #44	; 0x2c
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	4608      	mov	r0, r1
 8001632:	4611      	mov	r1, r2
 8001634:	461a      	mov	r2, r3
 8001636:	4603      	mov	r3, r0
 8001638:	817b      	strh	r3, [r7, #10]
 800163a:	460b      	mov	r3, r1
 800163c:	813b      	strh	r3, [r7, #8]
 800163e:	4613      	mov	r3, r2
 8001640:	80fb      	strh	r3, [r7, #6]
  uint16_t V_ac_neg_Low_Limit_loc;                                                                                                      /*!< >*/
  
  uint16_t I_ac_pos_Limit_loc;                                                                                                          /*!< >*/
  uint16_t I_ac_neg_Limit_loc;                                                                                                          /*!< >*/
   
  V_ac_pos_Limit_loc=(uint16_t)(((float)V_ac_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                              /*!< >*/
 8001642:	897b      	ldrh	r3, [r7, #10]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800164c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001658:	edd3 7a02 	vldr	s15, [r3, #8]
 800165c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001664:	ee17 3a90 	vmov	r3, s15
 8001668:	84fb      	strh	r3, [r7, #38]	; 0x26
  V_ac_neg_Limit_loc=(uint16_t)(((float)-V_ac_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                             /*!< >*/
 800166a:	897b      	ldrh	r3, [r7, #10]
 800166c:	425b      	negs	r3, r3
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001682:	edd3 7a02 	vldr	s15, [r3, #8]
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168e:	ee17 3a90 	vmov	r3, s15
 8001692:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  V_ac_pos_UVLO_Limit_loc=(uint16_t)(((float)V_ac_UVLO_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                    /*!< >*/
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800169e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b6:	ee17 3a90 	vmov	r3, s15
 80016ba:	847b      	strh	r3, [r7, #34]	; 0x22
  V_ac_neg_UVLO_Limit_loc=(uint16_t)(((float)-V_ac_UVLO_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                   /*!< >*/
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	425b      	negs	r3, r3
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	843b      	strh	r3, [r7, #32]
  
  V_ac_pos_UV_Limit_loc=(uint16_t)(((float)V_ac_UV_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                        /*!< >*/
 80016e6:	893b      	ldrh	r3, [r7, #8]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001708:	ee17 3a90 	vmov	r3, s15
 800170c:	83fb      	strh	r3, [r7, #30]
  V_ac_neg_UV_Limit_loc=(uint16_t)(((float)-V_ac_UV_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                       /*!< >*/
 800170e:	893b      	ldrh	r3, [r7, #8]
 8001710:	425b      	negs	r3, r3
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800171a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001726:	edd3 7a02 	vldr	s15, [r3, #8]
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001732:	ee17 3a90 	vmov	r3, s15
 8001736:	83bb      	strh	r3, [r7, #28]
  
  V_ac_pos_Low_Limit_loc=(uint16_t)(((float)V_ac_Low_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                      /*!< >*/
 8001738:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800175a:	ee17 3a90 	vmov	r3, s15
 800175e:	837b      	strh	r3, [r7, #26]
  V_ac_neg_Low_Limit_loc=(uint16_t)(((float)-V_ac_Low_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                     /*!< >*/
 8001760:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001762:	425b      	negs	r3, r3
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800176c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001778:	edd3 7a02 	vldr	s15, [r3, #8]
 800177c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001784:	ee17 3a90 	vmov	r3, s15
 8001788:	833b      	strh	r3, [r7, #24]
  
  I_ac_pos_Limit_loc=(uint16_t)(((float)I_ac_Limit_AMP*DPC_ADC_Conf_loc->G_Iac)+DPC_ADC_Conf_loc->B_Iac);                               /*!< >*/
 800178a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001796:	edd3 7a03 	vldr	s15, [r3, #12]
 800179a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800179e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ac:	ee17 3a90 	vmov	r3, s15
 80017b0:	82fb      	strh	r3, [r7, #22]
  I_ac_neg_Limit_loc=(uint16_t)(((float)-I_ac_Limit_AMP*DPC_ADC_Conf_loc->G_Iac)+DPC_ADC_Conf_loc->B_Iac);                              /*!< >*/
 80017b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80017b4:	425b      	negs	r3, r3
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80017c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80017ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d6:	ee17 3a90 	vmov	r3, s15
 80017da:	82bb      	strh	r3, [r7, #20]
  
  
  AC_Source_Limit_sub->V_ac_pos_Limit=V_ac_pos_Limit_loc;                                                                               /*!< >*/
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80017e0:	801a      	strh	r2, [r3, #0]
  AC_Source_Limit_sub->V_ac_neg_Limit=V_ac_neg_Limit_loc;                                                                               /*!< >*/
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017e6:	805a      	strh	r2, [r3, #2]
  
  AC_Source_Limit_sub->V_ac_pos_UVLO_Limit=V_ac_pos_UVLO_Limit_loc;                                                                     /*!< >*/
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80017ec:	809a      	strh	r2, [r3, #4]
  AC_Source_Limit_sub->V_ac_neg_UVLO_Limit=V_ac_neg_UVLO_Limit_loc;                                                                     /*!< >*/  
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8c3a      	ldrh	r2, [r7, #32]
 80017f2:	80da      	strh	r2, [r3, #6]
    
  AC_Source_Limit_sub->V_ac_pos_UV_Limit=V_ac_pos_UV_Limit_loc;                                                                         /*!< >*/
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8bfa      	ldrh	r2, [r7, #30]
 80017f8:	811a      	strh	r2, [r3, #8]
  AC_Source_Limit_sub->V_ac_neg_UV_Limit=V_ac_neg_UV_Limit_loc;                                                                         /*!< >*/
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8bba      	ldrh	r2, [r7, #28]
 80017fe:	815a      	strh	r2, [r3, #10]
    
  AC_Source_Limit_sub->V_ac_pos_Low_Limit=V_ac_pos_Low_Limit_loc;                                                                       /*!< >*/
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8b7a      	ldrh	r2, [r7, #26]
 8001804:	819a      	strh	r2, [r3, #12]
  AC_Source_Limit_sub->V_ac_neg_Low_Limit=V_ac_neg_Low_Limit_loc;                                                                       /*!< >*/
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8b3a      	ldrh	r2, [r7, #24]
 800180a:	81da      	strh	r2, [r3, #14]
  
  AC_Source_Limit_sub->I_ac_pos_Limit=I_ac_pos_Limit_loc;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8afa      	ldrh	r2, [r7, #22]
 8001810:	821a      	strh	r2, [r3, #16]
  AC_Source_Limit_sub->I_ac_neg_Limit=I_ac_neg_Limit_loc;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8aba      	ldrh	r2, [r7, #20]
 8001816:	825a      	strh	r2, [r3, #18]
  
  
}
 8001818:	bf00      	nop
 800181a:	372c      	adds	r7, #44	; 0x2c
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <DPC_MISC_APPL_Timer_Init>:
* @retval None
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/
void DPC_MISC_APPL_Timer_Init(TIM_HandleTypeDef AppTIM, uint32_t  APPL_Freq_Desidered)
{
 8001824:	b084      	sub	sp, #16
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	f107 0c18 	add.w	ip, r7, #24
 8001830:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

  uint32_t Timers_Clock;                                                                ///
  uint32_t Timers_PSC;                                                                  ///
  uint32_t Timers_ClockPSCed;                                                           ///

  Timers_PSC=(uint32_t)(READ_REG(AppTIM.Instance->PSC));                                ///
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	60fb      	str	r3, [r7, #12]
  Timers_Clock=HAL_RCC_GetPCLK2Freq();                                                  ///  
 800183a:	f008 fb95 	bl	8009f68 <HAL_RCC_GetPCLK2Freq>
 800183e:	60b8      	str	r0, [r7, #8]
  
  Timers_ClockPSCed=(Timers_Clock/(Timers_PSC+1));                                      ///
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3301      	adds	r3, #1
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	607b      	str	r3, [r7, #4]
  
  AppTIM.Init.Period = ((Timers_ClockPSCed/APPL_Freq_Desidered) - 1);                   ///
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_TIM_Base_Init(&AppTIM) != HAL_OK){Error_Handler();}                           ///Init Task Timer  
 8001858:	f107 0018 	add.w	r0, r7, #24
 800185c:	f008 fe61 	bl	800a522 <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <DPC_MISC_APPL_Timer_Init+0x46>
 8001866:	f002 fe09 	bl	800447c <Error_Handler>
 
} 
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001874:	b004      	add	sp, #16
 8001876:	4770      	bx	lr

08001878 <DPC_MISC_Appl_Timer_Start>:




void DPC_MISC_Appl_Timer_Start(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&APPL_Tim1);  //Inizializza il Timer con IT che gestisce l'aggiornamento del duty
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <DPC_MISC_Appl_Timer_Start+0x24>)
 800187e:	f008 fea7 	bl	800a5d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&APPL_Tim3);  //Inizializza il Timer con IT che gestisce l'aggiornamento del duty
 8001882:	4807      	ldr	r0, [pc, #28]	; (80018a0 <DPC_MISC_Appl_Timer_Start+0x28>)
 8001884:	f008 fea4 	bl	800a5d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&APPL_Tim2);  //Inizializza il Timer con IT che gestisce l'aggiornamento ddel display 
 8001888:	4806      	ldr	r0, [pc, #24]	; (80018a4 <DPC_MISC_Appl_Timer_Start+0x2c>)
 800188a:	f008 fea1 	bl	800a5d0 <HAL_TIM_Base_Start_IT>
    
  HAL_TIM_PWM_Start(&APPL_Tim4, TIM_CHANNEL_1);   
 800188e:	2100      	movs	r1, #0
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <DPC_MISC_Appl_Timer_Start+0x30>)
 8001892:	f008 ff15 	bl	800a6c0 <HAL_TIM_PWM_Start>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000b98c 	.word	0x2000b98c
 80018a0:	2000b940 	.word	0x2000b940
 80018a4:	2000b8f4 	.word	0x2000b8f4
 80018a8:	2000b8a8 	.word	0x2000b8a8

080018ac <DPC_MISC_CHECK_AC_SOURCE>:
* @retval void
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

DPC_Source_Status_TypeDef DPC_MISC_CHECK_AC_SOURCE(DPC_Source_TypeDef  *AC_Source_sub,DPC_Source_Limit_TypeDef AC_Source_Limit_sub,float Theta){
 80018ac:	b084      	sub	sp, #16
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b08c      	sub	sp, #48	; 0x30
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80018ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80018be:	ed87 0a00 	vstr	s0, [r7]
  
  DPC_Source_Status_TypeDef Status_Source = AC_Source_sub->Status_Source; 
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7a1b      	ldrb	r3, [r3, #8]
 80018c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  float Theta_start = 0.08;                                                                             /*!< Approximation of 2Pi to define the SIN near to zero crossing>*/
 80018ca:	4b84      	ldr	r3, [pc, #528]	; (8001adc <DPC_MISC_CHECK_AC_SOURCE+0x230>)
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  float Theta_stop = 6.20;                                                                              /*!< Approximation of 2Pi to define the SIN near to zero crossing>*/
 80018ce:	4b84      	ldr	r3, [pc, #528]	; (8001ae0 <DPC_MISC_CHECK_AC_SOURCE+0x234>)
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint16_t I_ac_pos_Limit_local;                                                                        /*!< >*/
  uint16_t I_ac_neg_Limit_local;                                                                        /*!< >*/
  
  
  V_ac_pos_Limit_local=AC_Source_Limit_sub.V_ac_pos_Limit;                                              /*!< >*/
 80018d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80018d4:	847b      	strh	r3, [r7, #34]	; 0x22
  V_ac_neg_Limit_local=AC_Source_Limit_sub.V_ac_neg_Limit;                                              /*!< >*/
 80018d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018d8:	843b      	strh	r3, [r7, #32]
  
  V_ac_pos_UVLO_Limit_local=AC_Source_Limit_sub.V_ac_pos_UVLO_Limit;                                    /*!< >*/
 80018da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018de:	83fb      	strh	r3, [r7, #30]
  V_ac_neg_UVLO_Limit_local=AC_Source_Limit_sub.V_ac_neg_UVLO_Limit;                                    /*!< >*/
 80018e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80018e4:	83bb      	strh	r3, [r7, #28]
  
  V_ac_pos_UV_Limit_local=AC_Source_Limit_sub.V_ac_pos_UV_Limit;                                        /*!< >*/
 80018e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018ea:	837b      	strh	r3, [r7, #26]
  V_ac_neg_UV_Limit_local=AC_Source_Limit_sub.V_ac_neg_UV_Limit;                                        /*!< >*/
 80018ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80018f0:	833b      	strh	r3, [r7, #24]
  
  V_ac_pos_Low_Limit_local=AC_Source_Limit_sub.V_ac_pos_Low_Limit;                                      /*!< >*/
 80018f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80018f6:	82fb      	strh	r3, [r7, #22]
  V_ac_neg_Low_Limit_local=AC_Source_Limit_sub.V_ac_neg_Low_Limit;                                      /*!< >*/
 80018f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018fc:	82bb      	strh	r3, [r7, #20]
  
  I_ac_pos_Limit_local=AC_Source_Limit_sub.I_ac_pos_Limit;                                              /*!< >*/
 80018fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001902:	827b      	strh	r3, [r7, #18]
  I_ac_neg_Limit_local=AC_Source_Limit_sub.I_ac_neg_Limit;                                              /*!< >*/
 8001904:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001908:	823b      	strh	r3, [r7, #16]
  
  
  
  DATA_VAC = Read_GRID();                                                                               /*!< >*/
 800190a:	f7ff f963 	bl	8000bd4 <Read_GRID>
 800190e:	60f8      	str	r0, [r7, #12]
  DATA_IAC = Read_Curr_GRID();                                                                          /*!< >*/
 8001910:	f7ff f96a 	bl	8000be8 <Read_Curr_GRID>
 8001914:	60b8      	str	r0, [r7, #8]
  
  
	if((DATA_IAC->phA > I_ac_pos_Limit_local) || (DATA_IAC->phA < I_ac_neg_Limit_local))
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	8a7b      	ldrh	r3, [r7, #18]
 800191c:	429a      	cmp	r2, r3
 800191e:	d804      	bhi.n	800192a <DPC_MISC_CHECK_AC_SOURCE+0x7e>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	8a3b      	ldrh	r3, [r7, #16]
 8001926:	429a      	cmp	r2, r3
 8001928:	d202      	bcs.n	8001930 <DPC_MISC_CHECK_AC_SOURCE+0x84>
	{
		Status_Source=OVERCURRENT_SOURCE;
 800192a:	2306      	movs	r3, #6
 800192c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		//DPC_FLT_Faulterror_Set(FAULT_OCS);
	}

	if((DATA_IAC->phB > I_ac_pos_Limit_local) || (DATA_IAC->phB < I_ac_neg_Limit_local))
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	8a7b      	ldrh	r3, [r7, #18]
 8001936:	429a      	cmp	r2, r3
 8001938:	d804      	bhi.n	8001944 <DPC_MISC_CHECK_AC_SOURCE+0x98>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	8a3b      	ldrh	r3, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d202      	bcs.n	800194a <DPC_MISC_CHECK_AC_SOURCE+0x9e>
	{
		Status_Source=OVERCURRENT_SOURCE;
 8001944:	2306      	movs	r3, #6
 8001946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
//    Status_Source=OVERVOLTAGE_SOURCE;
//    DPC_FLT_Faulterror_Set(FAULT_OVS);  
//  }
//  else{  
    
    if(Theta<=Theta_start){    
 800194a:	ed97 7a00 	vldr	s14, [r7]
 800194e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	d812      	bhi.n	8001982 <DPC_MISC_CHECK_AC_SOURCE+0xd6>
      /// Reset pk max & pk min of AC Voltage    
      AC_Source_sub->V_ac_pk_pos_local=0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	801a      	strh	r2, [r3, #0]
      AC_Source_sub->V_ac_pk_neg_local=1<<12;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001968:	805a      	strh	r2, [r3, #2]
      /// Reset pk max & pk min of AC Current  
      AC_Source_sub->I_ac_pk_pos_local=0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	809a      	strh	r2, [r3, #4]
      AC_Source_sub->I_ac_pk_neg_local=1<<12;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001976:	80da      	strh	r2, [r3, #6]
      Status_Source=AC_Source_sub->Status_Source;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7a1b      	ldrb	r3, [r3, #8]
 800197c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001980:	e09e      	b.n	8001ac0 <DPC_MISC_CHECK_AC_SOURCE+0x214>
    }
    else if(Theta>Theta_start && Theta<Theta_stop){
 8001982:	ed97 7a00 	vldr	s14, [r7]
 8001986:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800198a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800198e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001992:	dd39      	ble.n	8001a08 <DPC_MISC_CHECK_AC_SOURCE+0x15c>
 8001994:	ed97 7a00 	vldr	s14, [r7]
 8001998:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800199c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	d530      	bpl.n	8001a08 <DPC_MISC_CHECK_AC_SOURCE+0x15c>
      /// Determinate pk max & pk min of AC Voltage
      if(AC_Source_sub->V_ac_pk_pos_local<DATA_VAC->phA){
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d204      	bcs.n	80019be <DPC_MISC_CHECK_AC_SOURCE+0x112>
        AC_Source_sub->V_ac_pk_pos_local=DATA_VAC->phA;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	801a      	strh	r2, [r3, #0]
      }
      if(AC_Source_sub->V_ac_pk_neg_local>DATA_VAC->phA){
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	885b      	ldrh	r3, [r3, #2]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d904      	bls.n	80019d6 <DPC_MISC_CHECK_AC_SOURCE+0x12a>
        AC_Source_sub->V_ac_pk_neg_local=DATA_VAC->phA;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	805a      	strh	r2, [r3, #2]
      }
      /// Determinate pk max & pk min of AC Current
      
      if(AC_Source_sub->I_ac_pk_pos_local<DATA_IAC->phA){
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	889b      	ldrh	r3, [r3, #4]
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d204      	bcs.n	80019ee <DPC_MISC_CHECK_AC_SOURCE+0x142>
        AC_Source_sub->I_ac_pk_pos_local=DATA_IAC->phA;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	809a      	strh	r2, [r3, #4]
      }
      if(AC_Source_sub->I_ac_pk_neg_local>DATA_IAC->phA){
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	88db      	ldrh	r3, [r3, #6]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d961      	bls.n	8001ac0 <DPC_MISC_CHECK_AC_SOURCE+0x214>
        AC_Source_sub->I_ac_pk_neg_local=DATA_IAC->phA;
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	80da      	strh	r2, [r3, #6]
      if(AC_Source_sub->I_ac_pk_neg_local>DATA_IAC->phA){
 8001a06:	e05b      	b.n	8001ac0 <DPC_MISC_CHECK_AC_SOURCE+0x214>
      }
      
    }
    else if(Theta>=Theta_stop){
 8001a08:	ed97 7a00 	vldr	s14, [r7]
 8001a0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	db52      	blt.n	8001ac0 <DPC_MISC_CHECK_AC_SOURCE+0x214>
      
      if((AC_Source_sub->V_ac_pk_pos_local == 0) || (AC_Source_sub->V_ac_pk_neg_local == 1<<12)){ 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <DPC_MISC_CHECK_AC_SOURCE+0x180>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	885b      	ldrh	r3, [r3, #2]
 8001a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2a:	d103      	bne.n	8001a34 <DPC_MISC_CHECK_AC_SOURCE+0x188>
        Status_Source=WAIT_SOURCE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001a32:	e045      	b.n	8001ac0 <DPC_MISC_CHECK_AC_SOURCE+0x214>
      }
      else{
        if((AC_Source_sub->V_ac_pk_pos_local > V_ac_pos_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local < V_ac_neg_Limit_local)){
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d20b      	bcs.n	8001a56 <DPC_MISC_CHECK_AC_SOURCE+0x1aa>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	885b      	ldrh	r3, [r3, #2]
 8001a42:	8c3a      	ldrh	r2, [r7, #32]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d906      	bls.n	8001a56 <DPC_MISC_CHECK_AC_SOURCE+0x1aa>
          Status_Source=OVERVOLTAGE_SOURCE;
 8001a48:	2305      	movs	r3, #5
 8001a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(FAULT_OVS);
 8001a4e:	2010      	movs	r0, #16
 8001a50:	f7ff f8e8 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 8001a54:	e034      	b.n	8001ac0 <DPC_MISC_CHECK_AC_SOURCE+0x214>
        } 
        else if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_Low_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_Low_Limit_local)){
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	8afa      	ldrh	r2, [r7, #22]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d90c      	bls.n	8001a7a <DPC_MISC_CHECK_AC_SOURCE+0x1ce>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	885b      	ldrh	r3, [r3, #2]
 8001a64:	8aba      	ldrh	r2, [r7, #20]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d207      	bcs.n	8001a7a <DPC_MISC_CHECK_AC_SOURCE+0x1ce>
          Status_Source=NO_SOURCE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(ERROR_AC_OFF);
 8001a70:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001a74:	f7ff f8d6 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 8001a78:	e022      	b.n	8001ac0 <DPC_MISC_CHECK_AC_SOURCE+0x214>
        }
        else if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_UV_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_UV_Limit_local)){
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	8b7a      	ldrh	r2, [r7, #26]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d90c      	bls.n	8001a9e <DPC_MISC_CHECK_AC_SOURCE+0x1f2>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	885b      	ldrh	r3, [r3, #2]
 8001a88:	8b3a      	ldrh	r2, [r7, #24]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d207      	bcs.n	8001a9e <DPC_MISC_CHECK_AC_SOURCE+0x1f2>
          Status_Source=UV_SOURCE;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(ERROR_AC_UV); 
 8001a94:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001a98:	f7ff f8c4 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 8001a9c:	e010      	b.n	8001ac0 <DPC_MISC_CHECK_AC_SOURCE+0x214>
        }      
        else {
          Status_Source=OK_SOURCE;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_UVLO_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_UVLO_Limit_local)){
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	8bfa      	ldrh	r2, [r7, #30]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d908      	bls.n	8001ac0 <DPC_MISC_CHECK_AC_SOURCE+0x214>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	885b      	ldrh	r3, [r3, #2]
 8001ab2:	8bba      	ldrh	r2, [r7, #28]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d203      	bcs.n	8001ac0 <DPC_MISC_CHECK_AC_SOURCE+0x214>
            DPC_FLT_Faulterror_Set(ERROR_AC_UVLO);
 8001ab8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001abc:	f7ff f8b2 	bl	8000c24 <DPC_FLT_Faulterror_Set>
  //    }
  //    Status_Source=OK_SOURCE;   
  //  }    
  //  }
  
  AC_Source_sub->Status_Source=Status_Source;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001ac6:	721a      	strb	r2, [r3, #8]
  return Status_Source;
 8001ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3730      	adds	r7, #48	; 0x30
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ad6:	b004      	add	sp, #16
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	3da3d70a 	.word	0x3da3d70a
 8001ae0:	40c66666 	.word	0x40c66666

08001ae4 <DPC_PLL_Init>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DPC_PLL_Init(PLL_Struct *PLL_sub, float kp_pll, float ki_pll, float Ts_pll, float phi_2pi, float delta_freq, uint8_t uFeedforward_Hz, FlagStatus satPI_toggle,float PIsat_up,float PIsat_down){
 8001ae4:	b480      	push	{r7}
 8001ae6:	b08b      	sub	sp, #44	; 0x2c
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6278      	str	r0, [r7, #36]	; 0x24
 8001aec:	ed87 0a08 	vstr	s0, [r7, #32]
 8001af0:	edc7 0a07 	vstr	s1, [r7, #28]
 8001af4:	ed87 1a06 	vstr	s2, [r7, #24]
 8001af8:	edc7 1a05 	vstr	s3, [r7, #20]
 8001afc:	ed87 2a04 	vstr	s4, [r7, #16]
 8001b00:	460b      	mov	r3, r1
 8001b02:	edc7 2a02 	vstr	s5, [r7, #8]
 8001b06:	ed87 3a01 	vstr	s6, [r7, #4]
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	73bb      	strb	r3, [r7, #14]

PLL_sub->PLL_Enable=SET;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
PLL_sub->kp_pll=kp_pll;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	6a3a      	ldr	r2, [r7, #32]
 8001b1c:	61da      	str	r2, [r3, #28]
PLL_sub->ki_pll=ki_pll;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	621a      	str	r2, [r3, #32]
PLL_sub->k0_pll=kp_pll;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	6a3a      	ldr	r2, [r7, #32]
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
PLL_sub->k1_pll=ki_pll*Ts_pll;
 8001b2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
PLL_sub->Ts_pll=Ts_pll;
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c
PLL_sub->pll_phi_2pi=phi_2pi;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	60da      	str	r2, [r3, #12]
PLL_sub->delta_freq=delta_freq;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
PLL_sub->uFreqFeedforwardHz=uFeedforward_Hz;
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
PLL_sub->pi_pll.satPI_toggle=satPI_toggle;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	7bba      	ldrb	r2, [r7, #14]
 8001b5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
PLL_sub->pi_pll.PIsat_up=PIsat_up;
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	659a      	str	r2, [r3, #88]	; 0x58
PLL_sub->pi_pll.PIsat_down=PIsat_down;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	65da      	str	r2, [r3, #92]	; 0x5c
if(PLL_sub->PLL_Enable==SET){
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d104      	bne.n	8001b80 <DPC_PLL_Init+0x9c>
PLL_sub->Status_PLL=PLL_IDLE;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
else if(PLL_sub->PLL_Enable==RESET){
PLL_sub->Status_PLL=PLL_DISABLED;
}  
}
 8001b7e:	e008      	b.n	8001b92 <DPC_PLL_Init+0xae>
else if(PLL_sub->PLL_Enable==RESET){
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <DPC_PLL_Init+0xae>
PLL_sub->Status_PLL=PLL_DISABLED;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	2205      	movs	r2, #5
 8001b8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8001b92:	bf00      	nop
 8001b94:	372c      	adds	r7, #44	; 0x2c
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <DPC_PLL_pllqd_Run>:
  * 
  * @retval STATUS_PLL_TypeDef 
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
STATUS_PLL_TypeDef DPC_PLL_pllqd_Run(PLL_Struct *PLL_sub, VoltageAC_qd_PLL_Struct *VAC_qd_PLL,float *theta_out,  float *omega_pi_out){
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b092      	sub	sp, #72	; 0x48
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
 
  STATUS_PLL_TypeDef STATUS_PLL;
  
  if(PLL_sub->PLL_Enable)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80f0 	beq.w	8001d9a <DPC_PLL_pllqd_Run+0x1fa>
  {
  
//Pass "PLL_sub" data
//float kp_pll_sub=PLL_sub->kp_pll;                                       ///Local variable to pass kp data
//float ki_pll_sub=PLL_sub->ki_pll;                                       ///Local variable to pass ki data
float k0_pll_sub=PLL_sub->k0_pll;                                       ///Local variable to pass k0 data
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	643b      	str	r3, [r7, #64]	; 0x40
float k1_pll_sub=PLL_sub->k1_pll;                                       ///Local variable to pass k1 data
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
float pll_theta_in_sub = PLL_sub->pll_theta_in;                         /// Loacal variable to pass PLL theta input
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	63bb      	str	r3, [r7, #56]	; 0x38
float pll_theta_out_sub = PLL_sub->pll_theta_out;                       ///Local variable to pass PLL theta output
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
float Ts_pll_sub = PLL_sub->Ts_pll;                                     ///Local variable to pass Ts 
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
FlagStatus satPI_toggle_sub = PLL_sub->pi_pll.satPI_toggle;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
float PIsat_down_sub=PLL_sub->pi_pll.PIsat_down;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
float PIsat_up_sub=PLL_sub->pi_pll.PIsat_up;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
//block!!

//Pass "VAC_qd_PLL" data 
float pll_d_sub=VAC_qd_PLL->Vph_d;      //Local variable to pass Vd
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	623b      	str	r3, [r7, #32]
float pll_q_sub=VAC_qd_PLL->Vph_q;      //Local variable to pass Vq
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	61fb      	str	r3, [r7, #28]
float pll_o_sub=VAC_qd_PLL->Vph_o;      //Local variable to pass Vo
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
//Local Data 
float omega_pi_pll_sub;  //omega_pi_pll_sub represent the output of the PI of PLL
float omega_pi_ff_pll_sub; //omega_pi_pll_sub will be added by feedforward terms
  
  // Set in actual angle (input) the previous value (output) 
  pll_theta_in_sub=pll_theta_out_sub;
 8001c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c02:	63bb      	str	r3, [r7, #56]	; 0x38
  //Save this new data in the "PLL_sub" struct
  PLL_sub->pll_theta_in=pll_theta_in_sub;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c08:	601a      	str	r2, [r3, #0]
  
  //Pass and save the input "Vdq0" in "PLL_sub" struct
  PLL_sub->pll_d=pll_d_sub;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a3a      	ldr	r2, [r7, #32]
 8001c0e:	611a      	str	r2, [r3, #16]
  PLL_sub->pll_q=pll_q_sub;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	615a      	str	r2, [r3, #20]
  PLL_sub->pll_o=pll_o_sub;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	619a      	str	r2, [r3, #24]
  
  //Configure the PI for PLL (k0, k1, SAT)
  // LOOP FILTER PI         
  PI_PLL.k0=k0_pll_sub; //K0=Kp
 8001c1c:	4a69      	ldr	r2, [pc, #420]	; (8001dc4 <DPC_PLL_pllqd_Run+0x224>)
 8001c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c20:	6353      	str	r3, [r2, #52]	; 0x34
  PI_PLL.k1=k1_pll_sub; //K1=Ki*Ts
 8001c22:	4a68      	ldr	r2, [pc, #416]	; (8001dc4 <DPC_PLL_pllqd_Run+0x224>)
 8001c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c26:	6393      	str	r3, [r2, #56]	; 0x38
  
  PI_PLL.satPI_toggle=satPI_toggle_sub;
 8001c28:	4a66      	ldr	r2, [pc, #408]	; (8001dc4 <DPC_PLL_pllqd_Run+0x224>)
 8001c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c2e:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
  PI_PLL.PIsat_up=PIsat_up_sub;
 8001c32:	4a64      	ldr	r2, [pc, #400]	; (8001dc4 <DPC_PLL_pllqd_Run+0x224>)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	6213      	str	r3, [r2, #32]
  PI_PLL.PIsat_down=PIsat_down_sub;
 8001c38:	4a62      	ldr	r2, [pc, #392]	; (8001dc4 <DPC_PLL_pllqd_Run+0x224>)
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	6253      	str	r3, [r2, #36]	; 0x24
  
  
  //Task PI    
  PI(0, -pll_q_sub , &PI_PLL);
 8001c3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c42:	eef1 7a67 	vneg.f32	s15, s15
 8001c46:	485f      	ldr	r0, [pc, #380]	; (8001dc4 <DPC_PLL_pllqd_Run+0x224>)
 8001c48:	eef0 0a67 	vmov.f32	s1, s15
 8001c4c:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8001dc8 <DPC_PLL_pllqd_Run+0x228>
 8001c50:	f000 fbc6 	bl	80023e0 <PI>
  
  //Pass the internal PI (PI_PLL) data in the "PLL_sub"
  PLL_sub->pi_pll=PI_PLL;          
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a5b      	ldr	r2, [pc, #364]	; (8001dc4 <DPC_PLL_pllqd_Run+0x224>)
 8001c58:	3338      	adds	r3, #56	; 0x38
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	2248      	movs	r2, #72	; 0x48
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f009 fb42 	bl	800b2e8 <memcpy>
  
  omega_pi_pll_sub=PI_PLL.PIout_sat;
 8001c64:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <DPC_PLL_pllqd_Run+0x224>)
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	617b      	str	r3, [r7, #20]
  
  PLL_sub->omega_piout=omega_pi_pll_sub;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	631a      	str	r2, [r3, #48]	; 0x30
  
  // FEEDFORWARD
  omega_pi_ff_pll_sub=omega_pi_pll_sub+PLL_sub->uFreqFeedforwardHz;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	edc7 7a04 	vstr	s15, [r7, #16]
  
  //  VTO - SATURATED INTEGRATOR    //Substitude with Integrator() of "integrator.h" 
  
  INTEGRATOR_PLL.Ts=Ts_pll_sub;  //Pass Ts(LocalVariable) to Integrator_PLL(struct)
 8001c8a:	4a50      	ldr	r2, [pc, #320]	; (8001dcc <DPC_PLL_pllqd_Run+0x22c>)
 8001c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8e:	6013      	str	r3, [r2, #0]
  Integral(&INTEGRATOR_PLL,omega_pi_ff_pll_sub);   //Task Integrator    
 8001c90:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c94:	484d      	ldr	r0, [pc, #308]	; (8001dcc <DPC_PLL_pllqd_Run+0x22c>)
 8001c96:	f7ff fb49 	bl	800132c <Integral>
  
  // SATURATE INTEGRATOR
  if (INTEGRATOR_PLL.Integralout>1)
 8001c9a:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <DPC_PLL_pllqd_Run+0x22c>)
 8001c9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cac:	dd04      	ble.n	8001cb8 <DPC_PLL_pllqd_Run+0x118>
  {
    INTEGRATOR_PLL.Integralout=0;
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <DPC_PLL_pllqd_Run+0x22c>)
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	e010      	b.n	8001cda <DPC_PLL_pllqd_Run+0x13a>
  }
  else if (INTEGRATOR_PLL.Integralout<0)
 8001cb8:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <DPC_PLL_pllqd_Run+0x22c>)
 8001cba:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	d504      	bpl.n	8001cd2 <DPC_PLL_pllqd_Run+0x132>
  {
    INTEGRATOR_PLL.Integralout=1;
 8001cc8:	4b40      	ldr	r3, [pc, #256]	; (8001dcc <DPC_PLL_pllqd_Run+0x22c>)
 8001cca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	e003      	b.n	8001cda <DPC_PLL_pllqd_Run+0x13a>
  }
  else 
  {
    INTEGRATOR_PLL.Integralout=INTEGRATOR_PLL.Integralout;
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <DPC_PLL_pllqd_Run+0x22c>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	; (8001dcc <DPC_PLL_pllqd_Run+0x22c>)
 8001cd8:	60d3      	str	r3, [r2, #12]
  }
  
  //Pass INTEGRATOR_PLL(struct) to local PLL_sub(struct)
  PLL_sub->integrator_pll=INTEGRATOR_PLL;    
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4a3b      	ldr	r2, [pc, #236]	; (8001dcc <DPC_PLL_pllqd_Run+0x22c>)
 8001cde:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001ce2:	4615      	mov	r5, r2
 8001ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	6023      	str	r3, [r4, #0]
  
  pll_theta_out_sub=INTEGRATOR_PLL.Integralout;
 8001cec:	4b37      	ldr	r3, [pc, #220]	; (8001dcc <DPC_PLL_pllqd_Run+0x22c>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
  
  *theta_out=pll_theta_out_sub;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cf6:	601a      	str	r2, [r3, #0]
  *omega_pi_out=omega_pi_ff_pll_sub;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	601a      	str	r2, [r3, #0]
  
  PLL_sub->pll_theta_out=pll_theta_out_sub;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d02:	605a      	str	r2, [r3, #4]
  
  PLL_sub->pll_theta_out_2pi= PLL_sub->pll_theta_out*DOUBLE_PI; //Scale normalized theta to (0-2pi)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d0a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001dd0 <DPC_PLL_pllqd_Run+0x230>
 8001d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	edc3 7a02 	vstr	s15, [r3, #8]
  
  PLL_sub->omega_ff_pll=omega_pi_ff_pll_sub;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	635a      	str	r2, [r3, #52]	; 0x34
  
if((PLL_sub->omega_ff_pll-PLL_sub->uFreqFeedforwardHz)<PLL_sub->delta_freq&&(PLL_sub->omega_ff_pll-PLL_sub->uFreqFeedforwardHz)>-PLL_sub->delta_freq) ///CHECK
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8001d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	d51d      	bpl.n	8001d82 <DPC_PLL_pllqd_Run+0x1e2>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8001d52:	ee07 3a90 	vmov	s15, r3
 8001d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8001d64:	eef1 7a67 	vneg.f32	s15, s15
 8001d68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	dd07      	ble.n	8001d82 <DPC_PLL_pllqd_Run+0x1e2>
{
  PLL_sub->Status_PLL=PLL_SYNC;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  STATUS_PLL=PLL_SYNC;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001d80:	e01a      	b.n	8001db8 <DPC_PLL_pllqd_Run+0x218>
}
else
{
  PLL_sub->Status_PLL=PLL_OUTRANGE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  STATUS_PLL=PLL_OUTRANGE;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  DPC_FLT_Faulterror_Set(ERROR_PLL_OR);
 8001d90:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001d94:	f7fe ff46 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 8001d98:	e00e      	b.n	8001db8 <DPC_PLL_pllqd_Run+0x218>
}

  }
  else{
    PLL_sub->omega_ff_pll=0;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
    PLL_sub->pll_theta_out=0;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	605a      	str	r2, [r3, #4]
    PLL_sub->pll_theta_out_2pi=0;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
    STATUS_PLL=PLL_DISABLED;
 8001db2:	2305      	movs	r3, #5
 8001db4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
return STATUS_PLL;
 8001db8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3748      	adds	r7, #72	; 0x48
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc4:	200000d0 	.word	0x200000d0
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	200000b8 	.word	0x200000b8
 8001dd0:	40c90fdb 	.word	0x40c90fdb

08001dd4 <DPC_PWM_Send_Burst_PWM>:
  *
  * @retval Null 
  *
  * @note Function valid for STM32G4xx microconroller family   
  */
void DPC_PWM_Send_Burst_PWM(DPC_PWM_TypeDef *tDPC_PWM_loc,float BURST_A,float BURST_B,float BURST_C){
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001de0:	edc7 0a01 	vstr	s1, [r7, #4]
 8001de4:	ed87 1a00 	vstr	s2, [r7]
//#else
//  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//
//#endif

}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DPC_PWM_Send_Duty_SPWM>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_Send_Duty_SPWM(DPC_PWM_TypeDef *tDPC_PWM_loc,float VA,float VB,float VC, DMA_PWMDUTY_STRUCT* DMA_SRC)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b095      	sub	sp, #84	; 0x54
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6178      	str	r0, [r7, #20]
 8001dfc:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e00:	edc7 0a03 	vstr	s1, [r7, #12]
 8001e04:	ed87 1a02 	vstr	s2, [r7, #8]
 8001e08:	6079      	str	r1, [r7, #4]
  
  if(VA>1){VA=1;}
 8001e0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1a:	dd03      	ble.n	8001e24 <DPC_PWM_Send_Duty_SPWM+0x30>
 8001e1c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	e00a      	b.n	8001e3a <DPC_PWM_Send_Duty_SPWM+0x46>
  else if(VA<-1){VA=-1;}
 8001e24:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e28:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	d501      	bpl.n	8001e3a <DPC_PWM_Send_Duty_SPWM+0x46>
 8001e36:	4ba9      	ldr	r3, [pc, #676]	; (80020dc <DPC_PWM_Send_Duty_SPWM+0x2e8>)
 8001e38:	613b      	str	r3, [r7, #16]
  if(VB>=1){VB=1;}
 8001e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4a:	db03      	blt.n	8001e54 <DPC_PWM_Send_Duty_SPWM+0x60>
 8001e4c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	e00a      	b.n	8001e6a <DPC_PWM_Send_Duty_SPWM+0x76>
  else if(VB<-1){VB=-1;}
 8001e54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e58:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	d501      	bpl.n	8001e6a <DPC_PWM_Send_Duty_SPWM+0x76>
 8001e66:	4b9d      	ldr	r3, [pc, #628]	; (80020dc <DPC_PWM_Send_Duty_SPWM+0x2e8>)
 8001e68:	60fb      	str	r3, [r7, #12]
  if(VC>=1){VC=1;}
 8001e6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7a:	db03      	blt.n	8001e84 <DPC_PWM_Send_Duty_SPWM+0x90>
 8001e7c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	e00a      	b.n	8001e9a <DPC_PWM_Send_Duty_SPWM+0xa6>
  else if(VC<-1){VC=-1;}  
 8001e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e88:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e94:	d501      	bpl.n	8001e9a <DPC_PWM_Send_Duty_SPWM+0xa6>
 8001e96:	4b91      	ldr	r3, [pc, #580]	; (80020dc <DPC_PWM_Send_Duty_SPWM+0x2e8>)
 8001e98:	60bb      	str	r3, [r7, #8]

  uint16_t PWM_PERIOD_COUNTER_INT;
  PWM_PERIOD_COUNTER_INT=__HAL_HRTIM_GETPERIOD(&PWM_Tim1, HRTIM_TIMERINDEX_TIMER_A);
 8001e9a:	4b91      	ldr	r3, [pc, #580]	; (80020e0 <DPC_PWM_Send_Duty_SPWM+0x2ec>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea2:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint32_t dutyVBpos;
  uint32_t dutyVBneg;
  uint32_t dutyVCpos;
  uint32_t dutyVCneg;  
  
  if(VA>=0.0f){VApos=VA;VAneg=0;}else if(VA<0.0f){VApos=0.0f;VAneg=-1*VA;}  
 8001ea4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	db05      	blt.n	8001ebe <DPC_PWM_Send_Duty_SPWM+0xca>
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ebc:	e00f      	b.n	8001ede <DPC_PWM_Send_Duty_SPWM+0xea>
 8001ebe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	d508      	bpl.n	8001ede <DPC_PWM_Send_Duty_SPWM+0xea>
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ed2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ed6:	eef1 7a67 	vneg.f32	s15, s15
 8001eda:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  if(VB>=0.0f){VBpos=VB;VBneg=0;}else if(VB<0.0f){VBpos=0.0f;VBneg=-1*VB;}
 8001ede:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ee2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eea:	db05      	blt.n	8001ef8 <DPC_PWM_Send_Duty_SPWM+0x104>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ef6:	e00f      	b.n	8001f18 <DPC_PWM_Send_Duty_SPWM+0x124>
 8001ef8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001efc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	d508      	bpl.n	8001f18 <DPC_PWM_Send_Duty_SPWM+0x124>
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f10:	eef1 7a67 	vneg.f32	s15, s15
 8001f14:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  if(VC>=0.0f){VCpos=VC;VCneg=0;}else if(VC<0.0f){VCpos=0.0f;VCneg=-1*VC;}
 8001f18:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f24:	db05      	blt.n	8001f32 <DPC_PWM_Send_Duty_SPWM+0x13e>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f30:	e00f      	b.n	8001f52 <DPC_PWM_Send_Duty_SPWM+0x15e>
 8001f32:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	d508      	bpl.n	8001f52 <DPC_PWM_Send_Duty_SPWM+0x15e>
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f4a:	eef1 7a67 	vneg.f32	s15, s15
 8001f4e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
     dutyVAneg=(uint32_t)(VAneg*PWM_PERIOD_COUNTER_INT);
 8001f52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f68:	ee17 3a90 	vmov	r3, s15
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24

  tDPC_PWM_loc->VApos=VApos;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f72:	605a      	str	r2, [r3, #4]
  tDPC_PWM_loc->VBpos=VBpos;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f78:	60da      	str	r2, [r3, #12]
  tDPC_PWM_loc->VCpos=VCpos;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f7e:	615a      	str	r2, [r3, #20]
  tDPC_PWM_loc->VAneg=VAneg;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f84:	609a      	str	r2, [r3, #8]
  tDPC_PWM_loc->VBneg=VBneg;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f8a:	611a      	str	r2, [r3, #16]
  tDPC_PWM_loc->VCneg=VCneg;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f90:	619a      	str	r2, [r3, #24]
  
  dutyVApos=(uint32_t)(VApos*PWM_PERIOD_COUNTER_INT);
 8001f92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa8:	ee17 3a90 	vmov	r3, s15
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
  
  dutyVBpos=(uint32_t)(VBpos*PWM_PERIOD_COUNTER_INT);
 8001fae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc4:	ee17 3a90 	vmov	r3, s15
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
  dutyVBneg=(uint32_t)(VBneg*PWM_PERIOD_COUNTER_INT);
 8001fca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe0:	ee17 3a90 	vmov	r3, s15
 8001fe4:	623b      	str	r3, [r7, #32]
  
  dutyVCpos=(uint32_t)(VCpos*PWM_PERIOD_COUNTER_INT);
 8001fe6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ffc:	ee17 3a90 	vmov	r3, s15
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
  dutyVCneg=(uint32_t)(VCneg*PWM_PERIOD_COUNTER_INT); 
 8002002:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800200c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002018:	ee17 3a90 	vmov	r3, s15
 800201c:	61fb      	str	r3, [r7, #28]
  
  if(dutyVApos>=tDPC_PWM_loc->dutyMaxLim){dutyVApos=tDPC_PWM_loc->dutyMaxLim;}
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002024:	429a      	cmp	r2, r3
 8002026:	d303      	bcc.n	8002030 <DPC_PWM_Send_Duty_SPWM+0x23c>
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
 800202e:	e007      	b.n	8002040 <DPC_PWM_Send_Duty_SPWM+0x24c>
  else if(dutyVApos<tDPC_PWM_loc->dutyMinLim){dutyVApos=tDPC_PWM_loc->dutyMinLim;}
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002036:	429a      	cmp	r2, r3
 8002038:	d202      	bcs.n	8002040 <DPC_PWM_Send_Duty_SPWM+0x24c>
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
  
  if(dutyVAneg>=tDPC_PWM_loc->dutyMaxLim){dutyVAneg=tDPC_PWM_loc->dutyMaxLim;}
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002046:	429a      	cmp	r2, r3
 8002048:	d303      	bcc.n	8002052 <DPC_PWM_Send_Duty_SPWM+0x25e>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
 8002050:	e007      	b.n	8002062 <DPC_PWM_Send_Duty_SPWM+0x26e>
  else if(dutyVAneg<tDPC_PWM_loc->dutyMinLim){dutyVAneg=tDPC_PWM_loc->dutyMinLim;}
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002058:	429a      	cmp	r2, r3
 800205a:	d202      	bcs.n	8002062 <DPC_PWM_Send_Duty_SPWM+0x26e>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(dutyVBpos>=tDPC_PWM_loc->dutyMaxLim){dutyVBpos=tDPC_PWM_loc->dutyMaxLim;}
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002068:	429a      	cmp	r2, r3
 800206a:	d303      	bcc.n	8002074 <DPC_PWM_Send_Duty_SPWM+0x280>
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
 8002072:	e007      	b.n	8002084 <DPC_PWM_Send_Duty_SPWM+0x290>
  else if(dutyVBpos<tDPC_PWM_loc->dutyMinLim){dutyVBpos=tDPC_PWM_loc->dutyMinLim;}
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800207a:	429a      	cmp	r2, r3
 800207c:	d202      	bcs.n	8002084 <DPC_PWM_Send_Duty_SPWM+0x290>
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  
  if(dutyVBneg>tDPC_PWM_loc->dutyMaxLim){dutyVBneg=tDPC_PWM_loc->dutyMaxLim;}
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	6a3a      	ldr	r2, [r7, #32]
 800208a:	429a      	cmp	r2, r3
 800208c:	d903      	bls.n	8002096 <DPC_PWM_Send_Duty_SPWM+0x2a2>
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	623b      	str	r3, [r7, #32]
 8002094:	e007      	b.n	80020a6 <DPC_PWM_Send_Duty_SPWM+0x2b2>
  else if(dutyVBneg<tDPC_PWM_loc->dutyMinLim){dutyVBneg=tDPC_PWM_loc->dutyMinLim;}
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	6a3a      	ldr	r2, [r7, #32]
 800209c:	429a      	cmp	r2, r3
 800209e:	d202      	bcs.n	80020a6 <DPC_PWM_Send_Duty_SPWM+0x2b2>
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	623b      	str	r3, [r7, #32]
  
  if(dutyVCpos>=tDPC_PWM_loc->dutyMaxLim){dutyVCpos=tDPC_PWM_loc->dutyMaxLim;}
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d303      	bcc.n	80020b8 <DPC_PWM_Send_Duty_SPWM+0x2c4>
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b6:	e007      	b.n	80020c8 <DPC_PWM_Send_Duty_SPWM+0x2d4>
  else if(dutyVCpos<tDPC_PWM_loc->dutyMinLim){dutyVCpos=tDPC_PWM_loc->dutyMinLim;}
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020be:	429a      	cmp	r2, r3
 80020c0:	d202      	bcs.n	80020c8 <DPC_PWM_Send_Duty_SPWM+0x2d4>
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(dutyVCneg>=tDPC_PWM_loc->dutyMaxLim){dutyVCneg=tDPC_PWM_loc->dutyMaxLim;}
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d308      	bcc.n	80020e4 <DPC_PWM_Send_Duty_SPWM+0x2f0>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	e00c      	b.n	80020f4 <DPC_PWM_Send_Duty_SPWM+0x300>
 80020da:	bf00      	nop
 80020dc:	bf800000 	.word	0xbf800000
 80020e0:	20000340 	.word	0x20000340
  else if(dutyVCneg<tDPC_PWM_loc->dutyMinLim){dutyVCneg=tDPC_PWM_loc->dutyMinLim;}   
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d202      	bcs.n	80020f4 <DPC_PWM_Send_Duty_SPWM+0x300>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	61fb      	str	r3, [r7, #28]
//  if (dutyVApos<=500){
//	  //HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA1);
//	  dutyVApos=0;
//  }
  //else HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA1);
  	DMA_SRC->phA=dutyVApos;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f8:	601a      	str	r2, [r3, #0]
  	DMA_SRC->phB=dutyVBpos;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020fe:	605a      	str	r2, [r3, #4]
  	DMA_SRC->phC=dutyVCpos;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002104:	609a      	str	r2, [r3, #8]
//#endif
//#else
//  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
//    return;
}
 8002106:	bf00      	nop
 8002108:	3754      	adds	r7, #84	; 0x54
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop

08002114 <DPC_PWM_HRTIM_Start>:
*
* @note Function valid for STM32G4xx microconroller family   
*/

void DPC_PWM_HRTIM_Start(void)
{     
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
//                                 + HRTIM_TIMERID_TIMER_E + HRTIM_TIMERID_TIMER_F);
//  HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1 + HRTIM_OUTPUT_TA2 + HRTIM_OUTPUT_TB1 + HRTIM_OUTPUT_TB2 + HRTIM_OUTPUT_TC1 + HRTIM_OUTPUT_TC2 + + HRTIM_OUTPUT_TD1 + HRTIM_OUTPUT_TD2 + HRTIM_OUTPUT_TE1 + HRTIM_OUTPUT_TE2 + HRTIM_OUTPUT_TF1 + HRTIM_OUTPUT_TF2);

//	HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_A + HRTIM_TIMERID_TIMER_B + HRTIM_TIMERID_TIMER_C);

	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_A);
 8002118:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800211c:	480d      	ldr	r0, [pc, #52]	; (8002154 <DPC_PWM_HRTIM_Start+0x40>)
 800211e:	f006 f9d3 	bl	80084c8 <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
 8002122:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002126:	480b      	ldr	r0, [pc, #44]	; (8002154 <DPC_PWM_HRTIM_Start+0x40>)
 8002128:	f006 f9ce 	bl	80084c8 <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);
 800212c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002130:	4808      	ldr	r0, [pc, #32]	; (8002154 <DPC_PWM_HRTIM_Start+0x40>)
 8002132:	f006 f9c9 	bl	80084c8 <HAL_HRTIM_WaveformCountStart_DMA>
	//HAL_HRTIM_WaveformCountStart_DMA(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A);
	//HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
	//HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);

	//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1);
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1);
 8002136:	2101      	movs	r1, #1
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <DPC_PWM_HRTIM_Start+0x40>)
 800213a:	f006 f96a 	bl	8008412 <HAL_HRTIM_WaveformOutputStart>
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TB1);
 800213e:	2104      	movs	r1, #4
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <DPC_PWM_HRTIM_Start+0x40>)
 8002142:	f006 f966 	bl	8008412 <HAL_HRTIM_WaveformOutputStart>
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TC1);
 8002146:	2110      	movs	r1, #16
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <DPC_PWM_HRTIM_Start+0x40>)
 800214a:	f006 f962 	bl	8008412 <HAL_HRTIM_WaveformOutputStart>
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000340 	.word	0x20000340

08002158 <DPC_PWM_HRTIM_OutDisable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_HRTIM_OutDisable(void)
{     
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
//#ifdef STDES_PFCBIDIR_REV2
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA1);
 800215c:	2101      	movs	r1, #1
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002160:	f006 f984 	bl	800846c <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA2);
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB1);
 8002164:	2104      	movs	r1, #4
 8002166:	4804      	ldr	r0, [pc, #16]	; (8002178 <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002168:	f006 f980 	bl	800846c <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB2);
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TC1);
 800216c:	2110      	movs	r1, #16
 800216e:	4802      	ldr	r0, [pc, #8]	; (8002178 <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002170:	f006 f97c 	bl	800846c <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA2);
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB2);
//#else
////  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000340 	.word	0x20000340

0800217c <DPC_PWM_HRTIM_OutEnable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_HRTIM_OutEnable(void)
{     
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
//#ifdef STDES_PFCBIDIR_REV2
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA1);
 8002180:	2101      	movs	r1, #1
 8002182:	4806      	ldr	r0, [pc, #24]	; (800219c <DPC_PWM_HRTIM_OutEnable+0x20>)
 8002184:	f006 f945 	bl	8008412 <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA2);
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB1);
 8002188:	2104      	movs	r1, #4
 800218a:	4804      	ldr	r0, [pc, #16]	; (800219c <DPC_PWM_HRTIM_OutEnable+0x20>)
 800218c:	f006 f941 	bl	8008412 <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB2);
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TC1);
 8002190:	2110      	movs	r1, #16
 8002192:	4802      	ldr	r0, [pc, #8]	; (800219c <DPC_PWM_HRTIM_OutEnable+0x20>)
 8002194:	f006 f93d 	bl	8008412 <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA2);
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB2);
//#else
////  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000340 	.word	0x20000340

080021a0 <DPC_PWM_OutDisable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_OutDisable(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
//#ifdef USE_ADVTIM
//    DPC_PWM_ADVTIM_OutDisable();                                                ///Safe: Disable ADVTIM outputs if enabled
//#elif USE_HRTIM
    DPC_PWM_HRTIM_OutDisable();                                                 ///Safe: Disable HRTIM outputs if enabled
 80021a4:	f7ff ffd8 	bl	8002158 <DPC_PWM_HRTIM_OutDisable>
//#else
//    SELECT DEFINE
//#endif
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}

080021ac <DPC_PWM_OutEnable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_OutEnable(DPC_PWM_TypeDef *tDPC_PWM_loc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if(tDPC_PWM_loc->DPC_PWM_Status==PWM_Armed){    
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d106      	bne.n	80021ca <DPC_PWM_OutEnable+0x1e>
//#ifdef USE_ADVTIM
//    DPC_PWM_ADVTIM_OutEnable();
//#elif USE_HRTIM
    DPC_PWM_HRTIM_OutEnable();
 80021bc:	f7ff ffde 	bl	800217c <DPC_PWM_HRTIM_OutEnable>
    HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 80021c0:	2201      	movs	r2, #1
 80021c2:	2120      	movs	r1, #32
 80021c4:	4803      	ldr	r0, [pc, #12]	; (80021d4 <DPC_PWM_OutEnable+0x28>)
 80021c6:	f005 f8e3 	bl	8007390 <HAL_GPIO_WritePin>
//#else
//    SELECT DEFINE
//#endif
  }
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	48000800 	.word	0x48000800

080021d8 <DPC_PWM_Start>:
*
* @note Function valid for STM32G4xx microconroller family   
*/

void DPC_PWM_Start(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
//#ifdef USE_ADVTIM
//  DPC_PWM_ADVTIM_PWMStart();                                                        ///
//  DPC_PWM_ADVTIM_OutDisable();                                                  ///Safe: Disable ADVTIM outputs if enabled
//#elif USE_HRTIM
  DPC_PWM_HRTIM_Start();                                                        ///
 80021dc:	f7ff ff9a 	bl	8002114 <DPC_PWM_HRTIM_Start>
  DPC_PWM_HRTIM_OutDisable();                                                   ///Safe: Disable HRTIM outputs if enabled
 80021e0:	f7ff ffba 	bl	8002158 <DPC_PWM_HRTIM_OutDisable>
//#else
//  SELECT DEFINE
//#endif
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <DPC_PWM_Init>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_Init(uint32_t  BURST_PWM_Freq_Desidered,uint32_t  PWM_Freq_Desidered,DPC_PWM_StatusTypeDef DPC_PWM_SET, DPC_PWM_TypeDef *tDPC_PWM_loc, DMA_PWMDUTY_STRUCT *DUTY_SRC)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0a0      	sub	sp, #128	; 0x80
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	71fb      	strb	r3, [r7, #7]

  uint32_t PWM_Period;                                                          ///
  uint32_t BURST_PWM_Period;                                                    ///  
  uint32_t Timers_Clock;                                                        ///
  uint32_t f_tim_ket_ck;                                                        ///  
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	2260      	movs	r2, #96	; 0x60
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f009 f87c 	bl	800b2fe <memset>
  
  
  Timers_Clock=HAL_RCC_GetPCLK2Freq();                                      ///
 8002206:	f007 feaf 	bl	8009f68 <HAL_RCC_GetPCLK2Freq>
 800220a:	67f8      	str	r0, [r7, #124]	; 0x7c
  f_tim_ket_ck=Timers_Clock;                                                /// Represent frequency Internal clock source (tim_ker_ck) expressed in Hz - see: pag-1063 RM0440 Rev1
 800220c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800220e:	67bb      	str	r3, [r7, #120]	; 0x78
  PWM_Period=((f_tim_ket_ck/PWM_Freq_Desidered) - 1)*16;                       ///  uint32_t PWM_Period;
 8002210:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	fbb2 f3f3 	udiv	r3, r2, r3
 8002218:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800221c:	3b01      	subs	r3, #1
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	677b      	str	r3, [r7, #116]	; 0x74
  BURST_PWM_Period=((f_tim_ket_ck/BURST_PWM_Freq_Desidered) - 1);           ///  uint32_t PWM_Period;
 8002222:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	673b      	str	r3, [r7, #112]	; 0x70
  tDPC_PWM_loc->dutyMaxLim=tempDEF_dutyMaxLim;                                  /// Adapt to PRESCALER
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f248 42cf 	movw	r2, #33999	; 0x84cf
 8002234:	61da      	str	r2, [r3, #28]
  tDPC_PWM_loc->dutyMinLim=tempDEF_dutyMinLim;                                  /// Adapt to PRESCALER
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
  
  tDPC_PWM_loc->PWM_Period=PWM_Period;                                          ///
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
  tDPC_PWM_loc->BURST_PWM_Period=BURST_PWM_Period;                              ///  
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
  tDPC_PWM_loc->DPC_PWM_Status=DPC_PWM_SET;                                     ///
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	79fa      	ldrb	r2, [r7, #7]
 800224c:	701a      	strb	r2, [r3, #0]

  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST;
 8002252:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002256:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMASize = 0x1;
 8002258:	2301      	movs	r3, #1
 800225a:	623b      	str	r3, [r7, #32]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002264:	2300      	movs	r3, #0
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002268:	2300      	movs	r3, #0
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800226c:	2300      	movs	r3, #0
 800226e:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002274:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002276:	2300      	movs	r3, #0
 8002278:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800227a:	2300      	movs	r3, #0
 800227c:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800227e:	2300      	movs	r3, #0
 8002280:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002282:	2300      	movs	r3, #0
 8002284:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1|HRTIM_TIMFAULTENABLE_FAULT3;
 8002286:	2305      	movs	r3, #5
 8002288:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800228a:	2300      	movs	r3, #0
 800228c:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800228e:	2300      	movs	r3, #0
 8002290:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002292:	2300      	movs	r3, #0
 8002294:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002296:	2300      	movs	r3, #0
 8002298:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800229a:	2300      	movs	r3, #0
 800229c:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 800229e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022a2:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phA;
 80022a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022ac:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[0].CMP1xR);
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <DPC_PWM_Init+0x14c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	339c      	adds	r3, #156	; 0x9c
 80022b4:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	461a      	mov	r2, r3
 80022bc:	2100      	movs	r1, #0
 80022be:	481d      	ldr	r0, [pc, #116]	; (8002334 <DPC_PWM_Init+0x14c>)
 80022c0:	f005 fe62 	bl	8007f88 <HAL_HRTIM_WaveformTimerConfig>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <DPC_PWM_Init+0xe6>
  {
    Error_Handler();
 80022ca:	f002 f8d7 	bl	800447c <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phB;
 80022ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022d2:	3304      	adds	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[1].CMP1xR);
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <DPC_PWM_Init+0x14c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80022de:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	461a      	mov	r2, r3
 80022e6:	2101      	movs	r1, #1
 80022e8:	4812      	ldr	r0, [pc, #72]	; (8002334 <DPC_PWM_Init+0x14c>)
 80022ea:	f005 fe4d 	bl	8007f88 <HAL_HRTIM_WaveformTimerConfig>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <DPC_PWM_Init+0x110>
  {
    Error_Handler();
 80022f4:	f002 f8c2 	bl	800447c <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phC;
 80022f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022fc:	3308      	adds	r3, #8
 80022fe:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[2].CMP1xR);
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <DPC_PWM_Init+0x14c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002308:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 800230a:	f107 0310 	add.w	r3, r7, #16
 800230e:	461a      	mov	r2, r3
 8002310:	2102      	movs	r1, #2
 8002312:	4808      	ldr	r0, [pc, #32]	; (8002334 <DPC_PWM_Init+0x14c>)
 8002314:	f005 fe38 	bl	8007f88 <HAL_HRTIM_WaveformTimerConfig>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <DPC_PWM_Init+0x13a>
  {
    Error_Handler();
 800231e:	f002 f8ad 	bl	800447c <Error_Handler>
  }


  DPC_PWM_Start();                                                              ///
 8002322:	f7ff ff59 	bl	80021d8 <DPC_PWM_Start>
  DPC_PWM_OutDisable();                                                         ///Safe: Disable PWM outputs if enabled 
 8002326:	f7ff ff3b 	bl	80021a0 <DPC_PWM_OutDisable>
}
 800232a:	bf00      	nop
 800232c:	3780      	adds	r7, #128	; 0x80
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000340 	.word	0x20000340

08002338 <DPC_PI_Init>:
* @retval None
*
* @note Function valid for STM32G4xx microconroller family  
*/  
void DPC_PI_Init(PI_STRUCT_t *pPI,float Init_Val_Kp,float Init_Val_Ki,float Init_Val_Ts,float Init_PIsat_up, float Init_PIsat_down,FlagStatus satPI_toggle_local,FlagStatus antiwindPI_toggle_local,float Antiwindup_Gain_local)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	61f8      	str	r0, [r7, #28]
 8002340:	ed87 0a06 	vstr	s0, [r7, #24]
 8002344:	edc7 0a05 	vstr	s1, [r7, #20]
 8002348:	ed87 1a04 	vstr	s2, [r7, #16]
 800234c:	edc7 1a03 	vstr	s3, [r7, #12]
 8002350:	ed87 2a02 	vstr	s4, [r7, #8]
 8002354:	460b      	mov	r3, r1
 8002356:	edc7 2a00 	vstr	s5, [r7]
 800235a:	71fb      	strb	r3, [r7, #7]
 800235c:	4613      	mov	r3, r2
 800235e:	71bb      	strb	r3, [r7, #6]
  pPI->Kp=Init_Val_Kp;
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	609a      	str	r2, [r3, #8]
  pPI->Ki=Init_Val_Ki;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	60da      	str	r2, [r3, #12]
  pPI->Ts=Init_Val_Ts;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	611a      	str	r2, [r3, #16]
  pPI->Integral=0;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	615a      	str	r2, [r3, #20]
  pPI->PIout=0;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	619a      	str	r2, [r3, #24]
  pPI->PIsat_up=Init_PIsat_up;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	621a      	str	r2, [r3, #32]
  pPI->PIsat_down=Init_PIsat_down;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	625a      	str	r2, [r3, #36]	; 0x24
  pPI->error=0;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	629a      	str	r2, [r3, #40]	; 0x28
  pPI->Integralout=0;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
  pPI->resetPI=RESET;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pPI->k0=Init_Val_Kp; //K0=Kp
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34
  pPI->k1=Init_Val_Ki*Init_Val_Ts; //K1=Ki*Ts
 80023ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80023b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  pPI->satPI_toggle=satPI_toggle_local;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	79fa      	ldrb	r2, [r7, #7]
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pPI->antiwindPI_toggle=antiwindPI_toggle_local;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	79ba      	ldrb	r2, [r7, #6]
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  pPI->Antiwindup_Gain=Antiwindup_Gain_local;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80023d4:	bf00      	nop
 80023d6:	3724      	adds	r7, #36	; 0x24
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <PI>:
* @retval float Return output data of PI regulator
*
* @note Function valid for STM32G4xx microconroller family  
*/
float PI(float Ref, float Feed , PI_STRUCT_t *pPI)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80023ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80023ee:	6078      	str	r0, [r7, #4]
pPI->Ref=Ref;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	601a      	str	r2, [r3, #0]
pPI->Feed=Feed;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	605a      	str	r2, [r3, #4]

  if(pPI->resetPI==SET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002402:	2b01      	cmp	r3, #1
 8002404:	d104      	bne.n	8002410 <PI+0x30>
  {
    pPI->Integral=0;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
 800240e:	e031      	b.n	8002474 <PI+0x94>
  }
  else{
    pPI->error=(float)Ref-(float)Feed;
 8002410:	ed97 7a03 	vldr	s14, [r7, #12]
 8002414:	edd7 7a02 	vldr	s15, [r7, #8]
 8002418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pPI->Integral=pPI->Integral+(pPI->k1*pPI->error)+pPI->Antiwindup_Term;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	ed93 7a05 	vldr	s14, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	edc3 7a05 	vstr	s15, [r3, #20]
    pPI->Integralout=pPI->Integral;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c
    pPI->PIout=(pPI->k0*pPI->error)+pPI->Integralout;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800246a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	edc3 7a06 	vstr	s15, [r3, #24]
  }

  //Start Check Saturation
  if (pPI->satPI_toggle==SET){
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800247a:	2b01      	cmp	r3, #1
 800247c:	d13e      	bne.n	80024fc <PI+0x11c>
    //Saturation
    if(    pPI->PIout>pPI->PIsat_up)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	ed93 7a06 	vldr	s14, [r3, #24]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	edd3 7a08 	vldr	s15, [r3, #32]
 800248a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002492:	dd04      	ble.n	800249e <PI+0xbe>
    {
      pPI->PIout_sat=pPI->PIsat_up;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	61da      	str	r2, [r3, #28]
 800249c:	e013      	b.n	80024c6 <PI+0xe6>
    }
    else if(    pPI->PIout<pPI->PIsat_down)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	ed93 7a06 	vldr	s14, [r3, #24]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80024aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b2:	d504      	bpl.n	80024be <PI+0xde>
    {
      pPI->PIout_sat=pPI->PIsat_down;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	61da      	str	r2, [r3, #28]
 80024bc:	e003      	b.n	80024c6 <PI+0xe6>
    }
    else {
      pPI->PIout_sat=pPI->PIout;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	61da      	str	r2, [r3, #28]
    }
     
    //Start Check Antiwindup
    if (pPI->antiwindPI_toggle==SET){
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d110      	bne.n	80024f2 <PI+0x112>
      //Saturation
      pPI->Antiwindup_Term=(pPI->PIout_sat-pPI->PIout)*pPI->Antiwindup_Gain;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	ed93 7a07 	vldr	s14, [r3, #28]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80024dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80024e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80024f0:	e00c      	b.n	800250c <PI+0x12c>
    }
    else {
      pPI->Antiwindup_Term=0;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80024fa:	e007      	b.n	800250c <PI+0x12c>
    }
    //End Check Antiwindup    
  }
  else {
    pPI->PIout_sat=pPI->PIout;  
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	61da      	str	r2, [r3, #28]
    pPI->Antiwindup_Term=0;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  //End Check Saturation
  
  return pPI->PIout_sat;  
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	ee07 3a90 	vmov	s15, r3
}
 8002514:	eeb0 0a67 	vmov.f32	s0, s15
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <TimeoutMng>:
/**
* @defgroup Private_function                                  Private Variables
  * @{
  */
void TimeoutMng(void)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
for (  uint8_t Temp = 0; Temp < TO_MAX_NUMBER; Temp++){
 800252a:	2300      	movs	r3, #0
 800252c:	71fb      	strb	r3, [r7, #7]
 800252e:	e01e      	b.n	800256e <TimeoutMng+0x4a>
    
  if(Timeout_List[Temp].State == TO_RUN){  
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <TimeoutMng+0x5c>)
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	791b      	ldrb	r3, [r3, #4]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d114      	bne.n	8002568 <TimeoutMng+0x44>
    if(Timeout_List[Temp].Count == 0){
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <TimeoutMng+0x5c>)
 8002542:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <TimeoutMng+0x34>
      Timeout_List[Temp].State = TO_TOOK;
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	4a0c      	ldr	r2, [pc, #48]	; (8002580 <TimeoutMng+0x5c>)
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	2202      	movs	r2, #2
 8002554:	711a      	strb	r2, [r3, #4]
 8002556:	e007      	b.n	8002568 <TimeoutMng+0x44>
    }
    else{
      Timeout_List[Temp].Count--;
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <TimeoutMng+0x5c>)
 800255c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002560:	3a01      	subs	r2, #1
 8002562:	4907      	ldr	r1, [pc, #28]	; (8002580 <TimeoutMng+0x5c>)
 8002564:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
for (  uint8_t Temp = 0; Temp < TO_MAX_NUMBER; Temp++){
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	3301      	adds	r3, #1
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2b05      	cmp	r3, #5
 8002572:	d9dd      	bls.n	8002530 <TimeoutMng+0xc>
    }
  }
 }
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	20000118 	.word	0x20000118

08002584 <Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void Park(float alpha, float beta, float theta,float phi, float *d, float *q){
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	ed87 0a05 	vstr	s0, [r7, #20]
 800258e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002592:	ed87 1a03 	vstr	s2, [r7, #12]
 8002596:	edc7 1a02 	vstr	s3, [r7, #8]
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
    float theta_act=theta+phi;
 800259e:	ed97 7a03 	vldr	s14, [r7, #12]
 80025a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosine = FastCos(theta_act);
 80025ae:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80025b2:	f7fe fea3 	bl	80012fc <FastCos>
 80025b6:	ed87 0a08 	vstr	s0, [r7, #32]
    float sine = FastSin(theta_act);
 80025ba:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80025be:	f7fe fe51 	bl	8001264 <FastSin>
 80025c2:	ed87 0a07 	vstr	s0, [r7, #28]
    *d = alpha*cosine + beta*sine;
 80025c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80025ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80025ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d2:	edd7 6a04 	vldr	s13, [r7, #16]
 80025d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80025da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	edc3 7a00 	vstr	s15, [r3]
    *q = -alpha*sine + beta*cosine;
 80025e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80025ec:	eeb1 7a67 	vneg.f32	s14, s15
 80025f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80025f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f8:	edd7 6a04 	vldr	s13, [r7, #16]
 80025fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	edc3 7a00 	vstr	s15, [r3]
}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <InvPark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void InvPark(float d, float q, float theta, float phi, float *alpha, float *beta){
 8002616:	b580      	push	{r7, lr}
 8002618:	b08a      	sub	sp, #40	; 0x28
 800261a:	af00      	add	r7, sp, #0
 800261c:	ed87 0a05 	vstr	s0, [r7, #20]
 8002620:	edc7 0a04 	vstr	s1, [r7, #16]
 8002624:	ed87 1a03 	vstr	s2, [r7, #12]
 8002628:	edc7 1a02 	vstr	s3, [r7, #8]
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
    float theta_act=theta+phi;
 8002630:	ed97 7a03 	vldr	s14, [r7, #12]
 8002634:	edd7 7a02 	vldr	s15, [r7, #8]
 8002638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosine = FastCos(theta_act);
 8002640:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002644:	f7fe fe5a 	bl	80012fc <FastCos>
 8002648:	ed87 0a08 	vstr	s0, [r7, #32]
    float sine = FastSin(theta_act);
 800264c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002650:	f7fe fe08 	bl	8001264 <FastSin>
 8002654:	ed87 0a07 	vstr	s0, [r7, #28]
    *alpha = d*cosine - q*sine;
 8002658:	ed97 7a05 	vldr	s14, [r7, #20]
 800265c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002664:	edd7 6a04 	vldr	s13, [r7, #16]
 8002668:	edd7 7a07 	vldr	s15, [r7, #28]
 800266c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	edc3 7a00 	vstr	s15, [r3]
    *beta =  d*sine + q*cosine;
 800267a:	ed97 7a05 	vldr	s14, [r7, #20]
 800267e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002686:	edd7 6a04 	vldr	s13, [r7, #16]
 800268a:	edd7 7a08 	vldr	s15, [r7, #32]
 800268e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	edc3 7a00 	vstr	s15, [r3]
    }
 800269c:	bf00      	nop
 800269e:	3728      	adds	r7, #40	; 0x28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	0000      	movs	r0, r0
	...

080026a8 <Clarke>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void Clarke(float a, float b,float c, float *alpha, float *beta){
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	ed87 0a05 	vstr	s0, [r7, #20]
 80026b2:	edc7 0a04 	vstr	s1, [r7, #16]
 80026b6:	ed87 1a03 	vstr	s2, [r7, #12]
 80026ba:	60b8      	str	r0, [r7, #8]
 80026bc:	6079      	str	r1, [r7, #4]
    *alpha = 0.666f*(a-(0.5f*b)-(0.5f*c));
 80026be:	edd7 7a04 	vldr	s15, [r7, #16]
 80026c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80026ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80026d6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80026da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002760 <Clarke+0xb8>
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	edc3 7a00 	vstr	s15, [r3]
    *beta = 0.666666*(0.866025*b - 0.866025*c);
 80026f0:	6938      	ldr	r0, [r7, #16]
 80026f2:	f7fd fef5 	bl	80004e0 <__aeabi_f2d>
 80026f6:	a316      	add	r3, pc, #88	; (adr r3, 8002750 <Clarke+0xa8>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	f7fd ff48 	bl	8000590 <__aeabi_dmul>
 8002700:	4603      	mov	r3, r0
 8002702:	460c      	mov	r4, r1
 8002704:	4625      	mov	r5, r4
 8002706:	461c      	mov	r4, r3
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7fd fee9 	bl	80004e0 <__aeabi_f2d>
 800270e:	a310      	add	r3, pc, #64	; (adr r3, 8002750 <Clarke+0xa8>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f7fd ff3c 	bl	8000590 <__aeabi_dmul>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4620      	mov	r0, r4
 800271e:	4629      	mov	r1, r5
 8002720:	f7fd fd7e 	bl	8000220 <__aeabi_dsub>
 8002724:	4603      	mov	r3, r0
 8002726:	460c      	mov	r4, r1
 8002728:	4618      	mov	r0, r3
 800272a:	4621      	mov	r1, r4
 800272c:	a30a      	add	r3, pc, #40	; (adr r3, 8002758 <Clarke+0xb0>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	f7fd ff2d 	bl	8000590 <__aeabi_dmul>
 8002736:	4603      	mov	r3, r0
 8002738:	460c      	mov	r4, r1
 800273a:	4618      	mov	r0, r3
 800273c:	4621      	mov	r1, r4
 800273e:	f7fe f959 	bl	80009f4 <__aeabi_d2f>
 8002742:	4602      	mov	r2, r0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	601a      	str	r2, [r3, #0]
    }
 8002748:	bf00      	nop
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bdb0      	pop	{r4, r5, r7, pc}
 8002750:	0f9096bc 	.word	0x0f9096bc
 8002754:	3febb67a 	.word	0x3febb67a
 8002758:	ef6b5d46 	.word	0xef6b5d46
 800275c:	3fe55553 	.word	0x3fe55553
 8002760:	3f2a7efa 	.word	0x3f2a7efa

08002764 <InvClarke>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void InvClarke(float alpha, float beta, float *a, float *b, float *c){
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	ed87 0a05 	vstr	s0, [r7, #20]
 800276e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
    *a = alpha;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	601a      	str	r2, [r3, #0]
    *b = 0.5f*(-alpha + 1.73205080757f*beta);
 800277e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002782:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80027d4 <InvClarke+0x70>
 8002786:	ee27 7a87 	vmul.f32	s14, s15, s14
 800278a:	edd7 7a05 	vldr	s15, [r7, #20]
 800278e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002792:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	edc3 7a00 	vstr	s15, [r3]
    *c = 0.5f*(-alpha - 1.73205080757f*beta);
 80027a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a4:	eeb1 7a67 	vneg.f32	s14, s15
 80027a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80027ac:	eddf 6a09 	vldr	s13, [pc, #36]	; 80027d4 <InvClarke+0x70>
 80027b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	edc3 7a00 	vstr	s15, [r3]
} 
 80027c6:	bf00      	nop
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	3fddb3d7 	.word	0x3fddb3d7

080027d8 <Clarke_Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void Clarke_Park(float a, float b, float c, float theta,float phi, float *d, float *q,float *o){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af00      	add	r7, sp, #0
 80027de:	ed87 0a07 	vstr	s0, [r7, #28]
 80027e2:	edc7 0a06 	vstr	s1, [r7, #24]
 80027e6:	ed87 1a05 	vstr	s2, [r7, #20]
 80027ea:	edc7 1a04 	vstr	s3, [r7, #16]
 80027ee:	ed87 2a03 	vstr	s4, [r7, #12]
 80027f2:	60b8      	str	r0, [r7, #8]
 80027f4:	6079      	str	r1, [r7, #4]
 80027f6:	603a      	str	r2, [r7, #0]
float beta_sub;
float d_sub;
float q_sub;
//float o_sub;  
  
Clarke(a, b, c, &alpha_sub, &beta_sub);
 80027f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	ed97 1a05 	vldr	s2, [r7, #20]
 8002808:	edd7 0a06 	vldr	s1, [r7, #24]
 800280c:	ed97 0a07 	vldr	s0, [r7, #28]
 8002810:	f7ff ff4a 	bl	80026a8 <Clarke>
Park(alpha_sub, beta_sub, theta,phi, &d_sub, &q_sub);
 8002814:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002818:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800281c:	f107 0220 	add.w	r2, r7, #32
 8002820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002824:	4611      	mov	r1, r2
 8002826:	4618      	mov	r0, r3
 8002828:	edd7 1a03 	vldr	s3, [r7, #12]
 800282c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002830:	eef0 0a47 	vmov.f32	s1, s14
 8002834:	eeb0 0a67 	vmov.f32	s0, s15
 8002838:	f7ff fea4 	bl	8002584 <Park>


*d=d_sub;
 800283c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	601a      	str	r2, [r3, #0]
*q=q_sub;
 8002842:	6a3a      	ldr	r2, [r7, #32]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]
//*o=o_sub=0;

    
    
}
 8002848:	bf00      	nop
 800284a:	3730      	adds	r7, #48	; 0x30
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <Run_ClarkePark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void Run_ClarkePark(TRANSFORM_ABC_t* abc_sub,float theta_sub,float phi_sub,TRANSFORM_QDO_t* out_cl_pa_sub ){
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	ed87 0a02 	vstr	s0, [r7, #8]
 800285c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
 
float pll_d_sub;
float pll_q_sub;
float pll_o_sub;
 
  Clarke_Park(abc_sub->axA, abc_sub->axB, abc_sub->axC,theta_sub,phi_sub,&pll_d_sub,&pll_q_sub,&pll_o_sub);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	ed93 7a01 	vldr	s14, [r3, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	edd3 6a02 	vldr	s13, [r3, #8]
 8002874:	f107 0214 	add.w	r2, r7, #20
 8002878:	f107 0118 	add.w	r1, r7, #24
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	4618      	mov	r0, r3
 8002882:	ed97 2a01 	vldr	s4, [r7, #4]
 8002886:	edd7 1a02 	vldr	s3, [r7, #8]
 800288a:	eeb0 1a66 	vmov.f32	s2, s13
 800288e:	eef0 0a47 	vmov.f32	s1, s14
 8002892:	eeb0 0a67 	vmov.f32	s0, s15
 8002896:	f7ff ff9f 	bl	80027d8 <Clarke_Park>
  
  
  out_cl_pa_sub->axd=pll_d_sub;
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	601a      	str	r2, [r3, #0]
  out_cl_pa_sub->axq=pll_q_sub;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	605a      	str	r2, [r3, #4]
  out_cl_pa_sub->axo=pll_o_sub;
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	3720      	adds	r7, #32
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <inv_Clarke_Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void inv_Clarke_Park(float d, float q, float o, float theta,float phi, float *a, float *b,float *c){
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08e      	sub	sp, #56	; 0x38
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	ed87 0a07 	vstr	s0, [r7, #28]
 80028be:	edc7 0a06 	vstr	s1, [r7, #24]
 80028c2:	ed87 1a05 	vstr	s2, [r7, #20]
 80028c6:	edc7 1a04 	vstr	s3, [r7, #16]
 80028ca:	ed87 2a03 	vstr	s4, [r7, #12]
 80028ce:	60b8      	str	r0, [r7, #8]
 80028d0:	6079      	str	r1, [r7, #4]
 80028d2:	603a      	str	r2, [r7, #0]
float beta_sub;
float a_sub;
float b_sub;
float c_sub;

InvPark(d, q, theta,phi,&alpha_sub, &beta_sub);
 80028d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	edd7 1a03 	vldr	s3, [r7, #12]
 80028e4:	ed97 1a04 	vldr	s2, [r7, #16]
 80028e8:	edd7 0a06 	vldr	s1, [r7, #24]
 80028ec:	ed97 0a07 	vldr	s0, [r7, #28]
 80028f0:	f7ff fe91 	bl	8002616 <InvPark>
InvClarke(alpha_sub, beta_sub, &a_sub, &b_sub, &c_sub);
 80028f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028f8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80028fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002900:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002908:	4618      	mov	r0, r3
 800290a:	eef0 0a47 	vmov.f32	s1, s14
 800290e:	eeb0 0a67 	vmov.f32	s0, s15
 8002912:	f7ff ff27 	bl	8002764 <InvClarke>

*a=a_sub;
 8002916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	601a      	str	r2, [r3, #0]
*b=b_sub;
 800291c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	601a      	str	r2, [r3, #0]
*c=c_sub;
 8002922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	601a      	str	r2, [r3, #0]
} 
 8002928:	bf00      	nop
 800292a:	3738      	adds	r7, #56	; 0x38
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <Run_Inv_ClarkePark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void Run_Inv_ClarkePark(TRANSFORM_QDO_t* dqo_sub,float theta_sub,float phi_sub,TRANSFORM_ABC_t* out_inv_cl_pa_sub ){
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	ed87 0a02 	vstr	s0, [r7, #8]
 800293c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
 
float a_sub;
float b_sub;
float c_sub;
 
  inv_Clarke_Park(dqo_sub->axd, dqo_sub->axq, dqo_sub->axo,theta_sub,phi_sub,&a_sub,&b_sub,&c_sub);  
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	edd3 7a00 	vldr	s15, [r3]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	ed93 7a01 	vldr	s14, [r3, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	edd3 6a02 	vldr	s13, [r3, #8]
 8002954:	f107 0214 	add.w	r2, r7, #20
 8002958:	f107 0118 	add.w	r1, r7, #24
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	4618      	mov	r0, r3
 8002962:	ed97 2a01 	vldr	s4, [r7, #4]
 8002966:	edd7 1a02 	vldr	s3, [r7, #8]
 800296a:	eeb0 1a66 	vmov.f32	s2, s13
 800296e:	eef0 0a47 	vmov.f32	s1, s14
 8002972:	eeb0 0a67 	vmov.f32	s0, s15
 8002976:	f7ff ff9d 	bl	80028b4 <inv_Clarke_Park>
  
  out_inv_cl_pa_sub->axA=a_sub;
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	601a      	str	r2, [r3, #0]
  out_inv_cl_pa_sub->axB=b_sub;
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	605a      	str	r2, [r3, #4]
  out_inv_cl_pa_sub->axC=c_sub;
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <ADC_Voltage_AC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC_Voltage_AC_ProcessData(uint32_t* p_Data_Sub, VoltageAC_ADC_NORM_Struct* VOLTAGE_ADC_AC_IN_NORM_Sub){
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phA=((float)(p_Data_Sub[0])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029aa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002a14 <ADC_Voltage_AC_ProcessData+0x80>
 80029ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phB=((float)(p_Data_Sub[1])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3304      	adds	r3, #4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029ce:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002a14 <ADC_Voltage_AC_ProcessData+0x80>
 80029d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	edc3 7a01 	vstr	s15, [r3, #4]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phC=((float)(p_Data_Sub[2])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3308      	adds	r3, #8
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029f2:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002a14 <ADC_Voltage_AC_ProcessData+0x80>
 80029f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	45000000 	.word	0x45000000

08002a18 <ADC2Phy_Voltage_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_Voltage_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, VoltageAC_ADC_NORM_Struct* VOLTAGE_ADC_AC_IN_NORM_Sub){
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  
  float B_Vac=DPC_ADC_Conf->B_Vac;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	617b      	str	r3, [r7, #20]
//  float G_Vac=DPC_ADC_Conf->G_Vac;
  float invG_Vac=DPC_ADC_Conf->invG_Vac;  
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	613b      	str	r3, [r7, #16]
  
  VOLTAGE_ADC_AC_IN_NORM_Sub->phA=((float)((int16_t)p_Data_Sub[0]-B_Vac)*(float)(invG_Vac));    
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phB=((float)((int16_t)p_Data_Sub[1]-B_Vac)*(float)(invG_Vac));    
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3304      	adds	r3, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	b21b      	sxth	r3, r3
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	edc3 7a01 	vstr	s15, [r3, #4]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phC=((float)((int16_t)p_Data_Sub[2]-B_Vac)*(float)(invG_Vac));    
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a92:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <ADC_Voltage_DC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC_Voltage_DC_ProcessData(uint32_t* p_Data_Sub, VoltageDC_ADC_NORM_Struct* VOLTAGE_ADC_DC_IN_NORM_Sub){
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_pos=((float)(p_Data_Sub[0])/(float)(1<<11));    //(float)(1<<11)==(2.44140625e-4*2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ac2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002af8 <ADC_Voltage_DC_ProcessData+0x4c>
 8002ac6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_neg=((float)(p_Data_Sub[1])/(float)(1<<11));    //(float)(1<<11)==(2.44140625e-4*2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ade:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002af8 <ADC_Voltage_DC_ProcessData+0x4c>
 8002ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	edc3 7a01 	vstr	s15, [r3, #4]
}  
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	45000000 	.word	0x45000000

08002afc <ADC2Phy_DC_Voltage_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_DC_Voltage_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, VoltageDC_ADC_NORM_Struct* VOLTAGE_ADC_DC_IN_NORM_Sub){
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  
  float B_Vdc=DPC_ADC_Conf->B_Vdc;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	617b      	str	r3, [r7, #20]
//  float G_Vdc=DPC_ADC_Conf->G_Vdc;
  float invG_Vdc=DPC_ADC_Conf->invG_Vdc;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	613b      	str	r3, [r7, #16]
  
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_pos=((float)((int16_t)p_Data_Sub[0]-B_Vdc)*(float)(invG_Vdc)); 
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b21b      	sxth	r3, r3
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b22:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_neg=((float)((int16_t)p_Data_Sub[1]-100)*(float)(invG_Vdc));
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	b21b      	sxth	r3, r3
 8002b40:	3b64      	subs	r3, #100	; 0x64
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	edc3 7a01 	vstr	s15, [r3, #4]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_tot=VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_pos+VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_neg;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	ed93 7a00 	vldr	s14, [r3]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	edc3 7a02 	vstr	s15, [r3, #8]
  
}  
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <ADC_Current_AC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    
void ADC_Current_AC_ProcessData(uint32_t* p_Data_Sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub){
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  CURRENT_ADC_AC_IN_NORM_Sub->phA=((float)(p_Data_Sub[0])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b92:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002bfc <ADC_Current_AC_ProcessData+0x80>
 8002b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	edc3 7a00 	vstr	s15, [r3]
  CURRENT_ADC_AC_IN_NORM_Sub->phB=((float)(p_Data_Sub[1])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bb6:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002bfc <ADC_Current_AC_ProcessData+0x80>
 8002bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	edc3 7a01 	vstr	s15, [r3, #4]
  CURRENT_ADC_AC_IN_NORM_Sub->phC=((float)(p_Data_Sub[2])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3308      	adds	r3, #8
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bda:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002bfc <ADC_Current_AC_ProcessData+0x80>
 8002bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002be6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	45000000 	.word	0x45000000

08002c00 <ADC2Phy_Current_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_Current_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub){
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  
  float B_Iac=DPC_ADC_Conf->B_Iac;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	617b      	str	r3, [r7, #20]
//  float G_Iac=DPC_ADC_Conf->G_Iac;
  float invG_Iac=DPC_ADC_Conf->invG_Iac;  
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	613b      	str	r3, [r7, #16]
  
  CURRENT_ADC_AC_IN_NORM_Sub->phA=((float)((int16_t)p_Data_Sub[0]-B_Iac)*(float)(invG_Iac));    
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b21b      	sxth	r3, r3
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c26:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	edc3 7a00 	vstr	s15, [r3]
  CURRENT_ADC_AC_IN_NORM_Sub->phB=((float)((int16_t)p_Data_Sub[1]-B_Iac)*(float)(invG_Iac));    
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c54:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	edc3 7a01 	vstr	s15, [r3, #4]
  CURRENT_ADC_AC_IN_NORM_Sub->phC=((float)((int16_t)p_Data_Sub[2]-B_Iac)*(float)(invG_Iac));    
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3308      	adds	r3, #8
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	b21b      	sxth	r3, r3
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c72:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <ADC_Current_DC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC_Current_DC_ProcessData(uint32_t* p_Data_Sub, CurrentDC_ADC_NORM_Struct_t* CURRENT_ADC_DC_IN_NORM_Sub){
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  CURRENT_ADC_DC_IN_NORM_Sub->IDC_adc=((float)(p_Data_Sub[0])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	ee07 3a90 	vmov	s15, r3
 8002ca6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002caa:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002ccc <ADC_Current_DC_ProcessData+0x38>
 8002cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	edc3 7a00 	vstr	s15, [r3]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	45000000 	.word	0x45000000

08002cd0 <ADC2Phy_DC_Current_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_DC_Current_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, CurrentDC_ADC_NORM_Struct_t* CURRENT_ADC_DC_IN_NORM_Sub){
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  
  float B_Idc=DPC_ADC_Conf->B_Idc;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	617b      	str	r3, [r7, #20]
//  float G_Idc=DPC_ADC_Conf->G_Idc;
  float invG_Idc=DPC_ADC_Conf->invG_Idc;   
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	613b      	str	r3, [r7, #16]
  
  CURRENT_ADC_DC_IN_NORM_Sub->IDC_adc=((float)((int16_t)p_Data_Sub[0]-B_Idc)*(float)(invG_Idc)); 
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	edc3 7a00 	vstr	s15, [r3]
}
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <DPC_ADC_Init>:
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    

void DPC_ADC_Init(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,float G_Vac,float B_Vac,float G_Iac,float B_Iac,float G_Vdc,float B_Vdc,float G_Idc,float B_Idc){
 8002d18:	b480      	push	{r7}
 8002d1a:	b08b      	sub	sp, #44	; 0x2c
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6278      	str	r0, [r7, #36]	; 0x24
 8002d20:	ed87 0a08 	vstr	s0, [r7, #32]
 8002d24:	edc7 0a07 	vstr	s1, [r7, #28]
 8002d28:	ed87 1a06 	vstr	s2, [r7, #24]
 8002d2c:	edc7 1a05 	vstr	s3, [r7, #20]
 8002d30:	ed87 2a04 	vstr	s4, [r7, #16]
 8002d34:	edc7 2a03 	vstr	s5, [r7, #12]
 8002d38:	ed87 3a02 	vstr	s6, [r7, #8]
 8002d3c:	edc7 3a01 	vstr	s7, [r7, #4]
  
DPC_ADC_Conf->B_Vac=B_Vac;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	609a      	str	r2, [r3, #8]
DPC_ADC_Conf->G_Vac=G_Vac;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	6a3a      	ldr	r2, [r7, #32]
 8002d4a:	601a      	str	r2, [r3, #0]
DPC_ADC_Conf->invG_Vac=(float)(1.0/G_Vac);
 8002d4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d50:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	edc3 7a01 	vstr	s15, [r3, #4]

DPC_ADC_Conf->B_Vdc=B_Vdc;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	621a      	str	r2, [r3, #32]
DPC_ADC_Conf->G_Vdc=G_Vdc;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	619a      	str	r2, [r3, #24]
DPC_ADC_Conf->invG_Vdc=(float)(1.0/G_Vdc);
 8002d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	edc3 7a07 	vstr	s15, [r3, #28]

DPC_ADC_Conf->B_Iac=B_Iac;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	615a      	str	r2, [r3, #20]
DPC_ADC_Conf->G_Iac=G_Iac;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	60da      	str	r2, [r3, #12]
DPC_ADC_Conf->invG_Iac=(float)(1.0/G_Iac);
 8002d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d8c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	edc3 7a04 	vstr	s15, [r3, #16]

DPC_ADC_Conf->B_Idc=B_Idc;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c
DPC_ADC_Conf->G_Idc=G_Idc;
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24
DPC_ADC_Conf->invG_Idc=(float)(1.0/G_Idc);
 8002da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002daa:	ed97 7a02 	vldr	s14, [r7, #8]
 8002dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


DPC_ADC_Conf->DPC_ADC_Conf_Complete=SET;
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
}
 8002dc0:	bf00      	nop
 8002dc2:	372c      	adds	r7, #44	; 0x2c
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc5;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b092      	sub	sp, #72	; 0x48
 8002dd0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8002dd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002dde:	f107 0320 	add.w	r3, r7, #32
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
 8002dec:	611a      	str	r2, [r3, #16]
 8002dee:	615a      	str	r2, [r3, #20]
 8002df0:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002df2:	463b      	mov	r3, r7
 8002df4:	2220      	movs	r2, #32
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f008 fa80 	bl	800b2fe <memset>

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002dfe:	4b74      	ldr	r3, [pc, #464]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002e04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e06:	4b72      	ldr	r3, [pc, #456]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e0e:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e14:	4b6e      	ldr	r3, [pc, #440]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002e1a:	4b6d      	ldr	r3, [pc, #436]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002e20:	4b6b      	ldr	r3, [pc, #428]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e26:	4b6a      	ldr	r3, [pc, #424]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e28:	2204      	movs	r2, #4
 8002e2a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e2c:	4b68      	ldr	r3, [pc, #416]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e32:	4b67      	ldr	r3, [pc, #412]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 8;
 8002e38:	4b65      	ldr	r3, [pc, #404]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e3a:	2208      	movs	r2, #8
 8002e3c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e3e:	4b64      	ldr	r3, [pc, #400]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e46:	4b62      	ldr	r3, [pc, #392]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e4c:	4b60      	ldr	r3, [pc, #384]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e52:	4b5f      	ldr	r3, [pc, #380]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e5a:	4b5d      	ldr	r3, [pc, #372]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002e60:	4b5b      	ldr	r3, [pc, #364]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e68:	4859      	ldr	r0, [pc, #356]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e6a:	f002 f921 	bl	80050b0 <HAL_ADC_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002e74:	f001 fb02 	bl	800447c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002e7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e80:	4619      	mov	r1, r3
 8002e82:	4853      	ldr	r0, [pc, #332]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002e84:	f003 fb0e 	bl	80064a4 <HAL_ADCEx_MultiModeConfigChannel>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002e8e:	f001 faf5 	bl	800447c <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8002e92:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <MX_ADC1_Init+0x208>)
 8002e94:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8002e96:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 8002e9c:	4b4e      	ldr	r3, [pc, #312]	; (8002fd8 <MX_ADC1_Init+0x20c>)
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = DISABLE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8002eb2:	f107 0320 	add.w	r3, r7, #32
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4845      	ldr	r0, [pc, #276]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002eba:	f002 ffe3 	bl	8005e84 <HAL_ADC_AnalogWDGConfig>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8002ec4:	f001 fada 	bl	800447c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002ec8:	4b43      	ldr	r3, [pc, #268]	; (8002fd8 <MX_ADC1_Init+0x20c>)
 8002eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ecc:	2306      	movs	r3, #6
 8002ece:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ed4:	237f      	movs	r3, #127	; 0x7f
 8002ed6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ee0:	463b      	mov	r3, r7
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	483a      	ldr	r0, [pc, #232]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002ee6:	f002 fb8f 	bl	8005608 <HAL_ADC_ConfigChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8002ef0:	f001 fac4 	bl	800447c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002ef4:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <MX_ADC1_Init+0x210>)
 8002ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002ef8:	230c      	movs	r3, #12
 8002efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002efc:	463b      	mov	r3, r7
 8002efe:	4619      	mov	r1, r3
 8002f00:	4833      	ldr	r0, [pc, #204]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002f02:	f002 fb81 	bl	8005608 <HAL_ADC_ConfigChannel>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8002f0c:	f001 fab6 	bl	800447c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002f10:	4b33      	ldr	r3, [pc, #204]	; (8002fe0 <MX_ADC1_Init+0x214>)
 8002f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002f14:	2312      	movs	r3, #18
 8002f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f18:	463b      	mov	r3, r7
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	482c      	ldr	r0, [pc, #176]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002f1e:	f002 fb73 	bl	8005608 <HAL_ADC_ConfigChannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8002f28:	f001 faa8 	bl	800447c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <MX_ADC1_Init+0x218>)
 8002f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002f30:	2318      	movs	r3, #24
 8002f32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002f34:	2302      	movs	r3, #2
 8002f36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f38:	463b      	mov	r3, r7
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4824      	ldr	r0, [pc, #144]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002f3e:	f002 fb63 	bl	8005608 <HAL_ADC_ConfigChannel>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8002f48:	f001 fa98 	bl	800447c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002f4c:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <MX_ADC1_Init+0x21c>)
 8002f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f56:	463b      	mov	r3, r7
 8002f58:	4619      	mov	r1, r3
 8002f5a:	481d      	ldr	r0, [pc, #116]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002f5c:	f002 fb54 	bl	8005608 <HAL_ADC_ConfigChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_ADC1_Init+0x19e>
  {
    Error_Handler();
 8002f66:	f001 fa89 	bl	800447c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <MX_ADC1_Init+0x220>)
 8002f6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002f6e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8002f72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f74:	463b      	mov	r3, r7
 8002f76:	4619      	mov	r1, r3
 8002f78:	4815      	ldr	r0, [pc, #84]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002f7a:	f002 fb45 	bl	8005608 <HAL_ADC_ConfigChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_ADC1_Init+0x1bc>
  {
    Error_Handler();
 8002f84:	f001 fa7a 	bl	800447c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <MX_ADC1_Init+0x224>)
 8002f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002f8c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8002f90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f92:	463b      	mov	r3, r7
 8002f94:	4619      	mov	r1, r3
 8002f96:	480e      	ldr	r0, [pc, #56]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002f98:	f002 fb36 	bl	8005608 <HAL_ADC_ConfigChannel>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8002fa2:	f001 fa6b 	bl	800447c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8002fa6:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <MX_ADC1_Init+0x228>)
 8002fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002faa:	f44f 7389 	mov.w	r3, #274	; 0x112
 8002fae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <MX_ADC1_Init+0x204>)
 8002fba:	f002 fb25 	bl	8005608 <HAL_ADC_ConfigChannel>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8002fc4:	f001 fa5a 	bl	800447c <Error_Handler>
  }

}
 8002fc8:	bf00      	nop
 8002fca:	3748      	adds	r7, #72	; 0x48
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	200001b4 	.word	0x200001b4
 8002fd4:	7dc00000 	.word	0x7dc00000
 8002fd8:	04300002 	.word	0x04300002
 8002fdc:	08600004 	.word	0x08600004
 8002fe0:	0c900008 	.word	0x0c900008
 8002fe4:	10c00010 	.word	0x10c00010
 8002fe8:	14f00020 	.word	0x14f00020
 8002fec:	19200040 	.word	0x19200040
 8002ff0:	1d500080 	.word	0x1d500080
 8002ff4:	c3210000 	.word	0xc3210000

08002ff8 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ffe:	463b      	mov	r3, r7
 8003000:	2220      	movs	r2, #32
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f008 f97a 	bl	800b2fe <memset>

  /** Common config
  */
  hadc5.Instance = ADC5;
 800300a:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <MX_ADC5_Init+0xc0>)
 800300c:	4a2b      	ldr	r2, [pc, #172]	; (80030bc <MX_ADC5_Init+0xc4>)
 800300e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003010:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <MX_ADC5_Init+0xc0>)
 8003012:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003016:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8003018:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <MX_ADC5_Init+0xc0>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800301e:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <MX_ADC5_Init+0xc0>)
 8003020:	2200      	movs	r2, #0
 8003022:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <MX_ADC5_Init+0xc0>)
 8003026:	2200      	movs	r2, #0
 8003028:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800302a:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <MX_ADC5_Init+0xc0>)
 800302c:	2200      	movs	r2, #0
 800302e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <MX_ADC5_Init+0xc0>)
 8003032:	2204      	movs	r2, #4
 8003034:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <MX_ADC5_Init+0xc0>)
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <MX_ADC5_Init+0xc0>)
 800303e:	2200      	movs	r2, #0
 8003040:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8003042:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <MX_ADC5_Init+0xc0>)
 8003044:	2201      	movs	r2, #1
 8003046:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8003048:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <MX_ADC5_Init+0xc0>)
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <MX_ADC5_Init+0xc0>)
 8003052:	2200      	movs	r2, #0
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <MX_ADC5_Init+0xc0>)
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <MX_ADC5_Init+0xc0>)
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <MX_ADC5_Init+0xc0>)
 8003066:	2200      	movs	r2, #0
 8003068:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <MX_ADC5_Init+0xc0>)
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8003072:	4811      	ldr	r0, [pc, #68]	; (80030b8 <MX_ADC5_Init+0xc0>)
 8003074:	f002 f81c 	bl	80050b0 <HAL_ADC_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 800307e:	f001 f9fd 	bl	800447c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <MX_ADC5_Init+0xc8>)
 8003084:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003086:	2306      	movs	r3, #6
 8003088:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800308e:	237f      	movs	r3, #127	; 0x7f
 8003090:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003092:	2304      	movs	r3, #4
 8003094:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800309a:	463b      	mov	r3, r7
 800309c:	4619      	mov	r1, r3
 800309e:	4806      	ldr	r0, [pc, #24]	; (80030b8 <MX_ADC5_Init+0xc0>)
 80030a0:	f002 fab2 	bl	8005608 <HAL_ADC_ConfigChannel>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80030aa:	f001 f9e7 	bl	800447c <Error_Handler>
  }

}
 80030ae:	bf00      	nop
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000148 	.word	0x20000148
 80030bc:	50000600 	.word	0x50000600
 80030c0:	90c00010 	.word	0x90c00010

080030c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08c      	sub	sp, #48	; 0x30
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e4:	f040 8082 	bne.w	80031ec <HAL_ADC_MspInit+0x128>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80030e8:	4b4b      	ldr	r3, [pc, #300]	; (8003218 <HAL_ADC_MspInit+0x154>)
 80030ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ec:	4a4a      	ldr	r2, [pc, #296]	; (8003218 <HAL_ADC_MspInit+0x154>)
 80030ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030f4:	4b48      	ldr	r3, [pc, #288]	; (8003218 <HAL_ADC_MspInit+0x154>)
 80030f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003100:	4b45      	ldr	r3, [pc, #276]	; (8003218 <HAL_ADC_MspInit+0x154>)
 8003102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003104:	4a44      	ldr	r2, [pc, #272]	; (8003218 <HAL_ADC_MspInit+0x154>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800310c:	4b42      	ldr	r3, [pc, #264]	; (8003218 <HAL_ADC_MspInit+0x154>)
 800310e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003118:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <HAL_ADC_MspInit+0x154>)
 800311a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311c:	4a3e      	ldr	r2, [pc, #248]	; (8003218 <HAL_ADC_MspInit+0x154>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003124:	4b3c      	ldr	r3, [pc, #240]	; (8003218 <HAL_ADC_MspInit+0x154>)
 8003126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003130:	4b39      	ldr	r3, [pc, #228]	; (8003218 <HAL_ADC_MspInit+0x154>)
 8003132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003134:	4a38      	ldr	r2, [pc, #224]	; (8003218 <HAL_ADC_MspInit+0x154>)
 8003136:	f043 0302 	orr.w	r3, r3, #2
 800313a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313c:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_ADC_MspInit+0x154>)
 800313e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_VDC__Pin|ADC_VDC_C1_Pin;
 8003148:	2303      	movs	r3, #3
 800314a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800314c:	2303      	movs	r3, #3
 800314e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003154:	f107 031c 	add.w	r3, r7, #28
 8003158:	4619      	mov	r1, r3
 800315a:	4830      	ldr	r0, [pc, #192]	; (800321c <HAL_ADC_MspInit+0x158>)
 800315c:	f003 ff96 	bl	800708c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IA_Pin|ADC_IB_Pin|ADC_VA_Pin|ADC_VB_Pin;
 8003160:	230f      	movs	r3, #15
 8003162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003164:	2303      	movs	r3, #3
 8003166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316c:	f107 031c 	add.w	r3, r7, #28
 8003170:	4619      	mov	r1, r3
 8003172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003176:	f003 ff89 	bl	800708c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VC_Pin;
 800317a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800317e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003180:	2303      	movs	r3, #3
 8003182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VC_GPIO_Port, &GPIO_InitStruct);
 8003188:	f107 031c 	add.w	r3, r7, #28
 800318c:	4619      	mov	r1, r3
 800318e:	4824      	ldr	r0, [pc, #144]	; (8003220 <HAL_ADC_MspInit+0x15c>)
 8003190:	f003 ff7c 	bl	800708c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_ADC_MspInit+0x160>)
 8003196:	4a24      	ldr	r2, [pc, #144]	; (8003228 <HAL_ADC_MspInit+0x164>)
 8003198:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <HAL_ADC_MspInit+0x160>)
 800319c:	2205      	movs	r2, #5
 800319e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031a0:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_ADC_MspInit+0x160>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031a6:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <HAL_ADC_MspInit+0x160>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_ADC_MspInit+0x160>)
 80031ae:	2280      	movs	r2, #128	; 0x80
 80031b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031b2:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <HAL_ADC_MspInit+0x160>)
 80031b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <HAL_ADC_MspInit+0x160>)
 80031bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <HAL_ADC_MspInit+0x160>)
 80031c4:	2220      	movs	r2, #32
 80031c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_ADC_MspInit+0x160>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031ce:	4815      	ldr	r0, [pc, #84]	; (8003224 <HAL_ADC_MspInit+0x160>)
 80031d0:	f003 fbae 	bl	8006930 <HAL_DMA_Init>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 80031da:	f001 f94f 	bl	800447c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a10      	ldr	r2, [pc, #64]	; (8003224 <HAL_ADC_MspInit+0x160>)
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54
 80031e4:	4a0f      	ldr	r2, [pc, #60]	; (8003224 <HAL_ADC_MspInit+0x160>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_RCC_ADC345_CLK_ENABLE();
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80031ea:	e010      	b.n	800320e <HAL_ADC_MspInit+0x14a>
  else if(adcHandle->Instance==ADC5)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0e      	ldr	r2, [pc, #56]	; (800322c <HAL_ADC_MspInit+0x168>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d10b      	bne.n	800320e <HAL_ADC_MspInit+0x14a>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_ADC_MspInit+0x154>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	4a07      	ldr	r2, [pc, #28]	; (8003218 <HAL_ADC_MspInit+0x154>)
 80031fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_ADC_MspInit+0x154>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
}
 800320e:	bf00      	nop
 8003210:	3730      	adds	r7, #48	; 0x30
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	48000800 	.word	0x48000800
 8003220:	48000400 	.word	0x48000400
 8003224:	20000220 	.word	0x20000220
 8003228:	40020044 	.word	0x40020044
 800322c:	50000600 	.word	0x50000600

08003230 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0

  hcordic.Instance = CORDIC;
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <MX_CORDIC_Init+0x20>)
 8003236:	4a07      	ldr	r2, [pc, #28]	; (8003254 <MX_CORDIC_Init+0x24>)
 8003238:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800323a:	4805      	ldr	r0, [pc, #20]	; (8003250 <MX_CORDIC_Init+0x20>)
 800323c:	f003 fa36 	bl	80066ac <HAL_CORDIC_Init>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8003246:	f001 f919 	bl	800447c <Error_Handler>
  }

}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000280 	.word	0x20000280
 8003254:	40020c00 	.word	0x40020c00

08003258 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <HAL_CORDIC_MspInit+0x38>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10b      	bne.n	8003282 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <HAL_CORDIC_MspInit+0x3c>)
 800326c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <HAL_CORDIC_MspInit+0x3c>)
 8003270:	f043 0308 	orr.w	r3, r3, #8
 8003274:	6493      	str	r3, [r2, #72]	; 0x48
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <HAL_CORDIC_MspInit+0x3c>)
 8003278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40020c00 	.word	0x40020c00
 8003294:	40021000 	.word	0x40021000

08003298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <MX_DMA_Init+0x90>)
 80032a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a2:	4a21      	ldr	r2, [pc, #132]	; (8003328 <MX_DMA_Init+0x90>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	6493      	str	r3, [r2, #72]	; 0x48
 80032aa:	4b1f      	ldr	r3, [pc, #124]	; (8003328 <MX_DMA_Init+0x90>)
 80032ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032b6:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <MX_DMA_Init+0x90>)
 80032b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ba:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <MX_DMA_Init+0x90>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	6493      	str	r3, [r2, #72]	; 0x48
 80032c2:	4b19      	ldr	r3, [pc, #100]	; (8003328 <MX_DMA_Init+0x90>)
 80032c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	2100      	movs	r1, #0
 80032d2:	200b      	movs	r0, #11
 80032d4:	f003 faf7 	bl	80068c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80032d8:	200b      	movs	r0, #11
 80032da:	f003 fb0e 	bl	80068fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	2100      	movs	r1, #0
 80032e2:	200c      	movs	r0, #12
 80032e4:	f003 faef 	bl	80068c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80032e8:	200c      	movs	r0, #12
 80032ea:	f003 fb06 	bl	80068fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2100      	movs	r1, #0
 80032f2:	200d      	movs	r0, #13
 80032f4:	f003 fae7 	bl	80068c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80032f8:	200d      	movs	r0, #13
 80032fa:	f003 fafe 	bl	80068fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80032fe:	2200      	movs	r2, #0
 8003300:	2100      	movs	r1, #0
 8003302:	200e      	movs	r0, #14
 8003304:	f003 fadf 	bl	80068c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003308:	200e      	movs	r0, #14
 800330a:	f003 faf6 	bl	80068fa <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2100      	movs	r1, #0
 8003312:	205e      	movs	r0, #94	; 0x5e
 8003314:	f003 fad7 	bl	80068c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8003318:	205e      	movs	r0, #94	; 0x5e
 800331a:	f003 faee 	bl	80068fa <HAL_NVIC_EnableIRQ>

}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000

0800332c <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0

  hfmac.Instance = FMAC;
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <MX_FMAC_Init+0x20>)
 8003332:	4a07      	ldr	r2, [pc, #28]	; (8003350 <MX_FMAC_Init+0x24>)
 8003334:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8003336:	4805      	ldr	r0, [pc, #20]	; (800334c <MX_FMAC_Init+0x20>)
 8003338:	f003 fdfc 	bl	8006f34 <HAL_FMAC_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8003342:	f001 f89b 	bl	800447c <Error_Handler>
  }

}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200002a8 	.word	0x200002a8
 8003350:	40021400 	.word	0x40021400

08003354 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0a      	ldr	r2, [pc, #40]	; (800338c <HAL_FMAC_MspInit+0x38>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10b      	bne.n	800337e <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_FMAC_MspInit+0x3c>)
 8003368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_FMAC_MspInit+0x3c>)
 800336c:	f043 0310 	orr.w	r3, r3, #16
 8003370:	6493      	str	r3, [r2, #72]	; 0x48
 8003372:	4b07      	ldr	r3, [pc, #28]	; (8003390 <HAL_FMAC_MspInit+0x3c>)
 8003374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40021400 	.word	0x40021400
 8003390:	40021000 	.word	0x40021000

08003394 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	60da      	str	r2, [r3, #12]
 80033a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033aa:	4b28      	ldr	r3, [pc, #160]	; (800344c <MX_GPIO_Init+0xb8>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ae:	4a27      	ldr	r2, [pc, #156]	; (800344c <MX_GPIO_Init+0xb8>)
 80033b0:	f043 0304 	orr.w	r3, r3, #4
 80033b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <MX_GPIO_Init+0xb8>)
 80033b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c2:	4b22      	ldr	r3, [pc, #136]	; (800344c <MX_GPIO_Init+0xb8>)
 80033c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <MX_GPIO_Init+0xb8>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ce:	4b1f      	ldr	r3, [pc, #124]	; (800344c <MX_GPIO_Init+0xb8>)
 80033d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033da:	4b1c      	ldr	r3, [pc, #112]	; (800344c <MX_GPIO_Init+0xb8>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	4a1b      	ldr	r2, [pc, #108]	; (800344c <MX_GPIO_Init+0xb8>)
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033e6:	4b19      	ldr	r3, [pc, #100]	; (800344c <MX_GPIO_Init+0xb8>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin|LED_HL1_Pin|Relay_Pin, GPIO_PIN_RESET);
 80033f2:	2200      	movs	r2, #0
 80033f4:	21d0      	movs	r1, #208	; 0xd0
 80033f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033fa:	f003 ffc9 	bl	8007390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_RESET);
 80033fe:	2200      	movs	r2, #0
 8003400:	2120      	movs	r1, #32
 8003402:	4813      	ldr	r0, [pc, #76]	; (8003450 <MX_GPIO_Init+0xbc>)
 8003404:	f003 ffc4 	bl	8007390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_HL2_Pin|LED_HL1_Pin|Relay_Pin;
 8003408:	23d0      	movs	r3, #208	; 0xd0
 800340a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340c:	2301      	movs	r3, #1
 800340e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003414:	2300      	movs	r3, #0
 8003416:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003418:	f107 030c 	add.w	r3, r7, #12
 800341c:	4619      	mov	r1, r3
 800341e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003422:	f003 fe33 	bl	800708c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PFC_SW_SRC_Pin;
 8003426:	2320      	movs	r3, #32
 8003428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800342a:	2301      	movs	r3, #1
 800342c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PFC_SW_SRC_GPIO_Port, &GPIO_InitStruct);
 8003436:	f107 030c 	add.w	r3, r7, #12
 800343a:	4619      	mov	r1, r3
 800343c:	4804      	ldr	r0, [pc, #16]	; (8003450 <MX_GPIO_Init+0xbc>)
 800343e:	f003 fe25 	bl	800708c <HAL_GPIO_Init>

}
 8003442:	bf00      	nop
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000
 8003450:	48000800 	.word	0x48000800

08003454 <MX_HRTIM1_Init>:
DMA_HandleTypeDef hdma_hrtim1_b;
DMA_HandleTypeDef hdma_hrtim1_c;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b0b6      	sub	sp, #216	; 0xd8
 8003458:	af00      	add	r7, sp, #0
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 800345a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	60da      	str	r2, [r3, #12]
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 8003468:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8003474:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8003482:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	60da      	str	r2, [r3, #12]
 8003490:	611a      	str	r2, [r3, #16]
 8003492:	615a      	str	r2, [r3, #20]
 8003494:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8003496:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800349a:	2260      	movs	r2, #96	; 0x60
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f007 ff2d 	bl	800b2fe <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80034a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80034b0:	1d3b      	adds	r3, r7, #4
 80034b2:	2220      	movs	r2, #32
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f007 ff21 	bl	800b2fe <memset>

  hhrtim1.Instance = HRTIM1;
 80034bc:	4bcf      	ldr	r3, [pc, #828]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80034be:	4ad0      	ldr	r2, [pc, #832]	; (8003800 <MX_HRTIM1_Init+0x3ac>)
 80034c0:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80034c2:	4bce      	ldr	r3, [pc, #824]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80034c8:	4bcc      	ldr	r3, [pc, #816]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80034ce:	48cb      	ldr	r0, [pc, #812]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80034d0:	f003 ff76 	bl	80073c0 <HAL_HRTIM_Init>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_HRTIM1_Init+0x8a>
  {
    Error_Handler();
 80034da:	f000 ffcf 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80034de:	210c      	movs	r1, #12
 80034e0:	48c6      	ldr	r0, [pc, #792]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80034e2:	f004 f83d 	bl	8007560 <HAL_HRTIM_DLLCalibrationStart>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_HRTIM1_Init+0x9c>
  {
    Error_Handler();
 80034ec:	f000 ffc6 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80034f0:	210a      	movs	r1, #10
 80034f2:	48c2      	ldr	r0, [pc, #776]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80034f4:	f004 f88c 	bl	8007610 <HAL_HRTIM_PollForDLLCalibration>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_HRTIM1_Init+0xae>
  {
    Error_Handler();
 80034fe:	f000 ffbd 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 8003502:	2100      	movs	r1, #0
 8003504:	48bd      	ldr	r0, [pc, #756]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003506:	f004 fa9f 	bl	8007a48 <HAL_HRTIM_FaultPrescalerConfig>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_HRTIM1_Init+0xc0>
  {
    Error_Handler();
 8003510:	f000 ffb4 	bl	800447c <Error_Handler>
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 800351a:	2302      	movs	r3, #2
 800351c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultCfg) != HAL_OK)
 800352c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003530:	461a      	mov	r2, r3
 8003532:	2101      	movs	r1, #1
 8003534:	48b1      	ldr	r0, [pc, #708]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003536:	f004 f8c7 	bl	80076c8 <HAL_HRTIM_FaultConfig>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_HRTIM1_Init+0xf0>
  {
    Error_Handler();
 8003540:	f000 ff9c 	bl	800447c <Error_Handler>
  }
  pFaultBlkCfg.Threshold = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  pFaultBlkCfg.ResetMode = HRTIM_FAULTCOUNTERRST_UNCONDITIONAL;
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  pFaultBlkCfg.BlankingSource = HRTIM_FAULTBLANKINGMODE_RSTALIGNED;
 8003550:	2300      	movs	r3, #0
 8003552:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 8003556:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800355a:	461a      	mov	r2, r3
 800355c:	2101      	movs	r1, #1
 800355e:	48a7      	ldr	r0, [pc, #668]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003560:	f004 fb98 	bl	8007c94 <HAL_HRTIM_FaultCounterConfig>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_HRTIM1_Init+0x11a>
  {
    Error_Handler();
 800356a:	f000 ff87 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 800356e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003572:	461a      	mov	r2, r3
 8003574:	2101      	movs	r1, #1
 8003576:	48a1      	ldr	r0, [pc, #644]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003578:	f004 fb8c 	bl	8007c94 <HAL_HRTIM_FaultCounterConfig>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_HRTIM1_Init+0x132>
  {
    Error_Handler();
 8003582:	f000 ff7b 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 8003586:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800358a:	461a      	mov	r2, r3
 800358c:	2101      	movs	r1, #1
 800358e:	489b      	ldr	r0, [pc, #620]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003590:	f004 fa94 	bl	8007abc <HAL_HRTIM_FaultBlankingConfigAndEnable>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_HRTIM1_Init+0x14a>
  {
    Error_Handler();
 800359a:	f000 ff6f 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 800359e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035a2:	461a      	mov	r2, r3
 80035a4:	2101      	movs	r1, #1
 80035a6:	4895      	ldr	r0, [pc, #596]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80035a8:	f004 fa88 	bl	8007abc <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_HRTIM1_Init+0x162>
  {
    Error_Handler();
 80035b2:	f000 ff63 	bl	800447c <Error_Handler>
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_1, HRTIM_FAULTMODECTL_ENABLED);
 80035b6:	2201      	movs	r2, #1
 80035b8:	2101      	movs	r1, #1
 80035ba:	4890      	ldr	r0, [pc, #576]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80035bc:	f004 fc62 	bl	8007e84 <HAL_HRTIM_FaultModeCtl>
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 80035c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035c4:	461a      	mov	r2, r3
 80035c6:	2104      	movs	r1, #4
 80035c8:	488c      	ldr	r0, [pc, #560]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80035ca:	f004 fb63 	bl	8007c94 <HAL_HRTIM_FaultCounterConfig>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_HRTIM1_Init+0x184>
  {
    Error_Handler();
 80035d4:	f000 ff52 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 80035d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035dc:	461a      	mov	r2, r3
 80035de:	2104      	movs	r1, #4
 80035e0:	4886      	ldr	r0, [pc, #536]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80035e2:	f004 fb57 	bl	8007c94 <HAL_HRTIM_FaultCounterConfig>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_HRTIM1_Init+0x19c>
  {
    Error_Handler();
 80035ec:	f000 ff46 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 80035f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035f4:	461a      	mov	r2, r3
 80035f6:	2104      	movs	r1, #4
 80035f8:	4880      	ldr	r0, [pc, #512]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80035fa:	f004 fa5f 	bl	8007abc <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <MX_HRTIM1_Init+0x1b4>
  {
    Error_Handler();
 8003604:	f000 ff3a 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 8003608:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800360c:	461a      	mov	r2, r3
 800360e:	2104      	movs	r1, #4
 8003610:	487a      	ldr	r0, [pc, #488]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003612:	f004 fa53 	bl	8007abc <HAL_HRTIM_FaultBlankingConfigAndEnable>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_HRTIM1_Init+0x1cc>
  {
    Error_Handler();
 800361c:	f000 ff2e 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_3, &pFaultCfg) != HAL_OK)
 8003620:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003624:	461a      	mov	r2, r3
 8003626:	2104      	movs	r1, #4
 8003628:	4874      	ldr	r0, [pc, #464]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 800362a:	f004 f84d 	bl	80076c8 <HAL_HRTIM_FaultConfig>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_HRTIM1_Init+0x1e4>
  {
    Error_Handler();
 8003634:	f000 ff22 	bl	800447c <Error_Handler>
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_3, HRTIM_FAULTMODECTL_ENABLED);
 8003638:	2201      	movs	r2, #1
 800363a:	2104      	movs	r1, #4
 800363c:	486f      	ldr	r0, [pc, #444]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 800363e:	f004 fc21 	bl	8007e84 <HAL_HRTIM_FaultModeCtl>
  pTimeBaseCfg.Period = 34000;
 8003642:	f248 43d0 	movw	r3, #34000	; 0x84d0
 8003646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL2;
 8003650:	2304      	movs	r3, #4
 8003652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8003656:	2308      	movs	r3, #8
 8003658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800365c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003660:	461a      	mov	r2, r3
 8003662:	2100      	movs	r1, #0
 8003664:	4865      	ldr	r0, [pc, #404]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003666:	f004 f807 	bl	8007678 <HAL_HRTIM_TimeBaseConfig>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_HRTIM1_Init+0x220>
  {
    Error_Handler();
 8003670:	f000 ff04 	bl	800447c <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 800367a:	2300      	movs	r3, #0
 800367c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8003680:	2300      	movs	r3, #0
 8003682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 800368c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003690:	461a      	mov	r2, r3
 8003692:	2100      	movs	r1, #0
 8003694:	4859      	ldr	r0, [pc, #356]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003696:	f004 fce9 	bl	800806c <HAL_HRTIM_WaveformTimerControl>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <MX_HRTIM1_Init+0x250>
  {
    Error_Handler();
 80036a0:	f000 feec 	bl	800447c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST;
 80036a8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMASrcAddress = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[0].CMP1xR);
 80036b2:	4b52      	ldr	r3, [pc, #328]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	339c      	adds	r3, #156	; 0x9c
 80036b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.DMASize = 0x1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80036be:	2300      	movs	r3, #0
 80036c0:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80036c2:	2300      	movs	r3, #0
 80036c4:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80036c6:	2300      	movs	r3, #0
 80036c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80036ca:	2300      	movs	r3, #0
 80036cc:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 80036d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036d6:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80036d8:	2300      	movs	r3, #0
 80036da:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80036dc:	2300      	movs	r3, #0
 80036de:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80036e0:	2300      	movs	r3, #0
 80036e2:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80036e4:	2300      	movs	r3, #0
 80036e6:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1|HRTIM_TIMFAULTENABLE_FAULT3;
 80036e8:	2305      	movs	r3, #5
 80036ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80036f0:	2300      	movs	r3, #0
 80036f2:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80036f4:	2300      	movs	r3, #0
 80036f6:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8003704:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8003712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003716:	461a      	mov	r2, r3
 8003718:	2100      	movs	r1, #0
 800371a:	4838      	ldr	r0, [pc, #224]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 800371c:	f004 fc34 	bl	8007f88 <HAL_HRTIM_WaveformTimerConfig>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <MX_HRTIM1_Init+0x2d6>
  {
    Error_Handler();
 8003726:	f000 fea9 	bl	800447c <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[1].CMP1xR);
 800372e:	4b33      	ldr	r3, [pc, #204]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8003736:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8003738:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800373c:	461a      	mov	r2, r3
 800373e:	2101      	movs	r1, #1
 8003740:	482e      	ldr	r0, [pc, #184]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003742:	f004 fc21 	bl	8007f88 <HAL_HRTIM_WaveformTimerConfig>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_HRTIM1_Init+0x2fc>
  {
    Error_Handler();
 800374c:	f000 fe96 	bl	800447c <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[2].CMP1xR);
 8003754:	4b29      	ldr	r3, [pc, #164]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800375c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 800375e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003762:	461a      	mov	r2, r3
 8003764:	2102      	movs	r1, #2
 8003766:	4825      	ldr	r0, [pc, #148]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003768:	f004 fc0e 	bl	8007f88 <HAL_HRTIM_WaveformTimerConfig>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_HRTIM1_Init+0x322>
  {
    Error_Handler();
 8003772:	f000 fe83 	bl	800447c <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x5000;
 8003776:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800377c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003780:	2201      	movs	r2, #1
 8003782:	2100      	movs	r1, #0
 8003784:	481d      	ldr	r0, [pc, #116]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 8003786:	f004 fca5 	bl	80080d4 <HAL_HRTIM_WaveformCompareConfig>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_HRTIM1_Init+0x340>
  {
    Error_Handler();
 8003790:	f000 fe74 	bl	800447c <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8003798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800379c:	2204      	movs	r2, #4
 800379e:	2100      	movs	r1, #0
 80037a0:	4816      	ldr	r0, [pc, #88]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80037a2:	f004 fc97 	bl	80080d4 <HAL_HRTIM_WaveformCompareConfig>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_HRTIM1_Init+0x35c>
  {
    Error_Handler();
 80037ac:	f000 fe66 	bl	800447c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80037b0:	2300      	movs	r3, #0
 80037b2:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 80037b4:	2304      	movs	r3, #4
 80037b6:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 80037b8:	2308      	movs	r3, #8
 80037ba:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_INACTIVE;
 80037c4:	2320      	movs	r3, #32
 80037c6:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80037cc:	2300      	movs	r3, #0
 80037ce:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	2201      	movs	r2, #1
 80037d4:	2100      	movs	r1, #0
 80037d6:	4809      	ldr	r0, [pc, #36]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80037d8:	f004 fdea 	bl	80083b0 <HAL_HRTIM_WaveformOutputConfig>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_HRTIM1_Init+0x392>
  {
    Error_Handler();
 80037e2:	f000 fe4b 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	2204      	movs	r2, #4
 80037ea:	2101      	movs	r1, #1
 80037ec:	4803      	ldr	r0, [pc, #12]	; (80037fc <MX_HRTIM1_Init+0x3a8>)
 80037ee:	f004 fddf 	bl	80083b0 <HAL_HRTIM_WaveformOutputConfig>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <MX_HRTIM1_Init+0x3b4>
 80037f8:	e004      	b.n	8003804 <MX_HRTIM1_Init+0x3b0>
 80037fa:	bf00      	nop
 80037fc:	20000340 	.word	0x20000340
 8003800:	40016800 	.word	0x40016800
  {
    Error_Handler();
 8003804:	f000 fe3a 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8003808:	1d3b      	adds	r3, r7, #4
 800380a:	2210      	movs	r2, #16
 800380c:	2102      	movs	r1, #2
 800380e:	483c      	ldr	r0, [pc, #240]	; (8003900 <MX_HRTIM1_Init+0x4ac>)
 8003810:	f004 fdce 	bl	80083b0 <HAL_HRTIM_WaveformOutputConfig>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_HRTIM1_Init+0x3ca>
  {
    Error_Handler();
 800381a:	f000 fe2f 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 800381e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003822:	461a      	mov	r2, r3
 8003824:	2101      	movs	r1, #1
 8003826:	4836      	ldr	r0, [pc, #216]	; (8003900 <MX_HRTIM1_Init+0x4ac>)
 8003828:	f003 ff26 	bl	8007678 <HAL_HRTIM_TimeBaseConfig>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <MX_HRTIM1_Init+0x3e2>
  {
    Error_Handler();
 8003832:	f000 fe23 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 8003836:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800383a:	461a      	mov	r2, r3
 800383c:	2101      	movs	r1, #1
 800383e:	4830      	ldr	r0, [pc, #192]	; (8003900 <MX_HRTIM1_Init+0x4ac>)
 8003840:	f004 fc14 	bl	800806c <HAL_HRTIM_WaveformTimerControl>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_HRTIM1_Init+0x3fa>
  {
    Error_Handler();
 800384a:	f000 fe17 	bl	800447c <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x2000;
 800384e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8003854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003858:	2201      	movs	r2, #1
 800385a:	2101      	movs	r1, #1
 800385c:	4828      	ldr	r0, [pc, #160]	; (8003900 <MX_HRTIM1_Init+0x4ac>)
 800385e:	f004 fc39 	bl	80080d4 <HAL_HRTIM_WaveformCompareConfig>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <MX_HRTIM1_Init+0x418>
  {
    Error_Handler();
 8003868:	f000 fe08 	bl	800447c <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 800386c:	2305      	movs	r3, #5
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8003870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003874:	2204      	movs	r2, #4
 8003876:	2101      	movs	r1, #1
 8003878:	4821      	ldr	r0, [pc, #132]	; (8003900 <MX_HRTIM1_Init+0x4ac>)
 800387a:	f004 fc2b 	bl	80080d4 <HAL_HRTIM_WaveformCompareConfig>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_HRTIM1_Init+0x434>
  {
    Error_Handler();
 8003884:	f000 fdfa 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8003888:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800388c:	461a      	mov	r2, r3
 800388e:	2102      	movs	r1, #2
 8003890:	481b      	ldr	r0, [pc, #108]	; (8003900 <MX_HRTIM1_Init+0x4ac>)
 8003892:	f003 fef1 	bl	8007678 <HAL_HRTIM_TimeBaseConfig>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_HRTIM1_Init+0x44c>
  {
    Error_Handler();
 800389c:	f000 fdee 	bl	800447c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 80038a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80038a4:	461a      	mov	r2, r3
 80038a6:	2102      	movs	r1, #2
 80038a8:	4815      	ldr	r0, [pc, #84]	; (8003900 <MX_HRTIM1_Init+0x4ac>)
 80038aa:	f004 fbdf 	bl	800806c <HAL_HRTIM_WaveformTimerControl>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_HRTIM1_Init+0x464>
  {
    Error_Handler();
 80038b4:	f000 fde2 	bl	800447c <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x8000;
 80038b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80038be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c2:	2201      	movs	r2, #1
 80038c4:	2102      	movs	r1, #2
 80038c6:	480e      	ldr	r0, [pc, #56]	; (8003900 <MX_HRTIM1_Init+0x4ac>)
 80038c8:	f004 fc04 	bl	80080d4 <HAL_HRTIM_WaveformCompareConfig>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <MX_HRTIM1_Init+0x482>
  {
    Error_Handler();
 80038d2:	f000 fdd3 	bl	800447c <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 80038d6:	2305      	movs	r3, #5
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80038da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038de:	2204      	movs	r2, #4
 80038e0:	2102      	movs	r1, #2
 80038e2:	4807      	ldr	r0, [pc, #28]	; (8003900 <MX_HRTIM1_Init+0x4ac>)
 80038e4:	f004 fbf6 	bl	80080d4 <HAL_HRTIM_WaveformCompareConfig>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_HRTIM1_Init+0x49e>
  {
    Error_Handler();
 80038ee:	f000 fdc5 	bl	800447c <Error_Handler>
  }
  HAL_HRTIM_MspPostInit(&hhrtim1);
 80038f2:	4803      	ldr	r0, [pc, #12]	; (8003900 <MX_HRTIM1_Init+0x4ac>)
 80038f4:	f000 f942 	bl	8003b7c <HAL_HRTIM_MspPostInit>

}
 80038f8:	bf00      	nop
 80038fa:	37d8      	adds	r7, #216	; 0xd8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20000340 	.word	0x20000340

08003904 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08e      	sub	sp, #56	; 0x38
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 800391c:	f107 0314 	add.w	r3, r7, #20
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
  if(hrtimHandle->Instance==HRTIM1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a8a      	ldr	r2, [pc, #552]	; (8003b58 <HAL_HRTIM_MspInit+0x254>)
 8003930:	4293      	cmp	r3, r2
 8003932:	f040 810d 	bne.w	8003b50 <HAL_HRTIM_MspInit+0x24c>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003936:	4b89      	ldr	r3, [pc, #548]	; (8003b5c <HAL_HRTIM_MspInit+0x258>)
 8003938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393a:	4a88      	ldr	r2, [pc, #544]	; (8003b5c <HAL_HRTIM_MspInit+0x258>)
 800393c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003940:	6613      	str	r3, [r2, #96]	; 0x60
 8003942:	4b86      	ldr	r3, [pc, #536]	; (8003b5c <HAL_HRTIM_MspInit+0x258>)
 8003944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003946:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394e:	4b83      	ldr	r3, [pc, #524]	; (8003b5c <HAL_HRTIM_MspInit+0x258>)
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	4a82      	ldr	r2, [pc, #520]	; (8003b5c <HAL_HRTIM_MspInit+0x258>)
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800395a:	4b80      	ldr	r3, [pc, #512]	; (8003b5c <HAL_HRTIM_MspInit+0x258>)
 800395c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003966:	4b7d      	ldr	r3, [pc, #500]	; (8003b5c <HAL_HRTIM_MspInit+0x258>)
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	4a7c      	ldr	r2, [pc, #496]	; (8003b5c <HAL_HRTIM_MspInit+0x258>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003972:	4b7a      	ldr	r3, [pc, #488]	; (8003b5c <HAL_HRTIM_MspInit+0x258>)
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB10     ------> HRTIM1_FLT3
    PA12     ------> HRTIM1_FLT1
    */
    GPIO_InitStruct.Pin = OCP_A_Pin;
 800397e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003984:	2302      	movs	r3, #2
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398c:	2300      	movs	r3, #0
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8003990:	230d      	movs	r3, #13
 8003992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCP_A_GPIO_Port, &GPIO_InitStruct);
 8003994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003998:	4619      	mov	r1, r3
 800399a:	4871      	ldr	r0, [pc, #452]	; (8003b60 <HAL_HRTIM_MspInit+0x25c>)
 800399c:	f003 fb76 	bl	800708c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AC_FAULT_Pin;
 80039a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a6:	2302      	movs	r3, #2
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ae:	2300      	movs	r3, #0
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80039b2:	230d      	movs	r3, #13
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AC_FAULT_GPIO_Port, &GPIO_InitStruct);
 80039b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ba:	4619      	mov	r1, r3
 80039bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c0:	f003 fb64 	bl	800708c <HAL_GPIO_Init>

    /* HRTIM1 DMA Init */
    /* HRTIM1_A Init */
    hdma_hrtim1_a.Instance = DMA1_Channel1;
 80039c4:	4b67      	ldr	r3, [pc, #412]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 80039c6:	4a68      	ldr	r2, [pc, #416]	; (8003b68 <HAL_HRTIM_MspInit+0x264>)
 80039c8:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_a.Init.Request = DMA_REQUEST_HRTIM1_A;
 80039ca:	4b66      	ldr	r3, [pc, #408]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 80039cc:	2260      	movs	r2, #96	; 0x60
 80039ce:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039d0:	4b64      	ldr	r3, [pc, #400]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 80039d2:	2210      	movs	r2, #16
 80039d4:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80039d6:	4b63      	ldr	r3, [pc, #396]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 80039d8:	2200      	movs	r2, #0
 80039da:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_a.Init.MemInc = DMA_MINC_ENABLE;
 80039dc:	4b61      	ldr	r3, [pc, #388]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 80039de:	2280      	movs	r2, #128	; 0x80
 80039e0:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039e2:	4b60      	ldr	r3, [pc, #384]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 80039e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e8:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80039ea:	4b5e      	ldr	r3, [pc, #376]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 80039ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039f0:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_a.Init.Mode = DMA_CIRCULAR;
 80039f2:	4b5c      	ldr	r3, [pc, #368]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 80039f4:	2220      	movs	r2, #32
 80039f6:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80039f8:	4b5a      	ldr	r3, [pc, #360]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 80039fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_a) != HAL_OK)
 8003a00:	4858      	ldr	r0, [pc, #352]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 8003a02:	f002 ff95 	bl	8006930 <HAL_DMA_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_HRTIM_MspInit+0x10c>
    {
      Error_Handler();
 8003a0c:	f000 fd36 	bl	800447c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8003a20:	2301      	movs	r3, #1
 8003a22:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_a, &pSyncConfig) != HAL_OK)
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	4619      	mov	r1, r3
 8003a2a:	484e      	ldr	r0, [pc, #312]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 8003a2c:	f003 f9f2 	bl	8006e14 <HAL_DMAEx_ConfigMuxSync>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_HRTIM_MspInit+0x136>
    {
      Error_Handler();
 8003a36:	f000 fd21 	bl	800447c <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerA,hdma_hrtim1_a);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a49      	ldr	r2, [pc, #292]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 8003a3e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8003a42:	4a48      	ldr	r2, [pc, #288]	; (8003b64 <HAL_HRTIM_MspInit+0x260>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1_B Init */
    hdma_hrtim1_b.Instance = DMA1_Channel2;
 8003a48:	4b48      	ldr	r3, [pc, #288]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003a4a:	4a49      	ldr	r2, [pc, #292]	; (8003b70 <HAL_HRTIM_MspInit+0x26c>)
 8003a4c:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_b.Init.Request = DMA_REQUEST_HRTIM1_B;
 8003a4e:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003a50:	2261      	movs	r2, #97	; 0x61
 8003a52:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a54:	4b45      	ldr	r3, [pc, #276]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003a56:	2210      	movs	r2, #16
 8003a58:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a5a:	4b44      	ldr	r3, [pc, #272]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_b.Init.MemInc = DMA_MINC_ENABLE;
 8003a60:	4b42      	ldr	r3, [pc, #264]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003a62:	2280      	movs	r2, #128	; 0x80
 8003a64:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a66:	4b41      	ldr	r3, [pc, #260]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6c:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a74:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_b.Init.Mode = DMA_CIRCULAR;
 8003a76:	4b3d      	ldr	r3, [pc, #244]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003a78:	2220      	movs	r2, #32
 8003a7a:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003a7c:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_b) != HAL_OK)
 8003a84:	4839      	ldr	r0, [pc, #228]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003a86:	f002 ff53 	bl	8006930 <HAL_DMA_Init>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_HRTIM_MspInit+0x190>
    {
      Error_Handler();
 8003a90:	f000 fcf4 	bl	800447c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_b, &pSyncConfig) != HAL_OK)
 8003aa8:	f107 0314 	add.w	r3, r7, #20
 8003aac:	4619      	mov	r1, r3
 8003aae:	482f      	ldr	r0, [pc, #188]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003ab0:	f003 f9b0 	bl	8006e14 <HAL_DMAEx_ConfigMuxSync>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_HRTIM_MspInit+0x1ba>
    {
      Error_Handler();
 8003aba:	f000 fcdf 	bl	800447c <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerB,hdma_hrtim1_b);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a2a      	ldr	r2, [pc, #168]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003ac2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003ac6:	4a29      	ldr	r2, [pc, #164]	; (8003b6c <HAL_HRTIM_MspInit+0x268>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1_C Init */
    hdma_hrtim1_c.Instance = DMA1_Channel3;
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003ace:	4a2a      	ldr	r2, [pc, #168]	; (8003b78 <HAL_HRTIM_MspInit+0x274>)
 8003ad0:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_c.Init.Request = DMA_REQUEST_HRTIM1_C;
 8003ad2:	4b28      	ldr	r3, [pc, #160]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003ad4:	2262      	movs	r2, #98	; 0x62
 8003ad6:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_c.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ad8:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003ada:	2210      	movs	r2, #16
 8003adc:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_c.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ade:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_c.Init.MemInc = DMA_MINC_ENABLE;
 8003ae4:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_c.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af0:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_c.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af8:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_c.Init.Mode = DMA_CIRCULAR;
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003afc:	2220      	movs	r2, #32
 8003afe:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_c.Init.Priority = DMA_PRIORITY_HIGH;
 8003b00:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_c) != HAL_OK)
 8003b08:	481a      	ldr	r0, [pc, #104]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003b0a:	f002 ff11 	bl	8006930 <HAL_DMA_Init>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_HRTIM_MspInit+0x214>
    {
      Error_Handler();
 8003b14:	f000 fcb2 	bl	800447c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_c, &pSyncConfig) != HAL_OK)
 8003b2c:	f107 0314 	add.w	r3, r7, #20
 8003b30:	4619      	mov	r1, r3
 8003b32:	4810      	ldr	r0, [pc, #64]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003b34:	f003 f96e 	bl	8006e14 <HAL_DMAEx_ConfigMuxSync>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_HRTIM_MspInit+0x23e>
    {
      Error_Handler();
 8003b3e:	f000 fc9d 	bl	800447c <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerC,hdma_hrtim1_c);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003b46:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <HAL_HRTIM_MspInit+0x270>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8003b50:	bf00      	nop
 8003b52:	3738      	adds	r7, #56	; 0x38
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40016800 	.word	0x40016800
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	48000400 	.word	0x48000400
 8003b64:	200002e0 	.word	0x200002e0
 8003b68:	40020008 	.word	0x40020008
 8003b6c:	2000043c 	.word	0x2000043c
 8003b70:	4002001c 	.word	0x4002001c
 8003b74:	2000049c 	.word	0x2000049c
 8003b78:	40020030 	.word	0x40020030

08003b7c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a20      	ldr	r2, [pc, #128]	; (8003c1c <HAL_HRTIM_MspPostInit+0xa0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d13a      	bne.n	8003c14 <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <HAL_HRTIM_MspPostInit+0xa4>)
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <HAL_HRTIM_MspPostInit+0xa4>)
 8003ba4:	f043 0302 	orr.w	r3, r3, #2
 8003ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_HRTIM_MspPostInit+0xa4>)
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb6:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <HAL_HRTIM_MspPostInit+0xa4>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <HAL_HRTIM_MspPostInit+0xa4>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bc2:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <HAL_HRTIM_MspPostInit+0xa4>)
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM1 GPIO Configuration
    PB12     ------> HRTIM1_CHC1
    PA8     ------> HRTIM1_CHA1
    PA10     ------> HRTIM1_CHB1
    */
    GPIO_InitStruct.Pin = TC_HS_Pin;
 8003bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8003be0:	230d      	movs	r3, #13
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TC_HS_GPIO_Port, &GPIO_InitStruct);
 8003be4:	f107 0314 	add.w	r3, r7, #20
 8003be8:	4619      	mov	r1, r3
 8003bea:	480e      	ldr	r0, [pc, #56]	; (8003c24 <HAL_HRTIM_MspPostInit+0xa8>)
 8003bec:	f003 fa4e 	bl	800708c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TA_HS_Pin|TB_HS_Pin;
 8003bf0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8003c02:	230d      	movs	r3, #13
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c06:	f107 0314 	add.w	r3, r7, #20
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c10:	f003 fa3c 	bl	800708c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8003c14:	bf00      	nop
 8003c16:	3728      	adds	r7, #40	; 0x28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40016800 	.word	0x40016800
 8003c20:	40021000 	.word	0x40021000
 8003c24:	48000400 	.word	0x48000400

08003c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2a:	b091      	sub	sp, #68	; 0x44
 8003c2c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c2e:	f000 fed8 	bl	80049e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c32:	f000 f94b 	bl	8003ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c36:	f7ff fbad 	bl	8003394 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c3a:	f7ff fb2d 	bl	8003298 <MX_DMA_Init>
  MX_TIM2_Init();
 8003c3e:	f000 fd15 	bl	800466c <MX_TIM2_Init>
  MX_TIM3_Init();
 8003c42:	f000 fd5f 	bl	8004704 <MX_TIM3_Init>
  MX_CORDIC_Init();
 8003c46:	f7ff faf3 	bl	8003230 <MX_CORDIC_Init>
  MX_ADC1_Init();
 8003c4a:	f7ff f8bf 	bl	8002dcc <MX_ADC1_Init>
  MX_ADC5_Init();
 8003c4e:	f7ff f9d3 	bl	8002ff8 <MX_ADC5_Init>
  MX_RNG_Init();
 8003c52:	f000 fc17 	bl	8004484 <MX_RNG_Init>
  MX_TIM6_Init();
 8003c56:	f000 fda3 	bl	80047a0 <MX_TIM6_Init>
  MX_HRTIM1_Init();
 8003c5a:	f7ff fbfb 	bl	8003454 <MX_HRTIM1_Init>
  MX_TIM15_Init();
 8003c5e:	f000 fdd5 	bl	800480c <MX_TIM15_Init>
  MX_FMAC_Init();
 8003c62:	f7ff fb63 	bl	800332c <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  PWM_PERIOD_COUNTER = 10000;
 8003c66:	4b70      	ldr	r3, [pc, #448]	; (8003e28 <main+0x200>)
 8003c68:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c6c:	601a      	str	r2, [r3, #0]

  DPC_ADC_Init(&DPC_ADC_Conf,G_VAC,B_VAC,G_IAC,B_IAC,G_VDC,B_VDC,G_IDC,B_IDC);
 8003c6e:	eddf 3a6f 	vldr	s7, [pc, #444]	; 8003e2c <main+0x204>
 8003c72:	ed9f 3a6f 	vldr	s6, [pc, #444]	; 8003e30 <main+0x208>
 8003c76:	eddf 2a6f 	vldr	s5, [pc, #444]	; 8003e34 <main+0x20c>
 8003c7a:	ed9f 2a6f 	vldr	s4, [pc, #444]	; 8003e38 <main+0x210>
 8003c7e:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8003e2c <main+0x204>
 8003c82:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 8003e3c <main+0x214>
 8003c86:	eddf 0a69 	vldr	s1, [pc, #420]	; 8003e2c <main+0x204>
 8003c8a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8003e40 <main+0x218>
 8003c8e:	486d      	ldr	r0, [pc, #436]	; (8003e44 <main+0x21c>)
 8003c90:	f7ff f842 	bl	8002d18 <DPC_ADC_Init>

  DPC_MISC_APPL_Timer_Init(APPL_Tim1, RefreshTime_DESIDERED);   //timer setting                                                                                                                                        /// Function used to Init the timers APP_TIM1 (htim2) used in the power application
 8003c94:	4e6c      	ldr	r6, [pc, #432]	; (8003e48 <main+0x220>)
 8003c96:	f242 7310 	movw	r3, #10000	; 0x2710
 8003c9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c9c:	466d      	mov	r5, sp
 8003c9e:	f106 0410 	add.w	r4, r6, #16
 8003ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003cb2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003cb6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003cba:	f7fd fdb3 	bl	8001824 <DPC_MISC_APPL_Timer_Init>
  DPC_MISC_APPL_Timer_Init(APPL_Tim2, RefreshTime_TO_DESIDERED);                                                                                                                                        /// Function used to Init the timers APP_TIM1 (htim3) used in the power application
 8003cbe:	4e63      	ldr	r6, [pc, #396]	; (8003e4c <main+0x224>)
 8003cc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8003cc6:	466d      	mov	r5, sp
 8003cc8:	f106 0410 	add.w	r4, r6, #16
 8003ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003cdc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003ce0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003ce4:	f7fd fd9e 	bl	8001824 <DPC_MISC_APPL_Timer_Init>
  DPC_MISC_APPL_Timer_Init(APPL_Tim3, RefreshTime2_DESIDERED);
 8003ce8:	4e59      	ldr	r6, [pc, #356]	; (8003e50 <main+0x228>)
 8003cea:	f242 7310 	movw	r3, #10000	; 0x2710
 8003cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8003cf0:	466d      	mov	r5, sp
 8003cf2:	f106 0410 	add.w	r4, r6, #16
 8003cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d02:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003d06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003d0a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003d0e:	f7fd fd89 	bl	8001824 <DPC_MISC_APPL_Timer_Init>

  DPC_MISC_Analog_Start();
 8003d12:	f000 f94d 	bl	8003fb0 <DPC_MISC_Analog_Start>

  DPC_PLL_Init(&PLL_CONVERTER,PLL_KP, PLL_KI, DPC_PLL_TS,PLL_PHI_2pi,PLL_DELTA_F,PLL_FF_Hz,DPC_PLL_SAT_EN,DPC_PLL_PIsat_up,DPC_PLL_PIsat_down);                                                         /// INIT PLL
 8003d16:	ed9f 3a4f 	vldr	s6, [pc, #316]	; 8003e54 <main+0x22c>
 8003d1a:	eddf 2a4f 	vldr	s5, [pc, #316]	; 8003e58 <main+0x230>
 8003d1e:	2201      	movs	r2, #1
 8003d20:	2132      	movs	r1, #50	; 0x32
 8003d22:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8003d26:	eddf 1a4d 	vldr	s3, [pc, #308]	; 8003e5c <main+0x234>
 8003d2a:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8003e60 <main+0x238>
 8003d2e:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8003e64 <main+0x23c>
 8003d32:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003d36:	484c      	ldr	r0, [pc, #304]	; (8003e68 <main+0x240>)
 8003d38:	f7fd fed4 	bl	8001ae4 <DPC_PLL_Init>
  DPC_PI_Init(&CDC.pPI_ID_CURR_CTRL,DPC_ID_KP,DPC_ID_KI,DPC_PI_ID_TS,DPC_PI_ID_sat_up,DPC_PI_ID_sat_down,DPC_PI_ID_SAT_EN,DPC_PI_ID_AW_EN,DPC_PI_ID_AWTG);                                              /// INIT PI CURRENT CTRL D
 8003d3c:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8003e6c <main+0x244>
 8003d40:	2201      	movs	r2, #1
 8003d42:	2101      	movs	r1, #1
 8003d44:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8003e70 <main+0x248>
 8003d48:	eddf 1a4a 	vldr	s3, [pc, #296]	; 8003e74 <main+0x24c>
 8003d4c:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8003e60 <main+0x238>
 8003d50:	eddf 0a49 	vldr	s1, [pc, #292]	; 8003e78 <main+0x250>
 8003d54:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8003e7c <main+0x254>
 8003d58:	4849      	ldr	r0, [pc, #292]	; (8003e80 <main+0x258>)
 8003d5a:	f7fe faed 	bl	8002338 <DPC_PI_Init>
  DPC_PI_Init(&CDC.pPI_IQ_CURR_CTRL,DPC_IQ_KP,DPC_IQ_KI,DPC_PI_IQ_TS,DPC_PI_IQ_sat_up,DPC_PI_IQ_sat_down,DPC_PI_IQ_SAT_EN,DPC_PI_IQ_AW_EN,DPC_PI_IQ_AWTG);                                              /// INIT PI CURRENT CTRL Q
 8003d5e:	eddf 2a43 	vldr	s5, [pc, #268]	; 8003e6c <main+0x244>
 8003d62:	2201      	movs	r2, #1
 8003d64:	2101      	movs	r1, #1
 8003d66:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8003e84 <main+0x25c>
 8003d6a:	eddf 1a47 	vldr	s3, [pc, #284]	; 8003e88 <main+0x260>
 8003d6e:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8003e60 <main+0x238>
 8003d72:	eddf 0a41 	vldr	s1, [pc, #260]	; 8003e78 <main+0x250>
 8003d76:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8003e7c <main+0x254>
 8003d7a:	4844      	ldr	r0, [pc, #272]	; (8003e8c <main+0x264>)
 8003d7c:	f7fe fadc 	bl	8002338 <DPC_PI_Init>
  DPC_PI_Init(&pPI_VDC_CTRL,DPC_VCTRL_KP,DPC_VCTRL_KI,DPC_PI_VDC_TS,DPC_VCTRL_PI_sat_up,DPC_VCTRL_PI_sat_down,DPC_VCTRL_PI_SAT_EN,DPC_VCTRL_PI_AW_EN,DPC_VCTRL_PI_AWTG);                                /// INIT PI VOLTAGE CTRL
 8003d80:	eddf 2a43 	vldr	s5, [pc, #268]	; 8003e90 <main+0x268>
 8003d84:	2201      	movs	r2, #1
 8003d86:	2101      	movs	r1, #1
 8003d88:	ed9f 2a2a 	vldr	s4, [pc, #168]	; 8003e34 <main+0x20c>
 8003d8c:	eddf 1a41 	vldr	s3, [pc, #260]	; 8003e94 <main+0x26c>
 8003d90:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8003e60 <main+0x238>
 8003d94:	eddf 0a40 	vldr	s1, [pc, #256]	; 8003e98 <main+0x270>
 8003d98:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8003e9c <main+0x274>
 8003d9c:	4840      	ldr	r0, [pc, #256]	; (8003ea0 <main+0x278>)
 8003d9e:	f7fe facb 	bl	8002338 <DPC_PI_Init>
  DPC_LPCNTRL_CDC_Init(&CDC,DPC_PLL_OMEGAGRID,DPC_INDUCTOR,CDC_FF_Init,CDC_DEC_INIT,CDC_VDC_FF_INIT);
 8003da2:	2300      	movs	r3, #0
 8003da4:	2200      	movs	r2, #0
 8003da6:	2100      	movs	r1, #0
 8003da8:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8003ea4 <main+0x27c>
 8003dac:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8003ea8 <main+0x280>
 8003db0:	483e      	ldr	r0, [pc, #248]	; (8003eac <main+0x284>)
 8003db2:	f7fd f9fb 	bl	80011ac <DPC_LPCNTRL_CDC_Init>

  DPC_MISC_ACSource_Init(&AC_Source_Limit,DPC_VAC_PK_OV,DPC_VAC_PK_UV,DPC_VAC_PK_UVLO,DPC_VAC_MIN,DPC_IAC_MAX,&DPC_ADC_Conf);                                                                           /// INIT AC_Source
 8003db6:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <main+0x21c>)
 8003db8:	9302      	str	r3, [sp, #8]
 8003dba:	2305      	movs	r3, #5
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	2314      	movs	r3, #20
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	232a      	movs	r3, #42	; 0x2a
 8003dc4:	221c      	movs	r2, #28
 8003dc6:	f240 1161 	movw	r1, #353	; 0x161
 8003dca:	4839      	ldr	r0, [pc, #228]	; (8003eb0 <main+0x288>)
 8003dcc:	f7fd fc2c 	bl	8001628 <DPC_MISC_ACSource_Init>
  DPC_MISC_DCLoad_Init(&DC_Load_Limit,DPC_VDC_OV,DPC_VCAP_LIM,DPC_NO_LOAD_CURR,DPC_LOW_LOAD_CURR,DPC_OVER_LOAD_CURR,&DPC_ADC_Conf);
 8003dd0:	4b1c      	ldr	r3, [pc, #112]	; (8003e44 <main+0x21c>)
 8003dd2:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8003dd6:	eddf 0a37 	vldr	s1, [pc, #220]	; 8003eb4 <main+0x28c>
 8003dda:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003dde:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8003de2:	f240 218a 	movw	r1, #650	; 0x28a
 8003de6:	4834      	ldr	r0, [pc, #208]	; (8003eb8 <main+0x290>)
 8003de8:	f7fd fb46 	bl	8001478 <DPC_MISC_DCLoad_Init>

  DPC_LPCNTRL_PFC_Init(&pPFC_CTRL,DPC_CTRL_INIT,DPC_PFC_VDC,&DPC_ADC_Conf);
 8003dec:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <main+0x21c>)
 8003dee:	2278      	movs	r2, #120	; 0x78
 8003df0:	2102      	movs	r1, #2
 8003df2:	4832      	ldr	r0, [pc, #200]	; (8003ebc <main+0x294>)
 8003df4:	f7fd fa03 	bl	80011fe <DPC_LPCNTRL_PFC_Init>
  DPC_PWM_Init(DPC_BURST_PWM_FREQ,PWM_FREQ,DPC_PWM_INIT,&tDPC_PWM, &DMA_HRTIM_SRC);
 8003df8:	4b31      	ldr	r3, [pc, #196]	; (8003ec0 <main+0x298>)
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <main+0x29c>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f649 4140 	movw	r1, #40000	; 0x9c40
 8003e04:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003e08:	f7fe f9ee 	bl	80021e8 <DPC_PWM_Init>
//  DPC_FSM_State_Set(DPC_FSM_WAIT);
//
  DPC_MISC_Appl_Timer_Start();
 8003e0c:	f7fd fd34 	bl	8001878 <DPC_MISC_Appl_Timer_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_SET);
 8003e10:	2201      	movs	r2, #1
 8003e12:	2140      	movs	r1, #64	; 0x40
 8003e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e18:	f003 faba 	bl	8007390 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	2120      	movs	r1, #32
 8003e20:	4829      	ldr	r0, [pc, #164]	; (8003ec8 <main+0x2a0>)
 8003e22:	f003 fab5 	bl	8007390 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_SET);
 8003e26:	e7f3      	b.n	8003e10 <main+0x1e8>
 8003e28:	2000b6e4 	.word	0x2000b6e4
 8003e2c:	45000000 	.word	0x45000000
 8003e30:	42cccccd 	.word	0x42cccccd
 8003e34:	00000000 	.word	0x00000000
 8003e38:	40f73b64 	.word	0x40f73b64
 8003e3c:	422aae14 	.word	0x422aae14
 8003e40:	4096a7f0 	.word	0x4096a7f0
 8003e44:	2000184c 	.word	0x2000184c
 8003e48:	2000b98c 	.word	0x2000b98c
 8003e4c:	2000b8f4 	.word	0x2000b8f4
 8003e50:	2000b940 	.word	0x2000b940
 8003e54:	c2480000 	.word	0xc2480000
 8003e58:	42480000 	.word	0x42480000
 8003e5c:	bfc90fd8 	.word	0xbfc90fd8
 8003e60:	38d1b717 	.word	0x38d1b717
 8003e64:	43fa0000 	.word	0x43fa0000
 8003e68:	2000b638 	.word	0x2000b638
 8003e6c:	3c23d70a 	.word	0x3c23d70a
 8003e70:	bf666666 	.word	0xbf666666
 8003e74:	3f666666 	.word	0x3f666666
 8003e78:	4410d99a 	.word	0x4410d99a
 8003e7c:	3e2eb1c4 	.word	0x3e2eb1c4
 8003e80:	200005c4 	.word	0x200005c4
 8003e84:	bdcccccd 	.word	0xbdcccccd
 8003e88:	3dcccccd 	.word	0x3dcccccd
 8003e8c:	2000060c 	.word	0x2000060c
 8003e90:	3ca3d70a 	.word	0x3ca3d70a
 8003e94:	3f03fd5d 	.word	0x3f03fd5d
 8003e98:	3e99999a 	.word	0x3e99999a
 8003e9c:	39d1b717 	.word	0x39d1b717
 8003ea0:	2000b558 	.word	0x2000b558
 8003ea4:	3a6bedfa 	.word	0x3a6bedfa
 8003ea8:	439d0000 	.word	0x439d0000
 8003eac:	2000057c 	.word	0x2000057c
 8003eb0:	20000694 	.word	0x20000694
 8003eb4:	3f99999a 	.word	0x3f99999a
 8003eb8:	2000b500 	.word	0x2000b500
 8003ebc:	2000b79c 	.word	0x2000b79c
 8003ec0:	20000048 	.word	0x20000048
 8003ec4:	200017fc 	.word	0x200017fc
 8003ec8:	48000800 	.word	0x48000800

08003ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b0a8      	sub	sp, #160	; 0xa0
 8003ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ed2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ed6:	2238      	movs	r2, #56	; 0x38
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f007 fa0f 	bl	800b2fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ee0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	2254      	movs	r2, #84	; 0x54
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f007 fa01 	bl	800b2fe <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003efc:	2000      	movs	r0, #0
 8003efe:	f005 fabd 	bl	800947c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8003f02:	2322      	movs	r3, #34	; 0x22
 8003f04:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f0a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f0c:	2340      	movs	r3, #64	; 0x40
 8003f0e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f16:	2302      	movs	r3, #2
 8003f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003f22:	2304      	movs	r3, #4
 8003f24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003f28:	2355      	movs	r3, #85	; 0x55
 8003f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003f34:	2302      	movs	r3, #2
 8003f36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f44:	4618      	mov	r0, r3
 8003f46:	f005 fb4d 	bl	80095e4 <HAL_RCC_OscConfig>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003f50:	f000 fa94 	bl	800447c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f54:	230f      	movs	r3, #15
 8003f56:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f60:	2300      	movs	r3, #0
 8003f62:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f64:	2300      	movs	r3, #0
 8003f66:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003f68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f005 fe50 	bl	8009c14 <HAL_RCC_ClockConfig>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003f7a:	f000 fa7f 	bl	800447c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12
 8003f7e:	f44f 33e0 	mov.w	r3, #114688	; 0x1c000
 8003f82:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8003f84:	2300      	movs	r3, #0
 8003f86:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003f88:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003f8c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003f8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f94:	463b      	mov	r3, r7
 8003f96:	4618      	mov	r0, r3
 8003f98:	f006 f842 	bl	800a020 <HAL_RCCEx_PeriphCLKConfig>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8003fa2:	f000 fa6b 	bl	800447c <Error_Handler>
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	37a0      	adds	r7, #160	; 0xa0
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <DPC_MISC_Analog_Start>:

/* USER CODE BEGIN 4 */

void  DPC_MISC_Analog_Start(void){
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  HAL_ADC_Start_DMA(&hadc1,p_ADC1_Data,ADC1_CHs);                              ///HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* p_ADC1_Data, uint32_t Length)
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	4903      	ldr	r1, [pc, #12]	; (8003fc4 <DPC_MISC_Analog_Start+0x14>)
 8003fb8:	4803      	ldr	r0, [pc, #12]	; (8003fc8 <DPC_MISC_Analog_Start+0x18>)
 8003fba:	f001 fa39 	bl	8005430 <HAL_ADC_Start_DMA>
}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	200017dc 	.word	0x200017dc
 8003fc8:	200001b4 	.word	0x200001b4

08003fcc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af04      	add	r7, sp, #16
 8003fd2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	f040 8139 	bne.w	8004252 <HAL_TIM_PeriodElapsedCallback+0x286>
	{
		 DATA_Acquisition_from_DMA(p_ADC1_Data,p_ADC2_Data); //Pass ADC DMA Data in DATA LAYER
 8003fe0:	49a0      	ldr	r1, [pc, #640]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003fe2:	48a1      	ldr	r0, [pc, #644]	; (8004268 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003fe4:	f7fc fdb4 	bl	8000b50 <DATA_Acquisition_from_DMA>

		//start READ variable from DATA LAYER
		ADC_Current_AC_ProcessData((uint32_t*)Read_Curr_GRID(),&CURRENT_ADC_AC_IN_NORM);                    /// Read Current AC from DATA Layer and pass it at CURRENT_ADC_AC_IN_NORM
 8003fe8:	f7fc fdfe 	bl	8000be8 <Read_Curr_GRID>
 8003fec:	4603      	mov	r3, r0
 8003fee:	499f      	ldr	r1, [pc, #636]	; (800426c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fdc3 	bl	8002b7c <ADC_Current_AC_ProcessData>
		ADC2Phy_Current_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Curr_GRID(),&CURRENT_ADC_AC_IN_PHY);      /// Read Current AC from DATA Layer and pass it at CURRENT_ADC_AC_IN_PHY
 8003ff6:	f7fc fdf7 	bl	8000be8 <Read_Curr_GRID>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4a9c      	ldr	r2, [pc, #624]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003ffe:	4619      	mov	r1, r3
 8004000:	489c      	ldr	r0, [pc, #624]	; (8004274 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004002:	f7fe fdfd 	bl	8002c00 <ADC2Phy_Current_ProcessData>
		//end READ variable from DATA LAYER

		Status_Load=DPC_MISC_Check_DCLoad(&DPC_Load,DC_Load_Limit);
 8004006:	4b9c      	ldr	r3, [pc, #624]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	2100      	movs	r1, #0
 800400c:	4611      	mov	r1, r2
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	2500      	movs	r5, #0
 8004012:	4615      	mov	r5, r2
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	2400      	movs	r4, #0
 8004018:	4614      	mov	r4, r2
 800401a:	466a      	mov	r2, sp
 800401c:	330c      	adds	r3, #12
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	6010      	str	r0, [r2, #0]
 8004022:	889b      	ldrh	r3, [r3, #4]
 8004024:	8093      	strh	r3, [r2, #4]
 8004026:	462a      	mov	r2, r5
 8004028:	4623      	mov	r3, r4
 800402a:	4894      	ldr	r0, [pc, #592]	; (800427c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800402c:	f7fd f9a6 	bl	800137c <DPC_MISC_Check_DCLoad>
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	4b92      	ldr	r3, [pc, #584]	; (8004280 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004036:	701a      	strb	r2, [r3, #0]
		Status_Source=DPC_MISC_CHECK_AC_SOURCE(&AC_SOURCE,AC_Source_Limit,PLL_CONVERTER.pll_theta_out_2pi);  ///Check AC SOURCE state reading AC Voltage and curent
 8004038:	4b92      	ldr	r3, [pc, #584]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800403a:	edd3 7a02 	vldr	s15, [r3, #8]
 800403e:	4b92      	ldr	r3, [pc, #584]	; (8004288 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	2600      	movs	r6, #0
 8004044:	4616      	mov	r6, r2
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	2500      	movs	r5, #0
 800404a:	4615      	mov	r5, r2
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	2400      	movs	r4, #0
 8004050:	4614      	mov	r4, r2
 8004052:	466a      	mov	r2, sp
 8004054:	330c      	adds	r3, #12
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	6859      	ldr	r1, [r3, #4]
 800405a:	c203      	stmia	r2!, {r0, r1}
 800405c:	eeb0 0a67 	vmov.f32	s0, s15
 8004060:	4631      	mov	r1, r6
 8004062:	462a      	mov	r2, r5
 8004064:	4623      	mov	r3, r4
 8004066:	4889      	ldr	r0, [pc, #548]	; (800428c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004068:	f7fd fc20 	bl	80018ac <DPC_MISC_CHECK_AC_SOURCE>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	4b87      	ldr	r3, [pc, #540]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004072:	701a      	strb	r2, [r3, #0]

		Iabc_temp=*((TRANSFORM_ABC_t*)&CURRENT_ADC_AC_IN_NORM);                                             /// Sensing Current
 8004074:	4a7d      	ldr	r2, [pc, #500]	; (800426c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004076:	4b87      	ldr	r3, [pc, #540]	; (8004294 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004078:	ca07      	ldmia	r2, {r0, r1, r2}
 800407a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Iabc_Phy=*((TRANSFORM_ABC_t*)&CURRENT_ADC_AC_IN_PHY);                                               /// Sensing Current in Physical dimension
 800407e:	4a7c      	ldr	r2, [pc, #496]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004080:	4b85      	ldr	r3, [pc, #532]	; (8004298 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004082:	ca07      	ldmia	r2, {r0, r1, r2}
 8004084:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		Run_ClarkePark(&Iabc_temp, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Current_qdo);
 8004088:	f7fc fd14 	bl	8000ab4 <DATA_Read_Theta_PLL>
 800408c:	eeb0 7a40 	vmov.f32	s14, s0
 8004090:	4b7c      	ldr	r3, [pc, #496]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004092:	edd3 7a03 	vldr	s15, [r3, #12]
 8004096:	4981      	ldr	r1, [pc, #516]	; (800429c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004098:	eef0 0a67 	vmov.f32	s1, s15
 800409c:	eeb0 0a47 	vmov.f32	s0, s14
 80040a0:	487c      	ldr	r0, [pc, #496]	; (8004294 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80040a2:	f7fe fbd5 	bl	8002850 <Run_ClarkePark>
		//Run_ClarkePark(&Iabc_Phy, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Current_qdo_Phy);

		DATA_CURR_Write_ClarkePark(Current_qdo);  // Current qdo in DATA layer
 80040a6:	4b7d      	ldr	r3, [pc, #500]	; (800429c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80040a8:	edd3 6a00 	vldr	s13, [r3]
 80040ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80040b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80040b4:	eeb0 0a66 	vmov.f32	s0, s13
 80040b8:	eef0 0a47 	vmov.f32	s1, s14
 80040bc:	eeb0 1a67 	vmov.f32	s2, s15
 80040c0:	f7fc fd06 	bl	8000ad0 <DATA_CURR_Write_ClarkePark>
		//DATA_CURR_Write_ClarkePark(Current_qdo_Phy);  // Current qdo in DATA layer

		PC_State=FSM_Run;
 80040c4:	4b76      	ldr	r3, [pc, #472]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80040c6:	2203      	movs	r2, #3
 80040c8:	701a      	strb	r2, [r3, #0]
		//Status_Source=OK_SOURCE;
		if (Status_Source==OK_SOURCE){
 80040ca:	4b71      	ldr	r3, [pc, #452]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d103      	bne.n	80040da <HAL_TIM_PeriodElapsedCallback+0x10e>
			FSM_Run_State = Run_PFC_Mode;
 80040d2:	4b74      	ldr	r3, [pc, #464]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80040d4:	2202      	movs	r2, #2
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e002      	b.n	80040e0 <HAL_TIM_PeriodElapsedCallback+0x114>
		}
		else FSM_Run_State = Run_Idle;
 80040da:	4b72      	ldr	r3, [pc, #456]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
//


		if (PC_State==FSM_Run)                                      ///__________FSM_Run________
 80040e0:	4b6f      	ldr	r3, [pc, #444]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d158      	bne.n	800419a <HAL_TIM_PeriodElapsedCallback+0x1ce>
		{
		  switch(FSM_Run_State){
 80040e8:	4b6e      	ldr	r3, [pc, #440]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d03c      	beq.n	800416a <HAL_TIM_PeriodElapsedCallback+0x19e>
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d002      	beq.n	80040fa <HAL_TIM_PeriodElapsedCallback+0x12e>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d048      	beq.n	800418a <HAL_TIM_PeriodElapsedCallback+0x1be>
 80040f8:	e076      	b.n	80041e8 <HAL_TIM_PeriodElapsedCallback+0x21c>
		  case Run_PFC_Mode:
			DPC_LPCNTRL_PFC_Mode(&pPFC_CTRL,&pPI_VDC_CTRL,&VOLTAGECTRL,&CDC,&V_DQO_CTRL,&Current_qdo,&Voltage_qdo,&VOLTAGE_ADC_DC_IN_PHY); ///PFC CONTROL______
 80040fa:	4b6b      	ldr	r3, [pc, #428]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80040fc:	9303      	str	r3, [sp, #12]
 80040fe:	4b6b      	ldr	r3, [pc, #428]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004100:	9302      	str	r3, [sp, #8]
 8004102:	4b66      	ldr	r3, [pc, #408]	; (800429c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	4b6a      	ldr	r3, [pc, #424]	; (80042b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	4b6a      	ldr	r3, [pc, #424]	; (80042b4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800410c:	4a6a      	ldr	r2, [pc, #424]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800410e:	496b      	ldr	r1, [pc, #428]	; (80042bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004110:	486b      	ldr	r0, [pc, #428]	; (80042c0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004112:	f7fc feac 	bl	8000e6e <DPC_LPCNTRL_PFC_Mode>
			Run_Inv_ClarkePark(&V_DQO_CTRL,PLL_CONVERTER.pll_theta_out_2pi,PLL_CONVERTER.pll_phi_2pi,&V_ABC_CTRL);                                  /// DQO to ABC Voltag to provide to modulator
 8004116:	4b5b      	ldr	r3, [pc, #364]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004118:	edd3 7a02 	vldr	s15, [r3, #8]
 800411c:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800411e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004122:	4968      	ldr	r1, [pc, #416]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004124:	eef0 0a47 	vmov.f32	s1, s14
 8004128:	eeb0 0a67 	vmov.f32	s0, s15
 800412c:	4860      	ldr	r0, [pc, #384]	; (80042b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800412e:	f7fe fbff 	bl	8002930 <Run_Inv_ClarkePark>
			DPC_PWM_OutEnable(&tDPC_PWM);                                                                                                           ///PWM output will be enabled in PFC_Mode
 8004132:	4865      	ldr	r0, [pc, #404]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004134:	f7fe f83a 	bl	80021ac <DPC_PWM_OutEnable>
			HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 8004138:	2201      	movs	r2, #1
 800413a:	2120      	movs	r1, #32
 800413c:	4863      	ldr	r0, [pc, #396]	; (80042cc <HAL_TIM_PeriodElapsedCallback+0x300>)
 800413e:	f003 f927 	bl	8007390 <HAL_GPIO_WritePin>
			DPC_PWM_Send_Duty_SPWM(&tDPC_PWM,V_ABC_CTRL.axA,V_ABC_CTRL.axB,V_ABC_CTRL.axC,&DMA_HRTIM_SRC);                                                         ///MODULATOR
 8004142:	4b60      	ldr	r3, [pc, #384]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004144:	edd3 7a00 	vldr	s15, [r3]
 8004148:	4b5e      	ldr	r3, [pc, #376]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800414a:	ed93 7a01 	vldr	s14, [r3, #4]
 800414e:	4b5d      	ldr	r3, [pc, #372]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004150:	edd3 6a02 	vldr	s13, [r3, #8]
 8004154:	495e      	ldr	r1, [pc, #376]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004156:	eeb0 1a66 	vmov.f32	s2, s13
 800415a:	eef0 0a47 	vmov.f32	s1, s14
 800415e:	eeb0 0a67 	vmov.f32	s0, s15
 8004162:	4859      	ldr	r0, [pc, #356]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004164:	f7fd fe46 	bl	8001df4 <DPC_PWM_Send_Duty_SPWM>
			  break;
 8004168:	e03e      	b.n	80041e8 <HAL_TIM_PeriodElapsedCallback+0x21c>
		  case Run_Burst_Mode:
			DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&BURST_CTRL,(uint32_t*)Read_Curr_DC(),&tDPC_PWM);
 800416a:	f7fc fd51 	bl	8000c10 <Read_Volt_DC>
 800416e:	4604      	mov	r4, r0
 8004170:	f7fc fd44 	bl	8000bfc <Read_Curr_DC>
 8004174:	4602      	mov	r2, r0
 8004176:	4b54      	ldr	r3, [pc, #336]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004178:	4956      	ldr	r1, [pc, #344]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800417a:	4620      	mov	r0, r4
 800417c:	f7fc ff89 	bl	8001092 <DPC_LPCNTRL_Burst_Mode>
			DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 8004180:	494c      	ldr	r1, [pc, #304]	; (80042b4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004182:	484e      	ldr	r0, [pc, #312]	; (80042bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004184:	f7fc fe5c 	bl	8000e40 <DPC_LPCNTRL_PFC_Mode_Reset>
			break;
 8004188:	e02e      	b.n	80041e8 <HAL_TIM_PeriodElapsedCallback+0x21c>
		  case Run_Idle:
			//Idle_Mode();
			DPC_PWM_OutDisable();
 800418a:	f7fe f809 	bl	80021a0 <DPC_PWM_OutDisable>
			DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 800418e:	4949      	ldr	r1, [pc, #292]	; (80042b4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004190:	484a      	ldr	r0, [pc, #296]	; (80042bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004192:	f7fc fe55 	bl	8000e40 <DPC_LPCNTRL_PFC_Mode_Reset>
			break;
 8004196:	bf00      	nop
 8004198:	e026      	b.n	80041e8 <HAL_TIM_PeriodElapsedCallback+0x21c>
		  }
		}
		else if (PC_State==FSM_StartUp_burst)                        ///__________FSM_StartUp_burst__________
 800419a:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d10f      	bne.n	80041c2 <HAL_TIM_PeriodElapsedCallback+0x1f6>
		{
		  DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&STARTBURST_CTRL,(uint32_t*)Read_Curr_DC(),&tDPC_PWM);
 80041a2:	f7fc fd35 	bl	8000c10 <Read_Volt_DC>
 80041a6:	4604      	mov	r4, r0
 80041a8:	f7fc fd28 	bl	8000bfc <Read_Curr_DC>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b46      	ldr	r3, [pc, #280]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80041b0:	4949      	ldr	r1, [pc, #292]	; (80042d8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80041b2:	4620      	mov	r0, r4
 80041b4:	f7fc ff6d 	bl	8001092 <DPC_LPCNTRL_Burst_Mode>
		  DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 80041b8:	493e      	ldr	r1, [pc, #248]	; (80042b4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80041ba:	4840      	ldr	r0, [pc, #256]	; (80042bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80041bc:	f7fc fe40 	bl	8000e40 <DPC_LPCNTRL_PFC_Mode_Reset>
 80041c0:	e012      	b.n	80041e8 <HAL_TIM_PeriodElapsedCallback+0x21c>
		}
		else if(PC_State==FSM_Fault)                                ///FSM_Fault
 80041c2:	4b37      	ldr	r3, [pc, #220]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d10e      	bne.n	80041e8 <HAL_TIM_PeriodElapsedCallback+0x21c>
		{
		  if(Trigger_Timestamp==SET){
 80041ca:	4b44      	ldr	r3, [pc, #272]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0x310>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d10a      	bne.n	80041e8 <HAL_TIM_PeriodElapsedCallback+0x21c>
		  Timestamp_PLL_CONVERTER=PLL_CONVERTER;
 80041d2:	4a43      	ldr	r2, [pc, #268]	; (80042e0 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80041d4:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	239c      	movs	r3, #156	; 0x9c
 80041dc:	461a      	mov	r2, r3
 80041de:	f007 f883 	bl	800b2e8 <memcpy>
		  Trigger_Timestamp=RESET;
 80041e2:	4b3e      	ldr	r3, [pc, #248]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0x310>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
		  }
		}
		if (Status_Source==OK_SOURCE){
 80041e8:	4b29      	ldr	r3, [pc, #164]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d102      	bne.n	80041f6 <HAL_TIM_PeriodElapsedCallback+0x22a>
			Flag2=1;
 80041f0:	4b3c      	ldr	r3, [pc, #240]	; (80042e4 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
		}
		if (Service_step>=500){
 80041f6:	4b3c      	ldr	r3, [pc, #240]	; (80042e8 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041fe:	d309      	bcc.n	8004214 <HAL_TIM_PeriodElapsedCallback+0x248>
			Service_step=0;
 8004200:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004202:	2200      	movs	r2, #0
 8004204:	801a      	strh	r2, [r3, #0]
			if (Flag2==1){
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d102      	bne.n	8004214 <HAL_TIM_PeriodElapsedCallback+0x248>
				Service_step=0;
 800420e:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004210:	2200      	movs	r2, #0
 8004212:	801a      	strh	r2, [r3, #0]
//			DMA_HRTIM_DST[2]=1;
//		}


//		Prev_Saturation = DMA_HRTIM_SRC[0];
		Flag= Read_GRID();
 8004214:	f7fc fcde 	bl	8000bd4 <Read_GRID>
 8004218:	4602      	mov	r2, r0
 800421a:	4b34      	ldr	r3, [pc, #208]	; (80042ec <HAL_TIM_PeriodElapsedCallback+0x320>)
 800421c:	601a      	str	r2, [r3, #0]

		VOLTAGE_ADC_AC_IN_BITS.phA = (float)(Flag[0]);
 800421e:	4b33      	ldr	r3, [pc, #204]	; (80042ec <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	ee07 3a90 	vmov	s15, r3
 8004228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422c:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800422e:	edc3 7a00 	vstr	s15, [r3]
		Service_data[0][Service_step] = VOLTAGE_ADC_AC_IN_BITS.phA;
 8004232:	4b2d      	ldr	r3, [pc, #180]	; (80042e8 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	492d      	ldr	r1, [pc, #180]	; (80042f4 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800423e:	0083      	lsls	r3, r0, #2
 8004240:	440b      	add	r3, r1
 8004242:	601a      	str	r2, [r3, #0]
//		Service_data[1][Service_step] = CURRENT_ADC_AC_IN_NORM.phA;
//		Service_data[2][Service_step] = V_DQO_CTRL.axd;
//		Service_data[3][Service_step] = DMA_HRTIM_SRC[0];
		//Service_data[4][Service_step]=__HAL_HRTIM_GETCOMPARE(&PWM_Tim1,HRTIM_TIMERINDEX_TIMER_A,HRTIM_COMPAREUNIT_1);
		Service_step++;
 8004244:	4b28      	ldr	r3, [pc, #160]	; (80042e8 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	4b26      	ldr	r3, [pc, #152]	; (80042e8 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800424e:	801a      	strh	r2, [r3, #0]
	}
	else{
		HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
	}
	}
}
 8004250:	e0eb      	b.n	800442a <HAL_TIM_PeriodElapsedCallback+0x45e>
	else if(htim->Instance == TIM3){
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a28      	ldr	r2, [pc, #160]	; (80042f8 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d14f      	bne.n	80042fc <HAL_TIM_PeriodElapsedCallback+0x330>
		TimeoutMng();
 800425c:	f7fe f962 	bl	8002524 <TimeoutMng>
}
 8004260:	e0e3      	b.n	800442a <HAL_TIM_PeriodElapsedCallback+0x45e>
 8004262:	bf00      	nop
 8004264:	2000b518 	.word	0x2000b518
 8004268:	200017dc 	.word	0x200017dc
 800426c:	2000b4f4 	.word	0x2000b4f4
 8004270:	200004fc 	.word	0x200004fc
 8004274:	2000184c 	.word	0x2000184c
 8004278:	2000b500 	.word	0x2000b500
 800427c:	2000b5ec 	.word	0x2000b5ec
 8004280:	2000b784 	.word	0x2000b784
 8004284:	2000b638 	.word	0x2000b638
 8004288:	20000694 	.word	0x20000694
 800428c:	20000680 	.word	0x20000680
 8004290:	20000656 	.word	0x20000656
 8004294:	20000558 	.word	0x20000558
 8004298:	2000b5e0 	.word	0x2000b5e0
 800429c:	20000660 	.word	0x20000660
 80042a0:	20000564 	.word	0x20000564
 80042a4:	2000b5c8 	.word	0x2000b5c8
 80042a8:	20000514 	.word	0x20000514
 80042ac:	2000b4c0 	.word	0x2000b4c0
 80042b0:	20000508 	.word	0x20000508
 80042b4:	2000057c 	.word	0x2000057c
 80042b8:	2000b5fc 	.word	0x2000b5fc
 80042bc:	2000b558 	.word	0x2000b558
 80042c0:	2000b79c 	.word	0x2000b79c
 80042c4:	20000568 	.word	0x20000568
 80042c8:	200017fc 	.word	0x200017fc
 80042cc:	48000800 	.word	0x48000800
 80042d0:	20000048 	.word	0x20000048
 80042d4:	2000b4cc 	.word	0x2000b4cc
 80042d8:	20000530 	.word	0x20000530
 80042dc:	20000000 	.word	0x20000000
 80042e0:	2000b6e8 	.word	0x2000b6e8
 80042e4:	2000b630 	.word	0x2000b630
 80042e8:	20000654 	.word	0x20000654
 80042ec:	2000b798 	.word	0x2000b798
 80042f0:	2000b5cc 	.word	0x2000b5cc
 80042f4:	20001880 	.word	0x20001880
 80042f8:	40000400 	.word	0x40000400
	else if(htim->Instance == TIM6){
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a4c      	ldr	r2, [pc, #304]	; (8004434 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8004302:	4293      	cmp	r3, r2
 8004304:	f040 8091 	bne.w	800442a <HAL_TIM_PeriodElapsedCallback+0x45e>
	ADC_Voltage_AC_ProcessData((uint32_t*)Read_GRID(),&VOLTAGE_ADC_AC_IN_NORM);                         /// Read Voltage AC from DATA Layer and pass it at VOLTAGE_ADC_AC_IN_NORM
 8004308:	f7fc fc64 	bl	8000bd4 <Read_GRID>
 800430c:	4603      	mov	r3, r0
 800430e:	494a      	ldr	r1, [pc, #296]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe fb3f 	bl	8002994 <ADC_Voltage_AC_ProcessData>
	ADC_Voltage_DC_ProcessData((uint32_t*)Read_Volt_DC(),&VOLTAGE_ADC_DC_IN_NORM);                      /// Read Voltage DC from DATA Layer and pass it at VOLTAGE_ADC_DC_IN_NORM
 8004316:	f7fc fc7b 	bl	8000c10 <Read_Volt_DC>
 800431a:	4603      	mov	r3, r0
 800431c:	4947      	ldr	r1, [pc, #284]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x470>)
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fbc4 	bl	8002aac <ADC_Voltage_DC_ProcessData>
	ADC_Current_DC_ProcessData((uint32_t*)Read_Curr_DC(),&CURRENT_ADC_DC_IN_NORM);                      /// Read Current DC from DATA Layer and pass it at CURRENT_ADC_DC_IN_NORM
 8004324:	f7fc fc6a 	bl	8000bfc <Read_Curr_DC>
 8004328:	4603      	mov	r3, r0
 800432a:	4945      	ldr	r1, [pc, #276]	; (8004440 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800432c:	4618      	mov	r0, r3
 800432e:	f7fe fcb1 	bl	8002c94 <ADC_Current_DC_ProcessData>
	ADC2Phy_DC_Voltage_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Volt_DC(),&VOLTAGE_ADC_DC_IN_PHY);     /// Read Voltage AC from DATA Layer and pass it at VOLTAGE_ADC_AC_IN_PHY
 8004332:	f7fc fc6d 	bl	8000c10 <Read_Volt_DC>
 8004336:	4603      	mov	r3, r0
 8004338:	4a42      	ldr	r2, [pc, #264]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800433a:	4619      	mov	r1, r3
 800433c:	4842      	ldr	r0, [pc, #264]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800433e:	f7fe fbdd 	bl	8002afc <ADC2Phy_DC_Voltage_ProcessData>
	ADC2Phy_Voltage_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_GRID(),&VOLTAGE_ADC_AC_IN_PHY);           /// Read Voltage DC from DATA Layer and pass it at VOLTAGE_ADC_DC_IN_PHY
 8004342:	f7fc fc47 	bl	8000bd4 <Read_GRID>
 8004346:	4603      	mov	r3, r0
 8004348:	4a40      	ldr	r2, [pc, #256]	; (800444c <HAL_TIM_PeriodElapsedCallback+0x480>)
 800434a:	4619      	mov	r1, r3
 800434c:	483e      	ldr	r0, [pc, #248]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800434e:	f7fe fb63 	bl	8002a18 <ADC2Phy_Voltage_ProcessData>
	ADC2Phy_DC_Current_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Curr_DC(),&CURRENT_ADC_DC_IN_PHY);     /// Read Current DC from DATA Layer and pass it at CURRENT_ADC_DC_IN_PHY
 8004352:	f7fc fc53 	bl	8000bfc <Read_Curr_DC>
 8004356:	4603      	mov	r3, r0
 8004358:	4a3d      	ldr	r2, [pc, #244]	; (8004450 <HAL_TIM_PeriodElapsedCallback+0x484>)
 800435a:	4619      	mov	r1, r3
 800435c:	483a      	ldr	r0, [pc, #232]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800435e:	f7fe fcb7 	bl	8002cd0 <ADC2Phy_DC_Current_ProcessData>
	Vabc_temp=*((TRANSFORM_ABC_t*)&VOLTAGE_ADC_AC_IN_NORM);                                             /// Sensing Voltage
 8004362:	4a35      	ldr	r2, [pc, #212]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8004364:	4b3b      	ldr	r3, [pc, #236]	; (8004454 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8004366:	ca07      	ldmia	r2, {r0, r1, r2}
 8004368:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Vabc_Phy=*((TRANSFORM_ABC_t*)&VOLTAGE_ADC_AC_IN_PHY);                                               /// Sensing Voltage in Physical dimension
 800436c:	4a37      	ldr	r2, [pc, #220]	; (800444c <HAL_TIM_PeriodElapsedCallback+0x480>)
 800436e:	4b3a      	ldr	r3, [pc, #232]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8004370:	ca07      	ldmia	r2, {r0, r1, r2}
 8004372:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Run_ClarkePark(&Vabc_temp, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Voltage_qdo);
 8004376:	f7fc fb9d 	bl	8000ab4 <DATA_Read_Theta_PLL>
 800437a:	eeb0 7a40 	vmov.f32	s14, s0
 800437e:	4b37      	ldr	r3, [pc, #220]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x490>)
 8004380:	edd3 7a03 	vldr	s15, [r3, #12]
 8004384:	4936      	ldr	r1, [pc, #216]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8004386:	eef0 0a67 	vmov.f32	s1, s15
 800438a:	eeb0 0a47 	vmov.f32	s0, s14
 800438e:	4831      	ldr	r0, [pc, #196]	; (8004454 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8004390:	f7fe fa5e 	bl	8002850 <Run_ClarkePark>
	Run_ClarkePark(&Vabc_Phy, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Voltage_qdo_Phy);        ///
 8004394:	f7fc fb8e 	bl	8000ab4 <DATA_Read_Theta_PLL>
 8004398:	eeb0 7a40 	vmov.f32	s14, s0
 800439c:	4b2f      	ldr	r3, [pc, #188]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x490>)
 800439e:	edd3 7a03 	vldr	s15, [r3, #12]
 80043a2:	4930      	ldr	r1, [pc, #192]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80043a4:	eef0 0a67 	vmov.f32	s1, s15
 80043a8:	eeb0 0a47 	vmov.f32	s0, s14
 80043ac:	482a      	ldr	r0, [pc, #168]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 80043ae:	f7fe fa4f 	bl	8002850 <Run_ClarkePark>
	DATA_VOLT_Write_ClarkePark(Voltage_qdo);                                                            /// Voltage qdo in DATA layer
 80043b2:	4b2b      	ldr	r3, [pc, #172]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0x494>)
 80043b4:	edd3 6a00 	vldr	s13, [r3]
 80043b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80043bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80043c0:	eeb0 0a66 	vmov.f32	s0, s13
 80043c4:	eef0 0a47 	vmov.f32	s1, s14
 80043c8:	eeb0 1a67 	vmov.f32	s2, s15
 80043cc:	f7fc fba0 	bl	8000b10 <DATA_VOLT_Write_ClarkePark>
	VOLTAGE_AC_qd_IN_NORM=*((VoltageAC_qd_PLL_Struct*)&Voltage_qdo);                                    ///Auxiliary Data for PLL
 80043d0:	4a23      	ldr	r2, [pc, #140]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0x494>)
 80043d2:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80043d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80043d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PLL_Status=DPC_PLL_pllqd_Run(&PLL_CONVERTER,&VOLTAGE_AC_qd_IN_NORM,&theta_out_pll,&omega_out_pll);  ///PLL Phase Extimation
 80043da:	4b24      	ldr	r3, [pc, #144]	; (800446c <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80043dc:	4a24      	ldr	r2, [pc, #144]	; (8004470 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80043de:	4922      	ldr	r1, [pc, #136]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80043e0:	481e      	ldr	r0, [pc, #120]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80043e2:	f7fd fbdd 	bl	8001ba0 <DPC_PLL_pllqd_Run>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b22      	ldr	r3, [pc, #136]	; (8004474 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80043ec:	701a      	strb	r2, [r3, #0]
	DATA_Write_Theta_PLL(PLL_CONVERTER.pll_theta_out_2pi);                                              ///Pass Theta to DATA LAYER
 80043ee:	4b1b      	ldr	r3, [pc, #108]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80043f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80043f4:	eeb0 0a67 	vmov.f32	s0, s15
 80043f8:	f7fc fb4c 	bl	8000a94 <DATA_Write_Theta_PLL>
	if (VOLTAGE_ADC_DC_IN_PHY.Vdc_tot>=350){
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80043fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8004402:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004478 <HAL_TIM_PeriodElapsedCallback+0x4ac>
 8004406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440e:	db06      	blt.n	800441e <HAL_TIM_PeriodElapsedCallback+0x452>
		HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_SET);
 8004410:	2201      	movs	r2, #1
 8004412:	2180      	movs	r1, #128	; 0x80
 8004414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004418:	f002 ffba 	bl	8007390 <HAL_GPIO_WritePin>
}
 800441c:	e005      	b.n	800442a <HAL_TIM_PeriodElapsedCallback+0x45e>
		HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 800441e:	2200      	movs	r2, #0
 8004420:	2180      	movs	r1, #128	; 0x80
 8004422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004426:	f002 ffb3 	bl	8007390 <HAL_GPIO_WritePin>
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004432:	bf00      	nop
 8004434:	40001000 	.word	0x40001000
 8004438:	2000b524 	.word	0x2000b524
 800443c:	2000b788 	.word	0x2000b788
 8004440:	2000065c 	.word	0x2000065c
 8004444:	20000514 	.word	0x20000514
 8004448:	2000184c 	.word	0x2000184c
 800444c:	2000b5ac 	.word	0x2000b5ac
 8004450:	20001838 	.word	0x20001838
 8004454:	2000b608 	.word	0x2000b608
 8004458:	2000b544 	.word	0x2000b544
 800445c:	2000b638 	.word	0x2000b638
 8004460:	2000b4c0 	.word	0x2000b4c0
 8004464:	20001840 	.word	0x20001840
 8004468:	2000182c 	.word	0x2000182c
 800446c:	20000574 	.word	0x20000574
 8004470:	2000b514 	.word	0x2000b514
 8004474:	20000690 	.word	0x20000690
 8004478:	43af0000 	.word	0x43af0000

0800447c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004480:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004482:	e7fe      	b.n	8004482 <Error_Handler+0x6>

08004484 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8004488:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <MX_RNG_Init+0x24>)
 800448a:	4a08      	ldr	r2, [pc, #32]	; (80044ac <MX_RNG_Init+0x28>)
 800448c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <MX_RNG_Init+0x24>)
 8004490:	2200      	movs	r2, #0
 8004492:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004494:	4804      	ldr	r0, [pc, #16]	; (80044a8 <MX_RNG_Init+0x24>)
 8004496:	f006 f80f 	bl	800a4b8 <HAL_RNG_Init>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80044a0:	f7ff ffec 	bl	800447c <Error_Handler>
  }

}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	2000b894 	.word	0x2000b894
 80044ac:	50060800 	.word	0x50060800

080044b0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <HAL_RNG_MspInit+0x38>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d10b      	bne.n	80044da <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_RNG_MspInit+0x3c>)
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <HAL_RNG_MspInit+0x3c>)
 80044c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <HAL_RNG_MspInit+0x3c>)
 80044d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	50060800 	.word	0x50060800
 80044ec:	40021000 	.word	0x40021000

080044f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_MspInit+0x44>)
 80044f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fa:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <HAL_MspInit+0x44>)
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	6613      	str	r3, [r2, #96]	; 0x60
 8004502:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_MspInit+0x44>)
 8004504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	607b      	str	r3, [r7, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_MspInit+0x44>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	4a08      	ldr	r2, [pc, #32]	; (8004534 <HAL_MspInit+0x44>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004518:	6593      	str	r3, [r2, #88]	; 0x58
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_MspInit+0x44>)
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004526:	f005 f84d 	bl	80095c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000

08004538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800453c:	e7fe      	b.n	800453c <NMI_Handler+0x4>

0800453e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004542:	e7fe      	b.n	8004542 <HardFault_Handler+0x4>

08004544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004548:	e7fe      	b.n	8004548 <MemManage_Handler+0x4>

0800454a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800454e:	e7fe      	b.n	800454e <BusFault_Handler+0x4>

08004550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004554:	e7fe      	b.n	8004554 <UsageFault_Handler+0x4>

08004556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004556:	b480      	push	{r7}
 8004558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004568:	bf00      	nop
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004572:	b480      	push	{r7}
 8004574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004576:	bf00      	nop
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004584:	f000 fa80 	bl	8004a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004588:	bf00      	nop
 800458a:	bd80      	pop	{r7, pc}

0800458c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_a);
 8004590:	4802      	ldr	r0, [pc, #8]	; (800459c <DMA1_Channel1_IRQHandler+0x10>)
 8004592:	f002 faf0 	bl	8006b76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200002e0 	.word	0x200002e0

080045a0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_b);
 80045a4:	4802      	ldr	r0, [pc, #8]	; (80045b0 <DMA1_Channel2_IRQHandler+0x10>)
 80045a6:	f002 fae6 	bl	8006b76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	2000043c 	.word	0x2000043c

080045b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_c);
 80045b8:	4802      	ldr	r0, [pc, #8]	; (80045c4 <DMA1_Channel3_IRQHandler+0x10>)
 80045ba:	f002 fadc 	bl	8006b76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	2000049c 	.word	0x2000049c

080045c8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80045cc:	4802      	ldr	r0, [pc, #8]	; (80045d8 <DMA1_Channel4_IRQHandler+0x10>)
 80045ce:	f002 fad2 	bl	8006b76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000220 	.word	0x20000220

080045dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045e0:	4802      	ldr	r0, [pc, #8]	; (80045ec <TIM2_IRQHandler+0x10>)
 80045e2:	f006 f97f 	bl	800a8e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	2000b98c 	.word	0x2000b98c

080045f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045f4:	4802      	ldr	r0, [pc, #8]	; (8004600 <TIM3_IRQHandler+0x10>)
 80045f6:	f006 f975 	bl	800a8e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	2000b8f4 	.word	0x2000b8f4

08004604 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004608:	4802      	ldr	r0, [pc, #8]	; (8004614 <TIM6_DAC_IRQHandler+0x10>)
 800460a:	f006 f96b 	bl	800a8e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	2000b940 	.word	0x2000b940

08004618 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_hrtim1_a);
 800461c:	4805      	ldr	r0, [pc, #20]	; (8004634 <DMAMUX_OVR_IRQHandler+0x1c>)
 800461e:	f002 fc37 	bl	8006e90 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_hrtim1_b);
 8004622:	4805      	ldr	r0, [pc, #20]	; (8004638 <DMAMUX_OVR_IRQHandler+0x20>)
 8004624:	f002 fc34 	bl	8006e90 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel3
  HAL_DMAEx_MUX_IRQHandler(&hdma_hrtim1_c);
 8004628:	4804      	ldr	r0, [pc, #16]	; (800463c <DMAMUX_OVR_IRQHandler+0x24>)
 800462a:	f002 fc31 	bl	8006e90 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	200002e0 	.word	0x200002e0
 8004638:	2000043c 	.word	0x2000043c
 800463c:	2000049c 	.word	0x2000049c

08004640 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004644:	4b08      	ldr	r3, [pc, #32]	; (8004668 <SystemInit+0x28>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	4a07      	ldr	r2, [pc, #28]	; (8004668 <SystemInit+0x28>)
 800464c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <SystemInit+0x28>)
 8004656:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800465a:	609a      	str	r2, [r3, #8]
#endif
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004672:	f107 0310 	add.w	r3, r7, #16
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	605a      	str	r2, [r3, #4]
 800467c:	609a      	str	r2, [r3, #8]
 800467e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004680:	1d3b      	adds	r3, r7, #4
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <MX_TIM2_Init+0x94>)
 800468c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004690:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004692:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <MX_TIM2_Init+0x94>)
 8004694:	2200      	movs	r2, #0
 8004696:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <MX_TIM2_Init+0x94>)
 800469a:	2200      	movs	r2, #0
 800469c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800469e:	4b18      	ldr	r3, [pc, #96]	; (8004700 <MX_TIM2_Init+0x94>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <MX_TIM2_Init+0x94>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <MX_TIM2_Init+0x94>)
 80046ac:	2280      	movs	r2, #128	; 0x80
 80046ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80046b0:	4813      	ldr	r0, [pc, #76]	; (8004700 <MX_TIM2_Init+0x94>)
 80046b2:	f005 ff36 	bl	800a522 <HAL_TIM_Base_Init>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80046bc:	f7ff fede 	bl	800447c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80046c6:	f107 0310 	add.w	r3, r7, #16
 80046ca:	4619      	mov	r1, r3
 80046cc:	480c      	ldr	r0, [pc, #48]	; (8004700 <MX_TIM2_Init+0x94>)
 80046ce:	f006 fa89 	bl	800abe4 <HAL_TIM_ConfigClockSource>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80046d8:	f7ff fed0 	bl	800447c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80046dc:	2330      	movs	r3, #48	; 0x30
 80046de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80046e4:	1d3b      	adds	r3, r7, #4
 80046e6:	4619      	mov	r1, r3
 80046e8:	4805      	ldr	r0, [pc, #20]	; (8004700 <MX_TIM2_Init+0x94>)
 80046ea:	f006 fcfd 	bl	800b0e8 <HAL_TIMEx_MasterConfigSynchronization>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80046f4:	f7ff fec2 	bl	800447c <Error_Handler>
  }

}
 80046f8:	bf00      	nop
 80046fa:	3720      	adds	r7, #32
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	2000b98c 	.word	0x2000b98c

08004704 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800470a:	f107 0310 	add.w	r3, r7, #16
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	605a      	str	r2, [r3, #4]
 8004714:	609a      	str	r2, [r3, #8]
 8004716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004718:	1d3b      	adds	r3, r7, #4
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8004722:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <MX_TIM3_Init+0x94>)
 8004724:	4a1d      	ldr	r2, [pc, #116]	; (800479c <MX_TIM3_Init+0x98>)
 8004726:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004728:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <MX_TIM3_Init+0x94>)
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800472e:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <MX_TIM3_Init+0x94>)
 8004730:	2200      	movs	r2, #0
 8004732:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8004734:	4b18      	ldr	r3, [pc, #96]	; (8004798 <MX_TIM3_Init+0x94>)
 8004736:	2200      	movs	r2, #0
 8004738:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800473a:	4b17      	ldr	r3, [pc, #92]	; (8004798 <MX_TIM3_Init+0x94>)
 800473c:	2200      	movs	r2, #0
 800473e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004740:	4b15      	ldr	r3, [pc, #84]	; (8004798 <MX_TIM3_Init+0x94>)
 8004742:	2280      	movs	r2, #128	; 0x80
 8004744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004746:	4814      	ldr	r0, [pc, #80]	; (8004798 <MX_TIM3_Init+0x94>)
 8004748:	f005 feeb 	bl	800a522 <HAL_TIM_Base_Init>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004752:	f7ff fe93 	bl	800447c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800475a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800475c:	f107 0310 	add.w	r3, r7, #16
 8004760:	4619      	mov	r1, r3
 8004762:	480d      	ldr	r0, [pc, #52]	; (8004798 <MX_TIM3_Init+0x94>)
 8004764:	f006 fa3e 	bl	800abe4 <HAL_TIM_ConfigClockSource>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800476e:	f7ff fe85 	bl	800447c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800477a:	1d3b      	adds	r3, r7, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4806      	ldr	r0, [pc, #24]	; (8004798 <MX_TIM3_Init+0x94>)
 8004780:	f006 fcb2 	bl	800b0e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800478a:	f7ff fe77 	bl	800447c <Error_Handler>
  }

}
 800478e:	bf00      	nop
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	2000b8f4 	.word	0x2000b8f4
 800479c:	40000400 	.word	0x40000400

080047a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047a6:	1d3b      	adds	r3, r7, #4
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	605a      	str	r2, [r3, #4]
 80047ae:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80047b0:	4b14      	ldr	r3, [pc, #80]	; (8004804 <MX_TIM6_Init+0x64>)
 80047b2:	4a15      	ldr	r2, [pc, #84]	; (8004808 <MX_TIM6_Init+0x68>)
 80047b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80047b6:	4b13      	ldr	r3, [pc, #76]	; (8004804 <MX_TIM6_Init+0x64>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <MX_TIM6_Init+0x64>)
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 32000;
 80047c2:	4b10      	ldr	r3, [pc, #64]	; (8004804 <MX_TIM6_Init+0x64>)
 80047c4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80047c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047ca:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <MX_TIM6_Init+0x64>)
 80047cc:	2280      	movs	r2, #128	; 0x80
 80047ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80047d0:	480c      	ldr	r0, [pc, #48]	; (8004804 <MX_TIM6_Init+0x64>)
 80047d2:	f005 fea6 	bl	800a522 <HAL_TIM_Base_Init>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80047dc:	f7ff fe4e 	bl	800447c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80047e0:	2320      	movs	r3, #32
 80047e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80047e8:	1d3b      	adds	r3, r7, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4805      	ldr	r0, [pc, #20]	; (8004804 <MX_TIM6_Init+0x64>)
 80047ee:	f006 fc7b 	bl	800b0e8 <HAL_TIMEx_MasterConfigSynchronization>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80047f8:	f7ff fe40 	bl	800447c <Error_Handler>
  }

}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	2000b940 	.word	0x2000b940
 8004808:	40001000 	.word	0x40001000

0800480c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004812:	f107 0310 	add.w	r3, r7, #16
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	609a      	str	r2, [r3, #8]
 800481e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004820:	1d3b      	adds	r3, r7, #4
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	605a      	str	r2, [r3, #4]
 8004828:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 800482a:	4b1f      	ldr	r3, [pc, #124]	; (80048a8 <MX_TIM15_Init+0x9c>)
 800482c:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <MX_TIM15_Init+0xa0>)
 800482e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8004830:	4b1d      	ldr	r3, [pc, #116]	; (80048a8 <MX_TIM15_Init+0x9c>)
 8004832:	2200      	movs	r2, #0
 8004834:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004836:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <MX_TIM15_Init+0x9c>)
 8004838:	2200      	movs	r2, #0
 800483a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <MX_TIM15_Init+0x9c>)
 800483e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004842:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004844:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <MX_TIM15_Init+0x9c>)
 8004846:	2200      	movs	r2, #0
 8004848:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <MX_TIM15_Init+0x9c>)
 800484c:	2200      	movs	r2, #0
 800484e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004850:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <MX_TIM15_Init+0x9c>)
 8004852:	2200      	movs	r2, #0
 8004854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004856:	4814      	ldr	r0, [pc, #80]	; (80048a8 <MX_TIM15_Init+0x9c>)
 8004858:	f005 fe63 	bl	800a522 <HAL_TIM_Base_Init>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8004862:	f7ff fe0b 	bl	800447c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800486a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800486c:	f107 0310 	add.w	r3, r7, #16
 8004870:	4619      	mov	r1, r3
 8004872:	480d      	ldr	r0, [pc, #52]	; (80048a8 <MX_TIM15_Init+0x9c>)
 8004874:	f006 f9b6 	bl	800abe4 <HAL_TIM_ConfigClockSource>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800487e:	f7ff fdfd 	bl	800447c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800488a:	1d3b      	adds	r3, r7, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4806      	ldr	r0, [pc, #24]	; (80048a8 <MX_TIM15_Init+0x9c>)
 8004890:	f006 fc2a 	bl	800b0e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800489a:	f7ff fdef 	bl	800447c <Error_Handler>
  }

}
 800489e:	bf00      	nop
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	2000b8a8 	.word	0x2000b8a8
 80048ac:	40014000 	.word	0x40014000

080048b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c0:	d114      	bne.n	80048ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048c2:	4b2f      	ldr	r3, [pc, #188]	; (8004980 <HAL_TIM_Base_MspInit+0xd0>)
 80048c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c6:	4a2e      	ldr	r2, [pc, #184]	; (8004980 <HAL_TIM_Base_MspInit+0xd0>)
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	6593      	str	r3, [r2, #88]	; 0x58
 80048ce:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <HAL_TIM_Base_MspInit+0xd0>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80048da:	2200      	movs	r2, #0
 80048dc:	2100      	movs	r1, #0
 80048de:	201c      	movs	r0, #28
 80048e0:	f001 fff1 	bl	80068c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048e4:	201c      	movs	r0, #28
 80048e6:	f002 f808 	bl	80068fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80048ea:	e044      	b.n	8004976 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a24      	ldr	r2, [pc, #144]	; (8004984 <HAL_TIM_Base_MspInit+0xd4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d114      	bne.n	8004920 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <HAL_TIM_Base_MspInit+0xd0>)
 80048f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fa:	4a21      	ldr	r2, [pc, #132]	; (8004980 <HAL_TIM_Base_MspInit+0xd0>)
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	6593      	str	r3, [r2, #88]	; 0x58
 8004902:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_TIM_Base_MspInit+0xd0>)
 8004904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800490e:	2200      	movs	r2, #0
 8004910:	2100      	movs	r1, #0
 8004912:	201d      	movs	r0, #29
 8004914:	f001 ffd7 	bl	80068c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004918:	201d      	movs	r0, #29
 800491a:	f001 ffee 	bl	80068fa <HAL_NVIC_EnableIRQ>
}
 800491e:	e02a      	b.n	8004976 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a18      	ldr	r2, [pc, #96]	; (8004988 <HAL_TIM_Base_MspInit+0xd8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d114      	bne.n	8004954 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800492a:	4b15      	ldr	r3, [pc, #84]	; (8004980 <HAL_TIM_Base_MspInit+0xd0>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	4a14      	ldr	r2, [pc, #80]	; (8004980 <HAL_TIM_Base_MspInit+0xd0>)
 8004930:	f043 0310 	orr.w	r3, r3, #16
 8004934:	6593      	str	r3, [r2, #88]	; 0x58
 8004936:	4b12      	ldr	r3, [pc, #72]	; (8004980 <HAL_TIM_Base_MspInit+0xd0>)
 8004938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004942:	2200      	movs	r2, #0
 8004944:	2100      	movs	r1, #0
 8004946:	2036      	movs	r0, #54	; 0x36
 8004948:	f001 ffbd 	bl	80068c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800494c:	2036      	movs	r0, #54	; 0x36
 800494e:	f001 ffd4 	bl	80068fa <HAL_NVIC_EnableIRQ>
}
 8004952:	e010      	b.n	8004976 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM15)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0c      	ldr	r2, [pc, #48]	; (800498c <HAL_TIM_Base_MspInit+0xdc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d10b      	bne.n	8004976 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800495e:	4b08      	ldr	r3, [pc, #32]	; (8004980 <HAL_TIM_Base_MspInit+0xd0>)
 8004960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004962:	4a07      	ldr	r2, [pc, #28]	; (8004980 <HAL_TIM_Base_MspInit+0xd0>)
 8004964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004968:	6613      	str	r3, [r2, #96]	; 0x60
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_TIM_Base_MspInit+0xd0>)
 800496c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
}
 8004976:	bf00      	nop
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000
 8004984:	40000400 	.word	0x40000400
 8004988:	40001000 	.word	0x40001000
 800498c:	40014000 	.word	0x40014000

08004990 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004990:	480d      	ldr	r0, [pc, #52]	; (80049c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004992:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004994:	480d      	ldr	r0, [pc, #52]	; (80049cc <LoopForever+0x6>)
  ldr r1, =_edata
 8004996:	490e      	ldr	r1, [pc, #56]	; (80049d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004998:	4a0e      	ldr	r2, [pc, #56]	; (80049d4 <LoopForever+0xe>)
  movs r3, #0
 800499a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800499c:	e002      	b.n	80049a4 <LoopCopyDataInit>

0800499e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800499e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049a2:	3304      	adds	r3, #4

080049a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049a8:	d3f9      	bcc.n	800499e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049aa:	4a0b      	ldr	r2, [pc, #44]	; (80049d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80049ac:	4c0b      	ldr	r4, [pc, #44]	; (80049dc <LoopForever+0x16>)
  movs r3, #0
 80049ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049b0:	e001      	b.n	80049b6 <LoopFillZerobss>

080049b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049b4:	3204      	adds	r2, #4

080049b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049b8:	d3fb      	bcc.n	80049b2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80049ba:	f7ff fe41 	bl	8004640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049be:	f006 fc6f 	bl	800b2a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049c2:	f7ff f931 	bl	8003c28 <main>

080049c6 <LoopForever>:

LoopForever:
    b LoopForever
 80049c6:	e7fe      	b.n	80049c6 <LoopForever>
  ldr   r0, =_estack
 80049c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049d0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80049d4:	0800bb48 	.word	0x0800bb48
  ldr r2, =_sbss
 80049d8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80049dc:	2000b9dc 	.word	0x2000b9dc

080049e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80049e0:	e7fe      	b.n	80049e0 <ADC1_2_IRQHandler>

080049e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049ec:	2003      	movs	r0, #3
 80049ee:	f001 ff5f 	bl	80068b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049f2:	2000      	movs	r0, #0
 80049f4:	f000 f80e 	bl	8004a14 <HAL_InitTick>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	71fb      	strb	r3, [r7, #7]
 8004a02:	e001      	b.n	8004a08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a04:	f7ff fd74 	bl	80044f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a08:	79fb      	ldrb	r3, [r7, #7]

}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004a20:	4b16      	ldr	r3, [pc, #88]	; (8004a7c <HAL_InitTick+0x68>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d022      	beq.n	8004a6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a28:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <HAL_InitTick+0x6c>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <HAL_InitTick+0x68>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 ff6a 	bl	8006916 <HAL_SYSTICK_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10f      	bne.n	8004a68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b0f      	cmp	r3, #15
 8004a4c:	d809      	bhi.n	8004a62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a4e:	2200      	movs	r2, #0
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	f04f 30ff 	mov.w	r0, #4294967295
 8004a56:	f001 ff36 	bl	80068c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <HAL_InitTick+0x70>)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	e007      	b.n	8004a72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
 8004a66:	e004      	b.n	8004a72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
 8004a6c:	e001      	b.n	8004a72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	2000000c 	.word	0x2000000c
 8004a80:	20000004 	.word	0x20000004
 8004a84:	20000008 	.word	0x20000008

08004a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <HAL_IncTick+0x1c>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_IncTick+0x20>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4413      	add	r3, r2
 8004a96:	4a03      	ldr	r2, [pc, #12]	; (8004aa4 <HAL_IncTick+0x1c>)
 8004a98:	6013      	str	r3, [r2, #0]
}
 8004a9a:	bf00      	nop
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	2000b9d8 	.word	0x2000b9d8
 8004aa8:	2000000c 	.word	0x2000000c

08004aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  return uwTick;
 8004ab0:	4b03      	ldr	r3, [pc, #12]	; (8004ac0 <HAL_GetTick+0x14>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	2000b9d8 	.word	0x2000b9d8

08004ac4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	609a      	str	r2, [r3, #8]
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	609a      	str	r2, [r3, #8]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3360      	adds	r3, #96	; 0x60
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <LL_ADC_SetOffset+0x44>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004b64:	bf00      	nop
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	03fff000 	.word	0x03fff000

08004b74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3360      	adds	r3, #96	; 0x60
 8004b82:	461a      	mov	r2, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3360      	adds	r3, #96	; 0x60
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b087      	sub	sp, #28
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3360      	adds	r3, #96	; 0x60
 8004be6:	461a      	mov	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004c00:	bf00      	nop
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3360      	adds	r3, #96	; 0x60
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	615a      	str	r2, [r3, #20]
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b087      	sub	sp, #28
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3330      	adds	r3, #48	; 0x30
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	f003 030c 	and.w	r3, r3, #12
 8004caa:	4413      	add	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f003 031f 	and.w	r3, r3, #31
 8004cb8:	211f      	movs	r1, #31
 8004cba:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	401a      	ands	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	0e9b      	lsrs	r3, r3, #26
 8004cc6:	f003 011f 	and.w	r1, r3, #31
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b087      	sub	sp, #28
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3314      	adds	r3, #20
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	0e5b      	lsrs	r3, r3, #25
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	4413      	add	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	0d1b      	lsrs	r3, r3, #20
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	2107      	movs	r1, #7
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	0d1b      	lsrs	r3, r3, #20
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d30:	bf00      	nop
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d54:	43db      	mvns	r3, r3
 8004d56:	401a      	ands	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f003 0318 	and.w	r3, r3, #24
 8004d5e:	4908      	ldr	r1, [pc, #32]	; (8004d80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004d60:	40d9      	lsrs	r1, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	400b      	ands	r3, r1
 8004d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	0007ffff 	.word	0x0007ffff

08004d84 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
  *          -  On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	330c      	adds	r3, #12
 8004d94:	4618      	mov	r0, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	0d1b      	lsrs	r3, r3, #20
 8004d9a:	f003 0103 	and.w	r1, r3, #3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f003 0201 	and.w	r2, r3, #1
 8004da4:	4613      	mov	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4403      	add	r3, r0
 8004db2:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8004dbe:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	401a      	ands	r2, r3
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	400b      	ands	r3, r1
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b087      	sub	sp, #28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
 8004dea:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3320      	adds	r3, #32
 8004df0:	461a      	mov	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	0d1b      	lsrs	r3, r3, #20
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	f003 030c 	and.w	r3, r3, #12
 8004dfc:	4413      	add	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	0419      	lsls	r1, r3, #16
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	431a      	orrs	r2, r3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 031f 	and.w	r3, r3, #31
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004e4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6093      	str	r3, [r2, #8]
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e76:	d101      	bne.n	8004e7c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004e9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e9e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ec6:	d101      	bne.n	8004ecc <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004eea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004eee:	f043 0201 	orr.w	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <LL_ADC_IsEnabled+0x18>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <LL_ADC_IsEnabled+0x1a>
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f3c:	f043 0204 	orr.w	r2, r3, #4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d101      	bne.n	8004f68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d101      	bne.n	8004f8e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2280      	movs	r2, #128	; 0x80
 8004fa8:	601a      	str	r2, [r3, #0]
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fc4:	601a      	str	r2, [r3, #0]
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe0:	601a      	str	r2, [r3, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	605a      	str	r2, [r3, #4]
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	605a      	str	r2, [r3, #4]
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	605a      	str	r2, [r3, #4]
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	605a      	str	r2, [r3, #4]
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	605a      	str	r2, [r3, #4]
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	605a      	str	r2, [r3, #4]
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
	...

080050b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b089      	sub	sp, #36	; 0x24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80050bc:	2300      	movs	r3, #0
 80050be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e1ad      	b.n	8005426 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fd fff3 	bl	80030c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff feb6 	bl	8004e62 <LL_ADC_IsDeepPowerDownEnabled>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fe9c 	bl	8004e3e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fed1 	bl	8004eb2 <LL_ADC_IsInternalRegulatorEnabled>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d113      	bne.n	800513e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff feb5 	bl	8004e8a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005120:	4b9e      	ldr	r3, [pc, #632]	; (800539c <HAL_ADC_Init+0x2ec>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	099b      	lsrs	r3, r3, #6
 8005126:	4a9e      	ldr	r2, [pc, #632]	; (80053a0 <HAL_ADC_Init+0x2f0>)
 8005128:	fba2 2303 	umull	r2, r3, r2, r3
 800512c:	099b      	lsrs	r3, r3, #6
 800512e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005130:	e002      	b.n	8005138 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	3b01      	subs	r3, #1
 8005136:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f9      	bne.n	8005132 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff feb5 	bl	8004eb2 <LL_ADC_IsInternalRegulatorEnabled>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10d      	bne.n	800516a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	f043 0210 	orr.w	r2, r3, #16
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515e:	f043 0201 	orr.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff feee 	bl	8004f50 <LL_ADC_REG_IsConversionOngoing>
 8005174:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 8148 	bne.w	8005414 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f040 8144 	bne.w	8005414 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005190:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005194:	f043 0202 	orr.w	r2, r3, #2
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff feae 	bl	8004f02 <LL_ADC_IsEnabled>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d141      	bne.n	8005230 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b4:	d004      	beq.n	80051c0 <HAL_ADC_Init+0x110>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a7a      	ldr	r2, [pc, #488]	; (80053a4 <HAL_ADC_Init+0x2f4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d10f      	bne.n	80051e0 <HAL_ADC_Init+0x130>
 80051c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80051c4:	f7ff fe9d 	bl	8004f02 <LL_ADC_IsEnabled>
 80051c8:	4604      	mov	r4, r0
 80051ca:	4876      	ldr	r0, [pc, #472]	; (80053a4 <HAL_ADC_Init+0x2f4>)
 80051cc:	f7ff fe99 	bl	8004f02 <LL_ADC_IsEnabled>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4323      	orrs	r3, r4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	e012      	b.n	8005206 <HAL_ADC_Init+0x156>
 80051e0:	4871      	ldr	r0, [pc, #452]	; (80053a8 <HAL_ADC_Init+0x2f8>)
 80051e2:	f7ff fe8e 	bl	8004f02 <LL_ADC_IsEnabled>
 80051e6:	4604      	mov	r4, r0
 80051e8:	4870      	ldr	r0, [pc, #448]	; (80053ac <HAL_ADC_Init+0x2fc>)
 80051ea:	f7ff fe8a 	bl	8004f02 <LL_ADC_IsEnabled>
 80051ee:	4603      	mov	r3, r0
 80051f0:	431c      	orrs	r4, r3
 80051f2:	486f      	ldr	r0, [pc, #444]	; (80053b0 <HAL_ADC_Init+0x300>)
 80051f4:	f7ff fe85 	bl	8004f02 <LL_ADC_IsEnabled>
 80051f8:	4603      	mov	r3, r0
 80051fa:	4323      	orrs	r3, r4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d012      	beq.n	8005230 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005212:	d004      	beq.n	800521e <HAL_ADC_Init+0x16e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a62      	ldr	r2, [pc, #392]	; (80053a4 <HAL_ADC_Init+0x2f4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d101      	bne.n	8005222 <HAL_ADC_Init+0x172>
 800521e:	4a65      	ldr	r2, [pc, #404]	; (80053b4 <HAL_ADC_Init+0x304>)
 8005220:	e000      	b.n	8005224 <HAL_ADC_Init+0x174>
 8005222:	4a65      	ldr	r2, [pc, #404]	; (80053b8 <HAL_ADC_Init+0x308>)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f7ff fc4a 	bl	8004ac4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	7f5b      	ldrb	r3, [r3, #29]
 8005234:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800523a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005240:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005246:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800524e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005250:	4313      	orrs	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800525a:	2b01      	cmp	r3, #1
 800525c:	d106      	bne.n	800526c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	3b01      	subs	r3, #1
 8005264:	045b      	lsls	r3, r3, #17
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4313      	orrs	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	2b00      	cmp	r3, #0
 8005272:	d009      	beq.n	8005288 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4313      	orrs	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	4b4b      	ldr	r3, [pc, #300]	; (80053bc <HAL_ADC_Init+0x30c>)
 8005290:	4013      	ands	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	69b9      	ldr	r1, [r7, #24]
 8005298:	430b      	orrs	r3, r1
 800529a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff fe4a 	bl	8004f50 <LL_ADC_REG_IsConversionOngoing>
 80052bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff fe57 	bl	8004f76 <LL_ADC_INJ_IsConversionOngoing>
 80052c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d17f      	bne.n	80053d0 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d17c      	bne.n	80053d0 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80052da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052e2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052f2:	f023 0302 	bic.w	r3, r3, #2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	69b9      	ldr	r1, [r7, #24]
 80052fc:	430b      	orrs	r3, r1
 80052fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d017      	beq.n	8005338 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005316:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005320:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005324:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6911      	ldr	r1, [r2, #16]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	430b      	orrs	r3, r1
 8005332:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005336:	e013      	b.n	8005360 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005346:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005358:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800535c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005366:	2b01      	cmp	r3, #1
 8005368:	d12a      	bne.n	80053c0 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005374:	f023 0304 	bic.w	r3, r3, #4
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005380:	4311      	orrs	r1, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005386:	4311      	orrs	r1, r2
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800538c:	430a      	orrs	r2, r1
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	611a      	str	r2, [r3, #16]
 800539a:	e019      	b.n	80053d0 <HAL_ADC_Init+0x320>
 800539c:	20000004 	.word	0x20000004
 80053a0:	053e2d63 	.word	0x053e2d63
 80053a4:	50000100 	.word	0x50000100
 80053a8:	50000400 	.word	0x50000400
 80053ac:	50000500 	.word	0x50000500
 80053b0:	50000600 	.word	0x50000600
 80053b4:	50000300 	.word	0x50000300
 80053b8:	50000700 	.word	0x50000700
 80053bc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d10c      	bne.n	80053f2 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	f023 010f 	bic.w	r1, r3, #15
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	1e5a      	subs	r2, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
 80053f0:	e007      	b.n	8005402 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 020f 	bic.w	r2, r2, #15
 8005400:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	f043 0201 	orr.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	65da      	str	r2, [r3, #92]	; 0x5c
 8005412:	e007      	b.n	8005424 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005418:	f043 0210 	orr.w	r2, r3, #16
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005424:	7ffb      	ldrb	r3, [r7, #31]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3724      	adds	r7, #36	; 0x24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd90      	pop	{r4, r7, pc}
 800542e:	bf00      	nop

08005430 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005444:	d004      	beq.n	8005450 <HAL_ADC_Start_DMA+0x20>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a58      	ldr	r2, [pc, #352]	; (80055ac <HAL_ADC_Start_DMA+0x17c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_ADC_Start_DMA+0x24>
 8005450:	4b57      	ldr	r3, [pc, #348]	; (80055b0 <HAL_ADC_Start_DMA+0x180>)
 8005452:	e000      	b.n	8005456 <HAL_ADC_Start_DMA+0x26>
 8005454:	4b57      	ldr	r3, [pc, #348]	; (80055b4 <HAL_ADC_Start_DMA+0x184>)
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff fce3 	bl	8004e22 <LL_ADC_GetMultimode>
 800545c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fd74 	bl	8004f50 <LL_ADC_REG_IsConversionOngoing>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	f040 8096 	bne.w	800559c <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_ADC_Start_DMA+0x4e>
 800547a:	2302      	movs	r3, #2
 800547c:	e091      	b.n	80055a2 <HAL_ADC_Start_DMA+0x172>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b05      	cmp	r3, #5
 8005490:	d002      	beq.n	8005498 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b09      	cmp	r3, #9
 8005496:	d17a      	bne.n	800558e <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 feef 	bl	800627c <ADC_Enable>
 800549e:	4603      	mov	r3, r0
 80054a0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d16d      	bne.n	8005584 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054b0:	f023 0301 	bic.w	r3, r3, #1
 80054b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a3a      	ldr	r2, [pc, #232]	; (80055ac <HAL_ADC_Start_DMA+0x17c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_ADC_Start_DMA+0xaa>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a3b      	ldr	r2, [pc, #236]	; (80055b8 <HAL_ADC_Start_DMA+0x188>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d002      	beq.n	80054d6 <HAL_ADC_Start_DMA+0xa6>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	e003      	b.n	80054de <HAL_ADC_Start_DMA+0xae>
 80054d6:	4b39      	ldr	r3, [pc, #228]	; (80055bc <HAL_ADC_Start_DMA+0x18c>)
 80054d8:	e001      	b.n	80054de <HAL_ADC_Start_DMA+0xae>
 80054da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d002      	beq.n	80054ec <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d105      	bne.n	80054f8 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d006      	beq.n	8005512 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005508:	f023 0206 	bic.w	r2, r3, #6
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	661a      	str	r2, [r3, #96]	; 0x60
 8005510:	e002      	b.n	8005518 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551c:	4a28      	ldr	r2, [pc, #160]	; (80055c0 <HAL_ADC_Start_DMA+0x190>)
 800551e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	4a27      	ldr	r2, [pc, #156]	; (80055c4 <HAL_ADC_Start_DMA+0x194>)
 8005526:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552c:	4a26      	ldr	r2, [pc, #152]	; (80055c8 <HAL_ADC_Start_DMA+0x198>)
 800552e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	221c      	movs	r2, #28
 8005536:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0210 	orr.w	r2, r2, #16
 800554e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3340      	adds	r3, #64	; 0x40
 800556a:	4619      	mov	r1, r3
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f001 fa86 	bl	8006a80 <HAL_DMA_Start_IT>
 8005574:	4603      	mov	r3, r0
 8005576:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fcd3 	bl	8004f28 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005582:	e00d      	b.n	80055a0 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800558c:	e008      	b.n	80055a0 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800559a:	e001      	b.n	80055a0 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800559c:	2302      	movs	r3, #2
 800559e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	50000100 	.word	0x50000100
 80055b0:	50000300 	.word	0x50000300
 80055b4:	50000700 	.word	0x50000700
 80055b8:	50000500 	.word	0x50000500
 80055bc:	50000400 	.word	0x50000400
 80055c0:	08006331 	.word	0x08006331
 80055c4:	08006409 	.word	0x08006409
 80055c8:	08006425 	.word	0x08006425

080055cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b0b6      	sub	sp, #216	; 0xd8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005622:	2b01      	cmp	r3, #1
 8005624:	d102      	bne.n	800562c <HAL_ADC_ConfigChannel+0x24>
 8005626:	2302      	movs	r3, #2
 8005628:	f000 bc12 	b.w	8005e50 <HAL_ADC_ConfigChannel+0x848>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fc89 	bl	8004f50 <LL_ADC_REG_IsConversionOngoing>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	f040 83f2 	bne.w	8005e2a <HAL_ADC_ConfigChannel+0x822>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6859      	ldr	r1, [r3, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	f7ff fb1b 	bl	8004c8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fc77 	bl	8004f50 <LL_ADC_REG_IsConversionOngoing>
 8005662:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff fc83 	bl	8004f76 <LL_ADC_INJ_IsConversionOngoing>
 8005670:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005674:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005678:	2b00      	cmp	r3, #0
 800567a:	f040 81d9 	bne.w	8005a30 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800567e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005682:	2b00      	cmp	r3, #0
 8005684:	f040 81d4 	bne.w	8005a30 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005690:	d10f      	bne.n	80056b2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2200      	movs	r2, #0
 800569c:	4619      	mov	r1, r3
 800569e:	f7ff fb22 	bl	8004ce6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fac9 	bl	8004c42 <LL_ADC_SetSamplingTimeCommonConfig>
 80056b0:	e00e      	b.n	80056d0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6819      	ldr	r1, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	461a      	mov	r2, r3
 80056c0:	f7ff fb11 	bl	8004ce6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fab9 	bl	8004c42 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	08db      	lsrs	r3, r3, #3
 80056dc:	f003 0303 	and.w	r3, r3, #3
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d022      	beq.n	8005738 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6919      	ldr	r1, [r3, #16]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005702:	f7ff fa13 	bl	8004b2c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6919      	ldr	r1, [r3, #16]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	461a      	mov	r2, r3
 8005714:	f7ff fa5f 	bl	8004bd6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	6919      	ldr	r1, [r3, #16]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	7f1b      	ldrb	r3, [r3, #28]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d102      	bne.n	800572e <HAL_ADC_ConfigChannel+0x126>
 8005728:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800572c:	e000      	b.n	8005730 <HAL_ADC_ConfigChannel+0x128>
 800572e:	2300      	movs	r3, #0
 8005730:	461a      	mov	r2, r3
 8005732:	f7ff fa6b 	bl	8004c0c <LL_ADC_SetOffsetSaturation>
 8005736:	e17b      	b.n	8005a30 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2100      	movs	r1, #0
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff fa18 	bl	8004b74 <LL_ADC_GetOffsetChannel>
 8005744:	4603      	mov	r3, r0
 8005746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <HAL_ADC_ConfigChannel+0x15c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2100      	movs	r1, #0
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff fa0d 	bl	8004b74 <LL_ADC_GetOffsetChannel>
 800575a:	4603      	mov	r3, r0
 800575c:	0e9b      	lsrs	r3, r3, #26
 800575e:	f003 021f 	and.w	r2, r3, #31
 8005762:	e01e      	b.n	80057a2 <HAL_ADC_ConfigChannel+0x19a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2100      	movs	r1, #0
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fa02 	bl	8004b74 <LL_ADC_GetOffsetChannel>
 8005770:	4603      	mov	r3, r0
 8005772:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005776:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800577a:	fa93 f3a3 	rbit	r3, r3
 800577e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800578a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005792:	2320      	movs	r3, #32
 8005794:	e004      	b.n	80057a0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005796:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800579a:	fab3 f383 	clz	r3, r3
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <HAL_ADC_ConfigChannel+0x1b2>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	0e9b      	lsrs	r3, r3, #26
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	e018      	b.n	80057ec <HAL_ADC_ConfigChannel+0x1e4>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057c6:	fa93 f3a3 	rbit	r3, r3
 80057ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80057ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80057d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80057de:	2320      	movs	r3, #32
 80057e0:	e004      	b.n	80057ec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80057e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057e6:	fab3 f383 	clz	r3, r3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d106      	bne.n	80057fe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2200      	movs	r2, #0
 80057f6:	2100      	movs	r1, #0
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff f9d1 	bl	8004ba0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2101      	movs	r1, #1
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff f9b5 	bl	8004b74 <LL_ADC_GetOffsetChannel>
 800580a:	4603      	mov	r3, r0
 800580c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <HAL_ADC_ConfigChannel+0x222>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2101      	movs	r1, #1
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff f9aa 	bl	8004b74 <LL_ADC_GetOffsetChannel>
 8005820:	4603      	mov	r3, r0
 8005822:	0e9b      	lsrs	r3, r3, #26
 8005824:	f003 021f 	and.w	r2, r3, #31
 8005828:	e01e      	b.n	8005868 <HAL_ADC_ConfigChannel+0x260>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2101      	movs	r1, #1
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff f99f 	bl	8004b74 <LL_ADC_GetOffsetChannel>
 8005836:	4603      	mov	r3, r0
 8005838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005840:	fa93 f3a3 	rbit	r3, r3
 8005844:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005848:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800584c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005858:	2320      	movs	r3, #32
 800585a:	e004      	b.n	8005866 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800585c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005860:	fab3 f383 	clz	r3, r3
 8005864:	b2db      	uxtb	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005870:	2b00      	cmp	r3, #0
 8005872:	d105      	bne.n	8005880 <HAL_ADC_ConfigChannel+0x278>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	0e9b      	lsrs	r3, r3, #26
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	e018      	b.n	80058b2 <HAL_ADC_ConfigChannel+0x2aa>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800588c:	fa93 f3a3 	rbit	r3, r3
 8005890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005894:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800589c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80058a4:	2320      	movs	r3, #32
 80058a6:	e004      	b.n	80058b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80058a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058ac:	fab3 f383 	clz	r3, r3
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d106      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	2101      	movs	r1, #1
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff f96e 	bl	8004ba0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2102      	movs	r1, #2
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff f952 	bl	8004b74 <LL_ADC_GetOffsetChannel>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <HAL_ADC_ConfigChannel+0x2e8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2102      	movs	r1, #2
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff f947 	bl	8004b74 <LL_ADC_GetOffsetChannel>
 80058e6:	4603      	mov	r3, r0
 80058e8:	0e9b      	lsrs	r3, r3, #26
 80058ea:	f003 021f 	and.w	r2, r3, #31
 80058ee:	e01e      	b.n	800592e <HAL_ADC_ConfigChannel+0x326>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2102      	movs	r1, #2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff f93c 	bl	8004b74 <LL_ADC_GetOffsetChannel>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005906:	fa93 f3a3 	rbit	r3, r3
 800590a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800590e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005916:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800591e:	2320      	movs	r3, #32
 8005920:	e004      	b.n	800592c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005922:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005926:	fab3 f383 	clz	r3, r3
 800592a:	b2db      	uxtb	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005936:	2b00      	cmp	r3, #0
 8005938:	d105      	bne.n	8005946 <HAL_ADC_ConfigChannel+0x33e>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	0e9b      	lsrs	r3, r3, #26
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	e016      	b.n	8005974 <HAL_ADC_ConfigChannel+0x36c>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005952:	fa93 f3a3 	rbit	r3, r3
 8005956:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005958:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800595a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800595e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005966:	2320      	movs	r3, #32
 8005968:	e004      	b.n	8005974 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800596a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800596e:	fab3 f383 	clz	r3, r3
 8005972:	b2db      	uxtb	r3, r3
 8005974:	429a      	cmp	r2, r3
 8005976:	d106      	bne.n	8005986 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2200      	movs	r2, #0
 800597e:	2102      	movs	r1, #2
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff f90d 	bl	8004ba0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2103      	movs	r1, #3
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff f8f1 	bl	8004b74 <LL_ADC_GetOffsetChannel>
 8005992:	4603      	mov	r3, r0
 8005994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <HAL_ADC_ConfigChannel+0x3aa>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2103      	movs	r1, #3
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff f8e6 	bl	8004b74 <LL_ADC_GetOffsetChannel>
 80059a8:	4603      	mov	r3, r0
 80059aa:	0e9b      	lsrs	r3, r3, #26
 80059ac:	f003 021f 	and.w	r2, r3, #31
 80059b0:	e017      	b.n	80059e2 <HAL_ADC_ConfigChannel+0x3da>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2103      	movs	r1, #3
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff f8db 	bl	8004b74 <LL_ADC_GetOffsetChannel>
 80059be:	4603      	mov	r3, r0
 80059c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c4:	fa93 f3a3 	rbit	r3, r3
 80059c8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80059ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059cc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80059ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80059d4:	2320      	movs	r3, #32
 80059d6:	e003      	b.n	80059e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80059d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059da:	fab3 f383 	clz	r3, r3
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d105      	bne.n	80059fa <HAL_ADC_ConfigChannel+0x3f2>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	0e9b      	lsrs	r3, r3, #26
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	e011      	b.n	8005a1e <HAL_ADC_ConfigChannel+0x416>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a02:	fa93 f3a3 	rbit	r3, r3
 8005a06:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005a12:	2320      	movs	r3, #32
 8005a14:	e003      	b.n	8005a1e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a18:	fab3 f383 	clz	r3, r3
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d106      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	2103      	movs	r1, #3
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff f8b8 	bl	8004ba0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff fa64 	bl	8004f02 <LL_ADC_IsEnabled>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f040 813d 	bne.w	8005cbc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6818      	ldr	r0, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6819      	ldr	r1, [r3, #0]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f7ff f974 	bl	8004d3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4aa2      	ldr	r2, [pc, #648]	; (8005ce4 <HAL_ADC_ConfigChannel+0x6dc>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	f040 812e 	bne.w	8005cbc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10b      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x480>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	0e9b      	lsrs	r3, r3, #26
 8005a76:	3301      	adds	r3, #1
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2b09      	cmp	r3, #9
 8005a7e:	bf94      	ite	ls
 8005a80:	2301      	movls	r3, #1
 8005a82:	2300      	movhi	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e019      	b.n	8005abc <HAL_ADC_ConfigChannel+0x4b4>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a90:	fa93 f3a3 	rbit	r3, r3
 8005a94:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a98:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	e003      	b.n	8005aac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aa6:	fab3 f383 	clz	r3, r3
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	3301      	adds	r3, #1
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	2b09      	cmp	r3, #9
 8005ab4:	bf94      	ite	ls
 8005ab6:	2301      	movls	r3, #1
 8005ab8:	2300      	movhi	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d079      	beq.n	8005bb4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d107      	bne.n	8005adc <HAL_ADC_ConfigChannel+0x4d4>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	0e9b      	lsrs	r3, r3, #26
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	069b      	lsls	r3, r3, #26
 8005ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ada:	e015      	b.n	8005b08 <HAL_ADC_ConfigChannel+0x500>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ae4:	fa93 f3a3 	rbit	r3, r3
 8005ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005af4:	2320      	movs	r3, #32
 8005af6:	e003      	b.n	8005b00 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005afa:	fab3 f383 	clz	r3, r3
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	3301      	adds	r3, #1
 8005b02:	069b      	lsls	r3, r3, #26
 8005b04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <HAL_ADC_ConfigChannel+0x520>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	0e9b      	lsrs	r3, r3, #26
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	f003 031f 	and.w	r3, r3, #31
 8005b20:	2101      	movs	r1, #1
 8005b22:	fa01 f303 	lsl.w	r3, r1, r3
 8005b26:	e017      	b.n	8005b58 <HAL_ADC_ConfigChannel+0x550>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b30:	fa93 f3a3 	rbit	r3, r3
 8005b34:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005b40:	2320      	movs	r3, #32
 8005b42:	e003      	b.n	8005b4c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b46:	fab3 f383 	clz	r3, r3
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	2101      	movs	r1, #1
 8005b54:	fa01 f303 	lsl.w	r3, r1, r3
 8005b58:	ea42 0103 	orr.w	r1, r2, r3
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <HAL_ADC_ConfigChannel+0x576>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	0e9b      	lsrs	r3, r3, #26
 8005b6e:	3301      	adds	r3, #1
 8005b70:	f003 021f 	and.w	r2, r3, #31
 8005b74:	4613      	mov	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	4413      	add	r3, r2
 8005b7a:	051b      	lsls	r3, r3, #20
 8005b7c:	e018      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x5a8>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	fa93 f3a3 	rbit	r3, r3
 8005b8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005b96:	2320      	movs	r3, #32
 8005b98:	e003      	b.n	8005ba2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9c:	fab3 f383 	clz	r3, r3
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	f003 021f 	and.w	r2, r3, #31
 8005ba8:	4613      	mov	r3, r2
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	4413      	add	r3, r2
 8005bae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	e07e      	b.n	8005cb2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d107      	bne.n	8005bd0 <HAL_ADC_ConfigChannel+0x5c8>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	0e9b      	lsrs	r3, r3, #26
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	069b      	lsls	r3, r3, #26
 8005bca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bce:	e015      	b.n	8005bfc <HAL_ADC_ConfigChannel+0x5f4>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd8:	fa93 f3a3 	rbit	r3, r3
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005be8:	2320      	movs	r3, #32
 8005bea:	e003      	b.n	8005bf4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	fab3 f383 	clz	r3, r3
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	069b      	lsls	r3, r3, #26
 8005bf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <HAL_ADC_ConfigChannel+0x614>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	0e9b      	lsrs	r3, r3, #26
 8005c0e:	3301      	adds	r3, #1
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	2101      	movs	r1, #1
 8005c16:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1a:	e017      	b.n	8005c4c <HAL_ADC_ConfigChannel+0x644>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	fa93 f3a3 	rbit	r3, r3
 8005c28:	61fb      	str	r3, [r7, #28]
  return result;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005c34:	2320      	movs	r3, #32
 8005c36:	e003      	b.n	8005c40 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	fab3 f383 	clz	r3, r3
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	3301      	adds	r3, #1
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	2101      	movs	r1, #1
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	ea42 0103 	orr.w	r1, r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10d      	bne.n	8005c78 <HAL_ADC_ConfigChannel+0x670>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	0e9b      	lsrs	r3, r3, #26
 8005c62:	3301      	adds	r3, #1
 8005c64:	f003 021f 	and.w	r2, r3, #31
 8005c68:	4613      	mov	r3, r2
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3b1e      	subs	r3, #30
 8005c70:	051b      	lsls	r3, r3, #20
 8005c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c76:	e01b      	b.n	8005cb0 <HAL_ADC_ConfigChannel+0x6a8>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	fa93 f3a3 	rbit	r3, r3
 8005c84:	613b      	str	r3, [r7, #16]
  return result;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005c90:	2320      	movs	r3, #32
 8005c92:	e003      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	fab3 f383 	clz	r3, r3
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	f003 021f 	and.w	r2, r3, #31
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3b1e      	subs	r3, #30
 8005caa:	051b      	lsls	r3, r3, #20
 8005cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	6892      	ldr	r2, [r2, #8]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	f7ff f815 	bl	8004ce6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <HAL_ADC_ConfigChannel+0x6e0>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 80bd 	beq.w	8005e44 <HAL_ADC_ConfigChannel+0x83c>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cd2:	d004      	beq.n	8005cde <HAL_ADC_ConfigChannel+0x6d6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a04      	ldr	r2, [pc, #16]	; (8005cec <HAL_ADC_ConfigChannel+0x6e4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d10a      	bne.n	8005cf4 <HAL_ADC_ConfigChannel+0x6ec>
 8005cde:	4b04      	ldr	r3, [pc, #16]	; (8005cf0 <HAL_ADC_ConfigChannel+0x6e8>)
 8005ce0:	e009      	b.n	8005cf6 <HAL_ADC_ConfigChannel+0x6ee>
 8005ce2:	bf00      	nop
 8005ce4:	407f0000 	.word	0x407f0000
 8005ce8:	80080000 	.word	0x80080000
 8005cec:	50000100 	.word	0x50000100
 8005cf0:	50000300 	.word	0x50000300
 8005cf4:	4b58      	ldr	r3, [pc, #352]	; (8005e58 <HAL_ADC_ConfigChannel+0x850>)
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fe ff0a 	bl	8004b10 <LL_ADC_GetCommonPathInternalCh>
 8005cfc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a55      	ldr	r2, [pc, #340]	; (8005e5c <HAL_ADC_ConfigChannel+0x854>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <HAL_ADC_ConfigChannel+0x70c>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a54      	ldr	r2, [pc, #336]	; (8005e60 <HAL_ADC_ConfigChannel+0x858>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d139      	bne.n	8005d88 <HAL_ADC_ConfigChannel+0x780>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d133      	bne.n	8005d88 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d28:	d005      	beq.n	8005d36 <HAL_ADC_ConfigChannel+0x72e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a4d      	ldr	r2, [pc, #308]	; (8005e64 <HAL_ADC_ConfigChannel+0x85c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	f040 8084 	bne.w	8005e3e <HAL_ADC_ConfigChannel+0x836>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d3e:	d004      	beq.n	8005d4a <HAL_ADC_ConfigChannel+0x742>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a48      	ldr	r2, [pc, #288]	; (8005e68 <HAL_ADC_ConfigChannel+0x860>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d101      	bne.n	8005d4e <HAL_ADC_ConfigChannel+0x746>
 8005d4a:	4a48      	ldr	r2, [pc, #288]	; (8005e6c <HAL_ADC_ConfigChannel+0x864>)
 8005d4c:	e000      	b.n	8005d50 <HAL_ADC_ConfigChannel+0x748>
 8005d4e:	4a42      	ldr	r2, [pc, #264]	; (8005e58 <HAL_ADC_ConfigChannel+0x850>)
 8005d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7fe fec5 	bl	8004aea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005d60:	4b43      	ldr	r3, [pc, #268]	; (8005e70 <HAL_ADC_ConfigChannel+0x868>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	099b      	lsrs	r3, r3, #6
 8005d66:	4a43      	ldr	r2, [pc, #268]	; (8005e74 <HAL_ADC_ConfigChannel+0x86c>)
 8005d68:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6c:	099a      	lsrs	r2, r3, #6
 8005d6e:	4613      	mov	r3, r2
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d78:	e002      	b.n	8005d80 <HAL_ADC_ConfigChannel+0x778>
          {
            wait_loop_index--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f9      	bne.n	8005d7a <HAL_ADC_ConfigChannel+0x772>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d86:	e05a      	b.n	8005e3e <HAL_ADC_ConfigChannel+0x836>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a3a      	ldr	r2, [pc, #232]	; (8005e78 <HAL_ADC_ConfigChannel+0x870>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d125      	bne.n	8005dde <HAL_ADC_ConfigChannel+0x7d6>
 8005d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d11f      	bne.n	8005dde <HAL_ADC_ConfigChannel+0x7d6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a31      	ldr	r2, [pc, #196]	; (8005e68 <HAL_ADC_ConfigChannel+0x860>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d104      	bne.n	8005db2 <HAL_ADC_ConfigChannel+0x7aa>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a33      	ldr	r2, [pc, #204]	; (8005e7c <HAL_ADC_ConfigChannel+0x874>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d047      	beq.n	8005e42 <HAL_ADC_ConfigChannel+0x83a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dba:	d004      	beq.n	8005dc6 <HAL_ADC_ConfigChannel+0x7be>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a29      	ldr	r2, [pc, #164]	; (8005e68 <HAL_ADC_ConfigChannel+0x860>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d101      	bne.n	8005dca <HAL_ADC_ConfigChannel+0x7c2>
 8005dc6:	4a29      	ldr	r2, [pc, #164]	; (8005e6c <HAL_ADC_ConfigChannel+0x864>)
 8005dc8:	e000      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x7c4>
 8005dca:	4a23      	ldr	r2, [pc, #140]	; (8005e58 <HAL_ADC_ConfigChannel+0x850>)
 8005dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f7fe fe87 	bl	8004aea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ddc:	e031      	b.n	8005e42 <HAL_ADC_ConfigChannel+0x83a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a27      	ldr	r2, [pc, #156]	; (8005e80 <HAL_ADC_ConfigChannel+0x878>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d12d      	bne.n	8005e44 <HAL_ADC_ConfigChannel+0x83c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005de8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d127      	bne.n	8005e44 <HAL_ADC_ConfigChannel+0x83c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1b      	ldr	r2, [pc, #108]	; (8005e68 <HAL_ADC_ConfigChannel+0x860>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d022      	beq.n	8005e44 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e06:	d004      	beq.n	8005e12 <HAL_ADC_ConfigChannel+0x80a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a16      	ldr	r2, [pc, #88]	; (8005e68 <HAL_ADC_ConfigChannel+0x860>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d101      	bne.n	8005e16 <HAL_ADC_ConfigChannel+0x80e>
 8005e12:	4a16      	ldr	r2, [pc, #88]	; (8005e6c <HAL_ADC_ConfigChannel+0x864>)
 8005e14:	e000      	b.n	8005e18 <HAL_ADC_ConfigChannel+0x810>
 8005e16:	4a10      	ldr	r2, [pc, #64]	; (8005e58 <HAL_ADC_ConfigChannel+0x850>)
 8005e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f7fe fe61 	bl	8004aea <LL_ADC_SetCommonPathInternalCh>
 8005e28:	e00c      	b.n	8005e44 <HAL_ADC_ConfigChannel+0x83c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2e:	f043 0220 	orr.w	r2, r3, #32
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005e3c:	e002      	b.n	8005e44 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e3e:	bf00      	nop
 8005e40:	e000      	b.n	8005e44 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e42:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005e4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	37d8      	adds	r7, #216	; 0xd8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	50000700 	.word	0x50000700
 8005e5c:	c3210000 	.word	0xc3210000
 8005e60:	90c00010 	.word	0x90c00010
 8005e64:	50000600 	.word	0x50000600
 8005e68:	50000100 	.word	0x50000100
 8005e6c:	50000300 	.word	0x50000300
 8005e70:	20000004 	.word	0x20000004
 8005e74:	053e2d63 	.word	0x053e2d63
 8005e78:	c7520000 	.word	0xc7520000
 8005e7c:	50000500 	.word	0x50000500
 8005e80:	cb840000 	.word	0xcb840000

08005e84 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08e      	sub	sp, #56	; 0x38
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e9c:	d003      	beq.n	8005ea6 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005ea2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_ADC_AnalogWDGConfig+0x30>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e1dc      	b.n	800626e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff f845 	bl	8004f50 <LL_ADC_REG_IsConversionOngoing>
 8005ec6:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff f852 	bl	8004f76 <LL_ADC_INJ_IsConversionOngoing>
 8005ed2:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 8163 	bne.w	80061a2 <HAL_ADC_AnalogWDGConfig+0x31e>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f040 815f 	bne.w	80061a2 <HAL_ADC_AnalogWDGConfig+0x31e>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4aa6      	ldr	r2, [pc, #664]	; (8006184 <HAL_ADC_AnalogWDGConfig+0x300>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	f040 8086 	bne.w	8005ffc <HAL_ADC_AnalogWDGConfig+0x178>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ef8:	d042      	beq.n	8005f80 <HAL_ADC_AnalogWDGConfig+0xfc>
 8005efa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005efe:	d806      	bhi.n	8005f0e <HAL_ADC_AnalogWDGConfig+0x8a>
 8005f00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f04:	d034      	beq.n	8005f70 <HAL_ADC_AnalogWDGConfig+0xec>
 8005f06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f0a:	d00a      	beq.n	8005f22 <HAL_ADC_AnalogWDGConfig+0x9e>
 8005f0c:	e048      	b.n	8005fa0 <HAL_ADC_AnalogWDGConfig+0x11c>
 8005f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f12:	d03d      	beq.n	8005f90 <HAL_ADC_AnalogWDGConfig+0x10c>
 8005f14:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005f18:	d01d      	beq.n	8005f56 <HAL_ADC_AnalogWDGConfig+0xd2>
 8005f1a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005f1e:	d00d      	beq.n	8005f3c <HAL_ADC_AnalogWDGConfig+0xb8>
 8005f20:	e03e      	b.n	8005fa0 <HAL_ADC_AnalogWDGConfig+0x11c>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005f2e:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8005f32:	461a      	mov	r2, r3
 8005f34:	4993      	ldr	r1, [pc, #588]	; (8006184 <HAL_ADC_AnalogWDGConfig+0x300>)
 8005f36:	f7fe ff25 	bl	8004d84 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8005f3a:	e039      	b.n	8005fb0 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005f48:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	498d      	ldr	r1, [pc, #564]	; (8006184 <HAL_ADC_AnalogWDGConfig+0x300>)
 8005f50:	f7fe ff18 	bl	8004d84 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8005f54:	e02c      	b.n	8005fb0 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005f62:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8005f66:	461a      	mov	r2, r3
 8005f68:	4986      	ldr	r1, [pc, #536]	; (8006184 <HAL_ADC_AnalogWDGConfig+0x300>)
 8005f6a:	f7fe ff0b 	bl	8004d84 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8005f6e:	e01f      	b.n	8005fb0 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a84      	ldr	r2, [pc, #528]	; (8006188 <HAL_ADC_AnalogWDGConfig+0x304>)
 8005f76:	4983      	ldr	r1, [pc, #524]	; (8006184 <HAL_ADC_AnalogWDGConfig+0x300>)
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fe ff03 	bl	8004d84 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005f7e:	e017      	b.n	8005fb0 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a81      	ldr	r2, [pc, #516]	; (800618c <HAL_ADC_AnalogWDGConfig+0x308>)
 8005f86:	497f      	ldr	r1, [pc, #508]	; (8006184 <HAL_ADC_AnalogWDGConfig+0x300>)
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fe fefb 	bl	8004d84 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005f8e:	e00f      	b.n	8005fb0 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a7e      	ldr	r2, [pc, #504]	; (8006190 <HAL_ADC_AnalogWDGConfig+0x30c>)
 8005f96:	497b      	ldr	r1, [pc, #492]	; (8006184 <HAL_ADC_AnalogWDGConfig+0x300>)
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe fef3 	bl	8004d84 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005f9e:	e007      	b.n	8005fb0 <HAL_ADC_AnalogWDGConfig+0x12c>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	4977      	ldr	r1, [pc, #476]	; (8006184 <HAL_ADC_AnalogWDGConfig+0x300>)
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fe feeb 	bl	8004d84 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005fae:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe ffe0 	bl	8004f9c <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	7b1b      	ldrb	r3, [r3, #12]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d105      	bne.n	8005ff0 <HAL_ADC_AnalogWDGConfig+0x16c>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff f800 	bl	8004fee <LL_ADC_EnableIT_AWD1>
 8005fee:	e0d8      	b.n	80061a2 <HAL_ADC_AnalogWDGConfig+0x31e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff f82a 	bl	800504e <LL_ADC_DisableIT_AWD1>
 8005ffa:	e0d2      	b.n	80061a2 <HAL_ADC_AnalogWDGConfig+0x31e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006004:	d077      	beq.n	80060f6 <HAL_ADC_AnalogWDGConfig+0x272>
 8006006:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800600a:	d806      	bhi.n	800601a <HAL_ADC_AnalogWDGConfig+0x196>
 800600c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006010:	d071      	beq.n	80060f6 <HAL_ADC_AnalogWDGConfig+0x272>
 8006012:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006016:	d009      	beq.n	800602c <HAL_ADC_AnalogWDGConfig+0x1a8>
 8006018:	e076      	b.n	8006108 <HAL_ADC_AnalogWDGConfig+0x284>
 800601a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800601e:	d06a      	beq.n	80060f6 <HAL_ADC_AnalogWDGConfig+0x272>
 8006020:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8006024:	d002      	beq.n	800602c <HAL_ADC_AnalogWDGConfig+0x1a8>
 8006026:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800602a:	d16d      	bne.n	8006108 <HAL_ADC_AnalogWDGConfig+0x284>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a58      	ldr	r2, [pc, #352]	; (8006194 <HAL_ADC_AnalogWDGConfig+0x310>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d12f      	bne.n	8006096 <HAL_ADC_AnalogWDGConfig+0x212>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800603e:	2b00      	cmp	r3, #0
 8006040:	d108      	bne.n	8006054 <HAL_ADC_AnalogWDGConfig+0x1d0>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	0e9b      	lsrs	r3, r3, #26
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	2201      	movs	r2, #1
 800604e:	fa02 f303 	lsl.w	r3, r2, r3
 8006052:	e016      	b.n	8006082 <HAL_ADC_AnalogWDGConfig+0x1fe>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	fa93 f3a3 	rbit	r3, r3
 8006060:	61bb      	str	r3, [r7, #24]
  return result;
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_ADC_AnalogWDGConfig+0x1ec>
    return 32U;
 800606c:	2320      	movs	r3, #32
 800606e:	e003      	b.n	8006078 <HAL_ADC_AnalogWDGConfig+0x1f4>
  return __builtin_clz(value);
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	fab3 f383 	clz	r3, r3
 8006076:	b2db      	uxtb	r3, r3
 8006078:	f003 031f 	and.w	r3, r3, #31
 800607c:	2201      	movs	r2, #1
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	430b      	orrs	r3, r1
 8006090:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006094:	e041      	b.n	800611a <HAL_ADC_AnalogWDGConfig+0x296>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d108      	bne.n	80060b4 <HAL_ADC_AnalogWDGConfig+0x230>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	0e9b      	lsrs	r3, r3, #26
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	2201      	movs	r2, #1
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	e016      	b.n	80060e2 <HAL_ADC_AnalogWDGConfig+0x25e>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	fa93 f3a3 	rbit	r3, r3
 80060c0:	60fb      	str	r3, [r7, #12]
  return result;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <HAL_ADC_AnalogWDGConfig+0x24c>
    return 32U;
 80060cc:	2320      	movs	r3, #32
 80060ce:	e003      	b.n	80060d8 <HAL_ADC_AnalogWDGConfig+0x254>
  return __builtin_clz(value);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	fab3 f383 	clz	r3, r3
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	2201      	movs	r2, #1
 80060de:	fa02 f303 	lsl.w	r3, r2, r3
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	430b      	orrs	r3, r1
 80060f0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80060f4:	e011      	b.n	800611a <HAL_ADC_AnalogWDGConfig+0x296>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a24      	ldr	r2, [pc, #144]	; (8006190 <HAL_ADC_AnalogWDGConfig+0x30c>)
 8006100:	4619      	mov	r1, r3
 8006102:	f7fe fe3f 	bl	8004d84 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006106:	e008      	b.n	800611a <HAL_ADC_AnalogWDGConfig+0x296>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2200      	movs	r2, #0
 8006112:	4619      	mov	r1, r3
 8006114:	f7fe fe36 	bl	8004d84 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006118:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <HAL_ADC_AnalogWDGConfig+0x310>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d11a      	bne.n	800615a <HAL_ADC_AnalogWDGConfig+0x2d6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006128:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4618      	mov	r0, r3
 8006136:	f7fe ff3e 	bl	8004fb6 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	7b1b      	ldrb	r3, [r3, #12]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d105      	bne.n	800614e <HAL_ADC_AnalogWDGConfig+0x2ca>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe ff61 	bl	800500e <LL_ADC_EnableIT_AWD2>
 800614c:	e029      	b.n	80061a2 <HAL_ADC_AnalogWDGConfig+0x31e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe ff8b 	bl	800506e <LL_ADC_DisableIT_AWD2>
 8006158:	e023      	b.n	80061a2 <HAL_ADC_AnalogWDGConfig+0x31e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe ff31 	bl	8004fd2 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	7b1b      	ldrb	r3, [r3, #12]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d10f      	bne.n	8006198 <HAL_ADC_AnalogWDGConfig+0x314>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f7fe ff56 	bl	800502e <LL_ADC_EnableIT_AWD3>
 8006182:	e00e      	b.n	80061a2 <HAL_ADC_AnalogWDGConfig+0x31e>
 8006184:	7dc00000 	.word	0x7dc00000
 8006188:	0087ffff 	.word	0x0087ffff
 800618c:	0107ffff 	.word	0x0107ffff
 8006190:	0187ffff 	.word	0x0187ffff
 8006194:	0017ffff 	.word	0x0017ffff
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f7fe ff76 	bl	800508e <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a34      	ldr	r2, [pc, #208]	; (8006278 <HAL_ADC_AnalogWDGConfig+0x3f4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d118      	bne.n	80061de <HAL_ADC_AnalogWDGConfig+0x35a>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	08db      	lsrs	r3, r3, #3
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	695a      	ldr	r2, [r3, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	08db      	lsrs	r3, r3, #3
 80061d0:	f003 0303 	and.w	r3, r3, #3
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	633b      	str	r3, [r7, #48]	; 0x30
 80061dc:	e039      	b.n	8006252 <HAL_ADC_AnalogWDGConfig+0x3ce>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0318 	and.w	r3, r3, #24
 80061e8:	2b18      	cmp	r3, #24
 80061ea:	d011      	beq.n	8006210 <HAL_ADC_AnalogWDGConfig+0x38c>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6919      	ldr	r1, [r3, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	08db      	lsrs	r3, r3, #3
 80061f8:	f003 0203 	and.w	r2, r3, #3
 80061fc:	4613      	mov	r3, r2
 80061fe:	07db      	lsls	r3, r3, #31
 8006200:	1a9b      	subs	r3, r3, r2
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	3304      	adds	r3, #4
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	fa21 f303 	lsr.w	r3, r1, r3
 800620e:	e002      	b.n	8006216 <HAL_ADC_AnalogWDGConfig+0x392>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f003 0318 	and.w	r3, r3, #24
 8006222:	2b18      	cmp	r3, #24
 8006224:	d011      	beq.n	800624a <HAL_ADC_AnalogWDGConfig+0x3c6>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	6959      	ldr	r1, [r3, #20]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	08db      	lsrs	r3, r3, #3
 8006232:	f003 0203 	and.w	r2, r3, #3
 8006236:	4613      	mov	r3, r2
 8006238:	07db      	lsls	r3, r3, #31
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	3304      	adds	r3, #4
 8006240:	f003 031f 	and.w	r3, r3, #31
 8006244:	fa21 f303 	lsr.w	r3, r1, r3
 8006248:	e002      	b.n	8006250 <HAL_ADC_AnalogWDGConfig+0x3cc>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6819      	ldr	r1, [r3, #0]
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800625e:	f7fe fdbe 	bl	8004dde <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800626a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800626e:	4618      	mov	r0, r3
 8006270:	3738      	adds	r7, #56	; 0x38
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	7dc00000 	.word	0x7dc00000

0800627c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f7fe fe3a 	bl	8004f02 <LL_ADC_IsEnabled>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d146      	bne.n	8006322 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	4b24      	ldr	r3, [pc, #144]	; (800632c <ADC_Enable+0xb0>)
 800629c:	4013      	ands	r3, r2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00d      	beq.n	80062be <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a6:	f043 0210 	orr.w	r2, r3, #16
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b2:	f043 0201 	orr.w	r2, r3, #1
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e032      	b.n	8006324 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe fe09 	bl	8004eda <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80062c8:	f7fe fbf0 	bl	8004aac <HAL_GetTick>
 80062cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80062ce:	e021      	b.n	8006314 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe fe14 	bl	8004f02 <LL_ADC_IsEnabled>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d104      	bne.n	80062ea <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fe fdf8 	bl	8004eda <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80062ea:	f7fe fbdf 	bl	8004aac <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d90d      	bls.n	8006314 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fc:	f043 0210 	orr.w	r2, r3, #16
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006308:	f043 0201 	orr.w	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e007      	b.n	8006324 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b01      	cmp	r3, #1
 8006320:	d1d6      	bne.n	80062d0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	8000003f 	.word	0x8000003f

08006330 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006342:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006346:	2b00      	cmp	r3, #0
 8006348:	d14b      	bne.n	80063e2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d021      	beq.n	80063a8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe fc7d 	bl	8004c68 <LL_ADC_REG_IsTriggerSourceSWStart>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d032      	beq.n	80063da <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d12b      	bne.n	80063da <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d11f      	bne.n	80063da <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639e:	f043 0201 	orr.w	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80063a6:	e018      	b.n	80063da <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d111      	bne.n	80063da <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d2:	f043 0201 	orr.w	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7ff f8f6 	bl	80055cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80063e0:	e00e      	b.n	8006400 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f7ff f900 	bl	80055f4 <HAL_ADC_ErrorCallback>
}
 80063f4:	e004      	b.n	8006400 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4798      	blx	r3
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff f8e2 	bl	80055e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006436:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006442:	f043 0204 	orr.w	r2, r3, #4
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f7ff f8d2 	bl	80055f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006450:	bf00      	nop
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <LL_ADC_IsEnabled>:
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <LL_ADC_IsEnabled+0x18>
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <LL_ADC_IsEnabled+0x1a>
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <LL_ADC_REG_IsConversionOngoing>:
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b04      	cmp	r3, #4
 8006490:	d101      	bne.n	8006496 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b0a1      	sub	sp, #132	; 0x84
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80064be:	2302      	movs	r3, #2
 80064c0:	e0e3      	b.n	800668a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064d2:	d102      	bne.n	80064da <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80064d4:	4b6f      	ldr	r3, [pc, #444]	; (8006694 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80064d6:	60bb      	str	r3, [r7, #8]
 80064d8:	e009      	b.n	80064ee <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a6e      	ldr	r2, [pc, #440]	; (8006698 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d102      	bne.n	80064ea <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80064e4:	4b6d      	ldr	r3, [pc, #436]	; (800669c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80064e6:	60bb      	str	r3, [r7, #8]
 80064e8:	e001      	b.n	80064ee <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80064ea:	2300      	movs	r3, #0
 80064ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10b      	bne.n	800650c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f8:	f043 0220 	orr.w	r2, r3, #32
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0be      	b.n	800668a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff ffb5 	bl	800647e <LL_ADC_REG_IsConversionOngoing>
 8006514:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff ffaf 	bl	800647e <LL_ADC_REG_IsConversionOngoing>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	f040 80a0 	bne.w	8006668 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800652a:	2b00      	cmp	r3, #0
 800652c:	f040 809c 	bne.w	8006668 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006538:	d004      	beq.n	8006544 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a55      	ldr	r2, [pc, #340]	; (8006694 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d101      	bne.n	8006548 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8006544:	4b56      	ldr	r3, [pc, #344]	; (80066a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006546:	e000      	b.n	800654a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8006548:	4b56      	ldr	r3, [pc, #344]	; (80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800654a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d04b      	beq.n	80065ec <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	6859      	ldr	r1, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006566:	035b      	lsls	r3, r3, #13
 8006568:	430b      	orrs	r3, r1
 800656a:	431a      	orrs	r2, r3
 800656c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006578:	d004      	beq.n	8006584 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a45      	ldr	r2, [pc, #276]	; (8006694 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d10f      	bne.n	80065a4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006584:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006588:	f7ff ff66 	bl	8006458 <LL_ADC_IsEnabled>
 800658c:	4604      	mov	r4, r0
 800658e:	4841      	ldr	r0, [pc, #260]	; (8006694 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006590:	f7ff ff62 	bl	8006458 <LL_ADC_IsEnabled>
 8006594:	4603      	mov	r3, r0
 8006596:	4323      	orrs	r3, r4
 8006598:	2b00      	cmp	r3, #0
 800659a:	bf0c      	ite	eq
 800659c:	2301      	moveq	r3, #1
 800659e:	2300      	movne	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	e012      	b.n	80065ca <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80065a4:	483c      	ldr	r0, [pc, #240]	; (8006698 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80065a6:	f7ff ff57 	bl	8006458 <LL_ADC_IsEnabled>
 80065aa:	4604      	mov	r4, r0
 80065ac:	483b      	ldr	r0, [pc, #236]	; (800669c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80065ae:	f7ff ff53 	bl	8006458 <LL_ADC_IsEnabled>
 80065b2:	4603      	mov	r3, r0
 80065b4:	431c      	orrs	r4, r3
 80065b6:	483c      	ldr	r0, [pc, #240]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80065b8:	f7ff ff4e 	bl	8006458 <LL_ADC_IsEnabled>
 80065bc:	4603      	mov	r3, r0
 80065be:	4323      	orrs	r3, r4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	bf0c      	ite	eq
 80065c4:	2301      	moveq	r3, #1
 80065c6:	2300      	movne	r3, #0
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d056      	beq.n	800667c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80065ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80065d6:	f023 030f 	bic.w	r3, r3, #15
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	6811      	ldr	r1, [r2, #0]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	6892      	ldr	r2, [r2, #8]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	431a      	orrs	r2, r3
 80065e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065e8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80065ea:	e047      	b.n	800667c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80065ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006600:	d004      	beq.n	800660c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a23      	ldr	r2, [pc, #140]	; (8006694 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d10f      	bne.n	800662c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800660c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006610:	f7ff ff22 	bl	8006458 <LL_ADC_IsEnabled>
 8006614:	4604      	mov	r4, r0
 8006616:	481f      	ldr	r0, [pc, #124]	; (8006694 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006618:	f7ff ff1e 	bl	8006458 <LL_ADC_IsEnabled>
 800661c:	4603      	mov	r3, r0
 800661e:	4323      	orrs	r3, r4
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf0c      	ite	eq
 8006624:	2301      	moveq	r3, #1
 8006626:	2300      	movne	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	e012      	b.n	8006652 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800662c:	481a      	ldr	r0, [pc, #104]	; (8006698 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800662e:	f7ff ff13 	bl	8006458 <LL_ADC_IsEnabled>
 8006632:	4604      	mov	r4, r0
 8006634:	4819      	ldr	r0, [pc, #100]	; (800669c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006636:	f7ff ff0f 	bl	8006458 <LL_ADC_IsEnabled>
 800663a:	4603      	mov	r3, r0
 800663c:	431c      	orrs	r4, r3
 800663e:	481a      	ldr	r0, [pc, #104]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006640:	f7ff ff0a 	bl	8006458 <LL_ADC_IsEnabled>
 8006644:	4603      	mov	r3, r0
 8006646:	4323      	orrs	r3, r4
 8006648:	2b00      	cmp	r3, #0
 800664a:	bf0c      	ite	eq
 800664c:	2301      	moveq	r3, #1
 800664e:	2300      	movne	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d012      	beq.n	800667c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800665e:	f023 030f 	bic.w	r3, r3, #15
 8006662:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006664:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006666:	e009      	b.n	800667c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666c:	f043 0220 	orr.w	r2, r3, #32
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800667a:	e000      	b.n	800667e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800667c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006686:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800668a:	4618      	mov	r0, r3
 800668c:	3784      	adds	r7, #132	; 0x84
 800668e:	46bd      	mov	sp, r7
 8006690:	bd90      	pop	{r4, r7, pc}
 8006692:	bf00      	nop
 8006694:	50000100 	.word	0x50000100
 8006698:	50000400 	.word	0x50000400
 800669c:	50000500 	.word	0x50000500
 80066a0:	50000300 	.word	0x50000300
 80066a4:	50000700 	.word	0x50000700
 80066a8:	50000600 	.word	0x50000600

080066ac <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e023      	b.n	8006706 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fc fdc0 	bl	8003258 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006720:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <__NVIC_SetPriorityGrouping+0x44>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800672c:	4013      	ands	r3, r2
 800672e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800673c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006742:	4a04      	ldr	r2, [pc, #16]	; (8006754 <__NVIC_SetPriorityGrouping+0x44>)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	60d3      	str	r3, [r2, #12]
}
 8006748:	bf00      	nop
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	e000ed00 	.word	0xe000ed00

08006758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800675c:	4b04      	ldr	r3, [pc, #16]	; (8006770 <__NVIC_GetPriorityGrouping+0x18>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	0a1b      	lsrs	r3, r3, #8
 8006762:	f003 0307 	and.w	r3, r3, #7
}
 8006766:	4618      	mov	r0, r3
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	e000ed00 	.word	0xe000ed00

08006774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	4603      	mov	r3, r0
 800677c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800677e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006782:	2b00      	cmp	r3, #0
 8006784:	db0b      	blt.n	800679e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	f003 021f 	and.w	r2, r3, #31
 800678c:	4907      	ldr	r1, [pc, #28]	; (80067ac <__NVIC_EnableIRQ+0x38>)
 800678e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	2001      	movs	r0, #1
 8006796:	fa00 f202 	lsl.w	r2, r0, r2
 800679a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	e000e100 	.word	0xe000e100

080067b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	4603      	mov	r3, r0
 80067b8:	6039      	str	r1, [r7, #0]
 80067ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	db0a      	blt.n	80067da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	490c      	ldr	r1, [pc, #48]	; (80067fc <__NVIC_SetPriority+0x4c>)
 80067ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ce:	0112      	lsls	r2, r2, #4
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	440b      	add	r3, r1
 80067d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067d8:	e00a      	b.n	80067f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	4908      	ldr	r1, [pc, #32]	; (8006800 <__NVIC_SetPriority+0x50>)
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	3b04      	subs	r3, #4
 80067e8:	0112      	lsls	r2, r2, #4
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	440b      	add	r3, r1
 80067ee:	761a      	strb	r2, [r3, #24]
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	e000e100 	.word	0xe000e100
 8006800:	e000ed00 	.word	0xe000ed00

08006804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006804:	b480      	push	{r7}
 8006806:	b089      	sub	sp, #36	; 0x24
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f1c3 0307 	rsb	r3, r3, #7
 800681e:	2b04      	cmp	r3, #4
 8006820:	bf28      	it	cs
 8006822:	2304      	movcs	r3, #4
 8006824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	3304      	adds	r3, #4
 800682a:	2b06      	cmp	r3, #6
 800682c:	d902      	bls.n	8006834 <NVIC_EncodePriority+0x30>
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	3b03      	subs	r3, #3
 8006832:	e000      	b.n	8006836 <NVIC_EncodePriority+0x32>
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006838:	f04f 32ff 	mov.w	r2, #4294967295
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	fa02 f303 	lsl.w	r3, r2, r3
 8006842:	43da      	mvns	r2, r3
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	401a      	ands	r2, r3
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800684c:	f04f 31ff 	mov.w	r1, #4294967295
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	fa01 f303 	lsl.w	r3, r1, r3
 8006856:	43d9      	mvns	r1, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800685c:	4313      	orrs	r3, r2
         );
}
 800685e:	4618      	mov	r0, r3
 8006860:	3724      	adds	r7, #36	; 0x24
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3b01      	subs	r3, #1
 8006878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800687c:	d301      	bcc.n	8006882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800687e:	2301      	movs	r3, #1
 8006880:	e00f      	b.n	80068a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006882:	4a0a      	ldr	r2, [pc, #40]	; (80068ac <SysTick_Config+0x40>)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3b01      	subs	r3, #1
 8006888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800688a:	210f      	movs	r1, #15
 800688c:	f04f 30ff 	mov.w	r0, #4294967295
 8006890:	f7ff ff8e 	bl	80067b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006894:	4b05      	ldr	r3, [pc, #20]	; (80068ac <SysTick_Config+0x40>)
 8006896:	2200      	movs	r2, #0
 8006898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800689a:	4b04      	ldr	r3, [pc, #16]	; (80068ac <SysTick_Config+0x40>)
 800689c:	2207      	movs	r2, #7
 800689e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	e000e010 	.word	0xe000e010

080068b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff ff29 	bl	8006710 <__NVIC_SetPriorityGrouping>
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b086      	sub	sp, #24
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	4603      	mov	r3, r0
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80068d4:	f7ff ff40 	bl	8006758 <__NVIC_GetPriorityGrouping>
 80068d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	6978      	ldr	r0, [r7, #20]
 80068e0:	f7ff ff90 	bl	8006804 <NVIC_EncodePriority>
 80068e4:	4602      	mov	r2, r0
 80068e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ea:	4611      	mov	r1, r2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff ff5f 	bl	80067b0 <__NVIC_SetPriority>
}
 80068f2:	bf00      	nop
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	4603      	mov	r3, r0
 8006902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff ff33 	bl	8006774 <__NVIC_EnableIRQ>
}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff ffa4 	bl	800686c <SysTick_Config>
 8006924:	4603      	mov	r3, r0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e08d      	b.n	8006a5e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	4b47      	ldr	r3, [pc, #284]	; (8006a68 <HAL_DMA_Init+0x138>)
 800694a:	429a      	cmp	r2, r3
 800694c:	d80f      	bhi.n	800696e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	4b45      	ldr	r3, [pc, #276]	; (8006a6c <HAL_DMA_Init+0x13c>)
 8006956:	4413      	add	r3, r2
 8006958:	4a45      	ldr	r2, [pc, #276]	; (8006a70 <HAL_DMA_Init+0x140>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	091b      	lsrs	r3, r3, #4
 8006960:	009a      	lsls	r2, r3, #2
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a42      	ldr	r2, [pc, #264]	; (8006a74 <HAL_DMA_Init+0x144>)
 800696a:	641a      	str	r2, [r3, #64]	; 0x40
 800696c:	e00e      	b.n	800698c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	4b40      	ldr	r3, [pc, #256]	; (8006a78 <HAL_DMA_Init+0x148>)
 8006976:	4413      	add	r3, r2
 8006978:	4a3d      	ldr	r2, [pc, #244]	; (8006a70 <HAL_DMA_Init+0x140>)
 800697a:	fba2 2303 	umull	r2, r3, r2, r3
 800697e:	091b      	lsrs	r3, r3, #4
 8006980:	009a      	lsls	r2, r3, #2
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a3c      	ldr	r2, [pc, #240]	; (8006a7c <HAL_DMA_Init+0x14c>)
 800698a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80069b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9b6 	bl	8006d50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ec:	d102      	bne.n	80069f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006a08:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d010      	beq.n	8006a34 <HAL_DMA_Init+0x104>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d80c      	bhi.n	8006a34 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f9d6 	bl	8006dcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006a30:	605a      	str	r2, [r3, #4]
 8006a32:	e008      	b.n	8006a46 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	40020407 	.word	0x40020407
 8006a6c:	bffdfff8 	.word	0xbffdfff8
 8006a70:	cccccccd 	.word	0xcccccccd
 8006a74:	40020000 	.word	0x40020000
 8006a78:	bffdfbf8 	.word	0xbffdfbf8
 8006a7c:	40020400 	.word	0x40020400

08006a80 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d101      	bne.n	8006aa0 <HAL_DMA_Start_IT+0x20>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	e066      	b.n	8006b6e <HAL_DMA_Start_IT+0xee>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d155      	bne.n	8006b60 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0201 	bic.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f8fb 	bl	8006cd4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 020e 	orr.w	r2, r2, #14
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e00f      	b.n	8006b18 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0204 	bic.w	r2, r2, #4
 8006b06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 020a 	orr.w	r2, r2, #10
 8006b16:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d007      	beq.n	8006b36 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b34:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b4c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e005      	b.n	8006b6c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b92:	f003 031f 	and.w	r3, r3, #31
 8006b96:	2204      	movs	r2, #4
 8006b98:	409a      	lsls	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d026      	beq.n	8006bf0 <HAL_DMA_IRQHandler+0x7a>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d021      	beq.n	8006bf0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d107      	bne.n	8006bca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0204 	bic.w	r2, r2, #4
 8006bc8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	f003 021f 	and.w	r2, r3, #31
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	2104      	movs	r1, #4
 8006bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8006bdc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d071      	beq.n	8006cca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006bee:	e06c      	b.n	8006cca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	f003 031f 	and.w	r3, r3, #31
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d02e      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d029      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10b      	bne.n	8006c34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 020a 	bic.w	r2, r2, #10
 8006c2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c38:	f003 021f 	and.w	r2, r3, #31
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c40:	2102      	movs	r1, #2
 8006c42:	fa01 f202 	lsl.w	r2, r1, r2
 8006c46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d038      	beq.n	8006cca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006c60:	e033      	b.n	8006cca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c66:	f003 031f 	and.w	r3, r3, #31
 8006c6a:	2208      	movs	r2, #8
 8006c6c:	409a      	lsls	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d02a      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d025      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 020e 	bic.w	r2, r2, #14
 8006c8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c94:	f003 021f 	and.w	r2, r3, #31
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8006ca2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006cca:	bf00      	nop
 8006ccc:	bf00      	nop
}
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006cea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d004      	beq.n	8006cfe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006cfc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d02:	f003 021f 	and.w	r2, r3, #31
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2b10      	cmp	r3, #16
 8006d20:	d108      	bne.n	8006d34 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006d32:	e007      	b.n	8006d44 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	60da      	str	r2, [r3, #12]
}
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4b16      	ldr	r3, [pc, #88]	; (8006db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d802      	bhi.n	8006d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006d64:	4b15      	ldr	r3, [pc, #84]	; (8006dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	e001      	b.n	8006d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006d6a:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006d6c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	3b08      	subs	r3, #8
 8006d7a:	4a12      	ldr	r2, [pc, #72]	; (8006dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d80:	091b      	lsrs	r3, r3, #4
 8006d82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d88:	089b      	lsrs	r3, r3, #2
 8006d8a:	009a      	lsls	r2, r3, #2
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	4413      	add	r3, r2
 8006d90:	461a      	mov	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a0b      	ldr	r2, [pc, #44]	; (8006dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006d9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f003 031f 	and.w	r3, r3, #31
 8006da2:	2201      	movs	r2, #1
 8006da4:	409a      	lsls	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40020407 	.word	0x40020407
 8006dbc:	40020800 	.word	0x40020800
 8006dc0:	40020820 	.word	0x40020820
 8006dc4:	cccccccd 	.word	0xcccccccd
 8006dc8:	40020880 	.word	0x40020880

08006dcc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	461a      	mov	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a08      	ldr	r2, [pc, #32]	; (8006e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006dee:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	2201      	movs	r2, #1
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006e00:	bf00      	nop
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	1000823f 	.word	0x1000823f
 8006e10:	40020940 	.word	0x40020940

08006e14 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d12b      	bne.n	8006e82 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_DMAEx_ConfigMuxSync+0x24>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e025      	b.n	8006e84 <HAL_DMAEx_ConfigMuxSync+0x70>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	b2d9      	uxtb	r1, r3
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	061a      	lsls	r2, r3, #24
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	04db      	lsls	r3, r3, #19
 8006e56:	431a      	orrs	r2, r3
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	7a1b      	ldrb	r3, [r3, #8]
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	431a      	orrs	r2, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	7a5b      	ldrb	r3, [r3, #9]
 8006e6a:	025b      	lsls	r3, r3, #9
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e72:	430a      	orrs	r2, r1
 8006e74:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	e000      	b.n	8006e84 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
  }
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01a      	beq.n	8006ede <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eb6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ec0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d022      	beq.n	8006f2c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d01a      	beq.n	8006f2c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f04:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006f0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	4798      	blx	r3
      }
    }
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e033      	b.n	8006fae <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fc f9fa 	bl	8003354 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f854 	bl	8007014 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_TIMEOUT)
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f822 	bl	8006fb6 <FMAC_Reset>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d10c      	bne.n	8006f92 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7c:	f043 0210 	orr.w	r2, r3, #16
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	22a0      	movs	r2, #160	; 0xa0
 8006f88:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	73fb      	strb	r3, [r7, #15]
 8006f90:	e008      	b.n	8006fa4 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fbe:	f7fd fd75 	bl	8004aac <HAL_GetTick>
 8006fc2:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006fd2:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006fd4:	e00f      	b.n	8006ff6 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8006fd6:	f7fd fd69 	bl	8004aac <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006fe4:	d907      	bls.n	8006ff6 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e00a      	b.n	800700c <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e8      	bne.n	8006fd6 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f807 	bl	8007030 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f81b 	bl	800705e <FMAC_ResetOutputStateAndDataPointers>
}
 8007028:	bf00      	nop
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800709a:	e15a      	b.n	8007352 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	2101      	movs	r1, #1
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	fa01 f303 	lsl.w	r3, r1, r3
 80070a8:	4013      	ands	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 814c 	beq.w	800734c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d00b      	beq.n	80070d4 <HAL_GPIO_Init+0x48>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d007      	beq.n	80070d4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80070c8:	2b11      	cmp	r3, #17
 80070ca:	d003      	beq.n	80070d4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b12      	cmp	r3, #18
 80070d2:	d130      	bne.n	8007136 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	2203      	movs	r2, #3
 80070e0:	fa02 f303 	lsl.w	r3, r2, r3
 80070e4:	43db      	mvns	r3, r3
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	4013      	ands	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	fa02 f303 	lsl.w	r3, r2, r3
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800710a:	2201      	movs	r2, #1
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	fa02 f303 	lsl.w	r3, r2, r3
 8007112:	43db      	mvns	r3, r3
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4013      	ands	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	091b      	lsrs	r3, r3, #4
 8007120:	f003 0201 	and.w	r2, r3, #1
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	fa02 f303 	lsl.w	r3, r2, r3
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	2203      	movs	r2, #3
 8007142:	fa02 f303 	lsl.w	r3, r2, r3
 8007146:	43db      	mvns	r3, r3
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4013      	ands	r3, r2
 800714c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	689a      	ldr	r2, [r3, #8]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4313      	orrs	r3, r2
 800715e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d003      	beq.n	8007176 <HAL_GPIO_Init+0xea>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b12      	cmp	r3, #18
 8007174:	d123      	bne.n	80071be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	08da      	lsrs	r2, r3, #3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3208      	adds	r2, #8
 800717e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	220f      	movs	r2, #15
 800718e:	fa02 f303 	lsl.w	r3, r2, r3
 8007192:	43db      	mvns	r3, r3
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4013      	ands	r3, r2
 8007198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	691a      	ldr	r2, [r3, #16]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	fa02 f303 	lsl.w	r3, r2, r3
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	08da      	lsrs	r2, r3, #3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3208      	adds	r2, #8
 80071b8:	6939      	ldr	r1, [r7, #16]
 80071ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	2203      	movs	r2, #3
 80071ca:	fa02 f303 	lsl.w	r3, r2, r3
 80071ce:	43db      	mvns	r3, r3
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4013      	ands	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f003 0203 	and.w	r2, r3, #3
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	fa02 f303 	lsl.w	r3, r2, r3
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80a6 	beq.w	800734c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007200:	4b5b      	ldr	r3, [pc, #364]	; (8007370 <HAL_GPIO_Init+0x2e4>)
 8007202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007204:	4a5a      	ldr	r2, [pc, #360]	; (8007370 <HAL_GPIO_Init+0x2e4>)
 8007206:	f043 0301 	orr.w	r3, r3, #1
 800720a:	6613      	str	r3, [r2, #96]	; 0x60
 800720c:	4b58      	ldr	r3, [pc, #352]	; (8007370 <HAL_GPIO_Init+0x2e4>)
 800720e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	60bb      	str	r3, [r7, #8]
 8007216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007218:	4a56      	ldr	r2, [pc, #344]	; (8007374 <HAL_GPIO_Init+0x2e8>)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	089b      	lsrs	r3, r3, #2
 800721e:	3302      	adds	r3, #2
 8007220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	220f      	movs	r2, #15
 8007230:	fa02 f303 	lsl.w	r3, r2, r3
 8007234:	43db      	mvns	r3, r3
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4013      	ands	r3, r2
 800723a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007242:	d01f      	beq.n	8007284 <HAL_GPIO_Init+0x1f8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a4c      	ldr	r2, [pc, #304]	; (8007378 <HAL_GPIO_Init+0x2ec>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d019      	beq.n	8007280 <HAL_GPIO_Init+0x1f4>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a4b      	ldr	r2, [pc, #300]	; (800737c <HAL_GPIO_Init+0x2f0>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d013      	beq.n	800727c <HAL_GPIO_Init+0x1f0>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a4a      	ldr	r2, [pc, #296]	; (8007380 <HAL_GPIO_Init+0x2f4>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00d      	beq.n	8007278 <HAL_GPIO_Init+0x1ec>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a49      	ldr	r2, [pc, #292]	; (8007384 <HAL_GPIO_Init+0x2f8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d007      	beq.n	8007274 <HAL_GPIO_Init+0x1e8>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a48      	ldr	r2, [pc, #288]	; (8007388 <HAL_GPIO_Init+0x2fc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d101      	bne.n	8007270 <HAL_GPIO_Init+0x1e4>
 800726c:	2305      	movs	r3, #5
 800726e:	e00a      	b.n	8007286 <HAL_GPIO_Init+0x1fa>
 8007270:	2306      	movs	r3, #6
 8007272:	e008      	b.n	8007286 <HAL_GPIO_Init+0x1fa>
 8007274:	2304      	movs	r3, #4
 8007276:	e006      	b.n	8007286 <HAL_GPIO_Init+0x1fa>
 8007278:	2303      	movs	r3, #3
 800727a:	e004      	b.n	8007286 <HAL_GPIO_Init+0x1fa>
 800727c:	2302      	movs	r3, #2
 800727e:	e002      	b.n	8007286 <HAL_GPIO_Init+0x1fa>
 8007280:	2301      	movs	r3, #1
 8007282:	e000      	b.n	8007286 <HAL_GPIO_Init+0x1fa>
 8007284:	2300      	movs	r3, #0
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	f002 0203 	and.w	r2, r2, #3
 800728c:	0092      	lsls	r2, r2, #2
 800728e:	4093      	lsls	r3, r2
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007296:	4937      	ldr	r1, [pc, #220]	; (8007374 <HAL_GPIO_Init+0x2e8>)
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	089b      	lsrs	r3, r3, #2
 800729c:	3302      	adds	r3, #2
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80072a4:	4b39      	ldr	r3, [pc, #228]	; (800738c <HAL_GPIO_Init+0x300>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	43db      	mvns	r3, r3
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4013      	ands	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80072c8:	4a30      	ldr	r2, [pc, #192]	; (800738c <HAL_GPIO_Init+0x300>)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80072ce:	4b2f      	ldr	r3, [pc, #188]	; (800738c <HAL_GPIO_Init+0x300>)
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	43db      	mvns	r3, r3
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	4013      	ands	r3, r2
 80072dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80072f2:	4a26      	ldr	r2, [pc, #152]	; (800738c <HAL_GPIO_Init+0x300>)
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072f8:	4b24      	ldr	r3, [pc, #144]	; (800738c <HAL_GPIO_Init+0x300>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	43db      	mvns	r3, r3
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4013      	ands	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4313      	orrs	r3, r2
 800731a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800731c:	4a1b      	ldr	r2, [pc, #108]	; (800738c <HAL_GPIO_Init+0x300>)
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007322:	4b1a      	ldr	r3, [pc, #104]	; (800738c <HAL_GPIO_Init+0x300>)
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	43db      	mvns	r3, r3
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	4013      	ands	r3, r2
 8007330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4313      	orrs	r3, r2
 8007344:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007346:	4a11      	ldr	r2, [pc, #68]	; (800738c <HAL_GPIO_Init+0x300>)
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	3301      	adds	r3, #1
 8007350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	fa22 f303 	lsr.w	r3, r2, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	f47f ae9d 	bne.w	800709c <HAL_GPIO_Init+0x10>
  }
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	40021000 	.word	0x40021000
 8007374:	40010000 	.word	0x40010000
 8007378:	48000400 	.word	0x48000400
 800737c:	48000800 	.word	0x48000800
 8007380:	48000c00 	.word	0x48000c00
 8007384:	48001000 	.word	0x48001000
 8007388:	48001400 	.word	0x48001400
 800738c:	40010400 	.word	0x40010400

08007390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	807b      	strh	r3, [r7, #2]
 800739c:	4613      	mov	r3, r2
 800739e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80073a0:	787b      	ldrb	r3, [r7, #1]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80073a6:	887a      	ldrh	r2, [r7, #2]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80073ac:	e002      	b.n	80073b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80073ae:	887a      	ldrh	r2, [r7, #2]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e0be      	b.n	8007550 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2202      	movs	r2, #2
 80073d6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d02e      	beq.n	800747c <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a4d      	ldr	r2, [pc, #308]	; (8007558 <HAL_HRTIM_Init+0x198>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d10b      	bne.n	8007440 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007428:	4b4c      	ldr	r3, [pc, #304]	; (800755c <HAL_HRTIM_Init+0x19c>)
 800742a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800742c:	4a4b      	ldr	r2, [pc, #300]	; (800755c <HAL_HRTIM_Init+0x19c>)
 800742e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007432:	6613      	str	r3, [r2, #96]	; 0x60
 8007434:	4b49      	ldr	r3, [pc, #292]	; (800755c <HAL_HRTIM_Init+0x19c>)
 8007436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007438:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800744e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4313      	orrs	r3, r2
 800745c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007464:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fc fa41 	bl	8003904 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d012      	beq.n	80074b4 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800749c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80074c4:	2300      	movs	r3, #0
 80074c6:	75fb      	strb	r3, [r7, #23]
 80074c8:	e03e      	b.n	8007548 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80074ca:	7dfa      	ldrb	r2, [r7, #23]
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	440b      	add	r3, r1
 80074d8:	3318      	adds	r3, #24
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80074de:	7dfa      	ldrb	r2, [r7, #23]
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	4613      	mov	r3, r2
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	1a9b      	subs	r3, r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	440b      	add	r3, r1
 80074ec:	331c      	adds	r3, #28
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80074f2:	7dfa      	ldrb	r2, [r7, #23]
 80074f4:	6879      	ldr	r1, [r7, #4]
 80074f6:	4613      	mov	r3, r2
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	1a9b      	subs	r3, r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	440b      	add	r3, r1
 8007500:	3320      	adds	r3, #32
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007506:	7dfa      	ldrb	r2, [r7, #23]
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	4613      	mov	r3, r2
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	1a9b      	subs	r3, r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	3324      	adds	r3, #36	; 0x24
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800751a:	7dfa      	ldrb	r2, [r7, #23]
 800751c:	6879      	ldr	r1, [r7, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	1a9b      	subs	r3, r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	440b      	add	r3, r1
 8007528:	3328      	adds	r3, #40	; 0x28
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800752e:	7dfa      	ldrb	r2, [r7, #23]
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	4613      	mov	r3, r2
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	1a9b      	subs	r3, r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	440b      	add	r3, r1
 800753c:	3330      	adds	r3, #48	; 0x30
 800753e:	2200      	movs	r2, #0
 8007540:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	3301      	adds	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007548:	7dfb      	ldrb	r3, [r7, #23]
 800754a:	2b06      	cmp	r3, #6
 800754c:	d9bd      	bls.n	80074ca <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	40016800 	.word	0x40016800
 800755c:	40021000 	.word	0x40021000

08007560 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8007574:	2302      	movs	r3, #2
 8007576:	e045      	b.n	8007604 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d114      	bne.n	80075ba <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0202 	bic.w	r2, r2, #2
 80075a0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f042 0201 	orr.w	r2, r2, #1
 80075b4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 80075b8:	e01f      	b.n	80075fa <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0202 	orr.w	r2, r2, #2
 80075ca:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80075d6:	f023 010c 	bic.w	r1, r3, #12
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0201 	orr.w	r2, r2, #1
 80075f6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 800761a:	f7fd fa47 	bl	8004aac <HAL_GetTick>
 800761e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007620:	e014      	b.n	800764c <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007628:	d010      	beq.n	800764c <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 800762a:	f7fd fa3f 	bl	8004aac <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d302      	bcc.n	8007640 <HAL_HRTIM_PollForDLLCalibration+0x30>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d105      	bne.n	800764c <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2207      	movs	r2, #7
 8007644:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e011      	b.n	8007670 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8007654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765c:	d1e1      	bne.n	8007622 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d101      	bne.n	8007694 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007690:	2302      	movs	r3, #2
 8007692:	e015      	b.n	80076c0 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b06      	cmp	r3, #6
 80076a0:	d104      	bne.n	80076ac <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f001 f8a9 	bl	80087fc <HRTIM_MasterBase_Config>
 80076aa:	e004      	b.n	80076b6 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f001 f8d2 	bl	800885a <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_HRTIM_FaultConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Fault,
                                        HRTIM_FaultCfgTypeDef* pFaultCfg)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b089      	sub	sp, #36	; 0x24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_FAULTSOURCE(pFaultCfg->Source));
  assert_param(IS_HRTIM_FAULTPOLARITY(pFaultCfg->Polarity));
  assert_param(IS_HRTIM_FAULTFILTER(pFaultCfg->Filter));
  assert_param(IS_HRTIM_FAULTLOCK(pFaultCfg->Lock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d101      	bne.n	80076e4 <HAL_HRTIM_FaultConfig+0x1c>
  {
     return HAL_BUSY;
 80076e0:	2302      	movs	r3, #2
 80076e2:	e1aa      	b.n	8007a3a <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d101      	bne.n	80076f2 <HAL_HRTIM_FaultConfig+0x2a>
 80076ee:	2302      	movs	r3, #2
 80076f0:	e1a3      	b.n	8007a3a <HAL_HRTIM_FaultConfig+0x372>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2202      	movs	r2, #2
 80076fe:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure fault channel */
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800770a:	61fb      	str	r3, [r7, #28]
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007714:	61bb      	str	r3, [r7, #24]

  source0 =  (pFaultCfg->Source & 1U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	617b      	str	r3, [r7, #20]
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	085b      	lsrs	r3, r3, #1
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	613b      	str	r3, [r7, #16]

  switch (Fault)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	3b01      	subs	r3, #1
 8007730:	2b1f      	cmp	r3, #31
 8007732:	f200 813f 	bhi.w	80079b4 <HAL_HRTIM_FaultConfig+0x2ec>
 8007736:	a201      	add	r2, pc, #4	; (adr r2, 800773c <HAL_HRTIM_FaultConfig+0x74>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	080077bd 	.word	0x080077bd
 8007740:	0800780d 	.word	0x0800780d
 8007744:	080079b5 	.word	0x080079b5
 8007748:	08007863 	.word	0x08007863
 800774c:	080079b5 	.word	0x080079b5
 8007750:	080079b5 	.word	0x080079b5
 8007754:	080079b5 	.word	0x080079b5
 8007758:	080078b9 	.word	0x080078b9
 800775c:	080079b5 	.word	0x080079b5
 8007760:	080079b5 	.word	0x080079b5
 8007764:	080079b5 	.word	0x080079b5
 8007768:	080079b5 	.word	0x080079b5
 800776c:	080079b5 	.word	0x080079b5
 8007770:	080079b5 	.word	0x080079b5
 8007774:	080079b5 	.word	0x080079b5
 8007778:	0800790f 	.word	0x0800790f
 800777c:	080079b5 	.word	0x080079b5
 8007780:	080079b5 	.word	0x080079b5
 8007784:	080079b5 	.word	0x080079b5
 8007788:	080079b5 	.word	0x080079b5
 800778c:	080079b5 	.word	0x080079b5
 8007790:	080079b5 	.word	0x080079b5
 8007794:	080079b5 	.word	0x080079b5
 8007798:	080079b5 	.word	0x080079b5
 800779c:	080079b5 	.word	0x080079b5
 80077a0:	080079b5 	.word	0x080079b5
 80077a4:	080079b5 	.word	0x080079b5
 80077a8:	080079b5 	.word	0x080079b5
 80077ac:	080079b5 	.word	0x080079b5
 80077b0:	080079b5 	.word	0x080079b5
 80077b4:	080079b5 	.word	0x080079b5
 80077b8:	0800795f 	.word	0x0800795f
  {
  case HRTIM_FAULT_1:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80077c2:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT1SRC_0_Pos);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	4313      	orrs	r3, r2
 80077da:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT1SRC_1);
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077e2:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	041b      	lsls	r3, r3, #16
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007804:	69fa      	ldr	r2, [r7, #28]
 8007806:	4313      	orrs	r3, r2
 8007808:	61fb      	str	r3, [r7, #28]
      break;
 800780a:	e0dc      	b.n	80079c6 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_2:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007812:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	021b      	lsls	r3, r3, #8
 800781a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800781e:	69fa      	ldr	r2, [r7, #28]
 8007820:	4313      	orrs	r3, r2
 8007822:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT2SRC_0_Pos);
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	029b      	lsls	r3, r3, #10
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	4313      	orrs	r3, r2
 800782c:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT2SRC_1);
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007834:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	045b      	lsls	r3, r3, #17
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	4313      	orrs	r3, r2
 800783e:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	021b      	lsls	r3, r3, #8
 8007846:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	4313      	orrs	r3, r2
 800784e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	021b      	lsls	r3, r3, #8
 8007856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	4313      	orrs	r3, r2
 800785e:	61fb      	str	r3, [r7, #28]
      break;
 8007860:	e0b1      	b.n	80079c6 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_3:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
 8007868:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	041b      	lsls	r3, r3, #16
 8007870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007874:	69fa      	ldr	r2, [r7, #28]
 8007876:	4313      	orrs	r3, r2
 8007878:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT3SRC_0_Pos);
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	049b      	lsls	r3, r3, #18
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	4313      	orrs	r3, r2
 8007882:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT3SRC_1);
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800788a:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	049b      	lsls	r3, r3, #18
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	4313      	orrs	r3, r2
 8007894:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	041b      	lsls	r3, r3, #16
 800789c:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 80078a0:	69fa      	ldr	r2, [r7, #28]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	041b      	lsls	r3, r3, #16
 80078ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	61fb      	str	r3, [r7, #28]
      break;
 80078b6:	e086      	b.n	80079c6 <HAL_HRTIM_FaultConfig+0x2fe>
     }

  case HRTIM_FAULT_4:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80078be:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	061b      	lsls	r3, r3, #24
 80078c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT4SRC_0_Pos);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	069b      	lsls	r3, r3, #26
 80078d4:	69fa      	ldr	r2, [r7, #28]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT4SRC_1);
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80078e0:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	04db      	lsls	r3, r3, #19
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	061b      	lsls	r3, r3, #24
 80078f2:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	061b      	lsls	r3, r3, #24
 8007902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	4313      	orrs	r3, r2
 800790a:	61fb      	str	r3, [r7, #28]
      break;
 800790c:	e05b      	b.n	80079c6 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_5:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC_0 | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007914:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	4313      	orrs	r3, r2
 8007922:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	4313      	orrs	r3, r2
 800792c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007934:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT5SRC_1_Pos);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	051b      	lsls	r3, r3, #20
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	4313      	orrs	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	4313      	orrs	r3, r2
 800794c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	4313      	orrs	r3, r2
 800795a:	61bb      	str	r3, [r7, #24]
      break;
 800795c:	e033      	b.n	80079c6 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_6:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6P | HRTIM_FLTINR2_FLT6SRC_0 | HRTIM_FLTINR2_FLT6F | HRTIM_FLTINR2_FLT6LCK);
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007964:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	021b      	lsls	r3, r3, #8
 800796c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	4313      	orrs	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	029b      	lsls	r3, r3, #10
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	4313      	orrs	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007986:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT6SRC_1_Pos);
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	055b      	lsls	r3, r3, #21
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	4313      	orrs	r3, r2
 8007990:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	4313      	orrs	r3, r2
 80079a0:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]
      break;
 80079b2:	e008      	b.n	80079c6 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2207      	movs	r2, #7
 80079b8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80079c4:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b07      	cmp	r3, #7
 80079d0:	d101      	bne.n	80079d6 <HAL_HRTIM_FaultConfig+0x30e>
  {
     return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e031      	b.n	8007a3a <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Update the HRTIM registers except LOCK bit */
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 80079e0:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079f2:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  /* Update the HRTIM registers LOCK bit */
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	f248 0380 	movw	r3, #32896	; 0x8080
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	430b      	orrs	r3, r1
 8007a24:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3724      	adds	r7, #36	; 0x24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop

08007a48 <HAL_HRTIM_FaultPrescalerConfig>:
  * @note This function must be called before starting the timer and before
  *       enabling faults inputs
  */
HAL_StatusTypeDef HAL_HRTIM_FaultPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d101      	bne.n	8007a62 <HAL_HRTIM_FaultPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e025      	b.n	8007aae <HAL_HRTIM_FaultPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <HAL_HRTIM_FaultPrescalerConfig+0x28>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e01e      	b.n	8007aae <HAL_HRTIM_FaultPrescalerConfig+0x66>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a88:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
	...

08007abc <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultBlankingConfigAndEnable(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t Fault,
                                                HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTBLANKNGMODE(pFaultBlkCfg->BlankingSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d101      	bne.n	8007ad8 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1c>
  {
     return HAL_BUSY;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e0d7      	b.n	8007c88 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d101      	bne.n	8007ae6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x2a>
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	e0d0      	b.n	8007c88 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2202      	movs	r2, #2
 8007af2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	2b1f      	cmp	r3, #31
 8007afc:	f200 80aa 	bhi.w	8007c54 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x198>
 8007b00:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x4c>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b89 	.word	0x08007b89
 8007b0c:	08007bab 	.word	0x08007bab
 8007b10:	08007c55 	.word	0x08007c55
 8007b14:	08007bcd 	.word	0x08007bcd
 8007b18:	08007c55 	.word	0x08007c55
 8007b1c:	08007c55 	.word	0x08007c55
 8007b20:	08007c55 	.word	0x08007c55
 8007b24:	08007bef 	.word	0x08007bef
 8007b28:	08007c55 	.word	0x08007c55
 8007b2c:	08007c55 	.word	0x08007c55
 8007b30:	08007c55 	.word	0x08007c55
 8007b34:	08007c55 	.word	0x08007c55
 8007b38:	08007c55 	.word	0x08007c55
 8007b3c:	08007c55 	.word	0x08007c55
 8007b40:	08007c55 	.word	0x08007c55
 8007b44:	08007c11 	.word	0x08007c11
 8007b48:	08007c55 	.word	0x08007c55
 8007b4c:	08007c55 	.word	0x08007c55
 8007b50:	08007c55 	.word	0x08007c55
 8007b54:	08007c55 	.word	0x08007c55
 8007b58:	08007c55 	.word	0x08007c55
 8007b5c:	08007c55 	.word	0x08007c55
 8007b60:	08007c55 	.word	0x08007c55
 8007b64:	08007c55 	.word	0x08007c55
 8007b68:	08007c55 	.word	0x08007c55
 8007b6c:	08007c55 	.word	0x08007c55
 8007b70:	08007c55 	.word	0x08007c55
 8007b74:	08007c55 	.word	0x08007c55
 8007b78:	08007c55 	.word	0x08007c55
 8007b7c:	08007c55 	.word	0x08007c55
 8007b80:	08007c55 	.word	0x08007c55
 8007b84:	08007c33 	.word	0x08007c33
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007b90:	f023 0203 	bic.w	r2, r3, #3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f042 0201 	orr.w	r2, r2, #1
 8007ba4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1BLKS | HRTIM_FLTINR3_FLT1BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT1BLKS_Pos) |
                  HRTIM_FLTINR3_FLT1BLKE));
       break;
 8007ba8:	e05d      	b.n	8007c66 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007bb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	025b      	lsls	r3, r3, #9
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bc6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2BLKS | HRTIM_FLTINR3_FLT2BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT2BLKS_Pos) |
                  HRTIM_FLTINR3_FLT2BLKE));
       break;
 8007bca:	e04c      	b.n	8007c66 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	045b      	lsls	r3, r3, #17
 8007bde:	431a      	orrs	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007be8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3BLKS | HRTIM_FLTINR3_FLT3BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT3BLKS_Pos) |
                  HRTIM_FLTINR3_FLT3BLKE));
       break;
 8007bec:	e03b      	b.n	8007c66 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007bf6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	065b      	lsls	r3, r3, #25
 8007c00:	431a      	orrs	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007c0a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4BLKS | HRTIM_FLTINR3_FLT4BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT4BLKS_Pos) |
                  HRTIM_FLTINR3_FLT4BLKE));
       break;
 8007c0e:	e02a      	b.n	8007c66 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007c18:	f023 0203 	bic.w	r2, r3, #3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	431a      	orrs	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0201 	orr.w	r2, r2, #1
 8007c2c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5BLKS | HRTIM_FLTINR4_FLT5BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT5BLKS_Pos) |
                  HRTIM_FLTINR4_FLT5BLKE));
      break;
 8007c30:	e019      	b.n	8007c66 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	025b      	lsls	r3, r3, #9
 8007c44:	431a      	orrs	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c4e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6BLKS | HRTIM_FLTINR4_FLT6BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT6BLKS_Pos) |
                  HRTIM_FLTINR4_FLT6BLKE));
      break;
 8007c52:	e008      	b.n	8007c66 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2207      	movs	r2, #7
 8007c58:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007c64:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b07      	cmp	r3, #7
 8007c70:	d101      	bne.n	8007c76 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1ba>
  {
     return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e008      	b.n	8007c88 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_HRTIM_FaultCounterConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultCounterConfig(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t Fault,
                                               HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTCOUNTER(pFaultBlkCfg->Threshold));
  assert_param(IS_HRTIM_FAULTCOUNTERRST(pFaultBlkCfg->ResetMode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d101      	bne.n	8007cb0 <HAL_HRTIM_FaultCounterConfig+0x1c>
  {
     return HAL_BUSY;
 8007cac:	2302      	movs	r3, #2
 8007cae:	e0e3      	b.n	8007e78 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <HAL_HRTIM_FaultCounterConfig+0x2a>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e0dc      	b.n	8007e78 <HAL_HRTIM_FaultCounterConfig+0x1e4>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2202      	movs	r2, #2
 8007cca:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	2b1f      	cmp	r3, #31
 8007cd4:	f200 80b6 	bhi.w	8007e44 <HAL_HRTIM_FaultCounterConfig+0x1b0>
 8007cd8:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <HAL_HRTIM_FaultCounterConfig+0x4c>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007d61 	.word	0x08007d61
 8007ce4:	08007d87 	.word	0x08007d87
 8007ce8:	08007e45 	.word	0x08007e45
 8007cec:	08007dad 	.word	0x08007dad
 8007cf0:	08007e45 	.word	0x08007e45
 8007cf4:	08007e45 	.word	0x08007e45
 8007cf8:	08007e45 	.word	0x08007e45
 8007cfc:	08007dd3 	.word	0x08007dd3
 8007d00:	08007e45 	.word	0x08007e45
 8007d04:	08007e45 	.word	0x08007e45
 8007d08:	08007e45 	.word	0x08007e45
 8007d0c:	08007e45 	.word	0x08007e45
 8007d10:	08007e45 	.word	0x08007e45
 8007d14:	08007e45 	.word	0x08007e45
 8007d18:	08007e45 	.word	0x08007e45
 8007d1c:	08007df9 	.word	0x08007df9
 8007d20:	08007e45 	.word	0x08007e45
 8007d24:	08007e45 	.word	0x08007e45
 8007d28:	08007e45 	.word	0x08007e45
 8007d2c:	08007e45 	.word	0x08007e45
 8007d30:	08007e45 	.word	0x08007e45
 8007d34:	08007e45 	.word	0x08007e45
 8007d38:	08007e45 	.word	0x08007e45
 8007d3c:	08007e45 	.word	0x08007e45
 8007d40:	08007e45 	.word	0x08007e45
 8007d44:	08007e45 	.word	0x08007e45
 8007d48:	08007e45 	.word	0x08007e45
 8007d4c:	08007e45 	.word	0x08007e45
 8007d50:	08007e45 	.word	0x08007e45
 8007d54:	08007e45 	.word	0x08007e45
 8007d58:	08007e45 	.word	0x08007e45
 8007d5c:	08007e1f 	.word	0x08007e1f
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007d68:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	009a      	lsls	r2, r3, #2
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	01db      	lsls	r3, r3, #7
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1RSTM | HRTIM_FLTINR3_FLT1CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT1CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT1RSTM_Pos));
       break;
 8007d84:	e067      	b.n	8007e56 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007d8e:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	029a      	lsls	r2, r3, #10
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	03db      	lsls	r3, r3, #15
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2RSTM | HRTIM_FLTINR3_FLT2CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT2CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT2RSTM_Pos));
       break;
 8007daa:	e054      	b.n	8007e56 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007db4:	f423 013c 	bic.w	r1, r3, #12320768	; 0xbc0000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	049a      	lsls	r2, r3, #18
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	05db      	lsls	r3, r3, #23
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3RSTM | HRTIM_FLTINR3_FLT3CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT3CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT3RSTM_Pos));
       break;
 8007dd0:	e041      	b.n	8007e56 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007dda:	f023 413c 	bic.w	r1, r3, #3154116608	; 0xbc000000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	069a      	lsls	r2, r3, #26
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	07db      	lsls	r3, r3, #31
 8007dea:	431a      	orrs	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4RSTM | HRTIM_FLTINR3_FLT4CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT4CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT4RSTM_Pos));
       break;
 8007df6:	e02e      	b.n	8007e56 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_5:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007e00:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	009a      	lsls	r2, r3, #2
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	01db      	lsls	r3, r3, #7
 8007e10:	431a      	orrs	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5RSTM | HRTIM_FLTINR4_FLT5CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT5CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT5RSTM_Pos));
       break;
 8007e1c:	e01b      	b.n	8007e56 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_6:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007e26:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	029a      	lsls	r2, r3, #10
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	03db      	lsls	r3, r3, #15
 8007e36:	431a      	orrs	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6RSTM | HRTIM_FLTINR4_FLT6CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT6CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT6RSTM_Pos));
       break;
 8007e42:	e008      	b.n	8007e56 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2207      	movs	r2, #7
 8007e48:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007e54:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b07      	cmp	r3, #7
 8007e60:	d101      	bne.n	8007e66 <HAL_HRTIM_FaultCounterConfig+0x1d2>
  {
     return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e008      	b.n	8007e78 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_HRTIM_FaultModeCtl>:
  * @retval None
  */
void HAL_HRTIM_FaultModeCtl(HRTIM_HandleTypeDef * hhrtim,
                        uint32_t Faults,
                        uint32_t Enable)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Faults));
  assert_param(IS_HRTIM_FAULTMODECTL(Enable));

  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00d      	beq.n	8007eb6 <HAL_HRTIM_FaultModeCtl+0x32>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ea2:	f023 0101 	bic.w	r1, r3, #1
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f003 0201 	and.w	r2, r3, #1
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00e      	beq.n	8007ede <HAL_HRTIM_FaultModeCtl+0x5a>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ec8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	021b      	lsls	r3, r3, #8
 8007ed0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00e      	beq.n	8007f06 <HAL_HRTIM_FaultModeCtl+0x82>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	041b      	lsls	r3, r3, #16
 8007ef8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00e      	beq.n	8007f2e <HAL_HRTIM_FaultModeCtl+0xaa>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f18:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	061b      	lsls	r3, r3, #24
 8007f20:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00d      	beq.n	8007f54 <HAL_HRTIM_FaultModeCtl+0xd0>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f40:	f023 0101 	bic.w	r1, r3, #1
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f003 0201 	and.w	r2, r3, #1
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00e      	beq.n	8007f7c <HAL_HRTIM_FaultModeCtl+0xf8>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f66:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
}
 8007f7c:	bf00      	nop
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d101      	bne.n	8007fa4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e05f      	b.n	8008064 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d101      	bne.n	8007fb2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8007fae:	2302      	movs	r3, #2
 8007fb0:	e058      	b.n	8008064 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2b06      	cmp	r3, #6
 8007fc6:	d104      	bne.n	8007fd2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fc85 	bl	80088da <HRTIM_MasterWaveform_Config>
 8007fd0:	e004      	b.n	8007fdc <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	68b9      	ldr	r1, [r7, #8]
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f000 fd1c 	bl	8008a14 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6819      	ldr	r1, [r3, #0]
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	1a9b      	subs	r3, r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4403      	add	r3, r0
 8007fee:	3320      	adds	r3, #32
 8007ff0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6859      	ldr	r1, [r3, #4]
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	1a9b      	subs	r3, r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4403      	add	r3, r0
 8008004:	3324      	adds	r3, #36	; 0x24
 8008006:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6899      	ldr	r1, [r3, #8]
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	4613      	mov	r3, r2
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4403      	add	r3, r0
 800801a:	3328      	adds	r3, #40	; 0x28
 800801c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68d9      	ldr	r1, [r3, #12]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	00db      	lsls	r3, r3, #3
 800802a:	1a9b      	subs	r3, r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4403      	add	r3, r0
 8008030:	332c      	adds	r3, #44	; 0x2c
 8008032:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6919      	ldr	r1, [r3, #16]
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	4613      	mov	r3, r2
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	1a9b      	subs	r3, r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4403      	add	r3, r0
 8008046:	3330      	adds	r3, #48	; 0x30
 8008048:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800804a:	68b9      	ldr	r1, [r7, #8]
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f001 f829 	bl	80090a4 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d101      	bne.n	8008088 <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 8008084:	2302      	movs	r3, #2
 8008086:	e020      	b.n	80080ca <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800808e:	2b01      	cmp	r3, #1
 8008090:	d101      	bne.n	8008096 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8008092:	2302      	movs	r3, #2
 8008094:	e019      	b.n	80080ca <HAL_HRTIM_WaveformTimerControl+0x5e>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2202      	movs	r2, #2
 80080a2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 fe46 	bl	8008d3c <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 fff6 	bl	80090a4 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d101      	bne.n	80080f2 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80080ee:	2302      	movs	r3, #2
 80080f0:	e157      	b.n	80083a2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e150      	b.n	80083a2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2b06      	cmp	r3, #6
 8008114:	d140      	bne.n	8008198 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3b01      	subs	r3, #1
 800811a:	2b07      	cmp	r3, #7
 800811c:	d82a      	bhi.n	8008174 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800811e:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	08008145 	.word	0x08008145
 8008128:	08008151 	.word	0x08008151
 800812c:	08008175 	.word	0x08008175
 8008130:	0800815d 	.word	0x0800815d
 8008134:	08008175 	.word	0x08008175
 8008138:	08008175 	.word	0x08008175
 800813c:	08008175 	.word	0x08008175
 8008140:	08008169 	.word	0x08008169
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	6812      	ldr	r2, [r2, #0]
 800814c:	61da      	str	r2, [r3, #28]
        break;
 800814e:	e01a      	b.n	8008186 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	6812      	ldr	r2, [r2, #0]
 8008158:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800815a:	e014      	b.n	8008186 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	6812      	ldr	r2, [r2, #0]
 8008164:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8008166:	e00e      	b.n	8008186 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	6812      	ldr	r2, [r2, #0]
 8008170:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8008172:	e008      	b.n	8008186 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2207      	movs	r2, #7
 8008178:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8008184:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b07      	cmp	r3, #7
 8008190:	f040 80fe 	bne.w	8008390 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e104      	b.n	80083a2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3b01      	subs	r3, #1
 800819c:	2b07      	cmp	r3, #7
 800819e:	f200 80e3 	bhi.w	8008368 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80081a2:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80081a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a8:	080081c9 	.word	0x080081c9
 80081ac:	080081dd 	.word	0x080081dd
 80081b0:	08008369 	.word	0x08008369
 80081b4:	08008299 	.word	0x08008299
 80081b8:	08008369 	.word	0x08008369
 80081bc:	08008369 	.word	0x08008369
 80081c0:	08008369 	.word	0x08008369
 80081c4:	080082ad 	.word	0x080082ad
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6819      	ldr	r1, [r3, #0]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	01db      	lsls	r3, r3, #7
 80081d4:	440b      	add	r3, r1
 80081d6:	339c      	adds	r3, #156	; 0x9c
 80081d8:	601a      	str	r2, [r3, #0]
        break;
 80081da:	e0d1      	b.n	8008380 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6819      	ldr	r1, [r3, #0]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	01db      	lsls	r3, r3, #7
 80081e8:	440b      	add	r3, r1
 80081ea:	33a4      	adds	r3, #164	; 0xa4
 80081ec:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d03f      	beq.n	8008276 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	3301      	adds	r3, #1
 80081fe:	01db      	lsls	r3, r3, #7
 8008200:	4413      	add	r3, r2
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	6811      	ldr	r1, [r2, #0]
 8008208:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	3301      	adds	r3, #1
 8008210:	01db      	lsls	r3, r3, #7
 8008212:	440b      	add	r3, r1
 8008214:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	3301      	adds	r3, #1
 800821e:	01db      	lsls	r3, r3, #7
 8008220:	4413      	add	r3, r2
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	68f9      	ldr	r1, [r7, #12]
 800822a:	6809      	ldr	r1, [r1, #0]
 800822c:	431a      	orrs	r2, r3
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	3301      	adds	r3, #1
 8008232:	01db      	lsls	r3, r3, #7
 8008234:	440b      	add	r3, r1
 8008236:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008240:	d109      	bne.n	8008256 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6819      	ldr	r1, [r3, #0]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	01db      	lsls	r3, r3, #7
 800824e:	440b      	add	r3, r1
 8008250:	339c      	adds	r3, #156	; 0x9c
 8008252:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8008254:	e091      	b.n	800837a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800825e:	f040 808c 	bne.w	800837a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6819      	ldr	r1, [r3, #0]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	689a      	ldr	r2, [r3, #8]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	01db      	lsls	r3, r3, #7
 800826e:	440b      	add	r3, r1
 8008270:	33a8      	adds	r3, #168	; 0xa8
 8008272:	601a      	str	r2, [r3, #0]
         break;
 8008274:	e081      	b.n	800837a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	3301      	adds	r3, #1
 800827e:	01db      	lsls	r3, r3, #7
 8008280:	4413      	add	r3, r2
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	6811      	ldr	r1, [r2, #0]
 8008288:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	3301      	adds	r3, #1
 8008290:	01db      	lsls	r3, r3, #7
 8008292:	440b      	add	r3, r1
 8008294:	601a      	str	r2, [r3, #0]
         break;
 8008296:	e070      	b.n	800837a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6819      	ldr	r1, [r3, #0]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	01db      	lsls	r3, r3, #7
 80082a4:	440b      	add	r3, r1
 80082a6:	33a8      	adds	r3, #168	; 0xa8
 80082a8:	601a      	str	r2, [r3, #0]
        break;
 80082aa:	e069      	b.n	8008380 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6819      	ldr	r1, [r3, #0]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	01db      	lsls	r3, r3, #7
 80082b8:	440b      	add	r3, r1
 80082ba:	33ac      	adds	r3, #172	; 0xac
 80082bc:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d03f      	beq.n	8008346 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	3301      	adds	r3, #1
 80082ce:	01db      	lsls	r3, r3, #7
 80082d0:	4413      	add	r3, r2
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	6811      	ldr	r1, [r2, #0]
 80082d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	3301      	adds	r3, #1
 80082e0:	01db      	lsls	r3, r3, #7
 80082e2:	440b      	add	r3, r1
 80082e4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	3301      	adds	r3, #1
 80082ee:	01db      	lsls	r3, r3, #7
 80082f0:	4413      	add	r3, r2
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	68f9      	ldr	r1, [r7, #12]
 80082fc:	6809      	ldr	r1, [r1, #0]
 80082fe:	431a      	orrs	r2, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3301      	adds	r3, #1
 8008304:	01db      	lsls	r3, r3, #7
 8008306:	440b      	add	r3, r1
 8008308:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008312:	d109      	bne.n	8008328 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6819      	ldr	r1, [r3, #0]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	689a      	ldr	r2, [r3, #8]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	01db      	lsls	r3, r3, #7
 8008320:	440b      	add	r3, r1
 8008322:	339c      	adds	r3, #156	; 0x9c
 8008324:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8008326:	e02a      	b.n	800837e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008330:	d125      	bne.n	800837e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6819      	ldr	r1, [r3, #0]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	689a      	ldr	r2, [r3, #8]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	01db      	lsls	r3, r3, #7
 800833e:	440b      	add	r3, r1
 8008340:	33a8      	adds	r3, #168	; 0xa8
 8008342:	601a      	str	r2, [r3, #0]
         break;
 8008344:	e01b      	b.n	800837e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	3301      	adds	r3, #1
 800834e:	01db      	lsls	r3, r3, #7
 8008350:	4413      	add	r3, r2
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	6811      	ldr	r1, [r2, #0]
 8008358:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	3301      	adds	r3, #1
 8008360:	01db      	lsls	r3, r3, #7
 8008362:	440b      	add	r3, r1
 8008364:	601a      	str	r2, [r3, #0]
         break;
 8008366:	e00a      	b.n	800837e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2207      	movs	r2, #7
 800836c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8008378:	e002      	b.n	8008380 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800837a:	bf00      	nop
 800837c:	e000      	b.n	8008380 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800837e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b07      	cmp	r3, #7
 800838a:	d101      	bne.n	8008390 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e008      	b.n	80083a2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop

080083b0 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d101      	bne.n	80083ce <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80083ca:	2302      	movs	r3, #2
 80083cc:	e01d      	b.n	800840a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80083d8:	2302      	movs	r3, #2
 80083da:	e016      	b.n	800840a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 fd02 	bl	8008dfc <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008422:	2b01      	cmp	r3, #1
 8008424:	d101      	bne.n	800842a <HAL_HRTIM_WaveformOutputStart+0x18>
 8008426:	2302      	movs	r3, #2
 8008428:	e01a      	b.n	8008460 <HAL_HRTIM_WaveformOutputStart+0x4e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_HRTIM_WaveformOutputStop+0x18>
 8008480:	2302      	movs	r3, #2
 8008482:	e01a      	b.n	80084ba <HAL_HRTIM_WaveformOutputStop+0x4e>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
	...

080084c8 <HAL_HRTIM_WaveformCountStart_DMA>:
  *       size of each DMA transfer are specified at timer configuration time
  *       (see HAL_HRTIM_WaveformTimerConfig)
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_DMA(HRTIM_HandleTypeDef * hhrtim,
                                                     uint32_t Timers)
{
 80084c8:	b590      	push	{r4, r7, lr}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  DMA_HandleTypeDef * hdma;

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  if((hhrtim->State == HAL_HRTIM_STATE_BUSY))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d101      	bne.n	80084e2 <HAL_HRTIM_WaveformCountStart_DMA+0x1a>
  {
     return HAL_BUSY;
 80084de:	2302      	movs	r3, #2
 80084e0:	e0d2      	b.n	8008688 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
  }

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2202      	movs	r2, #2
 80084e6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d101      	bne.n	80084f8 <HAL_HRTIM_WaveformCountStart_DMA+0x30>
 80084f4:	2302      	movs	r3, #2
 80084f6:	e0c7      	b.n	8008688 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d033      	beq.n	8008572 <HAL_HRTIM_WaveformCountStart_DMA+0xaa>
      (hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMARequests != 0U))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 8008510:	2b00      	cmp	r3, #0
 8008512:	d02e      	beq.n	8008572 <HAL_HRTIM_WaveformCountStart_DMA+0xaa>
  {
      /* Set the DMA error callback */
      hhrtim->hdmaMaster->XferErrorCallback = HRTIM_DMAError ;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800851a:	4a5d      	ldr	r2, [pc, #372]	; (8008690 <HAL_HRTIM_WaveformCountStart_DMA+0x1c8>)
 800851c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA transfer completed callback */
      hhrtim->hdmaMaster->XferCpltCallback = HRTIM_DMAMasterCplt;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008524:	4a5b      	ldr	r2, [pc, #364]	; (8008694 <HAL_HRTIM_WaveformCountStart_DMA+0x1cc>)
 8008526:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(hhrtim->hdmaMaster,
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008540:	f7fe fa9e 	bl	8006a80 <HAL_DMA_Start_IT>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <HAL_HRTIM_WaveformCountStart_DMA+0x96>
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMASrcAddress,
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMADstAddress,
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMASize) != HAL_OK)
    {
            hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2207      	movs	r2, #7
 800854e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

            /* Process Unlocked */
            __HAL_UNLOCK(hhrtim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

            return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e094      	b.n	8008688 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
        }

      /* Enable the timer DMA request */
      __HAL_HRTIM_MASTER_ENABLE_DMA(hhrtim,
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68d9      	ldr	r1, [r3, #12]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	60da      	str	r2, [r3, #12]
                                   hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMARequests);
  }

  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
 8008576:	e073      	b.n	8008660 <HAL_HRTIM_WaveformCountStart_DMA+0x198>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	4a47      	ldr	r2, [pc, #284]	; (8008698 <HAL_HRTIM_WaveformCountStart_DMA+0x1d0>)
 800857c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	4013      	ands	r3, r2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d068      	beq.n	800865a <HAL_HRTIM_WaveformCountStart_DMA+0x192>
         (hhrtim->TimerParam[timer_idx].DMARequests != 0U))
 8008588:	7bfa      	ldrb	r2, [r7, #15]
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	4613      	mov	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	1a9b      	subs	r3, r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	3324      	adds	r3, #36	; 0x24
 8008598:	681b      	ldr	r3, [r3, #0]
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 800859a:	2b00      	cmp	r3, #0
 800859c:	d05d      	beq.n	800865a <HAL_HRTIM_WaveformCountStart_DMA+0x192>
    {
      /* Get the timer DMA handler */
      hdma = HRTIM_GetDMAHandleFromTimerIdx(hhrtim, timer_idx);
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fce8 	bl	8008f78 <HRTIM_GetDMAHandleFromTimerIdx>
 80085a8:	60b8      	str	r0, [r7, #8]

      if (hdma == NULL)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d109      	bne.n	80085c4 <HAL_HRTIM_WaveformCountStart_DMA+0xfc>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2207      	movs	r2, #7
 80085b4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e061      	b.n	8008688 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
      }

       /* Set the DMA error callback */
      hdma->XferErrorCallback = HRTIM_DMAError ;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	4a32      	ldr	r2, [pc, #200]	; (8008690 <HAL_HRTIM_WaveformCountStart_DMA+0x1c8>)
 80085c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA transfer completed callback */
      hdma->XferCpltCallback = HRTIM_DMATimerxCplt;
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	4a33      	ldr	r2, [pc, #204]	; (800869c <HAL_HRTIM_WaveformCountStart_DMA+0x1d4>)
 80085ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(hdma,
 80085d0:	7bfa      	ldrb	r2, [r7, #15]
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	4613      	mov	r3, r2
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	1a9b      	subs	r3, r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	440b      	add	r3, r1
 80085de:	3328      	adds	r3, #40	; 0x28
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	7bfa      	ldrb	r2, [r7, #15]
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	4613      	mov	r3, r2
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	1a9b      	subs	r3, r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	440b      	add	r3, r1
 80085f0:	332c      	adds	r3, #44	; 0x2c
 80085f2:	681c      	ldr	r4, [r3, #0]
 80085f4:	7bfa      	ldrb	r2, [r7, #15]
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	4613      	mov	r3, r2
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	440b      	add	r3, r1
 8008602:	3330      	adds	r3, #48	; 0x30
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4622      	mov	r2, r4
 8008608:	4601      	mov	r1, r0
 800860a:	68b8      	ldr	r0, [r7, #8]
 800860c:	f7fe fa38 	bl	8006a80 <HAL_DMA_Start_IT>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d009      	beq.n	800862a <HAL_HRTIM_WaveformCountStart_DMA+0x162>
                       hhrtim->TimerParam[timer_idx].DMASrcAddress,
                       hhrtim->TimerParam[timer_idx].DMADstAddress,
                       hhrtim->TimerParam[timer_idx].DMASize) != HAL_OK)
    {
              hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2207      	movs	r2, #7
 800861a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

              /* Process Unlocked */
              __HAL_UNLOCK(hhrtim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

              return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e02e      	b.n	8008688 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
        }

      /* Enable the timer DMA request */
      __HAL_HRTIM_TIMER_ENABLE_DMA(hhrtim,
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	01db      	lsls	r3, r3, #7
 8008632:	4413      	add	r3, r2
 8008634:	338c      	adds	r3, #140	; 0x8c
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	7bfa      	ldrb	r2, [r7, #15]
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	4613      	mov	r3, r2
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	1a9b      	subs	r3, r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	3324      	adds	r3, #36	; 0x24
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6819      	ldr	r1, [r3, #0]
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	4302      	orrs	r2, r0
 8008652:	01db      	lsls	r3, r3, #7
 8008654:	440b      	add	r3, r1
 8008656:	338c      	adds	r3, #140	; 0x8c
 8008658:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	3301      	adds	r3, #1
 800865e:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	2b05      	cmp	r3, #5
 8008664:	d988      	bls.n	8008578 <HAL_HRTIM_WaveformCountStart_DMA+0xb0>
                                   hhrtim->TimerParam[timer_idx].DMARequests);
    }
  }

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, Timers);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6819      	ldr	r1, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	430a      	orrs	r2, r1
 8008674:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	bd90      	pop	{r4, r7, pc}
 8008690:	0800945f 	.word	0x0800945f
 8008694:	08009181 	.word	0x08009181
 8008698:	20000010 	.word	0x20000010
 800869c:	0800923b 	.word	0x0800923b

080086a0 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80086be:	bf00      	nop
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b083      	sub	sp, #12
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b083      	sub	sp, #12
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b083      	sub	sp, #12
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <HAL_HRTIM_ErrorCallback>:
  * @brief  Callback function invoked when a DMA error occurs
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_ErrorCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_ErrorCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f023 0307 	bic.w	r3, r3, #7
 8008814:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	4313      	orrs	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f023 0318 	bic.w	r3, r3, #24
 8008826:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	6812      	ldr	r2, [r2, #0]
 8008842:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	6852      	ldr	r2, [r2, #4]
 800884c:	619a      	str	r2, [r3, #24]
}
 800884e:	bf00      	nop
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800885a:	b480      	push	{r7}
 800885c:	b087      	sub	sp, #28
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	60b9      	str	r1, [r7, #8]
 8008864:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	3301      	adds	r3, #1
 800886e:	01db      	lsls	r3, r3, #7
 8008870:	4413      	add	r3, r2
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f023 0307 	bic.w	r3, r3, #7
 800887c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	4313      	orrs	r3, r2
 8008886:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f023 0318 	bic.w	r3, r3, #24
 800888e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	4313      	orrs	r3, r2
 8008898:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	3301      	adds	r3, #1
 80088a2:	01db      	lsls	r3, r3, #7
 80088a4:	4413      	add	r3, r2
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6819      	ldr	r1, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	01db      	lsls	r3, r3, #7
 80088b6:	440b      	add	r3, r1
 80088b8:	3394      	adds	r3, #148	; 0x94
 80088ba:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6819      	ldr	r1, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	01db      	lsls	r3, r3, #7
 80088c8:	440b      	add	r3, r1
 80088ca:	3398      	adds	r3, #152	; 0x98
 80088cc:	601a      	str	r2, [r3, #0]
}
 80088ce:	bf00      	nop
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80088da:	b480      	push	{r7}
 80088dc:	b085      	sub	sp, #20
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80088f4:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f023 0320 	bic.w	r3, r3, #32
 80088fc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	4313      	orrs	r3, r2
 8008906:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800890e:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	2b20      	cmp	r3, #32
 8008916:	d003      	beq.n	8008920 <HRTIM_MasterWaveform_Config+0x46>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	2b02      	cmp	r3, #2
 800891e:	d108      	bne.n	8008932 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008926:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f043 0320 	orr.w	r3, r3, #32
 800892e:	60fb      	str	r3, [r7, #12]
 8008930:	e021      	b.n	8008976 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	2b03      	cmp	r3, #3
 8008938:	d108      	bne.n	800894c <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008940:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	e014      	b.n	8008976 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	2b04      	cmp	r3, #4
 8008952:	d108      	bne.n	8008966 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895a:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	e007      	b.n	8008976 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f023 0320 	bic.w	r3, r3, #32
 800896c:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008974:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800897c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	4313      	orrs	r3, r2
 8008986:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800898e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	4313      	orrs	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80089a0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80089b2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80089c4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089d8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089ea:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008a08:	bf00      	nop
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b08b      	sub	sp, #44	; 0x2c
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	3301      	adds	r3, #1
 8008a28:	01db      	lsls	r3, r3, #7
 8008a2a:	4413      	add	r3, r2
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	6811      	ldr	r1, [r2, #0]
 8008a32:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	01db      	lsls	r3, r3, #7
 8008a3c:	440b      	add	r3, r1
 8008a3e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	3301      	adds	r3, #1
 8008a48:	01db      	lsls	r3, r3, #7
 8008a4a:	4413      	add	r3, r2
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	01db      	lsls	r3, r3, #7
 8008a58:	4413      	add	r3, r2
 8008a5a:	33e8      	adds	r3, #232	; 0xe8
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	01db      	lsls	r3, r3, #7
 8008a68:	4413      	add	r3, r2
 8008a6a:	33e4      	adds	r3, #228	; 0xe4
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008a78:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	f023 0320 	bic.w	r3, r3, #32
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	d003      	beq.n	8008a9c <HRTIM_TimingUnitWaveform_Config+0x88>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d108      	bne.n	8008aae <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	f043 0320 	orr.w	r3, r3, #32
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8008aac:	e021      	b.n	8008af2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d108      	bne.n	8008ac8 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac6:	e014      	b.n	8008af2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d108      	bne.n	8008ae2 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ad6:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24
 8008ae0:	e007      	b.n	8008af2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	f023 0320 	bic.w	r3, r3, #32
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b00:	4313      	orrs	r3, r2
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b12:	4313      	orrs	r3, r2
 8008b14:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b24:	4313      	orrs	r3, r2
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b36:	4313      	orrs	r3, r2
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d109      	bne.n	8008b68 <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b60:	025b      	lsls	r3, r3, #9
 8008b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b64:	4313      	orrs	r3, r2
 8008b66:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b78:	d103      	bne.n	8008b82 <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b90:	4313      	orrs	r3, r2
 8008b92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bb0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008bc2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bd8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bea:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf0:	6a3a      	ldr	r2, [r7, #32]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bfa:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008bfe:	d004      	beq.n	8008c0a <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c04:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008c08:	d103      	bne.n	8008c12 <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0e:	2b40      	cmp	r3, #64	; 0x40
 8008c10:	d108      	bne.n	8008c24 <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008c18:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c1e:	6a3a      	ldr	r2, [r7, #32]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c2a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c30:	6a3a      	ldr	r2, [r7, #32]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b05      	cmp	r3, #5
 8008c40:	d850      	bhi.n	8008ce4 <HRTIM_TimingUnitWaveform_Config+0x2d0>
 8008c42:	a201      	add	r2, pc, #4	; (adr r2, 8008c48 <HRTIM_TimingUnitWaveform_Config+0x234>)
 8008c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c48:	08008c61 	.word	0x08008c61
 8008c4c:	08008c77 	.word	0x08008c77
 8008c50:	08008c8d 	.word	0x08008c8d
 8008c54:	08008ca3 	.word	0x08008ca3
 8008c58:	08008cb9 	.word	0x08008cb9
 8008c5c:	08008ccf 	.word	0x08008ccf
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c66:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	61fb      	str	r3, [r7, #28]
      break;
 8008c74:	e037      	b.n	8008ce6 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c7c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	69fa      	ldr	r2, [r7, #28]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	61fb      	str	r3, [r7, #28]
      break;
 8008c8a:	e02c      	b.n	8008ce6 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008c92:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	69fa      	ldr	r2, [r7, #28]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	61fb      	str	r3, [r7, #28]
      break;
 8008ca0:	e021      	b.n	8008ce6 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ca8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	69fa      	ldr	r2, [r7, #28]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	61fb      	str	r3, [r7, #28]
      break;
 8008cb6:	e016      	b.n	8008ce6 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cbe:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc4:	015b      	lsls	r3, r3, #5
 8008cc6:	69fa      	ldr	r2, [r7, #28]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	61fb      	str	r3, [r7, #28]
      break;
 8008ccc:	e00b      	b.n	8008ce6 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008cd4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cda:	019b      	lsls	r3, r3, #6
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	61fb      	str	r3, [r7, #28]
      break;
 8008ce2:	e000      	b.n	8008ce6 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 8008ce4:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	3301      	adds	r3, #1
 8008cee:	01db      	lsls	r3, r3, #7
 8008cf0:	4413      	add	r3, r2
 8008cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	01db      	lsls	r3, r3, #7
 8008cfe:	4413      	add	r3, r2
 8008d00:	33e8      	adds	r3, #232	; 0xe8
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	01db      	lsls	r3, r3, #7
 8008d0e:	4413      	add	r3, r2
 8008d10:	33e4      	adds	r3, #228	; 0xe4
 8008d12:	6a3a      	ldr	r2, [r7, #32]
 8008d14:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	01db      	lsls	r3, r3, #7
 8008d1e:	4413      	add	r3, r2
 8008d20:	33d4      	adds	r3, #212	; 0xd4
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008d30:	bf00      	nop
 8008d32:	372c      	adds	r7, #44	; 0x2c
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	01db      	lsls	r3, r3, #7
 8008d50:	4413      	add	r3, r2
 8008d52:	33ec      	adds	r3, #236	; 0xec
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f023 0310 	bic.w	r3, r3, #16
 8008d5e:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	011b      	lsls	r3, r3, #4
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d72:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d84:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d96:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d11a      	bne.n	8008de0 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f023 0304 	bic.w	r3, r3, #4
 8008db0:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f023 0302 	bic.w	r3, r3, #2
 8008dc2:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f023 0301 	bic.w	r3, r3, #1
 8008dd4:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	01db      	lsls	r3, r3, #7
 8008de8:	4413      	add	r3, r2
 8008dea:	33ec      	adds	r3, #236	; 0xec
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	601a      	str	r2, [r3, #0]

}
 8008df0:	bf00      	nop
 8008df2:	371c      	adds	r7, #28
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b089      	sub	sp, #36	; 0x24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	01db      	lsls	r3, r3, #7
 8008e16:	4413      	add	r3, r2
 8008e18:	33e4      	adds	r3, #228	; 0xe4
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	01db      	lsls	r3, r3, #7
 8008e26:	4413      	add	r3, r2
 8008e28:	33b8      	adds	r3, #184	; 0xb8
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b20      	cmp	r3, #32
 8008e32:	d037      	beq.n	8008ea4 <HRTIM_OutputConfig+0xa8>
 8008e34:	2b20      	cmp	r3, #32
 8008e36:	d80d      	bhi.n	8008e54 <HRTIM_OutputConfig+0x58>
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d020      	beq.n	8008e7e <HRTIM_OutputConfig+0x82>
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	d804      	bhi.n	8008e4a <HRTIM_OutputConfig+0x4e>
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d01c      	beq.n	8008e7e <HRTIM_OutputConfig+0x82>
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d02d      	beq.n	8008ea4 <HRTIM_OutputConfig+0xa8>
      shift = 16U;
      break;
    }

  default:
    break;
 8008e48:	e041      	b.n	8008ece <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	d02a      	beq.n	8008ea4 <HRTIM_OutputConfig+0xa8>
 8008e4e:	2b10      	cmp	r3, #16
 8008e50:	d015      	beq.n	8008e7e <HRTIM_OutputConfig+0x82>
    break;
 8008e52:	e03c      	b.n	8008ece <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8008e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e58:	d011      	beq.n	8008e7e <HRTIM_OutputConfig+0x82>
 8008e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e5e:	d804      	bhi.n	8008e6a <HRTIM_OutputConfig+0x6e>
 8008e60:	2b40      	cmp	r3, #64	; 0x40
 8008e62:	d00c      	beq.n	8008e7e <HRTIM_OutputConfig+0x82>
 8008e64:	2b80      	cmp	r3, #128	; 0x80
 8008e66:	d01d      	beq.n	8008ea4 <HRTIM_OutputConfig+0xa8>
    break;
 8008e68:	e031      	b.n	8008ece <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8008e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e6e:	d006      	beq.n	8008e7e <HRTIM_OutputConfig+0x82>
 8008e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e74:	d016      	beq.n	8008ea4 <HRTIM_OutputConfig+0xa8>
 8008e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e7a:	d013      	beq.n	8008ea4 <HRTIM_OutputConfig+0xa8>
    break;
 8008e7c:	e027      	b.n	8008ece <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6819      	ldr	r1, [r3, #0]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	01db      	lsls	r3, r3, #7
 8008e8a:	440b      	add	r3, r1
 8008e8c:	33bc      	adds	r3, #188	; 0xbc
 8008e8e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6819      	ldr	r1, [r3, #0]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	689a      	ldr	r2, [r3, #8]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	01db      	lsls	r3, r3, #7
 8008e9c:	440b      	add	r3, r1
 8008e9e:	33c0      	adds	r3, #192	; 0xc0
 8008ea0:	601a      	str	r2, [r3, #0]
      break;
 8008ea2:	e014      	b.n	8008ece <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6819      	ldr	r1, [r3, #0]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	01db      	lsls	r3, r3, #7
 8008eb0:	440b      	add	r3, r1
 8008eb2:	33c4      	adds	r3, #196	; 0xc4
 8008eb4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6819      	ldr	r1, [r3, #0]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	689a      	ldr	r2, [r3, #8]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	01db      	lsls	r3, r3, #7
 8008ec2:	440b      	add	r3, r1
 8008ec4:	33c8      	adds	r3, #200	; 0xc8
 8008ec6:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008ec8:	2310      	movs	r3, #16
 8008eca:	61bb      	str	r3, [r7, #24]
      break;
 8008ecc:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008ece:	22fe      	movs	r2, #254	; 0xfe
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008ed6:	43db      	mvns	r3, r3
 8008ed8:	69fa      	ldr	r2, [r7, #28]
 8008eda:	4013      	ands	r3, r2
 8008edc:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee8:	69fa      	ldr	r2, [r7, #28]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	68da      	ldr	r2, [r3, #12]
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	691a      	ldr	r2, [r3, #16]
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	fa02 f303 	lsl.w	r3, r2, r3
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	695a      	ldr	r2, [r3, #20]
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	fa02 f303 	lsl.w	r3, r2, r3
 8008f18:	69fa      	ldr	r2, [r7, #28]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	699a      	ldr	r2, [r3, #24]
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	fa02 f303 	lsl.w	r3, r2, r3
 8008f28:	69fa      	ldr	r2, [r7, #28]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	2b08      	cmp	r3, #8
 8008f34:	d111      	bne.n	8008f5a <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10c      	bne.n	8008f5a <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d107      	bne.n	8008f5a <HRTIM_OutputConfig+0x15e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	69da      	ldr	r2, [r3, #28]
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	fa02 f303 	lsl.w	r3, r2, r3
 8008f54:	69fa      	ldr	r2, [r7, #28]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	01db      	lsls	r3, r3, #7
 8008f62:	4413      	add	r3, r2
 8008f64:	33e4      	adds	r3, #228	; 0xe4
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	601a      	str	r2, [r3, #0]
}
 8008f6a:	bf00      	nop
 8008f6c:	3724      	adds	r7, #36	; 0x24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
	...

08008f78 <HRTIM_GetDMAHandleFromTimerIdx>:
  return dma_request;
}

static DMA_HandleTypeDef * HRTIM_GetDMAHandleFromTimerIdx(HRTIM_HandleTypeDef * hhrtim,
                                                          uint32_t TimerIdx)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  DMA_HandleTypeDef * hdma = (DMA_HandleTypeDef *)NULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	60fb      	str	r3, [r7, #12]

  switch (TimerIdx)
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b06      	cmp	r3, #6
 8008f8a:	d834      	bhi.n	8008ff6 <HRTIM_GetDMAHandleFromTimerIdx+0x7e>
 8008f8c:	a201      	add	r2, pc, #4	; (adr r2, 8008f94 <HRTIM_GetDMAHandleFromTimerIdx+0x1c>)
 8008f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f92:	bf00      	nop
 8008f94:	08008fbb 	.word	0x08008fbb
 8008f98:	08008fc5 	.word	0x08008fc5
 8008f9c:	08008fcf 	.word	0x08008fcf
 8008fa0:	08008fd9 	.word	0x08008fd9
 8008fa4:	08008fe3 	.word	0x08008fe3
 8008fa8:	08008fed 	.word	0x08008fed
 8008fac:	08008fb1 	.word	0x08008fb1
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hdma = hhrtim->hdmaMaster;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fb6:	60fb      	str	r3, [r7, #12]
      break;
 8008fb8:	e01e      	b.n	8008ff8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hdma = hhrtim->hdmaTimerA;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008fc0:	60fb      	str	r3, [r7, #12]
      break;
 8008fc2:	e019      	b.n	8008ff8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hdma = hhrtim->hdmaTimerB;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008fca:	60fb      	str	r3, [r7, #12]
      break;
 8008fcc:	e014      	b.n	8008ff8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hdma = hhrtim->hdmaTimerC;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008fd4:	60fb      	str	r3, [r7, #12]
      break;
 8008fd6:	e00f      	b.n	8008ff8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hdma = hhrtim->hdmaTimerD;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008fde:	60fb      	str	r3, [r7, #12]
      break;
 8008fe0:	e00a      	b.n	8008ff8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hdma = hhrtim->hdmaTimerE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008fe8:	60fb      	str	r3, [r7, #12]
      break;
 8008fea:	e005      	b.n	8008ff8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hdma = hhrtim->hdmaTimerF;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8008ff2:	60fb      	str	r3, [r7, #12]
      break;
 8008ff4:	e000      	b.n	8008ff8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  default:
    break;
 8008ff6:	bf00      	nop
  }

  return hdma;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop

08009008 <GetTimerIdxFromDMAHandle>:

static uint32_t GetTimerIdxFromDMAHandle(HRTIM_HandleTypeDef * hhrtim,
                                         DMA_HandleTypeDef * hdma)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint32_t timed_idx = 0xFFFFFFFFU;
 8009012:	f04f 33ff 	mov.w	r3, #4294967295
 8009016:	60fb      	str	r3, [r7, #12]

  if (hdma == hhrtim->hdmaMaster)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	d102      	bne.n	800902a <GetTimerIdxFromDMAHandle+0x22>
  {
    timed_idx = HRTIM_TIMERINDEX_MASTER;
 8009024:	2306      	movs	r3, #6
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	e034      	b.n	8009094 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerA)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d102      	bne.n	800903c <GetTimerIdxFromDMAHandle+0x34>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_A;
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	e02b      	b.n	8009094 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerB)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	429a      	cmp	r2, r3
 8009046:	d102      	bne.n	800904e <GetTimerIdxFromDMAHandle+0x46>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_B;
 8009048:	2301      	movs	r3, #1
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	e022      	b.n	8009094 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerC)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	d102      	bne.n	8009060 <GetTimerIdxFromDMAHandle+0x58>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_C;
 800905a:	2302      	movs	r3, #2
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	e019      	b.n	8009094 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerD)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	429a      	cmp	r2, r3
 800906a:	d102      	bne.n	8009072 <GetTimerIdxFromDMAHandle+0x6a>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_D;
 800906c:	2303      	movs	r3, #3
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	e010      	b.n	8009094 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerE)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	429a      	cmp	r2, r3
 800907c:	d102      	bne.n	8009084 <GetTimerIdxFromDMAHandle+0x7c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_E;
 800907e:	2304      	movs	r3, #4
 8009080:	60fb      	str	r3, [r7, #12]
 8009082:	e007      	b.n	8009094 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerF)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	429a      	cmp	r2, r3
 800908e:	d101      	bne.n	8009094 <GetTimerIdxFromDMAHandle+0x8c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_F;
 8009090:	2305      	movs	r3, #5
 8009092:	60fb      	str	r3, [r7, #12]
  }
  else
  {
    /* nothing to do */
  }
  return timed_idx;
 8009094:	68fb      	ldr	r3, [r7, #12]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
	...

080090a4 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b06      	cmp	r3, #6
 80090b2:	d85e      	bhi.n	8009172 <HRTIM_ForceRegistersUpdate+0xce>
 80090b4:	a201      	add	r2, pc, #4	; (adr r2, 80090bc <HRTIM_ForceRegistersUpdate+0x18>)
 80090b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ba:	bf00      	nop
 80090bc:	080090ef 	.word	0x080090ef
 80090c0:	08009105 	.word	0x08009105
 80090c4:	0800911b 	.word	0x0800911b
 80090c8:	08009131 	.word	0x08009131
 80090cc:	08009147 	.word	0x08009147
 80090d0:	0800915d 	.word	0x0800915d
 80090d4:	080090d9 	.word	0x080090d9
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f042 0201 	orr.w	r2, r2, #1
 80090e8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090ec:	e042      	b.n	8009174 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f042 0202 	orr.w	r2, r2, #2
 80090fe:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009102:	e037      	b.n	8009174 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f042 0204 	orr.w	r2, r2, #4
 8009114:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009118:	e02c      	b.n	8009174 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f042 0208 	orr.w	r2, r2, #8
 800912a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800912e:	e021      	b.n	8009174 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f042 0210 	orr.w	r2, r2, #16
 8009140:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009144:	e016      	b.n	8009174 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f042 0220 	orr.w	r2, r2, #32
 8009156:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800915a:	e00b      	b.n	8009174 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800916c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009170:	e000      	b.n	8009174 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8009172:	bf00      	nop
  }
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HRTIM_DMAMasterCplt>:
  * @brief  DMA callback invoked upon master timer related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMAMasterCplt(DMA_HandleTypeDef *hdma)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918c:	60fb      	str	r3, [r7, #12]

  if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP1) != (uint32_t)RESET)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <HRTIM_DMAMasterCplt+0x26>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800919c:	2106      	movs	r1, #6
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f7ff fa9e 	bl	80086e0 <HAL_HRTIM_Compare1EventCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 80091a4:	e045      	b.n	8009232 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP2) != (uint32_t)RESET)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <HRTIM_DMAMasterCplt+0x3e>
    HAL_HRTIM_Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 80091b4:	2106      	movs	r1, #6
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f7ff fa9d 	bl	80086f6 <HAL_HRTIM_Compare2EventCallback>
}
 80091bc:	e039      	b.n	8009232 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP3) != (uint32_t)RESET)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d004      	beq.n	80091d6 <HRTIM_DMAMasterCplt+0x56>
    HAL_HRTIM_Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 80091cc:	2106      	movs	r1, #6
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7ff fa9c 	bl	800870c <HAL_HRTIM_Compare3EventCallback>
}
 80091d4:	e02d      	b.n	8009232 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP4) != (uint32_t)RESET)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d004      	beq.n	80091ee <HRTIM_DMAMasterCplt+0x6e>
    HAL_HRTIM_Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 80091e4:	2106      	movs	r1, #6
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f7ff fa9b 	bl	8008722 <HAL_HRTIM_Compare4EventCallback>
}
 80091ec:	e021      	b.n	8009232 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_SYNC) != (uint32_t)RESET)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <HRTIM_DMAMasterCplt+0x84>
    HAL_HRTIM_SynchronizationEventCallback(hrtim);
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f7ff fa4f 	bl	80086a0 <HAL_HRTIM_SynchronizationEventCallback>
}
 8009202:	e016      	b.n	8009232 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MUPD) != (uint32_t)RESET)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d004      	beq.n	800921c <HRTIM_DMAMasterCplt+0x9c>
    HAL_HRTIM_RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8009212:	2106      	movs	r1, #6
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7ff fa4d 	bl	80086b4 <HAL_HRTIM_RegistersUpdateCallback>
}
 800921a:	e00a      	b.n	8009232 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MREP) != (uint32_t)RESET)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <HRTIM_DMAMasterCplt+0xb2>
    HAL_HRTIM_RepetitionEventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800922a:	2106      	movs	r1, #6
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f7ff fa4c 	bl	80086ca <HAL_HRTIM_RepetitionEventCallback>
}
 8009232:	bf00      	nop
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <HRTIM_DMATimerxCplt>:
  * @brief  DMA callback invoked upon timer A..F related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMATimerxCplt(DMA_HandleTypeDef *hdma)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;

  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009246:	60fb      	str	r3, [r7, #12]

  timer_idx = (uint8_t)GetTimerIdxFromDMAHandle(hrtim, hdma);
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f7ff fedc 	bl	8009008 <GetTimerIdxFromDMAHandle>
 8009250:	4603      	mov	r3, r0
 8009252:	72fb      	strb	r3, [r7, #11]

  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 8009254:	7afb      	ldrb	r3, [r7, #11]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00f      	beq.n	800927a <HRTIM_DMATimerxCplt+0x40>
 800925a:	7afb      	ldrb	r3, [r7, #11]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d00c      	beq.n	800927a <HRTIM_DMATimerxCplt+0x40>
 8009260:	7afb      	ldrb	r3, [r7, #11]
 8009262:	2b02      	cmp	r3, #2
 8009264:	d009      	beq.n	800927a <HRTIM_DMATimerxCplt+0x40>
 8009266:	7afb      	ldrb	r3, [r7, #11]
 8009268:	2b03      	cmp	r3, #3
 800926a:	d006      	beq.n	800927a <HRTIM_DMATimerxCplt+0x40>
 800926c:	7afb      	ldrb	r3, [r7, #11]
 800926e:	2b04      	cmp	r3, #4
 8009270:	d003      	beq.n	800927a <HRTIM_DMATimerxCplt+0x40>
 8009272:	7afb      	ldrb	r3, [r7, #11]
 8009274:	2b05      	cmp	r3, #5
 8009276:	f040 80ee 	bne.w	8009456 <HRTIM_DMATimerxCplt+0x21c>

  if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP1) != (uint32_t)RESET)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	7afb      	ldrb	r3, [r7, #11]
 8009280:	01db      	lsls	r3, r3, #7
 8009282:	4413      	add	r3, r2
 8009284:	338c      	adds	r3, #140	; 0x8c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <HRTIM_DMATimerxCplt+0x62>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, timer_idx);
 8009290:	7afb      	ldrb	r3, [r7, #11]
 8009292:	4619      	mov	r1, r3
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7ff fa23 	bl	80086e0 <HAL_HRTIM_Compare1EventCallback>
 800929a:	e0dd      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP2) != (uint32_t)RESET)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	01db      	lsls	r3, r3, #7
 80092a4:	4413      	add	r3, r2
 80092a6:	338c      	adds	r3, #140	; 0x8c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d005      	beq.n	80092be <HRTIM_DMATimerxCplt+0x84>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare2EventCallback(hrtim, timer_idx);
 80092b2:	7afb      	ldrb	r3, [r7, #11]
 80092b4:	4619      	mov	r1, r3
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f7ff fa1d 	bl	80086f6 <HAL_HRTIM_Compare2EventCallback>
 80092bc:	e0cc      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP3) != (uint32_t)RESET)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	7afb      	ldrb	r3, [r7, #11]
 80092c4:	01db      	lsls	r3, r3, #7
 80092c6:	4413      	add	r3, r2
 80092c8:	338c      	adds	r3, #140	; 0x8c
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d005      	beq.n	80092e0 <HRTIM_DMATimerxCplt+0xa6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare3EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare3EventCallback(hrtim, timer_idx);
 80092d4:	7afb      	ldrb	r3, [r7, #11]
 80092d6:	4619      	mov	r1, r3
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f7ff fa17 	bl	800870c <HAL_HRTIM_Compare3EventCallback>
 80092de:	e0bb      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP4) != (uint32_t)RESET)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	7afb      	ldrb	r3, [r7, #11]
 80092e6:	01db      	lsls	r3, r3, #7
 80092e8:	4413      	add	r3, r2
 80092ea:	338c      	adds	r3, #140	; 0x8c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d005      	beq.n	8009302 <HRTIM_DMATimerxCplt+0xc8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare4EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare4EventCallback(hrtim, timer_idx);
 80092f6:	7afb      	ldrb	r3, [r7, #11]
 80092f8:	4619      	mov	r1, r3
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff fa11 	bl	8008722 <HAL_HRTIM_Compare4EventCallback>
 8009300:	e0aa      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_UPD) != (uint32_t)RESET)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	7afb      	ldrb	r3, [r7, #11]
 8009308:	01db      	lsls	r3, r3, #7
 800930a:	4413      	add	r3, r2
 800930c:	338c      	adds	r3, #140	; 0x8c
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <HRTIM_DMATimerxCplt+0xea>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RegistersUpdateCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RegistersUpdateCallback(hrtim, timer_idx);
 8009318:	7afb      	ldrb	r3, [r7, #11]
 800931a:	4619      	mov	r1, r3
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f7ff f9c9 	bl	80086b4 <HAL_HRTIM_RegistersUpdateCallback>
 8009322:	e099      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT1) != (uint32_t)RESET)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	7afb      	ldrb	r3, [r7, #11]
 800932a:	01db      	lsls	r3, r3, #7
 800932c:	4413      	add	r3, r2
 800932e:	338c      	adds	r3, #140	; 0x8c
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d005      	beq.n	8009346 <HRTIM_DMATimerxCplt+0x10c>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture1EventCallback(hrtim, timer_idx);
 800933a:	7afb      	ldrb	r3, [r7, #11]
 800933c:	4619      	mov	r1, r3
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f7ff f9fa 	bl	8008738 <HAL_HRTIM_Capture1EventCallback>
 8009344:	e088      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT2) != (uint32_t)RESET)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	01db      	lsls	r3, r3, #7
 800934e:	4413      	add	r3, r2
 8009350:	338c      	adds	r3, #140	; 0x8c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d005      	beq.n	8009368 <HRTIM_DMATimerxCplt+0x12e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture2EventCallback(hrtim, timer_idx);
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	4619      	mov	r1, r3
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff f9f4 	bl	800874e <HAL_HRTIM_Capture2EventCallback>
 8009366:	e077      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET1) != (uint32_t)RESET)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	7afb      	ldrb	r3, [r7, #11]
 800936e:	01db      	lsls	r3, r3, #7
 8009370:	4413      	add	r3, r2
 8009372:	338c      	adds	r3, #140	; 0x8c
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d005      	beq.n	800938a <HRTIM_DMATimerxCplt+0x150>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1SetCallback(hrtim, timer_idx);
 800937e:	7afb      	ldrb	r3, [r7, #11]
 8009380:	4619      	mov	r1, r3
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff fa04 	bl	8008790 <HAL_HRTIM_Output1SetCallback>
 8009388:	e066      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST1) != (uint32_t)RESET)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	7afb      	ldrb	r3, [r7, #11]
 8009390:	01db      	lsls	r3, r3, #7
 8009392:	4413      	add	r3, r2
 8009394:	338c      	adds	r3, #140	; 0x8c
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <HRTIM_DMATimerxCplt+0x172>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1ResetCallback(hrtim, timer_idx);
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	4619      	mov	r1, r3
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f7ff f9fe 	bl	80087a6 <HAL_HRTIM_Output1ResetCallback>
 80093aa:	e055      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET2) != (uint32_t)RESET)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	7afb      	ldrb	r3, [r7, #11]
 80093b2:	01db      	lsls	r3, r3, #7
 80093b4:	4413      	add	r3, r2
 80093b6:	338c      	adds	r3, #140	; 0x8c
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d005      	beq.n	80093ce <HRTIM_DMATimerxCplt+0x194>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2SetCallback(hrtim, timer_idx);
 80093c2:	7afb      	ldrb	r3, [r7, #11]
 80093c4:	4619      	mov	r1, r3
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7ff f9f8 	bl	80087bc <HAL_HRTIM_Output2SetCallback>
 80093cc:	e044      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST2) != (uint32_t)RESET)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	7afb      	ldrb	r3, [r7, #11]
 80093d4:	01db      	lsls	r3, r3, #7
 80093d6:	4413      	add	r3, r2
 80093d8:	338c      	adds	r3, #140	; 0x8c
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <HRTIM_DMATimerxCplt+0x1b6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2ResetCallback(hrtim, timer_idx);
 80093e4:	7afb      	ldrb	r3, [r7, #11]
 80093e6:	4619      	mov	r1, r3
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f7ff f9f2 	bl	80087d2 <HAL_HRTIM_Output2ResetCallback>
 80093ee:	e033      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST) != (uint32_t)RESET)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	01db      	lsls	r3, r3, #7
 80093f8:	4413      	add	r3, r2
 80093fa:	338c      	adds	r3, #140	; 0x8c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d005      	beq.n	8009412 <HRTIM_DMATimerxCplt+0x1d8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->CounterResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_CounterResetCallback(hrtim, timer_idx);
 8009406:	7afb      	ldrb	r3, [r7, #11]
 8009408:	4619      	mov	r1, r3
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f7ff f9b5 	bl	800877a <HAL_HRTIM_CounterResetCallback>
 8009410:	e022      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_DLYPRT) != (uint32_t)RESET)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	7afb      	ldrb	r3, [r7, #11]
 8009418:	01db      	lsls	r3, r3, #7
 800941a:	4413      	add	r3, r2
 800941c:	338c      	adds	r3, #140	; 0x8c
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d005      	beq.n	8009434 <HRTIM_DMATimerxCplt+0x1fa>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->DelayedProtectionCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_DelayedProtectionCallback(hrtim, timer_idx);
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	4619      	mov	r1, r3
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f7ff f999 	bl	8008764 <HAL_HRTIM_DelayedProtectionCallback>
 8009432:	e011      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_REP) != (uint32_t)RESET)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	7afb      	ldrb	r3, [r7, #11]
 800943a:	01db      	lsls	r3, r3, #7
 800943c:	4413      	add	r3, r2
 800943e:	338c      	adds	r3, #140	; 0x8c
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d006      	beq.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RepetitionEventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RepetitionEventCallback(hrtim, timer_idx);
 800944a:	7afb      	ldrb	r3, [r7, #11]
 800944c:	4619      	mov	r1, r3
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f7ff f93b 	bl	80086ca <HAL_HRTIM_RepetitionEventCallback>
 8009454:	e000      	b.n	8009458 <HRTIM_DMATimerxCplt+0x21e>
  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 8009456:	bf00      	nop
  }
  else
  {
    /* nothing to do */
  }
}
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <HRTIM_DMAError>:
* @brief  DMA error callback
* @param  hdma pointer to DMA handle.
* @retval None
*/
static void HRTIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->ErrorCallback(hrtim);
#else
  HAL_HRTIM_ErrorCallback(hrtim);
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f7ff f9bb 	bl	80087e8 <HAL_HRTIM_ErrorCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
	...

0800947c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d141      	bne.n	800950e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800948a:	4b4b      	ldr	r3, [pc, #300]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009496:	d131      	bne.n	80094fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009498:	4b47      	ldr	r3, [pc, #284]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800949a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800949e:	4a46      	ldr	r2, [pc, #280]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80094a8:	4b43      	ldr	r3, [pc, #268]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80094b0:	4a41      	ldr	r2, [pc, #260]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80094b8:	4b40      	ldr	r3, [pc, #256]	; (80095bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2232      	movs	r2, #50	; 0x32
 80094be:	fb02 f303 	mul.w	r3, r2, r3
 80094c2:	4a3f      	ldr	r2, [pc, #252]	; (80095c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80094c4:	fba2 2303 	umull	r2, r3, r2, r3
 80094c8:	0c9b      	lsrs	r3, r3, #18
 80094ca:	3301      	adds	r3, #1
 80094cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80094ce:	e002      	b.n	80094d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80094d6:	4b38      	ldr	r3, [pc, #224]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094e2:	d102      	bne.n	80094ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1f2      	bne.n	80094d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80094ea:	4b33      	ldr	r3, [pc, #204]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094f6:	d158      	bne.n	80095aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e057      	b.n	80095ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80094fc:	4b2e      	ldr	r3, [pc, #184]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009502:	4a2d      	ldr	r2, [pc, #180]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009508:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800950c:	e04d      	b.n	80095aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009514:	d141      	bne.n	800959a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009516:	4b28      	ldr	r3, [pc, #160]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800951e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009522:	d131      	bne.n	8009588 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009524:	4b24      	ldr	r3, [pc, #144]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800952a:	4a23      	ldr	r2, [pc, #140]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800952c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009530:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009534:	4b20      	ldr	r3, [pc, #128]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800953c:	4a1e      	ldr	r2, [pc, #120]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800953e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009542:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009544:	4b1d      	ldr	r3, [pc, #116]	; (80095bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2232      	movs	r2, #50	; 0x32
 800954a:	fb02 f303 	mul.w	r3, r2, r3
 800954e:	4a1c      	ldr	r2, [pc, #112]	; (80095c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009550:	fba2 2303 	umull	r2, r3, r2, r3
 8009554:	0c9b      	lsrs	r3, r3, #18
 8009556:	3301      	adds	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800955a:	e002      	b.n	8009562 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	3b01      	subs	r3, #1
 8009560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009562:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009564:	695b      	ldr	r3, [r3, #20]
 8009566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800956a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800956e:	d102      	bne.n	8009576 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1f2      	bne.n	800955c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009576:	4b10      	ldr	r3, [pc, #64]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800957e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009582:	d112      	bne.n	80095aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009584:	2303      	movs	r3, #3
 8009586:	e011      	b.n	80095ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009588:	4b0b      	ldr	r3, [pc, #44]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800958a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800958e:	4a0a      	ldr	r2, [pc, #40]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009594:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009598:	e007      	b.n	80095aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800959a:	4b07      	ldr	r3, [pc, #28]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80095a2:	4a05      	ldr	r2, [pc, #20]	; (80095b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80095a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	40007000 	.word	0x40007000
 80095bc:	20000004 	.word	0x20000004
 80095c0:	431bde83 	.word	0x431bde83

080095c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80095c4:	b480      	push	{r7}
 80095c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	4a04      	ldr	r2, [pc, #16]	; (80095e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80095ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095d2:	6093      	str	r3, [r2, #8]
}
 80095d4:	bf00      	nop
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	40007000 	.word	0x40007000

080095e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b088      	sub	sp, #32
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e308      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d075      	beq.n	80096ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009602:	4ba3      	ldr	r3, [pc, #652]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f003 030c 	and.w	r3, r3, #12
 800960a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800960c:	4ba0      	ldr	r3, [pc, #640]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f003 0303 	and.w	r3, r3, #3
 8009614:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	2b0c      	cmp	r3, #12
 800961a:	d102      	bne.n	8009622 <HAL_RCC_OscConfig+0x3e>
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2b03      	cmp	r3, #3
 8009620:	d002      	beq.n	8009628 <HAL_RCC_OscConfig+0x44>
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	2b08      	cmp	r3, #8
 8009626:	d10b      	bne.n	8009640 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009628:	4b99      	ldr	r3, [pc, #612]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d05b      	beq.n	80096ec <HAL_RCC_OscConfig+0x108>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d157      	bne.n	80096ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e2e3      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009648:	d106      	bne.n	8009658 <HAL_RCC_OscConfig+0x74>
 800964a:	4b91      	ldr	r3, [pc, #580]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a90      	ldr	r2, [pc, #576]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	e01d      	b.n	8009694 <HAL_RCC_OscConfig+0xb0>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009660:	d10c      	bne.n	800967c <HAL_RCC_OscConfig+0x98>
 8009662:	4b8b      	ldr	r3, [pc, #556]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a8a      	ldr	r2, [pc, #552]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	4b88      	ldr	r3, [pc, #544]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a87      	ldr	r2, [pc, #540]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009678:	6013      	str	r3, [r2, #0]
 800967a:	e00b      	b.n	8009694 <HAL_RCC_OscConfig+0xb0>
 800967c:	4b84      	ldr	r3, [pc, #528]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a83      	ldr	r2, [pc, #524]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	4b81      	ldr	r3, [pc, #516]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a80      	ldr	r2, [pc, #512]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 800968e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d013      	beq.n	80096c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800969c:	f7fb fa06 	bl	8004aac <HAL_GetTick>
 80096a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096a2:	e008      	b.n	80096b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096a4:	f7fb fa02 	bl	8004aac <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	2b64      	cmp	r3, #100	; 0x64
 80096b0:	d901      	bls.n	80096b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e2a8      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096b6:	4b76      	ldr	r3, [pc, #472]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0f0      	beq.n	80096a4 <HAL_RCC_OscConfig+0xc0>
 80096c2:	e014      	b.n	80096ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096c4:	f7fb f9f2 	bl	8004aac <HAL_GetTick>
 80096c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80096ca:	e008      	b.n	80096de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096cc:	f7fb f9ee 	bl	8004aac <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	2b64      	cmp	r3, #100	; 0x64
 80096d8:	d901      	bls.n	80096de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	e294      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80096de:	4b6c      	ldr	r3, [pc, #432]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1f0      	bne.n	80096cc <HAL_RCC_OscConfig+0xe8>
 80096ea:	e000      	b.n	80096ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0302 	and.w	r3, r3, #2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d075      	beq.n	80097e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096fa:	4b65      	ldr	r3, [pc, #404]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f003 030c 	and.w	r3, r3, #12
 8009702:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009704:	4b62      	ldr	r3, [pc, #392]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	f003 0303 	and.w	r3, r3, #3
 800970c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	2b0c      	cmp	r3, #12
 8009712:	d102      	bne.n	800971a <HAL_RCC_OscConfig+0x136>
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	2b02      	cmp	r3, #2
 8009718:	d002      	beq.n	8009720 <HAL_RCC_OscConfig+0x13c>
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	2b04      	cmp	r3, #4
 800971e:	d11f      	bne.n	8009760 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009720:	4b5b      	ldr	r3, [pc, #364]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009728:	2b00      	cmp	r3, #0
 800972a:	d005      	beq.n	8009738 <HAL_RCC_OscConfig+0x154>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e267      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009738:	4b55      	ldr	r3, [pc, #340]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	061b      	lsls	r3, r3, #24
 8009746:	4952      	ldr	r1, [pc, #328]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009748:	4313      	orrs	r3, r2
 800974a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800974c:	4b51      	ldr	r3, [pc, #324]	; (8009894 <HAL_RCC_OscConfig+0x2b0>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4618      	mov	r0, r3
 8009752:	f7fb f95f 	bl	8004a14 <HAL_InitTick>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d043      	beq.n	80097e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e253      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d023      	beq.n	80097b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009768:	4b49      	ldr	r3, [pc, #292]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a48      	ldr	r2, [pc, #288]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 800976e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009774:	f7fb f99a 	bl	8004aac <HAL_GetTick>
 8009778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800977a:	e008      	b.n	800978e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800977c:	f7fb f996 	bl	8004aac <HAL_GetTick>
 8009780:	4602      	mov	r2, r0
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	2b02      	cmp	r3, #2
 8009788:	d901      	bls.n	800978e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e23c      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800978e:	4b40      	ldr	r3, [pc, #256]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0f0      	beq.n	800977c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800979a:	4b3d      	ldr	r3, [pc, #244]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	061b      	lsls	r3, r3, #24
 80097a8:	4939      	ldr	r1, [pc, #228]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	604b      	str	r3, [r1, #4]
 80097ae:	e01a      	b.n	80097e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097b0:	4b37      	ldr	r3, [pc, #220]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a36      	ldr	r2, [pc, #216]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 80097b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097bc:	f7fb f976 	bl	8004aac <HAL_GetTick>
 80097c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097c2:	e008      	b.n	80097d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097c4:	f7fb f972 	bl	8004aac <HAL_GetTick>
 80097c8:	4602      	mov	r2, r0
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d901      	bls.n	80097d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e218      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097d6:	4b2e      	ldr	r3, [pc, #184]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1f0      	bne.n	80097c4 <HAL_RCC_OscConfig+0x1e0>
 80097e2:	e000      	b.n	80097e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0308 	and.w	r3, r3, #8
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d03c      	beq.n	800986c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d01c      	beq.n	8009834 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097fa:	4b25      	ldr	r3, [pc, #148]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 80097fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009800:	4a23      	ldr	r2, [pc, #140]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009802:	f043 0301 	orr.w	r3, r3, #1
 8009806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800980a:	f7fb f94f 	bl	8004aac <HAL_GetTick>
 800980e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009810:	e008      	b.n	8009824 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009812:	f7fb f94b 	bl	8004aac <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	2b02      	cmp	r3, #2
 800981e:	d901      	bls.n	8009824 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e1f1      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009824:	4b1a      	ldr	r3, [pc, #104]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800982a:	f003 0302 	and.w	r3, r3, #2
 800982e:	2b00      	cmp	r3, #0
 8009830:	d0ef      	beq.n	8009812 <HAL_RCC_OscConfig+0x22e>
 8009832:	e01b      	b.n	800986c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009834:	4b16      	ldr	r3, [pc, #88]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800983a:	4a15      	ldr	r2, [pc, #84]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 800983c:	f023 0301 	bic.w	r3, r3, #1
 8009840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009844:	f7fb f932 	bl	8004aac <HAL_GetTick>
 8009848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800984a:	e008      	b.n	800985e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800984c:	f7fb f92e 	bl	8004aac <HAL_GetTick>
 8009850:	4602      	mov	r2, r0
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	2b02      	cmp	r3, #2
 8009858:	d901      	bls.n	800985e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	e1d4      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800985e:	4b0c      	ldr	r3, [pc, #48]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009864:	f003 0302 	and.w	r3, r3, #2
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1ef      	bne.n	800984c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 0304 	and.w	r3, r3, #4
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 80ab 	beq.w	80099d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800987a:	2300      	movs	r3, #0
 800987c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800987e:	4b04      	ldr	r3, [pc, #16]	; (8009890 <HAL_RCC_OscConfig+0x2ac>)
 8009880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <HAL_RCC_OscConfig+0x2b4>
 800988a:	2301      	movs	r3, #1
 800988c:	e005      	b.n	800989a <HAL_RCC_OscConfig+0x2b6>
 800988e:	bf00      	nop
 8009890:	40021000 	.word	0x40021000
 8009894:	20000008 	.word	0x20000008
 8009898:	2300      	movs	r3, #0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00d      	beq.n	80098ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800989e:	4baf      	ldr	r3, [pc, #700]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 80098a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a2:	4aae      	ldr	r2, [pc, #696]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 80098a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098a8:	6593      	str	r3, [r2, #88]	; 0x58
 80098aa:	4bac      	ldr	r3, [pc, #688]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 80098ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80098b6:	2301      	movs	r3, #1
 80098b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098ba:	4ba9      	ldr	r3, [pc, #676]	; (8009b60 <HAL_RCC_OscConfig+0x57c>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d118      	bne.n	80098f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098c6:	4ba6      	ldr	r3, [pc, #664]	; (8009b60 <HAL_RCC_OscConfig+0x57c>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4aa5      	ldr	r2, [pc, #660]	; (8009b60 <HAL_RCC_OscConfig+0x57c>)
 80098cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098d2:	f7fb f8eb 	bl	8004aac <HAL_GetTick>
 80098d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098d8:	e008      	b.n	80098ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098da:	f7fb f8e7 	bl	8004aac <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d901      	bls.n	80098ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e18d      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098ec:	4b9c      	ldr	r3, [pc, #624]	; (8009b60 <HAL_RCC_OscConfig+0x57c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d0f0      	beq.n	80098da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d108      	bne.n	8009912 <HAL_RCC_OscConfig+0x32e>
 8009900:	4b96      	ldr	r3, [pc, #600]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009906:	4a95      	ldr	r2, [pc, #596]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009908:	f043 0301 	orr.w	r3, r3, #1
 800990c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009910:	e024      	b.n	800995c <HAL_RCC_OscConfig+0x378>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	2b05      	cmp	r3, #5
 8009918:	d110      	bne.n	800993c <HAL_RCC_OscConfig+0x358>
 800991a:	4b90      	ldr	r3, [pc, #576]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 800991c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009920:	4a8e      	ldr	r2, [pc, #568]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009922:	f043 0304 	orr.w	r3, r3, #4
 8009926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800992a:	4b8c      	ldr	r3, [pc, #560]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 800992c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009930:	4a8a      	ldr	r2, [pc, #552]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009932:	f043 0301 	orr.w	r3, r3, #1
 8009936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800993a:	e00f      	b.n	800995c <HAL_RCC_OscConfig+0x378>
 800993c:	4b87      	ldr	r3, [pc, #540]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 800993e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009942:	4a86      	ldr	r2, [pc, #536]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009944:	f023 0301 	bic.w	r3, r3, #1
 8009948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800994c:	4b83      	ldr	r3, [pc, #524]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 800994e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009952:	4a82      	ldr	r2, [pc, #520]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009954:	f023 0304 	bic.w	r3, r3, #4
 8009958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d016      	beq.n	8009992 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009964:	f7fb f8a2 	bl	8004aac <HAL_GetTick>
 8009968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800996a:	e00a      	b.n	8009982 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800996c:	f7fb f89e 	bl	8004aac <HAL_GetTick>
 8009970:	4602      	mov	r2, r0
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	f241 3288 	movw	r2, #5000	; 0x1388
 800997a:	4293      	cmp	r3, r2
 800997c:	d901      	bls.n	8009982 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	e142      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009982:	4b76      	ldr	r3, [pc, #472]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009988:	f003 0302 	and.w	r3, r3, #2
 800998c:	2b00      	cmp	r3, #0
 800998e:	d0ed      	beq.n	800996c <HAL_RCC_OscConfig+0x388>
 8009990:	e015      	b.n	80099be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009992:	f7fb f88b 	bl	8004aac <HAL_GetTick>
 8009996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009998:	e00a      	b.n	80099b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800999a:	f7fb f887 	bl	8004aac <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d901      	bls.n	80099b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e12b      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80099b0:	4b6a      	ldr	r3, [pc, #424]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 80099b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1ed      	bne.n	800999a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80099be:	7ffb      	ldrb	r3, [r7, #31]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d105      	bne.n	80099d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099c4:	4b65      	ldr	r3, [pc, #404]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 80099c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c8:	4a64      	ldr	r2, [pc, #400]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 80099ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0320 	and.w	r3, r3, #32
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d03c      	beq.n	8009a56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d01c      	beq.n	8009a1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80099e4:	4b5d      	ldr	r3, [pc, #372]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 80099e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099ea:	4a5c      	ldr	r2, [pc, #368]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 80099ec:	f043 0301 	orr.w	r3, r3, #1
 80099f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099f4:	f7fb f85a 	bl	8004aac <HAL_GetTick>
 80099f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80099fa:	e008      	b.n	8009a0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80099fc:	f7fb f856 	bl	8004aac <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d901      	bls.n	8009a0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e0fc      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009a0e:	4b53      	ldr	r3, [pc, #332]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a14:	f003 0302 	and.w	r3, r3, #2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d0ef      	beq.n	80099fc <HAL_RCC_OscConfig+0x418>
 8009a1c:	e01b      	b.n	8009a56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009a1e:	4b4f      	ldr	r3, [pc, #316]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a24:	4a4d      	ldr	r2, [pc, #308]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009a26:	f023 0301 	bic.w	r3, r3, #1
 8009a2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a2e:	f7fb f83d 	bl	8004aac <HAL_GetTick>
 8009a32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009a34:	e008      	b.n	8009a48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009a36:	f7fb f839 	bl	8004aac <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d901      	bls.n	8009a48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e0df      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009a48:	4b44      	ldr	r3, [pc, #272]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a4e:	f003 0302 	and.w	r3, r3, #2
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1ef      	bne.n	8009a36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	69db      	ldr	r3, [r3, #28]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 80d3 	beq.w	8009c06 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a60:	4b3e      	ldr	r3, [pc, #248]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f003 030c 	and.w	r3, r3, #12
 8009a68:	2b0c      	cmp	r3, #12
 8009a6a:	f000 808d 	beq.w	8009b88 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d15a      	bne.n	8009b2c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a76:	4b39      	ldr	r3, [pc, #228]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a38      	ldr	r2, [pc, #224]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a82:	f7fb f813 	bl	8004aac <HAL_GetTick>
 8009a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a88:	e008      	b.n	8009a9c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a8a:	f7fb f80f 	bl	8004aac <HAL_GetTick>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d901      	bls.n	8009a9c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e0b5      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a9c:	4b2f      	ldr	r3, [pc, #188]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1f0      	bne.n	8009a8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009aa8:	4b2c      	ldr	r3, [pc, #176]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009aaa:	68da      	ldr	r2, [r3, #12]
 8009aac:	4b2d      	ldr	r3, [pc, #180]	; (8009b64 <HAL_RCC_OscConfig+0x580>)
 8009aae:	4013      	ands	r3, r2
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	6a11      	ldr	r1, [r2, #32]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ab8:	3a01      	subs	r2, #1
 8009aba:	0112      	lsls	r2, r2, #4
 8009abc:	4311      	orrs	r1, r2
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009ac2:	0212      	lsls	r2, r2, #8
 8009ac4:	4311      	orrs	r1, r2
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009aca:	0852      	lsrs	r2, r2, #1
 8009acc:	3a01      	subs	r2, #1
 8009ace:	0552      	lsls	r2, r2, #21
 8009ad0:	4311      	orrs	r1, r2
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ad6:	0852      	lsrs	r2, r2, #1
 8009ad8:	3a01      	subs	r2, #1
 8009ada:	0652      	lsls	r2, r2, #25
 8009adc:	4311      	orrs	r1, r2
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ae2:	06d2      	lsls	r2, r2, #27
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	491d      	ldr	r1, [pc, #116]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009aec:	4b1b      	ldr	r3, [pc, #108]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a1a      	ldr	r2, [pc, #104]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009af6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009af8:	4b18      	ldr	r3, [pc, #96]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	4a17      	ldr	r2, [pc, #92]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b04:	f7fa ffd2 	bl	8004aac <HAL_GetTick>
 8009b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b0a:	e008      	b.n	8009b1e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b0c:	f7fa ffce 	bl	8004aac <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d901      	bls.n	8009b1e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e074      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b1e:	4b0f      	ldr	r3, [pc, #60]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0f0      	beq.n	8009b0c <HAL_RCC_OscConfig+0x528>
 8009b2a:	e06c      	b.n	8009c06 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b2c:	4b0b      	ldr	r3, [pc, #44]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b36:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009b38:	4b08      	ldr	r3, [pc, #32]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	4a07      	ldr	r2, [pc, #28]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009b3e:	f023 0303 	bic.w	r3, r3, #3
 8009b42:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009b44:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	4a04      	ldr	r2, [pc, #16]	; (8009b5c <HAL_RCC_OscConfig+0x578>)
 8009b4a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b54:	f7fa ffaa 	bl	8004aac <HAL_GetTick>
 8009b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b5a:	e00e      	b.n	8009b7a <HAL_RCC_OscConfig+0x596>
 8009b5c:	40021000 	.word	0x40021000
 8009b60:	40007000 	.word	0x40007000
 8009b64:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b68:	f7fa ffa0 	bl	8004aac <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d901      	bls.n	8009b7a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e046      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b7a:	4b25      	ldr	r3, [pc, #148]	; (8009c10 <HAL_RCC_OscConfig+0x62c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1f0      	bne.n	8009b68 <HAL_RCC_OscConfig+0x584>
 8009b86:	e03e      	b.n	8009c06 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	69db      	ldr	r3, [r3, #28]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d101      	bne.n	8009b94 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e039      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009b94:	4b1e      	ldr	r3, [pc, #120]	; (8009c10 <HAL_RCC_OscConfig+0x62c>)
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f003 0203 	and.w	r2, r3, #3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a1b      	ldr	r3, [r3, #32]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d12c      	bne.n	8009c02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d123      	bne.n	8009c02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d11b      	bne.n	8009c02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d113      	bne.n	8009c02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be4:	085b      	lsrs	r3, r3, #1
 8009be6:	3b01      	subs	r3, #1
 8009be8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d109      	bne.n	8009c02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf8:	085b      	lsrs	r3, r3, #1
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d001      	beq.n	8009c06 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e000      	b.n	8009c08 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3720      	adds	r7, #32
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	40021000 	.word	0x40021000

08009c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d101      	bne.n	8009c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e11e      	b.n	8009e6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c2c:	4b91      	ldr	r3, [pc, #580]	; (8009e74 <HAL_RCC_ClockConfig+0x260>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 030f 	and.w	r3, r3, #15
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d910      	bls.n	8009c5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c3a:	4b8e      	ldr	r3, [pc, #568]	; (8009e74 <HAL_RCC_ClockConfig+0x260>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f023 020f 	bic.w	r2, r3, #15
 8009c42:	498c      	ldr	r1, [pc, #560]	; (8009e74 <HAL_RCC_ClockConfig+0x260>)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c4a:	4b8a      	ldr	r3, [pc, #552]	; (8009e74 <HAL_RCC_ClockConfig+0x260>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 030f 	and.w	r3, r3, #15
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d001      	beq.n	8009c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e106      	b.n	8009e6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0301 	and.w	r3, r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d073      	beq.n	8009d50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d129      	bne.n	8009cc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c70:	4b81      	ldr	r3, [pc, #516]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e0f4      	b.n	8009e6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009c80:	f000 f988 	bl	8009f94 <RCC_GetSysClockFreqFromPLLSource>
 8009c84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	4a7c      	ldr	r2, [pc, #496]	; (8009e7c <HAL_RCC_ClockConfig+0x268>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d93f      	bls.n	8009d0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009c8e:	4b7a      	ldr	r3, [pc, #488]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d009      	beq.n	8009cae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d033      	beq.n	8009d0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d12f      	bne.n	8009d0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009cae:	4b72      	ldr	r3, [pc, #456]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cb6:	4a70      	ldr	r2, [pc, #448]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009cbe:	2380      	movs	r3, #128	; 0x80
 8009cc0:	617b      	str	r3, [r7, #20]
 8009cc2:	e024      	b.n	8009d0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d107      	bne.n	8009cdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ccc:	4b6a      	ldr	r3, [pc, #424]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d109      	bne.n	8009cec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e0c6      	b.n	8009e6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009cdc:	4b66      	ldr	r3, [pc, #408]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d101      	bne.n	8009cec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e0be      	b.n	8009e6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009cec:	f000 f8ce 	bl	8009e8c <HAL_RCC_GetSysClockFreq>
 8009cf0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	4a61      	ldr	r2, [pc, #388]	; (8009e7c <HAL_RCC_ClockConfig+0x268>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d909      	bls.n	8009d0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009cfa:	4b5f      	ldr	r3, [pc, #380]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d02:	4a5d      	ldr	r2, [pc, #372]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009d0a:	2380      	movs	r3, #128	; 0x80
 8009d0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d0e:	4b5a      	ldr	r3, [pc, #360]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f023 0203 	bic.w	r2, r3, #3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	4957      	ldr	r1, [pc, #348]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d20:	f7fa fec4 	bl	8004aac <HAL_GetTick>
 8009d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d26:	e00a      	b.n	8009d3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d28:	f7fa fec0 	bl	8004aac <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d901      	bls.n	8009d3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e095      	b.n	8009e6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d3e:	4b4e      	ldr	r3, [pc, #312]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	f003 020c 	and.w	r2, r3, #12
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d1eb      	bne.n	8009d28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d023      	beq.n	8009da4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d005      	beq.n	8009d74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d68:	4b43      	ldr	r3, [pc, #268]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	4a42      	ldr	r2, [pc, #264]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009d6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009d72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0308 	and.w	r3, r3, #8
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d007      	beq.n	8009d90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009d80:	4b3d      	ldr	r3, [pc, #244]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d88:	4a3b      	ldr	r2, [pc, #236]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009d8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009d8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d90:	4b39      	ldr	r3, [pc, #228]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	4936      	ldr	r1, [pc, #216]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	608b      	str	r3, [r1, #8]
 8009da2:	e008      	b.n	8009db6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2b80      	cmp	r3, #128	; 0x80
 8009da8:	d105      	bne.n	8009db6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009daa:	4b33      	ldr	r3, [pc, #204]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	4a32      	ldr	r2, [pc, #200]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009db4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009db6:	4b2f      	ldr	r3, [pc, #188]	; (8009e74 <HAL_RCC_ClockConfig+0x260>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 030f 	and.w	r3, r3, #15
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d21d      	bcs.n	8009e00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dc4:	4b2b      	ldr	r3, [pc, #172]	; (8009e74 <HAL_RCC_ClockConfig+0x260>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f023 020f 	bic.w	r2, r3, #15
 8009dcc:	4929      	ldr	r1, [pc, #164]	; (8009e74 <HAL_RCC_ClockConfig+0x260>)
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009dd4:	f7fa fe6a 	bl	8004aac <HAL_GetTick>
 8009dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dda:	e00a      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ddc:	f7fa fe66 	bl	8004aac <HAL_GetTick>
 8009de0:	4602      	mov	r2, r0
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d901      	bls.n	8009df2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e03b      	b.n	8009e6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009df2:	4b20      	ldr	r3, [pc, #128]	; (8009e74 <HAL_RCC_ClockConfig+0x260>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 030f 	and.w	r3, r3, #15
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d1ed      	bne.n	8009ddc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0304 	and.w	r3, r3, #4
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d008      	beq.n	8009e1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e0c:	4b1a      	ldr	r3, [pc, #104]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	4917      	ldr	r1, [pc, #92]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0308 	and.w	r3, r3, #8
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d009      	beq.n	8009e3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e2a:	4b13      	ldr	r3, [pc, #76]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	00db      	lsls	r3, r3, #3
 8009e38:	490f      	ldr	r1, [pc, #60]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009e3e:	f000 f825 	bl	8009e8c <HAL_RCC_GetSysClockFreq>
 8009e42:	4601      	mov	r1, r0
 8009e44:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <HAL_RCC_ClockConfig+0x264>)
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	091b      	lsrs	r3, r3, #4
 8009e4a:	f003 030f 	and.w	r3, r3, #15
 8009e4e:	4a0c      	ldr	r2, [pc, #48]	; (8009e80 <HAL_RCC_ClockConfig+0x26c>)
 8009e50:	5cd3      	ldrb	r3, [r2, r3]
 8009e52:	f003 031f 	and.w	r3, r3, #31
 8009e56:	fa21 f303 	lsr.w	r3, r1, r3
 8009e5a:	4a0a      	ldr	r2, [pc, #40]	; (8009e84 <HAL_RCC_ClockConfig+0x270>)
 8009e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009e5e:	4b0a      	ldr	r3, [pc, #40]	; (8009e88 <HAL_RCC_ClockConfig+0x274>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fa fdd6 	bl	8004a14 <HAL_InitTick>
 8009e68:	4603      	mov	r3, r0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	40022000 	.word	0x40022000
 8009e78:	40021000 	.word	0x40021000
 8009e7c:	04c4b400 	.word	0x04c4b400
 8009e80:	0800bb28 	.word	0x0800bb28
 8009e84:	20000004 	.word	0x20000004
 8009e88:	20000008 	.word	0x20000008

08009e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009e92:	4b2c      	ldr	r3, [pc, #176]	; (8009f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f003 030c 	and.w	r3, r3, #12
 8009e9a:	2b04      	cmp	r3, #4
 8009e9c:	d102      	bne.n	8009ea4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009e9e:	4b2a      	ldr	r3, [pc, #168]	; (8009f48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009ea0:	613b      	str	r3, [r7, #16]
 8009ea2:	e047      	b.n	8009f34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009ea4:	4b27      	ldr	r3, [pc, #156]	; (8009f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f003 030c 	and.w	r3, r3, #12
 8009eac:	2b08      	cmp	r3, #8
 8009eae:	d102      	bne.n	8009eb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009eb0:	4b26      	ldr	r3, [pc, #152]	; (8009f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009eb2:	613b      	str	r3, [r7, #16]
 8009eb4:	e03e      	b.n	8009f34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009eb6:	4b23      	ldr	r3, [pc, #140]	; (8009f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	f003 030c 	and.w	r3, r3, #12
 8009ebe:	2b0c      	cmp	r3, #12
 8009ec0:	d136      	bne.n	8009f30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009ec2:	4b20      	ldr	r3, [pc, #128]	; (8009f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f003 0303 	and.w	r3, r3, #3
 8009eca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009ecc:	4b1d      	ldr	r3, [pc, #116]	; (8009f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	091b      	lsrs	r3, r3, #4
 8009ed2:	f003 030f 	and.w	r3, r3, #15
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b03      	cmp	r3, #3
 8009ede:	d10c      	bne.n	8009efa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ee0:	4a1a      	ldr	r2, [pc, #104]	; (8009f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee8:	4a16      	ldr	r2, [pc, #88]	; (8009f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009eea:	68d2      	ldr	r2, [r2, #12]
 8009eec:	0a12      	lsrs	r2, r2, #8
 8009eee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009ef2:	fb02 f303 	mul.w	r3, r2, r3
 8009ef6:	617b      	str	r3, [r7, #20]
      break;
 8009ef8:	e00c      	b.n	8009f14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009efa:	4a13      	ldr	r2, [pc, #76]	; (8009f48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f02:	4a10      	ldr	r2, [pc, #64]	; (8009f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f04:	68d2      	ldr	r2, [r2, #12]
 8009f06:	0a12      	lsrs	r2, r2, #8
 8009f08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009f0c:	fb02 f303 	mul.w	r3, r2, r3
 8009f10:	617b      	str	r3, [r7, #20]
      break;
 8009f12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009f14:	4b0b      	ldr	r3, [pc, #44]	; (8009f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	0e5b      	lsrs	r3, r3, #25
 8009f1a:	f003 0303 	and.w	r3, r3, #3
 8009f1e:	3301      	adds	r3, #1
 8009f20:	005b      	lsls	r3, r3, #1
 8009f22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f2c:	613b      	str	r3, [r7, #16]
 8009f2e:	e001      	b.n	8009f34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009f30:	2300      	movs	r3, #0
 8009f32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009f34:	693b      	ldr	r3, [r7, #16]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	371c      	adds	r7, #28
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	40021000 	.word	0x40021000
 8009f48:	00f42400 	.word	0x00f42400
 8009f4c:	007a1200 	.word	0x007a1200

08009f50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f50:	b480      	push	{r7}
 8009f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f54:	4b03      	ldr	r3, [pc, #12]	; (8009f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f56:	681b      	ldr	r3, [r3, #0]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	20000004 	.word	0x20000004

08009f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009f6c:	f7ff fff0 	bl	8009f50 <HAL_RCC_GetHCLKFreq>
 8009f70:	4601      	mov	r1, r0
 8009f72:	4b06      	ldr	r3, [pc, #24]	; (8009f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	0adb      	lsrs	r3, r3, #11
 8009f78:	f003 0307 	and.w	r3, r3, #7
 8009f7c:	4a04      	ldr	r2, [pc, #16]	; (8009f90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009f7e:	5cd3      	ldrb	r3, [r2, r3]
 8009f80:	f003 031f 	and.w	r3, r3, #31
 8009f84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	40021000 	.word	0x40021000
 8009f90:	0800bb38 	.word	0x0800bb38

08009f94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009f9a:	4b1e      	ldr	r3, [pc, #120]	; (800a014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009fa4:	4b1b      	ldr	r3, [pc, #108]	; (800a014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	091b      	lsrs	r3, r3, #4
 8009faa:	f003 030f 	and.w	r3, r3, #15
 8009fae:	3301      	adds	r3, #1
 8009fb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	2b03      	cmp	r3, #3
 8009fb6:	d10c      	bne.n	8009fd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009fb8:	4a17      	ldr	r2, [pc, #92]	; (800a018 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc0:	4a14      	ldr	r2, [pc, #80]	; (800a014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009fc2:	68d2      	ldr	r2, [r2, #12]
 8009fc4:	0a12      	lsrs	r2, r2, #8
 8009fc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009fca:	fb02 f303 	mul.w	r3, r2, r3
 8009fce:	617b      	str	r3, [r7, #20]
    break;
 8009fd0:	e00c      	b.n	8009fec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009fd2:	4a12      	ldr	r2, [pc, #72]	; (800a01c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fda:	4a0e      	ldr	r2, [pc, #56]	; (800a014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009fdc:	68d2      	ldr	r2, [r2, #12]
 8009fde:	0a12      	lsrs	r2, r2, #8
 8009fe0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009fe4:	fb02 f303 	mul.w	r3, r2, r3
 8009fe8:	617b      	str	r3, [r7, #20]
    break;
 8009fea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009fec:	4b09      	ldr	r3, [pc, #36]	; (800a014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	0e5b      	lsrs	r3, r3, #25
 8009ff2:	f003 0303 	and.w	r3, r3, #3
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	005b      	lsls	r3, r3, #1
 8009ffa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	fbb2 f3f3 	udiv	r3, r2, r3
 800a004:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a006:	687b      	ldr	r3, [r7, #4]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	371c      	adds	r7, #28
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	40021000 	.word	0x40021000
 800a018:	007a1200 	.word	0x007a1200
 800a01c:	00f42400 	.word	0x00f42400

0800a020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a028:	2300      	movs	r3, #0
 800a02a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a02c:	2300      	movs	r3, #0
 800a02e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 8098 	beq.w	800a16e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a03e:	2300      	movs	r3, #0
 800a040:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a042:	4b43      	ldr	r3, [pc, #268]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10d      	bne.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a04e:	4b40      	ldr	r3, [pc, #256]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a052:	4a3f      	ldr	r2, [pc, #252]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a058:	6593      	str	r3, [r2, #88]	; 0x58
 800a05a:	4b3d      	ldr	r3, [pc, #244]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a05c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a05e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a062:	60bb      	str	r3, [r7, #8]
 800a064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a066:	2301      	movs	r3, #1
 800a068:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a06a:	4b3a      	ldr	r3, [pc, #232]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a39      	ldr	r2, [pc, #228]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a074:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a076:	f7fa fd19 	bl	8004aac <HAL_GetTick>
 800a07a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a07c:	e009      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a07e:	f7fa fd15 	bl	8004aac <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d902      	bls.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	74fb      	strb	r3, [r7, #19]
        break;
 800a090:	e005      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a092:	4b30      	ldr	r3, [pc, #192]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0ef      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a09e:	7cfb      	ldrb	r3, [r7, #19]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d159      	bne.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a0a4:	4b2a      	ldr	r3, [pc, #168]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d01e      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d019      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a0c0:	4b23      	ldr	r3, [pc, #140]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a0cc:	4b20      	ldr	r3, [pc, #128]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0d2:	4a1f      	ldr	r2, [pc, #124]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a0dc:	4b1c      	ldr	r3, [pc, #112]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0e2:	4a1b      	ldr	r2, [pc, #108]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a0ec:	4a18      	ldr	r2, [pc, #96]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f003 0301 	and.w	r3, r3, #1
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d016      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0fe:	f7fa fcd5 	bl	8004aac <HAL_GetTick>
 800a102:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a104:	e00b      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a106:	f7fa fcd1 	bl	8004aac <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	f241 3288 	movw	r2, #5000	; 0x1388
 800a114:	4293      	cmp	r3, r2
 800a116:	d902      	bls.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	74fb      	strb	r3, [r7, #19]
            break;
 800a11c:	e006      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a11e:	4b0c      	ldr	r3, [pc, #48]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a124:	f003 0302 	and.w	r3, r3, #2
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0ec      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a12c:	7cfb      	ldrb	r3, [r7, #19]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10b      	bne.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a132:	4b07      	ldr	r3, [pc, #28]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a140:	4903      	ldr	r1, [pc, #12]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a142:	4313      	orrs	r3, r2
 800a144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a148:	e008      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a14a:	7cfb      	ldrb	r3, [r7, #19]
 800a14c:	74bb      	strb	r3, [r7, #18]
 800a14e:	e005      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a150:	40021000 	.word	0x40021000
 800a154:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a158:	7cfb      	ldrb	r3, [r7, #19]
 800a15a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a15c:	7c7b      	ldrb	r3, [r7, #17]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d105      	bne.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a162:	4baf      	ldr	r3, [pc, #700]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a166:	4aae      	ldr	r2, [pc, #696]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a16c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a17a:	4ba9      	ldr	r3, [pc, #676]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a180:	f023 0203 	bic.w	r2, r3, #3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	49a5      	ldr	r1, [pc, #660]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a18a:	4313      	orrs	r3, r2
 800a18c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0302 	and.w	r3, r3, #2
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00a      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a19c:	4ba0      	ldr	r3, [pc, #640]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a2:	f023 020c 	bic.w	r2, r3, #12
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	499d      	ldr	r1, [pc, #628]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 0304 	and.w	r3, r3, #4
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00a      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a1be:	4b98      	ldr	r3, [pc, #608]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	4994      	ldr	r1, [pc, #592]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 0308 	and.w	r3, r3, #8
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00a      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a1e0:	4b8f      	ldr	r3, [pc, #572]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	498c      	ldr	r1, [pc, #560]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 0310 	and.w	r3, r3, #16
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00a      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a202:	4b87      	ldr	r3, [pc, #540]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	4983      	ldr	r1, [pc, #524]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a212:	4313      	orrs	r3, r2
 800a214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 0320 	and.w	r3, r3, #32
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00a      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a224:	4b7e      	ldr	r3, [pc, #504]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a22a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	497b      	ldr	r1, [pc, #492]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a234:	4313      	orrs	r3, r2
 800a236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00a      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a246:	4b76      	ldr	r3, [pc, #472]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a24c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	69db      	ldr	r3, [r3, #28]
 800a254:	4972      	ldr	r1, [pc, #456]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a256:	4313      	orrs	r3, r2
 800a258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00a      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a268:	4b6d      	ldr	r3, [pc, #436]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a26a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a26e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	496a      	ldr	r1, [pc, #424]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a278:	4313      	orrs	r3, r2
 800a27a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a28a:	4b65      	ldr	r3, [pc, #404]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	4961      	ldr	r1, [pc, #388]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00a      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a2ac:	4b5c      	ldr	r3, [pc, #368]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a2ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2b2:	f023 0203 	bic.w	r2, r3, #3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ba:	4959      	ldr	r1, [pc, #356]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2ce:	4b54      	ldr	r3, [pc, #336]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2dc:	4950      	ldr	r1, [pc, #320]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d015      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a2f0:	4b4b      	ldr	r3, [pc, #300]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fe:	4948      	ldr	r1, [pc, #288]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a300:	4313      	orrs	r3, r2
 800a302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a30a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a30e:	d105      	bne.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a310:	4b43      	ldr	r3, [pc, #268]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	4a42      	ldr	r2, [pc, #264]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a31a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a324:	2b00      	cmp	r3, #0
 800a326:	d015      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a328:	4b3d      	ldr	r3, [pc, #244]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a32e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a336:	493a      	ldr	r1, [pc, #232]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a346:	d105      	bne.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a348:	4b35      	ldr	r3, [pc, #212]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	4a34      	ldr	r2, [pc, #208]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a34e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a352:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d015      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a360:	4b2f      	ldr	r3, [pc, #188]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a366:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36e:	492c      	ldr	r1, [pc, #176]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a370:	4313      	orrs	r3, r2
 800a372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a37e:	d105      	bne.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a380:	4b27      	ldr	r3, [pc, #156]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	4a26      	ldr	r2, [pc, #152]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a38a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d015      	beq.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a398:	4b21      	ldr	r3, [pc, #132]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a6:	491e      	ldr	r1, [pc, #120]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3b6:	d105      	bne.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3b8:	4b19      	ldr	r3, [pc, #100]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	4a18      	ldr	r2, [pc, #96]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a3be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d015      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3d0:	4b13      	ldr	r3, [pc, #76]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a3d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3de:	4910      	ldr	r1, [pc, #64]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3ee:	d105      	bne.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3f0:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	4a0a      	ldr	r2, [pc, #40]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a3f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d018      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a408:	4b05      	ldr	r3, [pc, #20]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a40e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a416:	4902      	ldr	r1, [pc, #8]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a418:	4313      	orrs	r3, r2
 800a41a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a41e:	e001      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800a420:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a428:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a42c:	d105      	bne.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a42e:	4b21      	ldr	r3, [pc, #132]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	4a20      	ldr	r2, [pc, #128]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a438:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d015      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a446:	4b1b      	ldr	r3, [pc, #108]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a44c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a454:	4917      	ldr	r1, [pc, #92]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a456:	4313      	orrs	r3, r2
 800a458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a464:	d105      	bne.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a466:	4b13      	ldr	r3, [pc, #76]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	4a12      	ldr	r2, [pc, #72]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a46c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a470:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d015      	beq.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a47e:	4b0d      	ldr	r3, [pc, #52]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a480:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a48c:	4909      	ldr	r1, [pc, #36]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a49c:	d105      	bne.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a49e:	4b05      	ldr	r3, [pc, #20]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	4a04      	ldr	r2, [pc, #16]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a4a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4a8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a4aa:	7cbb      	ldrb	r3, [r7, #18]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	40021000 	.word	0x40021000

0800a4b8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e027      	b.n	800a51a <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	7a5b      	ldrb	r3, [r3, #9]
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d105      	bne.n	800a4e0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7f9 ffe8 	bl	80044b0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f023 0108 	bic.w	r1, r3, #8
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f042 0204 	orr.w	r2, r2, #4
 800a50a:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b082      	sub	sp, #8
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e049      	b.n	800a5c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d106      	bne.n	800a54e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7fa f9b1 	bl	80048b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2202      	movs	r2, #2
 800a552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	3304      	adds	r3, #4
 800a55e:	4619      	mov	r1, r3
 800a560:	4610      	mov	r0, r2
 800a562:	f000 fc57 	bl	800ae14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d001      	beq.n	800a5e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e054      	b.n	800a692 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68da      	ldr	r2, [r3, #12]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f042 0201 	orr.w	r2, r2, #1
 800a5fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a26      	ldr	r2, [pc, #152]	; (800a6a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d022      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x80>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a612:	d01d      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x80>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a22      	ldr	r2, [pc, #136]	; (800a6a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d018      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x80>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a21      	ldr	r2, [pc, #132]	; (800a6a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d013      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x80>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a1f      	ldr	r2, [pc, #124]	; (800a6ac <HAL_TIM_Base_Start_IT+0xdc>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d00e      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x80>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a1e      	ldr	r2, [pc, #120]	; (800a6b0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d009      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x80>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a1c      	ldr	r2, [pc, #112]	; (800a6b4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d004      	beq.n	800a650 <HAL_TIM_Base_Start_IT+0x80>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a1b      	ldr	r2, [pc, #108]	; (800a6b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d115      	bne.n	800a67c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689a      	ldr	r2, [r3, #8]
 800a656:	4b19      	ldr	r3, [pc, #100]	; (800a6bc <HAL_TIM_Base_Start_IT+0xec>)
 800a658:	4013      	ands	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2b06      	cmp	r3, #6
 800a660:	d015      	beq.n	800a68e <HAL_TIM_Base_Start_IT+0xbe>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a668:	d011      	beq.n	800a68e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f042 0201 	orr.w	r2, r2, #1
 800a678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a67a:	e008      	b.n	800a68e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0201 	orr.w	r2, r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	e000      	b.n	800a690 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a68e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	40012c00 	.word	0x40012c00
 800a6a4:	40000400 	.word	0x40000400
 800a6a8:	40000800 	.word	0x40000800
 800a6ac:	40000c00 	.word	0x40000c00
 800a6b0:	40013400 	.word	0x40013400
 800a6b4:	40014000 	.word	0x40014000
 800a6b8:	40015000 	.word	0x40015000
 800a6bc:	00010007 	.word	0x00010007

0800a6c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d109      	bne.n	800a6e4 <HAL_TIM_PWM_Start+0x24>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	bf14      	ite	ne
 800a6dc:	2301      	movne	r3, #1
 800a6de:	2300      	moveq	r3, #0
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	e03c      	b.n	800a75e <HAL_TIM_PWM_Start+0x9e>
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	d109      	bne.n	800a6fe <HAL_TIM_PWM_Start+0x3e>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	bf14      	ite	ne
 800a6f6:	2301      	movne	r3, #1
 800a6f8:	2300      	moveq	r3, #0
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	e02f      	b.n	800a75e <HAL_TIM_PWM_Start+0x9e>
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2b08      	cmp	r3, #8
 800a702:	d109      	bne.n	800a718 <HAL_TIM_PWM_Start+0x58>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	bf14      	ite	ne
 800a710:	2301      	movne	r3, #1
 800a712:	2300      	moveq	r3, #0
 800a714:	b2db      	uxtb	r3, r3
 800a716:	e022      	b.n	800a75e <HAL_TIM_PWM_Start+0x9e>
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2b0c      	cmp	r3, #12
 800a71c:	d109      	bne.n	800a732 <HAL_TIM_PWM_Start+0x72>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b01      	cmp	r3, #1
 800a728:	bf14      	ite	ne
 800a72a:	2301      	movne	r3, #1
 800a72c:	2300      	moveq	r3, #0
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	e015      	b.n	800a75e <HAL_TIM_PWM_Start+0x9e>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b10      	cmp	r3, #16
 800a736:	d109      	bne.n	800a74c <HAL_TIM_PWM_Start+0x8c>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b01      	cmp	r3, #1
 800a742:	bf14      	ite	ne
 800a744:	2301      	movne	r3, #1
 800a746:	2300      	moveq	r3, #0
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	e008      	b.n	800a75e <HAL_TIM_PWM_Start+0x9e>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b01      	cmp	r3, #1
 800a756:	bf14      	ite	ne
 800a758:	2301      	movne	r3, #1
 800a75a:	2300      	moveq	r3, #0
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e0a6      	b.n	800a8b4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d104      	bne.n	800a776 <HAL_TIM_PWM_Start+0xb6>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2202      	movs	r2, #2
 800a770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a774:	e023      	b.n	800a7be <HAL_TIM_PWM_Start+0xfe>
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b04      	cmp	r3, #4
 800a77a:	d104      	bne.n	800a786 <HAL_TIM_PWM_Start+0xc6>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2202      	movs	r2, #2
 800a780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a784:	e01b      	b.n	800a7be <HAL_TIM_PWM_Start+0xfe>
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2b08      	cmp	r3, #8
 800a78a:	d104      	bne.n	800a796 <HAL_TIM_PWM_Start+0xd6>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2202      	movs	r2, #2
 800a790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a794:	e013      	b.n	800a7be <HAL_TIM_PWM_Start+0xfe>
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b0c      	cmp	r3, #12
 800a79a:	d104      	bne.n	800a7a6 <HAL_TIM_PWM_Start+0xe6>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2202      	movs	r2, #2
 800a7a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7a4:	e00b      	b.n	800a7be <HAL_TIM_PWM_Start+0xfe>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2b10      	cmp	r3, #16
 800a7aa:	d104      	bne.n	800a7b6 <HAL_TIM_PWM_Start+0xf6>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2202      	movs	r2, #2
 800a7b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7b4:	e003      	b.n	800a7be <HAL_TIM_PWM_Start+0xfe>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 fc68 	bl	800b09c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a3a      	ldr	r2, [pc, #232]	; (800a8bc <HAL_TIM_PWM_Start+0x1fc>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d018      	beq.n	800a808 <HAL_TIM_PWM_Start+0x148>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a39      	ldr	r2, [pc, #228]	; (800a8c0 <HAL_TIM_PWM_Start+0x200>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d013      	beq.n	800a808 <HAL_TIM_PWM_Start+0x148>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a37      	ldr	r2, [pc, #220]	; (800a8c4 <HAL_TIM_PWM_Start+0x204>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d00e      	beq.n	800a808 <HAL_TIM_PWM_Start+0x148>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a36      	ldr	r2, [pc, #216]	; (800a8c8 <HAL_TIM_PWM_Start+0x208>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d009      	beq.n	800a808 <HAL_TIM_PWM_Start+0x148>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a34      	ldr	r2, [pc, #208]	; (800a8cc <HAL_TIM_PWM_Start+0x20c>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d004      	beq.n	800a808 <HAL_TIM_PWM_Start+0x148>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a33      	ldr	r2, [pc, #204]	; (800a8d0 <HAL_TIM_PWM_Start+0x210>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d101      	bne.n	800a80c <HAL_TIM_PWM_Start+0x14c>
 800a808:	2301      	movs	r3, #1
 800a80a:	e000      	b.n	800a80e <HAL_TIM_PWM_Start+0x14e>
 800a80c:	2300      	movs	r3, #0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d007      	beq.n	800a822 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a820:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a25      	ldr	r2, [pc, #148]	; (800a8bc <HAL_TIM_PWM_Start+0x1fc>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d022      	beq.n	800a872 <HAL_TIM_PWM_Start+0x1b2>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a834:	d01d      	beq.n	800a872 <HAL_TIM_PWM_Start+0x1b2>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a26      	ldr	r2, [pc, #152]	; (800a8d4 <HAL_TIM_PWM_Start+0x214>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d018      	beq.n	800a872 <HAL_TIM_PWM_Start+0x1b2>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a24      	ldr	r2, [pc, #144]	; (800a8d8 <HAL_TIM_PWM_Start+0x218>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d013      	beq.n	800a872 <HAL_TIM_PWM_Start+0x1b2>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a23      	ldr	r2, [pc, #140]	; (800a8dc <HAL_TIM_PWM_Start+0x21c>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d00e      	beq.n	800a872 <HAL_TIM_PWM_Start+0x1b2>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a19      	ldr	r2, [pc, #100]	; (800a8c0 <HAL_TIM_PWM_Start+0x200>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d009      	beq.n	800a872 <HAL_TIM_PWM_Start+0x1b2>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a18      	ldr	r2, [pc, #96]	; (800a8c4 <HAL_TIM_PWM_Start+0x204>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d004      	beq.n	800a872 <HAL_TIM_PWM_Start+0x1b2>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a18      	ldr	r2, [pc, #96]	; (800a8d0 <HAL_TIM_PWM_Start+0x210>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d115      	bne.n	800a89e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	689a      	ldr	r2, [r3, #8]
 800a878:	4b19      	ldr	r3, [pc, #100]	; (800a8e0 <HAL_TIM_PWM_Start+0x220>)
 800a87a:	4013      	ands	r3, r2
 800a87c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b06      	cmp	r3, #6
 800a882:	d015      	beq.n	800a8b0 <HAL_TIM_PWM_Start+0x1f0>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a88a:	d011      	beq.n	800a8b0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f042 0201 	orr.w	r2, r2, #1
 800a89a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a89c:	e008      	b.n	800a8b0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f042 0201 	orr.w	r2, r2, #1
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	e000      	b.n	800a8b2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	40012c00 	.word	0x40012c00
 800a8c0:	40013400 	.word	0x40013400
 800a8c4:	40014000 	.word	0x40014000
 800a8c8:	40014400 	.word	0x40014400
 800a8cc:	40014800 	.word	0x40014800
 800a8d0:	40015000 	.word	0x40015000
 800a8d4:	40000400 	.word	0x40000400
 800a8d8:	40000800 	.word	0x40000800
 800a8dc:	40000c00 	.word	0x40000c00
 800a8e0:	00010007 	.word	0x00010007

0800a8e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d122      	bne.n	800a940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	f003 0302 	and.w	r3, r3, #2
 800a904:	2b02      	cmp	r3, #2
 800a906:	d11b      	bne.n	800a940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f06f 0202 	mvn.w	r2, #2
 800a910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	699b      	ldr	r3, [r3, #24]
 800a91e:	f003 0303 	and.w	r3, r3, #3
 800a922:	2b00      	cmp	r3, #0
 800a924:	d003      	beq.n	800a92e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fa56 	bl	800add8 <HAL_TIM_IC_CaptureCallback>
 800a92c:	e005      	b.n	800a93a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fa48 	bl	800adc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fa59 	bl	800adec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	2b04      	cmp	r3, #4
 800a94c:	d122      	bne.n	800a994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f003 0304 	and.w	r3, r3, #4
 800a958:	2b04      	cmp	r3, #4
 800a95a:	d11b      	bne.n	800a994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f06f 0204 	mvn.w	r2, #4
 800a964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2202      	movs	r2, #2
 800a96a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	699b      	ldr	r3, [r3, #24]
 800a972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fa2c 	bl	800add8 <HAL_TIM_IC_CaptureCallback>
 800a980:	e005      	b.n	800a98e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fa1e 	bl	800adc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fa2f 	bl	800adec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	f003 0308 	and.w	r3, r3, #8
 800a99e:	2b08      	cmp	r3, #8
 800a9a0:	d122      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	f003 0308 	and.w	r3, r3, #8
 800a9ac:	2b08      	cmp	r3, #8
 800a9ae:	d11b      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f06f 0208 	mvn.w	r2, #8
 800a9b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2204      	movs	r2, #4
 800a9be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	f003 0303 	and.w	r3, r3, #3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fa02 	bl	800add8 <HAL_TIM_IC_CaptureCallback>
 800a9d4:	e005      	b.n	800a9e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f9f4 	bl	800adc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fa05 	bl	800adec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	f003 0310 	and.w	r3, r3, #16
 800a9f2:	2b10      	cmp	r3, #16
 800a9f4:	d122      	bne.n	800aa3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f003 0310 	and.w	r3, r3, #16
 800aa00:	2b10      	cmp	r3, #16
 800aa02:	d11b      	bne.n	800aa3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f06f 0210 	mvn.w	r2, #16
 800aa0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2208      	movs	r2, #8
 800aa12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	69db      	ldr	r3, [r3, #28]
 800aa1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f9d8 	bl	800add8 <HAL_TIM_IC_CaptureCallback>
 800aa28:	e005      	b.n	800aa36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f9ca 	bl	800adc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f9db 	bl	800adec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d10e      	bne.n	800aa68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f003 0301 	and.w	r3, r3, #1
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d107      	bne.n	800aa68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f06f 0201 	mvn.w	r2, #1
 800aa60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7f9 fab2 	bl	8003fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa72:	2b80      	cmp	r3, #128	; 0x80
 800aa74:	d10e      	bne.n	800aa94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa80:	2b80      	cmp	r3, #128	; 0x80
 800aa82:	d107      	bne.n	800aa94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fbca 	bl	800b228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaa2:	d10e      	bne.n	800aac2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaae:	2b80      	cmp	r3, #128	; 0x80
 800aab0:	d107      	bne.n	800aac2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aaba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fbbd 	bl	800b23c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aacc:	2b40      	cmp	r3, #64	; 0x40
 800aace:	d10e      	bne.n	800aaee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aada:	2b40      	cmp	r3, #64	; 0x40
 800aadc:	d107      	bne.n	800aaee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 f989 	bl	800ae00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	f003 0320 	and.w	r3, r3, #32
 800aaf8:	2b20      	cmp	r3, #32
 800aafa:	d10e      	bne.n	800ab1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	f003 0320 	and.w	r3, r3, #32
 800ab06:	2b20      	cmp	r3, #32
 800ab08:	d107      	bne.n	800ab1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f06f 0220 	mvn.w	r2, #32
 800ab12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fb7d 	bl	800b214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab28:	d10f      	bne.n	800ab4a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab38:	d107      	bne.n	800ab4a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ab42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fb83 	bl	800b250 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab58:	d10f      	bne.n	800ab7a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab68:	d107      	bne.n	800ab7a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ab72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fb75 	bl	800b264 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab88:	d10f      	bne.n	800abaa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab98:	d107      	bne.n	800abaa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800aba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fb67 	bl	800b278 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abb8:	d10f      	bne.n	800abda <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abc8:	d107      	bne.n	800abda <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800abd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fb59 	bl	800b28c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abda:	bf00      	nop
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
	...

0800abe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d101      	bne.n	800abfc <HAL_TIM_ConfigClockSource+0x18>
 800abf8:	2302      	movs	r3, #2
 800abfa:	e0d2      	b.n	800ada2 <HAL_TIM_ConfigClockSource+0x1be>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2202      	movs	r2, #2
 800ac08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ac1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac38:	f000 80a9 	beq.w	800ad8e <HAL_TIM_ConfigClockSource+0x1aa>
 800ac3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac40:	d81a      	bhi.n	800ac78 <HAL_TIM_ConfigClockSource+0x94>
 800ac42:	2b30      	cmp	r3, #48	; 0x30
 800ac44:	f000 809a 	beq.w	800ad7c <HAL_TIM_ConfigClockSource+0x198>
 800ac48:	2b30      	cmp	r3, #48	; 0x30
 800ac4a:	d809      	bhi.n	800ac60 <HAL_TIM_ConfigClockSource+0x7c>
 800ac4c:	2b10      	cmp	r3, #16
 800ac4e:	f000 8095 	beq.w	800ad7c <HAL_TIM_ConfigClockSource+0x198>
 800ac52:	2b20      	cmp	r3, #32
 800ac54:	f000 8092 	beq.w	800ad7c <HAL_TIM_ConfigClockSource+0x198>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f000 808f 	beq.w	800ad7c <HAL_TIM_ConfigClockSource+0x198>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ac5e:	e097      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ac60:	2b50      	cmp	r3, #80	; 0x50
 800ac62:	d05b      	beq.n	800ad1c <HAL_TIM_ConfigClockSource+0x138>
 800ac64:	2b50      	cmp	r3, #80	; 0x50
 800ac66:	d802      	bhi.n	800ac6e <HAL_TIM_ConfigClockSource+0x8a>
 800ac68:	2b40      	cmp	r3, #64	; 0x40
 800ac6a:	d077      	beq.n	800ad5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ac6c:	e090      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ac6e:	2b60      	cmp	r3, #96	; 0x60
 800ac70:	d064      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0x158>
 800ac72:	2b70      	cmp	r3, #112	; 0x70
 800ac74:	d028      	beq.n	800acc8 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800ac76:	e08b      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ac78:	4a4c      	ldr	r2, [pc, #304]	; (800adac <HAL_TIM_ConfigClockSource+0x1c8>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d07e      	beq.n	800ad7c <HAL_TIM_ConfigClockSource+0x198>
 800ac7e:	4a4b      	ldr	r2, [pc, #300]	; (800adac <HAL_TIM_ConfigClockSource+0x1c8>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d810      	bhi.n	800aca6 <HAL_TIM_ConfigClockSource+0xc2>
 800ac84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac88:	d078      	beq.n	800ad7c <HAL_TIM_ConfigClockSource+0x198>
 800ac8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac8e:	d803      	bhi.n	800ac98 <HAL_TIM_ConfigClockSource+0xb4>
 800ac90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac94:	d02f      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800ac96:	e07b      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ac98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ac9c:	d06e      	beq.n	800ad7c <HAL_TIM_ConfigClockSource+0x198>
 800ac9e:	4a44      	ldr	r2, [pc, #272]	; (800adb0 <HAL_TIM_ConfigClockSource+0x1cc>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d06b      	beq.n	800ad7c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800aca4:	e074      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800aca6:	4a43      	ldr	r2, [pc, #268]	; (800adb4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d067      	beq.n	800ad7c <HAL_TIM_ConfigClockSource+0x198>
 800acac:	4a41      	ldr	r2, [pc, #260]	; (800adb4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d803      	bhi.n	800acba <HAL_TIM_ConfigClockSource+0xd6>
 800acb2:	4a41      	ldr	r2, [pc, #260]	; (800adb8 <HAL_TIM_ConfigClockSource+0x1d4>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d061      	beq.n	800ad7c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800acb8:	e06a      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800acba:	4a40      	ldr	r2, [pc, #256]	; (800adbc <HAL_TIM_ConfigClockSource+0x1d8>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d05d      	beq.n	800ad7c <HAL_TIM_ConfigClockSource+0x198>
 800acc0:	4a3f      	ldr	r2, [pc, #252]	; (800adc0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d05a      	beq.n	800ad7c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800acc6:	e063      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6818      	ldr	r0, [r3, #0]
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	6899      	ldr	r1, [r3, #8]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	f000 f9c0 	bl	800b05c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800acea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	609a      	str	r2, [r3, #8]
      break;
 800acf4:	e04c      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6899      	ldr	r1, [r3, #8]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	f000 f9a9 	bl	800b05c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	689a      	ldr	r2, [r3, #8]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad18:	609a      	str	r2, [r3, #8]
      break;
 800ad1a:	e039      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6818      	ldr	r0, [r3, #0]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	6859      	ldr	r1, [r3, #4]
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	f000 f91b 	bl	800af64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2150      	movs	r1, #80	; 0x50
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 f974 	bl	800b022 <TIM_ITRx_SetConfig>
      break;
 800ad3a:	e029      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	6859      	ldr	r1, [r3, #4]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	f000 f93a 	bl	800afc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2160      	movs	r1, #96	; 0x60
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 f964 	bl	800b022 <TIM_ITRx_SetConfig>
      break;
 800ad5a:	e019      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6818      	ldr	r0, [r3, #0]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	6859      	ldr	r1, [r3, #4]
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	461a      	mov	r2, r3
 800ad6a:	f000 f8fb 	bl	800af64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2140      	movs	r1, #64	; 0x40
 800ad74:	4618      	mov	r0, r3
 800ad76:	f000 f954 	bl	800b022 <TIM_ITRx_SetConfig>
      break;
 800ad7a:	e009      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4619      	mov	r1, r3
 800ad86:	4610      	mov	r0, r2
 800ad88:	f000 f94b 	bl	800b022 <TIM_ITRx_SetConfig>
        break;
 800ad8c:	e000      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800ad8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	00100030 	.word	0x00100030
 800adb0:	00100020 	.word	0x00100020
 800adb4:	00100050 	.word	0x00100050
 800adb8:	00100040 	.word	0x00100040
 800adbc:	00100060 	.word	0x00100060
 800adc0:	00100070 	.word	0x00100070

0800adc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a46      	ldr	r2, [pc, #280]	; (800af40 <TIM_Base_SetConfig+0x12c>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d017      	beq.n	800ae5c <TIM_Base_SetConfig+0x48>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae32:	d013      	beq.n	800ae5c <TIM_Base_SetConfig+0x48>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a43      	ldr	r2, [pc, #268]	; (800af44 <TIM_Base_SetConfig+0x130>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d00f      	beq.n	800ae5c <TIM_Base_SetConfig+0x48>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a42      	ldr	r2, [pc, #264]	; (800af48 <TIM_Base_SetConfig+0x134>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d00b      	beq.n	800ae5c <TIM_Base_SetConfig+0x48>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a41      	ldr	r2, [pc, #260]	; (800af4c <TIM_Base_SetConfig+0x138>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d007      	beq.n	800ae5c <TIM_Base_SetConfig+0x48>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a40      	ldr	r2, [pc, #256]	; (800af50 <TIM_Base_SetConfig+0x13c>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d003      	beq.n	800ae5c <TIM_Base_SetConfig+0x48>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a3f      	ldr	r2, [pc, #252]	; (800af54 <TIM_Base_SetConfig+0x140>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d108      	bne.n	800ae6e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a33      	ldr	r2, [pc, #204]	; (800af40 <TIM_Base_SetConfig+0x12c>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d023      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae7c:	d01f      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a30      	ldr	r2, [pc, #192]	; (800af44 <TIM_Base_SetConfig+0x130>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d01b      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a2f      	ldr	r2, [pc, #188]	; (800af48 <TIM_Base_SetConfig+0x134>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d017      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a2e      	ldr	r2, [pc, #184]	; (800af4c <TIM_Base_SetConfig+0x138>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d013      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a2d      	ldr	r2, [pc, #180]	; (800af50 <TIM_Base_SetConfig+0x13c>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d00f      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a2d      	ldr	r2, [pc, #180]	; (800af58 <TIM_Base_SetConfig+0x144>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d00b      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a2c      	ldr	r2, [pc, #176]	; (800af5c <TIM_Base_SetConfig+0x148>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d007      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a2b      	ldr	r2, [pc, #172]	; (800af60 <TIM_Base_SetConfig+0x14c>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d003      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a26      	ldr	r2, [pc, #152]	; (800af54 <TIM_Base_SetConfig+0x140>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d108      	bne.n	800aed0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	4313      	orrs	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a12      	ldr	r2, [pc, #72]	; (800af40 <TIM_Base_SetConfig+0x12c>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d013      	beq.n	800af24 <TIM_Base_SetConfig+0x110>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a14      	ldr	r2, [pc, #80]	; (800af50 <TIM_Base_SetConfig+0x13c>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d00f      	beq.n	800af24 <TIM_Base_SetConfig+0x110>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a14      	ldr	r2, [pc, #80]	; (800af58 <TIM_Base_SetConfig+0x144>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d00b      	beq.n	800af24 <TIM_Base_SetConfig+0x110>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a13      	ldr	r2, [pc, #76]	; (800af5c <TIM_Base_SetConfig+0x148>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d007      	beq.n	800af24 <TIM_Base_SetConfig+0x110>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a12      	ldr	r2, [pc, #72]	; (800af60 <TIM_Base_SetConfig+0x14c>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d003      	beq.n	800af24 <TIM_Base_SetConfig+0x110>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a0d      	ldr	r2, [pc, #52]	; (800af54 <TIM_Base_SetConfig+0x140>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d103      	bne.n	800af2c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	691a      	ldr	r2, [r3, #16]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	615a      	str	r2, [r3, #20]
}
 800af32:	bf00      	nop
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	40012c00 	.word	0x40012c00
 800af44:	40000400 	.word	0x40000400
 800af48:	40000800 	.word	0x40000800
 800af4c:	40000c00 	.word	0x40000c00
 800af50:	40013400 	.word	0x40013400
 800af54:	40015000 	.word	0x40015000
 800af58:	40014000 	.word	0x40014000
 800af5c:	40014400 	.word	0x40014400
 800af60:	40014800 	.word	0x40014800

0800af64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6a1b      	ldr	r3, [r3, #32]
 800af74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	f023 0201 	bic.w	r2, r3, #1
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	4313      	orrs	r3, r2
 800af98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f023 030a 	bic.w	r3, r3, #10
 800afa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	621a      	str	r2, [r3, #32]
}
 800afb6:	bf00      	nop
 800afb8:	371c      	adds	r7, #28
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b087      	sub	sp, #28
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	60f8      	str	r0, [r7, #12]
 800afca:	60b9      	str	r1, [r7, #8]
 800afcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	f023 0210 	bic.w	r2, r3, #16
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6a1b      	ldr	r3, [r3, #32]
 800afe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	031b      	lsls	r3, r3, #12
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800affe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	011b      	lsls	r3, r3, #4
 800b004:	693a      	ldr	r2, [r7, #16]
 800b006:	4313      	orrs	r3, r2
 800b008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	697a      	ldr	r2, [r7, #20]
 800b00e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	693a      	ldr	r2, [r7, #16]
 800b014:	621a      	str	r2, [r3, #32]
}
 800b016:	bf00      	nop
 800b018:	371c      	adds	r7, #28
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b022:	b480      	push	{r7}
 800b024:	b085      	sub	sp, #20
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b03c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	4313      	orrs	r3, r2
 800b044:	f043 0307 	orr.w	r3, r3, #7
 800b048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	609a      	str	r2, [r3, #8]
}
 800b050:	bf00      	nop
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	021a      	lsls	r2, r3, #8
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	431a      	orrs	r2, r3
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	4313      	orrs	r3, r2
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	4313      	orrs	r3, r2
 800b088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	609a      	str	r2, [r3, #8]
}
 800b090:	bf00      	nop
 800b092:	371c      	adds	r7, #28
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	f003 031f 	and.w	r3, r3, #31
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6a1a      	ldr	r2, [r3, #32]
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	43db      	mvns	r3, r3
 800b0be:	401a      	ands	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6a1a      	ldr	r2, [r3, #32]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	f003 031f 	and.w	r3, r3, #31
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0d4:	431a      	orrs	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	621a      	str	r2, [r3, #32]
}
 800b0da:	bf00      	nop
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
	...

0800b0e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d101      	bne.n	800b100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	e074      	b.n	800b1ea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2202      	movs	r2, #2
 800b10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a34      	ldr	r2, [pc, #208]	; (800b1f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d009      	beq.n	800b13e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a33      	ldr	r2, [pc, #204]	; (800b1fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d004      	beq.n	800b13e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a31      	ldr	r2, [pc, #196]	; (800b200 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d108      	bne.n	800b150 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b144:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b15a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4313      	orrs	r3, r2
 800b164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a21      	ldr	r2, [pc, #132]	; (800b1f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d022      	beq.n	800b1be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b180:	d01d      	beq.n	800b1be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a1f      	ldr	r2, [pc, #124]	; (800b204 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d018      	beq.n	800b1be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a1d      	ldr	r2, [pc, #116]	; (800b208 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d013      	beq.n	800b1be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a1c      	ldr	r2, [pc, #112]	; (800b20c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d00e      	beq.n	800b1be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a15      	ldr	r2, [pc, #84]	; (800b1fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d009      	beq.n	800b1be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a18      	ldr	r2, [pc, #96]	; (800b210 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d004      	beq.n	800b1be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a11      	ldr	r2, [pc, #68]	; (800b200 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d10c      	bne.n	800b1d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	40012c00 	.word	0x40012c00
 800b1fc:	40013400 	.word	0x40013400
 800b200:	40015000 	.word	0x40015000
 800b204:	40000400 	.word	0x40000400
 800b208:	40000800 	.word	0x40000800
 800b20c:	40000c00 	.word	0x40000c00
 800b210:	40014000 	.word	0x40014000

0800b214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b258:	bf00      	nop
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b26c:	bf00      	nop
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b294:	bf00      	nop
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <__libc_init_array>:
 800b2a0:	b570      	push	{r4, r5, r6, lr}
 800b2a2:	4e0d      	ldr	r6, [pc, #52]	; (800b2d8 <__libc_init_array+0x38>)
 800b2a4:	4c0d      	ldr	r4, [pc, #52]	; (800b2dc <__libc_init_array+0x3c>)
 800b2a6:	1ba4      	subs	r4, r4, r6
 800b2a8:	10a4      	asrs	r4, r4, #2
 800b2aa:	2500      	movs	r5, #0
 800b2ac:	42a5      	cmp	r5, r4
 800b2ae:	d109      	bne.n	800b2c4 <__libc_init_array+0x24>
 800b2b0:	4e0b      	ldr	r6, [pc, #44]	; (800b2e0 <__libc_init_array+0x40>)
 800b2b2:	4c0c      	ldr	r4, [pc, #48]	; (800b2e4 <__libc_init_array+0x44>)
 800b2b4:	f000 f82c 	bl	800b310 <_init>
 800b2b8:	1ba4      	subs	r4, r4, r6
 800b2ba:	10a4      	asrs	r4, r4, #2
 800b2bc:	2500      	movs	r5, #0
 800b2be:	42a5      	cmp	r5, r4
 800b2c0:	d105      	bne.n	800b2ce <__libc_init_array+0x2e>
 800b2c2:	bd70      	pop	{r4, r5, r6, pc}
 800b2c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2c8:	4798      	blx	r3
 800b2ca:	3501      	adds	r5, #1
 800b2cc:	e7ee      	b.n	800b2ac <__libc_init_array+0xc>
 800b2ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2d2:	4798      	blx	r3
 800b2d4:	3501      	adds	r5, #1
 800b2d6:	e7f2      	b.n	800b2be <__libc_init_array+0x1e>
 800b2d8:	0800bb40 	.word	0x0800bb40
 800b2dc:	0800bb40 	.word	0x0800bb40
 800b2e0:	0800bb40 	.word	0x0800bb40
 800b2e4:	0800bb44 	.word	0x0800bb44

0800b2e8 <memcpy>:
 800b2e8:	b510      	push	{r4, lr}
 800b2ea:	1e43      	subs	r3, r0, #1
 800b2ec:	440a      	add	r2, r1
 800b2ee:	4291      	cmp	r1, r2
 800b2f0:	d100      	bne.n	800b2f4 <memcpy+0xc>
 800b2f2:	bd10      	pop	{r4, pc}
 800b2f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2fc:	e7f7      	b.n	800b2ee <memcpy+0x6>

0800b2fe <memset>:
 800b2fe:	4402      	add	r2, r0
 800b300:	4603      	mov	r3, r0
 800b302:	4293      	cmp	r3, r2
 800b304:	d100      	bne.n	800b308 <memset+0xa>
 800b306:	4770      	bx	lr
 800b308:	f803 1b01 	strb.w	r1, [r3], #1
 800b30c:	e7f9      	b.n	800b302 <memset+0x4>
	...

0800b310 <_init>:
 800b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b312:	bf00      	nop
 800b314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b316:	bc08      	pop	{r3}
 800b318:	469e      	mov	lr, r3
 800b31a:	4770      	bx	lr

0800b31c <_fini>:
 800b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31e:	bf00      	nop
 800b320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b322:	bc08      	pop	{r3}
 800b324:	469e      	mov	lr, r3
 800b326:	4770      	bx	lr
