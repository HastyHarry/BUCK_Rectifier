
Eltek_Control_v.1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be08  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000818  0800bfe0  0800bfe0  0001bfe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7f8  0800c7f8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c7f8  0800c7f8  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c7f8  0800c7f8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7f8  0800c7f8  0001c7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7fc  0800c7fc  0001c7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800c800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b9e0  2000002c  0800c82c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ba0c  0800c82c  0002ba0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002802f  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004907  00000000  00000000  0004808b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e70  00000000  00000000  0004c998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bf8  00000000  00000000  0004e808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c8f0  00000000  00000000  00050400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ce4f  00000000  00000000  0007ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013089d  00000000  00000000  00099b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ca3dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000814c  00000000  00000000  001ca458  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bfc8 	.word	0x0800bfc8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	0800bfc8 	.word	0x0800bfc8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <DATA_Write_Theta_PLL>:
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DATA_Write_Theta_PLL(float Theta)                             
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	ed87 0a01 	vstr	s0, [r7, #4]

  DATA_theta_PLL=Theta;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <DATA_Write_Theta_PLL+0x1c>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	200000a8 	.word	0x200000a8

08000ab4 <DATA_Read_Theta_PLL>:
  * @retval DATA_theta_PLL (radians)
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
float DATA_Read_Theta_PLL(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  
  return DATA_theta_PLL;
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <DATA_Read_Theta_PLL+0x18>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	ee07 3a90 	vmov	s15, r3
}
 8000ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	200000a8 	.word	0x200000a8

08000ad0 <DATA_CURR_Write_ClarkePark>:
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void DATA_CURR_Write_ClarkePark(TRANSFORM_QDO_t Results_ClarkePark)
                                
 {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	eef0 6a40 	vmov.f32	s13, s0
 8000ada:	eeb0 7a60 	vmov.f32	s14, s1
 8000ade:	eef0 7a41 	vmov.f32	s15, s2
 8000ae2:	edc7 6a01 	vstr	s13, [r7, #4]
 8000ae6:	ed87 7a02 	vstr	s14, [r7, #8]
 8000aea:	edc7 7a03 	vstr	s15, [r7, #12]
                                
DATA_CURR_ClarkePark.axd=Results_ClarkePark.axd;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000af2:	6013      	str	r3, [r2, #0]
DATA_CURR_ClarkePark.axq=Results_ClarkePark.axq;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000af8:	6053      	str	r3, [r2, #4]
DATA_CURR_ClarkePark.axo=Results_ClarkePark.axo;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000afe:	6093      	str	r3, [r2, #8]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	2000007c 	.word	0x2000007c

08000b10 <DATA_VOLT_Write_ClarkePark>:
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void DATA_VOLT_Write_ClarkePark(TRANSFORM_QDO_t Results_ClarkePark)
                                
 {
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	eef0 6a40 	vmov.f32	s13, s0
 8000b1a:	eeb0 7a60 	vmov.f32	s14, s1
 8000b1e:	eef0 7a41 	vmov.f32	s15, s2
 8000b22:	edc7 6a01 	vstr	s13, [r7, #4]
 8000b26:	ed87 7a02 	vstr	s14, [r7, #8]
 8000b2a:	edc7 7a03 	vstr	s15, [r7, #12]
                                
DATA_VOLT_ClarkePark.axd=Results_ClarkePark.axd;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b32:	6013      	str	r3, [r2, #0]
DATA_VOLT_ClarkePark.axq=Results_ClarkePark.axq;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b38:	6053      	str	r3, [r2, #4]
DATA_VOLT_ClarkePark.axo=Results_ClarkePark.axo;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b3e:	6093      	str	r3, [r2, #8]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	20000090 	.word	0x20000090

08000b50 <DATA_Acquisition_from_DMA>:
* @retval None
*
* @note Function valid for STM32G4xx microconroller family  
*/
void DATA_Acquisition_from_DMA(uint32_t* p_ADC1_Data,uint32_t* p_ADC2_Data)                            
{   
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
//  VDC_ADC.Vdc_pos=p_ADC2_Data[0];
//  VDC_ADC.Vdc_neg=p_ADC2_Data[1];
//#elif STDES_PFCBIDIR_REV2

//T_ext=p_ADC2_Data[2];//////
  T_int=p_ADC1_Data[7];//////
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	331c      	adds	r3, #28
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <DATA_Acquisition_from_DMA+0x74>)
 8000b64:	801a      	strh	r2, [r3, #0]
  //AC Side Voltage
  VAC_ADC.phA=p_ADC1_Data[2];
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <DATA_Acquisition_from_DMA+0x78>)
 8000b6c:	6013      	str	r3, [r2, #0]
  VAC_ADC.phB=p_ADC1_Data[3];
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <DATA_Acquisition_from_DMA+0x78>)
 8000b74:	6053      	str	r3, [r2, #4]
  VAC_ADC.phC=p_ADC1_Data[4];
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <DATA_Acquisition_from_DMA+0x78>)
 8000b7c:	6093      	str	r3, [r2, #8]
  //AC Side Current                           
  IAC_ADC.phA=p_ADC1_Data[0];
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b84:	6013      	str	r3, [r2, #0]
  IAC_ADC.phB=p_ADC1_Data[1];
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b8c:	6053      	str	r3, [r2, #4]

  IAC_ADC.phC = IAC_ADC.phA+IAC_ADC.phB - 2048 ;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b9e:	6093      	str	r3, [r2, #8]

  //IAC_ADC.phC=p_ADC1_Data[];
  // DC Side Current
  //IDC_ADC.IDC_adc=p_ADC1_Data[3];
  //VDC                         
  VDC_ADC.Vdc_pos=p_ADC1_Data[5];
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <DATA_Acquisition_from_DMA+0x80>)
 8000ba6:	6013      	str	r3, [r2, #0]
  VDC_ADC.Vdc_neg=4096-p_ADC1_Data[6];
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3318      	adds	r3, #24
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000bb2:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <DATA_Acquisition_from_DMA+0x80>)
 8000bb4:	6053      	str	r3, [r2, #4]
//  VDC_ADC.Vdc_neg=p_ADC1_Data[7];
//  IDC_ADC.Idc_adc=p_ADC1_Data[8];
//#else
//  SELECT DEFINE
//#endif
} 
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	200000bc 	.word	0x200000bc
 8000bc8:	200000b0 	.word	0x200000b0
 8000bcc:	2000006c 	.word	0x2000006c
 8000bd0:	20000088 	.word	0x20000088

08000bd4 <Read_GRID>:
  * 
  * @retval VAC_ADC, pointer to VoltageAC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
VoltageAC_ADC_Struct* Read_GRID(void){
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return &VAC_ADC;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <Read_GRID+0x10>)
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	200000b0 	.word	0x200000b0

08000be8 <Read_Curr_GRID>:
  * 
  * @retval IAC_ADC, pointer to CurrentAC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
CurrentAC_ADC_Struct* Read_Curr_GRID(void){
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return &IAC_ADC;
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <Read_Curr_GRID+0x10>)
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	2000006c 	.word	0x2000006c

08000bfc <Read_Curr_DC>:
  * 
  * @retval IAC_ADC, pointer to CurrentDC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
CurrentDC_ADC_Struct* Read_Curr_DC(void){
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return &IDC_ADC;
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <Read_Curr_DC+0x10>)
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	20000078 	.word	0x20000078

08000c10 <Read_Volt_DC>:
  * 
  * @retval VDC_ADC, pointer to VoltageDC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
VoltageDC_ADC_Struct* Read_Volt_DC(void){
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return &VDC_ADC;
 8000c14:	4b02      	ldr	r3, [pc, #8]	; (8000c20 <Read_Volt_DC+0x10>)
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000088 	.word	0x20000088

08000c24 <DPC_FLT_Faulterror_Set>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx and STM32F74x microconroller family   
  */
void DPC_FLT_Faulterror_Set(DPC_FAULTERROR_LIST_TypeDef eFaulterror){
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uwFaultErrorVector |= eFaulterror;                                                    /*!< Set fault/error in the faulterror vector*/
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <DPC_FLT_Faulterror_Set+0x20>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	4a03      	ldr	r2, [pc, #12]	; (8000c44 <DPC_FLT_Faulterror_Set+0x20>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	200000c0 	.word	0x200000c0

08000c48 <Current_Decoupling_Control>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void Current_Decoupling_Control(CDC_Struct *pCDC_sub,PI_STRUCT_t *pPI_ID_CURR_CTRL_sub, PI_STRUCT_t *pPI_IQ_CURR_CTRL_sub ,float *pVd_ctrl_FF_sub, float *pVq_ctrl_FF_sub){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b090      	sub	sp, #64	; 0x40
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	603b      	str	r3, [r7, #0]
 
float fomegagrid_sub=pCDC_sub->omegagrid;                                                       ///Omega grid value expressed in Hz - Related to decoupled terms
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
float fInductor_sub=pCDC_sub->Inductor;                                                         ///Inductor value expressed in H - Related to decoupled terms
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
float fId_ref_sub=pCDC_sub->Id_ref;                                                             ///Local variable - d-axis current referance
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
float fIq_ref_sub=pCDC_sub->Iq_ref;                                                             ///Local variable - q-axis current referance
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
float fId_feed_sub=pCDC_sub->Id_feed;                                                           ///Local variable - d-axis current feedback
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
float fIq_feed_sub=pCDC_sub->Iq_feed;                                                           ///Local variable - q-axis current feedback
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
float fVq_Curr_Ctrl_sub;                                                                        ///Local variable - q-axis PI output
float fVd_Decoupling_sub;                                                                       ///Local variable - d-axis decoupling term
float fVq_Decoupling_sub;                                                                       ///Local variable - d-axis decoupling term
//float *pVd_ctrl_FF_sub;                                                                          ///Local variable - d-axis FeefForward term
//float *pVq_ctrl_FF_sub;                                                                          ///Local variable - d-axis FeefForward term
float fVdc_sub=pCDC_sub->Vdc_feed;                                                              ///Local variable - Vdc feedback
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24

  fVd_Curr_Ctrl_sub=PI(fId_ref_sub, fId_feed_sub , pPI_ID_CURR_CTRL_sub);                       ///d-axis PI regulator block
 8000c80:	68b8      	ldr	r0, [r7, #8]
 8000c82:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8000c86:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8000c8a:	f001 fbbd 	bl	8002408 <PI>
 8000c8e:	ed87 0a08 	vstr	s0, [r7, #32]
  fVq_Curr_Ctrl_sub=PI(fIq_ref_sub, fIq_feed_sub , pPI_IQ_CURR_CTRL_sub);                       ///q-axis PI regulator block
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8000c98:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8000c9c:	f001 fbb4 	bl	8002408 <PI>
 8000ca0:	ed87 0a07 	vstr	s0, [r7, #28]

  if(pCDC_sub->Decoupling_Enable==SET)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d130      	bne.n	8000d10 <Current_Decoupling_Control+0xc8>
  {
  pCDC_sub->Vd_Decoupling=fVd_Decoupling_sub=fIq_feed_sub*fomegagrid_sub*fInductor_sub;         ///d-axis decoupling term block
 8000cae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000cb2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cba:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc2:	edc7 7a06 	vstr	s15, [r7, #24]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	631a      	str	r2, [r3, #48]	; 0x30
  pCDC_sub->Vq_Decoupling=fVq_Decoupling_sub=fId_feed_sub*fomegagrid_sub*fInductor_sub;         ///q-axis decoupling term block
 8000ccc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000cd0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce0:	edc7 7a05 	vstr	s15, [r7, #20]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
  pCDC_sub->Vd_Curr_Ctrl=(fVd_Curr_Ctrl_sub-fVd_Decoupling_sub);                                ///d-axis decoupling term applied
 8000cea:	ed97 7a08 	vldr	s14, [r7, #32]
 8000cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	edc3 7a08 	vstr	s15, [r3, #32]
  pCDC_sub->Vq_Curr_Ctrl=(fVq_Curr_Ctrl_sub+fVq_Decoupling_sub);                                ///q-axis decoupling term applied
 8000cfc:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d00:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8000d0e:	e005      	b.n	8000d1c <Current_Decoupling_Control+0xd4>
  }
  else
  {
  pCDC_sub->Vd_Curr_Ctrl=fVd_Curr_Ctrl_sub;                                                    ///d-axis decoupling term bypassed
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6a3a      	ldr	r2, [r7, #32]
 8000d14:	621a      	str	r2, [r3, #32]
  pCDC_sub->Vq_Curr_Ctrl=fVq_Curr_Ctrl_sub;                                                    ///q-axis decoupling term bypassed
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	69fa      	ldr	r2, [r7, #28]
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  
  
  if(pCDC_sub->FF_Enable==SET)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d105      	bne.n	8000d32 <Current_Decoupling_Control+0xea>
  {
  FeedForward_Control(pCDC_sub,pVd_ctrl_FF_sub,pVq_ctrl_FF_sub);                                ///dq-axis Feed_Forward applied
 8000d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d28:	6839      	ldr	r1, [r7, #0]
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f000 f837 	bl	8000d9e <FeedForward_Control>
 8000d30:	e007      	b.n	8000d42 <Current_Decoupling_Control+0xfa>
  }
  else
  {
    *pVd_ctrl_FF_sub=pCDC_sub->Vd_Curr_Ctrl;                                                    ///d-axis Feed_Forward bypassed
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6a1a      	ldr	r2, [r3, #32]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	601a      	str	r2, [r3, #0]
    *pVq_ctrl_FF_sub=pCDC_sub->Vq_Curr_Ctrl;                                                    ///q-axis Feed_Forward bypassed                        
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d40:	601a      	str	r2, [r3, #0]
  }
  
  if(pCDC_sub->VDC_FF_Enable==SET)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d114      	bne.n	8000d76 <Current_Decoupling_Control+0x12e>
  {
    *pVd_ctrl_FF_sub=*pVq_ctrl_FF_sub/fVdc_sub;                                                 ///d-axis - Vdc Feed_Forward applied 
 8000d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d4e:	edd3 6a00 	vldr	s13, [r3]
 8000d52:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	edc3 7a00 	vstr	s15, [r3]
    *pVq_ctrl_FF_sub=*pVq_ctrl_FF_sub/fVdc_sub;                                                 ///q-axis - Vdc Feed_Forward applied 
 8000d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d62:	edd3 6a00 	vldr	s13, [r3]
 8000d66:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d70:	edc3 7a00 	vstr	s15, [r3]
 8000d74:	e007      	b.n	8000d86 <Current_Decoupling_Control+0x13e>
  }
  else
  {
    *pVd_ctrl_FF_sub=pCDC_sub->Vd_Curr_Ctrl;                                                    ///d-axis - Vdc Feed_Forward bypassed
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6a1a      	ldr	r2, [r3, #32]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	601a      	str	r2, [r3, #0]
    *pVq_ctrl_FF_sub=pCDC_sub->Vq_Curr_Ctrl;                                                    ///q-axis - Vdc Feed_Forward bypassed  
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d84:	601a      	str	r2, [r3, #0]
  }
  
  
  *pVd_ctrl_FF_sub=*pVd_ctrl_FF_sub;                                                               ///d-axis Vcontrol CDC output term
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	601a      	str	r2, [r3, #0]
  *pVq_ctrl_FF_sub=*pVq_ctrl_FF_sub;                                                               ///q-axis Vcontrol CDC output term
 8000d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d94:	601a      	str	r2, [r3, #0]
  
}
 8000d96:	bf00      	nop
 8000d98:	3740      	adds	r7, #64	; 0x40
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <FeedForward_Control>:
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 

void FeedForward_Control(CDC_Struct *pCDC_sub,float *pVd_ctrl_FF_sub, float *pVq_ctrl_FF_sub)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b089      	sub	sp, #36	; 0x24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
float fVd_feed_sub=pCDC_sub->Vd_feed;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	61fb      	str	r3, [r7, #28]
float fVq_feed_sub=pCDC_sub->Vq_feed; 
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	61bb      	str	r3, [r7, #24]
float fVd_ctrl_sub=pCDC_sub->Vd_Curr_Ctrl;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6a1b      	ldr	r3, [r3, #32]
 8000dba:	617b      	str	r3, [r7, #20]
float fVq_ctrl_sub=pCDC_sub->Vq_Curr_Ctrl;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc0:	613b      	str	r3, [r7, #16]


pCDC_sub->Vd_ctrl_FF=fVd_feed_sub-fVd_ctrl_sub;
 8000dc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
pCDC_sub->Vq_ctrl_FF=fVq_feed_sub-fVq_ctrl_sub;  
 8000dd4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000dd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  
  *pVd_ctrl_FF_sub=pCDC_sub->Vd_ctrl_FF;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	601a      	str	r2, [r3, #0]
  *pVq_ctrl_FF_sub=pCDC_sub->Vq_ctrl_FF;  
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	601a      	str	r2, [r3, #0]
}
 8000df6:	bf00      	nop
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <Voltage_Control>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void Voltage_Control(VOLTAGECTRL_Struct *VOLTAGECTRL_sub,PI_STRUCT_t *PI_VDC_CTRL_sub, float *Id_ctrl_sub){
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  float Vdc_ref_sub=VOLTAGECTRL_sub->Vdc_ref;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	617b      	str	r3, [r7, #20]
  float Vdc_feed_sub=VOLTAGECTRL_sub->Vdc_feed;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	613b      	str	r3, [r7, #16]
  
  PI(Vdc_ref_sub, Vdc_feed_sub , PI_VDC_CTRL_sub);
 8000e1a:	68b8      	ldr	r0, [r7, #8]
 8000e1c:	edd7 0a04 	vldr	s1, [r7, #16]
 8000e20:	ed97 0a05 	vldr	s0, [r7, #20]
 8000e24:	f001 faf0 	bl	8002408 <PI>
  VOLTAGECTRL_sub->Id_ctrl=PI_VDC_CTRL_sub->PIout_sat;
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	69da      	ldr	r2, [r3, #28]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	609a      	str	r2, [r3, #8]
  *Id_ctrl_sub=PI_VDC_CTRL_sub->PIout_sat;
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	69da      	ldr	r2, [r3, #28]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <DPC_LPCNTRL_PFC_Mode_Reset>:
  * @retval null 
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DPC_LPCNTRL_PFC_Mode_Reset(PI_STRUCT_t *PI_VDC_CTRL, CDC_Struct *CDC)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
        PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode      
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <DPC_LPCNTRL_PFC_Mode>:
  * @retval null 
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DPC_LPCNTRL_PFC_Mode(PFC_CTRL_t *pPFC_CTRL_loc, PI_STRUCT_t *PI_VDC_CTRL, VOLTAGECTRL_Struct *VOLTAGECTRL, CDC_Struct *CDC,TRANSFORM_QDO_t *V_DQO_CTRL,TRANSFORM_QDO_t *Current_qdo,TRANSFORM_QDO_t *Voltage_qdo,VoltageDC_ADC_NORM_Struct *VOLTAGE_ADC_DC_IN_PHY)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b08a      	sub	sp, #40	; 0x28
 8000e72:	af02      	add	r7, sp, #8
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	603b      	str	r3, [r7, #0]
  
  float Id_ctrl_sub=0;
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  float Vd_ctrl_FF=0;
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  float Vq_ctrl_FF=0;
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  

  
  pPFC_CTRL_loc->VOLTAGECTRL=*VOLTAGECTRL;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	33ec      	adds	r3, #236	; 0xec
 8000e94:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  pPFC_CTRL_loc->CDC=*CDC;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	3314      	adds	r3, #20
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	22d8      	movs	r2, #216	; 0xd8
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f00b f87b 	bl	800bfa0 <memcpy>
  
   if(pPFC_CTRL_loc->PFC_CTRL_State==VOLTAGE_LOOP) /// Voltage and Current control closed
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	789b      	ldrb	r3, [r3, #2]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d15c      	bne.n	8000f6c <DPC_LPCNTRL_PFC_Mode+0xfe>
  {   
    PI_VDC_CTRL->resetPI=pPFC_CTRL_loc->VdcCTRL_Reset;          ///Release PI accumulator
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	785a      	ldrb	r2, [r3, #1]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    VOLTAGECTRL->Vdc_ref=pPFC_CTRL_loc->PFC_VDC_Ref;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	8a1b      	ldrh	r3, [r3, #16]
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	edc3 7a00 	vstr	s15, [r3]
    VOLTAGECTRL->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;   
 8000ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	605a      	str	r2, [r3, #4]
    CDC->pPI_ID_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    CDC->Id_feed=Current_qdo->axd;                              ///Pass dq current feedback to CDC struct (d-axis)
 8000ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	611a      	str	r2, [r3, #16]
    CDC->Iq_feed=Current_qdo->axq;                              ///Pass dq current feedback to CDC struct (q-axis)
 8000efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	615a      	str	r2, [r3, #20]
    CDC->Vd_feed=Voltage_qdo->axd;                              ///Pass dq voltage feedback to CDC struct (d-axis)
 8000f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
    CDC->Vq_feed=Voltage_qdo->axq;                              ///Pass dq voltage feedback to CDC struct (q-axis)    
 8000f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
    CDC->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;               ///Pass DC voltage feedback to CDC struct 
 8000f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    Voltage_Control(VOLTAGECTRL, PI_VDC_CTRL,&Id_ctrl_sub);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	461a      	mov	r2, r3
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff6c 	bl	8000e02 <Voltage_Control>
    CDC->Id_ref=Id_ctrl_sub;
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	609a      	str	r2, [r3, #8]
    CDC->Iq_ref=0;  
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
    Current_Decoupling_Control(CDC,&CDC->pPI_ID_CURR_CTRL,&CDC->pPI_IQ_CURR_CTRL, &Vd_ctrl_FF,&Vq_ctrl_FF);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8000f44:	f107 0018 	add.w	r0, r7, #24
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6838      	ldr	r0, [r7, #0]
 8000f52:	f7ff fe79 	bl	8000c48 <Current_Decoupling_Control>
    
    V_DQO_CTRL->axd=Vd_ctrl_FF;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f60:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0; 
 8000f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
    V_DQO_CTRL->axd=0;
    V_DQO_CTRL->axq=0;
    V_DQO_CTRL->axo=0;
  }

}
 8000f6a:	e08e      	b.n	800108a <DPC_LPCNTRL_PFC_Mode+0x21c>
  else if(pPFC_CTRL_loc->PFC_CTRL_State==CURRENT_LOOP) /// Only Current control closed
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	789b      	ldrb	r3, [r3, #2]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d13b      	bne.n	8000fec <DPC_LPCNTRL_PFC_Mode+0x17e>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	781a      	ldrb	r2, [r3, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->Id_feed=Current_qdo->axd;                              ///Pass dq current feedback to CDC struct (d-axis)
 8000f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	611a      	str	r2, [r3, #16]
    CDC->Iq_feed=Current_qdo->axq;                              ///Pass dq current feedback to CDC struct (q-axis)
 8000f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	615a      	str	r2, [r3, #20]
    CDC->Vd_feed=Voltage_qdo->axd;                              ///Pass dq voltage feedback to CDC struct (d-axis)
 8000fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
    CDC->Vq_feed=Voltage_qdo->axq;                              ///Pass dq voltage feedback to CDC struct (q-axis) 
 8000fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
    CDC->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;               ///Pass DC voltage feedback to CDC struct 
 8000fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
    Current_Decoupling_Control(CDC,&CDC->pPI_ID_CURR_CTRL,&CDC->pPI_IQ_CURR_CTRL, &Vd_ctrl_FF,&Vq_ctrl_FF);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8000fc4:	f107 0018 	add.w	r0, r7, #24
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6838      	ldr	r0, [r7, #0]
 8000fd2:	f7ff fe39 	bl	8000c48 <Current_Decoupling_Control>
    V_DQO_CTRL->axd=Vd_ctrl_FF;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fda:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 8000fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
}
 8000fea:	e04e      	b.n	800108a <DPC_LPCNTRL_PFC_Mode+0x21c>
  else if(pPFC_CTRL_loc->PFC_CTRL_State==OPEN_LOOP) /// Open LOOP
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	789b      	ldrb	r3, [r3, #2]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d132      	bne.n	800105a <DPC_LPCNTRL_PFC_Mode+0x1ec>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode 
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->Vd_Curr_Ctrl=pPFC_CTRL_loc->V_DQO_CTRL_MAN.axd;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	621a      	str	r2, [r3, #32]
    CDC->Vq_Curr_Ctrl=pPFC_CTRL_loc->V_DQO_CTRL_MAN.axq;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
    if(CDC->FF_Enable==SET)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001022:	2b01      	cmp	r3, #1
 8001024:	d108      	bne.n	8001038 <DPC_LPCNTRL_PFC_Mode+0x1ca>
    FeedForward_Control(CDC,&Vd_ctrl_FF,&Vq_ctrl_FF);                                ///dq-axis Feed_Forward applied
 8001026:	f107 0214 	add.w	r2, r7, #20
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	4619      	mov	r1, r3
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f7ff feb4 	bl	8000d9e <FeedForward_Control>
 8001036:	e005      	b.n	8001044 <DPC_LPCNTRL_PFC_Mode+0x1d6>
    Vd_ctrl_FF=CDC->Vd_Curr_Ctrl;                                                    ///d-axis Feed_Forward bypassed
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	61bb      	str	r3, [r7, #24]
    Vq_ctrl_FF=CDC->Vq_Curr_Ctrl;                                                    ///q-axis Feed_Forward bypassed                        
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	617b      	str	r3, [r7, #20]
    V_DQO_CTRL->axd=Vd_ctrl_FF;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104e:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 8001050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
}
 8001058:	e017      	b.n	800108a <DPC_LPCNTRL_PFC_Mode+0x21c>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    V_DQO_CTRL->axd=0;
 8001072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=0;
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 8001082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
}
 800108a:	bf00      	nop
 800108c:	3720      	adds	r7, #32
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <DPC_LPCNTRL_Burst_Mode>:
* @retval none 
*
* @note Working with DPC_LPCNTRL_Burst_Check
* @note Function valid for STM32G4xx microconroller family  
*/ 
void DPC_LPCNTRL_Burst_Mode(uint32_t* p_Data_Sub,BURST_STRUCT *BURST_CTRL_f,uint32_t* iDC_Data_Sub,DPC_PWM_TypeDef *tDPC_PWM_loc){ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b088      	sub	sp, #32
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	603b      	str	r3, [r7, #0]
  uint16_t Vout_load_min;                                                               /*!< Local histeresis lower ouput DC voltage Thrueshold expressed in Bits */
  uint16_t I_load_Burst;                                                                /*!< */    
  float Burst_Duty;                                                                     /*!< */  

  
  if (BURST_CTRL_f->Burst_Enable==SET){                                                 /** If Burst_Enable is SET */  
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	7e1b      	ldrb	r3, [r3, #24]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d177      	bne.n	8001198 <DPC_LPCNTRL_Burst_Mode+0x106>
    
    Vout_load=p_Data_Sub[0]+p_Data_Sub[1];                                              /*!< Pass voltages data in local terms ([0]=VDC_upper  [1]=VDC_lower) */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3304      	adds	r3, #4
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	82fb      	strh	r3, [r7, #22]
    Vout_load_max=BURST_CTRL_f->Vout_max;                                               /*!< Set higher output voltage term*/
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	88db      	ldrh	r3, [r3, #6]
 80010be:	82bb      	strh	r3, [r7, #20]
    Vout_load_min=BURST_CTRL_f->Vout_min;                                               /*!< Set lower output voltage term*/  
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	891b      	ldrh	r3, [r3, #8]
 80010c4:	827b      	strh	r3, [r7, #18]
    BURST_CTRL_f->Vout_load=Vout_load;                                                  /*!< Store output voltage in "BURST_CTRL" struct */
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	8afa      	ldrh	r2, [r7, #22]
 80010ca:	801a      	strh	r2, [r3, #0]
    I_load_Burst=iDC_Data_Sub[0];                                                       /// [0]=Iload  
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	83fb      	strh	r3, [r7, #30]

    
  if(BURST_CTRL_f->BURST_Status==BURST_Progress || BURST_CTRL_f->BURST_Status==BURST_Run){    
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	7f9b      	ldrb	r3, [r3, #30]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d003      	beq.n	80010e2 <DPC_LPCNTRL_Burst_Mode+0x50>
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	7f9b      	ldrb	r3, [r3, #30]
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d15a      	bne.n	8001198 <DPC_LPCNTRL_Burst_Mode+0x106>
    
    if(BURST_CTRL_f->Duty_noload>BURST_CTRL_f->Duty_Limit){                              ///Start Check Duty LIMIT  
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dd03      	ble.n	8001100 <DPC_LPCNTRL_Burst_Mode+0x6e>
      BURST_CTRL_f->Duty_noload=BURST_CTRL_f->Duty_Limit;
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60da      	str	r2, [r3, #12]
    }//End Check Duty_noload LIMIT
    if(BURST_CTRL_f->Duty_lowload>BURST_CTRL_f->Duty_Limit){                             ///Start Check Duty LIMIT  
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	ed93 7a04 	vldr	s14, [r3, #16]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	edd3 7a05 	vldr	s15, [r3, #20]
 800110c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	dd03      	ble.n	800111e <DPC_LPCNTRL_Burst_Mode+0x8c>
      BURST_CTRL_f->Duty_lowload=BURST_CTRL_f->Duty_Limit;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	611a      	str	r2, [r3, #16]
    }//End Check Duty_lowload LIMIT
    

    if(I_load_Burst<=(BURST_CTRL_f->Iout_no_load_threshold)){                           ///NO_LOAD  Check        
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	8b5b      	ldrh	r3, [r3, #26]
 8001122:	8bfa      	ldrh	r2, [r7, #30]
 8001124:	429a      	cmp	r2, r3
 8001126:	d803      	bhi.n	8001130 <DPC_LPCNTRL_Burst_Mode+0x9e>
    Burst_Duty=BURST_CTRL_f->Duty_noload;
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	e00c      	b.n	800114a <DPC_LPCNTRL_Burst_Mode+0xb8>
    }
    else if(I_load_Burst>(BURST_CTRL_f->Iout_no_load_threshold) || I_load_Burst<=(BURST_CTRL_f->Iout_low_load_threshold)){                     ///LOW_LOAD  Check        
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	8b5b      	ldrh	r3, [r3, #26]
 8001134:	8bfa      	ldrh	r2, [r7, #30]
 8001136:	429a      	cmp	r2, r3
 8001138:	d804      	bhi.n	8001144 <DPC_LPCNTRL_Burst_Mode+0xb2>
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	8b9b      	ldrh	r3, [r3, #28]
 800113e:	8bfa      	ldrh	r2, [r7, #30]
 8001140:	429a      	cmp	r2, r3
 8001142:	d802      	bhi.n	800114a <DPC_LPCNTRL_Burst_Mode+0xb8>
    Burst_Duty=BURST_CTRL_f->Duty_lowload;
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	61bb      	str	r3, [r7, #24]
    }    
 
    DPC_PWM_Send_Burst_PWM(tDPC_PWM_loc,Burst_Duty,Burst_Duty,Burst_Duty);  /*!< Refresh BURST Duty*/    
 800114a:	ed97 1a06 	vldr	s2, [r7, #24]
 800114e:	edd7 0a06 	vldr	s1, [r7, #24]
 8001152:	ed97 0a06 	vldr	s0, [r7, #24]
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f000 fe2a 	bl	8001db0 <DPC_PWM_Send_Burst_PWM>
      
//      if (Vout_load>Vout_load_max && BURST_CTRL_f->BURST_PACKAGE==SET)                  /*!< Occured when Vout overcome higher trueshold and BURST_Flag is active*/
      if (Vout_load>Vout_load_max)                                                      /*!< Occured when Vout overcome higher trueshold and BURST_Flag is active*/
 800115c:	8afa      	ldrh	r2, [r7, #22]
 800115e:	8abb      	ldrh	r3, [r7, #20]
 8001160:	429a      	cmp	r2, r3
 8001162:	d908      	bls.n	8001176 <DPC_LPCNTRL_Burst_Mode+0xe4>

      {
        DPC_PWM_OutDisable();                                                           /*!< DISABLE BURST PWM*/
 8001164:	f001 f830 	bl	80021c8 <DPC_PWM_OutDisable>
        BURST_CTRL_f->BURST_PACKAGE=RESET;                                              /*!< BURST_Flag become RESET (Burst Inactive)*/
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2200      	movs	r2, #0
 800116c:	729a      	strb	r2, [r3, #10]
        BURST_CTRL_f->BURST_IN_RANGE=RESET;                                             /*!< BURST_IN_RANGE_Flag become RESET (Vout higher then limit)*/
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2200      	movs	r2, #0
 8001172:	72da      	strb	r2, [r3, #11]
 8001174:	e010      	b.n	8001198 <DPC_LPCNTRL_Burst_Mode+0x106>
      }
//      else if (Vout_load<Vout_load_min && BURST_CTRL_f->BURST_PACKAGE==RESET)           /*!< Occured when Vout is lower then low-trueshold and BURST_Flag is stopped*/
      else if (Vout_load<Vout_load_min)                                                 /*!< Occured when Vout is lower then low-trueshold and BURST_Flag is stopped*/
 8001176:	8afa      	ldrh	r2, [r7, #22]
 8001178:	8a7b      	ldrh	r3, [r7, #18]
 800117a:	429a      	cmp	r2, r3
 800117c:	d209      	bcs.n	8001192 <DPC_LPCNTRL_Burst_Mode+0x100>
      {   
        DPC_PWM_OutEnable(tDPC_PWM_loc);                                               /*!< ENABLE BURST PWM*/
 800117e:	6838      	ldr	r0, [r7, #0]
 8001180:	f001 f828 	bl	80021d4 <DPC_PWM_OutEnable>
        BURST_CTRL_f->BURST_PACKAGE=SET;                                                /*!< BURST_Flag become SET (Burst Active)*/
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2201      	movs	r2, #1
 8001188:	729a      	strb	r2, [r3, #10]
        BURST_CTRL_f->BURST_IN_RANGE=RESET;                                             /*!< BURST_IN_RANGE_Flag become RESET (Vout lower then limit)*/
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2200      	movs	r2, #0
 800118e:	72da      	strb	r2, [r3, #11]
 8001190:	e002      	b.n	8001198 <DPC_LPCNTRL_Burst_Mode+0x106>
      }
      else                                                                              /*!< Occured in inner hysteresis window*/
      {
        BURST_CTRL_f->BURST_IN_RANGE=SET;   
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2201      	movs	r2, #1
 8001196:	72da      	strb	r2, [r3, #11]
  }
  else                                                                                  /** If Burst_Enable is RESET */ 
  {
    //
  } 
  BURST_CTRL_f->uI_load_Burst=I_load_Burst;  
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	8bfa      	ldrh	r2, [r7, #30]
 800119c:	841a      	strh	r2, [r3, #32]
  BURST_CTRL_f->Burst_Duty=Burst_Duty;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <DPC_LPCNTRL_CDC_Init>:
  * 
  * @retval none 
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DPC_LPCNTRL_CDC_Init(CDC_Struct *CDC_local,float omegagrid_loc,float Inductor_loc,FlagStatus FF_Enable_SET,FlagStatus Decoupling_Enable_SET,FlagStatus VDC_FF_Enable_SET){
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80011b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4603      	mov	r3, r0
 80011c4:	70fb      	strb	r3, [r7, #3]
 80011c6:	460b      	mov	r3, r1
 80011c8:	70bb      	strb	r3, [r7, #2]
 80011ca:	4613      	mov	r3, r2
 80011cc:	707b      	strb	r3, [r7, #1]
  CDC_local->omegagrid=omegagrid_loc;                   /*!< Set omega in Current Decaupling Control*/
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	601a      	str	r2, [r3, #0]
  CDC_local->Inductor=Inductor_loc;                     /*!< Set Inductor value in Current Decaupling Control*/
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	605a      	str	r2, [r3, #4]
  CDC_local->FF_Enable=FF_Enable_SET;                   /*!< Set Initial state of AC FeedForward in Current Decoupling Control*/
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	78fa      	ldrb	r2, [r7, #3]
 80011de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  CDC_local->Decoupling_Enable=Decoupling_Enable_SET;   /*!< Set Initial state of Decoupling compensator in Current Decoupling Control*/
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	78ba      	ldrb	r2, [r7, #2]
 80011e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  CDC_local->VDC_FF_Enable=VDC_FF_Enable_SET;           /*!< Set Initial state of DC FeedForward in Current Decoupling Control*/
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	787a      	ldrb	r2, [r7, #1]
 80011ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <DPC_LPCNTRL_PFC_Init>:
* @retval TBD 
*
* @note Function valid for STM32G4xx microconroller family  
*/ 
void DPC_LPCNTRL_PFC_Init(PFC_CTRL_t *pPFC_CTRL_loc,PFC_CTRL_State_TypeDef PFC_CTRL_State,uint16_t PFC_VDC_Ref_loc,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 80011fe:	b480      	push	{r7}
 8001200:	b087      	sub	sp, #28
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	72fb      	strb	r3, [r7, #11]
 800120c:	4613      	mov	r3, r2
 800120e:	813b      	strh	r3, [r7, #8]
  uint16_t PFC_VDC_Ref_BITs_loc;                                                                                /// Local variable to pass Output voltage reference  (Expressed in BITs)   
  PFC_VDC_Ref_BITs_loc=(uint16_t)(((float)PFC_VDC_Ref_loc*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);   /// (V_dc_ref [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias
 8001210:	893b      	ldrh	r3, [r7, #8]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	edd3 7a08 	vldr	s15, [r3, #32]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001232:	ee17 3a90 	vmov	r3, s15
 8001236:	82fb      	strh	r3, [r7, #22]
  
  pPFC_CTRL_loc->PFC_VDC_Ref=PFC_VDC_Ref_loc;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	893a      	ldrh	r2, [r7, #8]
 800123c:	821a      	strh	r2, [r3, #16]
  pPFC_CTRL_loc->PFC_VDC_Ref_BITs=PFC_VDC_Ref_BITs_loc;    
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	8afa      	ldrh	r2, [r7, #22]
 8001242:	825a      	strh	r2, [r3, #18]
  pPFC_CTRL_loc->CDC_Reset=RESET;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
  pPFC_CTRL_loc->VdcCTRL_Reset=RESET;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	705a      	strb	r2, [r3, #1]
  pPFC_CTRL_loc->PFC_CTRL_State=PFC_CTRL_State;   
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	7afa      	ldrb	r2, [r7, #11]
 8001254:	709a      	strb	r2, [r3, #2]
  
}
 8001256:	bf00      	nop
 8001258:	371c      	adds	r7, #28
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <FastSin>:
  * @retval SinTable: value of sin  
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    

float FastSin(float theta){
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t tempAdj;
  
    if (theta < 0.0f) theta += DOUBLE_PI;
 800126e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d507      	bpl.n	800128c <FastSin+0x28>
 800127c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001280:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80012f0 <FastSin+0x8c>
 8001284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001288:	edc7 7a01 	vstr	s15, [r7, #4]
    if (theta > DOUBLE_PI) theta -= DOUBLE_PI; 
 800128c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001290:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80012f0 <FastSin+0x8c>
 8001294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129c:	dd07      	ble.n	80012ae <FastSin+0x4a>
 800129e:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80012f0 <FastSin+0x8c>
 80012a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012aa:	edc7 7a01 	vstr	s15, [r7, #4]
    
    tempAdj = (uint16_t) (Multiplier*theta);
 80012ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012f4 <FastSin+0x90>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012be:	ee17 3a90 	vmov	r3, s15
 80012c2:	81fb      	strh	r3, [r7, #14]
    if(tempAdj >= LUT_SAMPLE ){
 80012c4:	89fb      	ldrh	r3, [r7, #14]
 80012c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ca:	d302      	bcc.n	80012d2 <FastSin+0x6e>
      tempAdj = LUT_SAMPLE-1;
 80012cc:	f240 13ff 	movw	r3, #511	; 0x1ff
 80012d0:	81fb      	strh	r3, [r7, #14]
    }
  return SinTable[tempAdj] ;
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <FastSin+0x94>)
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	ee07 3a90 	vmov	s15, r3
} 
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40c90fdb 	.word	0x40c90fdb
 80012f4:	42a2f983 	.word	0x42a2f983
 80012f8:	0800bfe0 	.word	0x0800bfe0

080012fc <FastCos>:
  * 
  * @retval SinTable: value of Cos  
  *
  * @note Function valid for STM32G4xx microconroller family  
  */      
float FastCos(float theta){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	ed87 0a01 	vstr	s0, [r7, #4]
  
    return FastSin(HALF_PI - theta);
 8001306:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001328 <FastCos+0x2c>
 800130a:	edd7 7a01 	vldr	s15, [r7, #4]
 800130e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	f7ff ffa5 	bl	8001264 <FastSin>
 800131a:	eef0 7a40 	vmov.f32	s15, s0
    }
 800131e:	eeb0 0a67 	vmov.f32	s0, s15
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	3fc90fdb 	.word	0x3fc90fdb

0800132c <Integral>:
*
* @retval integrator output value.
*
* @note Function valid for STM32G4xx microconroller family  
*/
float Integral(INTEGRATOR_STRUCT *pInteg, float Input) {
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	ed87 0a00 	vstr	s0, [r7]
  
  pInteg->Integral_in=Input;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	609a      	str	r2, [r3, #8]
  
  pInteg->Integral_prev=pInteg->Integralout;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	605a      	str	r2, [r3, #4]
  
  pInteg->Integralout=pInteg->Integral_prev+(pInteg->Integral_in*pInteg->Ts);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	ed93 7a01 	vldr	s14, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	edc3 7a03 	vstr	s15, [r3, #12]
  return(pInteg->Integralout);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	ee07 3a90 	vmov	s15, r3
}
 800136e:	eeb0 0a67 	vmov.f32	s0, s15
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <DPC_MISC_Check_DCLoad>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

DPC_Load_Status_TypeDef DPC_MISC_Check_DCLoad(DPC_Load_TypeDef *DPC_Load_loc,DPC_Load_Limit_TypeDef DC_Load_Limit_sub)
{
 800137c:	b084      	sub	sp, #16
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800138a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  uint16_t VDC;
  VoltageDC_ADC_Struct* DATA_VDC;  
  CurrentDC_ADC_Struct* DATA_IDC;
  
  DATA_VDC =  Read_Volt_DC(); 
 800138e:	f7ff fc3f 	bl	8000c10 <Read_Volt_DC>
 8001392:	6138      	str	r0, [r7, #16]
  DATA_IDC = Read_Curr_DC(); 
 8001394:	f7ff fc32 	bl	8000bfc <Read_Curr_DC>
 8001398:	60f8      	str	r0, [r7, #12]
  
  VDC=DATA_VDC->Vdc_pos+DATA_VDC->Vdc_neg;
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29a      	uxth	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	817b      	strh	r3, [r7, #10]
  
  DPC_Load_Status_TypeDef Load_Status;
 
  
  if((DATA_VDC->Vdc_pos > DC_Load_Limit_sub.V_cap_Limit) || (DATA_VDC->Vdc_neg > DC_Load_Limit_sub.V_cap_Limit)){  
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d804      	bhi.n	80013be <DPC_MISC_Check_DCLoad+0x42>
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d907      	bls.n	80013ce <DPC_MISC_Check_DCLoad+0x52>
    DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 80013be:	f000 ff03 	bl	80021c8 <DPC_PWM_OutDisable>
//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
    Load_Status=OVERVOLTAGE_CAP;
 80013c2:	2305      	movs	r3, #5
 80013c4:	75fb      	strb	r3, [r7, #23]
    DPC_FLT_Faulterror_Set(FAULT_OVC);    
 80013c6:	2004      	movs	r0, #4
 80013c8:	f7ff fc2c 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 80013cc:	e049      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
  }
  else if (VDC>DC_Load_Limit_sub.V_dc_Limit){
 80013ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013d0:	897a      	ldrh	r2, [r7, #10]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d907      	bls.n	80013e6 <DPC_MISC_Check_DCLoad+0x6a>
    DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 80013d6:	f000 fef7 	bl	80021c8 <DPC_PWM_OutDisable>
//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
    Load_Status=OVERVOLTAGE_LOAD;
 80013da:	2303      	movs	r3, #3
 80013dc:	75fb      	strb	r3, [r7, #23]
    DPC_FLT_Faulterror_Set(FAULT_OVL);
 80013de:	2002      	movs	r0, #2
 80013e0:	f7ff fc20 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 80013e4:	e03d      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
  }
  else {
    if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_Over_load_Threshold)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d305      	bcc.n	80013fc <DPC_MISC_Check_DCLoad+0x80>
    {
      Load_Status=OVERCURRENT_LOAD;
 80013f0:	2304      	movs	r3, #4
 80013f2:	75fb      	strb	r3, [r7, #23]
      DPC_FLT_Faulterror_Set(FAULT_OCL);       
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fc15 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 80013fa:	e032      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_Low_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==LOW_LOAD || DPC_Load_loc->DPC_Load_Status==NO_LOAD))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001402:	4293      	cmp	r3, r2
 8001404:	d30a      	bcc.n	800141c <DPC_MISC_Check_DCLoad+0xa0>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d003      	beq.n	8001416 <DPC_MISC_Check_DCLoad+0x9a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <DPC_MISC_Check_DCLoad+0xa0>
    {
      Load_Status=ON_LOAD;
 8001416:	2302      	movs	r3, #2
 8001418:	75fb      	strb	r3, [r7, #23]
 800141a:	e022      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else if(DATA_IDC->IDC_adc<=DC_Load_Limit_sub.I_Low_load_Min_Threshold && (DPC_Load_loc->DPC_Load_Status==ON_LOAD))
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001422:	4293      	cmp	r3, r2
 8001424:	d806      	bhi.n	8001434 <DPC_MISC_Check_DCLoad+0xb8>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d102      	bne.n	8001434 <DPC_MISC_Check_DCLoad+0xb8>
    {
      Load_Status=LOW_LOAD;
 800142e:	2301      	movs	r3, #1
 8001430:	75fb      	strb	r3, [r7, #23]
 8001432:	e016      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_No_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==NO_LOAD))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800143a:	4293      	cmp	r3, r2
 800143c:	d306      	bcc.n	800144c <DPC_MISC_Check_DCLoad+0xd0>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <DPC_MISC_Check_DCLoad+0xd0>
    {
      Load_Status=LOW_LOAD;
 8001446:	2301      	movs	r3, #1
 8001448:	75fb      	strb	r3, [r7, #23]
 800144a:	e00a      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else if(DATA_IDC->IDC_adc<=DC_Load_Limit_sub.I_No_load_Min_Threshold)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001452:	4293      	cmp	r3, r2
 8001454:	d802      	bhi.n	800145c <DPC_MISC_Check_DCLoad+0xe0>
    {
      Load_Status=NO_LOAD;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
 800145a:	e002      	b.n	8001462 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else
    {
      Load_Status=DPC_Load_loc->DPC_Load_Status;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  DPC_Load_loc->DPC_Load_Status=Load_Status;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7dfa      	ldrb	r2, [r7, #23]
 8001466:	701a      	strb	r2, [r3, #0]
  return Load_Status;
 8001468:	7dfb      	ldrb	r3, [r7, #23]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001474:	b004      	add	sp, #16
 8001476:	4770      	bx	lr

08001478 <DPC_MISC_DCLoad_Init>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

void DPC_MISC_DCLoad_Init(DPC_Load_Limit_TypeDef *DC_Load_Limit_sub,uint16_t V_dc_Limit_VOLT,uint16_t V_cap_Limit_VOLT,float I_dc_NO_LOAD_Limit_AMP,float I_dc_LOW_LOAD_Limit_AMP,float I_dc_OVER_LOAD_Limit_AMP,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b08d      	sub	sp, #52	; 0x34
 800147c:	af00      	add	r7, sp, #0
 800147e:	6178      	str	r0, [r7, #20]
 8001480:	ed87 0a03 	vstr	s0, [r7, #12]
 8001484:	edc7 0a02 	vstr	s1, [r7, #8]
 8001488:	ed87 1a01 	vstr	s2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	460b      	mov	r3, r1
 8001490:	827b      	strh	r3, [r7, #18]
 8001492:	4613      	mov	r3, r2
 8001494:	823b      	strh	r3, [r7, #16]
  uint16_t I_dc_LOW_LOAD_Min_Limit_loc;                                                                 /// Local variable to pass Output current Min theshold (Expressed in AMPs) to determinate Light Load Condition  
  uint16_t I_dc_OVER_LOAD_Limit_loc;                                                                    /// Local variable to pass Output current theshold (Expressed in AMPs)to determinate Over Load Condition
  

  
  V_cap_Limit_loc=(uint16_t)(((float)V_cap_Limit_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);                                        /// (Vcap_limit_Threshold [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias 
 8001496:	8a3b      	ldrh	r3, [r7, #16]
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80014b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b8:	ee17 3a90 	vmov	r3, s15
 80014bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
  V_dc_Limit_loc=(uint16_t)(((float)V_dc_Limit_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);                                          /// (Vdc_limit_Threshold [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias
 80014be:	8a7b      	ldrh	r3, [r7, #18]
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e0:	ee17 3a90 	vmov	r3, s15
 80014e4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  I_dc_NO_LOAD_Limit_loc=(uint16_t)(((float)I_dc_NO_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                           /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80014ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80014fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001502:	ee17 3a90 	vmov	r3, s15
 8001506:	857b      	strh	r3, [r7, #42]	; 0x2a
  I_dc_NO_LOAD_Delta_Limit_loc=(uint16_t)((I_dc_NO_LOAD_Limit_loc - DPC_ADC_Conf_loc->B_Idc)*((float)DPC_NO_LOAD_DELTA_CURR*0.01));                     ///
 8001508:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151c:	ee17 0a90 	vmov	r0, s15
 8001520:	f7fe ffde 	bl	80004e0 <__aeabi_f2d>
 8001524:	a33c      	add	r3, pc, #240	; (adr r3, 8001618 <DPC_MISC_DCLoad_Init+0x1a0>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f831 	bl	8000590 <__aeabi_dmul>
 800152e:	4603      	mov	r3, r0
 8001530:	460c      	mov	r4, r1
 8001532:	4618      	mov	r0, r3
 8001534:	4621      	mov	r1, r4
 8001536:	f7ff fa3d 	bl	80009b4 <__aeabi_d2uiz>
 800153a:	4603      	mov	r3, r0
 800153c:	853b      	strh	r3, [r7, #40]	; 0x28
  I_dc_NO_LOAD_Max_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc + I_dc_NO_LOAD_Delta_Limit_loc);                                                 /// 
 800153e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001540:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001542:	4413      	add	r3, r2
 8001544:	84fb      	strh	r3, [r7, #38]	; 0x26
  I_dc_NO_LOAD_Min_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc - I_dc_NO_LOAD_Delta_Limit_loc);                                                 /// 
 8001546:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001548:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	84bb      	strh	r3, [r7, #36]	; 0x24

  I_dc_LOW_LOAD_Limit_loc=(uint16_t)(((float)I_dc_LOW_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                         /// (IDC_Light_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001554:	edd7 7a02 	vldr	s15, [r7, #8]
 8001558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800156a:	ee17 3a90 	vmov	r3, s15
 800156e:	847b      	strh	r3, [r7, #34]	; 0x22
  I_dc_LOW_LOAD_Delta_Limit_loc=(uint16_t)((I_dc_LOW_LOAD_Limit_loc - DPC_ADC_Conf_loc->B_Idc)*((float)DPC_LOW_LOAD_DELTA_CURR*0.01));                   ///
 8001570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001584:	ee17 0a90 	vmov	r0, s15
 8001588:	f7fe ffaa 	bl	80004e0 <__aeabi_f2d>
 800158c:	a324      	add	r3, pc, #144	; (adr r3, 8001620 <DPC_MISC_DCLoad_Init+0x1a8>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7fe fffd 	bl	8000590 <__aeabi_dmul>
 8001596:	4603      	mov	r3, r0
 8001598:	460c      	mov	r4, r1
 800159a:	4618      	mov	r0, r3
 800159c:	4621      	mov	r1, r4
 800159e:	f7ff fa09 	bl	80009b4 <__aeabi_d2uiz>
 80015a2:	4603      	mov	r3, r0
 80015a4:	843b      	strh	r3, [r7, #32]
  I_dc_LOW_LOAD_Max_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc + I_dc_LOW_LOAD_Delta_Limit_loc);                                               /// 
 80015a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80015a8:	8c3b      	ldrh	r3, [r7, #32]
 80015aa:	4413      	add	r3, r2
 80015ac:	83fb      	strh	r3, [r7, #30]
  I_dc_LOW_LOAD_Min_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc - I_dc_LOW_LOAD_Delta_Limit_loc);                                               /// 
 80015ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80015b0:	8c3b      	ldrh	r3, [r7, #32]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	83bb      	strh	r3, [r7, #28]

  I_dc_OVER_LOAD_Limit_loc=(uint16_t)(((float)I_dc_OVER_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                       /// (IDC_Over_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias   
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80015bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80015c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80015ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d2:	ee17 3a90 	vmov	r3, s15
 80015d6:	837b      	strh	r3, [r7, #26]
  
  DC_Load_Limit_sub->V_cap_Limit=V_cap_Limit_loc;  
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80015dc:	801a      	strh	r2, [r3, #0]
  DC_Load_Limit_sub->V_dc_Limit=V_dc_Limit_loc;  
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015e2:	821a      	strh	r2, [r3, #16]
  DC_Load_Limit_sub->I_No_load_Threshold=I_dc_NO_LOAD_Limit_loc;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80015e8:	805a      	strh	r2, [r3, #2]
  DC_Load_Limit_sub->I_No_load_Max_Threshold=I_dc_NO_LOAD_Max_Limit_loc;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015ee:	809a      	strh	r2, [r3, #4]
  DC_Load_Limit_sub->I_No_load_Min_Threshold=I_dc_NO_LOAD_Min_Limit_loc;  
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015f4:	80da      	strh	r2, [r3, #6]
  DC_Load_Limit_sub->I_Low_load_Threshold=I_dc_LOW_LOAD_Limit_loc;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80015fa:	811a      	strh	r2, [r3, #8]
  DC_Load_Limit_sub->I_Low_load_Max_Threshold=I_dc_LOW_LOAD_Max_Limit_loc;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	8bfa      	ldrh	r2, [r7, #30]
 8001600:	815a      	strh	r2, [r3, #10]
  DC_Load_Limit_sub->I_Low_load_Min_Threshold=I_dc_LOW_LOAD_Min_Limit_loc;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	8bba      	ldrh	r2, [r7, #28]
 8001606:	819a      	strh	r2, [r3, #12]
  DC_Load_Limit_sub->I_Over_load_Threshold=I_dc_OVER_LOAD_Limit_loc;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	8b7a      	ldrh	r2, [r7, #26]
 800160c:	81da      	strh	r2, [r3, #14]
  
  
}
 800160e:	bf00      	nop
 8001610:	3734      	adds	r7, #52	; 0x34
 8001612:	46bd      	mov	sp, r7
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	bf00      	nop
 8001618:	9999999a 	.word	0x9999999a
 800161c:	3fc99999 	.word	0x3fc99999
 8001620:	33333333 	.word	0x33333333
 8001624:	3fd33333 	.word	0x3fd33333

08001628 <DPC_MISC_ACSource_Init>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

void DPC_MISC_ACSource_Init(DPC_Source_Limit_TypeDef *AC_Source_Limit_sub,uint16_t V_ac_Limit_VOLT,uint16_t V_ac_UV_Limit_VOLT,uint16_t V_ac_UVLO_Limit_VOLT,uint16_t V_ac_Low_Limit_VOLT,uint16_t I_ac_Limit_AMP,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8001628:	b480      	push	{r7}
 800162a:	b08b      	sub	sp, #44	; 0x2c
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	4608      	mov	r0, r1
 8001632:	4611      	mov	r1, r2
 8001634:	461a      	mov	r2, r3
 8001636:	4603      	mov	r3, r0
 8001638:	817b      	strh	r3, [r7, #10]
 800163a:	460b      	mov	r3, r1
 800163c:	813b      	strh	r3, [r7, #8]
 800163e:	4613      	mov	r3, r2
 8001640:	80fb      	strh	r3, [r7, #6]
  uint16_t V_ac_neg_Low_Limit_loc;                                                                                                      /*!< >*/
  
  uint16_t I_ac_pos_Limit_loc;                                                                                                          /*!< >*/
  uint16_t I_ac_neg_Limit_loc;                                                                                                          /*!< >*/
   
  V_ac_pos_Limit_loc=(uint16_t)(((float)V_ac_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                              /*!< >*/
 8001642:	897b      	ldrh	r3, [r7, #10]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800164c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001658:	edd3 7a02 	vldr	s15, [r3, #8]
 800165c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001664:	ee17 3a90 	vmov	r3, s15
 8001668:	84fb      	strh	r3, [r7, #38]	; 0x26
  V_ac_neg_Limit_loc=(uint16_t)(((float)-V_ac_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                             /*!< >*/
 800166a:	897b      	ldrh	r3, [r7, #10]
 800166c:	425b      	negs	r3, r3
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001682:	edd3 7a02 	vldr	s15, [r3, #8]
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168e:	ee17 3a90 	vmov	r3, s15
 8001692:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  V_ac_pos_UVLO_Limit_loc=(uint16_t)(((float)V_ac_UVLO_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                    /*!< >*/
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800169e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b6:	ee17 3a90 	vmov	r3, s15
 80016ba:	847b      	strh	r3, [r7, #34]	; 0x22
  V_ac_neg_UVLO_Limit_loc=(uint16_t)(((float)-V_ac_UVLO_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                   /*!< >*/
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	425b      	negs	r3, r3
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	843b      	strh	r3, [r7, #32]
  
  V_ac_pos_UV_Limit_loc=(uint16_t)(((float)V_ac_UV_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                        /*!< >*/
 80016e6:	893b      	ldrh	r3, [r7, #8]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001708:	ee17 3a90 	vmov	r3, s15
 800170c:	83fb      	strh	r3, [r7, #30]
  V_ac_neg_UV_Limit_loc=(uint16_t)(((float)-V_ac_UV_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                       /*!< >*/
 800170e:	893b      	ldrh	r3, [r7, #8]
 8001710:	425b      	negs	r3, r3
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800171a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001726:	edd3 7a02 	vldr	s15, [r3, #8]
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001732:	ee17 3a90 	vmov	r3, s15
 8001736:	83bb      	strh	r3, [r7, #28]
  
  V_ac_pos_Low_Limit_loc=(uint16_t)(((float)V_ac_Low_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                      /*!< >*/
 8001738:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800175a:	ee17 3a90 	vmov	r3, s15
 800175e:	837b      	strh	r3, [r7, #26]
  V_ac_neg_Low_Limit_loc=(uint16_t)(((float)-V_ac_Low_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                     /*!< >*/
 8001760:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001762:	425b      	negs	r3, r3
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800176c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001778:	edd3 7a02 	vldr	s15, [r3, #8]
 800177c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001784:	ee17 3a90 	vmov	r3, s15
 8001788:	833b      	strh	r3, [r7, #24]
  
  I_ac_pos_Limit_loc=(uint16_t)(((float)I_ac_Limit_AMP*DPC_ADC_Conf_loc->G_Iac)+DPC_ADC_Conf_loc->B_Iac);                               /*!< >*/
 800178a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001796:	edd3 7a03 	vldr	s15, [r3, #12]
 800179a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800179e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ac:	ee17 3a90 	vmov	r3, s15
 80017b0:	82fb      	strh	r3, [r7, #22]
  I_ac_neg_Limit_loc=(uint16_t)(((float)-I_ac_Limit_AMP*DPC_ADC_Conf_loc->G_Iac)+DPC_ADC_Conf_loc->B_Iac);                              /*!< >*/
 80017b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80017b4:	425b      	negs	r3, r3
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80017c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80017ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d6:	ee17 3a90 	vmov	r3, s15
 80017da:	82bb      	strh	r3, [r7, #20]
  
  
  AC_Source_Limit_sub->V_ac_pos_Limit=V_ac_pos_Limit_loc;                                                                               /*!< >*/
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80017e0:	801a      	strh	r2, [r3, #0]
  AC_Source_Limit_sub->V_ac_neg_Limit=V_ac_neg_Limit_loc;                                                                               /*!< >*/
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017e6:	805a      	strh	r2, [r3, #2]
  
  AC_Source_Limit_sub->V_ac_pos_UVLO_Limit=V_ac_pos_UVLO_Limit_loc;                                                                     /*!< >*/
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80017ec:	809a      	strh	r2, [r3, #4]
  AC_Source_Limit_sub->V_ac_neg_UVLO_Limit=V_ac_neg_UVLO_Limit_loc;                                                                     /*!< >*/  
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8c3a      	ldrh	r2, [r7, #32]
 80017f2:	80da      	strh	r2, [r3, #6]
    
  AC_Source_Limit_sub->V_ac_pos_UV_Limit=V_ac_pos_UV_Limit_loc;                                                                         /*!< >*/
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8bfa      	ldrh	r2, [r7, #30]
 80017f8:	811a      	strh	r2, [r3, #8]
  AC_Source_Limit_sub->V_ac_neg_UV_Limit=V_ac_neg_UV_Limit_loc;                                                                         /*!< >*/
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8bba      	ldrh	r2, [r7, #28]
 80017fe:	815a      	strh	r2, [r3, #10]
    
  AC_Source_Limit_sub->V_ac_pos_Low_Limit=V_ac_pos_Low_Limit_loc;                                                                       /*!< >*/
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8b7a      	ldrh	r2, [r7, #26]
 8001804:	819a      	strh	r2, [r3, #12]
  AC_Source_Limit_sub->V_ac_neg_Low_Limit=V_ac_neg_Low_Limit_loc;                                                                       /*!< >*/
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8b3a      	ldrh	r2, [r7, #24]
 800180a:	81da      	strh	r2, [r3, #14]
  
  AC_Source_Limit_sub->I_ac_pos_Limit=I_ac_pos_Limit_loc;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8afa      	ldrh	r2, [r7, #22]
 8001810:	821a      	strh	r2, [r3, #16]
  AC_Source_Limit_sub->I_ac_neg_Limit=I_ac_neg_Limit_loc;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8aba      	ldrh	r2, [r7, #20]
 8001816:	825a      	strh	r2, [r3, #18]
  
  
}
 8001818:	bf00      	nop
 800181a:	372c      	adds	r7, #44	; 0x2c
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <DPC_MISC_APPL_Timer_Init>:
* @retval None
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/
void DPC_MISC_APPL_Timer_Init(TIM_HandleTypeDef AppTIM, uint32_t  APPL_Freq_Desidered)
{
 8001824:	b084      	sub	sp, #16
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	f107 0c18 	add.w	ip, r7, #24
 8001830:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

  uint32_t Timers_Clock;                                                                ///
  uint32_t Timers_PSC;                                                                  ///
  uint32_t Timers_ClockPSCed;                                                           ///

  Timers_PSC=(uint32_t)(READ_REG(AppTIM.Instance->PSC));                                ///
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	60fb      	str	r3, [r7, #12]
  Timers_Clock=HAL_RCC_GetPCLK2Freq();                                                  ///  
 800183a:	f009 f9f1 	bl	800ac20 <HAL_RCC_GetPCLK2Freq>
 800183e:	60b8      	str	r0, [r7, #8]
  
  Timers_ClockPSCed=(Timers_Clock/(Timers_PSC+1));                                      ///
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3301      	adds	r3, #1
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	607b      	str	r3, [r7, #4]
  
  AppTIM.Init.Period = ((Timers_ClockPSCed/APPL_Freq_Desidered) - 1);                   ///
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_TIM_Base_Init(&AppTIM) != HAL_OK){Error_Handler();}                           ///Init Task Timer  
 8001858:	f107 0018 	add.w	r0, r7, #24
 800185c:	f009 fcbd 	bl	800b1da <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <DPC_MISC_APPL_Timer_Init+0x46>
 8001866:	f002 ff5d 	bl	8004724 <Error_Handler>
 
} 
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001874:	b004      	add	sp, #16
 8001876:	4770      	bx	lr

08001878 <DPC_MISC_Appl_Timer_Start>:




void DPC_MISC_Appl_Timer_Start(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&APPL_Tim1);  //Inizializza il Timer con IT che gestisce l'aggiornamento del duty
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <DPC_MISC_Appl_Timer_Start+0x24>)
 800187e:	f009 fd03 	bl	800b288 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&APPL_Tim3);  //Inizializza il Timer con IT che gestisce l'aggiornamento del duty
 8001882:	4807      	ldr	r0, [pc, #28]	; (80018a0 <DPC_MISC_Appl_Timer_Start+0x28>)
 8001884:	f009 fd00 	bl	800b288 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&APPL_Tim2);  //Inizializza il Timer con IT che gestisce l'aggiornamento ddel display 
 8001888:	4806      	ldr	r0, [pc, #24]	; (80018a4 <DPC_MISC_Appl_Timer_Start+0x2c>)
 800188a:	f009 fcfd 	bl	800b288 <HAL_TIM_Base_Start_IT>
    
  HAL_TIM_PWM_Start(&APPL_Tim4, TIM_CHANNEL_1);   
 800188e:	2100      	movs	r1, #0
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <DPC_MISC_Appl_Timer_Start+0x30>)
 8001892:	f009 fd71 	bl	800b378 <HAL_TIM_PWM_Start>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000b9bc 	.word	0x2000b9bc
 80018a0:	2000b970 	.word	0x2000b970
 80018a4:	2000b924 	.word	0x2000b924
 80018a8:	2000b8d8 	.word	0x2000b8d8

080018ac <DPC_MISC_CHECK_AC_SOURCE>:
* @retval void
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

DPC_Source_Status_TypeDef DPC_MISC_CHECK_AC_SOURCE(DPC_Source_TypeDef  *AC_Source_sub,DPC_Source_Limit_TypeDef AC_Source_Limit_sub,float Theta){
 80018ac:	b084      	sub	sp, #16
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b08c      	sub	sp, #48	; 0x30
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80018ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80018be:	ed87 0a00 	vstr	s0, [r7]
  
  DPC_Source_Status_TypeDef Status_Source = AC_Source_sub->Status_Source; 
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7a1b      	ldrb	r3, [r3, #8]
 80018c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  float Theta_start = 0.08;                                                                             /*!< Approximation of 2Pi to define the SIN near to zero crossing>*/
 80018ca:	4b7b      	ldr	r3, [pc, #492]	; (8001ab8 <DPC_MISC_CHECK_AC_SOURCE+0x20c>)
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  float Theta_stop = 6.20;                                                                              /*!< Approximation of 2Pi to define the SIN near to zero crossing>*/
 80018ce:	4b7b      	ldr	r3, [pc, #492]	; (8001abc <DPC_MISC_CHECK_AC_SOURCE+0x210>)
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint16_t I_ac_pos_Limit_local;                                                                        /*!< >*/
  uint16_t I_ac_neg_Limit_local;                                                                        /*!< >*/
  
  
  V_ac_pos_Limit_local=AC_Source_Limit_sub.V_ac_pos_Limit;                                              /*!< >*/
 80018d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80018d4:	847b      	strh	r3, [r7, #34]	; 0x22
  V_ac_neg_Limit_local=AC_Source_Limit_sub.V_ac_neg_Limit;                                              /*!< >*/
 80018d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018d8:	843b      	strh	r3, [r7, #32]
  
  V_ac_pos_UVLO_Limit_local=AC_Source_Limit_sub.V_ac_pos_UVLO_Limit;                                    /*!< >*/
 80018da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018de:	83fb      	strh	r3, [r7, #30]
  V_ac_neg_UVLO_Limit_local=AC_Source_Limit_sub.V_ac_neg_UVLO_Limit;                                    /*!< >*/
 80018e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80018e4:	83bb      	strh	r3, [r7, #28]
  
  V_ac_pos_UV_Limit_local=AC_Source_Limit_sub.V_ac_pos_UV_Limit;                                        /*!< >*/
 80018e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018ea:	837b      	strh	r3, [r7, #26]
  V_ac_neg_UV_Limit_local=AC_Source_Limit_sub.V_ac_neg_UV_Limit;                                        /*!< >*/
 80018ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80018f0:	833b      	strh	r3, [r7, #24]
  
  V_ac_pos_Low_Limit_local=AC_Source_Limit_sub.V_ac_pos_Low_Limit;                                      /*!< >*/
 80018f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80018f6:	82fb      	strh	r3, [r7, #22]
  V_ac_neg_Low_Limit_local=AC_Source_Limit_sub.V_ac_neg_Low_Limit;                                      /*!< >*/
 80018f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018fc:	82bb      	strh	r3, [r7, #20]
  
  I_ac_pos_Limit_local=AC_Source_Limit_sub.I_ac_pos_Limit;                                              /*!< >*/
 80018fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001902:	827b      	strh	r3, [r7, #18]
  I_ac_neg_Limit_local=AC_Source_Limit_sub.I_ac_neg_Limit;                                              /*!< >*/
 8001904:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001908:	823b      	strh	r3, [r7, #16]
  
  
  
  DATA_VAC = Read_GRID();                                                                               /*!< >*/
 800190a:	f7ff f963 	bl	8000bd4 <Read_GRID>
 800190e:	60f8      	str	r0, [r7, #12]
  DATA_IAC = Read_Curr_GRID();                                                                          /*!< >*/
 8001910:	f7ff f96a 	bl	8000be8 <Read_Curr_GRID>
 8001914:	60b8      	str	r0, [r7, #8]
//    Status_Source=OVERVOLTAGE_SOURCE;
//    DPC_FLT_Faulterror_Set(FAULT_OVS);  
//  }
//  else{  
    
    if(Theta<=Theta_start){    
 8001916:	ed97 7a00 	vldr	s14, [r7]
 800191a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800191e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	d812      	bhi.n	800194e <DPC_MISC_CHECK_AC_SOURCE+0xa2>
      /// Reset pk max & pk min of AC Voltage    
      AC_Source_sub->V_ac_pk_pos_local=0;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	801a      	strh	r2, [r3, #0]
      AC_Source_sub->V_ac_pk_neg_local=1<<12;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001934:	805a      	strh	r2, [r3, #2]
      /// Reset pk max & pk min of AC Current  
      AC_Source_sub->I_ac_pk_pos_local=0;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	809a      	strh	r2, [r3, #4]
      AC_Source_sub->I_ac_pk_neg_local=1<<12;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001942:	80da      	strh	r2, [r3, #6]
      Status_Source=AC_Source_sub->Status_Source;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7a1b      	ldrb	r3, [r3, #8]
 8001948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800194c:	e0a6      	b.n	8001a9c <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
    }
    else if(Theta>Theta_start && Theta<Theta_stop){
 800194e:	ed97 7a00 	vldr	s14, [r7]
 8001952:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001956:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	dd39      	ble.n	80019d4 <DPC_MISC_CHECK_AC_SOURCE+0x128>
 8001960:	ed97 7a00 	vldr	s14, [r7]
 8001964:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	d530      	bpl.n	80019d4 <DPC_MISC_CHECK_AC_SOURCE+0x128>
      /// Determinate pk max & pk min of AC Voltage
      if(AC_Source_sub->V_ac_pk_pos_local<DATA_VAC->phA){
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d204      	bcs.n	800198a <DPC_MISC_CHECK_AC_SOURCE+0xde>
        AC_Source_sub->V_ac_pk_pos_local=DATA_VAC->phA;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	b29a      	uxth	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	801a      	strh	r2, [r3, #0]
      }
      if(AC_Source_sub->V_ac_pk_neg_local>DATA_VAC->phA){
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	885b      	ldrh	r3, [r3, #2]
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d904      	bls.n	80019a2 <DPC_MISC_CHECK_AC_SOURCE+0xf6>
        AC_Source_sub->V_ac_pk_neg_local=DATA_VAC->phA;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	b29a      	uxth	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	805a      	strh	r2, [r3, #2]
      }
      /// Determinate pk max & pk min of AC Current
      
      if(AC_Source_sub->I_ac_pk_pos_local<DATA_IAC->phA){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	889b      	ldrh	r3, [r3, #4]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d204      	bcs.n	80019ba <DPC_MISC_CHECK_AC_SOURCE+0x10e>
        AC_Source_sub->I_ac_pk_pos_local=DATA_IAC->phA;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	809a      	strh	r2, [r3, #4]
      }
      if(AC_Source_sub->I_ac_pk_neg_local>DATA_IAC->phA){
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	88db      	ldrh	r3, [r3, #6]
 80019be:	461a      	mov	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d969      	bls.n	8001a9c <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        AC_Source_sub->I_ac_pk_neg_local=DATA_IAC->phA;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	80da      	strh	r2, [r3, #6]
      if(AC_Source_sub->I_ac_pk_neg_local>DATA_IAC->phA){
 80019d2:	e063      	b.n	8001a9c <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
      }
      
    }
    else if(Theta>=Theta_stop){
 80019d4:	ed97 7a00 	vldr	s14, [r7]
 80019d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e4:	db5a      	blt.n	8001a9c <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
      
      if((AC_Source_sub->V_ac_pk_pos_local == 0) || (AC_Source_sub->V_ac_pk_neg_local == 1<<12)){ 
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <DPC_MISC_CHECK_AC_SOURCE+0x14c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	885b      	ldrh	r3, [r3, #2]
 80019f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f6:	d107      	bne.n	8001a08 <DPC_MISC_CHECK_AC_SOURCE+0x15c>
    	  if (Status_Source!=OVERCURRENT_SOURCE){
 80019f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019fc:	2b06      	cmp	r3, #6
 80019fe:	d04d      	beq.n	8001a9c <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
    		  Status_Source=WAIT_SOURCE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    	  if (Status_Source!=OVERCURRENT_SOURCE){
 8001a06:	e049      	b.n	8001a9c <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
    	  }
      }
      else if (Status_Source!=OVERCURRENT_SOURCE){
 8001a08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a0c:	2b06      	cmp	r3, #6
 8001a0e:	d045      	beq.n	8001a9c <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
      //else{
        if((AC_Source_sub->V_ac_pk_pos_local > V_ac_pos_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local < V_ac_neg_Limit_local)){
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d20b      	bcs.n	8001a32 <DPC_MISC_CHECK_AC_SOURCE+0x186>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	885b      	ldrh	r3, [r3, #2]
 8001a1e:	8c3a      	ldrh	r2, [r7, #32]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d906      	bls.n	8001a32 <DPC_MISC_CHECK_AC_SOURCE+0x186>
          Status_Source=OVERVOLTAGE_SOURCE;
 8001a24:	2305      	movs	r3, #5
 8001a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(FAULT_OVS);
 8001a2a:	2010      	movs	r0, #16
 8001a2c:	f7ff f8fa 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 8001a30:	e034      	b.n	8001a9c <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        } 
        else if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_Low_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_Low_Limit_local)){
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	8afa      	ldrh	r2, [r7, #22]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d90c      	bls.n	8001a56 <DPC_MISC_CHECK_AC_SOURCE+0x1aa>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	885b      	ldrh	r3, [r3, #2]
 8001a40:	8aba      	ldrh	r2, [r7, #20]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d207      	bcs.n	8001a56 <DPC_MISC_CHECK_AC_SOURCE+0x1aa>
          Status_Source=NO_SOURCE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(ERROR_AC_OFF);
 8001a4c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001a50:	f7ff f8e8 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 8001a54:	e022      	b.n	8001a9c <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        }
        else if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_UV_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_UV_Limit_local)){
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	8b7a      	ldrh	r2, [r7, #26]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d90c      	bls.n	8001a7a <DPC_MISC_CHECK_AC_SOURCE+0x1ce>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	885b      	ldrh	r3, [r3, #2]
 8001a64:	8b3a      	ldrh	r2, [r7, #24]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d207      	bcs.n	8001a7a <DPC_MISC_CHECK_AC_SOURCE+0x1ce>
          Status_Source=UV_SOURCE;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(ERROR_AC_UV); 
 8001a70:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001a74:	f7ff f8d6 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 8001a78:	e010      	b.n	8001a9c <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        }      
        else {
          Status_Source=OK_SOURCE;
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_UVLO_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_UVLO_Limit_local)){
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	8bfa      	ldrh	r2, [r7, #30]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d908      	bls.n	8001a9c <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	885b      	ldrh	r3, [r3, #2]
 8001a8e:	8bba      	ldrh	r2, [r7, #28]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d203      	bcs.n	8001a9c <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
            DPC_FLT_Faulterror_Set(ERROR_AC_UVLO);
 8001a94:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001a98:	f7ff f8c4 	bl	8000c24 <DPC_FLT_Faulterror_Set>
  //    }
  //    Status_Source=OK_SOURCE;   
  //  }    
  //  }
  
  AC_Source_sub->Status_Source=Status_Source;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001aa2:	721a      	strb	r2, [r3, #8]
  return Status_Source;
 8001aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3730      	adds	r7, #48	; 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ab2:	b004      	add	sp, #16
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	3da3d70a 	.word	0x3da3d70a
 8001abc:	40c66666 	.word	0x40c66666

08001ac0 <DPC_PLL_Init>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DPC_PLL_Init(PLL_Struct *PLL_sub, float kp_pll, float ki_pll, float Ts_pll, float phi_2pi, float delta_freq, uint8_t uFeedforward_Hz, FlagStatus satPI_toggle,float PIsat_up,float PIsat_down){
 8001ac0:	b480      	push	{r7}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6278      	str	r0, [r7, #36]	; 0x24
 8001ac8:	ed87 0a08 	vstr	s0, [r7, #32]
 8001acc:	edc7 0a07 	vstr	s1, [r7, #28]
 8001ad0:	ed87 1a06 	vstr	s2, [r7, #24]
 8001ad4:	edc7 1a05 	vstr	s3, [r7, #20]
 8001ad8:	ed87 2a04 	vstr	s4, [r7, #16]
 8001adc:	460b      	mov	r3, r1
 8001ade:	edc7 2a02 	vstr	s5, [r7, #8]
 8001ae2:	ed87 3a01 	vstr	s6, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	73bb      	strb	r3, [r7, #14]

PLL_sub->PLL_Enable=SET;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
PLL_sub->kp_pll=kp_pll;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	6a3a      	ldr	r2, [r7, #32]
 8001af8:	61da      	str	r2, [r3, #28]
PLL_sub->ki_pll=ki_pll;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	621a      	str	r2, [r3, #32]
PLL_sub->k0_pll=kp_pll;
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	6a3a      	ldr	r2, [r7, #32]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
PLL_sub->k1_pll=ki_pll*Ts_pll;
 8001b06:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
PLL_sub->Ts_pll=Ts_pll;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
PLL_sub->pll_phi_2pi=phi_2pi;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	60da      	str	r2, [r3, #12]
PLL_sub->delta_freq=delta_freq;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
PLL_sub->uFreqFeedforwardHz=uFeedforward_Hz;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
PLL_sub->pi_pll.satPI_toggle=satPI_toggle;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	7bba      	ldrb	r2, [r7, #14]
 8001b38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
PLL_sub->pi_pll.PIsat_up=PIsat_up;
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	659a      	str	r2, [r3, #88]	; 0x58
PLL_sub->pi_pll.PIsat_down=PIsat_down;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	65da      	str	r2, [r3, #92]	; 0x5c
if(PLL_sub->PLL_Enable==SET){
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d104      	bne.n	8001b5c <DPC_PLL_Init+0x9c>
PLL_sub->Status_PLL=PLL_IDLE;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
else if(PLL_sub->PLL_Enable==RESET){
PLL_sub->Status_PLL=PLL_DISABLED;
}  
}
 8001b5a:	e008      	b.n	8001b6e <DPC_PLL_Init+0xae>
else if(PLL_sub->PLL_Enable==RESET){
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d103      	bne.n	8001b6e <DPC_PLL_Init+0xae>
PLL_sub->Status_PLL=PLL_DISABLED;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	2205      	movs	r2, #5
 8001b6a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8001b6e:	bf00      	nop
 8001b70:	372c      	adds	r7, #44	; 0x2c
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <DPC_PLL_pllqd_Run>:
  * 
  * @retval STATUS_PLL_TypeDef 
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
STATUS_PLL_TypeDef DPC_PLL_pllqd_Run(PLL_Struct *PLL_sub, VoltageAC_qd_PLL_Struct *VAC_qd_PLL,float *theta_out,  float *omega_pi_out){
 8001b7c:	b5b0      	push	{r4, r5, r7, lr}
 8001b7e:	b092      	sub	sp, #72	; 0x48
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	603b      	str	r3, [r7, #0]
 
  STATUS_PLL_TypeDef STATUS_PLL;
  
  if(PLL_sub->PLL_Enable)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80f0 	beq.w	8001d76 <DPC_PLL_pllqd_Run+0x1fa>
  {
  
//Pass "PLL_sub" data
//float kp_pll_sub=PLL_sub->kp_pll;                                       ///Local variable to pass kp data
//float ki_pll_sub=PLL_sub->ki_pll;                                       ///Local variable to pass ki data
float k0_pll_sub=PLL_sub->k0_pll;                                       ///Local variable to pass k0 data
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
float k1_pll_sub=PLL_sub->k1_pll;                                       ///Local variable to pass k1 data
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
float pll_theta_in_sub = PLL_sub->pll_theta_in;                         /// Loacal variable to pass PLL theta input
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
float pll_theta_out_sub = PLL_sub->pll_theta_out;                       ///Local variable to pass PLL theta output
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
float Ts_pll_sub = PLL_sub->Ts_pll;                                     ///Local variable to pass Ts 
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
FlagStatus satPI_toggle_sub = PLL_sub->pi_pll.satPI_toggle;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
float PIsat_down_sub=PLL_sub->pi_pll.PIsat_down;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
float PIsat_up_sub=PLL_sub->pi_pll.PIsat_up;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
//block!!

//Pass "VAC_qd_PLL" data 
float pll_d_sub=VAC_qd_PLL->Vph_d;      //Local variable to pass Vd
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	623b      	str	r3, [r7, #32]
float pll_q_sub=VAC_qd_PLL->Vph_q;      //Local variable to pass Vq
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	61fb      	str	r3, [r7, #28]
float pll_o_sub=VAC_qd_PLL->Vph_o;      //Local variable to pass Vo
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
//Local Data 
float omega_pi_pll_sub;  //omega_pi_pll_sub represent the output of the PI of PLL
float omega_pi_ff_pll_sub; //omega_pi_pll_sub will be added by feedforward terms
  
  // Set in actual angle (input) the previous value (output) 
  pll_theta_in_sub=pll_theta_out_sub;
 8001bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38
  //Save this new data in the "PLL_sub" struct
  PLL_sub->pll_theta_in=pll_theta_in_sub;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001be4:	601a      	str	r2, [r3, #0]
  
  //Pass and save the input "Vdq0" in "PLL_sub" struct
  PLL_sub->pll_d=pll_d_sub;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a3a      	ldr	r2, [r7, #32]
 8001bea:	611a      	str	r2, [r3, #16]
  PLL_sub->pll_q=pll_q_sub;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	615a      	str	r2, [r3, #20]
  PLL_sub->pll_o=pll_o_sub;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	619a      	str	r2, [r3, #24]
  
  //Configure the PI for PLL (k0, k1, SAT)
  // LOOP FILTER PI         
  PI_PLL.k0=k0_pll_sub; //K0=Kp
 8001bf8:	4a69      	ldr	r2, [pc, #420]	; (8001da0 <DPC_PLL_pllqd_Run+0x224>)
 8001bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bfc:	6353      	str	r3, [r2, #52]	; 0x34
  PI_PLL.k1=k1_pll_sub; //K1=Ki*Ts
 8001bfe:	4a68      	ldr	r2, [pc, #416]	; (8001da0 <DPC_PLL_pllqd_Run+0x224>)
 8001c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c02:	6393      	str	r3, [r2, #56]	; 0x38
  
  PI_PLL.satPI_toggle=satPI_toggle_sub;
 8001c04:	4a66      	ldr	r2, [pc, #408]	; (8001da0 <DPC_PLL_pllqd_Run+0x224>)
 8001c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c0a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
  PI_PLL.PIsat_up=PIsat_up_sub;
 8001c0e:	4a64      	ldr	r2, [pc, #400]	; (8001da0 <DPC_PLL_pllqd_Run+0x224>)
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	6213      	str	r3, [r2, #32]
  PI_PLL.PIsat_down=PIsat_down_sub;
 8001c14:	4a62      	ldr	r2, [pc, #392]	; (8001da0 <DPC_PLL_pllqd_Run+0x224>)
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	6253      	str	r3, [r2, #36]	; 0x24
  
  
  //Task PI    
  PI(0, -pll_q_sub , &PI_PLL);
 8001c1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c1e:	eef1 7a67 	vneg.f32	s15, s15
 8001c22:	485f      	ldr	r0, [pc, #380]	; (8001da0 <DPC_PLL_pllqd_Run+0x224>)
 8001c24:	eef0 0a67 	vmov.f32	s1, s15
 8001c28:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8001da4 <DPC_PLL_pllqd_Run+0x228>
 8001c2c:	f000 fbec 	bl	8002408 <PI>
  
  //Pass the internal PI (PI_PLL) data in the "PLL_sub"
  PLL_sub->pi_pll=PI_PLL;          
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4a5b      	ldr	r2, [pc, #364]	; (8001da0 <DPC_PLL_pllqd_Run+0x224>)
 8001c34:	3338      	adds	r3, #56	; 0x38
 8001c36:	4611      	mov	r1, r2
 8001c38:	2248      	movs	r2, #72	; 0x48
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f00a f9b0 	bl	800bfa0 <memcpy>
  
  omega_pi_pll_sub=PI_PLL.PIout_sat;
 8001c40:	4b57      	ldr	r3, [pc, #348]	; (8001da0 <DPC_PLL_pllqd_Run+0x224>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	617b      	str	r3, [r7, #20]
  
  PLL_sub->omega_piout=omega_pi_pll_sub;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
  
  // FEEDFORWARD
  omega_pi_ff_pll_sub=omega_pi_pll_sub+PLL_sub->uFreqFeedforwardHz;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c62:	edc7 7a04 	vstr	s15, [r7, #16]
  
  //  VTO - SATURATED INTEGRATOR    //Substitude with Integrator() of "integrator.h" 
  
  INTEGRATOR_PLL.Ts=Ts_pll_sub;  //Pass Ts(LocalVariable) to Integrator_PLL(struct)
 8001c66:	4a50      	ldr	r2, [pc, #320]	; (8001da8 <DPC_PLL_pllqd_Run+0x22c>)
 8001c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6a:	6013      	str	r3, [r2, #0]
  Integral(&INTEGRATOR_PLL,omega_pi_ff_pll_sub);   //Task Integrator    
 8001c6c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c70:	484d      	ldr	r0, [pc, #308]	; (8001da8 <DPC_PLL_pllqd_Run+0x22c>)
 8001c72:	f7ff fb5b 	bl	800132c <Integral>
  
  // SATURATE INTEGRATOR
  if (INTEGRATOR_PLL.Integralout>1)
 8001c76:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <DPC_PLL_pllqd_Run+0x22c>)
 8001c78:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c88:	dd04      	ble.n	8001c94 <DPC_PLL_pllqd_Run+0x118>
  {
    INTEGRATOR_PLL.Integralout=0;
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <DPC_PLL_pllqd_Run+0x22c>)
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	e010      	b.n	8001cb6 <DPC_PLL_pllqd_Run+0x13a>
  }
  else if (INTEGRATOR_PLL.Integralout<0)
 8001c94:	4b44      	ldr	r3, [pc, #272]	; (8001da8 <DPC_PLL_pllqd_Run+0x22c>)
 8001c96:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	d504      	bpl.n	8001cae <DPC_PLL_pllqd_Run+0x132>
  {
    INTEGRATOR_PLL.Integralout=1;
 8001ca4:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <DPC_PLL_pllqd_Run+0x22c>)
 8001ca6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	e003      	b.n	8001cb6 <DPC_PLL_pllqd_Run+0x13a>
  }
  else 
  {
    INTEGRATOR_PLL.Integralout=INTEGRATOR_PLL.Integralout;
 8001cae:	4b3e      	ldr	r3, [pc, #248]	; (8001da8 <DPC_PLL_pllqd_Run+0x22c>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	4a3d      	ldr	r2, [pc, #244]	; (8001da8 <DPC_PLL_pllqd_Run+0x22c>)
 8001cb4:	60d3      	str	r3, [r2, #12]
  }
  
  //Pass INTEGRATOR_PLL(struct) to local PLL_sub(struct)
  PLL_sub->integrator_pll=INTEGRATOR_PLL;    
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4a3b      	ldr	r2, [pc, #236]	; (8001da8 <DPC_PLL_pllqd_Run+0x22c>)
 8001cba:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001cbe:	4615      	mov	r5, r2
 8001cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc4:	682b      	ldr	r3, [r5, #0]
 8001cc6:	6023      	str	r3, [r4, #0]
  
  pll_theta_out_sub=INTEGRATOR_PLL.Integralout;
 8001cc8:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <DPC_PLL_pllqd_Run+0x22c>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34
  
  *theta_out=pll_theta_out_sub;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cd2:	601a      	str	r2, [r3, #0]
  *omega_pi_out=omega_pi_ff_pll_sub;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	601a      	str	r2, [r3, #0]
  
  PLL_sub->pll_theta_out=pll_theta_out_sub;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cde:	605a      	str	r2, [r3, #4]
  
  PLL_sub->pll_theta_out_2pi= PLL_sub->pll_theta_out*DOUBLE_PI; //Scale normalized theta to (0-2pi)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ce6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001dac <DPC_PLL_pllqd_Run+0x230>
 8001cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	edc3 7a02 	vstr	s15, [r3, #8]
  
  PLL_sub->omega_ff_pll=omega_pi_ff_pll_sub;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	635a      	str	r2, [r3, #52]	; 0x34
  
if((PLL_sub->omega_ff_pll-PLL_sub->uFreqFeedforwardHz)<PLL_sub->delta_freq&&(PLL_sub->omega_ff_pll-PLL_sub->uFreqFeedforwardHz)>-PLL_sub->delta_freq) ///CHECK
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8001d18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d20:	d51d      	bpl.n	8001d5e <DPC_PLL_pllqd_Run+0x1e2>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8001d40:	eef1 7a67 	vneg.f32	s15, s15
 8001d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4c:	dd07      	ble.n	8001d5e <DPC_PLL_pllqd_Run+0x1e2>
{
  PLL_sub->Status_PLL=PLL_SYNC;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  STATUS_PLL=PLL_SYNC;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001d5c:	e01a      	b.n	8001d94 <DPC_PLL_pllqd_Run+0x218>
}
else
{
  PLL_sub->Status_PLL=PLL_OUTRANGE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2202      	movs	r2, #2
 8001d62:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  STATUS_PLL=PLL_OUTRANGE;
 8001d66:	2302      	movs	r3, #2
 8001d68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  DPC_FLT_Faulterror_Set(ERROR_PLL_OR);
 8001d6c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001d70:	f7fe ff58 	bl	8000c24 <DPC_FLT_Faulterror_Set>
 8001d74:	e00e      	b.n	8001d94 <DPC_PLL_pllqd_Run+0x218>
}

  }
  else{
    PLL_sub->omega_ff_pll=0;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	635a      	str	r2, [r3, #52]	; 0x34
    PLL_sub->pll_theta_out=0;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	605a      	str	r2, [r3, #4]
    PLL_sub->pll_theta_out_2pi=0;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
    STATUS_PLL=PLL_DISABLED;
 8001d8e:	2305      	movs	r3, #5
 8001d90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
return STATUS_PLL;
 8001d94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3748      	adds	r7, #72	; 0x48
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001da0:	200000e8 	.word	0x200000e8
 8001da4:	00000000 	.word	0x00000000
 8001da8:	200000d0 	.word	0x200000d0
 8001dac:	40c90fdb 	.word	0x40c90fdb

08001db0 <DPC_PWM_Send_Burst_PWM>:
  *
  * @retval Null 
  *
  * @note Function valid for STM32G4xx microconroller family   
  */
void DPC_PWM_Send_Burst_PWM(DPC_PWM_TypeDef *tDPC_PWM_loc,float BURST_A,float BURST_B,float BURST_C){
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dbc:	edc7 0a01 	vstr	s1, [r7, #4]
 8001dc0:	ed87 1a00 	vstr	s2, [r7]
//#else
//  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//
//#endif

}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <DPC_PWM_Send_Duty_SPWM>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_Send_Duty_SPWM(DPC_PWM_TypeDef *tDPC_PWM_loc,float VA,float VB,float VC, DMA_PWMDUTY_STRUCT* DMA_SRC)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b095      	sub	sp, #84	; 0x54
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6178      	str	r0, [r7, #20]
 8001dd8:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ddc:	edc7 0a03 	vstr	s1, [r7, #12]
 8001de0:	ed87 1a02 	vstr	s2, [r7, #8]
 8001de4:	6079      	str	r1, [r7, #4]
  
  if(VA>1){VA=1;}
 8001de6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	dd03      	ble.n	8001e00 <DPC_PWM_Send_Duty_SPWM+0x30>
 8001df8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	e00a      	b.n	8001e16 <DPC_PWM_Send_Duty_SPWM+0x46>
  else if(VA<-1){VA=-1;}
 8001e00:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e04:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	d501      	bpl.n	8001e16 <DPC_PWM_Send_Duty_SPWM+0x46>
 8001e12:	4ba9      	ldr	r3, [pc, #676]	; (80020b8 <DPC_PWM_Send_Duty_SPWM+0x2e8>)
 8001e14:	613b      	str	r3, [r7, #16]
  if(VB>=1){VB=1;}
 8001e16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	db03      	blt.n	8001e30 <DPC_PWM_Send_Duty_SPWM+0x60>
 8001e28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	e00a      	b.n	8001e46 <DPC_PWM_Send_Duty_SPWM+0x76>
  else if(VB<-1){VB=-1;}
 8001e30:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e34:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	d501      	bpl.n	8001e46 <DPC_PWM_Send_Duty_SPWM+0x76>
 8001e42:	4b9d      	ldr	r3, [pc, #628]	; (80020b8 <DPC_PWM_Send_Duty_SPWM+0x2e8>)
 8001e44:	60fb      	str	r3, [r7, #12]
  if(VC>=1){VC=1;}
 8001e46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	db03      	blt.n	8001e60 <DPC_PWM_Send_Duty_SPWM+0x90>
 8001e58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	e00a      	b.n	8001e76 <DPC_PWM_Send_Duty_SPWM+0xa6>
  else if(VC<-1){VC=-1;}  
 8001e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e64:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e70:	d501      	bpl.n	8001e76 <DPC_PWM_Send_Duty_SPWM+0xa6>
 8001e72:	4b91      	ldr	r3, [pc, #580]	; (80020b8 <DPC_PWM_Send_Duty_SPWM+0x2e8>)
 8001e74:	60bb      	str	r3, [r7, #8]

  uint16_t PWM_PERIOD_COUNTER_INT;
  PWM_PERIOD_COUNTER_INT=__HAL_HRTIM_GETPERIOD(&PWM_Tim1, HRTIM_TIMERINDEX_TIMER_A);
 8001e76:	4b91      	ldr	r3, [pc, #580]	; (80020bc <DPC_PWM_Send_Duty_SPWM+0x2ec>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7e:	83fb      	strh	r3, [r7, #30]
  uint32_t dutyVBpos;
  uint32_t dutyVBneg;
  uint32_t dutyVCpos;
  uint32_t dutyVCneg;  
  
  if(VA>=0.0f){VApos=VA;VAneg=0;}else if(VA<0.0f){VApos=0.0f;VAneg=-1*VA;}  
 8001e80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	db05      	blt.n	8001e9a <DPC_PWM_Send_Duty_SPWM+0xca>
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e98:	e00f      	b.n	8001eba <DPC_PWM_Send_Duty_SPWM+0xea>
 8001e9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea6:	d508      	bpl.n	8001eba <DPC_PWM_Send_Duty_SPWM+0xea>
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb2:	eef1 7a67 	vneg.f32	s15, s15
 8001eb6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  if(VB>=0.0f){VBpos=VB;VBneg=0;}else if(VB<0.0f){VBpos=0.0f;VBneg=-1*VB;}
 8001eba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ebe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	db05      	blt.n	8001ed4 <DPC_PWM_Send_Duty_SPWM+0x104>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	647b      	str	r3, [r7, #68]	; 0x44
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	643b      	str	r3, [r7, #64]	; 0x40
 8001ed2:	e00f      	b.n	8001ef4 <DPC_PWM_Send_Duty_SPWM+0x124>
 8001ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	d508      	bpl.n	8001ef4 <DPC_PWM_Send_Duty_SPWM+0x124>
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ee8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eec:	eef1 7a67 	vneg.f32	s15, s15
 8001ef0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  if(VC>=0.0f){VCpos=VC;VCneg=0;}else if(VC<0.0f){VCpos=0.0f;VCneg=-1*VC;}
 8001ef4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ef8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	db05      	blt.n	8001f0e <DPC_PWM_Send_Duty_SPWM+0x13e>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f0c:	e00f      	b.n	8001f2e <DPC_PWM_Send_Duty_SPWM+0x15e>
 8001f0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	d508      	bpl.n	8001f2e <DPC_PWM_Send_Duty_SPWM+0x15e>
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f26:	eef1 7a67 	vneg.f32	s15, s15
 8001f2a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
     dutyVAneg=(uint32_t)(VAneg*PWM_PERIOD_COUNTER_INT);
 8001f2e:	8bfb      	ldrh	r3, [r7, #30]
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f38:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f44:	ee17 3a90 	vmov	r3, s15
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30

  tDPC_PWM_loc->VApos=VApos;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f4e:	605a      	str	r2, [r3, #4]
  tDPC_PWM_loc->VBpos=VBpos;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f54:	60da      	str	r2, [r3, #12]
  tDPC_PWM_loc->VCpos=VCpos;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f5a:	615a      	str	r2, [r3, #20]
  tDPC_PWM_loc->VAneg=VAneg;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f60:	609a      	str	r2, [r3, #8]
  tDPC_PWM_loc->VBneg=VBneg;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f66:	611a      	str	r2, [r3, #16]
  tDPC_PWM_loc->VCneg=VCneg;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f6c:	619a      	str	r2, [r3, #24]
  
  dutyVApos=(uint32_t)(VApos*PWM_PERIOD_COUNTER_INT);
 8001f6e:	8bfb      	ldrh	r3, [r7, #30]
 8001f70:	ee07 3a90 	vmov	s15, r3
 8001f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f78:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f84:	ee17 3a90 	vmov	r3, s15
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
  
  dutyVBpos=(uint32_t)(VBpos*PWM_PERIOD_COUNTER_INT);
 8001f8a:	8bfb      	ldrh	r3, [r7, #30]
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f94:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa0:	ee17 3a90 	vmov	r3, s15
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  dutyVBneg=(uint32_t)(VBneg*PWM_PERIOD_COUNTER_INT);
 8001fa6:	8bfb      	ldrh	r3, [r7, #30]
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fbc:	ee17 3a90 	vmov	r3, s15
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  
  dutyVCpos=(uint32_t)(VCpos*PWM_PERIOD_COUNTER_INT);
 8001fc2:	8bfb      	ldrh	r3, [r7, #30]
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fcc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fd8:	ee17 3a90 	vmov	r3, s15
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  dutyVCneg=(uint32_t)(VCneg*PWM_PERIOD_COUNTER_INT); 
 8001fde:	8bfb      	ldrh	r3, [r7, #30]
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ff4:	ee17 3a90 	vmov	r3, s15
 8001ff8:	623b      	str	r3, [r7, #32]
  
  if(dutyVApos>=tDPC_PWM_loc->dutyMaxLim){dutyVApos=tDPC_PWM_loc->dutyMaxLim;}
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002000:	429a      	cmp	r2, r3
 8002002:	d303      	bcc.n	800200c <DPC_PWM_Send_Duty_SPWM+0x23c>
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
 800200a:	e007      	b.n	800201c <DPC_PWM_Send_Duty_SPWM+0x24c>
  else if(dutyVApos<tDPC_PWM_loc->dutyMinLim){dutyVApos=tDPC_PWM_loc->dutyMinLim;}
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002012:	429a      	cmp	r2, r3
 8002014:	d202      	bcs.n	800201c <DPC_PWM_Send_Duty_SPWM+0x24c>
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
  
  if(dutyVAneg>=tDPC_PWM_loc->dutyMaxLim){dutyVAneg=tDPC_PWM_loc->dutyMaxLim;}
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002022:	429a      	cmp	r2, r3
 8002024:	d303      	bcc.n	800202e <DPC_PWM_Send_Duty_SPWM+0x25e>
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
 800202c:	e007      	b.n	800203e <DPC_PWM_Send_Duty_SPWM+0x26e>
  else if(dutyVAneg<tDPC_PWM_loc->dutyMinLim){dutyVAneg=tDPC_PWM_loc->dutyMinLim;}
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002034:	429a      	cmp	r2, r3
 8002036:	d202      	bcs.n	800203e <DPC_PWM_Send_Duty_SPWM+0x26e>
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
  
  if(dutyVBpos>=tDPC_PWM_loc->dutyMaxLim){dutyVBpos=tDPC_PWM_loc->dutyMaxLim;}
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002044:	429a      	cmp	r2, r3
 8002046:	d303      	bcc.n	8002050 <DPC_PWM_Send_Duty_SPWM+0x280>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800204e:	e007      	b.n	8002060 <DPC_PWM_Send_Duty_SPWM+0x290>
  else if(dutyVBpos<tDPC_PWM_loc->dutyMinLim){dutyVBpos=tDPC_PWM_loc->dutyMinLim;}
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002056:	429a      	cmp	r2, r3
 8002058:	d202      	bcs.n	8002060 <DPC_PWM_Send_Duty_SPWM+0x290>
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(dutyVBneg>tDPC_PWM_loc->dutyMaxLim){dutyVBneg=tDPC_PWM_loc->dutyMaxLim;}
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002066:	429a      	cmp	r2, r3
 8002068:	d903      	bls.n	8002072 <DPC_PWM_Send_Duty_SPWM+0x2a2>
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002070:	e007      	b.n	8002082 <DPC_PWM_Send_Duty_SPWM+0x2b2>
  else if(dutyVBneg<tDPC_PWM_loc->dutyMinLim){dutyVBneg=tDPC_PWM_loc->dutyMinLim;}
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002078:	429a      	cmp	r2, r3
 800207a:	d202      	bcs.n	8002082 <DPC_PWM_Send_Duty_SPWM+0x2b2>
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
  
  if(dutyVCpos>=tDPC_PWM_loc->dutyMaxLim){dutyVCpos=tDPC_PWM_loc->dutyMaxLim;}
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002088:	429a      	cmp	r2, r3
 800208a:	d303      	bcc.n	8002094 <DPC_PWM_Send_Duty_SPWM+0x2c4>
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
 8002092:	e007      	b.n	80020a4 <DPC_PWM_Send_Duty_SPWM+0x2d4>
  else if(dutyVCpos<tDPC_PWM_loc->dutyMinLim){dutyVCpos=tDPC_PWM_loc->dutyMinLim;}
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209a:	429a      	cmp	r2, r3
 800209c:	d202      	bcs.n	80020a4 <DPC_PWM_Send_Duty_SPWM+0x2d4>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(dutyVCneg>=tDPC_PWM_loc->dutyMaxLim){dutyVCneg=tDPC_PWM_loc->dutyMaxLim;}
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d308      	bcc.n	80020c0 <DPC_PWM_Send_Duty_SPWM+0x2f0>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	e00c      	b.n	80020d0 <DPC_PWM_Send_Duty_SPWM+0x300>
 80020b6:	bf00      	nop
 80020b8:	bf800000 	.word	0xbf800000
 80020bc:	20000358 	.word	0x20000358
  else if(dutyVCneg<tDPC_PWM_loc->dutyMinLim){dutyVCneg=tDPC_PWM_loc->dutyMinLim;}   
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	6a3a      	ldr	r2, [r7, #32]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d202      	bcs.n	80020d0 <DPC_PWM_Send_Duty_SPWM+0x300>
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	623b      	str	r3, [r7, #32]
//  if (dutyVApos<=500){
//	  //HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA1);
//	  dutyVApos=0;
//  }
  //else HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA1);
  	DMA_SRC->phAA=dutyVApos;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d4:	601a      	str	r2, [r3, #0]
  	DMA_SRC->phAB=dutyVAneg;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020da:	605a      	str	r2, [r3, #4]
  	DMA_SRC->phBA=dutyVBpos;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e0:	609a      	str	r2, [r3, #8]
  	DMA_SRC->phBB=dutyVBneg;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020e6:	60da      	str	r2, [r3, #12]
  	DMA_SRC->phCA=dutyVCpos;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	611a      	str	r2, [r3, #16]
  	DMA_SRC->phCB=dutyVCneg;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a3a      	ldr	r2, [r7, #32]
 80020f2:	615a      	str	r2, [r3, #20]
  	DMA_SRC->phA=dutyVApos+dutyVAneg;
 80020f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	619a      	str	r2, [r3, #24]
  	DMA_SRC->phB=dutyVBpos+dutyVBneg;
 80020fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	441a      	add	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	61da      	str	r2, [r3, #28]
  	DMA_SRC->phC=dutyVCpos+dutyVCneg;
 8002108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	441a      	add	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	621a      	str	r2, [r3, #32]
//#endif
//#else
//  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
//    return;
}
 8002112:	bf00      	nop
 8002114:	3754      	adds	r7, #84	; 0x54
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop

08002120 <DPC_PWM_HRTIM_Start>:
*
* @note Function valid for STM32G4xx microconroller family   
*/

void DPC_PWM_HRTIM_Start(void)
{     
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
//                                 + HRTIM_TIMERID_TIMER_E + HRTIM_TIMERID_TIMER_F);
//  HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1 + HRTIM_OUTPUT_TA2 + HRTIM_OUTPUT_TB1 + HRTIM_OUTPUT_TB2 + HRTIM_OUTPUT_TC1 + HRTIM_OUTPUT_TC2 + + HRTIM_OUTPUT_TD1 + HRTIM_OUTPUT_TD2 + HRTIM_OUTPUT_TE1 + HRTIM_OUTPUT_TE2 + HRTIM_OUTPUT_TF1 + HRTIM_OUTPUT_TF2);

//	HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_A + HRTIM_TIMERID_TIMER_B + HRTIM_TIMERID_TIMER_C);

	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_A);
 8002124:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002128:	4814      	ldr	r0, [pc, #80]	; (800217c <DPC_PWM_HRTIM_Start+0x5c>)
 800212a:	f006 fb9b 	bl	8008864 <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
 800212e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002132:	4812      	ldr	r0, [pc, #72]	; (800217c <DPC_PWM_HRTIM_Start+0x5c>)
 8002134:	f006 fb96 	bl	8008864 <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);
 8002138:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800213c:	480f      	ldr	r0, [pc, #60]	; (800217c <DPC_PWM_HRTIM_Start+0x5c>)
 800213e:	f006 fb91 	bl	8008864 <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCountStart_IT(&PWM_Tim1, HRTIM_TIMERID_TIMER_A);
 8002142:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002146:	480d      	ldr	r0, [pc, #52]	; (800217c <DPC_PWM_HRTIM_Start+0x5c>)
 8002148:	f006 fb1c 	bl	8008784 <HAL_HRTIM_WaveformCountStart_IT>
	HAL_HRTIM_WaveformCountStart_IT(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
 800214c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002150:	480a      	ldr	r0, [pc, #40]	; (800217c <DPC_PWM_HRTIM_Start+0x5c>)
 8002152:	f006 fb17 	bl	8008784 <HAL_HRTIM_WaveformCountStart_IT>
	HAL_HRTIM_WaveformCountStart_IT(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);
 8002156:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800215a:	4808      	ldr	r0, [pc, #32]	; (800217c <DPC_PWM_HRTIM_Start+0x5c>)
 800215c:	f006 fb12 	bl	8008784 <HAL_HRTIM_WaveformCountStart_IT>
	//HAL_HRTIM_WaveformCountStart_DMA(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A);
	//HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
	//HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);

	//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1);
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1);
 8002160:	2101      	movs	r1, #1
 8002162:	4806      	ldr	r0, [pc, #24]	; (800217c <DPC_PWM_HRTIM_Start+0x5c>)
 8002164:	f006 fab3 	bl	80086ce <HAL_HRTIM_WaveformOutputStart>
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TB1);
 8002168:	2104      	movs	r1, #4
 800216a:	4804      	ldr	r0, [pc, #16]	; (800217c <DPC_PWM_HRTIM_Start+0x5c>)
 800216c:	f006 faaf 	bl	80086ce <HAL_HRTIM_WaveformOutputStart>
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TC1);
 8002170:	2110      	movs	r1, #16
 8002172:	4802      	ldr	r0, [pc, #8]	; (800217c <DPC_PWM_HRTIM_Start+0x5c>)
 8002174:	f006 faab 	bl	80086ce <HAL_HRTIM_WaveformOutputStart>
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000358 	.word	0x20000358

08002180 <DPC_PWM_HRTIM_OutDisable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_HRTIM_OutDisable(void)
{     
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
//#ifdef STDES_PFCBIDIR_REV2
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA1);
 8002184:	2101      	movs	r1, #1
 8002186:	4806      	ldr	r0, [pc, #24]	; (80021a0 <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002188:	f006 face 	bl	8008728 <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA2);
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB1);
 800218c:	2104      	movs	r1, #4
 800218e:	4804      	ldr	r0, [pc, #16]	; (80021a0 <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002190:	f006 faca 	bl	8008728 <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB2);
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TC1);
 8002194:	2110      	movs	r1, #16
 8002196:	4802      	ldr	r0, [pc, #8]	; (80021a0 <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002198:	f006 fac6 	bl	8008728 <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA2);
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB2);
//#else
////  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000358 	.word	0x20000358

080021a4 <DPC_PWM_HRTIM_OutEnable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_HRTIM_OutEnable(void)
{     
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
//#ifdef STDES_PFCBIDIR_REV2
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA1);
 80021a8:	2101      	movs	r1, #1
 80021aa:	4806      	ldr	r0, [pc, #24]	; (80021c4 <DPC_PWM_HRTIM_OutEnable+0x20>)
 80021ac:	f006 fa8f 	bl	80086ce <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA2);
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB1);
 80021b0:	2104      	movs	r1, #4
 80021b2:	4804      	ldr	r0, [pc, #16]	; (80021c4 <DPC_PWM_HRTIM_OutEnable+0x20>)
 80021b4:	f006 fa8b 	bl	80086ce <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB2);
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TC1);
 80021b8:	2110      	movs	r1, #16
 80021ba:	4802      	ldr	r0, [pc, #8]	; (80021c4 <DPC_PWM_HRTIM_OutEnable+0x20>)
 80021bc:	f006 fa87 	bl	80086ce <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA2);
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB2);
//#else
////  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000358 	.word	0x20000358

080021c8 <DPC_PWM_OutDisable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_OutDisable(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
//#ifdef USE_ADVTIM
//    DPC_PWM_ADVTIM_OutDisable();                                                ///Safe: Disable ADVTIM outputs if enabled
//#elif USE_HRTIM
    DPC_PWM_HRTIM_OutDisable();                                                 ///Safe: Disable HRTIM outputs if enabled
 80021cc:	f7ff ffd8 	bl	8002180 <DPC_PWM_HRTIM_OutDisable>
//#else
//    SELECT DEFINE
//#endif
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <DPC_PWM_OutEnable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_OutEnable(DPC_PWM_TypeDef *tDPC_PWM_loc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if(tDPC_PWM_loc->DPC_PWM_Status==PWM_Armed){    
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <DPC_PWM_OutEnable+0x1e>
//#ifdef USE_ADVTIM
//    DPC_PWM_ADVTIM_OutEnable();
//#elif USE_HRTIM
    DPC_PWM_HRTIM_OutEnable();
 80021e4:	f7ff ffde 	bl	80021a4 <DPC_PWM_HRTIM_OutEnable>
    HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 80021e8:	2201      	movs	r2, #1
 80021ea:	2120      	movs	r1, #32
 80021ec:	4803      	ldr	r0, [pc, #12]	; (80021fc <DPC_PWM_OutEnable+0x28>)
 80021ee:	f005 fa2d 	bl	800764c <HAL_GPIO_WritePin>
//#else
//    SELECT DEFINE
//#endif
  }
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	48000800 	.word	0x48000800

08002200 <DPC_PWM_Start>:
*
* @note Function valid for STM32G4xx microconroller family   
*/

void DPC_PWM_Start(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
//#ifdef USE_ADVTIM
//  DPC_PWM_ADVTIM_PWMStart();                                                        ///
//  DPC_PWM_ADVTIM_OutDisable();                                                  ///Safe: Disable ADVTIM outputs if enabled
//#elif USE_HRTIM
  DPC_PWM_HRTIM_Start();                                                        ///
 8002204:	f7ff ff8c 	bl	8002120 <DPC_PWM_HRTIM_Start>
  DPC_PWM_HRTIM_OutDisable();                                                   ///Safe: Disable HRTIM outputs if enabled
 8002208:	f7ff ffba 	bl	8002180 <DPC_PWM_HRTIM_OutDisable>
//#else
//  SELECT DEFINE
//#endif
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}

08002210 <DPC_PWM_Init>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_Init(uint32_t  BURST_PWM_Freq_Desidered,uint32_t  PWM_Freq_Desidered,DPC_PWM_StatusTypeDef DPC_PWM_SET, DPC_PWM_TypeDef *tDPC_PWM_loc, DMA_PWMDUTY_STRUCT *DUTY_SRC)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0a0      	sub	sp, #128	; 0x80
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	71fb      	strb	r3, [r7, #7]

  uint32_t PWM_Period;                                                          ///
  uint32_t BURST_PWM_Period;                                                    ///  
  uint32_t Timers_Clock;                                                        ///
  uint32_t f_tim_ket_ck;                                                        ///  
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	2260      	movs	r2, #96	; 0x60
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f009 fec4 	bl	800bfb6 <memset>
  
  
  Timers_Clock=HAL_RCC_GetPCLK2Freq();                                      ///
 800222e:	f008 fcf7 	bl	800ac20 <HAL_RCC_GetPCLK2Freq>
 8002232:	67f8      	str	r0, [r7, #124]	; 0x7c
  f_tim_ket_ck=Timers_Clock;                                                /// Represent frequency Internal clock source (tim_ker_ck) expressed in Hz - see: pag-1063 RM0440 Rev1
 8002234:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002236:	67bb      	str	r3, [r7, #120]	; 0x78
  PWM_Period=((f_tim_ket_ck/PWM_Freq_Desidered) - 1)*16;                       ///  uint32_t PWM_Period;
 8002238:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002240:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8002244:	3b01      	subs	r3, #1
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	677b      	str	r3, [r7, #116]	; 0x74
  BURST_PWM_Period=((f_tim_ket_ck/BURST_PWM_Freq_Desidered) - 1);           ///  uint32_t PWM_Period;
 800224a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	673b      	str	r3, [r7, #112]	; 0x70
  tDPC_PWM_loc->dutyMaxLim=tempDEF_dutyMaxLim;                                  /// Adapt to PRESCALER
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f248 42cf 	movw	r2, #33999	; 0x84cf
 800225c:	61da      	str	r2, [r3, #28]
  tDPC_PWM_loc->dutyMinLim=tempDEF_dutyMinLim;                                  /// Adapt to PRESCALER
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	621a      	str	r2, [r3, #32]
  
  tDPC_PWM_loc->PWM_Period=PWM_Period;                                          ///
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002268:	625a      	str	r2, [r3, #36]	; 0x24
  tDPC_PWM_loc->BURST_PWM_Period=BURST_PWM_Period;                              ///  
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
  tDPC_PWM_loc->DPC_PWM_Status=DPC_PWM_SET;                                     ///
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	79fa      	ldrb	r2, [r7, #7]
 8002274:	701a      	strb	r2, [r3, #0]

  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST;
 800227a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800227e:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMASize = 0x1;
 8002280:	2301      	movs	r3, #1
 8002282:	623b      	str	r3, [r7, #32]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8002288:	2300      	movs	r3, #0
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002290:	2300      	movs	r3, #0
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8002294:	2300      	movs	r3, #0
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002298:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800229c:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800229e:	2300      	movs	r3, #0
 80022a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80022a6:	2300      	movs	r3, #0
 80022a8:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80022aa:	2300      	movs	r3, #0
 80022ac:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1|HRTIM_TIMFAULTENABLE_FAULT3;
 80022ae:	2305      	movs	r3, #5
 80022b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80022b6:	2300      	movs	r3, #0
 80022b8:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80022ba:	2300      	movs	r3, #0
 80022bc:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80022be:	2300      	movs	r3, #0
 80022c0:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 80022c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022ca:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phA;
 80022d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022d4:	3318      	adds	r3, #24
 80022d6:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[0].CMP1xR);
 80022d8:	4b20      	ldr	r3, [pc, #128]	; (800235c <DPC_PWM_Init+0x14c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	339c      	adds	r3, #156	; 0x9c
 80022de:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	461a      	mov	r2, r3
 80022e6:	2100      	movs	r1, #0
 80022e8:	481c      	ldr	r0, [pc, #112]	; (800235c <DPC_PWM_Init+0x14c>)
 80022ea:	f005 ffab 	bl	8008244 <HAL_HRTIM_WaveformTimerConfig>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <DPC_PWM_Init+0xe8>
  {
    Error_Handler();
 80022f4:	f002 fa16 	bl	8004724 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phB;
 80022f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022fc:	331c      	adds	r3, #28
 80022fe:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[1].CMP1xR);
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <DPC_PWM_Init+0x14c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8002308:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 800230a:	f107 0310 	add.w	r3, r7, #16
 800230e:	461a      	mov	r2, r3
 8002310:	2101      	movs	r1, #1
 8002312:	4812      	ldr	r0, [pc, #72]	; (800235c <DPC_PWM_Init+0x14c>)
 8002314:	f005 ff96 	bl	8008244 <HAL_HRTIM_WaveformTimerConfig>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <DPC_PWM_Init+0x112>
  {
    Error_Handler();
 800231e:	f002 fa01 	bl	8004724 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phC;
 8002322:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002326:	3320      	adds	r3, #32
 8002328:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[2].CMP1xR);
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <DPC_PWM_Init+0x14c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002332:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	461a      	mov	r2, r3
 800233a:	2102      	movs	r1, #2
 800233c:	4807      	ldr	r0, [pc, #28]	; (800235c <DPC_PWM_Init+0x14c>)
 800233e:	f005 ff81 	bl	8008244 <HAL_HRTIM_WaveformTimerConfig>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <DPC_PWM_Init+0x13c>
  {
    Error_Handler();
 8002348:	f002 f9ec 	bl	8004724 <Error_Handler>
  }


  DPC_PWM_Start();                                                              ///
 800234c:	f7ff ff58 	bl	8002200 <DPC_PWM_Start>
  DPC_PWM_OutDisable();                                                         ///Safe: Disable PWM outputs if enabled 
 8002350:	f7ff ff3a 	bl	80021c8 <DPC_PWM_OutDisable>
}
 8002354:	bf00      	nop
 8002356:	3780      	adds	r7, #128	; 0x80
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000358 	.word	0x20000358

08002360 <DPC_PI_Init>:
* @retval None
*
* @note Function valid for STM32G4xx microconroller family  
*/  
void DPC_PI_Init(PI_STRUCT_t *pPI,float Init_Val_Kp,float Init_Val_Ki,float Init_Val_Ts,float Init_PIsat_up, float Init_PIsat_down,FlagStatus satPI_toggle_local,FlagStatus antiwindPI_toggle_local,float Antiwindup_Gain_local)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	61f8      	str	r0, [r7, #28]
 8002368:	ed87 0a06 	vstr	s0, [r7, #24]
 800236c:	edc7 0a05 	vstr	s1, [r7, #20]
 8002370:	ed87 1a04 	vstr	s2, [r7, #16]
 8002374:	edc7 1a03 	vstr	s3, [r7, #12]
 8002378:	ed87 2a02 	vstr	s4, [r7, #8]
 800237c:	460b      	mov	r3, r1
 800237e:	edc7 2a00 	vstr	s5, [r7]
 8002382:	71fb      	strb	r3, [r7, #7]
 8002384:	4613      	mov	r3, r2
 8002386:	71bb      	strb	r3, [r7, #6]
  pPI->Kp=Init_Val_Kp;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	609a      	str	r2, [r3, #8]
  pPI->Ki=Init_Val_Ki;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	60da      	str	r2, [r3, #12]
  pPI->Ts=Init_Val_Ts;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	611a      	str	r2, [r3, #16]
  pPI->Integral=0;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	615a      	str	r2, [r3, #20]
  pPI->PIout=0;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	619a      	str	r2, [r3, #24]
  pPI->PIsat_up=Init_PIsat_up;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	621a      	str	r2, [r3, #32]
  pPI->PIsat_down=Init_PIsat_down;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24
  pPI->error=0;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
  pPI->Integralout=0;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c
  pPI->resetPI=RESET;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pPI->k0=Init_Val_Kp; //K0=Kp
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
  pPI->k1=Init_Val_Ki*Init_Val_Ts; //K1=Ki*Ts
 80023d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80023d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  pPI->satPI_toggle=satPI_toggle_local;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	79fa      	ldrb	r2, [r7, #7]
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pPI->antiwindPI_toggle=antiwindPI_toggle_local;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	79ba      	ldrb	r2, [r7, #6]
 80023f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  pPI->Antiwindup_Gain=Antiwindup_Gain_local;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44
}
 80023fc:	bf00      	nop
 80023fe:	3724      	adds	r7, #36	; 0x24
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <PI>:
* @retval float Return output data of PI regulator
*
* @note Function valid for STM32G4xx microconroller family  
*/
float PI(float Ref, float Feed , PI_STRUCT_t *pPI)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002412:	edc7 0a02 	vstr	s1, [r7, #8]
 8002416:	6078      	str	r0, [r7, #4]
pPI->Ref=Ref;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	601a      	str	r2, [r3, #0]
pPI->Feed=Feed;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	605a      	str	r2, [r3, #4]

  if(pPI->resetPI==SET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800242a:	2b01      	cmp	r3, #1
 800242c:	d104      	bne.n	8002438 <PI+0x30>
  {
    pPI->Integral=0;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
 8002436:	e031      	b.n	800249c <PI+0x94>
  }
  else{
    pPI->error=(float)Ref-(float)Feed;
 8002438:	ed97 7a03 	vldr	s14, [r7, #12]
 800243c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pPI->Integral=pPI->Integral+(pPI->k1*pPI->error)+pPI->Antiwindup_Term;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800245c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800246a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	edc3 7a05 	vstr	s15, [r3, #20]
    pPI->Integralout=pPI->Integral;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c
    pPI->PIout=(pPI->k0*pPI->error)+pPI->Integralout;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	edc3 7a06 	vstr	s15, [r3, #24]
  }

  //Start Check Saturation
  if (pPI->satPI_toggle==SET){
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d13e      	bne.n	8002524 <PI+0x11c>
    //Saturation
    if(    pPI->PIout>pPI->PIsat_up)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	ed93 7a06 	vldr	s14, [r3, #24]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80024b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	dd04      	ble.n	80024c6 <PI+0xbe>
    {
      pPI->PIout_sat=pPI->PIsat_up;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1a      	ldr	r2, [r3, #32]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	61da      	str	r2, [r3, #28]
 80024c4:	e013      	b.n	80024ee <PI+0xe6>
    }
    else if(    pPI->PIout<pPI->PIsat_down)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80024d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024da:	d504      	bpl.n	80024e6 <PI+0xde>
    {
      pPI->PIout_sat=pPI->PIsat_down;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	61da      	str	r2, [r3, #28]
 80024e4:	e003      	b.n	80024ee <PI+0xe6>
    }
    else {
      pPI->PIout_sat=pPI->PIout;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	61da      	str	r2, [r3, #28]
    }
     
    //Start Check Antiwindup
    if (pPI->antiwindPI_toggle==SET){
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d110      	bne.n	800251a <PI+0x112>
      //Saturation
      pPI->Antiwindup_Term=(pPI->PIout_sat-pPI->PIout)*pPI->Antiwindup_Gain;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	edd3 7a06 	vldr	s15, [r3, #24]
 8002504:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800250e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8002518:	e00c      	b.n	8002534 <PI+0x12c>
    }
    else {
      pPI->Antiwindup_Term=0;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	63da      	str	r2, [r3, #60]	; 0x3c
 8002522:	e007      	b.n	8002534 <PI+0x12c>
    }
    //End Check Antiwindup    
  }
  else {
    pPI->PIout_sat=pPI->PIout;  
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	61da      	str	r2, [r3, #28]
    pPI->Antiwindup_Term=0;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  //End Check Saturation
  
  return pPI->PIout_sat;  
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	ee07 3a90 	vmov	s15, r3
}
 800253c:	eeb0 0a67 	vmov.f32	s0, s15
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <TimeoutMng>:
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	2300      	movs	r3, #0
 8002554:	71fb      	strb	r3, [r7, #7]
 8002556:	e01e      	b.n	8002596 <TimeoutMng+0x4a>
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	4a13      	ldr	r2, [pc, #76]	; (80025a8 <TimeoutMng+0x5c>)
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	791b      	ldrb	r3, [r3, #4]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d114      	bne.n	8002590 <TimeoutMng+0x44>
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4a0f      	ldr	r2, [pc, #60]	; (80025a8 <TimeoutMng+0x5c>)
 800256a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <TimeoutMng+0x34>
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <TimeoutMng+0x5c>)
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	2202      	movs	r2, #2
 800257c:	711a      	strb	r2, [r3, #4]
 800257e:	e007      	b.n	8002590 <TimeoutMng+0x44>
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <TimeoutMng+0x5c>)
 8002584:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002588:	3a01      	subs	r2, #1
 800258a:	4907      	ldr	r1, [pc, #28]	; (80025a8 <TimeoutMng+0x5c>)
 800258c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	3301      	adds	r3, #1
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	2b05      	cmp	r3, #5
 800259a:	d9dd      	bls.n	8002558 <TimeoutMng+0xc>
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	20000130 	.word	0x20000130

080025ac <Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void Park(float alpha, float beta, float theta,float phi, float *d, float *q){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	ed87 0a05 	vstr	s0, [r7, #20]
 80025b6:	edc7 0a04 	vstr	s1, [r7, #16]
 80025ba:	ed87 1a03 	vstr	s2, [r7, #12]
 80025be:	edc7 1a02 	vstr	s3, [r7, #8]
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
    float theta_act=theta+phi;
 80025c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80025ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosine = FastCos(theta_act);
 80025d6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80025da:	f7fe fe8f 	bl	80012fc <FastCos>
 80025de:	ed87 0a08 	vstr	s0, [r7, #32]
    float sine = FastSin(theta_act);
 80025e2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80025e6:	f7fe fe3d 	bl	8001264 <FastSin>
 80025ea:	ed87 0a07 	vstr	s0, [r7, #28]
    *d = alpha*cosine + beta*sine;
 80025ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80025f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80025f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025fa:	edd7 6a04 	vldr	s13, [r7, #16]
 80025fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	edc3 7a00 	vstr	s15, [r3]
    *q = -alpha*sine + beta*cosine;
 8002610:	edd7 7a05 	vldr	s15, [r7, #20]
 8002614:	eeb1 7a67 	vneg.f32	s14, s15
 8002618:	edd7 7a07 	vldr	s15, [r7, #28]
 800261c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002620:	edd7 6a04 	vldr	s13, [r7, #16]
 8002624:	edd7 7a08 	vldr	s15, [r7, #32]
 8002628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	edc3 7a00 	vstr	s15, [r3]
}
 8002636:	bf00      	nop
 8002638:	3728      	adds	r7, #40	; 0x28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <InvPark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void InvPark(float d, float q, float theta, float phi, float *alpha, float *beta){
 800263e:	b580      	push	{r7, lr}
 8002640:	b08a      	sub	sp, #40	; 0x28
 8002642:	af00      	add	r7, sp, #0
 8002644:	ed87 0a05 	vstr	s0, [r7, #20]
 8002648:	edc7 0a04 	vstr	s1, [r7, #16]
 800264c:	ed87 1a03 	vstr	s2, [r7, #12]
 8002650:	edc7 1a02 	vstr	s3, [r7, #8]
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
    float theta_act=theta+phi;
 8002658:	ed97 7a03 	vldr	s14, [r7, #12]
 800265c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002664:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosine = FastCos(theta_act);
 8002668:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800266c:	f7fe fe46 	bl	80012fc <FastCos>
 8002670:	ed87 0a08 	vstr	s0, [r7, #32]
    float sine = FastSin(theta_act);
 8002674:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002678:	f7fe fdf4 	bl	8001264 <FastSin>
 800267c:	ed87 0a07 	vstr	s0, [r7, #28]
    *alpha = d*cosine - q*sine;
 8002680:	ed97 7a05 	vldr	s14, [r7, #20]
 8002684:	edd7 7a08 	vldr	s15, [r7, #32]
 8002688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800268c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002690:	edd7 7a07 	vldr	s15, [r7, #28]
 8002694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	edc3 7a00 	vstr	s15, [r3]
    *beta =  d*sine + q*cosine;
 80026a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80026a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80026aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ae:	edd7 6a04 	vldr	s13, [r7, #16]
 80026b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80026b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	edc3 7a00 	vstr	s15, [r3]
    }
 80026c4:	bf00      	nop
 80026c6:	3728      	adds	r7, #40	; 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	0000      	movs	r0, r0
	...

080026d0 <Clarke>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void Clarke(float a, float b,float c, float *alpha, float *beta){
 80026d0:	b5b0      	push	{r4, r5, r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80026da:	edc7 0a04 	vstr	s1, [r7, #16]
 80026de:	ed87 1a03 	vstr	s2, [r7, #12]
 80026e2:	60b8      	str	r0, [r7, #8]
 80026e4:	6079      	str	r1, [r7, #4]
    *alpha = 0.666f*(a-(0.5f*b)-(0.5f*c));
 80026e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80026ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80026f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80026fe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002702:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002788 <Clarke+0xb8>
 800270e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	edc3 7a00 	vstr	s15, [r3]
    *beta = 0.666666*(0.866025*b - 0.866025*c);
 8002718:	6938      	ldr	r0, [r7, #16]
 800271a:	f7fd fee1 	bl	80004e0 <__aeabi_f2d>
 800271e:	a316      	add	r3, pc, #88	; (adr r3, 8002778 <Clarke+0xa8>)
 8002720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002724:	f7fd ff34 	bl	8000590 <__aeabi_dmul>
 8002728:	4603      	mov	r3, r0
 800272a:	460c      	mov	r4, r1
 800272c:	4625      	mov	r5, r4
 800272e:	461c      	mov	r4, r3
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7fd fed5 	bl	80004e0 <__aeabi_f2d>
 8002736:	a310      	add	r3, pc, #64	; (adr r3, 8002778 <Clarke+0xa8>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	f7fd ff28 	bl	8000590 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4620      	mov	r0, r4
 8002746:	4629      	mov	r1, r5
 8002748:	f7fd fd6a 	bl	8000220 <__aeabi_dsub>
 800274c:	4603      	mov	r3, r0
 800274e:	460c      	mov	r4, r1
 8002750:	4618      	mov	r0, r3
 8002752:	4621      	mov	r1, r4
 8002754:	a30a      	add	r3, pc, #40	; (adr r3, 8002780 <Clarke+0xb0>)
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	f7fd ff19 	bl	8000590 <__aeabi_dmul>
 800275e:	4603      	mov	r3, r0
 8002760:	460c      	mov	r4, r1
 8002762:	4618      	mov	r0, r3
 8002764:	4621      	mov	r1, r4
 8002766:	f7fe f945 	bl	80009f4 <__aeabi_d2f>
 800276a:	4602      	mov	r2, r0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	601a      	str	r2, [r3, #0]
    }
 8002770:	bf00      	nop
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bdb0      	pop	{r4, r5, r7, pc}
 8002778:	0f9096bc 	.word	0x0f9096bc
 800277c:	3febb67a 	.word	0x3febb67a
 8002780:	ef6b5d46 	.word	0xef6b5d46
 8002784:	3fe55553 	.word	0x3fe55553
 8002788:	3f2a7efa 	.word	0x3f2a7efa

0800278c <InvClarke>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void InvClarke(float alpha, float beta, float *a, float *b, float *c){
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	ed87 0a05 	vstr	s0, [r7, #20]
 8002796:	edc7 0a04 	vstr	s1, [r7, #16]
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
    *a = alpha;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	601a      	str	r2, [r3, #0]
    *b = 0.5f*(-alpha + 1.73205080757f*beta);
 80027a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80027aa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80027fc <InvClarke+0x70>
 80027ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	edc3 7a00 	vstr	s15, [r3]
    *c = 0.5f*(-alpha - 1.73205080757f*beta);
 80027c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027cc:	eeb1 7a67 	vneg.f32	s14, s15
 80027d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80027d4:	eddf 6a09 	vldr	s13, [pc, #36]	; 80027fc <InvClarke+0x70>
 80027d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	edc3 7a00 	vstr	s15, [r3]
} 
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	3fddb3d7 	.word	0x3fddb3d7

08002800 <Clarke_Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void Clarke_Park(float a, float b, float c, float theta,float phi, float *d, float *q,float *o){
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	; 0x30
 8002804:	af00      	add	r7, sp, #0
 8002806:	ed87 0a07 	vstr	s0, [r7, #28]
 800280a:	edc7 0a06 	vstr	s1, [r7, #24]
 800280e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002812:	edc7 1a04 	vstr	s3, [r7, #16]
 8002816:	ed87 2a03 	vstr	s4, [r7, #12]
 800281a:	60b8      	str	r0, [r7, #8]
 800281c:	6079      	str	r1, [r7, #4]
 800281e:	603a      	str	r2, [r7, #0]
float beta_sub;
float d_sub;
float q_sub;
//float o_sub;  
  
Clarke(a, b, c, &alpha_sub, &beta_sub);
 8002820:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	ed97 1a05 	vldr	s2, [r7, #20]
 8002830:	edd7 0a06 	vldr	s1, [r7, #24]
 8002834:	ed97 0a07 	vldr	s0, [r7, #28]
 8002838:	f7ff ff4a 	bl	80026d0 <Clarke>
Park(alpha_sub, beta_sub, theta,phi, &d_sub, &q_sub);
 800283c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002840:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002844:	f107 0220 	add.w	r2, r7, #32
 8002848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	edd7 1a03 	vldr	s3, [r7, #12]
 8002854:	ed97 1a04 	vldr	s2, [r7, #16]
 8002858:	eef0 0a47 	vmov.f32	s1, s14
 800285c:	eeb0 0a67 	vmov.f32	s0, s15
 8002860:	f7ff fea4 	bl	80025ac <Park>


*d=d_sub;
 8002864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	601a      	str	r2, [r3, #0]
*q=q_sub;
 800286a:	6a3a      	ldr	r2, [r7, #32]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	601a      	str	r2, [r3, #0]
//*o=o_sub=0;

    
    
}
 8002870:	bf00      	nop
 8002872:	3730      	adds	r7, #48	; 0x30
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <Run_ClarkePark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void Run_ClarkePark(TRANSFORM_ABC_t* abc_sub,float theta_sub,float phi_sub,TRANSFORM_QDO_t* out_cl_pa_sub ){
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	ed87 0a02 	vstr	s0, [r7, #8]
 8002884:	edc7 0a01 	vstr	s1, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
 
float pll_d_sub;
float pll_q_sub;
float pll_o_sub;
 
  Clarke_Park(abc_sub->axA, abc_sub->axB, abc_sub->axC,theta_sub,phi_sub,&pll_d_sub,&pll_q_sub,&pll_o_sub);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	edd3 7a00 	vldr	s15, [r3]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	ed93 7a01 	vldr	s14, [r3, #4]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	edd3 6a02 	vldr	s13, [r3, #8]
 800289c:	f107 0214 	add.w	r2, r7, #20
 80028a0:	f107 0118 	add.w	r1, r7, #24
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	4618      	mov	r0, r3
 80028aa:	ed97 2a01 	vldr	s4, [r7, #4]
 80028ae:	edd7 1a02 	vldr	s3, [r7, #8]
 80028b2:	eeb0 1a66 	vmov.f32	s2, s13
 80028b6:	eef0 0a47 	vmov.f32	s1, s14
 80028ba:	eeb0 0a67 	vmov.f32	s0, s15
 80028be:	f7ff ff9f 	bl	8002800 <Clarke_Park>
  
  
  out_cl_pa_sub->axd=pll_d_sub;
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	601a      	str	r2, [r3, #0]
  out_cl_pa_sub->axq=pll_q_sub;
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	605a      	str	r2, [r3, #4]
  out_cl_pa_sub->axo=pll_o_sub;
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <inv_Clarke_Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void inv_Clarke_Park(float d, float q, float o, float theta,float phi, float *a, float *b,float *c){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08e      	sub	sp, #56	; 0x38
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	ed87 0a07 	vstr	s0, [r7, #28]
 80028e6:	edc7 0a06 	vstr	s1, [r7, #24]
 80028ea:	ed87 1a05 	vstr	s2, [r7, #20]
 80028ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80028f2:	ed87 2a03 	vstr	s4, [r7, #12]
 80028f6:	60b8      	str	r0, [r7, #8]
 80028f8:	6079      	str	r1, [r7, #4]
 80028fa:	603a      	str	r2, [r7, #0]
float beta_sub;
float a_sub;
float b_sub;
float c_sub;

InvPark(d, q, theta,phi,&alpha_sub, &beta_sub);
 80028fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002900:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	edd7 1a03 	vldr	s3, [r7, #12]
 800290c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002910:	edd7 0a06 	vldr	s1, [r7, #24]
 8002914:	ed97 0a07 	vldr	s0, [r7, #28]
 8002918:	f7ff fe91 	bl	800263e <InvPark>
InvClarke(alpha_sub, beta_sub, &a_sub, &b_sub, &c_sub);
 800291c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002920:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002924:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002928:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800292c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002930:	4618      	mov	r0, r3
 8002932:	eef0 0a47 	vmov.f32	s1, s14
 8002936:	eeb0 0a67 	vmov.f32	s0, s15
 800293a:	f7ff ff27 	bl	800278c <InvClarke>

*a=a_sub;
 800293e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	601a      	str	r2, [r3, #0]
*b=b_sub;
 8002944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	601a      	str	r2, [r3, #0]
*c=c_sub;
 800294a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	601a      	str	r2, [r3, #0]
} 
 8002950:	bf00      	nop
 8002952:	3738      	adds	r7, #56	; 0x38
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <Run_Inv_ClarkePark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void Run_Inv_ClarkePark(TRANSFORM_QDO_t* dqo_sub,float theta_sub,float phi_sub,TRANSFORM_ABC_t* out_inv_cl_pa_sub ){
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	ed87 0a02 	vstr	s0, [r7, #8]
 8002964:	edc7 0a01 	vstr	s1, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
 
float a_sub;
float b_sub;
float c_sub;
 
  inv_Clarke_Park(dqo_sub->axd, dqo_sub->axq, dqo_sub->axo,theta_sub,phi_sub,&a_sub,&b_sub,&c_sub);  
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	ed93 7a01 	vldr	s14, [r3, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	edd3 6a02 	vldr	s13, [r3, #8]
 800297c:	f107 0214 	add.w	r2, r7, #20
 8002980:	f107 0118 	add.w	r1, r7, #24
 8002984:	f107 031c 	add.w	r3, r7, #28
 8002988:	4618      	mov	r0, r3
 800298a:	ed97 2a01 	vldr	s4, [r7, #4]
 800298e:	edd7 1a02 	vldr	s3, [r7, #8]
 8002992:	eeb0 1a66 	vmov.f32	s2, s13
 8002996:	eef0 0a47 	vmov.f32	s1, s14
 800299a:	eeb0 0a67 	vmov.f32	s0, s15
 800299e:	f7ff ff9d 	bl	80028dc <inv_Clarke_Park>
  
  out_inv_cl_pa_sub->axA=a_sub;
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	601a      	str	r2, [r3, #0]
  out_inv_cl_pa_sub->axB=b_sub;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	605a      	str	r2, [r3, #4]
  out_inv_cl_pa_sub->axC=c_sub;
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	609a      	str	r2, [r3, #8]
}
 80029b4:	bf00      	nop
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <ADC_Voltage_AC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC_Voltage_AC_ProcessData(uint32_t* p_Data_Sub, VoltageAC_ADC_NORM_Struct* VOLTAGE_ADC_AC_IN_NORM_Sub){
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phA=((float)(p_Data_Sub[0])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029d2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002a3c <ADC_Voltage_AC_ProcessData+0x80>
 80029d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phB=((float)(p_Data_Sub[1])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029f6:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002a3c <ADC_Voltage_AC_ProcessData+0x80>
 80029fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	edc3 7a01 	vstr	s15, [r3, #4]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phC=((float)(p_Data_Sub[2])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3308      	adds	r3, #8
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a1a:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002a3c <ADC_Voltage_AC_ProcessData+0x80>
 8002a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	45000000 	.word	0x45000000

08002a40 <ADC2Phy_Voltage_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_Voltage_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, VoltageAC_ADC_NORM_Struct* VOLTAGE_ADC_AC_IN_NORM_Sub){
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  
  float B_Vac=DPC_ADC_Conf->B_Vac;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	617b      	str	r3, [r7, #20]
//  float G_Vac=DPC_ADC_Conf->G_Vac;
  float invG_Vac=DPC_ADC_Conf->invG_Vac;  
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	613b      	str	r3, [r7, #16]
  
  VOLTAGE_ADC_AC_IN_NORM_Sub->phA=((float)((int16_t)p_Data_Sub[0]-B_Vac)*(float)(invG_Vac));    
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a66:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phB=((float)((int16_t)p_Data_Sub[1]-B_Vac)*(float)(invG_Vac));    
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a94:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	edc3 7a01 	vstr	s15, [r3, #4]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phC=((float)((int16_t)p_Data_Sub[2]-B_Vac)*(float)(invG_Vac));    
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3308      	adds	r3, #8
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ab2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aba:	edd7 7a04 	vldr	s15, [r7, #16]
 8002abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <ADC_Voltage_DC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC_Voltage_DC_ProcessData(uint32_t* p_Data_Sub, VoltageDC_ADC_NORM_Struct* VOLTAGE_ADC_DC_IN_NORM_Sub){
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_pos=((float)(p_Data_Sub[0])/(float)(1<<11));    //(float)(1<<11)==(2.44140625e-4*2)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002aea:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002b20 <ADC_Voltage_DC_ProcessData+0x4c>
 8002aee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_neg=((float)(p_Data_Sub[1])/(float)(1<<11));    //(float)(1<<11)==(2.44140625e-4*2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3304      	adds	r3, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b06:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002b20 <ADC_Voltage_DC_ProcessData+0x4c>
 8002b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	edc3 7a01 	vstr	s15, [r3, #4]
}  
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	45000000 	.word	0x45000000

08002b24 <ADC2Phy_DC_Voltage_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_DC_Voltage_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, VoltageDC_ADC_NORM_Struct* VOLTAGE_ADC_DC_IN_NORM_Sub){
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  
  float B_Vdc=DPC_ADC_Conf->B_Vdc;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	617b      	str	r3, [r7, #20]
//  float G_Vdc=DPC_ADC_Conf->G_Vdc;
  float invG_Vdc=DPC_ADC_Conf->invG_Vdc;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	613b      	str	r3, [r7, #16]
  
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_pos=((float)((int16_t)p_Data_Sub[0]-B_Vdc)*(float)(invG_Vdc)); 
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	b21b      	sxth	r3, r3
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_neg=((float)((int16_t)p_Data_Sub[1]-100)*(float)(invG_Vdc));
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	3304      	adds	r3, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	b21b      	sxth	r3, r3
 8002b68:	3b64      	subs	r3, #100	; 0x64
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b72:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	edc3 7a01 	vstr	s15, [r3, #4]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_tot=VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_pos+VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_neg;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	ed93 7a00 	vldr	s14, [r3]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edc3 7a02 	vstr	s15, [r3, #8]
  
}  
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <ADC_Current_AC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    
void ADC_Current_AC_ProcessData(uint32_t* p_Data_Sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub){
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  CURRENT_ADC_AC_IN_NORM_Sub->phA=((float)(p_Data_Sub[0])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bba:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002c24 <ADC_Current_AC_ProcessData+0x80>
 8002bbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	edc3 7a00 	vstr	s15, [r3]
  CURRENT_ADC_AC_IN_NORM_Sub->phB=((float)(p_Data_Sub[1])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bde:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002c24 <ADC_Current_AC_ProcessData+0x80>
 8002be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	edc3 7a01 	vstr	s15, [r3, #4]
  CURRENT_ADC_AC_IN_NORM_Sub->phC=((float)(p_Data_Sub[2])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c02:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002c24 <ADC_Current_AC_ProcessData+0x80>
 8002c06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	45000000 	.word	0x45000000

08002c28 <ADC2Phy_Current_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_Current_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub){
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  
  float B_Iac=DPC_ADC_Conf->B_Iac;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	617b      	str	r3, [r7, #20]
//  float G_Iac=DPC_ADC_Conf->G_Iac;
  float invG_Iac=DPC_ADC_Conf->invG_Iac;  
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	613b      	str	r3, [r7, #16]
  
  CURRENT_ADC_AC_IN_NORM_Sub->phA=((float)((int16_t)p_Data_Sub[0]-B_Iac)*(float)(invG_Iac));    
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	b21b      	sxth	r3, r3
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c56:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	edc3 7a00 	vstr	s15, [r3]
  CURRENT_ADC_AC_IN_NORM_Sub->phB=((float)((int16_t)p_Data_Sub[1]-B_Iac)*(float)(invG_Iac));    
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	3304      	adds	r3, #4
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	b21b      	sxth	r3, r3
 8002c6c:	ee07 3a90 	vmov	s15, r3
 8002c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c74:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	edc3 7a01 	vstr	s15, [r3, #4]
  CURRENT_ADC_AC_IN_NORM_Sub->phC=((float)((int16_t)p_Data_Sub[2]-B_Iac)*(float)(invG_Iac));    
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	b21b      	sxth	r3, r3
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ca2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <ADC_Current_DC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC_Current_DC_ProcessData(uint32_t* p_Data_Sub, CurrentDC_ADC_NORM_Struct_t* CURRENT_ADC_DC_IN_NORM_Sub){
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  CURRENT_ADC_DC_IN_NORM_Sub->IDC_adc=((float)(p_Data_Sub[0])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cd2:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002cf4 <ADC_Current_DC_ProcessData+0x38>
 8002cd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	edc3 7a00 	vstr	s15, [r3]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	45000000 	.word	0x45000000

08002cf8 <ADC2Phy_DC_Current_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_DC_Current_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, CurrentDC_ADC_NORM_Struct_t* CURRENT_ADC_DC_IN_NORM_Sub){
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  
  float B_Idc=DPC_ADC_Conf->B_Idc;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	617b      	str	r3, [r7, #20]
//  float G_Idc=DPC_ADC_Conf->G_Idc;
  float invG_Idc=DPC_ADC_Conf->invG_Idc;   
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	613b      	str	r3, [r7, #16]
  
  CURRENT_ADC_DC_IN_NORM_Sub->IDC_adc=((float)((int16_t)p_Data_Sub[0]-B_Idc)*(float)(invG_Idc)); 
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d26:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	edc3 7a00 	vstr	s15, [r3]
}
 8002d34:	bf00      	nop
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <DPC_ADC_Init>:
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    

void DPC_ADC_Init(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,float G_Vac,float B_Vac,float G_Iac,float B_Iac,float G_Vdc,float B_Vdc,float G_Idc,float B_Idc){
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6278      	str	r0, [r7, #36]	; 0x24
 8002d48:	ed87 0a08 	vstr	s0, [r7, #32]
 8002d4c:	edc7 0a07 	vstr	s1, [r7, #28]
 8002d50:	ed87 1a06 	vstr	s2, [r7, #24]
 8002d54:	edc7 1a05 	vstr	s3, [r7, #20]
 8002d58:	ed87 2a04 	vstr	s4, [r7, #16]
 8002d5c:	edc7 2a03 	vstr	s5, [r7, #12]
 8002d60:	ed87 3a02 	vstr	s6, [r7, #8]
 8002d64:	edc7 3a01 	vstr	s7, [r7, #4]
  
	DPC_ADC_Default_Init();
 8002d68:	f000 f844 	bl	8002df4 <DPC_ADC_Default_Init>

	DPC_ADC_Conf->B_Vac=B_Vac;
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	609a      	str	r2, [r3, #8]
	DPC_ADC_Conf->G_Vac=G_Vac;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	601a      	str	r2, [r3, #0]
	DPC_ADC_Conf->invG_Vac=(float)(1.0/G_Vac);
 8002d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	edc3 7a01 	vstr	s15, [r3, #4]

	DPC_ADC_Conf->B_Vdc=B_Vdc;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	621a      	str	r2, [r3, #32]
	DPC_ADC_Conf->G_Vdc=G_Vdc;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	619a      	str	r2, [r3, #24]
	DPC_ADC_Conf->invG_Vdc=(float)(1.0/G_Vdc);
 8002d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	edc3 7a07 	vstr	s15, [r3, #28]

	DPC_ADC_Conf->B_Iac=B_Iac;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	615a      	str	r2, [r3, #20]
	DPC_ADC_Conf->G_Iac=G_Iac;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	60da      	str	r2, [r3, #12]
	DPC_ADC_Conf->invG_Iac=(float)(1.0/G_Iac);
 8002db4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002db8:	ed97 7a06 	vldr	s14, [r7, #24]
 8002dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	edc3 7a04 	vstr	s15, [r3, #16]

	DPC_ADC_Conf->B_Idc=B_Idc;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c
	DPC_ADC_Conf->G_Idc=G_Idc;
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
	DPC_ADC_Conf->invG_Idc=(float)(1.0/G_Idc);
 8002dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dd6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	DPC_ADC_Conf->DPC_ADC_Conf_Complete=SET;
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
}
 8002dec:	bf00      	nop
 8002dee:	3728      	adds	r7, #40	; 0x28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <DPC_ADC_Default_Init>:

void DPC_ADC_Default_Init(){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b092      	sub	sp, #72	; 0x48
 8002df8:	af00      	add	r7, sp, #0

	  ADC_MultiModeTypeDef multimode = {0};
 8002dfa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	609a      	str	r2, [r3, #8]
	  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002e06:	f107 0320 	add.w	r3, r7, #32
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
 8002e14:	611a      	str	r2, [r3, #16]
 8002e16:	615a      	str	r2, [r3, #20]
 8002e18:	619a      	str	r2, [r3, #24]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8002e1a:	463b      	mov	r3, r7
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f009 f8c8 	bl	800bfb6 <memset>

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8002e26:	4b79      	ldr	r3, [pc, #484]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002e2c:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e2e:	4b77      	ldr	r3, [pc, #476]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e34:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e36:	4b75      	ldr	r3, [pc, #468]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e3c:	4b73      	ldr	r3, [pc, #460]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
	  hadc1.Init.GainCompensation = 0;
 8002e42:	4b72      	ldr	r3, [pc, #456]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002e48:	4b70      	ldr	r3, [pc, #448]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	615a      	str	r2, [r3, #20]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e4e:	4b6f      	ldr	r3, [pc, #444]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e50:	2204      	movs	r2, #4
 8002e52:	619a      	str	r2, [r3, #24]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e54:	4b6d      	ldr	r3, [pc, #436]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	771a      	strb	r2, [r3, #28]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e5a:	4b6c      	ldr	r3, [pc, #432]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	775a      	strb	r2, [r3, #29]
	  hadc1.Init.NbrOfConversion = 8;
 8002e60:	4b6a      	ldr	r3, [pc, #424]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e62:	2208      	movs	r2, #8
 8002e64:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e66:	4b69      	ldr	r3, [pc, #420]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e6e:	4b67      	ldr	r3, [pc, #412]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e74:	4b65      	ldr	r3, [pc, #404]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e7a:	4b64      	ldr	r3, [pc, #400]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e82:	4b62      	ldr	r3, [pc, #392]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc1.Init.OversamplingMode = ENABLE;
 8002e88:	4b60      	ldr	r3, [pc, #384]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8002e90:	4b5e      	ldr	r3, [pc, #376]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e92:	2208      	movs	r2, #8
 8002e94:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8002e96:	4b5d      	ldr	r3, [pc, #372]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e98:	2260      	movs	r2, #96	; 0x60
 8002e9a:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002e9c:	4b5b      	ldr	r3, [pc, #364]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8002ea2:	4b5a      	ldr	r3, [pc, #360]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ea8:	4858      	ldr	r0, [pc, #352]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002eaa:	f002 fa5f 	bl	800536c <HAL_ADC_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <DPC_ADC_Default_Init+0xc4>
	  {
	    Error_Handler();
 8002eb4:	f001 fc36 	bl	8004724 <Error_Handler>
	  }
	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002ebc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4852      	ldr	r0, [pc, #328]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002ec4:	f003 fc4c 	bl	8006760 <HAL_ADCEx_MultiModeConfigChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <DPC_ADC_Default_Init+0xde>
	  {
	    Error_Handler();
 8002ece:	f001 fc29 	bl	8004724 <Error_Handler>
	  }
	  /** Configure Analog WatchDog 1
	  */
	  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8002ed2:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <DPC_ADC_Default_Init+0x21c>)
 8002ed4:	623b      	str	r3, [r7, #32]
	  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8002ed6:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
	  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 8002edc:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <DPC_ADC_Default_Init+0x220>)
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
	  AnalogWDGConfig.ITMode = DISABLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	  AnalogWDGConfig.HighThreshold = 0x0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	633b      	str	r3, [r7, #48]	; 0x30
	  AnalogWDGConfig.LowThreshold = 0x0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
	  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8002ef2:	f107 0320 	add.w	r3, r7, #32
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4844      	ldr	r0, [pc, #272]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002efa:	f003 f921 	bl	8006140 <HAL_ADC_AnalogWDGConfig>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <DPC_ADC_Default_Init+0x114>
	  {
	    Error_Handler();
 8002f04:	f001 fc0e 	bl	8004724 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8002f08:	4b42      	ldr	r3, [pc, #264]	; (8003014 <DPC_ADC_Default_Init+0x220>)
 8002f0a:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f0c:	2306      	movs	r3, #6
 8002f0e:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8002f10:	2301      	movs	r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002f14:	237f      	movs	r3, #127	; 0x7f
 8002f16:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002f18:	2304      	movs	r3, #4
 8002f1a:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f20:	463b      	mov	r3, r7
 8002f22:	4619      	mov	r1, r3
 8002f24:	4839      	ldr	r0, [pc, #228]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002f26:	f002 fccd 	bl	80058c4 <HAL_ADC_ConfigChannel>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <DPC_ADC_Default_Init+0x140>
	  {
	    Error_Handler();
 8002f30:	f001 fbf8 	bl	8004724 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8002f34:	4b38      	ldr	r3, [pc, #224]	; (8003018 <DPC_ADC_Default_Init+0x224>)
 8002f36:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002f38:	230c      	movs	r3, #12
 8002f3a:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f3c:	463b      	mov	r3, r7
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4832      	ldr	r0, [pc, #200]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002f42:	f002 fcbf 	bl	80058c4 <HAL_ADC_ConfigChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <DPC_ADC_Default_Init+0x15c>
	  {
	    Error_Handler();
 8002f4c:	f001 fbea 	bl	8004724 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8002f50:	4b32      	ldr	r3, [pc, #200]	; (800301c <DPC_ADC_Default_Init+0x228>)
 8002f52:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002f54:	2312      	movs	r3, #18
 8002f56:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f58:	463b      	mov	r3, r7
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	482b      	ldr	r0, [pc, #172]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002f5e:	f002 fcb1 	bl	80058c4 <HAL_ADC_ConfigChannel>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <DPC_ADC_Default_Init+0x178>
	  {
	    Error_Handler();
 8002f68:	f001 fbdc 	bl	8004724 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8002f6c:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <DPC_ADC_Default_Init+0x22c>)
 8002f6e:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002f70:	2318      	movs	r3, #24
 8002f72:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f74:	463b      	mov	r3, r7
 8002f76:	4619      	mov	r1, r3
 8002f78:	4824      	ldr	r0, [pc, #144]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002f7a:	f002 fca3 	bl	80058c4 <HAL_ADC_ConfigChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <DPC_ADC_Default_Init+0x194>
	  {
	    Error_Handler();
 8002f84:	f001 fbce 	bl	8004724 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_5;
 8002f88:	4b26      	ldr	r3, [pc, #152]	; (8003024 <DPC_ADC_Default_Init+0x230>)
 8002f8a:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f90:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f92:	463b      	mov	r3, r7
 8002f94:	4619      	mov	r1, r3
 8002f96:	481d      	ldr	r0, [pc, #116]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002f98:	f002 fc94 	bl	80058c4 <HAL_ADC_ConfigChannel>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <DPC_ADC_Default_Init+0x1b2>
	  {
	    Error_Handler();
 8002fa2:	f001 fbbf 	bl	8004724 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8002fa6:	4b20      	ldr	r3, [pc, #128]	; (8003028 <DPC_ADC_Default_Init+0x234>)
 8002fa8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002faa:	f44f 7383 	mov.w	r3, #262	; 0x106
 8002fae:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fb0:	463b      	mov	r3, r7
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4815      	ldr	r0, [pc, #84]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002fb6:	f002 fc85 	bl	80058c4 <HAL_ADC_ConfigChannel>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <DPC_ADC_Default_Init+0x1d0>
	  {
	    Error_Handler();
 8002fc0:	f001 fbb0 	bl	8004724 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 8002fc4:	4b19      	ldr	r3, [pc, #100]	; (800302c <DPC_ADC_Default_Init+0x238>)
 8002fc6:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002fc8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8002fcc:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fce:	463b      	mov	r3, r7
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	480e      	ldr	r0, [pc, #56]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002fd4:	f002 fc76 	bl	80058c4 <HAL_ADC_ConfigChannel>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <DPC_ADC_Default_Init+0x1ee>
	  {
	    Error_Handler();
 8002fde:	f001 fba1 	bl	8004724 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <DPC_ADC_Default_Init+0x23c>)
 8002fe4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002fe6:	f44f 7389 	mov.w	r3, #274	; 0x112
 8002fea:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4805      	ldr	r0, [pc, #20]	; (800300c <DPC_ADC_Default_Init+0x218>)
 8002ff6:	f002 fc65 	bl	80058c4 <HAL_ADC_ConfigChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <DPC_ADC_Default_Init+0x210>
	  {
	    Error_Handler();
 8003000:	f001 fb90 	bl	8004724 <Error_Handler>
	  }
}
 8003004:	bf00      	nop
 8003006:	3748      	adds	r7, #72	; 0x48
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	200001cc 	.word	0x200001cc
 8003010:	7dc00000 	.word	0x7dc00000
 8003014:	04300002 	.word	0x04300002
 8003018:	08600004 	.word	0x08600004
 800301c:	0c900008 	.word	0x0c900008
 8003020:	10c00010 	.word	0x10c00010
 8003024:	14f00020 	.word	0x14f00020
 8003028:	19200040 	.word	0x19200040
 800302c:	1d500080 	.word	0x1d500080
 8003030:	c3210000 	.word	0xc3210000

08003034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc5;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b092      	sub	sp, #72	; 0x48
 8003038:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800303a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003046:	f107 0320 	add.w	r3, r7, #32
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	605a      	str	r2, [r3, #4]
 8003050:	609a      	str	r2, [r3, #8]
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	611a      	str	r2, [r3, #16]
 8003056:	615a      	str	r2, [r3, #20]
 8003058:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800305a:	463b      	mov	r3, r7
 800305c:	2220      	movs	r2, #32
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f008 ffa8 	bl	800bfb6 <memset>

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003066:	4b7a      	ldr	r3, [pc, #488]	; (8003250 <MX_ADC1_Init+0x21c>)
 8003068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800306c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800306e:	4b78      	ldr	r3, [pc, #480]	; (8003250 <MX_ADC1_Init+0x21c>)
 8003070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003076:	4b76      	ldr	r3, [pc, #472]	; (8003250 <MX_ADC1_Init+0x21c>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800307c:	4b74      	ldr	r3, [pc, #464]	; (8003250 <MX_ADC1_Init+0x21c>)
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003082:	4b73      	ldr	r3, [pc, #460]	; (8003250 <MX_ADC1_Init+0x21c>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003088:	4b71      	ldr	r3, [pc, #452]	; (8003250 <MX_ADC1_Init+0x21c>)
 800308a:	2201      	movs	r2, #1
 800308c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800308e:	4b70      	ldr	r3, [pc, #448]	; (8003250 <MX_ADC1_Init+0x21c>)
 8003090:	2204      	movs	r2, #4
 8003092:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003094:	4b6e      	ldr	r3, [pc, #440]	; (8003250 <MX_ADC1_Init+0x21c>)
 8003096:	2200      	movs	r2, #0
 8003098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800309a:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <MX_ADC1_Init+0x21c>)
 800309c:	2201      	movs	r2, #1
 800309e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 8;
 80030a0:	4b6b      	ldr	r3, [pc, #428]	; (8003250 <MX_ADC1_Init+0x21c>)
 80030a2:	2208      	movs	r2, #8
 80030a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030a6:	4b6a      	ldr	r3, [pc, #424]	; (8003250 <MX_ADC1_Init+0x21c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030ae:	4b68      	ldr	r3, [pc, #416]	; (8003250 <MX_ADC1_Init+0x21c>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030b4:	4b66      	ldr	r3, [pc, #408]	; (8003250 <MX_ADC1_Init+0x21c>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80030ba:	4b65      	ldr	r3, [pc, #404]	; (8003250 <MX_ADC1_Init+0x21c>)
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030c2:	4b63      	ldr	r3, [pc, #396]	; (8003250 <MX_ADC1_Init+0x21c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80030c8:	4b61      	ldr	r3, [pc, #388]	; (8003250 <MX_ADC1_Init+0x21c>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 80030d0:	4b5f      	ldr	r3, [pc, #380]	; (8003250 <MX_ADC1_Init+0x21c>)
 80030d2:	2208      	movs	r2, #8
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 80030d6:	4b5e      	ldr	r3, [pc, #376]	; (8003250 <MX_ADC1_Init+0x21c>)
 80030d8:	2260      	movs	r2, #96	; 0x60
 80030da:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80030dc:	4b5c      	ldr	r3, [pc, #368]	; (8003250 <MX_ADC1_Init+0x21c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80030e2:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <MX_ADC1_Init+0x21c>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80030e8:	4859      	ldr	r0, [pc, #356]	; (8003250 <MX_ADC1_Init+0x21c>)
 80030ea:	f002 f93f 	bl	800536c <HAL_ADC_Init>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80030f4:	f001 fb16 	bl	8004724 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80030f8:	2300      	movs	r3, #0
 80030fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80030fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003100:	4619      	mov	r1, r3
 8003102:	4853      	ldr	r0, [pc, #332]	; (8003250 <MX_ADC1_Init+0x21c>)
 8003104:	f003 fb2c 	bl	8006760 <HAL_ADCEx_MultiModeConfigChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800310e:	f001 fb09 	bl	8004724 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003112:	4b50      	ldr	r3, [pc, #320]	; (8003254 <MX_ADC1_Init+0x220>)
 8003114:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8003116:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 800311c:	4b4e      	ldr	r3, [pc, #312]	; (8003258 <MX_ADC1_Init+0x224>)
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = DISABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 0x0;
 8003126:	2300      	movs	r3, #0
 8003128:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0x0;
 800312a:	2300      	movs	r3, #0
 800312c:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 800312e:	2300      	movs	r3, #0
 8003130:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8003132:	f107 0320 	add.w	r3, r7, #32
 8003136:	4619      	mov	r1, r3
 8003138:	4845      	ldr	r0, [pc, #276]	; (8003250 <MX_ADC1_Init+0x21c>)
 800313a:	f003 f801 	bl	8006140 <HAL_ADC_AnalogWDGConfig>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8003144:	f001 faee 	bl	8004724 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <MX_ADC1_Init+0x224>)
 800314a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800314c:	2306      	movs	r3, #6
 800314e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8003150:	2301      	movs	r3, #1
 8003152:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003154:	237f      	movs	r3, #127	; 0x7f
 8003156:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003158:	2304      	movs	r3, #4
 800315a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003160:	463b      	mov	r3, r7
 8003162:	4619      	mov	r1, r3
 8003164:	483a      	ldr	r0, [pc, #232]	; (8003250 <MX_ADC1_Init+0x21c>)
 8003166:	f002 fbad 	bl	80058c4 <HAL_ADC_ConfigChannel>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8003170:	f001 fad8 	bl	8004724 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003174:	4b39      	ldr	r3, [pc, #228]	; (800325c <MX_ADC1_Init+0x228>)
 8003176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003178:	230c      	movs	r3, #12
 800317a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800317c:	463b      	mov	r3, r7
 800317e:	4619      	mov	r1, r3
 8003180:	4833      	ldr	r0, [pc, #204]	; (8003250 <MX_ADC1_Init+0x21c>)
 8003182:	f002 fb9f 	bl	80058c4 <HAL_ADC_ConfigChannel>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800318c:	f001 faca 	bl	8004724 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003190:	4b33      	ldr	r3, [pc, #204]	; (8003260 <MX_ADC1_Init+0x22c>)
 8003192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003194:	2312      	movs	r3, #18
 8003196:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003198:	463b      	mov	r3, r7
 800319a:	4619      	mov	r1, r3
 800319c:	482c      	ldr	r0, [pc, #176]	; (8003250 <MX_ADC1_Init+0x21c>)
 800319e:	f002 fb91 	bl	80058c4 <HAL_ADC_ConfigChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 80031a8:	f001 fabc 	bl	8004724 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <MX_ADC1_Init+0x230>)
 80031ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80031b0:	2318      	movs	r3, #24
 80031b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80031b4:	2302      	movs	r3, #2
 80031b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031b8:	463b      	mov	r3, r7
 80031ba:	4619      	mov	r1, r3
 80031bc:	4824      	ldr	r0, [pc, #144]	; (8003250 <MX_ADC1_Init+0x21c>)
 80031be:	f002 fb81 	bl	80058c4 <HAL_ADC_ConfigChannel>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 80031c8:	f001 faac 	bl	8004724 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80031cc:	4b26      	ldr	r3, [pc, #152]	; (8003268 <MX_ADC1_Init+0x234>)
 80031ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80031d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031d6:	463b      	mov	r3, r7
 80031d8:	4619      	mov	r1, r3
 80031da:	481d      	ldr	r0, [pc, #116]	; (8003250 <MX_ADC1_Init+0x21c>)
 80031dc:	f002 fb72 	bl	80058c4 <HAL_ADC_ConfigChannel>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_ADC1_Init+0x1b6>
  {
    Error_Handler();
 80031e6:	f001 fa9d 	bl	8004724 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <MX_ADC1_Init+0x238>)
 80031ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80031ee:	f44f 7383 	mov.w	r3, #262	; 0x106
 80031f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031f4:	463b      	mov	r3, r7
 80031f6:	4619      	mov	r1, r3
 80031f8:	4815      	ldr	r0, [pc, #84]	; (8003250 <MX_ADC1_Init+0x21c>)
 80031fa:	f002 fb63 	bl	80058c4 <HAL_ADC_ConfigChannel>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_ADC1_Init+0x1d4>
  {
    Error_Handler();
 8003204:	f001 fa8e 	bl	8004724 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <MX_ADC1_Init+0x23c>)
 800320a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800320c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8003210:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003212:	463b      	mov	r3, r7
 8003214:	4619      	mov	r1, r3
 8003216:	480e      	ldr	r0, [pc, #56]	; (8003250 <MX_ADC1_Init+0x21c>)
 8003218:	f002 fb54 	bl	80058c4 <HAL_ADC_ConfigChannel>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_ADC1_Init+0x1f2>
  {
    Error_Handler();
 8003222:	f001 fa7f 	bl	8004724 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <MX_ADC1_Init+0x224>)
 8003228:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800322a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800322e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003234:	463b      	mov	r3, r7
 8003236:	4619      	mov	r1, r3
 8003238:	4805      	ldr	r0, [pc, #20]	; (8003250 <MX_ADC1_Init+0x21c>)
 800323a:	f002 fb43 	bl	80058c4 <HAL_ADC_ConfigChannel>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_ADC1_Init+0x214>
  {
    Error_Handler();
 8003244:	f001 fa6e 	bl	8004724 <Error_Handler>
  }

}
 8003248:	bf00      	nop
 800324a:	3748      	adds	r7, #72	; 0x48
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200001cc 	.word	0x200001cc
 8003254:	7dc00000 	.word	0x7dc00000
 8003258:	04300002 	.word	0x04300002
 800325c:	08600004 	.word	0x08600004
 8003260:	0c900008 	.word	0x0c900008
 8003264:	10c00010 	.word	0x10c00010
 8003268:	19200040 	.word	0x19200040
 800326c:	1d500080 	.word	0x1d500080
 8003270:	c3210000 	.word	0xc3210000

08003274 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800327a:	463b      	mov	r3, r7
 800327c:	2220      	movs	r2, #32
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f008 fe98 	bl	800bfb6 <memset>

  /** Common config
  */
  hadc5.Instance = ADC5;
 8003286:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <MX_ADC5_Init+0xc0>)
 8003288:	4a2b      	ldr	r2, [pc, #172]	; (8003338 <MX_ADC5_Init+0xc4>)
 800328a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <MX_ADC5_Init+0xc0>)
 800328e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003292:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8003294:	4b27      	ldr	r3, [pc, #156]	; (8003334 <MX_ADC5_Init+0xc0>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <MX_ADC5_Init+0xc0>)
 800329c:	2200      	movs	r2, #0
 800329e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032ac:	4b21      	ldr	r3, [pc, #132]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032ae:	2204      	movs	r2, #4
 80032b0:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80032b8:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80032be:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80032d8:	4b16      	ldr	r3, [pc, #88]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80032ee:	4811      	ldr	r0, [pc, #68]	; (8003334 <MX_ADC5_Init+0xc0>)
 80032f0:	f002 f83c 	bl	800536c <HAL_ADC_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80032fa:	f001 fa13 	bl	8004724 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <MX_ADC5_Init+0xc8>)
 8003300:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003302:	2306      	movs	r3, #6
 8003304:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800330a:	237f      	movs	r3, #127	; 0x7f
 800330c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800330e:	2304      	movs	r3, #4
 8003310:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8003316:	463b      	mov	r3, r7
 8003318:	4619      	mov	r1, r3
 800331a:	4806      	ldr	r0, [pc, #24]	; (8003334 <MX_ADC5_Init+0xc0>)
 800331c:	f002 fad2 	bl	80058c4 <HAL_ADC_ConfigChannel>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8003326:	f001 f9fd 	bl	8004724 <Error_Handler>
  }

}
 800332a:	bf00      	nop
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000160 	.word	0x20000160
 8003338:	50000600 	.word	0x50000600
 800333c:	90c00010 	.word	0x90c00010

08003340 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08c      	sub	sp, #48	; 0x30
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 031c 	add.w	r3, r7, #28
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003360:	f040 8082 	bne.w	8003468 <HAL_ADC_MspInit+0x128>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003364:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <HAL_ADC_MspInit+0x154>)
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	4a4a      	ldr	r2, [pc, #296]	; (8003494 <HAL_ADC_MspInit+0x154>)
 800336a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800336e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003370:	4b48      	ldr	r3, [pc, #288]	; (8003494 <HAL_ADC_MspInit+0x154>)
 8003372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800337c:	4b45      	ldr	r3, [pc, #276]	; (8003494 <HAL_ADC_MspInit+0x154>)
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	4a44      	ldr	r2, [pc, #272]	; (8003494 <HAL_ADC_MspInit+0x154>)
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003388:	4b42      	ldr	r3, [pc, #264]	; (8003494 <HAL_ADC_MspInit+0x154>)
 800338a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003394:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <HAL_ADC_MspInit+0x154>)
 8003396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003398:	4a3e      	ldr	r2, [pc, #248]	; (8003494 <HAL_ADC_MspInit+0x154>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033a0:	4b3c      	ldr	r3, [pc, #240]	; (8003494 <HAL_ADC_MspInit+0x154>)
 80033a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ac:	4b39      	ldr	r3, [pc, #228]	; (8003494 <HAL_ADC_MspInit+0x154>)
 80033ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b0:	4a38      	ldr	r2, [pc, #224]	; (8003494 <HAL_ADC_MspInit+0x154>)
 80033b2:	f043 0302 	orr.w	r3, r3, #2
 80033b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_ADC_MspInit+0x154>)
 80033ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_VDC__Pin|ADC_VDC_C1_Pin;
 80033c4:	2303      	movs	r3, #3
 80033c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033c8:	2303      	movs	r3, #3
 80033ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d0:	f107 031c 	add.w	r3, r7, #28
 80033d4:	4619      	mov	r1, r3
 80033d6:	4830      	ldr	r0, [pc, #192]	; (8003498 <HAL_ADC_MspInit+0x158>)
 80033d8:	f003 ffb6 	bl	8007348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IA_Pin|ADC_IB_Pin|ADC_VA_Pin|ADC_VB_Pin;
 80033dc:	230f      	movs	r3, #15
 80033de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033e0:	2303      	movs	r3, #3
 80033e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e8:	f107 031c 	add.w	r3, r7, #28
 80033ec:	4619      	mov	r1, r3
 80033ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033f2:	f003 ffa9 	bl	8007348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VC_Pin;
 80033f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033fc:	2303      	movs	r3, #3
 80033fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VC_GPIO_Port, &GPIO_InitStruct);
 8003404:	f107 031c 	add.w	r3, r7, #28
 8003408:	4619      	mov	r1, r3
 800340a:	4824      	ldr	r0, [pc, #144]	; (800349c <HAL_ADC_MspInit+0x15c>)
 800340c:	f003 ff9c 	bl	8007348 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8003410:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <HAL_ADC_MspInit+0x160>)
 8003412:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <HAL_ADC_MspInit+0x164>)
 8003414:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003416:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <HAL_ADC_MspInit+0x160>)
 8003418:	2205      	movs	r2, #5
 800341a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800341c:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_ADC_MspInit+0x160>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003422:	4b1f      	ldr	r3, [pc, #124]	; (80034a0 <HAL_ADC_MspInit+0x160>)
 8003424:	2200      	movs	r2, #0
 8003426:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003428:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_ADC_MspInit+0x160>)
 800342a:	2280      	movs	r2, #128	; 0x80
 800342c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800342e:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <HAL_ADC_MspInit+0x160>)
 8003430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003434:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <HAL_ADC_MspInit+0x160>)
 8003438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800343c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800343e:	4b18      	ldr	r3, [pc, #96]	; (80034a0 <HAL_ADC_MspInit+0x160>)
 8003440:	2220      	movs	r2, #32
 8003442:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003444:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <HAL_ADC_MspInit+0x160>)
 8003446:	2200      	movs	r2, #0
 8003448:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800344a:	4815      	ldr	r0, [pc, #84]	; (80034a0 <HAL_ADC_MspInit+0x160>)
 800344c:	f003 fbce 	bl	8006bec <HAL_DMA_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8003456:	f001 f965 	bl	8004724 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a10      	ldr	r2, [pc, #64]	; (80034a0 <HAL_ADC_MspInit+0x160>)
 800345e:	655a      	str	r2, [r3, #84]	; 0x54
 8003460:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <HAL_ADC_MspInit+0x160>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_RCC_ADC345_CLK_ENABLE();
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8003466:	e010      	b.n	800348a <HAL_ADC_MspInit+0x14a>
  else if(adcHandle->Instance==ADC5)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <HAL_ADC_MspInit+0x168>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10b      	bne.n	800348a <HAL_ADC_MspInit+0x14a>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_ADC_MspInit+0x154>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	4a07      	ldr	r2, [pc, #28]	; (8003494 <HAL_ADC_MspInit+0x154>)
 8003478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800347c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_ADC_MspInit+0x154>)
 8003480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
}
 800348a:	bf00      	nop
 800348c:	3730      	adds	r7, #48	; 0x30
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	48000800 	.word	0x48000800
 800349c:	48000400 	.word	0x48000400
 80034a0:	20000238 	.word	0x20000238
 80034a4:	40020044 	.word	0x40020044
 80034a8:	50000600 	.word	0x50000600

080034ac <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0

  hcordic.Instance = CORDIC;
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <MX_CORDIC_Init+0x20>)
 80034b2:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <MX_CORDIC_Init+0x24>)
 80034b4:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80034b6:	4805      	ldr	r0, [pc, #20]	; (80034cc <MX_CORDIC_Init+0x20>)
 80034b8:	f003 fa56 	bl	8006968 <HAL_CORDIC_Init>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80034c2:	f001 f92f 	bl	8004724 <Error_Handler>
  }

}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000298 	.word	0x20000298
 80034d0:	40020c00 	.word	0x40020c00

080034d4 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <HAL_CORDIC_MspInit+0x38>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10b      	bne.n	80034fe <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_CORDIC_MspInit+0x3c>)
 80034e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <HAL_CORDIC_MspInit+0x3c>)
 80034ec:	f043 0308 	orr.w	r3, r3, #8
 80034f0:	6493      	str	r3, [r2, #72]	; 0x48
 80034f2:	4b07      	ldr	r3, [pc, #28]	; (8003510 <HAL_CORDIC_MspInit+0x3c>)
 80034f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80034fe:	bf00      	nop
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40020c00 	.word	0x40020c00
 8003510:	40021000 	.word	0x40021000

08003514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800351a:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <MX_DMA_Init+0x90>)
 800351c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351e:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <MX_DMA_Init+0x90>)
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	6493      	str	r3, [r2, #72]	; 0x48
 8003526:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <MX_DMA_Init+0x90>)
 8003528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003532:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <MX_DMA_Init+0x90>)
 8003534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003536:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <MX_DMA_Init+0x90>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6493      	str	r3, [r2, #72]	; 0x48
 800353e:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <MX_DMA_Init+0x90>)
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800354a:	2200      	movs	r2, #0
 800354c:	2100      	movs	r1, #0
 800354e:	200b      	movs	r0, #11
 8003550:	f003 fb17 	bl	8006b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003554:	200b      	movs	r0, #11
 8003556:	f003 fb2e 	bl	8006bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	200c      	movs	r0, #12
 8003560:	f003 fb0f 	bl	8006b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003564:	200c      	movs	r0, #12
 8003566:	f003 fb26 	bl	8006bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	200d      	movs	r0, #13
 8003570:	f003 fb07 	bl	8006b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003574:	200d      	movs	r0, #13
 8003576:	f003 fb1e 	bl	8006bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2100      	movs	r1, #0
 800357e:	200e      	movs	r0, #14
 8003580:	f003 faff 	bl	8006b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003584:	200e      	movs	r0, #14
 8003586:	f003 fb16 	bl	8006bb6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 800358a:	2200      	movs	r2, #0
 800358c:	2100      	movs	r1, #0
 800358e:	205e      	movs	r0, #94	; 0x5e
 8003590:	f003 faf7 	bl	8006b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8003594:	205e      	movs	r0, #94	; 0x5e
 8003596:	f003 fb0e 	bl	8006bb6 <HAL_NVIC_EnableIRQ>

}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000

080035a8 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0

  hfmac.Instance = FMAC;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <MX_FMAC_Init+0x20>)
 80035ae:	4a07      	ldr	r2, [pc, #28]	; (80035cc <MX_FMAC_Init+0x24>)
 80035b0:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80035b2:	4805      	ldr	r0, [pc, #20]	; (80035c8 <MX_FMAC_Init+0x20>)
 80035b4:	f003 fe1c 	bl	80071f0 <HAL_FMAC_Init>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80035be:	f001 f8b1 	bl	8004724 <Error_Handler>
  }

}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200002c0 	.word	0x200002c0
 80035cc:	40021400 	.word	0x40021400

080035d0 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <HAL_FMAC_MspInit+0x38>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d10b      	bne.n	80035fa <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <HAL_FMAC_MspInit+0x3c>)
 80035e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_FMAC_MspInit+0x3c>)
 80035e8:	f043 0310 	orr.w	r3, r3, #16
 80035ec:	6493      	str	r3, [r2, #72]	; 0x48
 80035ee:	4b07      	ldr	r3, [pc, #28]	; (800360c <HAL_FMAC_MspInit+0x3c>)
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40021400 	.word	0x40021400
 800360c:	40021000 	.word	0x40021000

08003610 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003616:	f107 030c 	add.w	r3, r7, #12
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003626:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <MX_GPIO_Init+0xb8>)
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	4a27      	ldr	r2, [pc, #156]	; (80036c8 <MX_GPIO_Init+0xb8>)
 800362c:	f043 0304 	orr.w	r3, r3, #4
 8003630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003632:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <MX_GPIO_Init+0xb8>)
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <MX_GPIO_Init+0xb8>)
 8003640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003642:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <MX_GPIO_Init+0xb8>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800364a:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <MX_GPIO_Init+0xb8>)
 800364c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <MX_GPIO_Init+0xb8>)
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	4a1b      	ldr	r2, [pc, #108]	; (80036c8 <MX_GPIO_Init+0xb8>)
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <MX_GPIO_Init+0xb8>)
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin|LED_HL1_Pin|Relay_Pin, GPIO_PIN_RESET);
 800366e:	2200      	movs	r2, #0
 8003670:	21d0      	movs	r1, #208	; 0xd0
 8003672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003676:	f003 ffe9 	bl	800764c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_RESET);
 800367a:	2200      	movs	r2, #0
 800367c:	2120      	movs	r1, #32
 800367e:	4813      	ldr	r0, [pc, #76]	; (80036cc <MX_GPIO_Init+0xbc>)
 8003680:	f003 ffe4 	bl	800764c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_HL2_Pin|LED_HL1_Pin|Relay_Pin;
 8003684:	23d0      	movs	r3, #208	; 0xd0
 8003686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003688:	2301      	movs	r3, #1
 800368a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003690:	2300      	movs	r3, #0
 8003692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003694:	f107 030c 	add.w	r3, r7, #12
 8003698:	4619      	mov	r1, r3
 800369a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800369e:	f003 fe53 	bl	8007348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PFC_SW_SRC_Pin;
 80036a2:	2320      	movs	r3, #32
 80036a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a6:	2301      	movs	r3, #1
 80036a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PFC_SW_SRC_GPIO_Port, &GPIO_InitStruct);
 80036b2:	f107 030c 	add.w	r3, r7, #12
 80036b6:	4619      	mov	r1, r3
 80036b8:	4804      	ldr	r0, [pc, #16]	; (80036cc <MX_GPIO_Init+0xbc>)
 80036ba:	f003 fe45 	bl	8007348 <HAL_GPIO_Init>

}
 80036be:	bf00      	nop
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
 80036cc:	48000800 	.word	0x48000800

080036d0 <MX_HRTIM1_Init>:
DMA_HandleTypeDef hdma_hrtim1_b;
DMA_HandleTypeDef hdma_hrtim1_c;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b0b6      	sub	sp, #216	; 0xd8
 80036d4:	af00      	add	r7, sp, #0
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 80036d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	60da      	str	r2, [r3, #12]
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 80036e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80036f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80036fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	611a      	str	r2, [r3, #16]
 800370e:	615a      	str	r2, [r3, #20]
 8003710:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8003712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003716:	2260      	movs	r2, #96	; 0x60
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f008 fc4b 	bl	800bfb6 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8003720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	2220      	movs	r2, #32
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f008 fc3f 	bl	800bfb6 <memset>

  hhrtim1.Instance = HRTIM1;
 8003738:	4bd0      	ldr	r3, [pc, #832]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 800373a:	4ad1      	ldr	r2, [pc, #836]	; (8003a80 <MX_HRTIM1_Init+0x3b0>)
 800373c:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_FLT1|HRTIM_IT_FLT3;
 800373e:	4bcf      	ldr	r3, [pc, #828]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003740:	2205      	movs	r2, #5
 8003742:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8003744:	4bcd      	ldr	r3, [pc, #820]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 800374a:	48cc      	ldr	r0, [pc, #816]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 800374c:	f003 ff96 	bl	800767c <HAL_HRTIM_Init>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_HRTIM1_Init+0x8a>
  {
    Error_Handler();
 8003756:	f000 ffe5 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 800375a:	210c      	movs	r1, #12
 800375c:	48c7      	ldr	r0, [pc, #796]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 800375e:	f004 f85d 	bl	800781c <HAL_HRTIM_DLLCalibrationStart>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <MX_HRTIM1_Init+0x9c>
  {
    Error_Handler();
 8003768:	f000 ffdc 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 800376c:	210a      	movs	r1, #10
 800376e:	48c3      	ldr	r0, [pc, #780]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003770:	f004 f8ac 	bl	80078cc <HAL_HRTIM_PollForDLLCalibration>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_HRTIM1_Init+0xae>
  {
    Error_Handler();
 800377a:	f000 ffd3 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 800377e:	2100      	movs	r1, #0
 8003780:	48be      	ldr	r0, [pc, #760]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003782:	f004 fabf 	bl	8007d04 <HAL_HRTIM_FaultPrescalerConfig>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_HRTIM1_Init+0xc0>
  {
    Error_Handler();
 800378c:	f000 ffca 	bl	8004724 <Error_Handler>
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
 8003790:	2300      	movs	r3, #0
 8003792:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 8003796:	2302      	movs	r3, #2
 8003798:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultCfg) != HAL_OK)
 80037a8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80037ac:	461a      	mov	r2, r3
 80037ae:	2101      	movs	r1, #1
 80037b0:	48b2      	ldr	r0, [pc, #712]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 80037b2:	f004 f8e7 	bl	8007984 <HAL_HRTIM_FaultConfig>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_HRTIM1_Init+0xf0>
  {
    Error_Handler();
 80037bc:	f000 ffb2 	bl	8004724 <Error_Handler>
//  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
//  {
//    Error_Handler();
//  }

  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_1, HRTIM_FAULTMODECTL_ENABLED);
 80037c0:	2201      	movs	r2, #1
 80037c2:	2101      	movs	r1, #1
 80037c4:	48ad      	ldr	r0, [pc, #692]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 80037c6:	f004 fcbb 	bl	8008140 <HAL_HRTIM_FaultModeCtl>
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 80037ca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037ce:	461a      	mov	r2, r3
 80037d0:	2104      	movs	r1, #4
 80037d2:	48aa      	ldr	r0, [pc, #680]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 80037d4:	f004 fbbc 	bl	8007f50 <HAL_HRTIM_FaultCounterConfig>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <MX_HRTIM1_Init+0x112>
  {
    Error_Handler();
 80037de:	f000 ffa1 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 80037e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037e6:	461a      	mov	r2, r3
 80037e8:	2104      	movs	r1, #4
 80037ea:	48a4      	ldr	r0, [pc, #656]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 80037ec:	f004 fac4 	bl	8007d78 <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_HRTIM1_Init+0x12a>
  {
    Error_Handler();
 80037f6:	f000 ff95 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 80037fa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037fe:	461a      	mov	r2, r3
 8003800:	2104      	movs	r1, #4
 8003802:	489e      	ldr	r0, [pc, #632]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003804:	f004 fab8 	bl	8007d78 <HAL_HRTIM_FaultBlankingConfigAndEnable>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_HRTIM1_Init+0x142>
  {
    Error_Handler();
 800380e:	f000 ff89 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_3, &pFaultCfg) != HAL_OK)
 8003812:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003816:	461a      	mov	r2, r3
 8003818:	2104      	movs	r1, #4
 800381a:	4898      	ldr	r0, [pc, #608]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 800381c:	f004 f8b2 	bl	8007984 <HAL_HRTIM_FaultConfig>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_HRTIM1_Init+0x15a>
  {
    Error_Handler();
 8003826:	f000 ff7d 	bl	8004724 <Error_Handler>
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_3, HRTIM_FAULTMODECTL_ENABLED);
 800382a:	2201      	movs	r2, #1
 800382c:	2104      	movs	r1, #4
 800382e:	4893      	ldr	r0, [pc, #588]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003830:	f004 fc86 	bl	8008140 <HAL_HRTIM_FaultModeCtl>
  pTimeBaseCfg.Period = 34000;
 8003834:	f248 43d0 	movw	r3, #34000	; 0x84d0
 8003838:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 8003842:	2302      	movs	r3, #2
 8003844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8003848:	2308      	movs	r3, #8
 800384a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800384e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003852:	461a      	mov	r2, r3
 8003854:	2100      	movs	r1, #0
 8003856:	4889      	ldr	r0, [pc, #548]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003858:	f004 f86c 	bl	8007934 <HAL_HRTIM_TimeBaseConfig>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_HRTIM1_Init+0x196>
  {
    Error_Handler();
 8003862:	f000 ff5f 	bl	8004724 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8003866:	2300      	movs	r3, #0
 8003868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 800386c:	2300      	movs	r3, #0
 800386e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8003872:	2300      	movs	r3, #0
 8003874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8003878:	2300      	movs	r3, #0
 800387a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 800387e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003882:	461a      	mov	r2, r3
 8003884:	2100      	movs	r1, #0
 8003886:	487d      	ldr	r0, [pc, #500]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003888:	f004 fd4e 	bl	8008328 <HAL_HRTIM_WaveformTimerControl>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_HRTIM1_Init+0x1c6>
  {
    Error_Handler();
 8003892:	f000 ff47 	bl	8004724 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8003896:	2300      	movs	r3, #0
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST;
 800389a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800389e:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMASrcAddress = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMADstAddress = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.DMASize = 0x1;
 80038a8:	2301      	movs	r3, #1
 80038aa:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80038ac:	2300      	movs	r3, #0
 80038ae:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80038b0:	2300      	movs	r3, #0
 80038b2:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80038b4:	2300      	movs	r3, #0
 80038b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80038b8:	2300      	movs	r3, #0
 80038ba:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80038bc:	2300      	movs	r3, #0
 80038be:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 80038c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038c4:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80038c6:	2300      	movs	r3, #0
 80038c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80038ce:	2300      	movs	r3, #0
 80038d0:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80038d2:	2300      	movs	r3, #0
 80038d4:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1|HRTIM_TIMFAULTENABLE_FAULT3;
 80038d6:	2305      	movs	r3, #5
 80038d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80038da:	2300      	movs	r3, #0
 80038dc:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80038de:	2300      	movs	r3, #0
 80038e0:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80038e2:	2300      	movs	r3, #0
 80038e4:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 80038f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8003900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003904:	461a      	mov	r2, r3
 8003906:	2100      	movs	r1, #0
 8003908:	485c      	ldr	r0, [pc, #368]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 800390a:	f004 fc9b 	bl	8008244 <HAL_HRTIM_WaveformTimerConfig>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_HRTIM1_Init+0x248>
  {
    Error_Handler();
 8003914:	f000 ff06 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8003918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800391c:	461a      	mov	r2, r3
 800391e:	2101      	movs	r1, #1
 8003920:	4856      	ldr	r0, [pc, #344]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003922:	f004 fc8f 	bl	8008244 <HAL_HRTIM_WaveformTimerConfig>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_HRTIM1_Init+0x260>
  {
    Error_Handler();
 800392c:	f000 fefa 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8003930:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003934:	461a      	mov	r2, r3
 8003936:	2102      	movs	r1, #2
 8003938:	4850      	ldr	r0, [pc, #320]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 800393a:	f004 fc83 	bl	8008244 <HAL_HRTIM_WaveformTimerConfig>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <MX_HRTIM1_Init+0x278>
  {
    Error_Handler();
 8003944:	f000 feee 	bl	8004724 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x5000;
 8003948:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800394e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003952:	2201      	movs	r2, #1
 8003954:	2100      	movs	r1, #0
 8003956:	4849      	ldr	r0, [pc, #292]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003958:	f004 fd1a 	bl	8008390 <HAL_HRTIM_WaveformCompareConfig>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_HRTIM1_Init+0x296>
  {
    Error_Handler();
 8003962:	f000 fedf 	bl	8004724 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 8003966:	2305      	movs	r3, #5
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800396a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396e:	2204      	movs	r2, #4
 8003970:	2100      	movs	r1, #0
 8003972:	4842      	ldr	r0, [pc, #264]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003974:	f004 fd0c 	bl	8008390 <HAL_HRTIM_WaveformCompareConfig>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MX_HRTIM1_Init+0x2b2>
  {
    Error_Handler();
 800397e:	f000 fed1 	bl	8004724 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8003986:	2304      	movs	r3, #4
 8003988:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 800398a:	2308      	movs	r3, #8
 800398c:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_INACTIVE;
 8003996:	2320      	movs	r3, #32
 8003998:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800399e:	2300      	movs	r3, #0
 80039a0:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80039a2:	1d3b      	adds	r3, r7, #4
 80039a4:	2201      	movs	r2, #1
 80039a6:	2100      	movs	r1, #0
 80039a8:	4834      	ldr	r0, [pc, #208]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 80039aa:	f004 fe5f 	bl	800866c <HAL_HRTIM_WaveformOutputConfig>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_HRTIM1_Init+0x2e8>
  {
    Error_Handler();
 80039b4:	f000 feb6 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80039b8:	1d3b      	adds	r3, r7, #4
 80039ba:	2204      	movs	r2, #4
 80039bc:	2101      	movs	r1, #1
 80039be:	482f      	ldr	r0, [pc, #188]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 80039c0:	f004 fe54 	bl	800866c <HAL_HRTIM_WaveformOutputConfig>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_HRTIM1_Init+0x2fe>
  {
    Error_Handler();
 80039ca:	f000 feab 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 80039ce:	1d3b      	adds	r3, r7, #4
 80039d0:	2210      	movs	r2, #16
 80039d2:	2102      	movs	r1, #2
 80039d4:	4829      	ldr	r0, [pc, #164]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 80039d6:	f004 fe49 	bl	800866c <HAL_HRTIM_WaveformOutputConfig>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_HRTIM1_Init+0x314>
  {
    Error_Handler();
 80039e0:	f000 fea0 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80039e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039e8:	461a      	mov	r2, r3
 80039ea:	2101      	movs	r1, #1
 80039ec:	4823      	ldr	r0, [pc, #140]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 80039ee:	f003 ffa1 	bl	8007934 <HAL_HRTIM_TimeBaseConfig>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_HRTIM1_Init+0x32c>
  {
    Error_Handler();
 80039f8:	f000 fe94 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 80039fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003a00:	461a      	mov	r2, r3
 8003a02:	2101      	movs	r1, #1
 8003a04:	481d      	ldr	r0, [pc, #116]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003a06:	f004 fc8f 	bl	8008328 <HAL_HRTIM_WaveformTimerControl>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_HRTIM1_Init+0x344>
  {
    Error_Handler();
 8003a10:	f000 fe88 	bl	8004724 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x2000;
 8003a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8003a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1e:	2201      	movs	r2, #1
 8003a20:	2101      	movs	r1, #1
 8003a22:	4816      	ldr	r0, [pc, #88]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003a24:	f004 fcb4 	bl	8008390 <HAL_HRTIM_WaveformCompareConfig>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_HRTIM1_Init+0x362>
  {
    Error_Handler();
 8003a2e:	f000 fe79 	bl	8004724 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 8003a32:	2305      	movs	r3, #5
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8003a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	480f      	ldr	r0, [pc, #60]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003a40:	f004 fca6 	bl	8008390 <HAL_HRTIM_WaveformCompareConfig>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <MX_HRTIM1_Init+0x37e>
  {
    Error_Handler();
 8003a4a:	f000 fe6b 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8003a4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a52:	461a      	mov	r2, r3
 8003a54:	2102      	movs	r1, #2
 8003a56:	4809      	ldr	r0, [pc, #36]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003a58:	f003 ff6c 	bl	8007934 <HAL_HRTIM_TimeBaseConfig>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_HRTIM1_Init+0x396>
  {
    Error_Handler();
 8003a62:	f000 fe5f 	bl	8004724 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 8003a66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	4803      	ldr	r0, [pc, #12]	; (8003a7c <MX_HRTIM1_Init+0x3ac>)
 8003a70:	f004 fc5a 	bl	8008328 <HAL_HRTIM_WaveformTimerControl>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d006      	beq.n	8003a88 <MX_HRTIM1_Init+0x3b8>
 8003a7a:	e003      	b.n	8003a84 <MX_HRTIM1_Init+0x3b4>
 8003a7c:	20000358 	.word	0x20000358
 8003a80:	40016800 	.word	0x40016800
  {
    Error_Handler();
 8003a84:	f000 fe4e 	bl	8004724 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x8000;
 8003a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8003a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a92:	2201      	movs	r2, #1
 8003a94:	2102      	movs	r1, #2
 8003a96:	480e      	ldr	r0, [pc, #56]	; (8003ad0 <MX_HRTIM1_Init+0x400>)
 8003a98:	f004 fc7a 	bl	8008390 <HAL_HRTIM_WaveformCompareConfig>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_HRTIM1_Init+0x3d6>
  {
    Error_Handler();
 8003aa2:	f000 fe3f 	bl	8004724 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 8003aa6:	2305      	movs	r3, #5
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8003aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aae:	2204      	movs	r2, #4
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	4807      	ldr	r0, [pc, #28]	; (8003ad0 <MX_HRTIM1_Init+0x400>)
 8003ab4:	f004 fc6c 	bl	8008390 <HAL_HRTIM_WaveformCompareConfig>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_HRTIM1_Init+0x3f2>
  {
    Error_Handler();
 8003abe:	f000 fe31 	bl	8004724 <Error_Handler>
  }
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8003ac2:	4803      	ldr	r0, [pc, #12]	; (8003ad0 <MX_HRTIM1_Init+0x400>)
 8003ac4:	f000 f94a 	bl	8003d5c <HAL_HRTIM_MspPostInit>

}
 8003ac8:	bf00      	nop
 8003aca:	37d8      	adds	r7, #216	; 0xd8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000358 	.word	0x20000358

08003ad4 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08e      	sub	sp, #56	; 0x38
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	60da      	str	r2, [r3, #12]
  if(hrtimHandle->Instance==HRTIM1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a8e      	ldr	r2, [pc, #568]	; (8003d38 <HAL_HRTIM_MspInit+0x264>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	f040 8115 	bne.w	8003d30 <HAL_HRTIM_MspInit+0x25c>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003b06:	4b8d      	ldr	r3, [pc, #564]	; (8003d3c <HAL_HRTIM_MspInit+0x268>)
 8003b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0a:	4a8c      	ldr	r2, [pc, #560]	; (8003d3c <HAL_HRTIM_MspInit+0x268>)
 8003b0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b10:	6613      	str	r3, [r2, #96]	; 0x60
 8003b12:	4b8a      	ldr	r3, [pc, #552]	; (8003d3c <HAL_HRTIM_MspInit+0x268>)
 8003b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1e:	4b87      	ldr	r3, [pc, #540]	; (8003d3c <HAL_HRTIM_MspInit+0x268>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	4a86      	ldr	r2, [pc, #536]	; (8003d3c <HAL_HRTIM_MspInit+0x268>)
 8003b24:	f043 0302 	orr.w	r3, r3, #2
 8003b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b2a:	4b84      	ldr	r3, [pc, #528]	; (8003d3c <HAL_HRTIM_MspInit+0x268>)
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b36:	4b81      	ldr	r3, [pc, #516]	; (8003d3c <HAL_HRTIM_MspInit+0x268>)
 8003b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3a:	4a80      	ldr	r2, [pc, #512]	; (8003d3c <HAL_HRTIM_MspInit+0x268>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b42:	4b7e      	ldr	r3, [pc, #504]	; (8003d3c <HAL_HRTIM_MspInit+0x268>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB10     ------> HRTIM1_FLT3
    PA12     ------> HRTIM1_FLT1
    */
    GPIO_InitStruct.Pin = OCP_A_Pin;
 8003b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8003b60:	230d      	movs	r3, #13
 8003b62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCP_A_GPIO_Port, &GPIO_InitStruct);
 8003b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4875      	ldr	r0, [pc, #468]	; (8003d40 <HAL_HRTIM_MspInit+0x26c>)
 8003b6c:	f003 fbec 	bl	8007348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AC_FAULT_Pin;
 8003b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b76:	2302      	movs	r3, #2
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8003b82:	230d      	movs	r3, #13
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AC_FAULT_GPIO_Port, &GPIO_InitStruct);
 8003b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b90:	f003 fbda 	bl	8007348 <HAL_GPIO_Init>

    /* HRTIM1 DMA Init */
    /* HRTIM1_A Init */
    hdma_hrtim1_a.Instance = DMA1_Channel1;
 8003b94:	4b6b      	ldr	r3, [pc, #428]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003b96:	4a6c      	ldr	r2, [pc, #432]	; (8003d48 <HAL_HRTIM_MspInit+0x274>)
 8003b98:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_a.Init.Request = DMA_REQUEST_HRTIM1_A;
 8003b9a:	4b6a      	ldr	r3, [pc, #424]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003b9c:	2260      	movs	r2, #96	; 0x60
 8003b9e:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ba0:	4b68      	ldr	r3, [pc, #416]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003ba2:	2210      	movs	r2, #16
 8003ba4:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ba6:	4b67      	ldr	r3, [pc, #412]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_a.Init.MemInc = DMA_MINC_ENABLE;
 8003bac:	4b65      	ldr	r3, [pc, #404]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003bae:	2280      	movs	r2, #128	; 0x80
 8003bb0:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bb2:	4b64      	ldr	r3, [pc, #400]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb8:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003bba:	4b62      	ldr	r3, [pc, #392]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc0:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_a.Init.Mode = DMA_CIRCULAR;
 8003bc2:	4b60      	ldr	r3, [pc, #384]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003bc8:	4b5e      	ldr	r3, [pc, #376]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_a) != HAL_OK)
 8003bd0:	485c      	ldr	r0, [pc, #368]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003bd2:	f003 f80b 	bl	8006bec <HAL_DMA_Init>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_HRTIM_MspInit+0x10c>
    {
      Error_Handler();
 8003bdc:	f000 fda2 	bl	8004724 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8003bec:	2301      	movs	r3, #1
 8003bee:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_a, &pSyncConfig) != HAL_OK)
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4852      	ldr	r0, [pc, #328]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003bfc:	f003 fa68 	bl	80070d0 <HAL_DMAEx_ConfigMuxSync>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_HRTIM_MspInit+0x136>
    {
      Error_Handler();
 8003c06:	f000 fd8d 	bl	8004724 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerA,hdma_hrtim1_a);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4d      	ldr	r2, [pc, #308]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003c0e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8003c12:	4a4c      	ldr	r2, [pc, #304]	; (8003d44 <HAL_HRTIM_MspInit+0x270>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1_B Init */
    hdma_hrtim1_b.Instance = DMA1_Channel2;
 8003c18:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c1a:	4a4d      	ldr	r2, [pc, #308]	; (8003d50 <HAL_HRTIM_MspInit+0x27c>)
 8003c1c:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_b.Init.Request = DMA_REQUEST_HRTIM1_B;
 8003c1e:	4b4b      	ldr	r3, [pc, #300]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c20:	2261      	movs	r2, #97	; 0x61
 8003c22:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c24:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c26:	2210      	movs	r2, #16
 8003c28:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c2a:	4b48      	ldr	r3, [pc, #288]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_b.Init.MemInc = DMA_MINC_ENABLE;
 8003c30:	4b46      	ldr	r3, [pc, #280]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c32:	2280      	movs	r2, #128	; 0x80
 8003c34:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c36:	4b45      	ldr	r3, [pc, #276]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c3c:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c3e:	4b43      	ldr	r3, [pc, #268]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c44:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_b.Init.Mode = DMA_CIRCULAR;
 8003c46:	4b41      	ldr	r3, [pc, #260]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c48:	2220      	movs	r2, #32
 8003c4a:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003c4c:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_b) != HAL_OK)
 8003c54:	483d      	ldr	r0, [pc, #244]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c56:	f002 ffc9 	bl	8006bec <HAL_DMA_Init>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_HRTIM_MspInit+0x190>
    {
      Error_Handler();
 8003c60:	f000 fd60 	bl	8004724 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8003c70:	2301      	movs	r3, #1
 8003c72:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8003c74:	2301      	movs	r3, #1
 8003c76:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_b, &pSyncConfig) != HAL_OK)
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4833      	ldr	r0, [pc, #204]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c80:	f003 fa26 	bl	80070d0 <HAL_DMAEx_ConfigMuxSync>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_HRTIM_MspInit+0x1ba>
    {
      Error_Handler();
 8003c8a:	f000 fd4b 	bl	8004724 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerB,hdma_hrtim1_b);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2e      	ldr	r2, [pc, #184]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c92:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003c96:	4a2d      	ldr	r2, [pc, #180]	; (8003d4c <HAL_HRTIM_MspInit+0x278>)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1_C Init */
    hdma_hrtim1_c.Instance = DMA1_Channel3;
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003c9e:	4a2e      	ldr	r2, [pc, #184]	; (8003d58 <HAL_HRTIM_MspInit+0x284>)
 8003ca0:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_c.Init.Request = DMA_REQUEST_HRTIM1_C;
 8003ca2:	4b2c      	ldr	r3, [pc, #176]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003ca4:	2262      	movs	r2, #98	; 0x62
 8003ca6:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_c.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ca8:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003caa:	2210      	movs	r2, #16
 8003cac:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_c.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cae:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_c.Init.MemInc = DMA_MINC_ENABLE;
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_c.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cba:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc0:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_c.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cc8:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_c.Init.Mode = DMA_CIRCULAR;
 8003cca:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003ccc:	2220      	movs	r2, #32
 8003cce:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_c.Init.Priority = DMA_PRIORITY_HIGH;
 8003cd0:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_c) != HAL_OK)
 8003cd8:	481e      	ldr	r0, [pc, #120]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003cda:	f002 ff87 	bl	8006bec <HAL_DMA_Init>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_HRTIM_MspInit+0x214>
    {
      Error_Handler();
 8003ce4:	f000 fd1e 	bl	8004724 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_c, &pSyncConfig) != HAL_OK)
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	4619      	mov	r1, r3
 8003d02:	4814      	ldr	r0, [pc, #80]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003d04:	f003 f9e4 	bl	80070d0 <HAL_DMAEx_ConfigMuxSync>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_HRTIM_MspInit+0x23e>
    {
      Error_Handler();
 8003d0e:	f000 fd09 	bl	8004724 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerC,hdma_hrtim1_c);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a0f      	ldr	r2, [pc, #60]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003d16:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8003d1a:	4a0e      	ldr	r2, [pc, #56]	; (8003d54 <HAL_HRTIM_MspInit+0x280>)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_FLT_IRQn, 0, 0);
 8003d20:	2200      	movs	r2, #0
 8003d22:	2100      	movs	r1, #0
 8003d24:	2049      	movs	r0, #73	; 0x49
 8003d26:	f002 ff2c 	bl	8006b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_FLT_IRQn);
 8003d2a:	2049      	movs	r0, #73	; 0x49
 8003d2c:	f002 ff43 	bl	8006bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8003d30:	bf00      	nop
 8003d32:	3738      	adds	r7, #56	; 0x38
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40016800 	.word	0x40016800
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	48000400 	.word	0x48000400
 8003d44:	200002f8 	.word	0x200002f8
 8003d48:	40020008 	.word	0x40020008
 8003d4c:	20000454 	.word	0x20000454
 8003d50:	4002001c 	.word	0x4002001c
 8003d54:	200004b4 	.word	0x200004b4
 8003d58:	40020030 	.word	0x40020030

08003d5c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a20      	ldr	r2, [pc, #128]	; (8003dfc <HAL_HRTIM_MspPostInit+0xa0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d13a      	bne.n	8003df4 <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d7e:	4b20      	ldr	r3, [pc, #128]	; (8003e00 <HAL_HRTIM_MspPostInit+0xa4>)
 8003d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d82:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <HAL_HRTIM_MspPostInit+0xa4>)
 8003d84:	f043 0302 	orr.w	r3, r3, #2
 8003d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_HRTIM_MspPostInit+0xa4>)
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d96:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <HAL_HRTIM_MspPostInit+0xa4>)
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_HRTIM_MspPostInit+0xa4>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003da2:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <HAL_HRTIM_MspPostInit+0xa4>)
 8003da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM1 GPIO Configuration
    PB12     ------> HRTIM1_CHC1
    PA8     ------> HRTIM1_CHA1
    PA10     ------> HRTIM1_CHB1
    */
    GPIO_InitStruct.Pin = TC_HS_Pin;
 8003dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8003dc0:	230d      	movs	r3, #13
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TC_HS_GPIO_Port, &GPIO_InitStruct);
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	4619      	mov	r1, r3
 8003dca:	480e      	ldr	r0, [pc, #56]	; (8003e04 <HAL_HRTIM_MspPostInit+0xa8>)
 8003dcc:	f003 fabc 	bl	8007348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TA_HS_Pin|TB_HS_Pin;
 8003dd0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dde:	2303      	movs	r3, #3
 8003de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8003de2:	230d      	movs	r3, #13
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de6:	f107 0314 	add.w	r3, r7, #20
 8003dea:	4619      	mov	r1, r3
 8003dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003df0:	f003 faaa 	bl	8007348 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8003df4:	bf00      	nop
 8003df6:	3728      	adds	r7, #40	; 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40016800 	.word	0x40016800
 8003e00:	40021000 	.word	0x40021000
 8003e04:	48000400 	.word	0x48000400

08003e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0a:	b091      	sub	sp, #68	; 0x44
 8003e0c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e0e:	f000 ff46 	bl	8004c9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e12:	f000 f949 	bl	80040a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e16:	f7ff fbfb 	bl	8003610 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e1a:	f7ff fb7b 	bl	8003514 <MX_DMA_Init>
  MX_TIM2_Init();
 8003e1e:	f000 fd83 	bl	8004928 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003e22:	f000 fdcd 	bl	80049c0 <MX_TIM3_Init>
  MX_CORDIC_Init();
 8003e26:	f7ff fb41 	bl	80034ac <MX_CORDIC_Init>
  MX_ADC1_Init();
 8003e2a:	f7ff f903 	bl	8003034 <MX_ADC1_Init>
  MX_ADC5_Init();
 8003e2e:	f7ff fa21 	bl	8003274 <MX_ADC5_Init>
  MX_RNG_Init();
 8003e32:	f000 fc7b 	bl	800472c <MX_RNG_Init>
  MX_TIM6_Init();
 8003e36:	f000 fe11 	bl	8004a5c <MX_TIM6_Init>
  MX_HRTIM1_Init();
 8003e3a:	f7ff fc49 	bl	80036d0 <MX_HRTIM1_Init>
  MX_TIM15_Init();
 8003e3e:	f000 fe43 	bl	8004ac8 <MX_TIM15_Init>
  MX_FMAC_Init();
 8003e42:	f7ff fbb1 	bl	80035a8 <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  PWM_PERIOD_COUNTER = 10000;
 8003e46:	4b6e      	ldr	r3, [pc, #440]	; (8004000 <main+0x1f8>)
 8003e48:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e4c:	601a      	str	r2, [r3, #0]

  DPC_ADC_Init(&DPC_ADC_Conf,G_VAC,B_VAC,G_IAC,B_IAC,G_VDC,B_VDC,G_IDC,B_IDC);
 8003e4e:	eddf 3a6d 	vldr	s7, [pc, #436]	; 8004004 <main+0x1fc>
 8003e52:	ed9f 3a6d 	vldr	s6, [pc, #436]	; 8004008 <main+0x200>
 8003e56:	eddf 2a6d 	vldr	s5, [pc, #436]	; 800400c <main+0x204>
 8003e5a:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 8004010 <main+0x208>
 8003e5e:	eddf 1a69 	vldr	s3, [pc, #420]	; 8004004 <main+0x1fc>
 8003e62:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8004014 <main+0x20c>
 8003e66:	eddf 0a67 	vldr	s1, [pc, #412]	; 8004004 <main+0x1fc>
 8003e6a:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8004018 <main+0x210>
 8003e6e:	486b      	ldr	r0, [pc, #428]	; (800401c <main+0x214>)
 8003e70:	f7fe ff66 	bl	8002d40 <DPC_ADC_Init>

  DPC_MISC_APPL_Timer_Init(APPL_Tim1, RefreshTime_DESIDERED);   //timer setting                                                                                                                                        /// Function used to Init the timers APP_TIM1 (htim2) used in the power application
 8003e74:	4e6a      	ldr	r6, [pc, #424]	; (8004020 <main+0x218>)
 8003e76:	f242 7310 	movw	r3, #10000	; 0x2710
 8003e7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e7c:	466d      	mov	r5, sp
 8003e7e:	f106 0410 	add.w	r4, r6, #16
 8003e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e8e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003e92:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003e96:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003e9a:	f7fd fcc3 	bl	8001824 <DPC_MISC_APPL_Timer_Init>
  DPC_MISC_APPL_Timer_Init(APPL_Tim2, RefreshTime_TO_DESIDERED);                                                                                                                                        /// Function used to Init the timers APP_TIM1 (htim3) used in the power application
 8003e9e:	4e61      	ldr	r6, [pc, #388]	; (8004024 <main+0x21c>)
 8003ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ea4:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ea6:	466d      	mov	r5, sp
 8003ea8:	f106 0410 	add.w	r4, r6, #16
 8003eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eb8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003ebc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003ec0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003ec4:	f7fd fcae 	bl	8001824 <DPC_MISC_APPL_Timer_Init>
  DPC_MISC_APPL_Timer_Init(APPL_Tim3, RefreshTime2_DESIDERED);
 8003ec8:	4e57      	ldr	r6, [pc, #348]	; (8004028 <main+0x220>)
 8003eca:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ed0:	466d      	mov	r5, sp
 8003ed2:	f106 0410 	add.w	r4, r6, #16
 8003ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003ee6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003eea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003eee:	f7fd fc99 	bl	8001824 <DPC_MISC_APPL_Timer_Init>

  DPC_MISC_Analog_Start();
 8003ef2:	f000 f94b 	bl	800418c <DPC_MISC_Analog_Start>

  DPC_PLL_Init(&PLL_CONVERTER,PLL_KP, PLL_KI, DPC_PLL_TS,PLL_PHI_2pi,PLL_DELTA_F,PLL_FF_Hz,DPC_PLL_SAT_EN,DPC_PLL_PIsat_up,DPC_PLL_PIsat_down);                                                         /// INIT PLL
 8003ef6:	ed9f 3a4d 	vldr	s6, [pc, #308]	; 800402c <main+0x224>
 8003efa:	eddf 2a4d 	vldr	s5, [pc, #308]	; 8004030 <main+0x228>
 8003efe:	2201      	movs	r2, #1
 8003f00:	2132      	movs	r1, #50	; 0x32
 8003f02:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 8003f06:	eddf 1a4b 	vldr	s3, [pc, #300]	; 8004034 <main+0x22c>
 8003f0a:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8004038 <main+0x230>
 8003f0e:	eddf 0a4b 	vldr	s1, [pc, #300]	; 800403c <main+0x234>
 8003f12:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003f16:	484a      	ldr	r0, [pc, #296]	; (8004040 <main+0x238>)
 8003f18:	f7fd fdd2 	bl	8001ac0 <DPC_PLL_Init>
  DPC_PI_Init(&CDC.pPI_ID_CURR_CTRL,DPC_ID_KP,DPC_ID_KI,DPC_PI_ID_TS,DPC_PI_ID_sat_up,DPC_PI_ID_sat_down,DPC_PI_ID_SAT_EN,DPC_PI_ID_AW_EN,DPC_PI_ID_AWTG);                                              /// INIT PI CURRENT CTRL D
 8003f1c:	eddf 2a49 	vldr	s5, [pc, #292]	; 8004044 <main+0x23c>
 8003f20:	2201      	movs	r2, #1
 8003f22:	2101      	movs	r1, #1
 8003f24:	ed9f 2a48 	vldr	s4, [pc, #288]	; 8004048 <main+0x240>
 8003f28:	eddf 1a48 	vldr	s3, [pc, #288]	; 800404c <main+0x244>
 8003f2c:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8004050 <main+0x248>
 8003f30:	eddf 0a48 	vldr	s1, [pc, #288]	; 8004054 <main+0x24c>
 8003f34:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8004058 <main+0x250>
 8003f38:	4848      	ldr	r0, [pc, #288]	; (800405c <main+0x254>)
 8003f3a:	f7fe fa11 	bl	8002360 <DPC_PI_Init>
  DPC_PI_Init(&CDC.pPI_IQ_CURR_CTRL,DPC_IQ_KP,DPC_IQ_KI,DPC_PI_IQ_TS,DPC_PI_IQ_sat_up,DPC_PI_IQ_sat_down,DPC_PI_IQ_SAT_EN,DPC_PI_IQ_AW_EN,DPC_PI_IQ_AWTG);                                              /// INIT PI CURRENT CTRL Q
 8003f3e:	eddf 2a41 	vldr	s5, [pc, #260]	; 8004044 <main+0x23c>
 8003f42:	2201      	movs	r2, #1
 8003f44:	2101      	movs	r1, #1
 8003f46:	ed9f 2a46 	vldr	s4, [pc, #280]	; 8004060 <main+0x258>
 8003f4a:	eddf 1a46 	vldr	s3, [pc, #280]	; 8004064 <main+0x25c>
 8003f4e:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8004050 <main+0x248>
 8003f52:	eddf 0a40 	vldr	s1, [pc, #256]	; 8004054 <main+0x24c>
 8003f56:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8004058 <main+0x250>
 8003f5a:	4843      	ldr	r0, [pc, #268]	; (8004068 <main+0x260>)
 8003f5c:	f7fe fa00 	bl	8002360 <DPC_PI_Init>
  DPC_PI_Init(&pPI_VDC_CTRL,DPC_VCTRL_KP,DPC_VCTRL_KI,DPC_PI_VDC_TS,DPC_VCTRL_PI_sat_up,DPC_VCTRL_PI_sat_down,DPC_VCTRL_PI_SAT_EN,DPC_VCTRL_PI_AW_EN,DPC_VCTRL_PI_AWTG);                                /// INIT PI VOLTAGE CTRL
 8003f60:	eddf 2a42 	vldr	s5, [pc, #264]	; 800406c <main+0x264>
 8003f64:	2201      	movs	r2, #1
 8003f66:	2101      	movs	r1, #1
 8003f68:	ed9f 2a28 	vldr	s4, [pc, #160]	; 800400c <main+0x204>
 8003f6c:	eddf 1a40 	vldr	s3, [pc, #256]	; 8004070 <main+0x268>
 8003f70:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8004050 <main+0x248>
 8003f74:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8004074 <main+0x26c>
 8003f78:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8004078 <main+0x270>
 8003f7c:	483f      	ldr	r0, [pc, #252]	; (800407c <main+0x274>)
 8003f7e:	f7fe f9ef 	bl	8002360 <DPC_PI_Init>
  DPC_LPCNTRL_CDC_Init(&CDC,DPC_PLL_OMEGAGRID,DPC_INDUCTOR,CDC_FF_Init,CDC_DEC_INIT,CDC_VDC_FF_INIT);
 8003f82:	2300      	movs	r3, #0
 8003f84:	2200      	movs	r2, #0
 8003f86:	2100      	movs	r1, #0
 8003f88:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8004080 <main+0x278>
 8003f8c:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8004084 <main+0x27c>
 8003f90:	483d      	ldr	r0, [pc, #244]	; (8004088 <main+0x280>)
 8003f92:	f7fd f90b 	bl	80011ac <DPC_LPCNTRL_CDC_Init>

  DPC_MISC_ACSource_Init(&AC_Source_Limit,DPC_VAC_PK_OV,DPC_VAC_PK_UV,DPC_VAC_PK_UVLO,DPC_VAC_MIN,DPC_IAC_MAX,&DPC_ADC_Conf);                                                                           /// INIT AC_Source
 8003f96:	4b21      	ldr	r3, [pc, #132]	; (800401c <main+0x214>)
 8003f98:	9302      	str	r3, [sp, #8]
 8003f9a:	231e      	movs	r3, #30
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	2314      	movs	r3, #20
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	2346      	movs	r3, #70	; 0x46
 8003fa4:	222a      	movs	r2, #42	; 0x2a
 8003fa6:	f240 2135 	movw	r1, #565	; 0x235
 8003faa:	4838      	ldr	r0, [pc, #224]	; (800408c <main+0x284>)
 8003fac:	f7fd fb3c 	bl	8001628 <DPC_MISC_ACSource_Init>
  DPC_MISC_DCLoad_Init(&DC_Load_Limit,DPC_VDC_OV,DPC_VCAP_LIM,DPC_NO_LOAD_CURR,DPC_LOW_LOAD_CURR,DPC_OVER_LOAD_CURR,&DPC_ADC_Conf);
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	; (800401c <main+0x214>)
 8003fb2:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8003fb6:	eddf 0a36 	vldr	s1, [pc, #216]	; 8004090 <main+0x288>
 8003fba:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003fbe:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8003fc2:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003fc6:	4833      	ldr	r0, [pc, #204]	; (8004094 <main+0x28c>)
 8003fc8:	f7fd fa56 	bl	8001478 <DPC_MISC_DCLoad_Init>

  DPC_LPCNTRL_PFC_Init(&pPFC_CTRL,DPC_CTRL_INIT,DPC_PFC_VDC,&DPC_ADC_Conf);
 8003fcc:	4b13      	ldr	r3, [pc, #76]	; (800401c <main+0x214>)
 8003fce:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4830      	ldr	r0, [pc, #192]	; (8004098 <main+0x290>)
 8003fd6:	f7fd f912 	bl	80011fe <DPC_LPCNTRL_PFC_Init>
  DPC_PWM_Init(DPC_BURST_PWM_FREQ,PWM_FREQ,DPC_PWM_INIT,&tDPC_PWM, &DMA_HRTIM_SRC);
 8003fda:	4b30      	ldr	r3, [pc, #192]	; (800409c <main+0x294>)
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <main+0x298>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f649 4140 	movw	r1, #40000	; 0x9c40
 8003fe6:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003fea:	f7fe f911 	bl	8002210 <DPC_PWM_Init>
//  DPC_FSM_State_Set(DPC_FSM_WAIT);
//
  DPC_MISC_Appl_Timer_Start();
 8003fee:	f7fd fc43 	bl	8001878 <DPC_MISC_Appl_Timer_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	2120      	movs	r1, #32
 8003ff6:	482b      	ldr	r0, [pc, #172]	; (80040a4 <main+0x29c>)
 8003ff8:	f003 fb28 	bl	800764c <HAL_GPIO_WritePin>
 8003ffc:	e7f9      	b.n	8003ff2 <main+0x1ea>
 8003ffe:	bf00      	nop
 8004000:	2000b714 	.word	0x2000b714
 8004004:	45000000 	.word	0x45000000
 8004008:	42cccccd 	.word	0x42cccccd
 800400c:	00000000 	.word	0x00000000
 8004010:	40f73b64 	.word	0x40f73b64
 8004014:	422aae14 	.word	0x422aae14
 8004018:	4096a7f0 	.word	0x4096a7f0
 800401c:	20001864 	.word	0x20001864
 8004020:	2000b9bc 	.word	0x2000b9bc
 8004024:	2000b924 	.word	0x2000b924
 8004028:	2000b970 	.word	0x2000b970
 800402c:	c2480000 	.word	0xc2480000
 8004030:	42480000 	.word	0x42480000
 8004034:	bfc90fd8 	.word	0xbfc90fd8
 8004038:	3951b717 	.word	0x3951b717
 800403c:	43fa0000 	.word	0x43fa0000
 8004040:	2000b668 	.word	0x2000b668
 8004044:	3c23d70a 	.word	0x3c23d70a
 8004048:	bf666666 	.word	0xbf666666
 800404c:	3f666666 	.word	0x3f666666
 8004050:	38d1b717 	.word	0x38d1b717
 8004054:	4410d99a 	.word	0x4410d99a
 8004058:	3e2eb1c4 	.word	0x3e2eb1c4
 800405c:	200005dc 	.word	0x200005dc
 8004060:	bdcccccd 	.word	0xbdcccccd
 8004064:	3dcccccd 	.word	0x3dcccccd
 8004068:	20000624 	.word	0x20000624
 800406c:	3ca3d70a 	.word	0x3ca3d70a
 8004070:	3e6ffb34 	.word	0x3e6ffb34
 8004074:	3e99999a 	.word	0x3e99999a
 8004078:	39d1b717 	.word	0x39d1b717
 800407c:	2000b570 	.word	0x2000b570
 8004080:	3a6bedfa 	.word	0x3a6bedfa
 8004084:	439d0000 	.word	0x439d0000
 8004088:	20000594 	.word	0x20000594
 800408c:	200006ac 	.word	0x200006ac
 8004090:	3f99999a 	.word	0x3f99999a
 8004094:	2000b518 	.word	0x2000b518
 8004098:	2000b7cc 	.word	0x2000b7cc
 800409c:	20000048 	.word	0x20000048
 80040a0:	20001814 	.word	0x20001814
 80040a4:	48000800 	.word	0x48000800

080040a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b0a8      	sub	sp, #160	; 0xa0
 80040ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040b2:	2238      	movs	r2, #56	; 0x38
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f007 ff7d 	bl	800bfb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040cc:	463b      	mov	r3, r7
 80040ce:	2254      	movs	r2, #84	; 0x54
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f007 ff6f 	bl	800bfb6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80040d8:	2000      	movs	r0, #0
 80040da:	f006 f82b 	bl	800a134 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80040de:	2322      	movs	r3, #34	; 0x22
 80040e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040e6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040e8:	2340      	movs	r3, #64	; 0x40
 80040ea:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040f2:	2302      	movs	r3, #2
 80040f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040f8:	2302      	movs	r3, #2
 80040fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80040fe:	2304      	movs	r3, #4
 8004100:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004104:	2355      	movs	r3, #85	; 0x55
 8004106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800410a:	2302      	movs	r3, #2
 800410c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004110:	2302      	movs	r3, #2
 8004112:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004116:	2302      	movs	r3, #2
 8004118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800411c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004120:	4618      	mov	r0, r3
 8004122:	f006 f8bb 	bl	800a29c <HAL_RCC_OscConfig>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800412c:	f000 fafa 	bl	8004724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004130:	230f      	movs	r3, #15
 8004132:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004134:	2303      	movs	r3, #3
 8004136:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004138:	2300      	movs	r3, #0
 800413a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800413c:	2300      	movs	r3, #0
 800413e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004140:	2300      	movs	r3, #0
 8004142:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004144:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004148:	2104      	movs	r1, #4
 800414a:	4618      	mov	r0, r3
 800414c:	f006 fbbe 	bl	800a8cc <HAL_RCC_ClockConfig>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004156:	f000 fae5 	bl	8004724 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12
 800415a:	f44f 33e0 	mov.w	r3, #114688	; 0x1c000
 800415e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8004160:	2300      	movs	r3, #0
 8004162:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004164:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004168:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800416a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800416e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004170:	463b      	mov	r3, r7
 8004172:	4618      	mov	r0, r3
 8004174:	f006 fdb0 	bl	800acd8 <HAL_RCCEx_PeriphCLKConfig>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800417e:	f000 fad1 	bl	8004724 <Error_Handler>
  }
}
 8004182:	bf00      	nop
 8004184:	37a0      	adds	r7, #160	; 0xa0
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <DPC_MISC_Analog_Start>:

/* USER CODE BEGIN 4 */

void  DPC_MISC_Analog_Start(void){
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  HAL_ADC_Start_DMA(&hadc1,p_ADC1_Data,ADC1_CHs);                              ///HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* p_ADC1_Data, uint32_t Length)
 8004190:	2208      	movs	r2, #8
 8004192:	4903      	ldr	r1, [pc, #12]	; (80041a0 <DPC_MISC_Analog_Start+0x14>)
 8004194:	4803      	ldr	r0, [pc, #12]	; (80041a4 <DPC_MISC_Analog_Start+0x18>)
 8004196:	f001 faa9 	bl	80056ec <HAL_ADC_Start_DMA>
}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200017f4 	.word	0x200017f4
 80041a4:	200001cc 	.word	0x200001cc

080041a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af04      	add	r7, sp, #16
 80041ae:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	f040 81bd 	bne.w	8004536 <HAL_TIM_PeriodElapsedCallback+0x38e>
	{
		 DATA_Acquisition_from_DMA(p_ADC1_Data,p_ADC2_Data); //Pass ADC DMA Data in DATA LAYER
 80041bc:	499f      	ldr	r1, [pc, #636]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80041be:	48a0      	ldr	r0, [pc, #640]	; (8004440 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80041c0:	f7fc fcc6 	bl	8000b50 <DATA_Acquisition_from_DMA>

		//start READ variable from DATA LAYER
		ADC_Current_AC_ProcessData((uint32_t*)Read_Curr_GRID(),&CURRENT_ADC_AC_IN_NORM);                    /// Read Current AC from DATA Layer and pass it at CURRENT_ADC_AC_IN_NORM
 80041c4:	f7fc fd10 	bl	8000be8 <Read_Curr_GRID>
 80041c8:	4603      	mov	r3, r0
 80041ca:	499e      	ldr	r1, [pc, #632]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe fce9 	bl	8002ba4 <ADC_Current_AC_ProcessData>
		ADC2Phy_Current_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Curr_GRID(),&CURRENT_ADC_AC_IN_PHY);      /// Read Current AC from DATA Layer and pass it at CURRENT_ADC_AC_IN_PHY
 80041d2:	f7fc fd09 	bl	8000be8 <Read_Curr_GRID>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4a9b      	ldr	r2, [pc, #620]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80041da:	4619      	mov	r1, r3
 80041dc:	489b      	ldr	r0, [pc, #620]	; (800444c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80041de:	f7fe fd23 	bl	8002c28 <ADC2Phy_Current_ProcessData>
		//end READ variable from DATA LAYER

		Status_Load=DPC_MISC_Check_DCLoad(&DPC_Load,DC_Load_Limit);
 80041e2:	4b9b      	ldr	r3, [pc, #620]	; (8004450 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	2100      	movs	r1, #0
 80041e8:	4611      	mov	r1, r2
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	2500      	movs	r5, #0
 80041ee:	4615      	mov	r5, r2
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	2400      	movs	r4, #0
 80041f4:	4614      	mov	r4, r2
 80041f6:	466a      	mov	r2, sp
 80041f8:	330c      	adds	r3, #12
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	6010      	str	r0, [r2, #0]
 80041fe:	889b      	ldrh	r3, [r3, #4]
 8004200:	8093      	strh	r3, [r2, #4]
 8004202:	462a      	mov	r2, r5
 8004204:	4623      	mov	r3, r4
 8004206:	4893      	ldr	r0, [pc, #588]	; (8004454 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004208:	f7fd f8b8 	bl	800137c <DPC_MISC_Check_DCLoad>
 800420c:	4603      	mov	r3, r0
 800420e:	461a      	mov	r2, r3
 8004210:	4b91      	ldr	r3, [pc, #580]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004212:	701a      	strb	r2, [r3, #0]
		Status_Source=DPC_MISC_CHECK_AC_SOURCE(&AC_SOURCE,AC_Source_Limit,PLL_CONVERTER.pll_theta_out_2pi);  ///Check AC SOURCE state reading AC Voltage and curent
 8004214:	4b91      	ldr	r3, [pc, #580]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004216:	edd3 7a02 	vldr	s15, [r3, #8]
 800421a:	4b91      	ldr	r3, [pc, #580]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	2600      	movs	r6, #0
 8004220:	4616      	mov	r6, r2
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	2500      	movs	r5, #0
 8004226:	4615      	mov	r5, r2
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	2400      	movs	r4, #0
 800422c:	4614      	mov	r4, r2
 800422e:	466a      	mov	r2, sp
 8004230:	330c      	adds	r3, #12
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	6859      	ldr	r1, [r3, #4]
 8004236:	c203      	stmia	r2!, {r0, r1}
 8004238:	eeb0 0a67 	vmov.f32	s0, s15
 800423c:	4631      	mov	r1, r6
 800423e:	462a      	mov	r2, r5
 8004240:	4623      	mov	r3, r4
 8004242:	4888      	ldr	r0, [pc, #544]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004244:	f7fd fb32 	bl	80018ac <DPC_MISC_CHECK_AC_SOURCE>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	4b86      	ldr	r3, [pc, #536]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800424e:	701a      	strb	r2, [r3, #0]

		Iabc_temp=*((TRANSFORM_ABC_t*)&CURRENT_ADC_AC_IN_NORM);                                             /// Sensing Current
 8004250:	4a7c      	ldr	r2, [pc, #496]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004252:	4b86      	ldr	r3, [pc, #536]	; (800446c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004254:	ca07      	ldmia	r2, {r0, r1, r2}
 8004256:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Iabc_Phy=*((TRANSFORM_ABC_t*)&CURRENT_ADC_AC_IN_PHY);                                               /// Sensing Current in Physical dimension
 800425a:	4a7b      	ldr	r2, [pc, #492]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800425c:	4b84      	ldr	r3, [pc, #528]	; (8004470 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800425e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004260:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		Run_ClarkePark(&Iabc_temp, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Current_qdo);
 8004264:	f7fc fc26 	bl	8000ab4 <DATA_Read_Theta_PLL>
 8004268:	eeb0 7a40 	vmov.f32	s14, s0
 800426c:	4b7b      	ldr	r3, [pc, #492]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800426e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004272:	4980      	ldr	r1, [pc, #512]	; (8004474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004274:	eef0 0a67 	vmov.f32	s1, s15
 8004278:	eeb0 0a47 	vmov.f32	s0, s14
 800427c:	487b      	ldr	r0, [pc, #492]	; (800446c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800427e:	f7fe fafb 	bl	8002878 <Run_ClarkePark>
		//Run_ClarkePark(&Iabc_Phy, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Current_qdo_Phy);

		DATA_CURR_Write_ClarkePark(Current_qdo);  // Current qdo in DATA layer
 8004282:	4b7c      	ldr	r3, [pc, #496]	; (8004474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004284:	edd3 6a00 	vldr	s13, [r3]
 8004288:	ed93 7a01 	vldr	s14, [r3, #4]
 800428c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004290:	eeb0 0a66 	vmov.f32	s0, s13
 8004294:	eef0 0a47 	vmov.f32	s1, s14
 8004298:	eeb0 1a67 	vmov.f32	s2, s15
 800429c:	f7fc fc18 	bl	8000ad0 <DATA_CURR_Write_ClarkePark>
		//DATA_CURR_Write_ClarkePark(Current_qdo_Phy);  // Current qdo in DATA layer

		PC_State=FSM_Run;
 80042a0:	4b75      	ldr	r3, [pc, #468]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80042a2:	2203      	movs	r2, #3
 80042a4:	701a      	strb	r2, [r3, #0]


		if (VOLTAGE_ADC_DC_IN_PHY.Vdc_tot>=360){
 80042a6:	4b75      	ldr	r3, [pc, #468]	; (800447c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80042a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80042ac:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8004480 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 80042b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	db09      	blt.n	80042ce <HAL_TIM_PeriodElapsedCallback+0x126>
			HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_SET);
 80042ba:	2201      	movs	r2, #1
 80042bc:	2180      	movs	r1, #128	; 0x80
 80042be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042c2:	f003 f9c3 	bl	800764c <HAL_GPIO_WritePin>
			Relay_state=1;
 80042c6:	4b6f      	ldr	r3, [pc, #444]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	801a      	strh	r2, [r3, #0]
 80042cc:	e019      	b.n	8004302 <HAL_TIM_PeriodElapsedCallback+0x15a>
			if (Timeout[0]>5000){

			}
		}
		else if (VOLTAGE_ADC_DC_IN_PHY.Vdc_tot<355){
 80042ce:	4b6b      	ldr	r3, [pc, #428]	; (800447c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80042d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80042d4:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004488 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 80042d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e0:	d50c      	bpl.n	80042fc <HAL_TIM_PeriodElapsedCallback+0x154>
			HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 80042e2:	2200      	movs	r2, #0
 80042e4:	2180      	movs	r1, #128	; 0x80
 80042e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042ea:	f003 f9af 	bl	800764c <HAL_GPIO_WritePin>
			Relay_state=0;
 80042ee:	4b65      	ldr	r3, [pc, #404]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	801a      	strh	r2, [r3, #0]
			Timeout[0]=0;
 80042f4:	4b65      	ldr	r3, [pc, #404]	; (800448c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e002      	b.n	8004302 <HAL_TIM_PeriodElapsedCallback+0x15a>
		}
		else {
			Timeout[0]=0;
 80042fc:	4b63      	ldr	r3, [pc, #396]	; (800448c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
		}

		//PC_State=FSM_StartUp_burst;
		//if (Status_Source!=OVERCURRENT_SOURCE) Status_Source=OK_SOURCE;
		if (Status_Source==OK_SOURCE && Relay_state==1 && PLL_Status==PLL_SYNC && Status_Load!=OVERCURRENT_LOAD
 8004302:	4b59      	ldr	r3, [pc, #356]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b04      	cmp	r3, #4
 8004308:	d11d      	bne.n	8004346 <HAL_TIM_PeriodElapsedCallback+0x19e>
 800430a:	4b5e      	ldr	r3, [pc, #376]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d119      	bne.n	8004346 <HAL_TIM_PeriodElapsedCallback+0x19e>
 8004312:	4b5f      	ldr	r3, [pc, #380]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d115      	bne.n	8004346 <HAL_TIM_PeriodElapsedCallback+0x19e>
 800431a:	4b4f      	ldr	r3, [pc, #316]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b04      	cmp	r3, #4
 8004320:	d011      	beq.n	8004346 <HAL_TIM_PeriodElapsedCallback+0x19e>
				&& Status_Load!=OVERVOLTAGE_CAP && Status_Load!=OVERVOLTAGE_LOAD){
 8004322:	4b4d      	ldr	r3, [pc, #308]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b05      	cmp	r3, #5
 8004328:	d00d      	beq.n	8004346 <HAL_TIM_PeriodElapsedCallback+0x19e>
 800432a:	4b4b      	ldr	r3, [pc, #300]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d009      	beq.n	8004346 <HAL_TIM_PeriodElapsedCallback+0x19e>
			FSM_Run_State = Run_PFC_Mode;
 8004332:	4b58      	ldr	r3, [pc, #352]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004334:	2202      	movs	r2, #2
 8004336:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_SET);
 8004338:	2201      	movs	r2, #1
 800433a:	2140      	movs	r1, #64	; 0x40
 800433c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004340:	f003 f984 	bl	800764c <HAL_GPIO_WritePin>
 8004344:	e008      	b.n	8004358 <HAL_TIM_PeriodElapsedCallback+0x1b0>

		}
		else {
			FSM_Run_State = Run_Idle;
 8004346:	4b53      	ldr	r3, [pc, #332]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_RESET);
 800434c:	2200      	movs	r2, #0
 800434e:	2140      	movs	r1, #64	; 0x40
 8004350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004354:	f003 f97a 	bl	800764c <HAL_GPIO_WritePin>
		}
//
		//FSM_Run_State = Run_Idle;

		if (PC_State==FSM_Run)                                      ///__________FSM_Run________
 8004358:	4b47      	ldr	r3, [pc, #284]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b03      	cmp	r3, #3
 800435e:	d158      	bne.n	8004412 <HAL_TIM_PeriodElapsedCallback+0x26a>
		{
		  switch(FSM_Run_State){
 8004360:	4b4c      	ldr	r3, [pc, #304]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d03c      	beq.n	80043e2 <HAL_TIM_PeriodElapsedCallback+0x23a>
 8004368:	2b02      	cmp	r3, #2
 800436a:	d002      	beq.n	8004372 <HAL_TIM_PeriodElapsedCallback+0x1ca>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d048      	beq.n	8004402 <HAL_TIM_PeriodElapsedCallback+0x25a>
 8004370:	e0bd      	b.n	80044ee <HAL_TIM_PeriodElapsedCallback+0x346>
		  case Run_PFC_Mode:
			DPC_LPCNTRL_PFC_Mode(&pPFC_CTRL,&pPI_VDC_CTRL,&VOLTAGECTRL,&CDC,&V_DQO_CTRL,&Current_qdo,&Voltage_qdo,&VOLTAGE_ADC_DC_IN_PHY); ///PFC CONTROL______
 8004372:	4b42      	ldr	r3, [pc, #264]	; (800447c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004374:	9303      	str	r3, [sp, #12]
 8004376:	4b48      	ldr	r3, [pc, #288]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004378:	9302      	str	r3, [sp, #8]
 800437a:	4b3e      	ldr	r3, [pc, #248]	; (8004474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	4b47      	ldr	r3, [pc, #284]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	4b47      	ldr	r3, [pc, #284]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004384:	4a47      	ldr	r2, [pc, #284]	; (80044a4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004386:	4948      	ldr	r1, [pc, #288]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004388:	4848      	ldr	r0, [pc, #288]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x304>)
 800438a:	f7fc fd70 	bl	8000e6e <DPC_LPCNTRL_PFC_Mode>
			Run_Inv_ClarkePark(&V_DQO_CTRL,PLL_CONVERTER.pll_theta_out_2pi,PLL_CONVERTER.pll_phi_2pi,&V_ABC_CTRL);                                  /// DQO to ABC Voltag to provide to modulator
 800438e:	4b33      	ldr	r3, [pc, #204]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004390:	edd3 7a02 	vldr	s15, [r3, #8]
 8004394:	4b31      	ldr	r3, [pc, #196]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004396:	ed93 7a03 	vldr	s14, [r3, #12]
 800439a:	4945      	ldr	r1, [pc, #276]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800439c:	eef0 0a47 	vmov.f32	s1, s14
 80043a0:	eeb0 0a67 	vmov.f32	s0, s15
 80043a4:	483d      	ldr	r0, [pc, #244]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80043a6:	f7fe fad7 	bl	8002958 <Run_Inv_ClarkePark>
			DPC_PWM_OutEnable(&tDPC_PWM);                                                                                                           ///PWM output will be enabled in PFC_Mode
 80043aa:	4842      	ldr	r0, [pc, #264]	; (80044b4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80043ac:	f7fd ff12 	bl	80021d4 <DPC_PWM_OutEnable>
			HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 80043b0:	2201      	movs	r2, #1
 80043b2:	2120      	movs	r1, #32
 80043b4:	4840      	ldr	r0, [pc, #256]	; (80044b8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80043b6:	f003 f949 	bl	800764c <HAL_GPIO_WritePin>
			DPC_PWM_Send_Duty_SPWM(&tDPC_PWM,V_ABC_CTRL.axA,V_ABC_CTRL.axB,V_ABC_CTRL.axC,&DMA_HRTIM_SRC);                                                         ///MODULATOR
 80043ba:	4b3d      	ldr	r3, [pc, #244]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80043bc:	edd3 7a00 	vldr	s15, [r3]
 80043c0:	4b3b      	ldr	r3, [pc, #236]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80043c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80043c6:	4b3a      	ldr	r3, [pc, #232]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80043c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80043cc:	493b      	ldr	r1, [pc, #236]	; (80044bc <HAL_TIM_PeriodElapsedCallback+0x314>)
 80043ce:	eeb0 1a66 	vmov.f32	s2, s13
 80043d2:	eef0 0a47 	vmov.f32	s1, s14
 80043d6:	eeb0 0a67 	vmov.f32	s0, s15
 80043da:	4836      	ldr	r0, [pc, #216]	; (80044b4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80043dc:	f7fd fcf8 	bl	8001dd0 <DPC_PWM_Send_Duty_SPWM>
			  break;
 80043e0:	e085      	b.n	80044ee <HAL_TIM_PeriodElapsedCallback+0x346>
		  case Run_Burst_Mode:
			DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&BURST_CTRL,(uint32_t*)Read_Curr_DC(),&tDPC_PWM);
 80043e2:	f7fc fc15 	bl	8000c10 <Read_Volt_DC>
 80043e6:	4604      	mov	r4, r0
 80043e8:	f7fc fc08 	bl	8000bfc <Read_Curr_DC>
 80043ec:	4602      	mov	r2, r0
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80043f0:	4933      	ldr	r1, [pc, #204]	; (80044c0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80043f2:	4620      	mov	r0, r4
 80043f4:	f7fc fe4d 	bl	8001092 <DPC_LPCNTRL_Burst_Mode>
			DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 80043f8:	4929      	ldr	r1, [pc, #164]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80043fa:	482b      	ldr	r0, [pc, #172]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80043fc:	f7fc fd20 	bl	8000e40 <DPC_LPCNTRL_PFC_Mode_Reset>
			break;
 8004400:	e075      	b.n	80044ee <HAL_TIM_PeriodElapsedCallback+0x346>
		  case Run_Idle:
			//Idle_Mode();
			DPC_PWM_OutDisable();
 8004402:	f7fd fee1 	bl	80021c8 <DPC_PWM_OutDisable>
			DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 8004406:	4926      	ldr	r1, [pc, #152]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004408:	4827      	ldr	r0, [pc, #156]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800440a:	f7fc fd19 	bl	8000e40 <DPC_LPCNTRL_PFC_Mode_Reset>
			break;
 800440e:	bf00      	nop
 8004410:	e06d      	b.n	80044ee <HAL_TIM_PeriodElapsedCallback+0x346>
		  }
		}
		else if (PC_State==FSM_StartUp_burst)                        ///__________FSM_StartUp_burst__________
 8004412:	4b19      	ldr	r3, [pc, #100]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d156      	bne.n	80044c8 <HAL_TIM_PeriodElapsedCallback+0x320>
		{
		  DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&STARTBURST_CTRL,(uint32_t*)Read_Curr_DC(),&tDPC_PWM);
 800441a:	f7fc fbf9 	bl	8000c10 <Read_Volt_DC>
 800441e:	4604      	mov	r4, r0
 8004420:	f7fc fbec 	bl	8000bfc <Read_Curr_DC>
 8004424:	4602      	mov	r2, r0
 8004426:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004428:	4926      	ldr	r1, [pc, #152]	; (80044c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800442a:	4620      	mov	r0, r4
 800442c:	f7fc fe31 	bl	8001092 <DPC_LPCNTRL_Burst_Mode>
		  DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 8004430:	491b      	ldr	r1, [pc, #108]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004432:	481d      	ldr	r0, [pc, #116]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004434:	f7fc fd04 	bl	8000e40 <DPC_LPCNTRL_PFC_Mode_Reset>
 8004438:	e059      	b.n	80044ee <HAL_TIM_PeriodElapsedCallback+0x346>
 800443a:	bf00      	nop
 800443c:	2000b530 	.word	0x2000b530
 8004440:	200017f4 	.word	0x200017f4
 8004444:	2000b50c 	.word	0x2000b50c
 8004448:	20000514 	.word	0x20000514
 800444c:	20001864 	.word	0x20001864
 8004450:	2000b518 	.word	0x2000b518
 8004454:	2000b61c 	.word	0x2000b61c
 8004458:	2000b7b4 	.word	0x2000b7b4
 800445c:	2000b668 	.word	0x2000b668
 8004460:	200006ac 	.word	0x200006ac
 8004464:	20000698 	.word	0x20000698
 8004468:	2000066e 	.word	0x2000066e
 800446c:	20000570 	.word	0x20000570
 8004470:	2000b610 	.word	0x2000b610
 8004474:	20000678 	.word	0x20000678
 8004478:	2000057c 	.word	0x2000057c
 800447c:	2000052c 	.word	0x2000052c
 8004480:	43b40000 	.word	0x43b40000
 8004484:	2000b5f4 	.word	0x2000b5f4
 8004488:	43b18000 	.word	0x43b18000
 800448c:	2000b5fc 	.word	0x2000b5fc
 8004490:	200006a8 	.word	0x200006a8
 8004494:	2000b5e0 	.word	0x2000b5e0
 8004498:	2000b4d8 	.word	0x2000b4d8
 800449c:	20000520 	.word	0x20000520
 80044a0:	20000594 	.word	0x20000594
 80044a4:	2000b62c 	.word	0x2000b62c
 80044a8:	2000b570 	.word	0x2000b570
 80044ac:	2000b7cc 	.word	0x2000b7cc
 80044b0:	20000580 	.word	0x20000580
 80044b4:	20001814 	.word	0x20001814
 80044b8:	48000800 	.word	0x48000800
 80044bc:	20000048 	.word	0x20000048
 80044c0:	2000b4e4 	.word	0x2000b4e4
 80044c4:	20000548 	.word	0x20000548
		}
		else if(PC_State==FSM_Fault)                                ///FSM_Fault
 80044c8:	4b63      	ldr	r3, [pc, #396]	; (8004658 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d10e      	bne.n	80044ee <HAL_TIM_PeriodElapsedCallback+0x346>
		{
		  if(Trigger_Timestamp==SET){
 80044d0:	4b62      	ldr	r3, [pc, #392]	; (800465c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d10a      	bne.n	80044ee <HAL_TIM_PeriodElapsedCallback+0x346>
		  Timestamp_PLL_CONVERTER=PLL_CONVERTER;
 80044d8:	4a61      	ldr	r2, [pc, #388]	; (8004660 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 80044da:	4b62      	ldr	r3, [pc, #392]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80044dc:	4610      	mov	r0, r2
 80044de:	4619      	mov	r1, r3
 80044e0:	239c      	movs	r3, #156	; 0x9c
 80044e2:	461a      	mov	r2, r3
 80044e4:	f007 fd5c 	bl	800bfa0 <memcpy>
		  Trigger_Timestamp=RESET;
 80044e8:	4b5c      	ldr	r3, [pc, #368]	; (800465c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
		  }
		}
		if (Status_Source==OK_SOURCE){
 80044ee:	4b5e      	ldr	r3, [pc, #376]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d102      	bne.n	80044fc <HAL_TIM_PeriodElapsedCallback+0x354>
			Flag2=1;
 80044f6:	4b5d      	ldr	r3, [pc, #372]	; (800466c <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
		}
		if (Service_step>=500){
 80044fc:	4b5c      	ldr	r3, [pc, #368]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004504:	d302      	bcc.n	800450c <HAL_TIM_PeriodElapsedCallback+0x364>
			Service_step=0;
 8004506:	4b5a      	ldr	r3, [pc, #360]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8004508:	2200      	movs	r2, #0
 800450a:	801a      	strh	r2, [r3, #0]
//			DMA_HRTIM_DST[2]=1;
//		}


//		Prev_Saturation = DMA_HRTIM_SRC[0];
		Flag = __HAL_HRTIM_GET_FLAG(&hhrtim1,HRTIM_FLAG_FLT1);
 800450c:	4b59      	ldr	r3, [pc, #356]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	4b54      	ldr	r3, [pc, #336]	; (8004678 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8004526:	601a      	str	r2, [r3, #0]
//		Service_data[1][Service_step] = DMA_HRTIM_SRC.phAB;
//		Service_data[2][Service_step] = V_DQO_CTRL.axd;
//		Service_data[3][Service_step] = DMA_HRTIM_SRC[0];

		//Service_data[4][Service_step]=__HAL_HRTIM_GETCOMPARE(&PWM_Tim1,HRTIM_TIMERINDEX_TIMER_A,HRTIM_COMPAREUNIT_1);
		Service_step++;
 8004528:	4b51      	ldr	r3, [pc, #324]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	4b4f      	ldr	r3, [pc, #316]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8004532:	801a      	strh	r2, [r3, #0]

	VOLTAGE_AC_qd_IN_NORM=*((VoltageAC_qd_PLL_Struct*)&Voltage_qdo);                                    ///Auxiliary Data for PLL
	PLL_Status=DPC_PLL_pllqd_Run(&PLL_CONVERTER,&VOLTAGE_AC_qd_IN_NORM,&theta_out_pll,&omega_out_pll);  ///PLL Phase Extimation
	DATA_Write_Theta_PLL(PLL_CONVERTER.pll_theta_out_2pi);                                              ///Pass Theta to DATA LAYER
	}
}
 8004534:	e08b      	b.n	800464e <HAL_TIM_PeriodElapsedCallback+0x4a6>
	else if(htim->Instance == TIM3){
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a50      	ldr	r2, [pc, #320]	; (800467c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d107      	bne.n	8004550 <HAL_TIM_PeriodElapsedCallback+0x3a8>
		TimeoutMng();
 8004540:	f7fe f804 	bl	800254c <TimeoutMng>
		Timeout[0]++;
 8004544:	4b4e      	ldr	r3, [pc, #312]	; (8004680 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	4a4d      	ldr	r2, [pc, #308]	; (8004680 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800454c:	6013      	str	r3, [r2, #0]
}
 800454e:	e07e      	b.n	800464e <HAL_TIM_PeriodElapsedCallback+0x4a6>
	else if(htim->Instance == TIM6){
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a4b      	ldr	r2, [pc, #300]	; (8004684 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d179      	bne.n	800464e <HAL_TIM_PeriodElapsedCallback+0x4a6>
	ADC_Voltage_AC_ProcessData((uint32_t*)Read_GRID(),&VOLTAGE_ADC_AC_IN_NORM);                         /// Read Voltage AC from DATA Layer and pass it at VOLTAGE_ADC_AC_IN_NORM
 800455a:	f7fc fb3b 	bl	8000bd4 <Read_GRID>
 800455e:	4603      	mov	r3, r0
 8004560:	4949      	ldr	r1, [pc, #292]	; (8004688 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe fa2a 	bl	80029bc <ADC_Voltage_AC_ProcessData>
	ADC_Voltage_DC_ProcessData((uint32_t*)Read_Volt_DC(),&VOLTAGE_ADC_DC_IN_NORM);                      /// Read Voltage DC from DATA Layer and pass it at VOLTAGE_ADC_DC_IN_NORM
 8004568:	f7fc fb52 	bl	8000c10 <Read_Volt_DC>
 800456c:	4603      	mov	r3, r0
 800456e:	4947      	ldr	r1, [pc, #284]	; (800468c <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe faaf 	bl	8002ad4 <ADC_Voltage_DC_ProcessData>
	ADC_Current_DC_ProcessData((uint32_t*)Read_Curr_DC(),&CURRENT_ADC_DC_IN_NORM);                      /// Read Current DC from DATA Layer and pass it at CURRENT_ADC_DC_IN_NORM
 8004576:	f7fc fb41 	bl	8000bfc <Read_Curr_DC>
 800457a:	4603      	mov	r3, r0
 800457c:	4944      	ldr	r1, [pc, #272]	; (8004690 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fb9c 	bl	8002cbc <ADC_Current_DC_ProcessData>
	ADC2Phy_DC_Voltage_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Volt_DC(),&VOLTAGE_ADC_DC_IN_PHY);     /// Read Voltage AC from DATA Layer and pass it at VOLTAGE_ADC_AC_IN_PHY
 8004584:	f7fc fb44 	bl	8000c10 <Read_Volt_DC>
 8004588:	4603      	mov	r3, r0
 800458a:	4a42      	ldr	r2, [pc, #264]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800458c:	4619      	mov	r1, r3
 800458e:	4842      	ldr	r0, [pc, #264]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004590:	f7fe fac8 	bl	8002b24 <ADC2Phy_DC_Voltage_ProcessData>
	ADC2Phy_Voltage_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_GRID(),&VOLTAGE_ADC_AC_IN_PHY);           /// Read Voltage DC from DATA Layer and pass it at VOLTAGE_ADC_DC_IN_PHY
 8004594:	f7fc fb1e 	bl	8000bd4 <Read_GRID>
 8004598:	4603      	mov	r3, r0
 800459a:	4a40      	ldr	r2, [pc, #256]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800459c:	4619      	mov	r1, r3
 800459e:	483e      	ldr	r0, [pc, #248]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80045a0:	f7fe fa4e 	bl	8002a40 <ADC2Phy_Voltage_ProcessData>
	ADC2Phy_DC_Current_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Curr_DC(),&CURRENT_ADC_DC_IN_PHY);     /// Read Current DC from DATA Layer and pass it at CURRENT_ADC_DC_IN_PHY
 80045a4:	f7fc fb2a 	bl	8000bfc <Read_Curr_DC>
 80045a8:	4603      	mov	r3, r0
 80045aa:	4a3d      	ldr	r2, [pc, #244]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80045ac:	4619      	mov	r1, r3
 80045ae:	483a      	ldr	r0, [pc, #232]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80045b0:	f7fe fba2 	bl	8002cf8 <ADC2Phy_DC_Current_ProcessData>
	Vabc_temp=*((TRANSFORM_ABC_t*)&VOLTAGE_ADC_AC_IN_NORM);                                             /// Sensing Voltage
 80045b4:	4a34      	ldr	r2, [pc, #208]	; (8004688 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 80045b6:	4b3b      	ldr	r3, [pc, #236]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80045b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80045ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Vabc_Phy=*((TRANSFORM_ABC_t*)&VOLTAGE_ADC_AC_IN_PHY);                                               /// Sensing Voltage in Physical dimension
 80045be:	4a37      	ldr	r2, [pc, #220]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80045c0:	4b39      	ldr	r3, [pc, #228]	; (80046a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80045c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80045c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Run_ClarkePark(&Vabc_temp, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Voltage_qdo);
 80045c8:	f7fc fa74 	bl	8000ab4 <DATA_Read_Theta_PLL>
 80045cc:	eeb0 7a40 	vmov.f32	s14, s0
 80045d0:	4b24      	ldr	r3, [pc, #144]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80045d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80045d6:	4935      	ldr	r1, [pc, #212]	; (80046ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 80045d8:	eef0 0a67 	vmov.f32	s1, s15
 80045dc:	eeb0 0a47 	vmov.f32	s0, s14
 80045e0:	4830      	ldr	r0, [pc, #192]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80045e2:	f7fe f949 	bl	8002878 <Run_ClarkePark>
	Run_ClarkePark(&Vabc_Phy, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Voltage_qdo_Phy);        ///
 80045e6:	f7fc fa65 	bl	8000ab4 <DATA_Read_Theta_PLL>
 80045ea:	eeb0 7a40 	vmov.f32	s14, s0
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80045f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80045f4:	492e      	ldr	r1, [pc, #184]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80045f6:	eef0 0a67 	vmov.f32	s1, s15
 80045fa:	eeb0 0a47 	vmov.f32	s0, s14
 80045fe:	482a      	ldr	r0, [pc, #168]	; (80046a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8004600:	f7fe f93a 	bl	8002878 <Run_ClarkePark>
	DATA_VOLT_Write_ClarkePark(Voltage_qdo);                                                            /// Voltage qdo in DATA layer
 8004604:	4b29      	ldr	r3, [pc, #164]	; (80046ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 8004606:	edd3 6a00 	vldr	s13, [r3]
 800460a:	ed93 7a01 	vldr	s14, [r3, #4]
 800460e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004612:	eeb0 0a66 	vmov.f32	s0, s13
 8004616:	eef0 0a47 	vmov.f32	s1, s14
 800461a:	eeb0 1a67 	vmov.f32	s2, s15
 800461e:	f7fc fa77 	bl	8000b10 <DATA_VOLT_Write_ClarkePark>
	VOLTAGE_AC_qd_IN_NORM=*((VoltageAC_qd_PLL_Struct*)&Voltage_qdo);                                    ///Auxiliary Data for PLL
 8004622:	4a22      	ldr	r2, [pc, #136]	; (80046ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 8004624:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8004626:	ca07      	ldmia	r2, {r0, r1, r2}
 8004628:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PLL_Status=DPC_PLL_pllqd_Run(&PLL_CONVERTER,&VOLTAGE_AC_qd_IN_NORM,&theta_out_pll,&omega_out_pll);  ///PLL Phase Extimation
 800462c:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800462e:	4a23      	ldr	r2, [pc, #140]	; (80046bc <HAL_TIM_PeriodElapsedCallback+0x514>)
 8004630:	4920      	ldr	r1, [pc, #128]	; (80046b4 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8004632:	480c      	ldr	r0, [pc, #48]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8004634:	f7fd faa2 	bl	8001b7c <DPC_PLL_pllqd_Run>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
 800463c:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800463e:	701a      	strb	r2, [r3, #0]
	DATA_Write_Theta_PLL(PLL_CONVERTER.pll_theta_out_2pi);                                              ///Pass Theta to DATA LAYER
 8004640:	4b08      	ldr	r3, [pc, #32]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8004642:	edd3 7a02 	vldr	s15, [r3, #8]
 8004646:	eeb0 0a67 	vmov.f32	s0, s15
 800464a:	f7fc fa23 	bl	8000a94 <DATA_Write_Theta_PLL>
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004656:	bf00      	nop
 8004658:	2000057c 	.word	0x2000057c
 800465c:	20000000 	.word	0x20000000
 8004660:	2000b718 	.word	0x2000b718
 8004664:	2000b668 	.word	0x2000b668
 8004668:	2000066e 	.word	0x2000066e
 800466c:	2000b660 	.word	0x2000b660
 8004670:	2000066c 	.word	0x2000066c
 8004674:	20000358 	.word	0x20000358
 8004678:	2000b7c8 	.word	0x2000b7c8
 800467c:	40000400 	.word	0x40000400
 8004680:	2000b5fc 	.word	0x2000b5fc
 8004684:	40001000 	.word	0x40001000
 8004688:	2000b53c 	.word	0x2000b53c
 800468c:	2000b7b8 	.word	0x2000b7b8
 8004690:	20000674 	.word	0x20000674
 8004694:	2000052c 	.word	0x2000052c
 8004698:	20001864 	.word	0x20001864
 800469c:	2000b5c4 	.word	0x2000b5c4
 80046a0:	20001850 	.word	0x20001850
 80046a4:	2000b638 	.word	0x2000b638
 80046a8:	2000b55c 	.word	0x2000b55c
 80046ac:	2000b4d8 	.word	0x2000b4d8
 80046b0:	20001858 	.word	0x20001858
 80046b4:	20001844 	.word	0x20001844
 80046b8:	2000058c 	.word	0x2000058c
 80046bc:	2000b52c 	.word	0x2000b52c
 80046c0:	200006a8 	.word	0x200006a8

080046c4 <HAL_HRTIM_Fault1Callback>:

void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	Status_Source=OVERCURRENT_SOURCE;
 80046cc:	4b07      	ldr	r3, [pc, #28]	; (80046ec <HAL_HRTIM_Fault1Callback+0x28>)
 80046ce:	2206      	movs	r2, #6
 80046d0:	701a      	strb	r2, [r3, #0]
	AC_SOURCE.Status_Source=OVERCURRENT_SOURCE;
 80046d2:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <HAL_HRTIM_Fault1Callback+0x2c>)
 80046d4:	2206      	movs	r2, #6
 80046d6:	721a      	strb	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin, GPIO_PIN_SET);
 80046d8:	2201      	movs	r2, #1
 80046da:	2110      	movs	r1, #16
 80046dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046e0:	f002 ffb4 	bl	800764c <HAL_GPIO_WritePin>

}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	2000066e 	.word	0x2000066e
 80046f0:	20000698 	.word	0x20000698

080046f4 <HAL_HRTIM_Fault3Callback>:
void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	Status_Source=OVERCURRENT_SOURCE;
 80046fc:	4b07      	ldr	r3, [pc, #28]	; (800471c <HAL_HRTIM_Fault3Callback+0x28>)
 80046fe:	2206      	movs	r2, #6
 8004700:	701a      	strb	r2, [r3, #0]
	AC_SOURCE.Status_Source=OVERCURRENT_SOURCE;
 8004702:	4b07      	ldr	r3, [pc, #28]	; (8004720 <HAL_HRTIM_Fault3Callback+0x2c>)
 8004704:	2206      	movs	r2, #6
 8004706:	721a      	strb	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin, GPIO_PIN_SET);
 8004708:	2201      	movs	r2, #1
 800470a:	2110      	movs	r1, #16
 800470c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004710:	f002 ff9c 	bl	800764c <HAL_GPIO_WritePin>
}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	2000066e 	.word	0x2000066e
 8004720:	20000698 	.word	0x20000698

08004724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004728:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800472a:	e7fe      	b.n	800472a <Error_Handler+0x6>

0800472c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <MX_RNG_Init+0x24>)
 8004732:	4a08      	ldr	r2, [pc, #32]	; (8004754 <MX_RNG_Init+0x28>)
 8004734:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <MX_RNG_Init+0x24>)
 8004738:	2200      	movs	r2, #0
 800473a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800473c:	4804      	ldr	r0, [pc, #16]	; (8004750 <MX_RNG_Init+0x24>)
 800473e:	f006 fd17 	bl	800b170 <HAL_RNG_Init>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8004748:	f7ff ffec 	bl	8004724 <Error_Handler>
  }

}
 800474c:	bf00      	nop
 800474e:	bd80      	pop	{r7, pc}
 8004750:	2000b8c4 	.word	0x2000b8c4
 8004754:	50060800 	.word	0x50060800

08004758 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <HAL_RNG_MspInit+0x38>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d10b      	bne.n	8004782 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <HAL_RNG_MspInit+0x3c>)
 800476c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <HAL_RNG_MspInit+0x3c>)
 8004770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004776:	4b07      	ldr	r3, [pc, #28]	; (8004794 <HAL_RNG_MspInit+0x3c>)
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	50060800 	.word	0x50060800
 8004794:	40021000 	.word	0x40021000

08004798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <HAL_MspInit+0x44>)
 80047a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a2:	4a0e      	ldr	r2, [pc, #56]	; (80047dc <HAL_MspInit+0x44>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6613      	str	r3, [r2, #96]	; 0x60
 80047aa:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <HAL_MspInit+0x44>)
 80047ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <HAL_MspInit+0x44>)
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	4a08      	ldr	r2, [pc, #32]	; (80047dc <HAL_MspInit+0x44>)
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c0:	6593      	str	r3, [r2, #88]	; 0x58
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_MspInit+0x44>)
 80047c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80047ce:	f005 fd55 	bl	800a27c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000

080047e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047e4:	e7fe      	b.n	80047e4 <NMI_Handler+0x4>

080047e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047e6:	b480      	push	{r7}
 80047e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047ea:	e7fe      	b.n	80047ea <HardFault_Handler+0x4>

080047ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047f0:	e7fe      	b.n	80047f0 <MemManage_Handler+0x4>

080047f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047f2:	b480      	push	{r7}
 80047f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047f6:	e7fe      	b.n	80047f6 <BusFault_Handler+0x4>

080047f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047fc:	e7fe      	b.n	80047fc <UsageFault_Handler+0x4>

080047fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004802:	bf00      	nop
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004810:	bf00      	nop
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800481a:	b480      	push	{r7}
 800481c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800481e:	bf00      	nop
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800482c:	f000 fa8a 	bl	8004d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}

08004834 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_a);
 8004838:	4802      	ldr	r0, [pc, #8]	; (8004844 <DMA1_Channel1_IRQHandler+0x10>)
 800483a:	f002 fafa 	bl	8006e32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	200002f8 	.word	0x200002f8

08004848 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_b);
 800484c:	4802      	ldr	r0, [pc, #8]	; (8004858 <DMA1_Channel2_IRQHandler+0x10>)
 800484e:	f002 faf0 	bl	8006e32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004852:	bf00      	nop
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000454 	.word	0x20000454

0800485c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_c);
 8004860:	4802      	ldr	r0, [pc, #8]	; (800486c <DMA1_Channel3_IRQHandler+0x10>)
 8004862:	f002 fae6 	bl	8006e32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004866:	bf00      	nop
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	200004b4 	.word	0x200004b4

08004870 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004874:	4802      	ldr	r0, [pc, #8]	; (8004880 <DMA1_Channel4_IRQHandler+0x10>)
 8004876:	f002 fadc 	bl	8006e32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000238 	.word	0x20000238

08004884 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004888:	4802      	ldr	r0, [pc, #8]	; (8004894 <TIM2_IRQHandler+0x10>)
 800488a:	f006 fe87 	bl	800b59c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800488e:	bf00      	nop
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	2000b9bc 	.word	0x2000b9bc

08004898 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800489c:	4802      	ldr	r0, [pc, #8]	; (80048a8 <TIM3_IRQHandler+0x10>)
 800489e:	f006 fe7d 	bl	800b59c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	2000b924 	.word	0x2000b924

080048ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048b0:	4802      	ldr	r0, [pc, #8]	; (80048bc <TIM6_DAC_IRQHandler+0x10>)
 80048b2:	f006 fe73 	bl	800b59c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	2000b970 	.word	0x2000b970

080048c0 <HRTIM1_FLT_IRQHandler>:

/**
  * @brief This function handles HRTIM fault global interrupt.
  */
void HRTIM1_FLT_IRQHandler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_FLT_IRQn 0 */

  /* USER CODE END HRTIM1_FLT_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_COMMON);
 80048c4:	21ff      	movs	r1, #255	; 0xff
 80048c6:	4802      	ldr	r0, [pc, #8]	; (80048d0 <HRTIM1_FLT_IRQHandler+0x10>)
 80048c8:	f004 f8b8 	bl	8008a3c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_FLT_IRQn 1 */

  /* USER CODE END HRTIM1_FLT_IRQn 1 */
}
 80048cc:	bf00      	nop
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000358 	.word	0x20000358

080048d4 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_hrtim1_a);
 80048d8:	4805      	ldr	r0, [pc, #20]	; (80048f0 <DMAMUX_OVR_IRQHandler+0x1c>)
 80048da:	f002 fc37 	bl	800714c <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_hrtim1_b);
 80048de:	4805      	ldr	r0, [pc, #20]	; (80048f4 <DMAMUX_OVR_IRQHandler+0x20>)
 80048e0:	f002 fc34 	bl	800714c <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel3
  HAL_DMAEx_MUX_IRQHandler(&hdma_hrtim1_c);
 80048e4:	4804      	ldr	r0, [pc, #16]	; (80048f8 <DMAMUX_OVR_IRQHandler+0x24>)
 80048e6:	f002 fc31 	bl	800714c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	200002f8 	.word	0x200002f8
 80048f4:	20000454 	.word	0x20000454
 80048f8:	200004b4 	.word	0x200004b4

080048fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004900:	4b08      	ldr	r3, [pc, #32]	; (8004924 <SystemInit+0x28>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	4a07      	ldr	r2, [pc, #28]	; (8004924 <SystemInit+0x28>)
 8004908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800490c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <SystemInit+0x28>)
 8004912:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004916:	609a      	str	r2, [r3, #8]
#endif
}
 8004918:	bf00      	nop
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	e000ed00 	.word	0xe000ed00

08004928 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800492e:	f107 0310 	add.w	r3, r7, #16
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	609a      	str	r2, [r3, #8]
 800493a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800493c:	1d3b      	adds	r3, r7, #4
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	605a      	str	r2, [r3, #4]
 8004944:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8004946:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <MX_TIM2_Init+0x94>)
 8004948:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800494c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800494e:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <MX_TIM2_Init+0x94>)
 8004950:	2200      	movs	r2, #0
 8004952:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004954:	4b19      	ldr	r3, [pc, #100]	; (80049bc <MX_TIM2_Init+0x94>)
 8004956:	2200      	movs	r2, #0
 8004958:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800495a:	4b18      	ldr	r3, [pc, #96]	; (80049bc <MX_TIM2_Init+0x94>)
 800495c:	2200      	movs	r2, #0
 800495e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004960:	4b16      	ldr	r3, [pc, #88]	; (80049bc <MX_TIM2_Init+0x94>)
 8004962:	2200      	movs	r2, #0
 8004964:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004966:	4b15      	ldr	r3, [pc, #84]	; (80049bc <MX_TIM2_Init+0x94>)
 8004968:	2280      	movs	r2, #128	; 0x80
 800496a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800496c:	4813      	ldr	r0, [pc, #76]	; (80049bc <MX_TIM2_Init+0x94>)
 800496e:	f006 fc34 	bl	800b1da <HAL_TIM_Base_Init>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004978:	f7ff fed4 	bl	8004724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800497c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004980:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004982:	f107 0310 	add.w	r3, r7, #16
 8004986:	4619      	mov	r1, r3
 8004988:	480c      	ldr	r0, [pc, #48]	; (80049bc <MX_TIM2_Init+0x94>)
 800498a:	f006 ff87 	bl	800b89c <HAL_TIM_ConfigClockSource>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004994:	f7ff fec6 	bl	8004724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8004998:	2330      	movs	r3, #48	; 0x30
 800499a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80049a0:	1d3b      	adds	r3, r7, #4
 80049a2:	4619      	mov	r1, r3
 80049a4:	4805      	ldr	r0, [pc, #20]	; (80049bc <MX_TIM2_Init+0x94>)
 80049a6:	f007 f9fb 	bl	800bda0 <HAL_TIMEx_MasterConfigSynchronization>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80049b0:	f7ff feb8 	bl	8004724 <Error_Handler>
  }

}
 80049b4:	bf00      	nop
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	2000b9bc 	.word	0x2000b9bc

080049c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049c6:	f107 0310 	add.w	r3, r7, #16
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	609a      	str	r2, [r3, #8]
 80049d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049d4:	1d3b      	adds	r3, r7, #4
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	605a      	str	r2, [r3, #4]
 80049dc:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80049de:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <MX_TIM3_Init+0x94>)
 80049e0:	4a1d      	ldr	r2, [pc, #116]	; (8004a58 <MX_TIM3_Init+0x98>)
 80049e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80049e4:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <MX_TIM3_Init+0x94>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <MX_TIM3_Init+0x94>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80049f0:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <MX_TIM3_Init+0x94>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049f6:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <MX_TIM3_Init+0x94>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <MX_TIM3_Init+0x94>)
 80049fe:	2280      	movs	r2, #128	; 0x80
 8004a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004a02:	4814      	ldr	r0, [pc, #80]	; (8004a54 <MX_TIM3_Init+0x94>)
 8004a04:	f006 fbe9 	bl	800b1da <HAL_TIM_Base_Init>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004a0e:	f7ff fe89 	bl	8004724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004a18:	f107 0310 	add.w	r3, r7, #16
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	480d      	ldr	r0, [pc, #52]	; (8004a54 <MX_TIM3_Init+0x94>)
 8004a20:	f006 ff3c 	bl	800b89c <HAL_TIM_ConfigClockSource>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004a2a:	f7ff fe7b 	bl	8004724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a36:	1d3b      	adds	r3, r7, #4
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4806      	ldr	r0, [pc, #24]	; (8004a54 <MX_TIM3_Init+0x94>)
 8004a3c:	f007 f9b0 	bl	800bda0 <HAL_TIMEx_MasterConfigSynchronization>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004a46:	f7ff fe6d 	bl	8004724 <Error_Handler>
  }

}
 8004a4a:	bf00      	nop
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000b924 	.word	0x2000b924
 8004a58:	40000400 	.word	0x40000400

08004a5c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a62:	1d3b      	adds	r3, r7, #4
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8004a6c:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <MX_TIM6_Init+0x64>)
 8004a6e:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <MX_TIM6_Init+0x68>)
 8004a70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8004a72:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <MX_TIM6_Init+0x64>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a78:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <MX_TIM6_Init+0x64>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 32000;
 8004a7e:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <MX_TIM6_Init+0x64>)
 8004a80:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8004a84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <MX_TIM6_Init+0x64>)
 8004a88:	2280      	movs	r2, #128	; 0x80
 8004a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004a8c:	480c      	ldr	r0, [pc, #48]	; (8004ac0 <MX_TIM6_Init+0x64>)
 8004a8e:	f006 fba4 	bl	800b1da <HAL_TIM_Base_Init>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004a98:	f7ff fe44 	bl	8004724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004aa4:	1d3b      	adds	r3, r7, #4
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4805      	ldr	r0, [pc, #20]	; (8004ac0 <MX_TIM6_Init+0x64>)
 8004aaa:	f007 f979 	bl	800bda0 <HAL_TIMEx_MasterConfigSynchronization>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004ab4:	f7ff fe36 	bl	8004724 <Error_Handler>
  }

}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	2000b970 	.word	0x2000b970
 8004ac4:	40001000 	.word	0x40001000

08004ac8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ace:	f107 0310 	add.w	r3, r7, #16
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	605a      	str	r2, [r3, #4]
 8004ad8:	609a      	str	r2, [r3, #8]
 8004ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	605a      	str	r2, [r3, #4]
 8004ae4:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8004ae6:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <MX_TIM15_Init+0x9c>)
 8004ae8:	4a1f      	ldr	r2, [pc, #124]	; (8004b68 <MX_TIM15_Init+0xa0>)
 8004aea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8004aec:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <MX_TIM15_Init+0x9c>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004af2:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <MX_TIM15_Init+0x9c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8004af8:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <MX_TIM15_Init+0x9c>)
 8004afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004afe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b00:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <MX_TIM15_Init+0x9c>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004b06:	4b17      	ldr	r3, [pc, #92]	; (8004b64 <MX_TIM15_Init+0x9c>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b0c:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <MX_TIM15_Init+0x9c>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004b12:	4814      	ldr	r0, [pc, #80]	; (8004b64 <MX_TIM15_Init+0x9c>)
 8004b14:	f006 fb61 	bl	800b1da <HAL_TIM_Base_Init>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8004b1e:	f7ff fe01 	bl	8004724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004b28:	f107 0310 	add.w	r3, r7, #16
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	480d      	ldr	r0, [pc, #52]	; (8004b64 <MX_TIM15_Init+0x9c>)
 8004b30:	f006 feb4 	bl	800b89c <HAL_TIM_ConfigClockSource>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8004b3a:	f7ff fdf3 	bl	8004724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004b46:	1d3b      	adds	r3, r7, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4806      	ldr	r0, [pc, #24]	; (8004b64 <MX_TIM15_Init+0x9c>)
 8004b4c:	f007 f928 	bl	800bda0 <HAL_TIMEx_MasterConfigSynchronization>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8004b56:	f7ff fde5 	bl	8004724 <Error_Handler>
  }

}
 8004b5a:	bf00      	nop
 8004b5c:	3720      	adds	r7, #32
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	2000b8d8 	.word	0x2000b8d8
 8004b68:	40014000 	.word	0x40014000

08004b6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7c:	d114      	bne.n	8004ba8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b7e:	4b2f      	ldr	r3, [pc, #188]	; (8004c3c <HAL_TIM_Base_MspInit+0xd0>)
 8004b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b82:	4a2e      	ldr	r2, [pc, #184]	; (8004c3c <HAL_TIM_Base_MspInit+0xd0>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	6593      	str	r3, [r2, #88]	; 0x58
 8004b8a:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <HAL_TIM_Base_MspInit+0xd0>)
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 8004b96:	2202      	movs	r2, #2
 8004b98:	2100      	movs	r1, #0
 8004b9a:	201c      	movs	r0, #28
 8004b9c:	f001 fff1 	bl	8006b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ba0:	201c      	movs	r0, #28
 8004ba2:	f002 f808 	bl	8006bb6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004ba6:	e044      	b.n	8004c32 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a24      	ldr	r2, [pc, #144]	; (8004c40 <HAL_TIM_Base_MspInit+0xd4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d114      	bne.n	8004bdc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bb2:	4b22      	ldr	r3, [pc, #136]	; (8004c3c <HAL_TIM_Base_MspInit+0xd0>)
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	4a21      	ldr	r2, [pc, #132]	; (8004c3c <HAL_TIM_Base_MspInit+0xd0>)
 8004bb8:	f043 0302 	orr.w	r3, r3, #2
 8004bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <HAL_TIM_Base_MspInit+0xd0>)
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 4);
 8004bca:	2204      	movs	r2, #4
 8004bcc:	2100      	movs	r1, #0
 8004bce:	201d      	movs	r0, #29
 8004bd0:	f001 ffd7 	bl	8006b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004bd4:	201d      	movs	r0, #29
 8004bd6:	f001 ffee 	bl	8006bb6 <HAL_NVIC_EnableIRQ>
}
 8004bda:	e02a      	b.n	8004c32 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <HAL_TIM_Base_MspInit+0xd8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d114      	bne.n	8004c10 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <HAL_TIM_Base_MspInit+0xd0>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <HAL_TIM_Base_MspInit+0xd0>)
 8004bec:	f043 0310 	orr.w	r3, r3, #16
 8004bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <HAL_TIM_Base_MspInit+0xd0>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 3);
 8004bfe:	2203      	movs	r2, #3
 8004c00:	2100      	movs	r1, #0
 8004c02:	2036      	movs	r0, #54	; 0x36
 8004c04:	f001 ffbd 	bl	8006b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c08:	2036      	movs	r0, #54	; 0x36
 8004c0a:	f001 ffd4 	bl	8006bb6 <HAL_NVIC_EnableIRQ>
}
 8004c0e:	e010      	b.n	8004c32 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM15)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a0c      	ldr	r2, [pc, #48]	; (8004c48 <HAL_TIM_Base_MspInit+0xdc>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d10b      	bne.n	8004c32 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004c1a:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <HAL_TIM_Base_MspInit+0xd0>)
 8004c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1e:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <HAL_TIM_Base_MspInit+0xd0>)
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c24:	6613      	str	r3, [r2, #96]	; 0x60
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_TIM_Base_MspInit+0xd0>)
 8004c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2e:	60bb      	str	r3, [r7, #8]
 8004c30:	68bb      	ldr	r3, [r7, #8]
}
 8004c32:	bf00      	nop
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40000400 	.word	0x40000400
 8004c44:	40001000 	.word	0x40001000
 8004c48:	40014000 	.word	0x40014000

08004c4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c4c:	480d      	ldr	r0, [pc, #52]	; (8004c84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004c4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c50:	480d      	ldr	r0, [pc, #52]	; (8004c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8004c52:	490e      	ldr	r1, [pc, #56]	; (8004c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c54:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <LoopForever+0xe>)
  movs r3, #0
 8004c56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004c58:	e002      	b.n	8004c60 <LoopCopyDataInit>

08004c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c5e:	3304      	adds	r3, #4

08004c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c64:	d3f9      	bcc.n	8004c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c66:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c68:	4c0b      	ldr	r4, [pc, #44]	; (8004c98 <LoopForever+0x16>)
  movs r3, #0
 8004c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c6c:	e001      	b.n	8004c72 <LoopFillZerobss>

08004c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c70:	3204      	adds	r2, #4

08004c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c74:	d3fb      	bcc.n	8004c6e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004c76:	f7ff fe41 	bl	80048fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c7a:	f007 f96d 	bl	800bf58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c7e:	f7ff f8c3 	bl	8003e08 <main>

08004c82 <LoopForever>:

LoopForever:
    b LoopForever
 8004c82:	e7fe      	b.n	8004c82 <LoopForever>
  ldr   r0, =_estack
 8004c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c8c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8004c90:	0800c800 	.word	0x0800c800
  ldr r2, =_sbss
 8004c94:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8004c98:	2000ba0c 	.word	0x2000ba0c

08004c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c9c:	e7fe      	b.n	8004c9c <ADC1_2_IRQHandler>

08004c9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b082      	sub	sp, #8
 8004ca2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ca8:	2003      	movs	r0, #3
 8004caa:	f001 ff5f 	bl	8006b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f000 f80e 	bl	8004cd0 <HAL_InitTick>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	71fb      	strb	r3, [r7, #7]
 8004cbe:	e001      	b.n	8004cc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004cc0:	f7ff fd6a 	bl	8004798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004cc4:	79fb      	ldrb	r3, [r7, #7]

}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004cdc:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <HAL_InitTick+0x68>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d022      	beq.n	8004d2a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004ce4:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <HAL_InitTick+0x6c>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <HAL_InitTick+0x68>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004cf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 ff6a 	bl	8006bd2 <HAL_SYSTICK_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10f      	bne.n	8004d24 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b0f      	cmp	r3, #15
 8004d08:	d809      	bhi.n	8004d1e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d12:	f001 ff36 	bl	8006b82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d16:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <HAL_InitTick+0x70>)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	e007      	b.n	8004d2e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
 8004d22:	e004      	b.n	8004d2e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
 8004d28:	e001      	b.n	8004d2e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	2000000c 	.word	0x2000000c
 8004d3c:	20000004 	.word	0x20000004
 8004d40:	20000008 	.word	0x20000008

08004d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_IncTick+0x1c>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_IncTick+0x20>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4413      	add	r3, r2
 8004d52:	4a03      	ldr	r2, [pc, #12]	; (8004d60 <HAL_IncTick+0x1c>)
 8004d54:	6013      	str	r3, [r2, #0]
}
 8004d56:	bf00      	nop
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	2000ba08 	.word	0x2000ba08
 8004d64:	2000000c 	.word	0x2000000c

08004d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d6c:	4b03      	ldr	r3, [pc, #12]	; (8004d7c <HAL_GetTick+0x14>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	2000ba08 	.word	0x2000ba08

08004d80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	609a      	str	r2, [r3, #8]
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3360      	adds	r3, #96	; 0x60
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <LL_ADC_SetOffset+0x44>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004e20:	bf00      	nop
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	03fff000 	.word	0x03fff000

08004e30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3360      	adds	r3, #96	; 0x60
 8004e3e:	461a      	mov	r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3360      	adds	r3, #96	; 0x60
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b087      	sub	sp, #28
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3360      	adds	r3, #96	; 0x60
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3360      	adds	r3, #96	; 0x60
 8004ed8:	461a      	mov	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	615a      	str	r2, [r3, #20]
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b087      	sub	sp, #28
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3330      	adds	r3, #48	; 0x30
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	4413      	add	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	211f      	movs	r1, #31
 8004f76:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	0e9b      	lsrs	r3, r3, #26
 8004f82:	f003 011f 	and.w	r1, r3, #31
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	431a      	orrs	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b087      	sub	sp, #28
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3314      	adds	r3, #20
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	0e5b      	lsrs	r3, r3, #25
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	4413      	add	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	0d1b      	lsrs	r3, r3, #20
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	2107      	movs	r1, #7
 8004fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	0d1b      	lsrs	r3, r3, #20
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004fec:	bf00      	nop
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005010:	43db      	mvns	r3, r3
 8005012:	401a      	ands	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f003 0318 	and.w	r3, r3, #24
 800501a:	4908      	ldr	r1, [pc, #32]	; (800503c <LL_ADC_SetChannelSingleDiff+0x44>)
 800501c:	40d9      	lsrs	r1, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	400b      	ands	r3, r1
 8005022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005026:	431a      	orrs	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	0007ffff 	.word	0x0007ffff

08005040 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
  *          -  On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	330c      	adds	r3, #12
 8005050:	4618      	mov	r0, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	0d1b      	lsrs	r3, r3, #20
 8005056:	f003 0103 	and.w	r1, r3, #3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f003 0201 	and.w	r2, r3, #1
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4403      	add	r3, r0
 800506e:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 800507a:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 800507e:	43db      	mvns	r3, r3
 8005080:	401a      	ands	r2, r3
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	400b      	ands	r3, r1
 8005088:	431a      	orrs	r2, r3
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 800509a:	b480      	push	{r7}
 800509c:	b087      	sub	sp, #28
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3320      	adds	r3, #32
 80050ac:	461a      	mov	r2, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	0d1b      	lsrs	r3, r3, #20
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	4413      	add	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	0419      	lsls	r1, r3, #16
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	430b      	orrs	r3, r1
 80050cc:	431a      	orrs	r2, r3
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 031f 	and.w	r3, r3, #31
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800510a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6093      	str	r3, [r2, #8]
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800512e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005132:	d101      	bne.n	8005138 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005156:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800515a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005182:	d101      	bne.n	8005188 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80051aa:	f043 0201 	orr.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <LL_ADC_IsEnabled+0x18>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <LL_ADC_IsEnabled+0x1a>
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80051f8:	f043 0204 	orr.w	r2, r3, #4
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b04      	cmp	r3, #4
 800521e:	d101      	bne.n	8005224 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b08      	cmp	r3, #8
 8005244:	d101      	bne.n	800524a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2280      	movs	r2, #128	; 0x80
 8005264:	601a      	str	r2, [r3, #0]
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005280:	601a      	str	r2, [r3, #0]
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800529c:	601a      	str	r2, [r3, #0]
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	605a      	str	r2, [r3, #4]
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	605a      	str	r2, [r3, #4]
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	605a      	str	r2, [r3, #4]
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	605a      	str	r2, [r3, #4]
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	605a      	str	r2, [r3, #4]
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	605a      	str	r2, [r3, #4]
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005378:	2300      	movs	r3, #0
 800537a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e1ad      	b.n	80056e2 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fd ffd3 	bl	8003340 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff feb6 	bl	800511e <LL_ADC_IsDeepPowerDownEnabled>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d004      	beq.n	80053c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff fe9c 	bl	80050fa <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fed1 	bl	800516e <LL_ADC_IsInternalRegulatorEnabled>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d113      	bne.n	80053fa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff feb5 	bl	8005146 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80053dc:	4b9e      	ldr	r3, [pc, #632]	; (8005658 <HAL_ADC_Init+0x2ec>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	099b      	lsrs	r3, r3, #6
 80053e2:	4a9e      	ldr	r2, [pc, #632]	; (800565c <HAL_ADC_Init+0x2f0>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	099b      	lsrs	r3, r3, #6
 80053ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80053ec:	e002      	b.n	80053f4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f9      	bne.n	80053ee <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff feb5 	bl	800516e <LL_ADC_IsInternalRegulatorEnabled>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10d      	bne.n	8005426 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540e:	f043 0210 	orr.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541a:	f043 0201 	orr.w	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff feee 	bl	800520c <LL_ADC_REG_IsConversionOngoing>
 8005430:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b00      	cmp	r3, #0
 800543c:	f040 8148 	bne.w	80056d0 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	f040 8144 	bne.w	80056d0 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005450:	f043 0202 	orr.w	r2, r3, #2
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff feae 	bl	80051be <LL_ADC_IsEnabled>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d141      	bne.n	80054ec <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005470:	d004      	beq.n	800547c <HAL_ADC_Init+0x110>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a7a      	ldr	r2, [pc, #488]	; (8005660 <HAL_ADC_Init+0x2f4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d10f      	bne.n	800549c <HAL_ADC_Init+0x130>
 800547c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005480:	f7ff fe9d 	bl	80051be <LL_ADC_IsEnabled>
 8005484:	4604      	mov	r4, r0
 8005486:	4876      	ldr	r0, [pc, #472]	; (8005660 <HAL_ADC_Init+0x2f4>)
 8005488:	f7ff fe99 	bl	80051be <LL_ADC_IsEnabled>
 800548c:	4603      	mov	r3, r0
 800548e:	4323      	orrs	r3, r4
 8005490:	2b00      	cmp	r3, #0
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	e012      	b.n	80054c2 <HAL_ADC_Init+0x156>
 800549c:	4871      	ldr	r0, [pc, #452]	; (8005664 <HAL_ADC_Init+0x2f8>)
 800549e:	f7ff fe8e 	bl	80051be <LL_ADC_IsEnabled>
 80054a2:	4604      	mov	r4, r0
 80054a4:	4870      	ldr	r0, [pc, #448]	; (8005668 <HAL_ADC_Init+0x2fc>)
 80054a6:	f7ff fe8a 	bl	80051be <LL_ADC_IsEnabled>
 80054aa:	4603      	mov	r3, r0
 80054ac:	431c      	orrs	r4, r3
 80054ae:	486f      	ldr	r0, [pc, #444]	; (800566c <HAL_ADC_Init+0x300>)
 80054b0:	f7ff fe85 	bl	80051be <LL_ADC_IsEnabled>
 80054b4:	4603      	mov	r3, r0
 80054b6:	4323      	orrs	r3, r4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d012      	beq.n	80054ec <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054ce:	d004      	beq.n	80054da <HAL_ADC_Init+0x16e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a62      	ldr	r2, [pc, #392]	; (8005660 <HAL_ADC_Init+0x2f4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d101      	bne.n	80054de <HAL_ADC_Init+0x172>
 80054da:	4a65      	ldr	r2, [pc, #404]	; (8005670 <HAL_ADC_Init+0x304>)
 80054dc:	e000      	b.n	80054e0 <HAL_ADC_Init+0x174>
 80054de:	4a65      	ldr	r2, [pc, #404]	; (8005674 <HAL_ADC_Init+0x308>)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4619      	mov	r1, r3
 80054e6:	4610      	mov	r0, r2
 80054e8:	f7ff fc4a 	bl	8004d80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	7f5b      	ldrb	r3, [r3, #29]
 80054f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80054fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005502:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800550a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800550c:	4313      	orrs	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005516:	2b01      	cmp	r3, #1
 8005518:	d106      	bne.n	8005528 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	3b01      	subs	r3, #1
 8005520:	045b      	lsls	r3, r3, #17
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4313      	orrs	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	4313      	orrs	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	4b4b      	ldr	r3, [pc, #300]	; (8005678 <HAL_ADC_Init+0x30c>)
 800554c:	4013      	ands	r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	69b9      	ldr	r1, [r7, #24]
 8005554:	430b      	orrs	r3, r1
 8005556:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff fe4a 	bl	800520c <LL_ADC_REG_IsConversionOngoing>
 8005578:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fe57 	bl	8005232 <LL_ADC_INJ_IsConversionOngoing>
 8005584:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d17f      	bne.n	800568c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d17c      	bne.n	800568c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005596:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800559e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ae:	f023 0302 	bic.w	r3, r3, #2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	69b9      	ldr	r1, [r7, #24]
 80055b8:	430b      	orrs	r3, r1
 80055ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d017      	beq.n	80055f4 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80055d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80055e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6911      	ldr	r1, [r2, #16]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	430b      	orrs	r3, r1
 80055ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80055f2:	e013      	b.n	800561c <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005602:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005614:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005618:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005622:	2b01      	cmp	r3, #1
 8005624:	d12a      	bne.n	800567c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005630:	f023 0304 	bic.w	r3, r3, #4
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800563c:	4311      	orrs	r1, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005642:	4311      	orrs	r1, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005648:	430a      	orrs	r2, r1
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	611a      	str	r2, [r3, #16]
 8005656:	e019      	b.n	800568c <HAL_ADC_Init+0x320>
 8005658:	20000004 	.word	0x20000004
 800565c:	053e2d63 	.word	0x053e2d63
 8005660:	50000100 	.word	0x50000100
 8005664:	50000400 	.word	0x50000400
 8005668:	50000500 	.word	0x50000500
 800566c:	50000600 	.word	0x50000600
 8005670:	50000300 	.word	0x50000300
 8005674:	50000700 	.word	0x50000700
 8005678:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d10c      	bne.n	80056ae <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	f023 010f 	bic.w	r1, r3, #15
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	1e5a      	subs	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
 80056ac:	e007      	b.n	80056be <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 020f 	bic.w	r2, r2, #15
 80056bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c2:	f023 0303 	bic.w	r3, r3, #3
 80056c6:	f043 0201 	orr.w	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80056ce:	e007      	b.n	80056e0 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d4:	f043 0210 	orr.w	r2, r3, #16
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80056e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3724      	adds	r7, #36	; 0x24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd90      	pop	{r4, r7, pc}
 80056ea:	bf00      	nop

080056ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005700:	d004      	beq.n	800570c <HAL_ADC_Start_DMA+0x20>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a58      	ldr	r2, [pc, #352]	; (8005868 <HAL_ADC_Start_DMA+0x17c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d101      	bne.n	8005710 <HAL_ADC_Start_DMA+0x24>
 800570c:	4b57      	ldr	r3, [pc, #348]	; (800586c <HAL_ADC_Start_DMA+0x180>)
 800570e:	e000      	b.n	8005712 <HAL_ADC_Start_DMA+0x26>
 8005710:	4b57      	ldr	r3, [pc, #348]	; (8005870 <HAL_ADC_Start_DMA+0x184>)
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fce3 	bl	80050de <LL_ADC_GetMultimode>
 8005718:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fd74 	bl	800520c <LL_ADC_REG_IsConversionOngoing>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	f040 8096 	bne.w	8005858 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_ADC_Start_DMA+0x4e>
 8005736:	2302      	movs	r3, #2
 8005738:	e091      	b.n	800585e <HAL_ADC_Start_DMA+0x172>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b05      	cmp	r3, #5
 800574c:	d002      	beq.n	8005754 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b09      	cmp	r3, #9
 8005752:	d17a      	bne.n	800584a <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 feef 	bl	8006538 <ADC_Enable>
 800575a:	4603      	mov	r3, r0
 800575c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d16d      	bne.n	8005840 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005768:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a3a      	ldr	r2, [pc, #232]	; (8005868 <HAL_ADC_Start_DMA+0x17c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d009      	beq.n	8005796 <HAL_ADC_Start_DMA+0xaa>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a3b      	ldr	r2, [pc, #236]	; (8005874 <HAL_ADC_Start_DMA+0x188>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d002      	beq.n	8005792 <HAL_ADC_Start_DMA+0xa6>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	e003      	b.n	800579a <HAL_ADC_Start_DMA+0xae>
 8005792:	4b39      	ldr	r3, [pc, #228]	; (8005878 <HAL_ADC_Start_DMA+0x18c>)
 8005794:	e001      	b.n	800579a <HAL_ADC_Start_DMA+0xae>
 8005796:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	4293      	cmp	r3, r2
 80057a0:	d002      	beq.n	80057a8 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d105      	bne.n	80057b4 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d006      	beq.n	80057ce <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c4:	f023 0206 	bic.w	r2, r3, #6
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	661a      	str	r2, [r3, #96]	; 0x60
 80057cc:	e002      	b.n	80057d4 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d8:	4a28      	ldr	r2, [pc, #160]	; (800587c <HAL_ADC_Start_DMA+0x190>)
 80057da:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e0:	4a27      	ldr	r2, [pc, #156]	; (8005880 <HAL_ADC_Start_DMA+0x194>)
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	4a26      	ldr	r2, [pc, #152]	; (8005884 <HAL_ADC_Start_DMA+0x198>)
 80057ea:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	221c      	movs	r2, #28
 80057f2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0210 	orr.w	r2, r2, #16
 800580a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3340      	adds	r3, #64	; 0x40
 8005826:	4619      	mov	r1, r3
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f001 fa86 	bl	8006d3c <HAL_DMA_Start_IT>
 8005830:	4603      	mov	r3, r0
 8005832:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fcd3 	bl	80051e4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800583e:	e00d      	b.n	800585c <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005848:	e008      	b.n	800585c <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005856:	e001      	b.n	800585c <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005858:	2302      	movs	r3, #2
 800585a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800585c:	7dfb      	ldrb	r3, [r7, #23]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	50000100 	.word	0x50000100
 800586c:	50000300 	.word	0x50000300
 8005870:	50000700 	.word	0x50000700
 8005874:	50000500 	.word	0x50000500
 8005878:	50000400 	.word	0x50000400
 800587c:	080065ed 	.word	0x080065ed
 8005880:	080066c5 	.word	0x080066c5
 8005884:	080066e1 	.word	0x080066e1

08005888 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b0b6      	sub	sp, #216	; 0xd8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d102      	bne.n	80058e8 <HAL_ADC_ConfigChannel+0x24>
 80058e2:	2302      	movs	r3, #2
 80058e4:	f000 bc12 	b.w	800610c <HAL_ADC_ConfigChannel+0x848>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fc89 	bl	800520c <LL_ADC_REG_IsConversionOngoing>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f040 83f2 	bne.w	80060e6 <HAL_ADC_ConfigChannel+0x822>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	f7ff fb1b 	bl	8004f4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fc77 	bl	800520c <LL_ADC_REG_IsConversionOngoing>
 800591e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff fc83 	bl	8005232 <LL_ADC_INJ_IsConversionOngoing>
 800592c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005930:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005934:	2b00      	cmp	r3, #0
 8005936:	f040 81d9 	bne.w	8005cec <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800593a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 81d4 	bne.w	8005cec <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800594c:	d10f      	bne.n	800596e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2200      	movs	r2, #0
 8005958:	4619      	mov	r1, r3
 800595a:	f7ff fb22 	bl	8004fa2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fac9 	bl	8004efe <LL_ADC_SetSamplingTimeCommonConfig>
 800596c:	e00e      	b.n	800598c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6819      	ldr	r1, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	461a      	mov	r2, r3
 800597c:	f7ff fb11 	bl	8004fa2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2100      	movs	r1, #0
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fab9 	bl	8004efe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	08db      	lsrs	r3, r3, #3
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d022      	beq.n	80059f4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6919      	ldr	r1, [r3, #16]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059be:	f7ff fa13 	bl	8004de8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	6919      	ldr	r1, [r3, #16]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	461a      	mov	r2, r3
 80059d0:	f7ff fa5f 	bl	8004e92 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	6919      	ldr	r1, [r3, #16]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	7f1b      	ldrb	r3, [r3, #28]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d102      	bne.n	80059ea <HAL_ADC_ConfigChannel+0x126>
 80059e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059e8:	e000      	b.n	80059ec <HAL_ADC_ConfigChannel+0x128>
 80059ea:	2300      	movs	r3, #0
 80059ec:	461a      	mov	r2, r3
 80059ee:	f7ff fa6b 	bl	8004ec8 <LL_ADC_SetOffsetSaturation>
 80059f2:	e17b      	b.n	8005cec <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2100      	movs	r1, #0
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff fa18 	bl	8004e30 <LL_ADC_GetOffsetChannel>
 8005a00:	4603      	mov	r3, r0
 8005a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <HAL_ADC_ConfigChannel+0x15c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff fa0d 	bl	8004e30 <LL_ADC_GetOffsetChannel>
 8005a16:	4603      	mov	r3, r0
 8005a18:	0e9b      	lsrs	r3, r3, #26
 8005a1a:	f003 021f 	and.w	r2, r3, #31
 8005a1e:	e01e      	b.n	8005a5e <HAL_ADC_ConfigChannel+0x19a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2100      	movs	r1, #0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff fa02 	bl	8004e30 <LL_ADC_GetOffsetChannel>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a36:	fa93 f3a3 	rbit	r3, r3
 8005a3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005a4e:	2320      	movs	r3, #32
 8005a50:	e004      	b.n	8005a5c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005a52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a56:	fab3 f383 	clz	r3, r3
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d105      	bne.n	8005a76 <HAL_ADC_ConfigChannel+0x1b2>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	0e9b      	lsrs	r3, r3, #26
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	e018      	b.n	8005aa8 <HAL_ADC_ConfigChannel+0x1e4>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a82:	fa93 f3a3 	rbit	r3, r3
 8005a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005a92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005a9a:	2320      	movs	r3, #32
 8005a9c:	e004      	b.n	8005aa8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005a9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005aa2:	fab3 f383 	clz	r3, r3
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d106      	bne.n	8005aba <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff f9d1 	bl	8004e5c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2101      	movs	r1, #1
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff f9b5 	bl	8004e30 <LL_ADC_GetOffsetChannel>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10a      	bne.n	8005ae6 <HAL_ADC_ConfigChannel+0x222>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff f9aa 	bl	8004e30 <LL_ADC_GetOffsetChannel>
 8005adc:	4603      	mov	r3, r0
 8005ade:	0e9b      	lsrs	r3, r3, #26
 8005ae0:	f003 021f 	and.w	r2, r3, #31
 8005ae4:	e01e      	b.n	8005b24 <HAL_ADC_ConfigChannel+0x260>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2101      	movs	r1, #1
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff f99f 	bl	8004e30 <LL_ADC_GetOffsetChannel>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005afc:	fa93 f3a3 	rbit	r3, r3
 8005b00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005b04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005b0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005b14:	2320      	movs	r3, #32
 8005b16:	e004      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005b18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b1c:	fab3 f383 	clz	r3, r3
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0x278>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	0e9b      	lsrs	r3, r3, #26
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	e018      	b.n	8005b6e <HAL_ADC_ConfigChannel+0x2aa>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b48:	fa93 f3a3 	rbit	r3, r3
 8005b4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005b60:	2320      	movs	r3, #32
 8005b62:	e004      	b.n	8005b6e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b68:	fab3 f383 	clz	r3, r3
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d106      	bne.n	8005b80 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2200      	movs	r2, #0
 8005b78:	2101      	movs	r1, #1
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff f96e 	bl	8004e5c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2102      	movs	r1, #2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff f952 	bl	8004e30 <LL_ADC_GetOffsetChannel>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <HAL_ADC_ConfigChannel+0x2e8>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2102      	movs	r1, #2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff f947 	bl	8004e30 <LL_ADC_GetOffsetChannel>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	0e9b      	lsrs	r3, r3, #26
 8005ba6:	f003 021f 	and.w	r2, r3, #31
 8005baa:	e01e      	b.n	8005bea <HAL_ADC_ConfigChannel+0x326>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2102      	movs	r1, #2
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff f93c 	bl	8004e30 <LL_ADC_GetOffsetChannel>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bc2:	fa93 f3a3 	rbit	r3, r3
 8005bc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005bca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005bd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005bda:	2320      	movs	r3, #32
 8005bdc:	e004      	b.n	8005be8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005be2:	fab3 f383 	clz	r3, r3
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d105      	bne.n	8005c02 <HAL_ADC_ConfigChannel+0x33e>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	0e9b      	lsrs	r3, r3, #26
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	e016      	b.n	8005c30 <HAL_ADC_ConfigChannel+0x36c>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c0e:	fa93 f3a3 	rbit	r3, r3
 8005c12:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005c14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005c1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005c22:	2320      	movs	r3, #32
 8005c24:	e004      	b.n	8005c30 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c2a:	fab3 f383 	clz	r3, r3
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d106      	bne.n	8005c42 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff f90d 	bl	8004e5c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2103      	movs	r1, #3
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff f8f1 	bl	8004e30 <LL_ADC_GetOffsetChannel>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <HAL_ADC_ConfigChannel+0x3aa>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2103      	movs	r1, #3
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff f8e6 	bl	8004e30 <LL_ADC_GetOffsetChannel>
 8005c64:	4603      	mov	r3, r0
 8005c66:	0e9b      	lsrs	r3, r3, #26
 8005c68:	f003 021f 	and.w	r2, r3, #31
 8005c6c:	e017      	b.n	8005c9e <HAL_ADC_ConfigChannel+0x3da>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2103      	movs	r1, #3
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff f8db 	bl	8004e30 <LL_ADC_GetOffsetChannel>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c80:	fa93 f3a3 	rbit	r3, r3
 8005c84:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c88:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005c90:	2320      	movs	r3, #32
 8005c92:	e003      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c96:	fab3 f383 	clz	r3, r3
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d105      	bne.n	8005cb6 <HAL_ADC_ConfigChannel+0x3f2>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	0e9b      	lsrs	r3, r3, #26
 8005cb0:	f003 031f 	and.w	r3, r3, #31
 8005cb4:	e011      	b.n	8005cda <HAL_ADC_ConfigChannel+0x416>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cbe:	fa93 f3a3 	rbit	r3, r3
 8005cc2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005cce:	2320      	movs	r3, #32
 8005cd0:	e003      	b.n	8005cda <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd4:	fab3 f383 	clz	r3, r3
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d106      	bne.n	8005cec <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2103      	movs	r1, #3
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff f8b8 	bl	8004e5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fa64 	bl	80051be <LL_ADC_IsEnabled>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f040 813d 	bne.w	8005f78 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6819      	ldr	r1, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f7ff f974 	bl	8004ff8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4aa2      	ldr	r2, [pc, #648]	; (8005fa0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	f040 812e 	bne.w	8005f78 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10b      	bne.n	8005d44 <HAL_ADC_ConfigChannel+0x480>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	0e9b      	lsrs	r3, r3, #26
 8005d32:	3301      	adds	r3, #1
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	2b09      	cmp	r3, #9
 8005d3a:	bf94      	ite	ls
 8005d3c:	2301      	movls	r3, #1
 8005d3e:	2300      	movhi	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	e019      	b.n	8005d78 <HAL_ADC_ConfigChannel+0x4b4>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d4c:	fa93 f3a3 	rbit	r3, r3
 8005d50:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d54:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005d5c:	2320      	movs	r3, #32
 8005d5e:	e003      	b.n	8005d68 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005d60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d62:	fab3 f383 	clz	r3, r3
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	3301      	adds	r3, #1
 8005d6a:	f003 031f 	and.w	r3, r3, #31
 8005d6e:	2b09      	cmp	r3, #9
 8005d70:	bf94      	ite	ls
 8005d72:	2301      	movls	r3, #1
 8005d74:	2300      	movhi	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d079      	beq.n	8005e70 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d107      	bne.n	8005d98 <HAL_ADC_ConfigChannel+0x4d4>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	0e9b      	lsrs	r3, r3, #26
 8005d8e:	3301      	adds	r3, #1
 8005d90:	069b      	lsls	r3, r3, #26
 8005d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d96:	e015      	b.n	8005dc4 <HAL_ADC_ConfigChannel+0x500>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da0:	fa93 f3a3 	rbit	r3, r3
 8005da4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005db0:	2320      	movs	r3, #32
 8005db2:	e003      	b.n	8005dbc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db6:	fab3 f383 	clz	r3, r3
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	069b      	lsls	r3, r3, #26
 8005dc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d109      	bne.n	8005de4 <HAL_ADC_ConfigChannel+0x520>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	0e9b      	lsrs	r3, r3, #26
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	2101      	movs	r1, #1
 8005dde:	fa01 f303 	lsl.w	r3, r1, r3
 8005de2:	e017      	b.n	8005e14 <HAL_ADC_ConfigChannel+0x550>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dec:	fa93 f3a3 	rbit	r3, r3
 8005df0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005dfc:	2320      	movs	r3, #32
 8005dfe:	e003      	b.n	8005e08 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e02:	fab3 f383 	clz	r3, r3
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	3301      	adds	r3, #1
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	2101      	movs	r1, #1
 8005e10:	fa01 f303 	lsl.w	r3, r1, r3
 8005e14:	ea42 0103 	orr.w	r1, r2, r3
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <HAL_ADC_ConfigChannel+0x576>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	0e9b      	lsrs	r3, r3, #26
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	f003 021f 	and.w	r2, r3, #31
 8005e30:	4613      	mov	r3, r2
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	4413      	add	r3, r2
 8005e36:	051b      	lsls	r3, r3, #20
 8005e38:	e018      	b.n	8005e6c <HAL_ADC_ConfigChannel+0x5a8>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	fa93 f3a3 	rbit	r3, r3
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005e52:	2320      	movs	r3, #32
 8005e54:	e003      	b.n	8005e5e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e58:	fab3 f383 	clz	r3, r3
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	3301      	adds	r3, #1
 8005e60:	f003 021f 	and.w	r2, r3, #31
 8005e64:	4613      	mov	r3, r2
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	4413      	add	r3, r2
 8005e6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	e07e      	b.n	8005f6e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d107      	bne.n	8005e8c <HAL_ADC_ConfigChannel+0x5c8>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	0e9b      	lsrs	r3, r3, #26
 8005e82:	3301      	adds	r3, #1
 8005e84:	069b      	lsls	r3, r3, #26
 8005e86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e8a:	e015      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x5f4>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	fa93 f3a3 	rbit	r3, r3
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	e003      	b.n	8005eb0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	fab3 f383 	clz	r3, r3
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	069b      	lsls	r3, r3, #26
 8005eb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d109      	bne.n	8005ed8 <HAL_ADC_ConfigChannel+0x614>
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	0e9b      	lsrs	r3, r3, #26
 8005eca:	3301      	adds	r3, #1
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed6:	e017      	b.n	8005f08 <HAL_ADC_ConfigChannel+0x644>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	fa93 f3a3 	rbit	r3, r3
 8005ee4:	61fb      	str	r3, [r7, #28]
  return result;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	e003      	b.n	8005efc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	fab3 f383 	clz	r3, r3
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	3301      	adds	r3, #1
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	2101      	movs	r1, #1
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	ea42 0103 	orr.w	r1, r2, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10d      	bne.n	8005f34 <HAL_ADC_ConfigChannel+0x670>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	0e9b      	lsrs	r3, r3, #26
 8005f1e:	3301      	adds	r3, #1
 8005f20:	f003 021f 	and.w	r2, r3, #31
 8005f24:	4613      	mov	r3, r2
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	4413      	add	r3, r2
 8005f2a:	3b1e      	subs	r3, #30
 8005f2c:	051b      	lsls	r3, r3, #20
 8005f2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f32:	e01b      	b.n	8005f6c <HAL_ADC_ConfigChannel+0x6a8>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	fa93 f3a3 	rbit	r3, r3
 8005f40:	613b      	str	r3, [r7, #16]
  return result;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	e003      	b.n	8005f58 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	fab3 f383 	clz	r3, r3
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	3301      	adds	r3, #1
 8005f5a:	f003 021f 	and.w	r2, r3, #31
 8005f5e:	4613      	mov	r3, r2
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	4413      	add	r3, r2
 8005f64:	3b1e      	subs	r3, #30
 8005f66:	051b      	lsls	r3, r3, #20
 8005f68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f6c:	430b      	orrs	r3, r1
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	6892      	ldr	r2, [r2, #8]
 8005f72:	4619      	mov	r1, r3
 8005f74:	f7ff f815 	bl	8004fa2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <HAL_ADC_ConfigChannel+0x6e0>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 80bd 	beq.w	8006100 <HAL_ADC_ConfigChannel+0x83c>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f8e:	d004      	beq.n	8005f9a <HAL_ADC_ConfigChannel+0x6d6>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a04      	ldr	r2, [pc, #16]	; (8005fa8 <HAL_ADC_ConfigChannel+0x6e4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d10a      	bne.n	8005fb0 <HAL_ADC_ConfigChannel+0x6ec>
 8005f9a:	4b04      	ldr	r3, [pc, #16]	; (8005fac <HAL_ADC_ConfigChannel+0x6e8>)
 8005f9c:	e009      	b.n	8005fb2 <HAL_ADC_ConfigChannel+0x6ee>
 8005f9e:	bf00      	nop
 8005fa0:	407f0000 	.word	0x407f0000
 8005fa4:	80080000 	.word	0x80080000
 8005fa8:	50000100 	.word	0x50000100
 8005fac:	50000300 	.word	0x50000300
 8005fb0:	4b58      	ldr	r3, [pc, #352]	; (8006114 <HAL_ADC_ConfigChannel+0x850>)
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe ff0a 	bl	8004dcc <LL_ADC_GetCommonPathInternalCh>
 8005fb8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a55      	ldr	r2, [pc, #340]	; (8006118 <HAL_ADC_ConfigChannel+0x854>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_ADC_ConfigChannel+0x70c>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a54      	ldr	r2, [pc, #336]	; (800611c <HAL_ADC_ConfigChannel+0x858>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d139      	bne.n	8006044 <HAL_ADC_ConfigChannel+0x780>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d133      	bne.n	8006044 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fe4:	d005      	beq.n	8005ff2 <HAL_ADC_ConfigChannel+0x72e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a4d      	ldr	r2, [pc, #308]	; (8006120 <HAL_ADC_ConfigChannel+0x85c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	f040 8084 	bne.w	80060fa <HAL_ADC_ConfigChannel+0x836>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ffa:	d004      	beq.n	8006006 <HAL_ADC_ConfigChannel+0x742>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a48      	ldr	r2, [pc, #288]	; (8006124 <HAL_ADC_ConfigChannel+0x860>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d101      	bne.n	800600a <HAL_ADC_ConfigChannel+0x746>
 8006006:	4a48      	ldr	r2, [pc, #288]	; (8006128 <HAL_ADC_ConfigChannel+0x864>)
 8006008:	e000      	b.n	800600c <HAL_ADC_ConfigChannel+0x748>
 800600a:	4a42      	ldr	r2, [pc, #264]	; (8006114 <HAL_ADC_ConfigChannel+0x850>)
 800600c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006010:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f7fe fec5 	bl	8004da6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800601c:	4b43      	ldr	r3, [pc, #268]	; (800612c <HAL_ADC_ConfigChannel+0x868>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	099b      	lsrs	r3, r3, #6
 8006022:	4a43      	ldr	r2, [pc, #268]	; (8006130 <HAL_ADC_ConfigChannel+0x86c>)
 8006024:	fba2 2303 	umull	r2, r3, r2, r3
 8006028:	099a      	lsrs	r2, r3, #6
 800602a:	4613      	mov	r3, r2
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006034:	e002      	b.n	800603c <HAL_ADC_ConfigChannel+0x778>
          {
            wait_loop_index--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3b01      	subs	r3, #1
 800603a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f9      	bne.n	8006036 <HAL_ADC_ConfigChannel+0x772>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006042:	e05a      	b.n	80060fa <HAL_ADC_ConfigChannel+0x836>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a3a      	ldr	r2, [pc, #232]	; (8006134 <HAL_ADC_ConfigChannel+0x870>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d125      	bne.n	800609a <HAL_ADC_ConfigChannel+0x7d6>
 800604e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d11f      	bne.n	800609a <HAL_ADC_ConfigChannel+0x7d6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a31      	ldr	r2, [pc, #196]	; (8006124 <HAL_ADC_ConfigChannel+0x860>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d104      	bne.n	800606e <HAL_ADC_ConfigChannel+0x7aa>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a33      	ldr	r2, [pc, #204]	; (8006138 <HAL_ADC_ConfigChannel+0x874>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d047      	beq.n	80060fe <HAL_ADC_ConfigChannel+0x83a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006076:	d004      	beq.n	8006082 <HAL_ADC_ConfigChannel+0x7be>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a29      	ldr	r2, [pc, #164]	; (8006124 <HAL_ADC_ConfigChannel+0x860>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d101      	bne.n	8006086 <HAL_ADC_ConfigChannel+0x7c2>
 8006082:	4a29      	ldr	r2, [pc, #164]	; (8006128 <HAL_ADC_ConfigChannel+0x864>)
 8006084:	e000      	b.n	8006088 <HAL_ADC_ConfigChannel+0x7c4>
 8006086:	4a23      	ldr	r2, [pc, #140]	; (8006114 <HAL_ADC_ConfigChannel+0x850>)
 8006088:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800608c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006090:	4619      	mov	r1, r3
 8006092:	4610      	mov	r0, r2
 8006094:	f7fe fe87 	bl	8004da6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006098:	e031      	b.n	80060fe <HAL_ADC_ConfigChannel+0x83a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a27      	ldr	r2, [pc, #156]	; (800613c <HAL_ADC_ConfigChannel+0x878>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d12d      	bne.n	8006100 <HAL_ADC_ConfigChannel+0x83c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80060a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d127      	bne.n	8006100 <HAL_ADC_ConfigChannel+0x83c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <HAL_ADC_ConfigChannel+0x860>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d022      	beq.n	8006100 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060c2:	d004      	beq.n	80060ce <HAL_ADC_ConfigChannel+0x80a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a16      	ldr	r2, [pc, #88]	; (8006124 <HAL_ADC_ConfigChannel+0x860>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d101      	bne.n	80060d2 <HAL_ADC_ConfigChannel+0x80e>
 80060ce:	4a16      	ldr	r2, [pc, #88]	; (8006128 <HAL_ADC_ConfigChannel+0x864>)
 80060d0:	e000      	b.n	80060d4 <HAL_ADC_ConfigChannel+0x810>
 80060d2:	4a10      	ldr	r2, [pc, #64]	; (8006114 <HAL_ADC_ConfigChannel+0x850>)
 80060d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f7fe fe61 	bl	8004da6 <LL_ADC_SetCommonPathInternalCh>
 80060e4:	e00c      	b.n	8006100 <HAL_ADC_ConfigChannel+0x83c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ea:	f043 0220 	orr.w	r2, r3, #32
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80060f8:	e002      	b.n	8006100 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80060fa:	bf00      	nop
 80060fc:	e000      	b.n	8006100 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060fe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006108:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800610c:	4618      	mov	r0, r3
 800610e:	37d8      	adds	r7, #216	; 0xd8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	50000700 	.word	0x50000700
 8006118:	c3210000 	.word	0xc3210000
 800611c:	90c00010 	.word	0x90c00010
 8006120:	50000600 	.word	0x50000600
 8006124:	50000100 	.word	0x50000100
 8006128:	50000300 	.word	0x50000300
 800612c:	20000004 	.word	0x20000004
 8006130:	053e2d63 	.word	0x053e2d63
 8006134:	c7520000 	.word	0xc7520000
 8006138:	50000500 	.word	0x50000500
 800613c:	cb840000 	.word	0xcb840000

08006140 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08e      	sub	sp, #56	; 0x38
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006158:	d003      	beq.n	8006162 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800615e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_ADC_AnalogWDGConfig+0x30>
 800616c:	2302      	movs	r3, #2
 800616e:	e1dc      	b.n	800652a <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff f845 	bl	800520c <LL_ADC_REG_IsConversionOngoing>
 8006182:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff f852 	bl	8005232 <LL_ADC_INJ_IsConversionOngoing>
 800618e:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	2b00      	cmp	r3, #0
 8006194:	f040 8163 	bne.w	800645e <HAL_ADC_AnalogWDGConfig+0x31e>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	2b00      	cmp	r3, #0
 800619c:	f040 815f 	bne.w	800645e <HAL_ADC_AnalogWDGConfig+0x31e>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4aa6      	ldr	r2, [pc, #664]	; (8006440 <HAL_ADC_AnalogWDGConfig+0x300>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	f040 8086 	bne.w	80062b8 <HAL_ADC_AnalogWDGConfig+0x178>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061b4:	d042      	beq.n	800623c <HAL_ADC_AnalogWDGConfig+0xfc>
 80061b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061ba:	d806      	bhi.n	80061ca <HAL_ADC_AnalogWDGConfig+0x8a>
 80061bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061c0:	d034      	beq.n	800622c <HAL_ADC_AnalogWDGConfig+0xec>
 80061c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061c6:	d00a      	beq.n	80061de <HAL_ADC_AnalogWDGConfig+0x9e>
 80061c8:	e048      	b.n	800625c <HAL_ADC_AnalogWDGConfig+0x11c>
 80061ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061ce:	d03d      	beq.n	800624c <HAL_ADC_AnalogWDGConfig+0x10c>
 80061d0:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80061d4:	d01d      	beq.n	8006212 <HAL_ADC_AnalogWDGConfig+0xd2>
 80061d6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80061da:	d00d      	beq.n	80061f8 <HAL_ADC_AnalogWDGConfig+0xb8>
 80061dc:	e03e      	b.n	800625c <HAL_ADC_AnalogWDGConfig+0x11c>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80061ea:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80061ee:	461a      	mov	r2, r3
 80061f0:	4993      	ldr	r1, [pc, #588]	; (8006440 <HAL_ADC_AnalogWDGConfig+0x300>)
 80061f2:	f7fe ff25 	bl	8005040 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 80061f6:	e039      	b.n	800626c <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006204:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8006208:	461a      	mov	r2, r3
 800620a:	498d      	ldr	r1, [pc, #564]	; (8006440 <HAL_ADC_AnalogWDGConfig+0x300>)
 800620c:	f7fe ff18 	bl	8005040 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8006210:	e02c      	b.n	800626c <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800621e:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8006222:	461a      	mov	r2, r3
 8006224:	4986      	ldr	r1, [pc, #536]	; (8006440 <HAL_ADC_AnalogWDGConfig+0x300>)
 8006226:	f7fe ff0b 	bl	8005040 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 800622a:	e01f      	b.n	800626c <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a84      	ldr	r2, [pc, #528]	; (8006444 <HAL_ADC_AnalogWDGConfig+0x304>)
 8006232:	4983      	ldr	r1, [pc, #524]	; (8006440 <HAL_ADC_AnalogWDGConfig+0x300>)
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe ff03 	bl	8005040 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800623a:	e017      	b.n	800626c <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a81      	ldr	r2, [pc, #516]	; (8006448 <HAL_ADC_AnalogWDGConfig+0x308>)
 8006242:	497f      	ldr	r1, [pc, #508]	; (8006440 <HAL_ADC_AnalogWDGConfig+0x300>)
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe fefb 	bl	8005040 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800624a:	e00f      	b.n	800626c <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a7e      	ldr	r2, [pc, #504]	; (800644c <HAL_ADC_AnalogWDGConfig+0x30c>)
 8006252:	497b      	ldr	r1, [pc, #492]	; (8006440 <HAL_ADC_AnalogWDGConfig+0x300>)
 8006254:	4618      	mov	r0, r3
 8006256:	f7fe fef3 	bl	8005040 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800625a:	e007      	b.n	800626c <HAL_ADC_AnalogWDGConfig+0x12c>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2200      	movs	r2, #0
 8006262:	4977      	ldr	r1, [pc, #476]	; (8006440 <HAL_ADC_AnalogWDGConfig+0x300>)
 8006264:	4618      	mov	r0, r3
 8006266:	f7fe feeb 	bl	8005040 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800626a:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006286:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe ffe0 	bl	8005258 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	7b1b      	ldrb	r3, [r3, #12]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d105      	bne.n	80062ac <HAL_ADC_AnalogWDGConfig+0x16c>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff f800 	bl	80052aa <LL_ADC_EnableIT_AWD1>
 80062aa:	e0d8      	b.n	800645e <HAL_ADC_AnalogWDGConfig+0x31e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7ff f82a 	bl	800530a <LL_ADC_DisableIT_AWD1>
 80062b6:	e0d2      	b.n	800645e <HAL_ADC_AnalogWDGConfig+0x31e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062c0:	d077      	beq.n	80063b2 <HAL_ADC_AnalogWDGConfig+0x272>
 80062c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062c6:	d806      	bhi.n	80062d6 <HAL_ADC_AnalogWDGConfig+0x196>
 80062c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062cc:	d071      	beq.n	80063b2 <HAL_ADC_AnalogWDGConfig+0x272>
 80062ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062d2:	d009      	beq.n	80062e8 <HAL_ADC_AnalogWDGConfig+0x1a8>
 80062d4:	e076      	b.n	80063c4 <HAL_ADC_AnalogWDGConfig+0x284>
 80062d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062da:	d06a      	beq.n	80063b2 <HAL_ADC_AnalogWDGConfig+0x272>
 80062dc:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80062e0:	d002      	beq.n	80062e8 <HAL_ADC_AnalogWDGConfig+0x1a8>
 80062e2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80062e6:	d16d      	bne.n	80063c4 <HAL_ADC_AnalogWDGConfig+0x284>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a58      	ldr	r2, [pc, #352]	; (8006450 <HAL_ADC_AnalogWDGConfig+0x310>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d12f      	bne.n	8006352 <HAL_ADC_AnalogWDGConfig+0x212>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d108      	bne.n	8006310 <HAL_ADC_AnalogWDGConfig+0x1d0>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	0e9b      	lsrs	r3, r3, #26
 8006304:	f003 031f 	and.w	r3, r3, #31
 8006308:	2201      	movs	r2, #1
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	e016      	b.n	800633e <HAL_ADC_AnalogWDGConfig+0x1fe>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	fa93 f3a3 	rbit	r3, r3
 800631c:	61bb      	str	r3, [r7, #24]
  return result;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_ADC_AnalogWDGConfig+0x1ec>
    return 32U;
 8006328:	2320      	movs	r3, #32
 800632a:	e003      	b.n	8006334 <HAL_ADC_AnalogWDGConfig+0x1f4>
  return __builtin_clz(value);
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	fab3 f383 	clz	r3, r3
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	2201      	movs	r2, #1
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	430b      	orrs	r3, r1
 800634c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006350:	e041      	b.n	80063d6 <HAL_ADC_AnalogWDGConfig+0x296>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800635a:	2b00      	cmp	r3, #0
 800635c:	d108      	bne.n	8006370 <HAL_ADC_AnalogWDGConfig+0x230>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	0e9b      	lsrs	r3, r3, #26
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	2201      	movs	r2, #1
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	e016      	b.n	800639e <HAL_ADC_AnalogWDGConfig+0x25e>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	fa93 f3a3 	rbit	r3, r3
 800637c:	60fb      	str	r3, [r7, #12]
  return result;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_ADC_AnalogWDGConfig+0x24c>
    return 32U;
 8006388:	2320      	movs	r3, #32
 800638a:	e003      	b.n	8006394 <HAL_ADC_AnalogWDGConfig+0x254>
  return __builtin_clz(value);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	fab3 f383 	clz	r3, r3
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f003 031f 	and.w	r3, r3, #31
 8006398:	2201      	movs	r2, #1
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6812      	ldr	r2, [r2, #0]
 80063a2:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6812      	ldr	r2, [r2, #0]
 80063aa:	430b      	orrs	r3, r1
 80063ac:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80063b0:	e011      	b.n	80063d6 <HAL_ADC_AnalogWDGConfig+0x296>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a24      	ldr	r2, [pc, #144]	; (800644c <HAL_ADC_AnalogWDGConfig+0x30c>)
 80063bc:	4619      	mov	r1, r3
 80063be:	f7fe fe3f 	bl	8005040 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80063c2:	e008      	b.n	80063d6 <HAL_ADC_AnalogWDGConfig+0x296>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2200      	movs	r2, #0
 80063ce:	4619      	mov	r1, r3
 80063d0:	f7fe fe36 	bl	8005040 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80063d4:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1d      	ldr	r2, [pc, #116]	; (8006450 <HAL_ADC_AnalogWDGConfig+0x310>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d11a      	bne.n	8006416 <HAL_ADC_AnalogWDGConfig+0x2d6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe ff3e 	bl	8005272 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	7b1b      	ldrb	r3, [r3, #12]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d105      	bne.n	800640a <HAL_ADC_AnalogWDGConfig+0x2ca>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe ff61 	bl	80052ca <LL_ADC_EnableIT_AWD2>
 8006408:	e029      	b.n	800645e <HAL_ADC_AnalogWDGConfig+0x31e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe ff8b 	bl	800532a <LL_ADC_DisableIT_AWD2>
 8006414:	e023      	b.n	800645e <HAL_ADC_AnalogWDGConfig+0x31e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f7fe ff31 	bl	800528e <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	7b1b      	ldrb	r3, [r3, #12]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d10f      	bne.n	8006454 <HAL_ADC_AnalogWDGConfig+0x314>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f7fe ff56 	bl	80052ea <LL_ADC_EnableIT_AWD3>
 800643e:	e00e      	b.n	800645e <HAL_ADC_AnalogWDGConfig+0x31e>
 8006440:	7dc00000 	.word	0x7dc00000
 8006444:	0087ffff 	.word	0x0087ffff
 8006448:	0107ffff 	.word	0x0107ffff
 800644c:	0187ffff 	.word	0x0187ffff
 8006450:	0017ffff 	.word	0x0017ffff
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe ff76 	bl	800534a <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a34      	ldr	r2, [pc, #208]	; (8006534 <HAL_ADC_AnalogWDGConfig+0x3f4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d118      	bne.n	800649a <HAL_ADC_AnalogWDGConfig+0x35a>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	08db      	lsrs	r3, r3, #3
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	fa02 f303 	lsl.w	r3, r2, r3
 800647e:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	08db      	lsrs	r3, r3, #3
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	633b      	str	r3, [r7, #48]	; 0x30
 8006498:	e039      	b.n	800650e <HAL_ADC_AnalogWDGConfig+0x3ce>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0318 	and.w	r3, r3, #24
 80064a4:	2b18      	cmp	r3, #24
 80064a6:	d011      	beq.n	80064cc <HAL_ADC_AnalogWDGConfig+0x38c>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	6919      	ldr	r1, [r3, #16]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	f003 0203 	and.w	r2, r3, #3
 80064b8:	4613      	mov	r3, r2
 80064ba:	07db      	lsls	r3, r3, #31
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	3304      	adds	r3, #4
 80064c2:	f003 031f 	and.w	r3, r3, #31
 80064c6:	fa21 f303 	lsr.w	r3, r1, r3
 80064ca:	e002      	b.n	80064d2 <HAL_ADC_AnalogWDGConfig+0x392>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f003 0318 	and.w	r3, r3, #24
 80064de:	2b18      	cmp	r3, #24
 80064e0:	d011      	beq.n	8006506 <HAL_ADC_AnalogWDGConfig+0x3c6>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	6959      	ldr	r1, [r3, #20]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	08db      	lsrs	r3, r3, #3
 80064ee:	f003 0203 	and.w	r2, r3, #3
 80064f2:	4613      	mov	r3, r2
 80064f4:	07db      	lsls	r3, r3, #31
 80064f6:	1a9b      	subs	r3, r3, r2
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	3304      	adds	r3, #4
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	fa21 f303 	lsr.w	r3, r1, r3
 8006504:	e002      	b.n	800650c <HAL_ADC_AnalogWDGConfig+0x3cc>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6819      	ldr	r1, [r3, #0]
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800651a:	f7fe fdbe 	bl	800509a <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800652a:	4618      	mov	r0, r3
 800652c:	3738      	adds	r7, #56	; 0x38
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	7dc00000 	.word	0x7dc00000

08006538 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe fe3a 	bl	80051be <LL_ADC_IsEnabled>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d146      	bne.n	80065de <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	4b24      	ldr	r3, [pc, #144]	; (80065e8 <ADC_Enable+0xb0>)
 8006558:	4013      	ands	r3, r2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00d      	beq.n	800657a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006562:	f043 0210 	orr.w	r2, r3, #16
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656e:	f043 0201 	orr.w	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e032      	b.n	80065e0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe fe09 	bl	8005196 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006584:	f7fe fbf0 	bl	8004d68 <HAL_GetTick>
 8006588:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800658a:	e021      	b.n	80065d0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe fe14 	bl	80051be <LL_ADC_IsEnabled>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d104      	bne.n	80065a6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe fdf8 	bl	8005196 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80065a6:	f7fe fbdf 	bl	8004d68 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d90d      	bls.n	80065d0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b8:	f043 0210 	orr.w	r2, r3, #16
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c4:	f043 0201 	orr.w	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e007      	b.n	80065e0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d1d6      	bne.n	800658c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	8000003f 	.word	0x8000003f

080065ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006602:	2b00      	cmp	r3, #0
 8006604:	d14b      	bne.n	800669e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d021      	beq.n	8006664 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe fc7d 	bl	8004f24 <LL_ADC_REG_IsTriggerSourceSWStart>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d032      	beq.n	8006696 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d12b      	bne.n	8006696 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d11f      	bne.n	8006696 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665a:	f043 0201 	orr.w	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	65da      	str	r2, [r3, #92]	; 0x5c
 8006662:	e018      	b.n	8006696 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d111      	bne.n	8006696 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668e:	f043 0201 	orr.w	r2, r3, #1
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f7ff f8f6 	bl	8005888 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800669c:	e00e      	b.n	80066bc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f7ff f900 	bl	80058b0 <HAL_ADC_ErrorCallback>
}
 80066b0:	e004      	b.n	80066bc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
}
 80066bc:	bf00      	nop
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f7ff f8e2 	bl	800589c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066d8:	bf00      	nop
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fe:	f043 0204 	orr.w	r2, r3, #4
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7ff f8d2 	bl	80058b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800670c:	bf00      	nop
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <LL_ADC_IsEnabled>:
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <LL_ADC_IsEnabled+0x18>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <LL_ADC_IsEnabled+0x1a>
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <LL_ADC_REG_IsConversionOngoing>:
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b04      	cmp	r3, #4
 800674c:	d101      	bne.n	8006752 <LL_ADC_REG_IsConversionOngoing+0x18>
 800674e:	2301      	movs	r3, #1
 8006750:	e000      	b.n	8006754 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b0a1      	sub	sp, #132	; 0x84
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006776:	2b01      	cmp	r3, #1
 8006778:	d101      	bne.n	800677e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800677a:	2302      	movs	r3, #2
 800677c:	e0e3      	b.n	8006946 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800678e:	d102      	bne.n	8006796 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8006790:	4b6f      	ldr	r3, [pc, #444]	; (8006950 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006792:	60bb      	str	r3, [r7, #8]
 8006794:	e009      	b.n	80067aa <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a6e      	ldr	r2, [pc, #440]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d102      	bne.n	80067a6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80067a0:	4b6d      	ldr	r3, [pc, #436]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80067a2:	60bb      	str	r3, [r7, #8]
 80067a4:	e001      	b.n	80067aa <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80067a6:	2300      	movs	r3, #0
 80067a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10b      	bne.n	80067c8 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b4:	f043 0220 	orr.w	r2, r3, #32
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e0be      	b.n	8006946 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff ffb5 	bl	800673a <LL_ADC_REG_IsConversionOngoing>
 80067d0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff ffaf 	bl	800673a <LL_ADC_REG_IsConversionOngoing>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f040 80a0 	bne.w	8006924 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80067e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f040 809c 	bne.w	8006924 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067f4:	d004      	beq.n	8006800 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a55      	ldr	r2, [pc, #340]	; (8006950 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d101      	bne.n	8006804 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8006800:	4b56      	ldr	r3, [pc, #344]	; (800695c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006802:	e000      	b.n	8006806 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8006804:	4b56      	ldr	r3, [pc, #344]	; (8006960 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006806:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d04b      	beq.n	80068a8 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	6859      	ldr	r1, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006822:	035b      	lsls	r3, r3, #13
 8006824:	430b      	orrs	r3, r1
 8006826:	431a      	orrs	r2, r3
 8006828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800682a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006834:	d004      	beq.n	8006840 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a45      	ldr	r2, [pc, #276]	; (8006950 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d10f      	bne.n	8006860 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006840:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006844:	f7ff ff66 	bl	8006714 <LL_ADC_IsEnabled>
 8006848:	4604      	mov	r4, r0
 800684a:	4841      	ldr	r0, [pc, #260]	; (8006950 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800684c:	f7ff ff62 	bl	8006714 <LL_ADC_IsEnabled>
 8006850:	4603      	mov	r3, r0
 8006852:	4323      	orrs	r3, r4
 8006854:	2b00      	cmp	r3, #0
 8006856:	bf0c      	ite	eq
 8006858:	2301      	moveq	r3, #1
 800685a:	2300      	movne	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	e012      	b.n	8006886 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006860:	483c      	ldr	r0, [pc, #240]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8006862:	f7ff ff57 	bl	8006714 <LL_ADC_IsEnabled>
 8006866:	4604      	mov	r4, r0
 8006868:	483b      	ldr	r0, [pc, #236]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800686a:	f7ff ff53 	bl	8006714 <LL_ADC_IsEnabled>
 800686e:	4603      	mov	r3, r0
 8006870:	431c      	orrs	r4, r3
 8006872:	483c      	ldr	r0, [pc, #240]	; (8006964 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006874:	f7ff ff4e 	bl	8006714 <LL_ADC_IsEnabled>
 8006878:	4603      	mov	r3, r0
 800687a:	4323      	orrs	r3, r4
 800687c:	2b00      	cmp	r3, #0
 800687e:	bf0c      	ite	eq
 8006880:	2301      	moveq	r3, #1
 8006882:	2300      	movne	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d056      	beq.n	8006938 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800688a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006892:	f023 030f 	bic.w	r3, r3, #15
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	6811      	ldr	r1, [r2, #0]
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	6892      	ldr	r2, [r2, #8]
 800689e:	430a      	orrs	r2, r1
 80068a0:	431a      	orrs	r2, r3
 80068a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068a6:	e047      	b.n	8006938 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80068a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068bc:	d004      	beq.n	80068c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a23      	ldr	r2, [pc, #140]	; (8006950 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d10f      	bne.n	80068e8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80068c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80068cc:	f7ff ff22 	bl	8006714 <LL_ADC_IsEnabled>
 80068d0:	4604      	mov	r4, r0
 80068d2:	481f      	ldr	r0, [pc, #124]	; (8006950 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80068d4:	f7ff ff1e 	bl	8006714 <LL_ADC_IsEnabled>
 80068d8:	4603      	mov	r3, r0
 80068da:	4323      	orrs	r3, r4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bf0c      	ite	eq
 80068e0:	2301      	moveq	r3, #1
 80068e2:	2300      	movne	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	e012      	b.n	800690e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80068e8:	481a      	ldr	r0, [pc, #104]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80068ea:	f7ff ff13 	bl	8006714 <LL_ADC_IsEnabled>
 80068ee:	4604      	mov	r4, r0
 80068f0:	4819      	ldr	r0, [pc, #100]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80068f2:	f7ff ff0f 	bl	8006714 <LL_ADC_IsEnabled>
 80068f6:	4603      	mov	r3, r0
 80068f8:	431c      	orrs	r4, r3
 80068fa:	481a      	ldr	r0, [pc, #104]	; (8006964 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80068fc:	f7ff ff0a 	bl	8006714 <LL_ADC_IsEnabled>
 8006900:	4603      	mov	r3, r0
 8006902:	4323      	orrs	r3, r4
 8006904:	2b00      	cmp	r3, #0
 8006906:	bf0c      	ite	eq
 8006908:	2301      	moveq	r3, #1
 800690a:	2300      	movne	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d012      	beq.n	8006938 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800691a:	f023 030f 	bic.w	r3, r3, #15
 800691e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006920:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006922:	e009      	b.n	8006938 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006936:	e000      	b.n	800693a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006938:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006942:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006946:	4618      	mov	r0, r3
 8006948:	3784      	adds	r7, #132	; 0x84
 800694a:	46bd      	mov	sp, r7
 800694c:	bd90      	pop	{r4, r7, pc}
 800694e:	bf00      	nop
 8006950:	50000100 	.word	0x50000100
 8006954:	50000400 	.word	0x50000400
 8006958:	50000500 	.word	0x50000500
 800695c:	50000300 	.word	0x50000300
 8006960:	50000700 	.word	0x50000700
 8006964:	50000600 	.word	0x50000600

08006968 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e023      	b.n	80069c2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fc fda0 	bl	80034d4 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069dc:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <__NVIC_SetPriorityGrouping+0x44>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069e8:	4013      	ands	r3, r2
 80069ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069fe:	4a04      	ldr	r2, [pc, #16]	; (8006a10 <__NVIC_SetPriorityGrouping+0x44>)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	60d3      	str	r3, [r2, #12]
}
 8006a04:	bf00      	nop
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	e000ed00 	.word	0xe000ed00

08006a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a18:	4b04      	ldr	r3, [pc, #16]	; (8006a2c <__NVIC_GetPriorityGrouping+0x18>)
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	0a1b      	lsrs	r3, r3, #8
 8006a1e:	f003 0307 	and.w	r3, r3, #7
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	e000ed00 	.word	0xe000ed00

08006a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	db0b      	blt.n	8006a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	f003 021f 	and.w	r2, r3, #31
 8006a48:	4907      	ldr	r1, [pc, #28]	; (8006a68 <__NVIC_EnableIRQ+0x38>)
 8006a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	2001      	movs	r0, #1
 8006a52:	fa00 f202 	lsl.w	r2, r0, r2
 8006a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	e000e100 	.word	0xe000e100

08006a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4603      	mov	r3, r0
 8006a74:	6039      	str	r1, [r7, #0]
 8006a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	db0a      	blt.n	8006a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	490c      	ldr	r1, [pc, #48]	; (8006ab8 <__NVIC_SetPriority+0x4c>)
 8006a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8a:	0112      	lsls	r2, r2, #4
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	440b      	add	r3, r1
 8006a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a94:	e00a      	b.n	8006aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	4908      	ldr	r1, [pc, #32]	; (8006abc <__NVIC_SetPriority+0x50>)
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	3b04      	subs	r3, #4
 8006aa4:	0112      	lsls	r2, r2, #4
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	761a      	strb	r2, [r3, #24]
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	e000e100 	.word	0xe000e100
 8006abc:	e000ed00 	.word	0xe000ed00

08006ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b089      	sub	sp, #36	; 0x24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f1c3 0307 	rsb	r3, r3, #7
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	bf28      	it	cs
 8006ade:	2304      	movcs	r3, #4
 8006ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	2b06      	cmp	r3, #6
 8006ae8:	d902      	bls.n	8006af0 <NVIC_EncodePriority+0x30>
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	3b03      	subs	r3, #3
 8006aee:	e000      	b.n	8006af2 <NVIC_EncodePriority+0x32>
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006af4:	f04f 32ff 	mov.w	r2, #4294967295
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	fa02 f303 	lsl.w	r3, r2, r3
 8006afe:	43da      	mvns	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	401a      	ands	r2, r3
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b08:	f04f 31ff 	mov.w	r1, #4294967295
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b12:	43d9      	mvns	r1, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b18:	4313      	orrs	r3, r2
         );
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3724      	adds	r7, #36	; 0x24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
	...

08006b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b38:	d301      	bcc.n	8006b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e00f      	b.n	8006b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b3e:	4a0a      	ldr	r2, [pc, #40]	; (8006b68 <SysTick_Config+0x40>)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b46:	210f      	movs	r1, #15
 8006b48:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4c:	f7ff ff8e 	bl	8006a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <SysTick_Config+0x40>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b56:	4b04      	ldr	r3, [pc, #16]	; (8006b68 <SysTick_Config+0x40>)
 8006b58:	2207      	movs	r2, #7
 8006b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	e000e010 	.word	0xe000e010

08006b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff ff29 	bl	80069cc <__NVIC_SetPriorityGrouping>
}
 8006b7a:	bf00      	nop
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b086      	sub	sp, #24
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	4603      	mov	r3, r0
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b90:	f7ff ff40 	bl	8006a14 <__NVIC_GetPriorityGrouping>
 8006b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	6978      	ldr	r0, [r7, #20]
 8006b9c:	f7ff ff90 	bl	8006ac0 <NVIC_EncodePriority>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff ff5f 	bl	8006a6c <__NVIC_SetPriority>
}
 8006bae:	bf00      	nop
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff ff33 	bl	8006a30 <__NVIC_EnableIRQ>
}
 8006bca:	bf00      	nop
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff ffa4 	bl	8006b28 <SysTick_Config>
 8006be0:	4603      	mov	r3, r0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e08d      	b.n	8006d1a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	4b47      	ldr	r3, [pc, #284]	; (8006d24 <HAL_DMA_Init+0x138>)
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d80f      	bhi.n	8006c2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	4b45      	ldr	r3, [pc, #276]	; (8006d28 <HAL_DMA_Init+0x13c>)
 8006c12:	4413      	add	r3, r2
 8006c14:	4a45      	ldr	r2, [pc, #276]	; (8006d2c <HAL_DMA_Init+0x140>)
 8006c16:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1a:	091b      	lsrs	r3, r3, #4
 8006c1c:	009a      	lsls	r2, r3, #2
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a42      	ldr	r2, [pc, #264]	; (8006d30 <HAL_DMA_Init+0x144>)
 8006c26:	641a      	str	r2, [r3, #64]	; 0x40
 8006c28:	e00e      	b.n	8006c48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	4b40      	ldr	r3, [pc, #256]	; (8006d34 <HAL_DMA_Init+0x148>)
 8006c32:	4413      	add	r3, r2
 8006c34:	4a3d      	ldr	r2, [pc, #244]	; (8006d2c <HAL_DMA_Init+0x140>)
 8006c36:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3a:	091b      	lsrs	r3, r3, #4
 8006c3c:	009a      	lsls	r2, r3, #2
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a3c      	ldr	r2, [pc, #240]	; (8006d38 <HAL_DMA_Init+0x14c>)
 8006c46:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f9b6 	bl	800700c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ca8:	d102      	bne.n	8006cb0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006cc4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d010      	beq.n	8006cf0 <HAL_DMA_Init+0x104>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d80c      	bhi.n	8006cf0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f9d6 	bl	8007088 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	e008      	b.n	8006d02 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	40020407 	.word	0x40020407
 8006d28:	bffdfff8 	.word	0xbffdfff8
 8006d2c:	cccccccd 	.word	0xcccccccd
 8006d30:	40020000 	.word	0x40020000
 8006d34:	bffdfbf8 	.word	0xbffdfbf8
 8006d38:	40020400 	.word	0x40020400

08006d3c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_DMA_Start_IT+0x20>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e066      	b.n	8006e2a <HAL_DMA_Start_IT+0xee>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d155      	bne.n	8006e1c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0201 	bic.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f8fb 	bl	8006f90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f042 020e 	orr.w	r2, r2, #14
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	e00f      	b.n	8006dd4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0204 	bic.w	r2, r2, #4
 8006dc2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 020a 	orr.w	r2, r2, #10
 8006dd2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d007      	beq.n	8006df2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006df0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e08:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0201 	orr.w	r2, r2, #1
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e005      	b.n	8006e28 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006e24:	2302      	movs	r3, #2
 8006e26:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	2204      	movs	r2, #4
 8006e54:	409a      	lsls	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d026      	beq.n	8006eac <HAL_DMA_IRQHandler+0x7a>
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d021      	beq.n	8006eac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d107      	bne.n	8006e86 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0204 	bic.w	r2, r2, #4
 8006e84:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8a:	f003 021f 	and.w	r2, r3, #31
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	2104      	movs	r1, #4
 8006e94:	fa01 f202 	lsl.w	r2, r1, r2
 8006e98:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d071      	beq.n	8006f86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006eaa:	e06c      	b.n	8006f86 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	409a      	lsls	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d02e      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d029      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0320 	and.w	r3, r3, #32
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10b      	bne.n	8006ef0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 020a 	bic.w	r2, r2, #10
 8006ee6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef4:	f003 021f 	and.w	r2, r3, #31
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	2102      	movs	r1, #2
 8006efe:	fa01 f202 	lsl.w	r2, r1, r2
 8006f02:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d038      	beq.n	8006f86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006f1c:	e033      	b.n	8006f86 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f22:	f003 031f 	and.w	r3, r3, #31
 8006f26:	2208      	movs	r2, #8
 8006f28:	409a      	lsls	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d02a      	beq.n	8006f88 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d025      	beq.n	8006f88 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 020e 	bic.w	r2, r2, #14
 8006f4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f50:	f003 021f 	and.w	r2, r3, #31
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	2101      	movs	r1, #1
 8006f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8006f5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d004      	beq.n	8006f88 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
}
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006fa6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d004      	beq.n	8006fba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006fb8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbe:	f003 021f 	and.w	r2, r3, #31
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8006fcc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2b10      	cmp	r3, #16
 8006fdc:	d108      	bne.n	8006ff0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006fee:	e007      	b.n	8007000 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	60da      	str	r2, [r3, #12]
}
 8007000:	bf00      	nop
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	461a      	mov	r2, r3
 800701a:	4b16      	ldr	r3, [pc, #88]	; (8007074 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800701c:	429a      	cmp	r2, r3
 800701e:	d802      	bhi.n	8007026 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007020:	4b15      	ldr	r3, [pc, #84]	; (8007078 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	e001      	b.n	800702a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007026:	4b15      	ldr	r3, [pc, #84]	; (800707c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007028:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	3b08      	subs	r3, #8
 8007036:	4a12      	ldr	r2, [pc, #72]	; (8007080 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007038:	fba2 2303 	umull	r2, r3, r2, r3
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007044:	089b      	lsrs	r3, r3, #2
 8007046:	009a      	lsls	r2, r3, #2
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	4413      	add	r3, r2
 800704c:	461a      	mov	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a0b      	ldr	r2, [pc, #44]	; (8007084 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007056:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 031f 	and.w	r3, r3, #31
 800705e:	2201      	movs	r2, #1
 8007060:	409a      	lsls	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007066:	bf00      	nop
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	40020407 	.word	0x40020407
 8007078:	40020800 	.word	0x40020800
 800707c:	40020820 	.word	0x40020820
 8007080:	cccccccd 	.word	0xcccccccd
 8007084:	40020880 	.word	0x40020880

08007088 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4b0b      	ldr	r3, [pc, #44]	; (80070c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	461a      	mov	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a08      	ldr	r2, [pc, #32]	; (80070cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80070aa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	2201      	movs	r2, #1
 80070b6:	409a      	lsls	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80070bc:	bf00      	nop
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	1000823f 	.word	0x1000823f
 80070cc:	40020940 	.word	0x40020940

080070d0 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d12b      	bne.n	800713e <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d101      	bne.n	80070f4 <HAL_DMAEx_ConfigMuxSync+0x24>
 80070f0:	2302      	movs	r3, #2
 80070f2:	e025      	b.n	8007140 <HAL_DMAEx_ConfigMuxSync+0x70>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	b2d9      	uxtb	r1, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	061a      	lsls	r2, r3, #24
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	3b01      	subs	r3, #1
 8007110:	04db      	lsls	r3, r3, #19
 8007112:	431a      	orrs	r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	431a      	orrs	r2, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	7a1b      	ldrb	r3, [r3, #8]
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	431a      	orrs	r2, r3
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	7a5b      	ldrb	r3, [r3, #9]
 8007126:	025b      	lsls	r3, r3, #9
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712e:	430a      	orrs	r2, r1
 8007130:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	e000      	b.n	8007140 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
  }
}
 8007140:	4618      	mov	r0, r3
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715e:	4013      	ands	r3, r2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01a      	beq.n	800719a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800716e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007172:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800717c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007182:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d022      	beq.n	80071e8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ac:	4013      	ands	r3, r2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d01a      	beq.n	80071e8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80071ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	4798      	blx	r3
      }
    }
  }
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e033      	b.n	800726a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d106      	bne.n	800721c <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7fc f9da 	bl	80035d0 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f854 	bl	80072d0 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_TIMEOUT)
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f822 	bl	8007272 <FMAC_Reset>
 800722e:	4603      	mov	r3, r0
 8007230:	2b03      	cmp	r3, #3
 8007232:	d10c      	bne.n	800724e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007238:	f043 0210 	orr.w	r2, r3, #16
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	22a0      	movs	r2, #160	; 0xa0
 8007244:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	73fb      	strb	r3, [r7, #15]
 800724c:	e008      	b.n	8007260 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007268:	7bfb      	ldrb	r3, [r7, #15]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800727a:	f7fd fd75 	bl	8004d68 <HAL_GetTick>
 800727e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691a      	ldr	r2, [r3, #16]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800728e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007290:	e00f      	b.n	80072b2 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007292:	f7fd fd69 	bl	8004d68 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80072a0:	d907      	bls.n	80072b2 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e00a      	b.n	80072c8 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e8      	bne.n	8007292 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f807 	bl	80072ec <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f81b 	bl	800731a <FMAC_ResetOutputStateAndDataPointers>
}
 80072e4:	bf00      	nop
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2220      	movs	r2, #32
 8007338:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007356:	e15a      	b.n	800760e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	2101      	movs	r1, #1
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	fa01 f303 	lsl.w	r3, r1, r3
 8007364:	4013      	ands	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 814c 	beq.w	8007608 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d00b      	beq.n	8007390 <HAL_GPIO_Init+0x48>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d007      	beq.n	8007390 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007384:	2b11      	cmp	r3, #17
 8007386:	d003      	beq.n	8007390 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b12      	cmp	r3, #18
 800738e:	d130      	bne.n	80073f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	2203      	movs	r2, #3
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	43db      	mvns	r3, r3
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4013      	ands	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073c6:	2201      	movs	r2, #1
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	fa02 f303 	lsl.w	r3, r2, r3
 80073ce:	43db      	mvns	r3, r3
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4013      	ands	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	091b      	lsrs	r3, r3, #4
 80073dc:	f003 0201 	and.w	r2, r3, #1
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	fa02 f303 	lsl.w	r3, r2, r3
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	2203      	movs	r2, #3
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	43db      	mvns	r3, r3
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	4013      	ands	r3, r2
 8007408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	fa02 f303 	lsl.w	r3, r2, r3
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d003      	beq.n	8007432 <HAL_GPIO_Init+0xea>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b12      	cmp	r3, #18
 8007430:	d123      	bne.n	800747a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	08da      	lsrs	r2, r3, #3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	3208      	adds	r2, #8
 800743a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	220f      	movs	r2, #15
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	43db      	mvns	r3, r3
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4013      	ands	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	691a      	ldr	r2, [r3, #16]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	08da      	lsrs	r2, r3, #3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3208      	adds	r2, #8
 8007474:	6939      	ldr	r1, [r7, #16]
 8007476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	2203      	movs	r2, #3
 8007486:	fa02 f303 	lsl.w	r3, r2, r3
 800748a:	43db      	mvns	r3, r3
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	4013      	ands	r3, r2
 8007490:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f003 0203 	and.w	r2, r3, #3
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	fa02 f303 	lsl.w	r3, r2, r3
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 80a6 	beq.w	8007608 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074bc:	4b5b      	ldr	r3, [pc, #364]	; (800762c <HAL_GPIO_Init+0x2e4>)
 80074be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c0:	4a5a      	ldr	r2, [pc, #360]	; (800762c <HAL_GPIO_Init+0x2e4>)
 80074c2:	f043 0301 	orr.w	r3, r3, #1
 80074c6:	6613      	str	r3, [r2, #96]	; 0x60
 80074c8:	4b58      	ldr	r3, [pc, #352]	; (800762c <HAL_GPIO_Init+0x2e4>)
 80074ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074d4:	4a56      	ldr	r2, [pc, #344]	; (8007630 <HAL_GPIO_Init+0x2e8>)
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	089b      	lsrs	r3, r3, #2
 80074da:	3302      	adds	r3, #2
 80074dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f003 0303 	and.w	r3, r3, #3
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	220f      	movs	r2, #15
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	43db      	mvns	r3, r3
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4013      	ands	r3, r2
 80074f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80074fe:	d01f      	beq.n	8007540 <HAL_GPIO_Init+0x1f8>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a4c      	ldr	r2, [pc, #304]	; (8007634 <HAL_GPIO_Init+0x2ec>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d019      	beq.n	800753c <HAL_GPIO_Init+0x1f4>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a4b      	ldr	r2, [pc, #300]	; (8007638 <HAL_GPIO_Init+0x2f0>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d013      	beq.n	8007538 <HAL_GPIO_Init+0x1f0>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a4a      	ldr	r2, [pc, #296]	; (800763c <HAL_GPIO_Init+0x2f4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00d      	beq.n	8007534 <HAL_GPIO_Init+0x1ec>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a49      	ldr	r2, [pc, #292]	; (8007640 <HAL_GPIO_Init+0x2f8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d007      	beq.n	8007530 <HAL_GPIO_Init+0x1e8>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a48      	ldr	r2, [pc, #288]	; (8007644 <HAL_GPIO_Init+0x2fc>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d101      	bne.n	800752c <HAL_GPIO_Init+0x1e4>
 8007528:	2305      	movs	r3, #5
 800752a:	e00a      	b.n	8007542 <HAL_GPIO_Init+0x1fa>
 800752c:	2306      	movs	r3, #6
 800752e:	e008      	b.n	8007542 <HAL_GPIO_Init+0x1fa>
 8007530:	2304      	movs	r3, #4
 8007532:	e006      	b.n	8007542 <HAL_GPIO_Init+0x1fa>
 8007534:	2303      	movs	r3, #3
 8007536:	e004      	b.n	8007542 <HAL_GPIO_Init+0x1fa>
 8007538:	2302      	movs	r3, #2
 800753a:	e002      	b.n	8007542 <HAL_GPIO_Init+0x1fa>
 800753c:	2301      	movs	r3, #1
 800753e:	e000      	b.n	8007542 <HAL_GPIO_Init+0x1fa>
 8007540:	2300      	movs	r3, #0
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	f002 0203 	and.w	r2, r2, #3
 8007548:	0092      	lsls	r2, r2, #2
 800754a:	4093      	lsls	r3, r2
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007552:	4937      	ldr	r1, [pc, #220]	; (8007630 <HAL_GPIO_Init+0x2e8>)
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	089b      	lsrs	r3, r3, #2
 8007558:	3302      	adds	r3, #2
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007560:	4b39      	ldr	r3, [pc, #228]	; (8007648 <HAL_GPIO_Init+0x300>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	43db      	mvns	r3, r3
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	4013      	ands	r3, r2
 800756e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007584:	4a30      	ldr	r2, [pc, #192]	; (8007648 <HAL_GPIO_Init+0x300>)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800758a:	4b2f      	ldr	r3, [pc, #188]	; (8007648 <HAL_GPIO_Init+0x300>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	43db      	mvns	r3, r3
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4013      	ands	r3, r2
 8007598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80075ae:	4a26      	ldr	r2, [pc, #152]	; (8007648 <HAL_GPIO_Init+0x300>)
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075b4:	4b24      	ldr	r3, [pc, #144]	; (8007648 <HAL_GPIO_Init+0x300>)
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	43db      	mvns	r3, r3
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	4013      	ands	r3, r2
 80075c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80075d8:	4a1b      	ldr	r2, [pc, #108]	; (8007648 <HAL_GPIO_Init+0x300>)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80075de:	4b1a      	ldr	r3, [pc, #104]	; (8007648 <HAL_GPIO_Init+0x300>)
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	43db      	mvns	r3, r3
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	4013      	ands	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007602:	4a11      	ldr	r2, [pc, #68]	; (8007648 <HAL_GPIO_Init+0x300>)
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	3301      	adds	r3, #1
 800760c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	fa22 f303 	lsr.w	r3, r2, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	f47f ae9d 	bne.w	8007358 <HAL_GPIO_Init+0x10>
  }
}
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	40021000 	.word	0x40021000
 8007630:	40010000 	.word	0x40010000
 8007634:	48000400 	.word	0x48000400
 8007638:	48000800 	.word	0x48000800
 800763c:	48000c00 	.word	0x48000c00
 8007640:	48001000 	.word	0x48001000
 8007644:	48001400 	.word	0x48001400
 8007648:	40010400 	.word	0x40010400

0800764c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	807b      	strh	r3, [r7, #2]
 8007658:	4613      	mov	r3, r2
 800765a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800765c:	787b      	ldrb	r3, [r7, #1]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007662:	887a      	ldrh	r2, [r7, #2]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007668:	e002      	b.n	8007670 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800766a:	887a      	ldrh	r2, [r7, #2]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e0be      	b.n	800780c <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d02e      	beq.n	8007738 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a4d      	ldr	r2, [pc, #308]	; (8007814 <HAL_HRTIM_Init+0x198>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d10b      	bne.n	80076fc <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80076e4:	4b4c      	ldr	r3, [pc, #304]	; (8007818 <HAL_HRTIM_Init+0x19c>)
 80076e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e8:	4a4b      	ldr	r2, [pc, #300]	; (8007818 <HAL_HRTIM_Init+0x19c>)
 80076ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076ee:	6613      	str	r3, [r2, #96]	; 0x60
 80076f0:	4b49      	ldr	r3, [pc, #292]	; (8007818 <HAL_HRTIM_Init+0x19c>)
 80076f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800770a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007720:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	4313      	orrs	r3, r2
 800772e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7fc f9cb 	bl	8003ad4 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d012      	beq.n	8007770 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007758:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4313      	orrs	r3, r2
 8007766:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]
 8007784:	e03e      	b.n	8007804 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007786:	7dfa      	ldrb	r2, [r7, #23]
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	4613      	mov	r3, r2
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	440b      	add	r3, r1
 8007794:	3318      	adds	r3, #24
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800779a:	7dfa      	ldrb	r2, [r7, #23]
 800779c:	6879      	ldr	r1, [r7, #4]
 800779e:	4613      	mov	r3, r2
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	440b      	add	r3, r1
 80077a8:	331c      	adds	r3, #28
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80077ae:	7dfa      	ldrb	r2, [r7, #23]
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	4613      	mov	r3, r2
 80077b4:	00db      	lsls	r3, r3, #3
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	440b      	add	r3, r1
 80077bc:	3320      	adds	r3, #32
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80077c2:	7dfa      	ldrb	r2, [r7, #23]
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	4613      	mov	r3, r2
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	440b      	add	r3, r1
 80077d0:	3324      	adds	r3, #36	; 0x24
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80077d6:	7dfa      	ldrb	r2, [r7, #23]
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	4613      	mov	r3, r2
 80077dc:	00db      	lsls	r3, r3, #3
 80077de:	1a9b      	subs	r3, r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	440b      	add	r3, r1
 80077e4:	3328      	adds	r3, #40	; 0x28
 80077e6:	2200      	movs	r2, #0
 80077e8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80077ea:	7dfa      	ldrb	r2, [r7, #23]
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	4613      	mov	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	1a9b      	subs	r3, r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	3330      	adds	r3, #48	; 0x30
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	3301      	adds	r3, #1
 8007802:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	2b06      	cmp	r3, #6
 8007808:	d9bd      	bls.n	8007786 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40016800 	.word	0x40016800
 8007818:	40021000 	.word	0x40021000

0800781c <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8007830:	2302      	movs	r3, #2
 8007832:	e045      	b.n	80078c0 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784a:	d114      	bne.n	8007876 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0202 	bic.w	r2, r2, #2
 800785c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f042 0201 	orr.w	r2, r2, #1
 8007870:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8007874:	e01f      	b.n	80078b6 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f042 0202 	orr.w	r2, r2, #2
 8007886:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8007892:	f023 010c 	bic.w	r1, r3, #12
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0201 	orr.w	r2, r2, #1
 80078b2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80078d6:	f7fd fa47 	bl	8004d68 <HAL_GetTick>
 80078da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80078dc:	e014      	b.n	8007908 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e4:	d010      	beq.n	8007908 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80078e6:	f7fd fa3f 	bl	8004d68 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d302      	bcc.n	80078fc <HAL_HRTIM_PollForDLLCalibration+0x30>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d105      	bne.n	8007908 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2207      	movs	r2, #7
 8007900:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e011      	b.n	800792c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8007910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007918:	d1e1      	bne.n	80078de <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d101      	bne.n	8007950 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 800794c:	2302      	movs	r3, #2
 800794e:	e015      	b.n	800797c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b06      	cmp	r3, #6
 800795c:	d104      	bne.n	8007968 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f001 f97a 	bl	8008c5a <HRTIM_MasterBase_Config>
 8007966:	e004      	b.n	8007972 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	68b9      	ldr	r1, [r7, #8]
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f001 f9a3 	bl	8008cb8 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_HRTIM_FaultConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Fault,
                                        HRTIM_FaultCfgTypeDef* pFaultCfg)
{
 8007984:	b480      	push	{r7}
 8007986:	b089      	sub	sp, #36	; 0x24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_FAULTSOURCE(pFaultCfg->Source));
  assert_param(IS_HRTIM_FAULTPOLARITY(pFaultCfg->Polarity));
  assert_param(IS_HRTIM_FAULTFILTER(pFaultCfg->Filter));
  assert_param(IS_HRTIM_FAULTLOCK(pFaultCfg->Lock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b02      	cmp	r3, #2
 800799a:	d101      	bne.n	80079a0 <HAL_HRTIM_FaultConfig+0x1c>
  {
     return HAL_BUSY;
 800799c:	2302      	movs	r3, #2
 800799e:	e1aa      	b.n	8007cf6 <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d101      	bne.n	80079ae <HAL_HRTIM_FaultConfig+0x2a>
 80079aa:	2302      	movs	r3, #2
 80079ac:	e1a3      	b.n	8007cf6 <HAL_HRTIM_FaultConfig+0x372>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2202      	movs	r2, #2
 80079ba:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure fault channel */
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079c6:	61fb      	str	r3, [r7, #28]
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079d0:	61bb      	str	r3, [r7, #24]

  source0 =  (pFaultCfg->Source & 1U);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	617b      	str	r3, [r7, #20]
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	085b      	lsrs	r3, r3, #1
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	613b      	str	r3, [r7, #16]

  switch (Fault)
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	2b1f      	cmp	r3, #31
 80079ee:	f200 813f 	bhi.w	8007c70 <HAL_HRTIM_FaultConfig+0x2ec>
 80079f2:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <HAL_HRTIM_FaultConfig+0x74>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a79 	.word	0x08007a79
 80079fc:	08007ac9 	.word	0x08007ac9
 8007a00:	08007c71 	.word	0x08007c71
 8007a04:	08007b1f 	.word	0x08007b1f
 8007a08:	08007c71 	.word	0x08007c71
 8007a0c:	08007c71 	.word	0x08007c71
 8007a10:	08007c71 	.word	0x08007c71
 8007a14:	08007b75 	.word	0x08007b75
 8007a18:	08007c71 	.word	0x08007c71
 8007a1c:	08007c71 	.word	0x08007c71
 8007a20:	08007c71 	.word	0x08007c71
 8007a24:	08007c71 	.word	0x08007c71
 8007a28:	08007c71 	.word	0x08007c71
 8007a2c:	08007c71 	.word	0x08007c71
 8007a30:	08007c71 	.word	0x08007c71
 8007a34:	08007bcb 	.word	0x08007bcb
 8007a38:	08007c71 	.word	0x08007c71
 8007a3c:	08007c71 	.word	0x08007c71
 8007a40:	08007c71 	.word	0x08007c71
 8007a44:	08007c71 	.word	0x08007c71
 8007a48:	08007c71 	.word	0x08007c71
 8007a4c:	08007c71 	.word	0x08007c71
 8007a50:	08007c71 	.word	0x08007c71
 8007a54:	08007c71 	.word	0x08007c71
 8007a58:	08007c71 	.word	0x08007c71
 8007a5c:	08007c71 	.word	0x08007c71
 8007a60:	08007c71 	.word	0x08007c71
 8007a64:	08007c71 	.word	0x08007c71
 8007a68:	08007c71 	.word	0x08007c71
 8007a6c:	08007c71 	.word	0x08007c71
 8007a70:	08007c71 	.word	0x08007c71
 8007a74:	08007c1b 	.word	0x08007c1b
  {
  case HRTIM_FAULT_1:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007a7e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT1SRC_0_Pos);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	69fa      	ldr	r2, [r7, #28]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT1SRC_1);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a9e:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	041b      	lsls	r3, r3, #16
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007ab2:	69fa      	ldr	r2, [r7, #28]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	61fb      	str	r3, [r7, #28]
      break;
 8007ac6:	e0dc      	b.n	8007c82 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_2:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007ace:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	021b      	lsls	r3, r3, #8
 8007ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ada:	69fa      	ldr	r2, [r7, #28]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT2SRC_0_Pos);
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	029b      	lsls	r3, r3, #10
 8007ae4:	69fa      	ldr	r2, [r7, #28]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT2SRC_1);
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007af0:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	045b      	lsls	r3, r3, #17
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8007b06:	69fa      	ldr	r2, [r7, #28]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b16:	69fa      	ldr	r2, [r7, #28]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	61fb      	str	r3, [r7, #28]
      break;
 8007b1c:	e0b1      	b.n	8007c82 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_3:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
 8007b24:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	041b      	lsls	r3, r3, #16
 8007b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b30:	69fa      	ldr	r2, [r7, #28]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT3SRC_0_Pos);
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	049b      	lsls	r3, r3, #18
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT3SRC_1);
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b46:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	049b      	lsls	r3, r3, #18
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	041b      	lsls	r3, r3, #16
 8007b58:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8007b5c:	69fa      	ldr	r2, [r7, #28]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b6c:	69fa      	ldr	r2, [r7, #28]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	61fb      	str	r3, [r7, #28]
      break;
 8007b72:	e086      	b.n	8007c82 <HAL_HRTIM_FaultConfig+0x2fe>
     }

  case HRTIM_FAULT_4:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007b7a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	061b      	lsls	r3, r3, #24
 8007b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT4SRC_0_Pos);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	069b      	lsls	r3, r3, #26
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT4SRC_1);
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007b9c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	04db      	lsls	r3, r3, #19
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	061b      	lsls	r3, r3, #24
 8007bae:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	061b      	lsls	r3, r3, #24
 8007bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bc2:	69fa      	ldr	r2, [r7, #28]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	61fb      	str	r3, [r7, #28]
      break;
 8007bc8:	e05b      	b.n	8007c82 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_5:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC_0 | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007bd0:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007bf0:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT5SRC_1_Pos);
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	051b      	lsls	r3, r3, #20
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	61bb      	str	r3, [r7, #24]
      break;
 8007c18:	e033      	b.n	8007c82 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_6:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6P | HRTIM_FLTINR2_FLT6SRC_0 | HRTIM_FLTINR2_FLT6F | HRTIM_FLTINR2_FLT6LCK);
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007c20:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	029b      	lsls	r3, r3, #10
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c42:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT6SRC_1_Pos);
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	055b      	lsls	r3, r3, #21
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	61bb      	str	r3, [r7, #24]
      break;
 8007c6e:	e008      	b.n	8007c82 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2207      	movs	r2, #7
 8007c74:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007c80:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b07      	cmp	r3, #7
 8007c8c:	d101      	bne.n	8007c92 <HAL_HRTIM_FaultConfig+0x30e>
  {
     return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e031      	b.n	8007cf6 <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Update the HRTIM registers except LOCK bit */
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8007c9c:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cae:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  /* Update the HRTIM registers LOCK bit */
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	f248 0380 	movw	r3, #32896	; 0x8080
 8007cd8:	4013      	ands	r3, r2
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	6812      	ldr	r2, [r2, #0]
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3724      	adds	r7, #36	; 0x24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop

08007d04 <HAL_HRTIM_FaultPrescalerConfig>:
  * @note This function must be called before starting the timer and before
  *       enabling faults inputs
  */
HAL_StatusTypeDef HAL_HRTIM_FaultPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d101      	bne.n	8007d1e <HAL_HRTIM_FaultPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e025      	b.n	8007d6a <HAL_HRTIM_FaultPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_HRTIM_FaultPrescalerConfig+0x28>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e01e      	b.n	8007d6a <HAL_HRTIM_FaultPrescalerConfig+0x66>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d44:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
	...

08007d78 <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultBlankingConfigAndEnable(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t Fault,
                                                HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTBLANKNGMODE(pFaultBlkCfg->BlankingSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d101      	bne.n	8007d94 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1c>
  {
     return HAL_BUSY;
 8007d90:	2302      	movs	r3, #2
 8007d92:	e0d7      	b.n	8007f44 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x2a>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e0d0      	b.n	8007f44 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2202      	movs	r2, #2
 8007dae:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	3b01      	subs	r3, #1
 8007db6:	2b1f      	cmp	r3, #31
 8007db8:	f200 80aa 	bhi.w	8007f10 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x198>
 8007dbc:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x4c>)
 8007dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc2:	bf00      	nop
 8007dc4:	08007e45 	.word	0x08007e45
 8007dc8:	08007e67 	.word	0x08007e67
 8007dcc:	08007f11 	.word	0x08007f11
 8007dd0:	08007e89 	.word	0x08007e89
 8007dd4:	08007f11 	.word	0x08007f11
 8007dd8:	08007f11 	.word	0x08007f11
 8007ddc:	08007f11 	.word	0x08007f11
 8007de0:	08007eab 	.word	0x08007eab
 8007de4:	08007f11 	.word	0x08007f11
 8007de8:	08007f11 	.word	0x08007f11
 8007dec:	08007f11 	.word	0x08007f11
 8007df0:	08007f11 	.word	0x08007f11
 8007df4:	08007f11 	.word	0x08007f11
 8007df8:	08007f11 	.word	0x08007f11
 8007dfc:	08007f11 	.word	0x08007f11
 8007e00:	08007ecd 	.word	0x08007ecd
 8007e04:	08007f11 	.word	0x08007f11
 8007e08:	08007f11 	.word	0x08007f11
 8007e0c:	08007f11 	.word	0x08007f11
 8007e10:	08007f11 	.word	0x08007f11
 8007e14:	08007f11 	.word	0x08007f11
 8007e18:	08007f11 	.word	0x08007f11
 8007e1c:	08007f11 	.word	0x08007f11
 8007e20:	08007f11 	.word	0x08007f11
 8007e24:	08007f11 	.word	0x08007f11
 8007e28:	08007f11 	.word	0x08007f11
 8007e2c:	08007f11 	.word	0x08007f11
 8007e30:	08007f11 	.word	0x08007f11
 8007e34:	08007f11 	.word	0x08007f11
 8007e38:	08007f11 	.word	0x08007f11
 8007e3c:	08007f11 	.word	0x08007f11
 8007e40:	08007eef 	.word	0x08007eef
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007e4c:	f023 0203 	bic.w	r2, r3, #3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	431a      	orrs	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f042 0201 	orr.w	r2, r2, #1
 8007e60:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1BLKS | HRTIM_FLTINR3_FLT1BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT1BLKS_Pos) |
                  HRTIM_FLTINR3_FLT1BLKE));
       break;
 8007e64:	e05d      	b.n	8007f22 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007e6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	025b      	lsls	r3, r3, #9
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e82:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2BLKS | HRTIM_FLTINR3_FLT2BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT2BLKS_Pos) |
                  HRTIM_FLTINR3_FLT2BLKE));
       break;
 8007e86:	e04c      	b.n	8007f22 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	045b      	lsls	r3, r3, #17
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007ea4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3BLKS | HRTIM_FLTINR3_FLT3BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT3BLKS_Pos) |
                  HRTIM_FLTINR3_FLT3BLKE));
       break;
 8007ea8:	e03b      	b.n	8007f22 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007eb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	065b      	lsls	r3, r3, #25
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007ec6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4BLKS | HRTIM_FLTINR3_FLT4BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT4BLKS_Pos) |
                  HRTIM_FLTINR3_FLT4BLKE));
       break;
 8007eca:	e02a      	b.n	8007f22 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007ed4:	f023 0203 	bic.w	r2, r3, #3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0201 	orr.w	r2, r2, #1
 8007ee8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5BLKS | HRTIM_FLTINR4_FLT5BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT5BLKS_Pos) |
                  HRTIM_FLTINR4_FLT5BLKE));
      break;
 8007eec:	e019      	b.n	8007f22 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007ef6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	025b      	lsls	r3, r3, #9
 8007f00:	431a      	orrs	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f0a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6BLKS | HRTIM_FLTINR4_FLT6BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT6BLKS_Pos) |
                  HRTIM_FLTINR4_FLT6BLKE));
      break;
 8007f0e:	e008      	b.n	8007f22 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2207      	movs	r2, #7
 8007f14:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007f20:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b07      	cmp	r3, #7
 8007f2c:	d101      	bne.n	8007f32 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1ba>
  {
     return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e008      	b.n	8007f44 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_HRTIM_FaultCounterConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultCounterConfig(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t Fault,
                                               HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTCOUNTER(pFaultBlkCfg->Threshold));
  assert_param(IS_HRTIM_FAULTCOUNTERRST(pFaultBlkCfg->ResetMode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d101      	bne.n	8007f6c <HAL_HRTIM_FaultCounterConfig+0x1c>
  {
     return HAL_BUSY;
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e0e3      	b.n	8008134 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_HRTIM_FaultCounterConfig+0x2a>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e0dc      	b.n	8008134 <HAL_HRTIM_FaultCounterConfig+0x1e4>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2202      	movs	r2, #2
 8007f86:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	2b1f      	cmp	r3, #31
 8007f90:	f200 80b6 	bhi.w	8008100 <HAL_HRTIM_FaultCounterConfig+0x1b0>
 8007f94:	a201      	add	r2, pc, #4	; (adr r2, 8007f9c <HAL_HRTIM_FaultCounterConfig+0x4c>)
 8007f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9a:	bf00      	nop
 8007f9c:	0800801d 	.word	0x0800801d
 8007fa0:	08008043 	.word	0x08008043
 8007fa4:	08008101 	.word	0x08008101
 8007fa8:	08008069 	.word	0x08008069
 8007fac:	08008101 	.word	0x08008101
 8007fb0:	08008101 	.word	0x08008101
 8007fb4:	08008101 	.word	0x08008101
 8007fb8:	0800808f 	.word	0x0800808f
 8007fbc:	08008101 	.word	0x08008101
 8007fc0:	08008101 	.word	0x08008101
 8007fc4:	08008101 	.word	0x08008101
 8007fc8:	08008101 	.word	0x08008101
 8007fcc:	08008101 	.word	0x08008101
 8007fd0:	08008101 	.word	0x08008101
 8007fd4:	08008101 	.word	0x08008101
 8007fd8:	080080b5 	.word	0x080080b5
 8007fdc:	08008101 	.word	0x08008101
 8007fe0:	08008101 	.word	0x08008101
 8007fe4:	08008101 	.word	0x08008101
 8007fe8:	08008101 	.word	0x08008101
 8007fec:	08008101 	.word	0x08008101
 8007ff0:	08008101 	.word	0x08008101
 8007ff4:	08008101 	.word	0x08008101
 8007ff8:	08008101 	.word	0x08008101
 8007ffc:	08008101 	.word	0x08008101
 8008000:	08008101 	.word	0x08008101
 8008004:	08008101 	.word	0x08008101
 8008008:	08008101 	.word	0x08008101
 800800c:	08008101 	.word	0x08008101
 8008010:	08008101 	.word	0x08008101
 8008014:	08008101 	.word	0x08008101
 8008018:	080080db 	.word	0x080080db
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008024:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	009a      	lsls	r2, r3, #2
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	01db      	lsls	r3, r3, #7
 8008034:	431a      	orrs	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1RSTM | HRTIM_FLTINR3_FLT1CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT1CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT1RSTM_Pos));
       break;
 8008040:	e067      	b.n	8008112 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800804a:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	029a      	lsls	r2, r3, #10
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	03db      	lsls	r3, r3, #15
 800805a:	431a      	orrs	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2RSTM | HRTIM_FLTINR3_FLT2CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT2CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT2RSTM_Pos));
       break;
 8008066:	e054      	b.n	8008112 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008070:	f423 013c 	bic.w	r1, r3, #12320768	; 0xbc0000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	049a      	lsls	r2, r3, #18
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	05db      	lsls	r3, r3, #23
 8008080:	431a      	orrs	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3RSTM | HRTIM_FLTINR3_FLT3CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT3CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT3RSTM_Pos));
       break;
 800808c:	e041      	b.n	8008112 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008096:	f023 413c 	bic.w	r1, r3, #3154116608	; 0xbc000000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	069a      	lsls	r2, r3, #26
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	07db      	lsls	r3, r3, #31
 80080a6:	431a      	orrs	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4RSTM | HRTIM_FLTINR3_FLT4CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT4CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT4RSTM_Pos));
       break;
 80080b2:	e02e      	b.n	8008112 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_5:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80080bc:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	009a      	lsls	r2, r3, #2
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	01db      	lsls	r3, r3, #7
 80080cc:	431a      	orrs	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5RSTM | HRTIM_FLTINR4_FLT5CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT5CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT5RSTM_Pos));
       break;
 80080d8:	e01b      	b.n	8008112 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_6:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80080e2:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	029a      	lsls	r2, r3, #10
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	03db      	lsls	r3, r3, #15
 80080f2:	431a      	orrs	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6RSTM | HRTIM_FLTINR4_FLT6CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT6CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT6RSTM_Pos));
       break;
 80080fe:	e008      	b.n	8008112 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2207      	movs	r2, #7
 8008104:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8008110:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b07      	cmp	r3, #7
 800811c:	d101      	bne.n	8008122 <HAL_HRTIM_FaultCounterConfig+0x1d2>
  {
     return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e008      	b.n	8008134 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_HRTIM_FaultModeCtl>:
  * @retval None
  */
void HAL_HRTIM_FaultModeCtl(HRTIM_HandleTypeDef * hhrtim,
                        uint32_t Faults,
                        uint32_t Enable)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Faults));
  assert_param(IS_HRTIM_FAULTMODECTL(Enable));

  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00d      	beq.n	8008172 <HAL_HRTIM_FaultModeCtl+0x32>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800815e:	f023 0101 	bic.w	r1, r3, #1
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f003 0201 	and.w	r2, r3, #1
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f003 0302 	and.w	r3, r3, #2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00e      	beq.n	800819a <HAL_HRTIM_FaultModeCtl+0x5a>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008184:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	430a      	orrs	r2, r1
 8008196:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00e      	beq.n	80081c2 <HAL_HRTIM_FaultModeCtl+0x82>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	041b      	lsls	r3, r3, #16
 80081b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f003 0308 	and.w	r3, r3, #8
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00e      	beq.n	80081ea <HAL_HRTIM_FaultModeCtl+0xaa>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081d4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	061b      	lsls	r3, r3, #24
 80081dc:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	430a      	orrs	r2, r1
 80081e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f003 0310 	and.w	r3, r3, #16
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00d      	beq.n	8008210 <HAL_HRTIM_FaultModeCtl+0xd0>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081fc:	f023 0101 	bic.w	r1, r3, #1
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f003 0201 	and.w	r2, r3, #1
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00e      	beq.n	8008238 <HAL_HRTIM_FaultModeCtl+0xf8>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008222:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
}
 8008238:	bf00      	nop
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b02      	cmp	r3, #2
 800825a:	d101      	bne.n	8008260 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 800825c:	2302      	movs	r3, #2
 800825e:	e05f      	b.n	8008320 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800826a:	2302      	movs	r3, #2
 800826c:	e058      	b.n	8008320 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2202      	movs	r2, #2
 800827a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b06      	cmp	r3, #6
 8008282:	d104      	bne.n	800828e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8008284:	6879      	ldr	r1, [r7, #4]
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f000 fd56 	bl	8008d38 <HRTIM_MasterWaveform_Config>
 800828c:	e004      	b.n	8008298 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	68b9      	ldr	r1, [r7, #8]
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 fdee 	bl	8008e74 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6819      	ldr	r1, [r3, #0]
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	4613      	mov	r3, r2
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	1a9b      	subs	r3, r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4403      	add	r3, r0
 80082aa:	3320      	adds	r3, #32
 80082ac:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6859      	ldr	r1, [r3, #4]
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	4613      	mov	r3, r2
 80082b8:	00db      	lsls	r3, r3, #3
 80082ba:	1a9b      	subs	r3, r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4403      	add	r3, r0
 80082c0:	3324      	adds	r3, #36	; 0x24
 80082c2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6899      	ldr	r1, [r3, #8]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	4613      	mov	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	1a9b      	subs	r3, r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4403      	add	r3, r0
 80082d6:	3328      	adds	r3, #40	; 0x28
 80082d8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68d9      	ldr	r1, [r3, #12]
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	4613      	mov	r3, r2
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	1a9b      	subs	r3, r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4403      	add	r3, r0
 80082ec:	332c      	adds	r3, #44	; 0x2c
 80082ee:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6919      	ldr	r1, [r3, #16]
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	4613      	mov	r3, r2
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	1a9b      	subs	r3, r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4403      	add	r3, r0
 8008302:	3330      	adds	r3, #48	; 0x30
 8008304:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8008306:	68b9      	ldr	r1, [r7, #8]
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f001 f8fb 	bl	8009504 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d101      	bne.n	8008344 <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 8008340:	2302      	movs	r3, #2
 8008342:	e020      	b.n	8008386 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800834a:	2b01      	cmp	r3, #1
 800834c:	d101      	bne.n	8008352 <HAL_HRTIM_WaveformTimerControl+0x2a>
 800834e:	2302      	movs	r3, #2
 8008350:	e019      	b.n	8008386 <HAL_HRTIM_WaveformTimerControl+0x5e>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2202      	movs	r2, #2
 800835e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 ff18 	bl	800919c <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800836c:	68b9      	ldr	r1, [r7, #8]
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f001 f8c8 	bl	8009504 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d101      	bne.n	80083ae <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80083aa:	2302      	movs	r3, #2
 80083ac:	e157      	b.n	800865e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80083b8:	2302      	movs	r3, #2
 80083ba:	e150      	b.n	800865e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b06      	cmp	r3, #6
 80083d0:	d140      	bne.n	8008454 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	2b07      	cmp	r3, #7
 80083d8:	d82a      	bhi.n	8008430 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80083da:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	08008401 	.word	0x08008401
 80083e4:	0800840d 	.word	0x0800840d
 80083e8:	08008431 	.word	0x08008431
 80083ec:	08008419 	.word	0x08008419
 80083f0:	08008431 	.word	0x08008431
 80083f4:	08008431 	.word	0x08008431
 80083f8:	08008431 	.word	0x08008431
 80083fc:	08008425 	.word	0x08008425
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	6812      	ldr	r2, [r2, #0]
 8008408:	61da      	str	r2, [r3, #28]
        break;
 800840a:	e01a      	b.n	8008442 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	6812      	ldr	r2, [r2, #0]
 8008414:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8008416:	e014      	b.n	8008442 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	6812      	ldr	r2, [r2, #0]
 8008420:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8008422:	e00e      	b.n	8008442 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	6812      	ldr	r2, [r2, #0]
 800842c:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800842e:	e008      	b.n	8008442 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2207      	movs	r2, #7
 8008434:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8008440:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b07      	cmp	r3, #7
 800844c:	f040 80fe 	bne.w	800864c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e104      	b.n	800865e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3b01      	subs	r3, #1
 8008458:	2b07      	cmp	r3, #7
 800845a:	f200 80e3 	bhi.w	8008624 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800845e:	a201      	add	r2, pc, #4	; (adr r2, 8008464 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008464:	08008485 	.word	0x08008485
 8008468:	08008499 	.word	0x08008499
 800846c:	08008625 	.word	0x08008625
 8008470:	08008555 	.word	0x08008555
 8008474:	08008625 	.word	0x08008625
 8008478:	08008625 	.word	0x08008625
 800847c:	08008625 	.word	0x08008625
 8008480:	08008569 	.word	0x08008569
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6819      	ldr	r1, [r3, #0]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	01db      	lsls	r3, r3, #7
 8008490:	440b      	add	r3, r1
 8008492:	339c      	adds	r3, #156	; 0x9c
 8008494:	601a      	str	r2, [r3, #0]
        break;
 8008496:	e0d1      	b.n	800863c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6819      	ldr	r1, [r3, #0]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	01db      	lsls	r3, r3, #7
 80084a4:	440b      	add	r3, r1
 80084a6:	33a4      	adds	r3, #164	; 0xa4
 80084a8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d03f      	beq.n	8008532 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	3301      	adds	r3, #1
 80084ba:	01db      	lsls	r3, r3, #7
 80084bc:	4413      	add	r3, r2
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	6811      	ldr	r1, [r2, #0]
 80084c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	3301      	adds	r3, #1
 80084cc:	01db      	lsls	r3, r3, #7
 80084ce:	440b      	add	r3, r1
 80084d0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	3301      	adds	r3, #1
 80084da:	01db      	lsls	r3, r3, #7
 80084dc:	4413      	add	r3, r2
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	68f9      	ldr	r1, [r7, #12]
 80084e6:	6809      	ldr	r1, [r1, #0]
 80084e8:	431a      	orrs	r2, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	3301      	adds	r3, #1
 80084ee:	01db      	lsls	r3, r3, #7
 80084f0:	440b      	add	r3, r1
 80084f2:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084fc:	d109      	bne.n	8008512 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6819      	ldr	r1, [r3, #0]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	01db      	lsls	r3, r3, #7
 800850a:	440b      	add	r3, r1
 800850c:	339c      	adds	r3, #156	; 0x9c
 800850e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8008510:	e091      	b.n	8008636 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800851a:	f040 808c 	bne.w	8008636 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6819      	ldr	r1, [r3, #0]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	01db      	lsls	r3, r3, #7
 800852a:	440b      	add	r3, r1
 800852c:	33a8      	adds	r3, #168	; 0xa8
 800852e:	601a      	str	r2, [r3, #0]
         break;
 8008530:	e081      	b.n	8008636 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	3301      	adds	r3, #1
 800853a:	01db      	lsls	r3, r3, #7
 800853c:	4413      	add	r3, r2
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	6811      	ldr	r1, [r2, #0]
 8008544:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	3301      	adds	r3, #1
 800854c:	01db      	lsls	r3, r3, #7
 800854e:	440b      	add	r3, r1
 8008550:	601a      	str	r2, [r3, #0]
         break;
 8008552:	e070      	b.n	8008636 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6819      	ldr	r1, [r3, #0]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	01db      	lsls	r3, r3, #7
 8008560:	440b      	add	r3, r1
 8008562:	33a8      	adds	r3, #168	; 0xa8
 8008564:	601a      	str	r2, [r3, #0]
        break;
 8008566:	e069      	b.n	800863c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6819      	ldr	r1, [r3, #0]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	01db      	lsls	r3, r3, #7
 8008574:	440b      	add	r3, r1
 8008576:	33ac      	adds	r3, #172	; 0xac
 8008578:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d03f      	beq.n	8008602 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	3301      	adds	r3, #1
 800858a:	01db      	lsls	r3, r3, #7
 800858c:	4413      	add	r3, r2
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	6811      	ldr	r1, [r2, #0]
 8008594:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	3301      	adds	r3, #1
 800859c:	01db      	lsls	r3, r3, #7
 800859e:	440b      	add	r3, r1
 80085a0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	3301      	adds	r3, #1
 80085aa:	01db      	lsls	r3, r3, #7
 80085ac:	4413      	add	r3, r2
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	68f9      	ldr	r1, [r7, #12]
 80085b8:	6809      	ldr	r1, [r1, #0]
 80085ba:	431a      	orrs	r2, r3
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	3301      	adds	r3, #1
 80085c0:	01db      	lsls	r3, r3, #7
 80085c2:	440b      	add	r3, r1
 80085c4:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ce:	d109      	bne.n	80085e4 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6819      	ldr	r1, [r3, #0]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	01db      	lsls	r3, r3, #7
 80085dc:	440b      	add	r3, r1
 80085de:	339c      	adds	r3, #156	; 0x9c
 80085e0:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80085e2:	e02a      	b.n	800863a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085ec:	d125      	bne.n	800863a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6819      	ldr	r1, [r3, #0]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	689a      	ldr	r2, [r3, #8]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	01db      	lsls	r3, r3, #7
 80085fa:	440b      	add	r3, r1
 80085fc:	33a8      	adds	r3, #168	; 0xa8
 80085fe:	601a      	str	r2, [r3, #0]
         break;
 8008600:	e01b      	b.n	800863a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	3301      	adds	r3, #1
 800860a:	01db      	lsls	r3, r3, #7
 800860c:	4413      	add	r3, r2
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	6811      	ldr	r1, [r2, #0]
 8008614:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	3301      	adds	r3, #1
 800861c:	01db      	lsls	r3, r3, #7
 800861e:	440b      	add	r3, r1
 8008620:	601a      	str	r2, [r3, #0]
         break;
 8008622:	e00a      	b.n	800863a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2207      	movs	r2, #7
 8008628:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8008634:	e002      	b.n	800863c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008636:	bf00      	nop
 8008638:	e000      	b.n	800863c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800863a:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b07      	cmp	r3, #7
 8008646:	d101      	bne.n	800864c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e008      	b.n	800865e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop

0800866c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b02      	cmp	r3, #2
 8008684:	d101      	bne.n	800868a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8008686:	2302      	movs	r3, #2
 8008688:	e01d      	b.n	80086c6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8008694:	2302      	movs	r3, #2
 8008696:	e016      	b.n	80086c6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2202      	movs	r2, #2
 80086a4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	68b9      	ldr	r1, [r7, #8]
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 fdd4 	bl	800925c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d101      	bne.n	80086e6 <HAL_HRTIM_WaveformOutputStart+0x18>
 80086e2:	2302      	movs	r3, #2
 80086e4:	e01a      	b.n	800871c <HAL_HRTIM_WaveformOutputStart+0x4e>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2202      	movs	r2, #2
 80086f2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	430a      	orrs	r2, r1
 8008706:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008738:	2b01      	cmp	r3, #1
 800873a:	d101      	bne.n	8008740 <HAL_HRTIM_WaveformOutputStop+0x18>
 800873c:	2302      	movs	r3, #2
 800873e:	e01a      	b.n	8008776 <HAL_HRTIM_WaveformOutputStop+0x4e>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
	...

08008784 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8008798:	2302      	movs	r3, #2
 800879a:	e05b      	b.n	8008854 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d009      	beq.n	80087e0 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68d9      	ldr	r1, [r3, #12]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]
 80087e4:	e022      	b.n	800882c <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	4a1d      	ldr	r2, [pc, #116]	; (8008860 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 80087ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	4013      	ands	r3, r2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d017      	beq.n	8008826 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	01db      	lsls	r3, r3, #7
 80087fe:	4413      	add	r3, r2
 8008800:	338c      	adds	r3, #140	; 0x8c
 8008802:	6818      	ldr	r0, [r3, #0]
 8008804:	7bfa      	ldrb	r2, [r7, #15]
 8008806:	6879      	ldr	r1, [r7, #4]
 8008808:	4613      	mov	r3, r2
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	1a9b      	subs	r3, r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	440b      	add	r3, r1
 8008812:	3320      	adds	r3, #32
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6819      	ldr	r1, [r3, #0]
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	4302      	orrs	r2, r0
 800881e:	01db      	lsls	r3, r3, #7
 8008820:	440b      	add	r3, r1
 8008822:	338c      	adds	r3, #140	; 0x8c
 8008824:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	3301      	adds	r3, #1
 800882a:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	2b05      	cmp	r3, #5
 8008830:	d9d9      	bls.n	80087e6 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6819      	ldr	r1, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;}
 8008852:	2300      	movs	r3, #0
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	20000010 	.word	0x20000010

08008864 <HAL_HRTIM_WaveformCountStart_DMA>:
  *       size of each DMA transfer are specified at timer configuration time
  *       (see HAL_HRTIM_WaveformTimerConfig)
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_DMA(HRTIM_HandleTypeDef * hhrtim,
                                                     uint32_t Timers)
{
 8008864:	b590      	push	{r4, r7, lr}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  DMA_HandleTypeDef * hdma;

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  if((hhrtim->State == HAL_HRTIM_STATE_BUSY))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b02      	cmp	r3, #2
 8008878:	d101      	bne.n	800887e <HAL_HRTIM_WaveformCountStart_DMA+0x1a>
  {
     return HAL_BUSY;
 800887a:	2302      	movs	r3, #2
 800887c:	e0d2      	b.n	8008a24 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
  }

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2202      	movs	r2, #2
 8008882:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800888c:	2b01      	cmp	r3, #1
 800888e:	d101      	bne.n	8008894 <HAL_HRTIM_WaveformCountStart_DMA+0x30>
 8008890:	2302      	movs	r3, #2
 8008892:	e0c7      	b.n	8008a24 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d033      	beq.n	800890e <HAL_HRTIM_WaveformCountStart_DMA+0xaa>
      (hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMARequests != 0U))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d02e      	beq.n	800890e <HAL_HRTIM_WaveformCountStart_DMA+0xaa>
  {
      /* Set the DMA error callback */
      hhrtim->hdmaMaster->XferErrorCallback = HRTIM_DMAError ;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088b6:	4a5d      	ldr	r2, [pc, #372]	; (8008a2c <HAL_HRTIM_WaveformCountStart_DMA+0x1c8>)
 80088b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA transfer completed callback */
      hhrtim->hdmaMaster->XferCpltCallback = HRTIM_DMAMasterCplt;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088c0:	4a5b      	ldr	r2, [pc, #364]	; (8008a30 <HAL_HRTIM_WaveformCountStart_DMA+0x1cc>)
 80088c2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(hhrtim->hdmaMaster,
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80088dc:	f7fe fa2e 	bl	8006d3c <HAL_DMA_Start_IT>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d009      	beq.n	80088fa <HAL_HRTIM_WaveformCountStart_DMA+0x96>
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMASrcAddress,
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMADstAddress,
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMASize) != HAL_OK)
    {
            hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2207      	movs	r2, #7
 80088ea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

            /* Process Unlocked */
            __HAL_UNLOCK(hhrtim);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

            return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e094      	b.n	8008a24 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
        }

      /* Enable the timer DMA request */
      __HAL_HRTIM_MASTER_ENABLE_DMA(hhrtim,
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68d9      	ldr	r1, [r3, #12]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	60da      	str	r2, [r3, #12]
                                   hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMARequests);
  }

  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]
 8008912:	e073      	b.n	80089fc <HAL_HRTIM_WaveformCountStart_DMA+0x198>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	4a47      	ldr	r2, [pc, #284]	; (8008a34 <HAL_HRTIM_WaveformCountStart_DMA+0x1d0>)
 8008918:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	4013      	ands	r3, r2
 8008920:	2b00      	cmp	r3, #0
 8008922:	d068      	beq.n	80089f6 <HAL_HRTIM_WaveformCountStart_DMA+0x192>
         (hhrtim->TimerParam[timer_idx].DMARequests != 0U))
 8008924:	7bfa      	ldrb	r2, [r7, #15]
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	4613      	mov	r3, r2
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	1a9b      	subs	r3, r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	440b      	add	r3, r1
 8008932:	3324      	adds	r3, #36	; 0x24
 8008934:	681b      	ldr	r3, [r3, #0]
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 8008936:	2b00      	cmp	r3, #0
 8008938:	d05d      	beq.n	80089f6 <HAL_HRTIM_WaveformCountStart_DMA+0x192>
    {
      /* Get the timer DMA handler */
      hdma = HRTIM_GetDMAHandleFromTimerIdx(hhrtim, timer_idx);
 800893a:	7bfb      	ldrb	r3, [r7, #15]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fd4a 	bl	80093d8 <HRTIM_GetDMAHandleFromTimerIdx>
 8008944:	60b8      	str	r0, [r7, #8]

      if (hdma == NULL)
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d109      	bne.n	8008960 <HAL_HRTIM_WaveformCountStart_DMA+0xfc>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2207      	movs	r2, #7
 8008950:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e061      	b.n	8008a24 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
      }

       /* Set the DMA error callback */
      hdma->XferErrorCallback = HRTIM_DMAError ;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4a32      	ldr	r2, [pc, #200]	; (8008a2c <HAL_HRTIM_WaveformCountStart_DMA+0x1c8>)
 8008964:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA transfer completed callback */
      hdma->XferCpltCallback = HRTIM_DMATimerxCplt;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	4a33      	ldr	r2, [pc, #204]	; (8008a38 <HAL_HRTIM_WaveformCountStart_DMA+0x1d4>)
 800896a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(hdma,
 800896c:	7bfa      	ldrb	r2, [r7, #15]
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	4613      	mov	r3, r2
 8008972:	00db      	lsls	r3, r3, #3
 8008974:	1a9b      	subs	r3, r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	3328      	adds	r3, #40	; 0x28
 800897c:	6818      	ldr	r0, [r3, #0]
 800897e:	7bfa      	ldrb	r2, [r7, #15]
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	00db      	lsls	r3, r3, #3
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	332c      	adds	r3, #44	; 0x2c
 800898e:	681c      	ldr	r4, [r3, #0]
 8008990:	7bfa      	ldrb	r2, [r7, #15]
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	4613      	mov	r3, r2
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	1a9b      	subs	r3, r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	440b      	add	r3, r1
 800899e:	3330      	adds	r3, #48	; 0x30
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4622      	mov	r2, r4
 80089a4:	4601      	mov	r1, r0
 80089a6:	68b8      	ldr	r0, [r7, #8]
 80089a8:	f7fe f9c8 	bl	8006d3c <HAL_DMA_Start_IT>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d009      	beq.n	80089c6 <HAL_HRTIM_WaveformCountStart_DMA+0x162>
                       hhrtim->TimerParam[timer_idx].DMASrcAddress,
                       hhrtim->TimerParam[timer_idx].DMADstAddress,
                       hhrtim->TimerParam[timer_idx].DMASize) != HAL_OK)
    {
              hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2207      	movs	r2, #7
 80089b6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

              /* Process Unlocked */
              __HAL_UNLOCK(hhrtim);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

              return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e02e      	b.n	8008a24 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
        }

      /* Enable the timer DMA request */
      __HAL_HRTIM_TIMER_ENABLE_DMA(hhrtim,
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	01db      	lsls	r3, r3, #7
 80089ce:	4413      	add	r3, r2
 80089d0:	338c      	adds	r3, #140	; 0x8c
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	7bfa      	ldrb	r2, [r7, #15]
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	4613      	mov	r3, r2
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	1a9b      	subs	r3, r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	440b      	add	r3, r1
 80089e2:	3324      	adds	r3, #36	; 0x24
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6819      	ldr	r1, [r3, #0]
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	4302      	orrs	r2, r0
 80089ee:	01db      	lsls	r3, r3, #7
 80089f0:	440b      	add	r3, r1
 80089f2:	338c      	adds	r3, #140	; 0x8c
 80089f4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	3301      	adds	r3, #1
 80089fa:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	2b05      	cmp	r3, #5
 8008a00:	d988      	bls.n	8008914 <HAL_HRTIM_WaveformCountStart_DMA+0xb0>
                                   hhrtim->TimerParam[timer_idx].DMARequests);
    }
  }

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, Timers);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6819      	ldr	r1, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd90      	pop	{r4, r7, pc}
 8008a2c:	0800a119 	.word	0x0800a119
 8008a30:	08009e3b 	.word	0x08009e3b
 8008a34:	20000010 	.word	0x20000010
 8008a38:	08009ef5 	.word	0x08009ef5

08008a3c <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2bff      	cmp	r3, #255	; 0xff
 8008a4a:	d103      	bne.n	8008a54 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fdc7 	bl	80095e0 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8008a52:	e00a      	b.n	8008a6a <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2b06      	cmp	r3, #6
 8008a58:	d103      	bne.n	8008a62 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fe93 	bl	8009786 <HRTIM_Master_ISR>
}
 8008a60:	e003      	b.n	8008a6a <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 ff9a 	bl	800999e <HRTIM_Timer_ISR>
}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8008a7a:	bf00      	nop
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8008aa2:	bf00      	nop
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 8008ab6:	bf00      	nop
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 8008ade:	bf00      	nop
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8008b06:	bf00      	nop
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b083      	sub	sp, #12
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8008b5e:	bf00      	nop
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8008bb6:	bf00      	nop
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b083      	sub	sp, #12
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8008c0e:	bf00      	nop
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <HAL_HRTIM_ErrorCallback>:
  * @brief  Callback function invoked when a DMA error occurs
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_ErrorCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_ErrorCallback could be implemented in the user file
   */
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f023 0307 	bic.w	r3, r3, #7
 8008c72:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f023 0318 	bic.w	r3, r3, #24
 8008c84:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	6812      	ldr	r2, [r2, #0]
 8008ca0:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	6852      	ldr	r2, [r2, #4]
 8008caa:	619a      	str	r2, [r3, #24]
}
 8008cac:	bf00      	nop
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b087      	sub	sp, #28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	01db      	lsls	r3, r3, #7
 8008cce:	4413      	add	r3, r2
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f023 0307 	bic.w	r3, r3, #7
 8008cda:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f023 0318 	bic.w	r3, r3, #24
 8008cec:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	01db      	lsls	r3, r3, #7
 8008d02:	4413      	add	r3, r2
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6819      	ldr	r1, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	01db      	lsls	r3, r3, #7
 8008d14:	440b      	add	r3, r1
 8008d16:	3394      	adds	r3, #148	; 0x94
 8008d18:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6819      	ldr	r1, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	01db      	lsls	r3, r3, #7
 8008d26:	440b      	add	r3, r1
 8008d28:	3398      	adds	r3, #152	; 0x98
 8008d2a:	601a      	str	r2, [r3, #0]
}
 8008d2c:	bf00      	nop
 8008d2e:	371c      	adds	r7, #28
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008d52:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0320 	bic.w	r3, r3, #32
 8008d5a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d6c:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	2b20      	cmp	r3, #32
 8008d74:	d003      	beq.n	8008d7e <HRTIM_MasterWaveform_Config+0x46>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d108      	bne.n	8008d90 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d84:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f043 0320 	orr.w	r3, r3, #32
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	e021      	b.n	8008dd4 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d108      	bne.n	8008daa <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d9e:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	e014      	b.n	8008dd4 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	2b04      	cmp	r3, #4
 8008db0:	d108      	bne.n	8008dc4 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db8:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc0:	60fb      	str	r3, [r7, #12]
 8008dc2:	e007      	b.n	8008dd4 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f023 0320 	bic.w	r3, r3, #32
 8008dca:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dda:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dec:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008dfe:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008e10:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008e22:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e36:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e48:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008e66:	bf00      	nop
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
	...

08008e74 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b08b      	sub	sp, #44	; 0x2c
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	3301      	adds	r3, #1
 8008e88:	01db      	lsls	r3, r3, #7
 8008e8a:	4413      	add	r3, r2
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	6811      	ldr	r1, [r2, #0]
 8008e92:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	01db      	lsls	r3, r3, #7
 8008e9c:	440b      	add	r3, r1
 8008e9e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	01db      	lsls	r3, r3, #7
 8008eaa:	4413      	add	r3, r2
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	01db      	lsls	r3, r3, #7
 8008eb8:	4413      	add	r3, r2
 8008eba:	33e8      	adds	r3, #232	; 0xe8
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	01db      	lsls	r3, r3, #7
 8008ec8:	4413      	add	r3, r2
 8008eca:	33e4      	adds	r3, #228	; 0xe4
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008ed8:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	f023 0320 	bic.w	r3, r3, #32
 8008ee0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	d003      	beq.n	8008efc <HRTIM_TimingUnitWaveform_Config+0x88>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d108      	bne.n	8008f0e <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8008f02:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	f043 0320 	orr.w	r3, r3, #32
 8008f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f0c:	e021      	b.n	8008f52 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d108      	bne.n	8008f28 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
 8008f26:	e014      	b.n	8008f52 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	2b04      	cmp	r3, #4
 8008f2e:	d108      	bne.n	8008f42 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f40:	e007      	b.n	8008f52 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	f023 0320 	bic.w	r3, r3, #32
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f58:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f60:	4313      	orrs	r3, r2
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f72:	4313      	orrs	r3, r2
 8008f74:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008f7c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f84:	4313      	orrs	r3, r2
 8008f86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f96:	4313      	orrs	r3, r2
 8008f98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008fa0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d109      	bne.n	8008fc8 <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc0:	025b      	lsls	r3, r3, #9
 8008fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd8:	d103      	bne.n	8008fe2 <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fe0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fe8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ffa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009002:	4313      	orrs	r3, r2
 8009004:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 800900c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009010:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009018:	4313      	orrs	r3, r2
 800901a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009022:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	4313      	orrs	r3, r2
 8009030:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009038:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	69ba      	ldr	r2, [r7, #24]
 8009040:	4313      	orrs	r3, r2
 8009042:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800904a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009050:	6a3a      	ldr	r2, [r7, #32]
 8009052:	4313      	orrs	r3, r2
 8009054:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800905a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800905e:	d004      	beq.n	800906a <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009064:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8009068:	d103      	bne.n	8009072 <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906e:	2b40      	cmp	r3, #64	; 0x40
 8009070:	d108      	bne.n	8009084 <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8009078:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800907e:	6a3a      	ldr	r2, [r7, #32]
 8009080:	4313      	orrs	r3, r2
 8009082:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800908a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009090:	6a3a      	ldr	r2, [r7, #32]
 8009092:	4313      	orrs	r3, r2
 8009094:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800909a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2b05      	cmp	r3, #5
 80090a0:	d850      	bhi.n	8009144 <HRTIM_TimingUnitWaveform_Config+0x2d0>
 80090a2:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <HRTIM_TimingUnitWaveform_Config+0x234>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	080090c1 	.word	0x080090c1
 80090ac:	080090d7 	.word	0x080090d7
 80090b0:	080090ed 	.word	0x080090ed
 80090b4:	08009103 	.word	0x08009103
 80090b8:	08009119 	.word	0x08009119
 80090bc:	0800912f 	.word	0x0800912f
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80090c6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	61fb      	str	r3, [r7, #28]
      break;
 80090d4:	e037      	b.n	8009146 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090dc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	69fa      	ldr	r2, [r7, #28]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	61fb      	str	r3, [r7, #28]
      break;
 80090ea:	e02c      	b.n	8009146 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80090f2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f8:	00db      	lsls	r3, r3, #3
 80090fa:	69fa      	ldr	r2, [r7, #28]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	61fb      	str	r3, [r7, #28]
      break;
 8009100:	e021      	b.n	8009146 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009108:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910e:	011b      	lsls	r3, r3, #4
 8009110:	69fa      	ldr	r2, [r7, #28]
 8009112:	4313      	orrs	r3, r2
 8009114:	61fb      	str	r3, [r7, #28]
      break;
 8009116:	e016      	b.n	8009146 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800911e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009124:	015b      	lsls	r3, r3, #5
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	4313      	orrs	r3, r2
 800912a:	61fb      	str	r3, [r7, #28]
      break;
 800912c:	e00b      	b.n	8009146 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009134:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913a:	019b      	lsls	r3, r3, #6
 800913c:	69fa      	ldr	r2, [r7, #28]
 800913e:	4313      	orrs	r3, r2
 8009140:	61fb      	str	r3, [r7, #28]
      break;
 8009142:	e000      	b.n	8009146 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 8009144:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	3301      	adds	r3, #1
 800914e:	01db      	lsls	r3, r3, #7
 8009150:	4413      	add	r3, r2
 8009152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009154:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	01db      	lsls	r3, r3, #7
 800915e:	4413      	add	r3, r2
 8009160:	33e8      	adds	r3, #232	; 0xe8
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	01db      	lsls	r3, r3, #7
 800916e:	4413      	add	r3, r2
 8009170:	33e4      	adds	r3, #228	; 0xe4
 8009172:	6a3a      	ldr	r2, [r7, #32]
 8009174:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	01db      	lsls	r3, r3, #7
 800917e:	4413      	add	r3, r2
 8009180:	33d4      	adds	r3, #212	; 0xd4
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8009190:	bf00      	nop
 8009192:	372c      	adds	r7, #44	; 0x2c
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800919c:	b480      	push	{r7}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	01db      	lsls	r3, r3, #7
 80091b0:	4413      	add	r3, r2
 80091b2:	33ec      	adds	r3, #236	; 0xec
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f023 0310 	bic.w	r3, r3, #16
 80091be:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80091d2:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	4313      	orrs	r3, r2
 80091dc:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091e4:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80091f6:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	4313      	orrs	r3, r2
 8009200:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d11a      	bne.n	8009240 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f023 0304 	bic.w	r3, r3, #4
 8009210:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	4313      	orrs	r3, r2
 800921a:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f023 0302 	bic.w	r3, r3, #2
 8009222:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	4313      	orrs	r3, r2
 800922c:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f023 0301 	bic.w	r3, r3, #1
 8009234:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	4313      	orrs	r3, r2
 800923e:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	01db      	lsls	r3, r3, #7
 8009248:	4413      	add	r3, r2
 800924a:	33ec      	adds	r3, #236	; 0xec
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	601a      	str	r2, [r3, #0]

}
 8009250:	bf00      	nop
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800925c:	b480      	push	{r7}
 800925e:	b089      	sub	sp, #36	; 0x24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	01db      	lsls	r3, r3, #7
 8009276:	4413      	add	r3, r2
 8009278:	33e4      	adds	r3, #228	; 0xe4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	01db      	lsls	r3, r3, #7
 8009286:	4413      	add	r3, r2
 8009288:	33b8      	adds	r3, #184	; 0xb8
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b20      	cmp	r3, #32
 8009292:	d037      	beq.n	8009304 <HRTIM_OutputConfig+0xa8>
 8009294:	2b20      	cmp	r3, #32
 8009296:	d80d      	bhi.n	80092b4 <HRTIM_OutputConfig+0x58>
 8009298:	2b04      	cmp	r3, #4
 800929a:	d020      	beq.n	80092de <HRTIM_OutputConfig+0x82>
 800929c:	2b04      	cmp	r3, #4
 800929e:	d804      	bhi.n	80092aa <HRTIM_OutputConfig+0x4e>
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d01c      	beq.n	80092de <HRTIM_OutputConfig+0x82>
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d02d      	beq.n	8009304 <HRTIM_OutputConfig+0xa8>
      shift = 16U;
      break;
    }

  default:
    break;
 80092a8:	e041      	b.n	800932e <HRTIM_OutputConfig+0xd2>
  switch (Output)
 80092aa:	2b08      	cmp	r3, #8
 80092ac:	d02a      	beq.n	8009304 <HRTIM_OutputConfig+0xa8>
 80092ae:	2b10      	cmp	r3, #16
 80092b0:	d015      	beq.n	80092de <HRTIM_OutputConfig+0x82>
    break;
 80092b2:	e03c      	b.n	800932e <HRTIM_OutputConfig+0xd2>
  switch (Output)
 80092b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b8:	d011      	beq.n	80092de <HRTIM_OutputConfig+0x82>
 80092ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092be:	d804      	bhi.n	80092ca <HRTIM_OutputConfig+0x6e>
 80092c0:	2b40      	cmp	r3, #64	; 0x40
 80092c2:	d00c      	beq.n	80092de <HRTIM_OutputConfig+0x82>
 80092c4:	2b80      	cmp	r3, #128	; 0x80
 80092c6:	d01d      	beq.n	8009304 <HRTIM_OutputConfig+0xa8>
    break;
 80092c8:	e031      	b.n	800932e <HRTIM_OutputConfig+0xd2>
  switch (Output)
 80092ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ce:	d006      	beq.n	80092de <HRTIM_OutputConfig+0x82>
 80092d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092d4:	d016      	beq.n	8009304 <HRTIM_OutputConfig+0xa8>
 80092d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092da:	d013      	beq.n	8009304 <HRTIM_OutputConfig+0xa8>
    break;
 80092dc:	e027      	b.n	800932e <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6819      	ldr	r1, [r3, #0]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	01db      	lsls	r3, r3, #7
 80092ea:	440b      	add	r3, r1
 80092ec:	33bc      	adds	r3, #188	; 0xbc
 80092ee:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6819      	ldr	r1, [r3, #0]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	689a      	ldr	r2, [r3, #8]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	01db      	lsls	r3, r3, #7
 80092fc:	440b      	add	r3, r1
 80092fe:	33c0      	adds	r3, #192	; 0xc0
 8009300:	601a      	str	r2, [r3, #0]
      break;
 8009302:	e014      	b.n	800932e <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6819      	ldr	r1, [r3, #0]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	01db      	lsls	r3, r3, #7
 8009310:	440b      	add	r3, r1
 8009312:	33c4      	adds	r3, #196	; 0xc4
 8009314:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6819      	ldr	r1, [r3, #0]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	689a      	ldr	r2, [r3, #8]
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	01db      	lsls	r3, r3, #7
 8009322:	440b      	add	r3, r1
 8009324:	33c8      	adds	r3, #200	; 0xc8
 8009326:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8009328:	2310      	movs	r3, #16
 800932a:	61bb      	str	r3, [r7, #24]
      break;
 800932c:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800932e:	22fe      	movs	r2, #254	; 0xfe
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8009336:	43db      	mvns	r3, r3
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	4013      	ands	r3, r2
 800933c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	fa02 f303 	lsl.w	r3, r2, r3
 8009348:	69fa      	ldr	r2, [r7, #28]
 800934a:	4313      	orrs	r3, r2
 800934c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	68da      	ldr	r2, [r3, #12]
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	fa02 f303 	lsl.w	r3, r2, r3
 8009358:	69fa      	ldr	r2, [r7, #28]
 800935a:	4313      	orrs	r3, r2
 800935c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	691a      	ldr	r2, [r3, #16]
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	fa02 f303 	lsl.w	r3, r2, r3
 8009368:	69fa      	ldr	r2, [r7, #28]
 800936a:	4313      	orrs	r3, r2
 800936c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	695a      	ldr	r2, [r3, #20]
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	fa02 f303 	lsl.w	r3, r2, r3
 8009378:	69fa      	ldr	r2, [r7, #28]
 800937a:	4313      	orrs	r3, r2
 800937c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	699a      	ldr	r2, [r3, #24]
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	fa02 f303 	lsl.w	r3, r2, r3
 8009388:	69fa      	ldr	r2, [r7, #28]
 800938a:	4313      	orrs	r3, r2
 800938c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	2b08      	cmp	r3, #8
 8009394:	d111      	bne.n	80093ba <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10c      	bne.n	80093ba <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d107      	bne.n	80093ba <HRTIM_OutputConfig+0x15e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	69da      	ldr	r2, [r3, #28]
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	fa02 f303 	lsl.w	r3, r2, r3
 80093b4:	69fa      	ldr	r2, [r7, #28]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	01db      	lsls	r3, r3, #7
 80093c2:	4413      	add	r3, r2
 80093c4:	33e4      	adds	r3, #228	; 0xe4
 80093c6:	69fa      	ldr	r2, [r7, #28]
 80093c8:	601a      	str	r2, [r3, #0]
}
 80093ca:	bf00      	nop
 80093cc:	3724      	adds	r7, #36	; 0x24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
	...

080093d8 <HRTIM_GetDMAHandleFromTimerIdx>:
  return dma_request;
}

static DMA_HandleTypeDef * HRTIM_GetDMAHandleFromTimerIdx(HRTIM_HandleTypeDef * hhrtim,
                                                          uint32_t TimerIdx)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  DMA_HandleTypeDef * hdma = (DMA_HandleTypeDef *)NULL;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60fb      	str	r3, [r7, #12]

  switch (TimerIdx)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b06      	cmp	r3, #6
 80093ea:	d834      	bhi.n	8009456 <HRTIM_GetDMAHandleFromTimerIdx+0x7e>
 80093ec:	a201      	add	r2, pc, #4	; (adr r2, 80093f4 <HRTIM_GetDMAHandleFromTimerIdx+0x1c>)
 80093ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f2:	bf00      	nop
 80093f4:	0800941b 	.word	0x0800941b
 80093f8:	08009425 	.word	0x08009425
 80093fc:	0800942f 	.word	0x0800942f
 8009400:	08009439 	.word	0x08009439
 8009404:	08009443 	.word	0x08009443
 8009408:	0800944d 	.word	0x0800944d
 800940c:	08009411 	.word	0x08009411
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hdma = hhrtim->hdmaMaster;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009416:	60fb      	str	r3, [r7, #12]
      break;
 8009418:	e01e      	b.n	8009458 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hdma = hhrtim->hdmaTimerA;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009420:	60fb      	str	r3, [r7, #12]
      break;
 8009422:	e019      	b.n	8009458 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hdma = hhrtim->hdmaTimerB;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800942a:	60fb      	str	r3, [r7, #12]
      break;
 800942c:	e014      	b.n	8009458 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hdma = hhrtim->hdmaTimerC;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009434:	60fb      	str	r3, [r7, #12]
      break;
 8009436:	e00f      	b.n	8009458 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hdma = hhrtim->hdmaTimerD;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800943e:	60fb      	str	r3, [r7, #12]
      break;
 8009440:	e00a      	b.n	8009458 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hdma = hhrtim->hdmaTimerE;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009448:	60fb      	str	r3, [r7, #12]
      break;
 800944a:	e005      	b.n	8009458 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hdma = hhrtim->hdmaTimerF;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009452:	60fb      	str	r3, [r7, #12]
      break;
 8009454:	e000      	b.n	8009458 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  default:
    break;
 8009456:	bf00      	nop
  }

  return hdma;
 8009458:	68fb      	ldr	r3, [r7, #12]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop

08009468 <GetTimerIdxFromDMAHandle>:

static uint32_t GetTimerIdxFromDMAHandle(HRTIM_HandleTypeDef * hhrtim,
                                         DMA_HandleTypeDef * hdma)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t timed_idx = 0xFFFFFFFFU;
 8009472:	f04f 33ff 	mov.w	r3, #4294967295
 8009476:	60fb      	str	r3, [r7, #12]

  if (hdma == hhrtim->hdmaMaster)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d102      	bne.n	800948a <GetTimerIdxFromDMAHandle+0x22>
  {
    timed_idx = HRTIM_TIMERINDEX_MASTER;
 8009484:	2306      	movs	r3, #6
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	e034      	b.n	80094f4 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerA)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	429a      	cmp	r2, r3
 8009494:	d102      	bne.n	800949c <GetTimerIdxFromDMAHandle+0x34>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_A;
 8009496:	2300      	movs	r3, #0
 8009498:	60fb      	str	r3, [r7, #12]
 800949a:	e02b      	b.n	80094f4 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerB)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d102      	bne.n	80094ae <GetTimerIdxFromDMAHandle+0x46>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_B;
 80094a8:	2301      	movs	r3, #1
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	e022      	b.n	80094f4 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerC)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80094b4:	683a      	ldr	r2, [r7, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d102      	bne.n	80094c0 <GetTimerIdxFromDMAHandle+0x58>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_C;
 80094ba:	2302      	movs	r3, #2
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	e019      	b.n	80094f4 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerD)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d102      	bne.n	80094d2 <GetTimerIdxFromDMAHandle+0x6a>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_D;
 80094cc:	2303      	movs	r3, #3
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	e010      	b.n	80094f4 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerE)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d102      	bne.n	80094e4 <GetTimerIdxFromDMAHandle+0x7c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_E;
 80094de:	2304      	movs	r3, #4
 80094e0:	60fb      	str	r3, [r7, #12]
 80094e2:	e007      	b.n	80094f4 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerF)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d101      	bne.n	80094f4 <GetTimerIdxFromDMAHandle+0x8c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_F;
 80094f0:	2305      	movs	r3, #5
 80094f2:	60fb      	str	r3, [r7, #12]
  }
  else
  {
    /* nothing to do */
  }
  return timed_idx;
 80094f4:	68fb      	ldr	r3, [r7, #12]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
	...

08009504 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b06      	cmp	r3, #6
 8009512:	d85e      	bhi.n	80095d2 <HRTIM_ForceRegistersUpdate+0xce>
 8009514:	a201      	add	r2, pc, #4	; (adr r2, 800951c <HRTIM_ForceRegistersUpdate+0x18>)
 8009516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951a:	bf00      	nop
 800951c:	0800954f 	.word	0x0800954f
 8009520:	08009565 	.word	0x08009565
 8009524:	0800957b 	.word	0x0800957b
 8009528:	08009591 	.word	0x08009591
 800952c:	080095a7 	.word	0x080095a7
 8009530:	080095bd 	.word	0x080095bd
 8009534:	08009539 	.word	0x08009539
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f042 0201 	orr.w	r2, r2, #1
 8009548:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800954c:	e042      	b.n	80095d4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f042 0202 	orr.w	r2, r2, #2
 800955e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009562:	e037      	b.n	80095d4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f042 0204 	orr.w	r2, r2, #4
 8009574:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009578:	e02c      	b.n	80095d4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f042 0208 	orr.w	r2, r2, #8
 800958a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800958e:	e021      	b.n	80095d4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f042 0210 	orr.w	r2, r2, #16
 80095a0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80095a4:	e016      	b.n	80095d4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 0220 	orr.w	r2, r2, #32
 80095b6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80095ba:	e00b      	b.n	80095d4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095cc:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80095d0:	e000      	b.n	80095d4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 80095d2:	bf00      	nop
  }
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Fault 1 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d101      	bne.n	80095fc <HRTIM_HRTIM_ISR+0x1c>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e000      	b.n	80095fe <HRTIM_HRTIM_ISR+0x1e>
 80095fc:	2300      	movs	r3, #0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00f      	beq.n	8009622 <HRTIM_HRTIM_ISR+0x42>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT1) != RESET)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b01      	cmp	r3, #1
 8009610:	d107      	bne.n	8009622 <HRTIM_HRTIM_ISR+0x42>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2201      	movs	r2, #1
 8009618:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7fb f851 	bl	80046c4 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800962a:	f003 0302 	and.w	r3, r3, #2
 800962e:	2b02      	cmp	r3, #2
 8009630:	d101      	bne.n	8009636 <HRTIM_HRTIM_ISR+0x56>
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <HRTIM_HRTIM_ISR+0x58>
 8009636:	2300      	movs	r3, #0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00f      	beq.n	800965c <HRTIM_HRTIM_ISR+0x7c>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT2) != RESET)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8009644:	f003 0302 	and.w	r3, r3, #2
 8009648:	2b02      	cmp	r3, #2
 800964a:	d107      	bne.n	800965c <HRTIM_HRTIM_ISR+0x7c>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2202      	movs	r2, #2
 8009652:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff fa0b 	bl	8008a72 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009664:	f003 0304 	and.w	r3, r3, #4
 8009668:	2b04      	cmp	r3, #4
 800966a:	d101      	bne.n	8009670 <HRTIM_HRTIM_ISR+0x90>
 800966c:	2301      	movs	r3, #1
 800966e:	e000      	b.n	8009672 <HRTIM_HRTIM_ISR+0x92>
 8009670:	2300      	movs	r3, #0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00f      	beq.n	8009696 <HRTIM_HRTIM_ISR+0xb6>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT3) != RESET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800967e:	f003 0304 	and.w	r3, r3, #4
 8009682:	2b04      	cmp	r3, #4
 8009684:	d107      	bne.n	8009696 <HRTIM_HRTIM_ISR+0xb6>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2204      	movs	r2, #4
 800968c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7fb f82f 	bl	80046f4 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800969e:	f003 0308 	and.w	r3, r3, #8
 80096a2:	2b08      	cmp	r3, #8
 80096a4:	d101      	bne.n	80096aa <HRTIM_HRTIM_ISR+0xca>
 80096a6:	2301      	movs	r3, #1
 80096a8:	e000      	b.n	80096ac <HRTIM_HRTIM_ISR+0xcc>
 80096aa:	2300      	movs	r3, #0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00f      	beq.n	80096d0 <HRTIM_HRTIM_ISR+0xf0>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT4) != RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80096b8:	f003 0308 	and.w	r3, r3, #8
 80096bc:	2b08      	cmp	r3, #8
 80096be:	d107      	bne.n	80096d0 <HRTIM_HRTIM_ISR+0xf0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2208      	movs	r2, #8
 80096c6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7ff f9db 	bl	8008a86 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80096d8:	f003 0310 	and.w	r3, r3, #16
 80096dc:	2b10      	cmp	r3, #16
 80096de:	d101      	bne.n	80096e4 <HRTIM_HRTIM_ISR+0x104>
 80096e0:	2301      	movs	r3, #1
 80096e2:	e000      	b.n	80096e6 <HRTIM_HRTIM_ISR+0x106>
 80096e4:	2300      	movs	r3, #0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00f      	beq.n	800970a <HRTIM_HRTIM_ISR+0x12a>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT5) != RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80096f2:	f003 0310 	and.w	r3, r3, #16
 80096f6:	2b10      	cmp	r3, #16
 80096f8:	d107      	bne.n	800970a <HRTIM_HRTIM_ISR+0x12a>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2210      	movs	r2, #16
 8009700:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff f9c8 	bl	8008a9a <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009716:	2b40      	cmp	r3, #64	; 0x40
 8009718:	d101      	bne.n	800971e <HRTIM_HRTIM_ISR+0x13e>
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <HRTIM_HRTIM_ISR+0x140>
 800971e:	2300      	movs	r3, #0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00f      	beq.n	8009744 <HRTIM_HRTIM_ISR+0x164>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT6) != RESET)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800972c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009730:	2b40      	cmp	r3, #64	; 0x40
 8009732:	d107      	bne.n	8009744 <HRTIM_HRTIM_ISR+0x164>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2240      	movs	r2, #64	; 0x40
 800973a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7ff f9b5 	bl	8008aae <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800974c:	f003 0320 	and.w	r3, r3, #32
 8009750:	2b20      	cmp	r3, #32
 8009752:	d101      	bne.n	8009758 <HRTIM_HRTIM_ISR+0x178>
 8009754:	2301      	movs	r3, #1
 8009756:	e000      	b.n	800975a <HRTIM_HRTIM_ISR+0x17a>
 8009758:	2300      	movs	r3, #0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00f      	beq.n	800977e <HRTIM_HRTIM_ISR+0x19e>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_SYSFLT) != RESET)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b20      	cmp	r3, #32
 800976c:	d107      	bne.n	800977e <HRTIM_HRTIM_ISR+0x19e>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2220      	movs	r2, #32
 8009774:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff f9a2 	bl	8008ac2 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800977e:	bf00      	nop
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  /* DLL calibration ready event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800979a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800979e:	d101      	bne.n	80097a4 <HRTIM_Master_ISR+0x1e>
 80097a0:	2301      	movs	r3, #1
 80097a2:	e000      	b.n	80097a6 <HRTIM_Master_ISR+0x20>
 80097a4:	2300      	movs	r3, #0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d019      	beq.n	80097de <HRTIM_Master_ISR+0x58>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_DLLRDY) != RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80097b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ba:	d110      	bne.n	80097de <HRTIM_Master_ISR+0x58>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80097c4:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7ff f97c 	bl	8008ad6 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80097e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097ee:	d101      	bne.n	80097f4 <HRTIM_Master_ISR+0x6e>
 80097f0:	2301      	movs	r3, #1
 80097f2:	e000      	b.n	80097f6 <HRTIM_Master_ISR+0x70>
 80097f4:	2300      	movs	r3, #0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d011      	beq.n	800981e <HRTIM_Master_ISR+0x98>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_BMPER) != RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8009802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800980a:	d108      	bne.n	800981e <HRTIM_Master_ISR+0x98>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009814:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7ff f966 	bl	8008aea <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	2b01      	cmp	r3, #1
 800982a:	d101      	bne.n	8009830 <HRTIM_Master_ISR+0xaa>
 800982c:	2301      	movs	r3, #1
 800982e:	e000      	b.n	8009832 <HRTIM_Master_ISR+0xac>
 8009830:	2300      	movs	r3, #0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00e      	beq.n	8009854 <HRTIM_Master_ISR+0xce>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP1) != RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b01      	cmp	r3, #1
 8009842:	d107      	bne.n	8009854 <HRTIM_Master_ISR+0xce>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2201      	movs	r2, #1
 800984a:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800984c:	2106      	movs	r1, #6
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7ff f975 	bl	8008b3e <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b02      	cmp	r3, #2
 8009860:	d101      	bne.n	8009866 <HRTIM_Master_ISR+0xe0>
 8009862:	2301      	movs	r3, #1
 8009864:	e000      	b.n	8009868 <HRTIM_Master_ISR+0xe2>
 8009866:	2300      	movs	r3, #0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00e      	beq.n	800988a <HRTIM_Master_ISR+0x104>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP2) != RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	f003 0302 	and.w	r3, r3, #2
 8009876:	2b02      	cmp	r3, #2
 8009878:	d107      	bne.n	800988a <HRTIM_Master_ISR+0x104>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2202      	movs	r2, #2
 8009880:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009882:	2106      	movs	r1, #6
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff f965 	bl	8008b54 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f003 0304 	and.w	r3, r3, #4
 8009894:	2b04      	cmp	r3, #4
 8009896:	d101      	bne.n	800989c <HRTIM_Master_ISR+0x116>
 8009898:	2301      	movs	r3, #1
 800989a:	e000      	b.n	800989e <HRTIM_Master_ISR+0x118>
 800989c:	2300      	movs	r3, #0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00e      	beq.n	80098c0 <HRTIM_Master_ISR+0x13a>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP3) != RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f003 0304 	and.w	r3, r3, #4
 80098ac:	2b04      	cmp	r3, #4
 80098ae:	d107      	bne.n	80098c0 <HRTIM_Master_ISR+0x13a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2204      	movs	r2, #4
 80098b6:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80098b8:	2106      	movs	r1, #6
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff f955 	bl	8008b6a <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f003 0308 	and.w	r3, r3, #8
 80098ca:	2b08      	cmp	r3, #8
 80098cc:	d101      	bne.n	80098d2 <HRTIM_Master_ISR+0x14c>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <HRTIM_Master_ISR+0x14e>
 80098d2:	2300      	movs	r3, #0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00e      	beq.n	80098f6 <HRTIM_Master_ISR+0x170>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP4) != RESET)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f003 0308 	and.w	r3, r3, #8
 80098e2:	2b08      	cmp	r3, #8
 80098e4:	d107      	bne.n	80098f6 <HRTIM_Master_ISR+0x170>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2208      	movs	r2, #8
 80098ec:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80098ee:	2106      	movs	r1, #6
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff f945 	bl	8008b80 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f003 0310 	and.w	r3, r3, #16
 8009900:	2b10      	cmp	r3, #16
 8009902:	d101      	bne.n	8009908 <HRTIM_Master_ISR+0x182>
 8009904:	2301      	movs	r3, #1
 8009906:	e000      	b.n	800990a <HRTIM_Master_ISR+0x184>
 8009908:	2300      	movs	r3, #0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00e      	beq.n	800992c <HRTIM_Master_ISR+0x1a6>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MREP) != RESET)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	f003 0310 	and.w	r3, r3, #16
 8009918:	2b10      	cmp	r3, #16
 800991a:	d107      	bne.n	800992c <HRTIM_Master_ISR+0x1a6>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2210      	movs	r2, #16
 8009922:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009924:	2106      	movs	r1, #6
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7ff f8fe 	bl	8008b28 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b20      	cmp	r3, #32
 8009938:	d101      	bne.n	800993e <HRTIM_Master_ISR+0x1b8>
 800993a:	2301      	movs	r3, #1
 800993c:	e000      	b.n	8009940 <HRTIM_Master_ISR+0x1ba>
 800993e:	2300      	movs	r3, #0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00d      	beq.n	8009960 <HRTIM_Master_ISR+0x1da>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_SYNC) != RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f003 0320 	and.w	r3, r3, #32
 800994e:	2b20      	cmp	r3, #32
 8009950:	d106      	bne.n	8009960 <HRTIM_Master_ISR+0x1da>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2220      	movs	r2, #32
 8009958:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7ff f8cf 	bl	8008afe <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996a:	2b40      	cmp	r3, #64	; 0x40
 800996c:	d101      	bne.n	8009972 <HRTIM_Master_ISR+0x1ec>
 800996e:	2301      	movs	r3, #1
 8009970:	e000      	b.n	8009974 <HRTIM_Master_ISR+0x1ee>
 8009972:	2300      	movs	r3, #0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00e      	beq.n	8009996 <HRTIM_Master_ISR+0x210>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MUPD) != RESET)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009982:	2b40      	cmp	r3, #64	; 0x40
 8009984:	d107      	bne.n	8009996 <HRTIM_Master_ISR+0x210>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2240      	movs	r2, #64	; 0x40
 800998c:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800998e:	2106      	movs	r1, #6
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7ff f8be 	bl	8008b12 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009996:	bf00      	nop
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
  /* Timer compare 1 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	3301      	adds	r3, #1
 80099b0:	01db      	lsls	r3, r3, #7
 80099b2:	4413      	add	r3, r2
 80099b4:	3304      	adds	r3, #4
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d101      	bne.n	80099c4 <HRTIM_Timer_ISR+0x26>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e000      	b.n	80099c6 <HRTIM_Timer_ISR+0x28>
 80099c4:	2300      	movs	r3, #0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d016      	beq.n	80099f8 <HRTIM_Timer_ISR+0x5a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1) != RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	01db      	lsls	r3, r3, #7
 80099d2:	4413      	add	r3, r2
 80099d4:	338c      	adds	r3, #140	; 0x8c
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d10b      	bne.n	80099f8 <HRTIM_Timer_ISR+0x5a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	01db      	lsls	r3, r3, #7
 80099e8:	4413      	add	r3, r2
 80099ea:	3388      	adds	r3, #136	; 0x88
 80099ec:	2201      	movs	r2, #1
 80099ee:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7ff f8a3 	bl	8008b3e <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	3301      	adds	r3, #1
 8009a00:	01db      	lsls	r3, r3, #7
 8009a02:	4413      	add	r3, r2
 8009a04:	3304      	adds	r3, #4
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0302 	and.w	r3, r3, #2
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d101      	bne.n	8009a14 <HRTIM_Timer_ISR+0x76>
 8009a10:	2301      	movs	r3, #1
 8009a12:	e000      	b.n	8009a16 <HRTIM_Timer_ISR+0x78>
 8009a14:	2300      	movs	r3, #0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d016      	beq.n	8009a48 <HRTIM_Timer_ISR+0xaa>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2) != RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	01db      	lsls	r3, r3, #7
 8009a22:	4413      	add	r3, r2
 8009a24:	338c      	adds	r3, #140	; 0x8c
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0302 	and.w	r3, r3, #2
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d10b      	bne.n	8009a48 <HRTIM_Timer_ISR+0xaa>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	01db      	lsls	r3, r3, #7
 8009a38:	4413      	add	r3, r2
 8009a3a:	3388      	adds	r3, #136	; 0x88
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff f886 	bl	8008b54 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	01db      	lsls	r3, r3, #7
 8009a52:	4413      	add	r3, r2
 8009a54:	3304      	adds	r3, #4
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	d101      	bne.n	8009a64 <HRTIM_Timer_ISR+0xc6>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e000      	b.n	8009a66 <HRTIM_Timer_ISR+0xc8>
 8009a64:	2300      	movs	r3, #0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d016      	beq.n	8009a98 <HRTIM_Timer_ISR+0xfa>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3) != RESET)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	01db      	lsls	r3, r3, #7
 8009a72:	4413      	add	r3, r2
 8009a74:	338c      	adds	r3, #140	; 0x8c
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0304 	and.w	r3, r3, #4
 8009a7c:	2b04      	cmp	r3, #4
 8009a7e:	d10b      	bne.n	8009a98 <HRTIM_Timer_ISR+0xfa>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	01db      	lsls	r3, r3, #7
 8009a88:	4413      	add	r3, r2
 8009a8a:	3388      	adds	r3, #136	; 0x88
 8009a8c:	2204      	movs	r2, #4
 8009a8e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7ff f869 	bl	8008b6a <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	01db      	lsls	r3, r3, #7
 8009aa2:	4413      	add	r3, r2
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0308 	and.w	r3, r3, #8
 8009aac:	2b08      	cmp	r3, #8
 8009aae:	d101      	bne.n	8009ab4 <HRTIM_Timer_ISR+0x116>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e000      	b.n	8009ab6 <HRTIM_Timer_ISR+0x118>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d016      	beq.n	8009ae8 <HRTIM_Timer_ISR+0x14a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4) != RESET)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	01db      	lsls	r3, r3, #7
 8009ac2:	4413      	add	r3, r2
 8009ac4:	338c      	adds	r3, #140	; 0x8c
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 0308 	and.w	r3, r3, #8
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d10b      	bne.n	8009ae8 <HRTIM_Timer_ISR+0x14a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	01db      	lsls	r3, r3, #7
 8009ad8:	4413      	add	r3, r2
 8009ada:	3388      	adds	r3, #136	; 0x88
 8009adc:	2208      	movs	r2, #8
 8009ade:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7ff f84c 	bl	8008b80 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	3301      	adds	r3, #1
 8009af0:	01db      	lsls	r3, r3, #7
 8009af2:	4413      	add	r3, r2
 8009af4:	3304      	adds	r3, #4
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0310 	and.w	r3, r3, #16
 8009afc:	2b10      	cmp	r3, #16
 8009afe:	d101      	bne.n	8009b04 <HRTIM_Timer_ISR+0x166>
 8009b00:	2301      	movs	r3, #1
 8009b02:	e000      	b.n	8009b06 <HRTIM_Timer_ISR+0x168>
 8009b04:	2300      	movs	r3, #0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d016      	beq.n	8009b38 <HRTIM_Timer_ISR+0x19a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_REP) != RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	01db      	lsls	r3, r3, #7
 8009b12:	4413      	add	r3, r2
 8009b14:	338c      	adds	r3, #140	; 0x8c
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0310 	and.w	r3, r3, #16
 8009b1c:	2b10      	cmp	r3, #16
 8009b1e:	d10b      	bne.n	8009b38 <HRTIM_Timer_ISR+0x19a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	01db      	lsls	r3, r3, #7
 8009b28:	4413      	add	r3, r2
 8009b2a:	3388      	adds	r3, #136	; 0x88
 8009b2c:	2210      	movs	r2, #16
 8009b2e:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7fe fff8 	bl	8008b28 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	01db      	lsls	r3, r3, #7
 8009b42:	4413      	add	r3, r2
 8009b44:	3304      	adds	r3, #4
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4c:	2b40      	cmp	r3, #64	; 0x40
 8009b4e:	d101      	bne.n	8009b54 <HRTIM_Timer_ISR+0x1b6>
 8009b50:	2301      	movs	r3, #1
 8009b52:	e000      	b.n	8009b56 <HRTIM_Timer_ISR+0x1b8>
 8009b54:	2300      	movs	r3, #0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d016      	beq.n	8009b88 <HRTIM_Timer_ISR+0x1ea>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD) != RESET)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	01db      	lsls	r3, r3, #7
 8009b62:	4413      	add	r3, r2
 8009b64:	338c      	adds	r3, #140	; 0x8c
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6c:	2b40      	cmp	r3, #64	; 0x40
 8009b6e:	d10b      	bne.n	8009b88 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	01db      	lsls	r3, r3, #7
 8009b78:	4413      	add	r3, r2
 8009b7a:	3388      	adds	r3, #136	; 0x88
 8009b7c:	2240      	movs	r2, #64	; 0x40
 8009b7e:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7fe ffc5 	bl	8008b12 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	01db      	lsls	r3, r3, #7
 8009b92:	4413      	add	r3, r2
 8009b94:	3304      	adds	r3, #4
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b9c:	2b80      	cmp	r3, #128	; 0x80
 8009b9e:	d101      	bne.n	8009ba4 <HRTIM_Timer_ISR+0x206>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e000      	b.n	8009ba6 <HRTIM_Timer_ISR+0x208>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d016      	beq.n	8009bd8 <HRTIM_Timer_ISR+0x23a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1) != RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	01db      	lsls	r3, r3, #7
 8009bb2:	4413      	add	r3, r2
 8009bb4:	338c      	adds	r3, #140	; 0x8c
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bbc:	2b80      	cmp	r3, #128	; 0x80
 8009bbe:	d10b      	bne.n	8009bd8 <HRTIM_Timer_ISR+0x23a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	01db      	lsls	r3, r3, #7
 8009bc8:	4413      	add	r3, r2
 8009bca:	3388      	adds	r3, #136	; 0x88
 8009bcc:	2280      	movs	r2, #128	; 0x80
 8009bce:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7fe ffdf 	bl	8008b96 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	3301      	adds	r3, #1
 8009be0:	01db      	lsls	r3, r3, #7
 8009be2:	4413      	add	r3, r2
 8009be4:	3304      	adds	r3, #4
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bf0:	d101      	bne.n	8009bf6 <HRTIM_Timer_ISR+0x258>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e000      	b.n	8009bf8 <HRTIM_Timer_ISR+0x25a>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d018      	beq.n	8009c2e <HRTIM_Timer_ISR+0x290>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2) != RESET)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	01db      	lsls	r3, r3, #7
 8009c04:	4413      	add	r3, r2
 8009c06:	338c      	adds	r3, #140	; 0x8c
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c12:	d10c      	bne.n	8009c2e <HRTIM_Timer_ISR+0x290>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	01db      	lsls	r3, r3, #7
 8009c1c:	4413      	add	r3, r2
 8009c1e:	3388      	adds	r3, #136	; 0x88
 8009c20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c24:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7fe ffbf 	bl	8008bac <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	3301      	adds	r3, #1
 8009c36:	01db      	lsls	r3, r3, #7
 8009c38:	4413      	add	r3, r2
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c46:	d101      	bne.n	8009c4c <HRTIM_Timer_ISR+0x2ae>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e000      	b.n	8009c4e <HRTIM_Timer_ISR+0x2b0>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d018      	beq.n	8009c84 <HRTIM_Timer_ISR+0x2e6>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1) != RESET)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	01db      	lsls	r3, r3, #7
 8009c5a:	4413      	add	r3, r2
 8009c5c:	338c      	adds	r3, #140	; 0x8c
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c68:	d10c      	bne.n	8009c84 <HRTIM_Timer_ISR+0x2e6>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	01db      	lsls	r3, r3, #7
 8009c72:	4413      	add	r3, r2
 8009c74:	3388      	adds	r3, #136	; 0x88
 8009c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c7a:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7fe ffb5 	bl	8008bee <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	01db      	lsls	r3, r3, #7
 8009c8e:	4413      	add	r3, r2
 8009c90:	3304      	adds	r3, #4
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c9c:	d101      	bne.n	8009ca2 <HRTIM_Timer_ISR+0x304>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <HRTIM_Timer_ISR+0x306>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d018      	beq.n	8009cda <HRTIM_Timer_ISR+0x33c>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1) != RESET)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	01db      	lsls	r3, r3, #7
 8009cb0:	4413      	add	r3, r2
 8009cb2:	338c      	adds	r3, #140	; 0x8c
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cbe:	d10c      	bne.n	8009cda <HRTIM_Timer_ISR+0x33c>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	01db      	lsls	r3, r3, #7
 8009cc8:	4413      	add	r3, r2
 8009cca:	3388      	adds	r3, #136	; 0x88
 8009ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009cd0:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7fe ff95 	bl	8008c04 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	01db      	lsls	r3, r3, #7
 8009ce4:	4413      	add	r3, r2
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cf2:	d101      	bne.n	8009cf8 <HRTIM_Timer_ISR+0x35a>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e000      	b.n	8009cfa <HRTIM_Timer_ISR+0x35c>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d018      	beq.n	8009d30 <HRTIM_Timer_ISR+0x392>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2) != RESET)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	01db      	lsls	r3, r3, #7
 8009d06:	4413      	add	r3, r2
 8009d08:	338c      	adds	r3, #140	; 0x8c
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d14:	d10c      	bne.n	8009d30 <HRTIM_Timer_ISR+0x392>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	01db      	lsls	r3, r3, #7
 8009d1e:	4413      	add	r3, r2
 8009d20:	3388      	adds	r3, #136	; 0x88
 8009d22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d26:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7fe ff75 	bl	8008c1a <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	3301      	adds	r3, #1
 8009d38:	01db      	lsls	r3, r3, #7
 8009d3a:	4413      	add	r3, r2
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d48:	d101      	bne.n	8009d4e <HRTIM_Timer_ISR+0x3b0>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e000      	b.n	8009d50 <HRTIM_Timer_ISR+0x3b2>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d018      	beq.n	8009d86 <HRTIM_Timer_ISR+0x3e8>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2) != RESET)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	01db      	lsls	r3, r3, #7
 8009d5c:	4413      	add	r3, r2
 8009d5e:	338c      	adds	r3, #140	; 0x8c
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d6a:	d10c      	bne.n	8009d86 <HRTIM_Timer_ISR+0x3e8>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	01db      	lsls	r3, r3, #7
 8009d74:	4413      	add	r3, r2
 8009d76:	3388      	adds	r3, #136	; 0x88
 8009d78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009d7c:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7fe ff55 	bl	8008c30 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	01db      	lsls	r3, r3, #7
 8009d90:	4413      	add	r3, r2
 8009d92:	3304      	adds	r3, #4
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d9e:	d101      	bne.n	8009da4 <HRTIM_Timer_ISR+0x406>
 8009da0:	2301      	movs	r3, #1
 8009da2:	e000      	b.n	8009da6 <HRTIM_Timer_ISR+0x408>
 8009da4:	2300      	movs	r3, #0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d018      	beq.n	8009ddc <HRTIM_Timer_ISR+0x43e>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST) != RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	01db      	lsls	r3, r3, #7
 8009db2:	4413      	add	r3, r2
 8009db4:	338c      	adds	r3, #140	; 0x8c
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dc0:	d10c      	bne.n	8009ddc <HRTIM_Timer_ISR+0x43e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	01db      	lsls	r3, r3, #7
 8009dca:	4413      	add	r3, r2
 8009dcc:	3388      	adds	r3, #136	; 0x88
 8009dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009dd2:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7fe fefe 	bl	8008bd8 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	3301      	adds	r3, #1
 8009de4:	01db      	lsls	r3, r3, #7
 8009de6:	4413      	add	r3, r2
 8009de8:	3304      	adds	r3, #4
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009df4:	d101      	bne.n	8009dfa <HRTIM_Timer_ISR+0x45c>
 8009df6:	2301      	movs	r3, #1
 8009df8:	e000      	b.n	8009dfc <HRTIM_Timer_ISR+0x45e>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d018      	beq.n	8009e32 <HRTIM_Timer_ISR+0x494>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT) != RESET)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	01db      	lsls	r3, r3, #7
 8009e08:	4413      	add	r3, r2
 8009e0a:	338c      	adds	r3, #140	; 0x8c
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e16:	d10c      	bne.n	8009e32 <HRTIM_Timer_ISR+0x494>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	01db      	lsls	r3, r3, #7
 8009e20:	4413      	add	r3, r2
 8009e22:	3388      	adds	r3, #136	; 0x88
 8009e24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009e28:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7fe fec8 	bl	8008bc2 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <HRTIM_DMAMasterCplt>:
  * @brief  DMA callback invoked upon master timer related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMAMasterCplt(DMA_HandleTypeDef *hdma)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e46:	60fb      	str	r3, [r7, #12]

  if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP1) != (uint32_t)RESET)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d004      	beq.n	8009e60 <HRTIM_DMAMasterCplt+0x26>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8009e56:	2106      	movs	r1, #6
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f7fe fe70 	bl	8008b3e <HAL_HRTIM_Compare1EventCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 8009e5e:	e045      	b.n	8009eec <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP2) != (uint32_t)RESET)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d004      	beq.n	8009e78 <HRTIM_DMAMasterCplt+0x3e>
    HAL_HRTIM_Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8009e6e:	2106      	movs	r1, #6
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7fe fe6f 	bl	8008b54 <HAL_HRTIM_Compare2EventCallback>
}
 8009e76:	e039      	b.n	8009eec <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP3) != (uint32_t)RESET)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d004      	beq.n	8009e90 <HRTIM_DMAMasterCplt+0x56>
    HAL_HRTIM_Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8009e86:	2106      	movs	r1, #6
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f7fe fe6e 	bl	8008b6a <HAL_HRTIM_Compare3EventCallback>
}
 8009e8e:	e02d      	b.n	8009eec <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP4) != (uint32_t)RESET)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d004      	beq.n	8009ea8 <HRTIM_DMAMasterCplt+0x6e>
    HAL_HRTIM_Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8009e9e:	2106      	movs	r1, #6
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f7fe fe6d 	bl	8008b80 <HAL_HRTIM_Compare4EventCallback>
}
 8009ea6:	e021      	b.n	8009eec <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_SYNC) != (uint32_t)RESET)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <HRTIM_DMAMasterCplt+0x84>
    HAL_HRTIM_SynchronizationEventCallback(hrtim);
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f7fe fe21 	bl	8008afe <HAL_HRTIM_SynchronizationEventCallback>
}
 8009ebc:	e016      	b.n	8009eec <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MUPD) != (uint32_t)RESET)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d004      	beq.n	8009ed6 <HRTIM_DMAMasterCplt+0x9c>
    HAL_HRTIM_RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8009ecc:	2106      	movs	r1, #6
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f7fe fe1f 	bl	8008b12 <HAL_HRTIM_RegistersUpdateCallback>
}
 8009ed4:	e00a      	b.n	8009eec <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MREP) != (uint32_t)RESET)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d003      	beq.n	8009eec <HRTIM_DMAMasterCplt+0xb2>
    HAL_HRTIM_RepetitionEventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8009ee4:	2106      	movs	r1, #6
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f7fe fe1e 	bl	8008b28 <HAL_HRTIM_RepetitionEventCallback>
}
 8009eec:	bf00      	nop
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <HRTIM_DMATimerxCplt>:
  * @brief  DMA callback invoked upon timer A..F related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMATimerxCplt(DMA_HandleTypeDef *hdma)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;

  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f00:	60fb      	str	r3, [r7, #12]

  timer_idx = (uint8_t)GetTimerIdxFromDMAHandle(hrtim, hdma);
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f7ff faaf 	bl	8009468 <GetTimerIdxFromDMAHandle>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	72fb      	strb	r3, [r7, #11]

  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 8009f0e:	7afb      	ldrb	r3, [r7, #11]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00f      	beq.n	8009f34 <HRTIM_DMATimerxCplt+0x40>
 8009f14:	7afb      	ldrb	r3, [r7, #11]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d00c      	beq.n	8009f34 <HRTIM_DMATimerxCplt+0x40>
 8009f1a:	7afb      	ldrb	r3, [r7, #11]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d009      	beq.n	8009f34 <HRTIM_DMATimerxCplt+0x40>
 8009f20:	7afb      	ldrb	r3, [r7, #11]
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d006      	beq.n	8009f34 <HRTIM_DMATimerxCplt+0x40>
 8009f26:	7afb      	ldrb	r3, [r7, #11]
 8009f28:	2b04      	cmp	r3, #4
 8009f2a:	d003      	beq.n	8009f34 <HRTIM_DMATimerxCplt+0x40>
 8009f2c:	7afb      	ldrb	r3, [r7, #11]
 8009f2e:	2b05      	cmp	r3, #5
 8009f30:	f040 80ee 	bne.w	800a110 <HRTIM_DMATimerxCplt+0x21c>

  if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP1) != (uint32_t)RESET)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	01db      	lsls	r3, r3, #7
 8009f3c:	4413      	add	r3, r2
 8009f3e:	338c      	adds	r3, #140	; 0x8c
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d005      	beq.n	8009f56 <HRTIM_DMATimerxCplt+0x62>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, timer_idx);
 8009f4a:	7afb      	ldrb	r3, [r7, #11]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f7fe fdf5 	bl	8008b3e <HAL_HRTIM_Compare1EventCallback>
 8009f54:	e0dd      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP2) != (uint32_t)RESET)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	7afb      	ldrb	r3, [r7, #11]
 8009f5c:	01db      	lsls	r3, r3, #7
 8009f5e:	4413      	add	r3, r2
 8009f60:	338c      	adds	r3, #140	; 0x8c
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d005      	beq.n	8009f78 <HRTIM_DMATimerxCplt+0x84>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare2EventCallback(hrtim, timer_idx);
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f7fe fdef 	bl	8008b54 <HAL_HRTIM_Compare2EventCallback>
 8009f76:	e0cc      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP3) != (uint32_t)RESET)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	7afb      	ldrb	r3, [r7, #11]
 8009f7e:	01db      	lsls	r3, r3, #7
 8009f80:	4413      	add	r3, r2
 8009f82:	338c      	adds	r3, #140	; 0x8c
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d005      	beq.n	8009f9a <HRTIM_DMATimerxCplt+0xa6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare3EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare3EventCallback(hrtim, timer_idx);
 8009f8e:	7afb      	ldrb	r3, [r7, #11]
 8009f90:	4619      	mov	r1, r3
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7fe fde9 	bl	8008b6a <HAL_HRTIM_Compare3EventCallback>
 8009f98:	e0bb      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP4) != (uint32_t)RESET)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	7afb      	ldrb	r3, [r7, #11]
 8009fa0:	01db      	lsls	r3, r3, #7
 8009fa2:	4413      	add	r3, r2
 8009fa4:	338c      	adds	r3, #140	; 0x8c
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d005      	beq.n	8009fbc <HRTIM_DMATimerxCplt+0xc8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare4EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare4EventCallback(hrtim, timer_idx);
 8009fb0:	7afb      	ldrb	r3, [r7, #11]
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f7fe fde3 	bl	8008b80 <HAL_HRTIM_Compare4EventCallback>
 8009fba:	e0aa      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_UPD) != (uint32_t)RESET)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	01db      	lsls	r3, r3, #7
 8009fc4:	4413      	add	r3, r2
 8009fc6:	338c      	adds	r3, #140	; 0x8c
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d005      	beq.n	8009fde <HRTIM_DMATimerxCplt+0xea>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RegistersUpdateCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RegistersUpdateCallback(hrtim, timer_idx);
 8009fd2:	7afb      	ldrb	r3, [r7, #11]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7fe fd9b 	bl	8008b12 <HAL_HRTIM_RegistersUpdateCallback>
 8009fdc:	e099      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT1) != (uint32_t)RESET)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	7afb      	ldrb	r3, [r7, #11]
 8009fe4:	01db      	lsls	r3, r3, #7
 8009fe6:	4413      	add	r3, r2
 8009fe8:	338c      	adds	r3, #140	; 0x8c
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d005      	beq.n	800a000 <HRTIM_DMATimerxCplt+0x10c>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture1EventCallback(hrtim, timer_idx);
 8009ff4:	7afb      	ldrb	r3, [r7, #11]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f7fe fdcc 	bl	8008b96 <HAL_HRTIM_Capture1EventCallback>
 8009ffe:	e088      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT2) != (uint32_t)RESET)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	7afb      	ldrb	r3, [r7, #11]
 800a006:	01db      	lsls	r3, r3, #7
 800a008:	4413      	add	r3, r2
 800a00a:	338c      	adds	r3, #140	; 0x8c
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d005      	beq.n	800a022 <HRTIM_DMATimerxCplt+0x12e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture2EventCallback(hrtim, timer_idx);
 800a016:	7afb      	ldrb	r3, [r7, #11]
 800a018:	4619      	mov	r1, r3
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f7fe fdc6 	bl	8008bac <HAL_HRTIM_Capture2EventCallback>
 800a020:	e077      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET1) != (uint32_t)RESET)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	7afb      	ldrb	r3, [r7, #11]
 800a028:	01db      	lsls	r3, r3, #7
 800a02a:	4413      	add	r3, r2
 800a02c:	338c      	adds	r3, #140	; 0x8c
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d005      	beq.n	800a044 <HRTIM_DMATimerxCplt+0x150>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1SetCallback(hrtim, timer_idx);
 800a038:	7afb      	ldrb	r3, [r7, #11]
 800a03a:	4619      	mov	r1, r3
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f7fe fdd6 	bl	8008bee <HAL_HRTIM_Output1SetCallback>
 800a042:	e066      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST1) != (uint32_t)RESET)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	7afb      	ldrb	r3, [r7, #11]
 800a04a:	01db      	lsls	r3, r3, #7
 800a04c:	4413      	add	r3, r2
 800a04e:	338c      	adds	r3, #140	; 0x8c
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d005      	beq.n	800a066 <HRTIM_DMATimerxCplt+0x172>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1ResetCallback(hrtim, timer_idx);
 800a05a:	7afb      	ldrb	r3, [r7, #11]
 800a05c:	4619      	mov	r1, r3
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f7fe fdd0 	bl	8008c04 <HAL_HRTIM_Output1ResetCallback>
 800a064:	e055      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET2) != (uint32_t)RESET)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	7afb      	ldrb	r3, [r7, #11]
 800a06c:	01db      	lsls	r3, r3, #7
 800a06e:	4413      	add	r3, r2
 800a070:	338c      	adds	r3, #140	; 0x8c
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d005      	beq.n	800a088 <HRTIM_DMATimerxCplt+0x194>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2SetCallback(hrtim, timer_idx);
 800a07c:	7afb      	ldrb	r3, [r7, #11]
 800a07e:	4619      	mov	r1, r3
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7fe fdca 	bl	8008c1a <HAL_HRTIM_Output2SetCallback>
 800a086:	e044      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST2) != (uint32_t)RESET)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	7afb      	ldrb	r3, [r7, #11]
 800a08e:	01db      	lsls	r3, r3, #7
 800a090:	4413      	add	r3, r2
 800a092:	338c      	adds	r3, #140	; 0x8c
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d005      	beq.n	800a0aa <HRTIM_DMATimerxCplt+0x1b6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2ResetCallback(hrtim, timer_idx);
 800a09e:	7afb      	ldrb	r3, [r7, #11]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f7fe fdc4 	bl	8008c30 <HAL_HRTIM_Output2ResetCallback>
 800a0a8:	e033      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST) != (uint32_t)RESET)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	7afb      	ldrb	r3, [r7, #11]
 800a0b0:	01db      	lsls	r3, r3, #7
 800a0b2:	4413      	add	r3, r2
 800a0b4:	338c      	adds	r3, #140	; 0x8c
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d005      	beq.n	800a0cc <HRTIM_DMATimerxCplt+0x1d8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->CounterResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_CounterResetCallback(hrtim, timer_idx);
 800a0c0:	7afb      	ldrb	r3, [r7, #11]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f7fe fd87 	bl	8008bd8 <HAL_HRTIM_CounterResetCallback>
 800a0ca:	e022      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_DLYPRT) != (uint32_t)RESET)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	7afb      	ldrb	r3, [r7, #11]
 800a0d2:	01db      	lsls	r3, r3, #7
 800a0d4:	4413      	add	r3, r2
 800a0d6:	338c      	adds	r3, #140	; 0x8c
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d005      	beq.n	800a0ee <HRTIM_DMATimerxCplt+0x1fa>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->DelayedProtectionCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_DelayedProtectionCallback(hrtim, timer_idx);
 800a0e2:	7afb      	ldrb	r3, [r7, #11]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7fe fd6b 	bl	8008bc2 <HAL_HRTIM_DelayedProtectionCallback>
 800a0ec:	e011      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_REP) != (uint32_t)RESET)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	7afb      	ldrb	r3, [r7, #11]
 800a0f4:	01db      	lsls	r3, r3, #7
 800a0f6:	4413      	add	r3, r2
 800a0f8:	338c      	adds	r3, #140	; 0x8c
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d006      	beq.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RepetitionEventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RepetitionEventCallback(hrtim, timer_idx);
 800a104:	7afb      	ldrb	r3, [r7, #11]
 800a106:	4619      	mov	r1, r3
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f7fe fd0d 	bl	8008b28 <HAL_HRTIM_RepetitionEventCallback>
 800a10e:	e000      	b.n	800a112 <HRTIM_DMATimerxCplt+0x21e>
  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 800a110:	bf00      	nop
  }
  else
  {
    /* nothing to do */
  }
}
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <HRTIM_DMAError>:
* @brief  DMA error callback
* @param  hdma pointer to DMA handle.
* @retval None
*/
static void HRTIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a124:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->ErrorCallback(hrtim);
#else
  HAL_HRTIM_ErrorCallback(hrtim);
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f7fe fd8d 	bl	8008c46 <HAL_HRTIM_ErrorCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
}
 800a12c:	bf00      	nop
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d141      	bne.n	800a1c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a142:	4b4b      	ldr	r3, [pc, #300]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a14a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a14e:	d131      	bne.n	800a1b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a150:	4b47      	ldr	r3, [pc, #284]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a156:	4a46      	ldr	r2, [pc, #280]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a15c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a160:	4b43      	ldr	r3, [pc, #268]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a168:	4a41      	ldr	r2, [pc, #260]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a16a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a16e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a170:	4b40      	ldr	r3, [pc, #256]	; (800a274 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2232      	movs	r2, #50	; 0x32
 800a176:	fb02 f303 	mul.w	r3, r2, r3
 800a17a:	4a3f      	ldr	r2, [pc, #252]	; (800a278 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a17c:	fba2 2303 	umull	r2, r3, r2, r3
 800a180:	0c9b      	lsrs	r3, r3, #18
 800a182:	3301      	adds	r3, #1
 800a184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a186:	e002      	b.n	800a18e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3b01      	subs	r3, #1
 800a18c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a18e:	4b38      	ldr	r3, [pc, #224]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a19a:	d102      	bne.n	800a1a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1f2      	bne.n	800a188 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a1a2:	4b33      	ldr	r3, [pc, #204]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1ae:	d158      	bne.n	800a262 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e057      	b.n	800a264 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a1b4:	4b2e      	ldr	r3, [pc, #184]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1ba:	4a2d      	ldr	r2, [pc, #180]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a1c4:	e04d      	b.n	800a262 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1cc:	d141      	bne.n	800a252 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a1ce:	4b28      	ldr	r3, [pc, #160]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a1d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1da:	d131      	bne.n	800a240 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a1dc:	4b24      	ldr	r3, [pc, #144]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1e2:	4a23      	ldr	r2, [pc, #140]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a1ec:	4b20      	ldr	r3, [pc, #128]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a1f4:	4a1e      	ldr	r2, [pc, #120]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a1fc:	4b1d      	ldr	r3, [pc, #116]	; (800a274 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2232      	movs	r2, #50	; 0x32
 800a202:	fb02 f303 	mul.w	r3, r2, r3
 800a206:	4a1c      	ldr	r2, [pc, #112]	; (800a278 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a208:	fba2 2303 	umull	r2, r3, r2, r3
 800a20c:	0c9b      	lsrs	r3, r3, #18
 800a20e:	3301      	adds	r3, #1
 800a210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a212:	e002      	b.n	800a21a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	3b01      	subs	r3, #1
 800a218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a21a:	4b15      	ldr	r3, [pc, #84]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a226:	d102      	bne.n	800a22e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1f2      	bne.n	800a214 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a22e:	4b10      	ldr	r3, [pc, #64]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a23a:	d112      	bne.n	800a262 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a23c:	2303      	movs	r3, #3
 800a23e:	e011      	b.n	800a264 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a240:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a246:	4a0a      	ldr	r2, [pc, #40]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a24c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a250:	e007      	b.n	800a262 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a252:	4b07      	ldr	r3, [pc, #28]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a25a:	4a05      	ldr	r2, [pc, #20]	; (800a270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a25c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a260:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	40007000 	.word	0x40007000
 800a274:	20000004 	.word	0x20000004
 800a278:	431bde83 	.word	0x431bde83

0800a27c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a27c:	b480      	push	{r7}
 800a27e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a280:	4b05      	ldr	r3, [pc, #20]	; (800a298 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	4a04      	ldr	r2, [pc, #16]	; (800a298 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a28a:	6093      	str	r3, [r2, #8]
}
 800a28c:	bf00      	nop
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	40007000 	.word	0x40007000

0800a29c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b088      	sub	sp, #32
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e308      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d075      	beq.n	800a3a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2ba:	4ba3      	ldr	r3, [pc, #652]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f003 030c 	and.w	r3, r3, #12
 800a2c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a2c4:	4ba0      	ldr	r3, [pc, #640]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	f003 0303 	and.w	r3, r3, #3
 800a2cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	2b0c      	cmp	r3, #12
 800a2d2:	d102      	bne.n	800a2da <HAL_RCC_OscConfig+0x3e>
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	d002      	beq.n	800a2e0 <HAL_RCC_OscConfig+0x44>
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	2b08      	cmp	r3, #8
 800a2de:	d10b      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2e0:	4b99      	ldr	r3, [pc, #612]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d05b      	beq.n	800a3a4 <HAL_RCC_OscConfig+0x108>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d157      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e2e3      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a300:	d106      	bne.n	800a310 <HAL_RCC_OscConfig+0x74>
 800a302:	4b91      	ldr	r3, [pc, #580]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a90      	ldr	r2, [pc, #576]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	e01d      	b.n	800a34c <HAL_RCC_OscConfig+0xb0>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a318:	d10c      	bne.n	800a334 <HAL_RCC_OscConfig+0x98>
 800a31a:	4b8b      	ldr	r3, [pc, #556]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a8a      	ldr	r2, [pc, #552]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	4b88      	ldr	r3, [pc, #544]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a87      	ldr	r2, [pc, #540]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a32c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a330:	6013      	str	r3, [r2, #0]
 800a332:	e00b      	b.n	800a34c <HAL_RCC_OscConfig+0xb0>
 800a334:	4b84      	ldr	r3, [pc, #528]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a83      	ldr	r2, [pc, #524]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a33a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a33e:	6013      	str	r3, [r2, #0]
 800a340:	4b81      	ldr	r3, [pc, #516]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a80      	ldr	r2, [pc, #512]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a34a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d013      	beq.n	800a37c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a354:	f7fa fd08 	bl	8004d68 <HAL_GetTick>
 800a358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a35a:	e008      	b.n	800a36e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a35c:	f7fa fd04 	bl	8004d68 <HAL_GetTick>
 800a360:	4602      	mov	r2, r0
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	2b64      	cmp	r3, #100	; 0x64
 800a368:	d901      	bls.n	800a36e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e2a8      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a36e:	4b76      	ldr	r3, [pc, #472]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0f0      	beq.n	800a35c <HAL_RCC_OscConfig+0xc0>
 800a37a:	e014      	b.n	800a3a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a37c:	f7fa fcf4 	bl	8004d68 <HAL_GetTick>
 800a380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a382:	e008      	b.n	800a396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a384:	f7fa fcf0 	bl	8004d68 <HAL_GetTick>
 800a388:	4602      	mov	r2, r0
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	2b64      	cmp	r3, #100	; 0x64
 800a390:	d901      	bls.n	800a396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e294      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a396:	4b6c      	ldr	r3, [pc, #432]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1f0      	bne.n	800a384 <HAL_RCC_OscConfig+0xe8>
 800a3a2:	e000      	b.n	800a3a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 0302 	and.w	r3, r3, #2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d075      	beq.n	800a49e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3b2:	4b65      	ldr	r3, [pc, #404]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 030c 	and.w	r3, r3, #12
 800a3ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a3bc:	4b62      	ldr	r3, [pc, #392]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	f003 0303 	and.w	r3, r3, #3
 800a3c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	2b0c      	cmp	r3, #12
 800a3ca:	d102      	bne.n	800a3d2 <HAL_RCC_OscConfig+0x136>
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d002      	beq.n	800a3d8 <HAL_RCC_OscConfig+0x13c>
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	d11f      	bne.n	800a418 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3d8:	4b5b      	ldr	r3, [pc, #364]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d005      	beq.n	800a3f0 <HAL_RCC_OscConfig+0x154>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e267      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3f0:	4b55      	ldr	r3, [pc, #340]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	061b      	lsls	r3, r3, #24
 800a3fe:	4952      	ldr	r1, [pc, #328]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a400:	4313      	orrs	r3, r2
 800a402:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a404:	4b51      	ldr	r3, [pc, #324]	; (800a54c <HAL_RCC_OscConfig+0x2b0>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fa fc61 	bl	8004cd0 <HAL_InitTick>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d043      	beq.n	800a49c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e253      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d023      	beq.n	800a468 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a420:	4b49      	ldr	r3, [pc, #292]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a48      	ldr	r2, [pc, #288]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a42a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a42c:	f7fa fc9c 	bl	8004d68 <HAL_GetTick>
 800a430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a432:	e008      	b.n	800a446 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a434:	f7fa fc98 	bl	8004d68 <HAL_GetTick>
 800a438:	4602      	mov	r2, r0
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d901      	bls.n	800a446 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e23c      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a446:	4b40      	ldr	r3, [pc, #256]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0f0      	beq.n	800a434 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a452:	4b3d      	ldr	r3, [pc, #244]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	061b      	lsls	r3, r3, #24
 800a460:	4939      	ldr	r1, [pc, #228]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a462:	4313      	orrs	r3, r2
 800a464:	604b      	str	r3, [r1, #4]
 800a466:	e01a      	b.n	800a49e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a468:	4b37      	ldr	r3, [pc, #220]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a36      	ldr	r2, [pc, #216]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a46e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a474:	f7fa fc78 	bl	8004d68 <HAL_GetTick>
 800a478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a47a:	e008      	b.n	800a48e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a47c:	f7fa fc74 	bl	8004d68 <HAL_GetTick>
 800a480:	4602      	mov	r2, r0
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	2b02      	cmp	r3, #2
 800a488:	d901      	bls.n	800a48e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a48a:	2303      	movs	r3, #3
 800a48c:	e218      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a48e:	4b2e      	ldr	r3, [pc, #184]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1f0      	bne.n	800a47c <HAL_RCC_OscConfig+0x1e0>
 800a49a:	e000      	b.n	800a49e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a49c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0308 	and.w	r3, r3, #8
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d03c      	beq.n	800a524 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d01c      	beq.n	800a4ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a4b2:	4b25      	ldr	r3, [pc, #148]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a4b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4b8:	4a23      	ldr	r2, [pc, #140]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a4ba:	f043 0301 	orr.w	r3, r3, #1
 800a4be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4c2:	f7fa fc51 	bl	8004d68 <HAL_GetTick>
 800a4c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a4c8:	e008      	b.n	800a4dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4ca:	f7fa fc4d 	bl	8004d68 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d901      	bls.n	800a4dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e1f1      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a4dc:	4b1a      	ldr	r3, [pc, #104]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a4de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d0ef      	beq.n	800a4ca <HAL_RCC_OscConfig+0x22e>
 800a4ea:	e01b      	b.n	800a524 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a4ec:	4b16      	ldr	r3, [pc, #88]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a4ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4f2:	4a15      	ldr	r2, [pc, #84]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a4f4:	f023 0301 	bic.w	r3, r3, #1
 800a4f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4fc:	f7fa fc34 	bl	8004d68 <HAL_GetTick>
 800a500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a502:	e008      	b.n	800a516 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a504:	f7fa fc30 	bl	8004d68 <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d901      	bls.n	800a516 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e1d4      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a516:	4b0c      	ldr	r3, [pc, #48]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a51c:	f003 0302 	and.w	r3, r3, #2
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1ef      	bne.n	800a504 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 0304 	and.w	r3, r3, #4
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 80ab 	beq.w	800a688 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a532:	2300      	movs	r3, #0
 800a534:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a536:	4b04      	ldr	r3, [pc, #16]	; (800a548 <HAL_RCC_OscConfig+0x2ac>)
 800a538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a53a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d106      	bne.n	800a550 <HAL_RCC_OscConfig+0x2b4>
 800a542:	2301      	movs	r3, #1
 800a544:	e005      	b.n	800a552 <HAL_RCC_OscConfig+0x2b6>
 800a546:	bf00      	nop
 800a548:	40021000 	.word	0x40021000
 800a54c:	20000008 	.word	0x20000008
 800a550:	2300      	movs	r3, #0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00d      	beq.n	800a572 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a556:	4baf      	ldr	r3, [pc, #700]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55a:	4aae      	ldr	r2, [pc, #696]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a55c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a560:	6593      	str	r3, [r2, #88]	; 0x58
 800a562:	4bac      	ldr	r3, [pc, #688]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a56e:	2301      	movs	r3, #1
 800a570:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a572:	4ba9      	ldr	r3, [pc, #676]	; (800a818 <HAL_RCC_OscConfig+0x57c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d118      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a57e:	4ba6      	ldr	r3, [pc, #664]	; (800a818 <HAL_RCC_OscConfig+0x57c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4aa5      	ldr	r2, [pc, #660]	; (800a818 <HAL_RCC_OscConfig+0x57c>)
 800a584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a58a:	f7fa fbed 	bl	8004d68 <HAL_GetTick>
 800a58e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a590:	e008      	b.n	800a5a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a592:	f7fa fbe9 	bl	8004d68 <HAL_GetTick>
 800a596:	4602      	mov	r2, r0
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d901      	bls.n	800a5a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	e18d      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5a4:	4b9c      	ldr	r3, [pc, #624]	; (800a818 <HAL_RCC_OscConfig+0x57c>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0f0      	beq.n	800a592 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d108      	bne.n	800a5ca <HAL_RCC_OscConfig+0x32e>
 800a5b8:	4b96      	ldr	r3, [pc, #600]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a5ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5be:	4a95      	ldr	r2, [pc, #596]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a5c0:	f043 0301 	orr.w	r3, r3, #1
 800a5c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a5c8:	e024      	b.n	800a614 <HAL_RCC_OscConfig+0x378>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	2b05      	cmp	r3, #5
 800a5d0:	d110      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x358>
 800a5d2:	4b90      	ldr	r3, [pc, #576]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d8:	4a8e      	ldr	r2, [pc, #568]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a5da:	f043 0304 	orr.w	r3, r3, #4
 800a5de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a5e2:	4b8c      	ldr	r3, [pc, #560]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5e8:	4a8a      	ldr	r2, [pc, #552]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a5ea:	f043 0301 	orr.w	r3, r3, #1
 800a5ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a5f2:	e00f      	b.n	800a614 <HAL_RCC_OscConfig+0x378>
 800a5f4:	4b87      	ldr	r3, [pc, #540]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a5f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5fa:	4a86      	ldr	r2, [pc, #536]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a5fc:	f023 0301 	bic.w	r3, r3, #1
 800a600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a604:	4b83      	ldr	r3, [pc, #524]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a60a:	4a82      	ldr	r2, [pc, #520]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a60c:	f023 0304 	bic.w	r3, r3, #4
 800a610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d016      	beq.n	800a64a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a61c:	f7fa fba4 	bl	8004d68 <HAL_GetTick>
 800a620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a622:	e00a      	b.n	800a63a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a624:	f7fa fba0 	bl	8004d68 <HAL_GetTick>
 800a628:	4602      	mov	r2, r0
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a632:	4293      	cmp	r3, r2
 800a634:	d901      	bls.n	800a63a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a636:	2303      	movs	r3, #3
 800a638:	e142      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a63a:	4b76      	ldr	r3, [pc, #472]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a640:	f003 0302 	and.w	r3, r3, #2
 800a644:	2b00      	cmp	r3, #0
 800a646:	d0ed      	beq.n	800a624 <HAL_RCC_OscConfig+0x388>
 800a648:	e015      	b.n	800a676 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a64a:	f7fa fb8d 	bl	8004d68 <HAL_GetTick>
 800a64e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a650:	e00a      	b.n	800a668 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a652:	f7fa fb89 	bl	8004d68 <HAL_GetTick>
 800a656:	4602      	mov	r2, r0
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a660:	4293      	cmp	r3, r2
 800a662:	d901      	bls.n	800a668 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a664:	2303      	movs	r3, #3
 800a666:	e12b      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a668:	4b6a      	ldr	r3, [pc, #424]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a66e:	f003 0302 	and.w	r3, r3, #2
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1ed      	bne.n	800a652 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a676:	7ffb      	ldrb	r3, [r7, #31]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d105      	bne.n	800a688 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a67c:	4b65      	ldr	r3, [pc, #404]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a67e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a680:	4a64      	ldr	r2, [pc, #400]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a686:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0320 	and.w	r3, r3, #32
 800a690:	2b00      	cmp	r3, #0
 800a692:	d03c      	beq.n	800a70e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d01c      	beq.n	800a6d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a69c:	4b5d      	ldr	r3, [pc, #372]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a69e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6a2:	4a5c      	ldr	r2, [pc, #368]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a6a4:	f043 0301 	orr.w	r3, r3, #1
 800a6a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6ac:	f7fa fb5c 	bl	8004d68 <HAL_GetTick>
 800a6b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a6b2:	e008      	b.n	800a6c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a6b4:	f7fa fb58 	bl	8004d68 <HAL_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d901      	bls.n	800a6c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	e0fc      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a6c6:	4b53      	ldr	r3, [pc, #332]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a6c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d0ef      	beq.n	800a6b4 <HAL_RCC_OscConfig+0x418>
 800a6d4:	e01b      	b.n	800a70e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a6d6:	4b4f      	ldr	r3, [pc, #316]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a6d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6dc:	4a4d      	ldr	r2, [pc, #308]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a6de:	f023 0301 	bic.w	r3, r3, #1
 800a6e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6e6:	f7fa fb3f 	bl	8004d68 <HAL_GetTick>
 800a6ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a6ec:	e008      	b.n	800a700 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a6ee:	f7fa fb3b 	bl	8004d68 <HAL_GetTick>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d901      	bls.n	800a700 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e0df      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a700:	4b44      	ldr	r3, [pc, #272]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a706:	f003 0302 	and.w	r3, r3, #2
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1ef      	bne.n	800a6ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	2b00      	cmp	r3, #0
 800a714:	f000 80d3 	beq.w	800a8be <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a718:	4b3e      	ldr	r3, [pc, #248]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	f003 030c 	and.w	r3, r3, #12
 800a720:	2b0c      	cmp	r3, #12
 800a722:	f000 808d 	beq.w	800a840 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	69db      	ldr	r3, [r3, #28]
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d15a      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a72e:	4b39      	ldr	r3, [pc, #228]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a38      	ldr	r2, [pc, #224]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a734:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a73a:	f7fa fb15 	bl	8004d68 <HAL_GetTick>
 800a73e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a740:	e008      	b.n	800a754 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a742:	f7fa fb11 	bl	8004d68 <HAL_GetTick>
 800a746:	4602      	mov	r2, r0
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d901      	bls.n	800a754 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e0b5      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a754:	4b2f      	ldr	r3, [pc, #188]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1f0      	bne.n	800a742 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a760:	4b2c      	ldr	r3, [pc, #176]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a762:	68da      	ldr	r2, [r3, #12]
 800a764:	4b2d      	ldr	r3, [pc, #180]	; (800a81c <HAL_RCC_OscConfig+0x580>)
 800a766:	4013      	ands	r3, r2
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	6a11      	ldr	r1, [r2, #32]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a770:	3a01      	subs	r2, #1
 800a772:	0112      	lsls	r2, r2, #4
 800a774:	4311      	orrs	r1, r2
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a77a:	0212      	lsls	r2, r2, #8
 800a77c:	4311      	orrs	r1, r2
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a782:	0852      	lsrs	r2, r2, #1
 800a784:	3a01      	subs	r2, #1
 800a786:	0552      	lsls	r2, r2, #21
 800a788:	4311      	orrs	r1, r2
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a78e:	0852      	lsrs	r2, r2, #1
 800a790:	3a01      	subs	r2, #1
 800a792:	0652      	lsls	r2, r2, #25
 800a794:	4311      	orrs	r1, r2
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a79a:	06d2      	lsls	r2, r2, #27
 800a79c:	430a      	orrs	r2, r1
 800a79e:	491d      	ldr	r1, [pc, #116]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7a4:	4b1b      	ldr	r3, [pc, #108]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a1a      	ldr	r2, [pc, #104]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a7aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a7b0:	4b18      	ldr	r3, [pc, #96]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	4a17      	ldr	r2, [pc, #92]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a7b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7bc:	f7fa fad4 	bl	8004d68 <HAL_GetTick>
 800a7c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7c2:	e008      	b.n	800a7d6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7c4:	f7fa fad0 	bl	8004d68 <HAL_GetTick>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d901      	bls.n	800a7d6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e074      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7d6:	4b0f      	ldr	r3, [pc, #60]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d0f0      	beq.n	800a7c4 <HAL_RCC_OscConfig+0x528>
 800a7e2:	e06c      	b.n	800a8be <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7e4:	4b0b      	ldr	r3, [pc, #44]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a0a      	ldr	r2, [pc, #40]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a7ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a7f0:	4b08      	ldr	r3, [pc, #32]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	4a07      	ldr	r2, [pc, #28]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a7f6:	f023 0303 	bic.w	r3, r3, #3
 800a7fa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a7fc:	4b05      	ldr	r3, [pc, #20]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	4a04      	ldr	r2, [pc, #16]	; (800a814 <HAL_RCC_OscConfig+0x578>)
 800a802:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a80a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80c:	f7fa faac 	bl	8004d68 <HAL_GetTick>
 800a810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a812:	e00e      	b.n	800a832 <HAL_RCC_OscConfig+0x596>
 800a814:	40021000 	.word	0x40021000
 800a818:	40007000 	.word	0x40007000
 800a81c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a820:	f7fa faa2 	bl	8004d68 <HAL_GetTick>
 800a824:	4602      	mov	r2, r0
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d901      	bls.n	800a832 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800a82e:	2303      	movs	r3, #3
 800a830:	e046      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a832:	4b25      	ldr	r3, [pc, #148]	; (800a8c8 <HAL_RCC_OscConfig+0x62c>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1f0      	bne.n	800a820 <HAL_RCC_OscConfig+0x584>
 800a83e:	e03e      	b.n	800a8be <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d101      	bne.n	800a84c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e039      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a84c:	4b1e      	ldr	r3, [pc, #120]	; (800a8c8 <HAL_RCC_OscConfig+0x62c>)
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f003 0203 	and.w	r2, r3, #3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d12c      	bne.n	800a8ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86a:	3b01      	subs	r3, #1
 800a86c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a86e:	429a      	cmp	r2, r3
 800a870:	d123      	bne.n	800a8ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a87e:	429a      	cmp	r2, r3
 800a880:	d11b      	bne.n	800a8ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a88e:	429a      	cmp	r2, r3
 800a890:	d113      	bne.n	800a8ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89c:	085b      	lsrs	r3, r3, #1
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d109      	bne.n	800a8ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b0:	085b      	lsrs	r3, r3, #1
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d001      	beq.n	800a8be <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e000      	b.n	800a8c0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3720      	adds	r7, #32
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	40021000 	.word	0x40021000

0800a8cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e11e      	b.n	800ab22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8e4:	4b91      	ldr	r3, [pc, #580]	; (800ab2c <HAL_RCC_ClockConfig+0x260>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 030f 	and.w	r3, r3, #15
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d910      	bls.n	800a914 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8f2:	4b8e      	ldr	r3, [pc, #568]	; (800ab2c <HAL_RCC_ClockConfig+0x260>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f023 020f 	bic.w	r2, r3, #15
 800a8fa:	498c      	ldr	r1, [pc, #560]	; (800ab2c <HAL_RCC_ClockConfig+0x260>)
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a902:	4b8a      	ldr	r3, [pc, #552]	; (800ab2c <HAL_RCC_ClockConfig+0x260>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 030f 	and.w	r3, r3, #15
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d001      	beq.n	800a914 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	e106      	b.n	800ab22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d073      	beq.n	800aa08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	2b03      	cmp	r3, #3
 800a926:	d129      	bne.n	800a97c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a928:	4b81      	ldr	r3, [pc, #516]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e0f4      	b.n	800ab22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a938:	f000 f988 	bl	800ac4c <RCC_GetSysClockFreqFromPLLSource>
 800a93c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	4a7c      	ldr	r2, [pc, #496]	; (800ab34 <HAL_RCC_ClockConfig+0x268>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d93f      	bls.n	800a9c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a946:	4b7a      	ldr	r3, [pc, #488]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d009      	beq.n	800a966 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d033      	beq.n	800a9c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a962:	2b00      	cmp	r3, #0
 800a964:	d12f      	bne.n	800a9c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a966:	4b72      	ldr	r3, [pc, #456]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a96e:	4a70      	ldr	r2, [pc, #448]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800a970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a974:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a976:	2380      	movs	r3, #128	; 0x80
 800a978:	617b      	str	r3, [r7, #20]
 800a97a:	e024      	b.n	800a9c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	2b02      	cmp	r3, #2
 800a982:	d107      	bne.n	800a994 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a984:	4b6a      	ldr	r3, [pc, #424]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d109      	bne.n	800a9a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e0c6      	b.n	800ab22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a994:	4b66      	ldr	r3, [pc, #408]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e0be      	b.n	800ab22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a9a4:	f000 f8ce 	bl	800ab44 <HAL_RCC_GetSysClockFreq>
 800a9a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	4a61      	ldr	r2, [pc, #388]	; (800ab34 <HAL_RCC_ClockConfig+0x268>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d909      	bls.n	800a9c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a9b2:	4b5f      	ldr	r3, [pc, #380]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9ba:	4a5d      	ldr	r2, [pc, #372]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800a9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a9c2:	2380      	movs	r3, #128	; 0x80
 800a9c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a9c6:	4b5a      	ldr	r3, [pc, #360]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	f023 0203 	bic.w	r2, r3, #3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	4957      	ldr	r1, [pc, #348]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9d8:	f7fa f9c6 	bl	8004d68 <HAL_GetTick>
 800a9dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9de:	e00a      	b.n	800a9f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9e0:	f7fa f9c2 	bl	8004d68 <HAL_GetTick>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d901      	bls.n	800a9f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	e095      	b.n	800ab22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9f6:	4b4e      	ldr	r3, [pc, #312]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f003 020c 	and.w	r2, r3, #12
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d1eb      	bne.n	800a9e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d023      	beq.n	800aa5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 0304 	and.w	r3, r3, #4
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d005      	beq.n	800aa2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aa20:	4b43      	ldr	r3, [pc, #268]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	4a42      	ldr	r2, [pc, #264]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aa26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800aa2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0308 	and.w	r3, r3, #8
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d007      	beq.n	800aa48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800aa38:	4b3d      	ldr	r3, [pc, #244]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aa40:	4a3b      	ldr	r2, [pc, #236]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aa42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800aa46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa48:	4b39      	ldr	r3, [pc, #228]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	4936      	ldr	r1, [pc, #216]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	608b      	str	r3, [r1, #8]
 800aa5a:	e008      	b.n	800aa6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b80      	cmp	r3, #128	; 0x80
 800aa60:	d105      	bne.n	800aa6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800aa62:	4b33      	ldr	r3, [pc, #204]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	4a32      	ldr	r2, [pc, #200]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aa68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa6e:	4b2f      	ldr	r3, [pc, #188]	; (800ab2c <HAL_RCC_ClockConfig+0x260>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 030f 	and.w	r3, r3, #15
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d21d      	bcs.n	800aab8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa7c:	4b2b      	ldr	r3, [pc, #172]	; (800ab2c <HAL_RCC_ClockConfig+0x260>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f023 020f 	bic.w	r2, r3, #15
 800aa84:	4929      	ldr	r1, [pc, #164]	; (800ab2c <HAL_RCC_ClockConfig+0x260>)
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800aa8c:	f7fa f96c 	bl	8004d68 <HAL_GetTick>
 800aa90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa92:	e00a      	b.n	800aaaa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa94:	f7fa f968 	bl	8004d68 <HAL_GetTick>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d901      	bls.n	800aaaa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e03b      	b.n	800ab22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaaa:	4b20      	ldr	r3, [pc, #128]	; (800ab2c <HAL_RCC_ClockConfig+0x260>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 030f 	and.w	r3, r3, #15
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d1ed      	bne.n	800aa94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d008      	beq.n	800aad6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aac4:	4b1a      	ldr	r3, [pc, #104]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	4917      	ldr	r1, [pc, #92]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 0308 	and.w	r3, r3, #8
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d009      	beq.n	800aaf6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aae2:	4b13      	ldr	r3, [pc, #76]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	00db      	lsls	r3, r3, #3
 800aaf0:	490f      	ldr	r1, [pc, #60]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aaf6:	f000 f825 	bl	800ab44 <HAL_RCC_GetSysClockFreq>
 800aafa:	4601      	mov	r1, r0
 800aafc:	4b0c      	ldr	r3, [pc, #48]	; (800ab30 <HAL_RCC_ClockConfig+0x264>)
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	091b      	lsrs	r3, r3, #4
 800ab02:	f003 030f 	and.w	r3, r3, #15
 800ab06:	4a0c      	ldr	r2, [pc, #48]	; (800ab38 <HAL_RCC_ClockConfig+0x26c>)
 800ab08:	5cd3      	ldrb	r3, [r2, r3]
 800ab0a:	f003 031f 	and.w	r3, r3, #31
 800ab0e:	fa21 f303 	lsr.w	r3, r1, r3
 800ab12:	4a0a      	ldr	r2, [pc, #40]	; (800ab3c <HAL_RCC_ClockConfig+0x270>)
 800ab14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ab16:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <HAL_RCC_ClockConfig+0x274>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fa f8d8 	bl	8004cd0 <HAL_InitTick>
 800ab20:	4603      	mov	r3, r0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	40022000 	.word	0x40022000
 800ab30:	40021000 	.word	0x40021000
 800ab34:	04c4b400 	.word	0x04c4b400
 800ab38:	0800c7e0 	.word	0x0800c7e0
 800ab3c:	20000004 	.word	0x20000004
 800ab40:	20000008 	.word	0x20000008

0800ab44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ab4a:	4b2c      	ldr	r3, [pc, #176]	; (800abfc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	f003 030c 	and.w	r3, r3, #12
 800ab52:	2b04      	cmp	r3, #4
 800ab54:	d102      	bne.n	800ab5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ab56:	4b2a      	ldr	r3, [pc, #168]	; (800ac00 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ab58:	613b      	str	r3, [r7, #16]
 800ab5a:	e047      	b.n	800abec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ab5c:	4b27      	ldr	r3, [pc, #156]	; (800abfc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	f003 030c 	and.w	r3, r3, #12
 800ab64:	2b08      	cmp	r3, #8
 800ab66:	d102      	bne.n	800ab6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ab68:	4b26      	ldr	r3, [pc, #152]	; (800ac04 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ab6a:	613b      	str	r3, [r7, #16]
 800ab6c:	e03e      	b.n	800abec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ab6e:	4b23      	ldr	r3, [pc, #140]	; (800abfc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f003 030c 	and.w	r3, r3, #12
 800ab76:	2b0c      	cmp	r3, #12
 800ab78:	d136      	bne.n	800abe8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ab7a:	4b20      	ldr	r3, [pc, #128]	; (800abfc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	f003 0303 	and.w	r3, r3, #3
 800ab82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ab84:	4b1d      	ldr	r3, [pc, #116]	; (800abfc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	091b      	lsrs	r3, r3, #4
 800ab8a:	f003 030f 	and.w	r3, r3, #15
 800ab8e:	3301      	adds	r3, #1
 800ab90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2b03      	cmp	r3, #3
 800ab96:	d10c      	bne.n	800abb2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ab98:	4a1a      	ldr	r2, [pc, #104]	; (800ac04 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba0:	4a16      	ldr	r2, [pc, #88]	; (800abfc <HAL_RCC_GetSysClockFreq+0xb8>)
 800aba2:	68d2      	ldr	r2, [r2, #12]
 800aba4:	0a12      	lsrs	r2, r2, #8
 800aba6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800abaa:	fb02 f303 	mul.w	r3, r2, r3
 800abae:	617b      	str	r3, [r7, #20]
      break;
 800abb0:	e00c      	b.n	800abcc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800abb2:	4a13      	ldr	r2, [pc, #76]	; (800ac00 <HAL_RCC_GetSysClockFreq+0xbc>)
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abba:	4a10      	ldr	r2, [pc, #64]	; (800abfc <HAL_RCC_GetSysClockFreq+0xb8>)
 800abbc:	68d2      	ldr	r2, [r2, #12]
 800abbe:	0a12      	lsrs	r2, r2, #8
 800abc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800abc4:	fb02 f303 	mul.w	r3, r2, r3
 800abc8:	617b      	str	r3, [r7, #20]
      break;
 800abca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800abcc:	4b0b      	ldr	r3, [pc, #44]	; (800abfc <HAL_RCC_GetSysClockFreq+0xb8>)
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	0e5b      	lsrs	r3, r3, #25
 800abd2:	f003 0303 	and.w	r3, r3, #3
 800abd6:	3301      	adds	r3, #1
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe4:	613b      	str	r3, [r7, #16]
 800abe6:	e001      	b.n	800abec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800abe8:	2300      	movs	r3, #0
 800abea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800abec:	693b      	ldr	r3, [r7, #16]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	371c      	adds	r7, #28
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	40021000 	.word	0x40021000
 800ac00:	00f42400 	.word	0x00f42400
 800ac04:	007a1200 	.word	0x007a1200

0800ac08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac0c:	4b03      	ldr	r3, [pc, #12]	; (800ac1c <HAL_RCC_GetHCLKFreq+0x14>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	20000004 	.word	0x20000004

0800ac20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ac24:	f7ff fff0 	bl	800ac08 <HAL_RCC_GetHCLKFreq>
 800ac28:	4601      	mov	r1, r0
 800ac2a:	4b06      	ldr	r3, [pc, #24]	; (800ac44 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	0adb      	lsrs	r3, r3, #11
 800ac30:	f003 0307 	and.w	r3, r3, #7
 800ac34:	4a04      	ldr	r2, [pc, #16]	; (800ac48 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac36:	5cd3      	ldrb	r3, [r2, r3]
 800ac38:	f003 031f 	and.w	r3, r3, #31
 800ac3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	40021000 	.word	0x40021000
 800ac48:	0800c7f0 	.word	0x0800c7f0

0800ac4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ac52:	4b1e      	ldr	r3, [pc, #120]	; (800accc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	f003 0303 	and.w	r3, r3, #3
 800ac5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ac5c:	4b1b      	ldr	r3, [pc, #108]	; (800accc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	091b      	lsrs	r3, r3, #4
 800ac62:	f003 030f 	and.w	r3, r3, #15
 800ac66:	3301      	adds	r3, #1
 800ac68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	2b03      	cmp	r3, #3
 800ac6e:	d10c      	bne.n	800ac8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ac70:	4a17      	ldr	r2, [pc, #92]	; (800acd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac78:	4a14      	ldr	r2, [pc, #80]	; (800accc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ac7a:	68d2      	ldr	r2, [r2, #12]
 800ac7c:	0a12      	lsrs	r2, r2, #8
 800ac7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ac82:	fb02 f303 	mul.w	r3, r2, r3
 800ac86:	617b      	str	r3, [r7, #20]
    break;
 800ac88:	e00c      	b.n	800aca4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ac8a:	4a12      	ldr	r2, [pc, #72]	; (800acd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac92:	4a0e      	ldr	r2, [pc, #56]	; (800accc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ac94:	68d2      	ldr	r2, [r2, #12]
 800ac96:	0a12      	lsrs	r2, r2, #8
 800ac98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ac9c:	fb02 f303 	mul.w	r3, r2, r3
 800aca0:	617b      	str	r3, [r7, #20]
    break;
 800aca2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800aca4:	4b09      	ldr	r3, [pc, #36]	; (800accc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	0e5b      	lsrs	r3, r3, #25
 800acaa:	f003 0303 	and.w	r3, r3, #3
 800acae:	3301      	adds	r3, #1
 800acb0:	005b      	lsls	r3, r3, #1
 800acb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800acb4:	697a      	ldr	r2, [r7, #20]
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800acbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800acbe:	687b      	ldr	r3, [r7, #4]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	371c      	adds	r7, #28
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	40021000 	.word	0x40021000
 800acd0:	007a1200 	.word	0x007a1200
 800acd4:	00f42400 	.word	0x00f42400

0800acd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ace0:	2300      	movs	r3, #0
 800ace2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ace4:	2300      	movs	r3, #0
 800ace6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f000 8098 	beq.w	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800acf6:	2300      	movs	r3, #0
 800acf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800acfa:	4b43      	ldr	r3, [pc, #268]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800acfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10d      	bne.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad06:	4b40      	ldr	r3, [pc, #256]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad0a:	4a3f      	ldr	r2, [pc, #252]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad10:	6593      	str	r3, [r2, #88]	; 0x58
 800ad12:	4b3d      	ldr	r3, [pc, #244]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad1a:	60bb      	str	r3, [r7, #8]
 800ad1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ad22:	4b3a      	ldr	r3, [pc, #232]	; (800ae0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a39      	ldr	r2, [pc, #228]	; (800ae0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ad28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad2e:	f7fa f81b 	bl	8004d68 <HAL_GetTick>
 800ad32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad34:	e009      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad36:	f7fa f817 	bl	8004d68 <HAL_GetTick>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d902      	bls.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ad44:	2303      	movs	r3, #3
 800ad46:	74fb      	strb	r3, [r7, #19]
        break;
 800ad48:	e005      	b.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad4a:	4b30      	ldr	r3, [pc, #192]	; (800ae0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d0ef      	beq.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ad56:	7cfb      	ldrb	r3, [r7, #19]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d159      	bne.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ad5c:	4b2a      	ldr	r3, [pc, #168]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d01e      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d019      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ad78:	4b23      	ldr	r3, [pc, #140]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ad84:	4b20      	ldr	r3, [pc, #128]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad8a:	4a1f      	ldr	r2, [pc, #124]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ad94:	4b1c      	ldr	r3, [pc, #112]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad9a:	4a1b      	ldr	r2, [pc, #108]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ada0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ada4:	4a18      	ldr	r2, [pc, #96]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f003 0301 	and.w	r3, r3, #1
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d016      	beq.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adb6:	f7f9 ffd7 	bl	8004d68 <HAL_GetTick>
 800adba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800adbc:	e00b      	b.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800adbe:	f7f9 ffd3 	bl	8004d68 <HAL_GetTick>
 800adc2:	4602      	mov	r2, r0
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800adcc:	4293      	cmp	r3, r2
 800adce:	d902      	bls.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800add0:	2303      	movs	r3, #3
 800add2:	74fb      	strb	r3, [r7, #19]
            break;
 800add4:	e006      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800add6:	4b0c      	ldr	r3, [pc, #48]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800add8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800addc:	f003 0302 	and.w	r3, r3, #2
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d0ec      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800ade4:	7cfb      	ldrb	r3, [r7, #19]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10b      	bne.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800adea:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800adec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adf8:	4903      	ldr	r1, [pc, #12]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800adfa:	4313      	orrs	r3, r2
 800adfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ae00:	e008      	b.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ae02:	7cfb      	ldrb	r3, [r7, #19]
 800ae04:	74bb      	strb	r3, [r7, #18]
 800ae06:	e005      	b.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ae08:	40021000 	.word	0x40021000
 800ae0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae10:	7cfb      	ldrb	r3, [r7, #19]
 800ae12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ae14:	7c7b      	ldrb	r3, [r7, #17]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d105      	bne.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae1a:	4baf      	ldr	r3, [pc, #700]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ae1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae1e:	4aae      	ldr	r2, [pc, #696]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ae20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0301 	and.w	r3, r3, #1
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00a      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ae32:	4ba9      	ldr	r3, [pc, #676]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ae34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae38:	f023 0203 	bic.w	r2, r3, #3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	49a5      	ldr	r1, [pc, #660]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ae42:	4313      	orrs	r3, r2
 800ae44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00a      	beq.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ae54:	4ba0      	ldr	r3, [pc, #640]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ae56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae5a:	f023 020c 	bic.w	r2, r3, #12
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	499d      	ldr	r1, [pc, #628]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ae64:	4313      	orrs	r3, r2
 800ae66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0304 	and.w	r3, r3, #4
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00a      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ae76:	4b98      	ldr	r3, [pc, #608]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ae78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	4994      	ldr	r1, [pc, #592]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0308 	and.w	r3, r3, #8
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00a      	beq.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ae98:	4b8f      	ldr	r3, [pc, #572]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ae9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	498c      	ldr	r1, [pc, #560]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0310 	and.w	r3, r3, #16
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00a      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800aeba:	4b87      	ldr	r3, [pc, #540]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800aebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	695b      	ldr	r3, [r3, #20]
 800aec8:	4983      	ldr	r1, [pc, #524]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 0320 	and.w	r3, r3, #32
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00a      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aedc:	4b7e      	ldr	r3, [pc, #504]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800aede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	497b      	ldr	r1, [pc, #492]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800aeec:	4313      	orrs	r3, r2
 800aeee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00a      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aefe:	4b76      	ldr	r3, [pc, #472]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	4972      	ldr	r1, [pc, #456]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af0e:	4313      	orrs	r3, r2
 800af10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00a      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800af20:	4b6d      	ldr	r3, [pc, #436]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	496a      	ldr	r1, [pc, #424]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af30:	4313      	orrs	r3, r2
 800af32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00a      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800af42:	4b65      	ldr	r3, [pc, #404]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af50:	4961      	ldr	r1, [pc, #388]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af52:	4313      	orrs	r3, r2
 800af54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00a      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800af64:	4b5c      	ldr	r3, [pc, #368]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af6a:	f023 0203 	bic.w	r2, r3, #3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af72:	4959      	ldr	r1, [pc, #356]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af74:	4313      	orrs	r3, r2
 800af76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00a      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800af86:	4b54      	ldr	r3, [pc, #336]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af94:	4950      	ldr	r1, [pc, #320]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af96:	4313      	orrs	r3, r2
 800af98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d015      	beq.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800afa8:	4b4b      	ldr	r3, [pc, #300]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800afaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb6:	4948      	ldr	r1, [pc, #288]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800afb8:	4313      	orrs	r3, r2
 800afba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afc6:	d105      	bne.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800afc8:	4b43      	ldr	r3, [pc, #268]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	4a42      	ldr	r2, [pc, #264]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800afce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d015      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800afe0:	4b3d      	ldr	r3, [pc, #244]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800afe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afee:	493a      	ldr	r1, [pc, #232]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800aff0:	4313      	orrs	r3, r2
 800aff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800affa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800affe:	d105      	bne.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b000:	4b35      	ldr	r3, [pc, #212]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	4a34      	ldr	r2, [pc, #208]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b00a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d015      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b018:	4b2f      	ldr	r3, [pc, #188]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b01a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b01e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b026:	492c      	ldr	r1, [pc, #176]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b028:	4313      	orrs	r3, r2
 800b02a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b032:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b036:	d105      	bne.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b038:	4b27      	ldr	r3, [pc, #156]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	4a26      	ldr	r2, [pc, #152]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b03e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b042:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d015      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b050:	4b21      	ldr	r3, [pc, #132]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b056:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b05e:	491e      	ldr	r1, [pc, #120]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b060:	4313      	orrs	r3, r2
 800b062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b06a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b06e:	d105      	bne.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b070:	4b19      	ldr	r3, [pc, #100]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	4a18      	ldr	r2, [pc, #96]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b07a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d015      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b088:	4b13      	ldr	r3, [pc, #76]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b08e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b096:	4910      	ldr	r1, [pc, #64]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b098:	4313      	orrs	r3, r2
 800b09a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0a6:	d105      	bne.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b0a8:	4b0b      	ldr	r3, [pc, #44]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	4a0a      	ldr	r2, [pc, #40]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b0ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d018      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b0c0:	4b05      	ldr	r3, [pc, #20]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ce:	4902      	ldr	r1, [pc, #8]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b0d6:	e001      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b0d8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0e4:	d105      	bne.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b0e6:	4b21      	ldr	r3, [pc, #132]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	4a20      	ldr	r2, [pc, #128]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b0ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0f0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d015      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b0fe:	4b1b      	ldr	r3, [pc, #108]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b104:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b10c:	4917      	ldr	r1, [pc, #92]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b11c:	d105      	bne.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b11e:	4b13      	ldr	r3, [pc, #76]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	4a12      	ldr	r2, [pc, #72]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b128:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d015      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b136:	4b0d      	ldr	r3, [pc, #52]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b138:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b13c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b144:	4909      	ldr	r1, [pc, #36]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b146:	4313      	orrs	r3, r2
 800b148:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b154:	d105      	bne.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b156:	4b05      	ldr	r3, [pc, #20]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	4a04      	ldr	r2, [pc, #16]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b15c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b160:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b162:	7cbb      	ldrb	r3, [r7, #18]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	40021000 	.word	0x40021000

0800b170 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d101      	bne.n	800b182 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e027      	b.n	800b1d2 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	7a5b      	ldrb	r3, [r3, #9]
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d105      	bne.n	800b198 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7f9 fae0 	bl	8004758 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2202      	movs	r2, #2
 800b19c:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f023 0108 	bic.w	r1, r3, #8
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685a      	ldr	r2, [r3, #4]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	430a      	orrs	r2, r1
 800b1b2:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f042 0204 	orr.w	r2, r2, #4
 800b1c2:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3708      	adds	r7, #8
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b082      	sub	sp, #8
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e049      	b.n	800b280 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d106      	bne.n	800b206 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7f9 fcb3 	bl	8004b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2202      	movs	r2, #2
 800b20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	3304      	adds	r3, #4
 800b216:	4619      	mov	r1, r3
 800b218:	4610      	mov	r0, r2
 800b21a:	f000 fc57 	bl	800bacc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2201      	movs	r2, #1
 800b25a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2201      	movs	r2, #1
 800b27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d001      	beq.n	800b2a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e054      	b.n	800b34a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68da      	ldr	r2, [r3, #12]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f042 0201 	orr.w	r2, r2, #1
 800b2b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a26      	ldr	r2, [pc, #152]	; (800b358 <HAL_TIM_Base_Start_IT+0xd0>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d022      	beq.n	800b308 <HAL_TIM_Base_Start_IT+0x80>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ca:	d01d      	beq.n	800b308 <HAL_TIM_Base_Start_IT+0x80>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a22      	ldr	r2, [pc, #136]	; (800b35c <HAL_TIM_Base_Start_IT+0xd4>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d018      	beq.n	800b308 <HAL_TIM_Base_Start_IT+0x80>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a21      	ldr	r2, [pc, #132]	; (800b360 <HAL_TIM_Base_Start_IT+0xd8>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d013      	beq.n	800b308 <HAL_TIM_Base_Start_IT+0x80>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a1f      	ldr	r2, [pc, #124]	; (800b364 <HAL_TIM_Base_Start_IT+0xdc>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d00e      	beq.n	800b308 <HAL_TIM_Base_Start_IT+0x80>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a1e      	ldr	r2, [pc, #120]	; (800b368 <HAL_TIM_Base_Start_IT+0xe0>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d009      	beq.n	800b308 <HAL_TIM_Base_Start_IT+0x80>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a1c      	ldr	r2, [pc, #112]	; (800b36c <HAL_TIM_Base_Start_IT+0xe4>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d004      	beq.n	800b308 <HAL_TIM_Base_Start_IT+0x80>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a1b      	ldr	r2, [pc, #108]	; (800b370 <HAL_TIM_Base_Start_IT+0xe8>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d115      	bne.n	800b334 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	689a      	ldr	r2, [r3, #8]
 800b30e:	4b19      	ldr	r3, [pc, #100]	; (800b374 <HAL_TIM_Base_Start_IT+0xec>)
 800b310:	4013      	ands	r3, r2
 800b312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2b06      	cmp	r3, #6
 800b318:	d015      	beq.n	800b346 <HAL_TIM_Base_Start_IT+0xbe>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b320:	d011      	beq.n	800b346 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f042 0201 	orr.w	r2, r2, #1
 800b330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b332:	e008      	b.n	800b346 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f042 0201 	orr.w	r2, r2, #1
 800b342:	601a      	str	r2, [r3, #0]
 800b344:	e000      	b.n	800b348 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b346:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	40012c00 	.word	0x40012c00
 800b35c:	40000400 	.word	0x40000400
 800b360:	40000800 	.word	0x40000800
 800b364:	40000c00 	.word	0x40000c00
 800b368:	40013400 	.word	0x40013400
 800b36c:	40014000 	.word	0x40014000
 800b370:	40015000 	.word	0x40015000
 800b374:	00010007 	.word	0x00010007

0800b378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d109      	bne.n	800b39c <HAL_TIM_PWM_Start+0x24>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b01      	cmp	r3, #1
 800b392:	bf14      	ite	ne
 800b394:	2301      	movne	r3, #1
 800b396:	2300      	moveq	r3, #0
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	e03c      	b.n	800b416 <HAL_TIM_PWM_Start+0x9e>
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	2b04      	cmp	r3, #4
 800b3a0:	d109      	bne.n	800b3b6 <HAL_TIM_PWM_Start+0x3e>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	bf14      	ite	ne
 800b3ae:	2301      	movne	r3, #1
 800b3b0:	2300      	moveq	r3, #0
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	e02f      	b.n	800b416 <HAL_TIM_PWM_Start+0x9e>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b08      	cmp	r3, #8
 800b3ba:	d109      	bne.n	800b3d0 <HAL_TIM_PWM_Start+0x58>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	bf14      	ite	ne
 800b3c8:	2301      	movne	r3, #1
 800b3ca:	2300      	moveq	r3, #0
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	e022      	b.n	800b416 <HAL_TIM_PWM_Start+0x9e>
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	2b0c      	cmp	r3, #12
 800b3d4:	d109      	bne.n	800b3ea <HAL_TIM_PWM_Start+0x72>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	bf14      	ite	ne
 800b3e2:	2301      	movne	r3, #1
 800b3e4:	2300      	moveq	r3, #0
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	e015      	b.n	800b416 <HAL_TIM_PWM_Start+0x9e>
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b10      	cmp	r3, #16
 800b3ee:	d109      	bne.n	800b404 <HAL_TIM_PWM_Start+0x8c>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	bf14      	ite	ne
 800b3fc:	2301      	movne	r3, #1
 800b3fe:	2300      	moveq	r3, #0
 800b400:	b2db      	uxtb	r3, r3
 800b402:	e008      	b.n	800b416 <HAL_TIM_PWM_Start+0x9e>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	bf14      	ite	ne
 800b410:	2301      	movne	r3, #1
 800b412:	2300      	moveq	r3, #0
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d001      	beq.n	800b41e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e0a6      	b.n	800b56c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d104      	bne.n	800b42e <HAL_TIM_PWM_Start+0xb6>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2202      	movs	r2, #2
 800b428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b42c:	e023      	b.n	800b476 <HAL_TIM_PWM_Start+0xfe>
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	2b04      	cmp	r3, #4
 800b432:	d104      	bne.n	800b43e <HAL_TIM_PWM_Start+0xc6>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2202      	movs	r2, #2
 800b438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b43c:	e01b      	b.n	800b476 <HAL_TIM_PWM_Start+0xfe>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b08      	cmp	r3, #8
 800b442:	d104      	bne.n	800b44e <HAL_TIM_PWM_Start+0xd6>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2202      	movs	r2, #2
 800b448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b44c:	e013      	b.n	800b476 <HAL_TIM_PWM_Start+0xfe>
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	2b0c      	cmp	r3, #12
 800b452:	d104      	bne.n	800b45e <HAL_TIM_PWM_Start+0xe6>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2202      	movs	r2, #2
 800b458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b45c:	e00b      	b.n	800b476 <HAL_TIM_PWM_Start+0xfe>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b10      	cmp	r3, #16
 800b462:	d104      	bne.n	800b46e <HAL_TIM_PWM_Start+0xf6>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2202      	movs	r2, #2
 800b468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b46c:	e003      	b.n	800b476 <HAL_TIM_PWM_Start+0xfe>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2202      	movs	r2, #2
 800b472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	2201      	movs	r2, #1
 800b47c:	6839      	ldr	r1, [r7, #0]
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 fc68 	bl	800bd54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a3a      	ldr	r2, [pc, #232]	; (800b574 <HAL_TIM_PWM_Start+0x1fc>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d018      	beq.n	800b4c0 <HAL_TIM_PWM_Start+0x148>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a39      	ldr	r2, [pc, #228]	; (800b578 <HAL_TIM_PWM_Start+0x200>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d013      	beq.n	800b4c0 <HAL_TIM_PWM_Start+0x148>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a37      	ldr	r2, [pc, #220]	; (800b57c <HAL_TIM_PWM_Start+0x204>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d00e      	beq.n	800b4c0 <HAL_TIM_PWM_Start+0x148>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a36      	ldr	r2, [pc, #216]	; (800b580 <HAL_TIM_PWM_Start+0x208>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d009      	beq.n	800b4c0 <HAL_TIM_PWM_Start+0x148>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a34      	ldr	r2, [pc, #208]	; (800b584 <HAL_TIM_PWM_Start+0x20c>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d004      	beq.n	800b4c0 <HAL_TIM_PWM_Start+0x148>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a33      	ldr	r2, [pc, #204]	; (800b588 <HAL_TIM_PWM_Start+0x210>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d101      	bne.n	800b4c4 <HAL_TIM_PWM_Start+0x14c>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e000      	b.n	800b4c6 <HAL_TIM_PWM_Start+0x14e>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d007      	beq.n	800b4da <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a25      	ldr	r2, [pc, #148]	; (800b574 <HAL_TIM_PWM_Start+0x1fc>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d022      	beq.n	800b52a <HAL_TIM_PWM_Start+0x1b2>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4ec:	d01d      	beq.n	800b52a <HAL_TIM_PWM_Start+0x1b2>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a26      	ldr	r2, [pc, #152]	; (800b58c <HAL_TIM_PWM_Start+0x214>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d018      	beq.n	800b52a <HAL_TIM_PWM_Start+0x1b2>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a24      	ldr	r2, [pc, #144]	; (800b590 <HAL_TIM_PWM_Start+0x218>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d013      	beq.n	800b52a <HAL_TIM_PWM_Start+0x1b2>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a23      	ldr	r2, [pc, #140]	; (800b594 <HAL_TIM_PWM_Start+0x21c>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d00e      	beq.n	800b52a <HAL_TIM_PWM_Start+0x1b2>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a19      	ldr	r2, [pc, #100]	; (800b578 <HAL_TIM_PWM_Start+0x200>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d009      	beq.n	800b52a <HAL_TIM_PWM_Start+0x1b2>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a18      	ldr	r2, [pc, #96]	; (800b57c <HAL_TIM_PWM_Start+0x204>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d004      	beq.n	800b52a <HAL_TIM_PWM_Start+0x1b2>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a18      	ldr	r2, [pc, #96]	; (800b588 <HAL_TIM_PWM_Start+0x210>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d115      	bne.n	800b556 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	689a      	ldr	r2, [r3, #8]
 800b530:	4b19      	ldr	r3, [pc, #100]	; (800b598 <HAL_TIM_PWM_Start+0x220>)
 800b532:	4013      	ands	r3, r2
 800b534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2b06      	cmp	r3, #6
 800b53a:	d015      	beq.n	800b568 <HAL_TIM_PWM_Start+0x1f0>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b542:	d011      	beq.n	800b568 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f042 0201 	orr.w	r2, r2, #1
 800b552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b554:	e008      	b.n	800b568 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f042 0201 	orr.w	r2, r2, #1
 800b564:	601a      	str	r2, [r3, #0]
 800b566:	e000      	b.n	800b56a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b568:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	40012c00 	.word	0x40012c00
 800b578:	40013400 	.word	0x40013400
 800b57c:	40014000 	.word	0x40014000
 800b580:	40014400 	.word	0x40014400
 800b584:	40014800 	.word	0x40014800
 800b588:	40015000 	.word	0x40015000
 800b58c:	40000400 	.word	0x40000400
 800b590:	40000800 	.word	0x40000800
 800b594:	40000c00 	.word	0x40000c00
 800b598:	00010007 	.word	0x00010007

0800b59c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	f003 0302 	and.w	r3, r3, #2
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d122      	bne.n	800b5f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	f003 0302 	and.w	r3, r3, #2
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d11b      	bne.n	800b5f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f06f 0202 	mvn.w	r2, #2
 800b5c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	699b      	ldr	r3, [r3, #24]
 800b5d6:	f003 0303 	and.w	r3, r3, #3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d003      	beq.n	800b5e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fa56 	bl	800ba90 <HAL_TIM_IC_CaptureCallback>
 800b5e4:	e005      	b.n	800b5f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fa48 	bl	800ba7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fa59 	bl	800baa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	f003 0304 	and.w	r3, r3, #4
 800b602:	2b04      	cmp	r3, #4
 800b604:	d122      	bne.n	800b64c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	f003 0304 	and.w	r3, r3, #4
 800b610:	2b04      	cmp	r3, #4
 800b612:	d11b      	bne.n	800b64c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f06f 0204 	mvn.w	r2, #4
 800b61c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2202      	movs	r2, #2
 800b622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fa2c 	bl	800ba90 <HAL_TIM_IC_CaptureCallback>
 800b638:	e005      	b.n	800b646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fa1e 	bl	800ba7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fa2f 	bl	800baa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	f003 0308 	and.w	r3, r3, #8
 800b656:	2b08      	cmp	r3, #8
 800b658:	d122      	bne.n	800b6a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	f003 0308 	and.w	r3, r3, #8
 800b664:	2b08      	cmp	r3, #8
 800b666:	d11b      	bne.n	800b6a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f06f 0208 	mvn.w	r2, #8
 800b670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2204      	movs	r2, #4
 800b676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	f003 0303 	and.w	r3, r3, #3
 800b682:	2b00      	cmp	r3, #0
 800b684:	d003      	beq.n	800b68e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fa02 	bl	800ba90 <HAL_TIM_IC_CaptureCallback>
 800b68c:	e005      	b.n	800b69a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f9f4 	bl	800ba7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fa05 	bl	800baa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	f003 0310 	and.w	r3, r3, #16
 800b6aa:	2b10      	cmp	r3, #16
 800b6ac:	d122      	bne.n	800b6f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	f003 0310 	and.w	r3, r3, #16
 800b6b8:	2b10      	cmp	r3, #16
 800b6ba:	d11b      	bne.n	800b6f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f06f 0210 	mvn.w	r2, #16
 800b6c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2208      	movs	r2, #8
 800b6ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	69db      	ldr	r3, [r3, #28]
 800b6d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 f9d8 	bl	800ba90 <HAL_TIM_IC_CaptureCallback>
 800b6e0:	e005      	b.n	800b6ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f9ca 	bl	800ba7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f9db 	bl	800baa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	f003 0301 	and.w	r3, r3, #1
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d10e      	bne.n	800b720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	f003 0301 	and.w	r3, r3, #1
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d107      	bne.n	800b720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f06f 0201 	mvn.w	r2, #1
 800b718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7f8 fd44 	bl	80041a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b72a:	2b80      	cmp	r3, #128	; 0x80
 800b72c:	d10e      	bne.n	800b74c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b738:	2b80      	cmp	r3, #128	; 0x80
 800b73a:	d107      	bne.n	800b74c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fbca 	bl	800bee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b75a:	d10e      	bne.n	800b77a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b766:	2b80      	cmp	r3, #128	; 0x80
 800b768:	d107      	bne.n	800b77a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fbbd 	bl	800bef4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b784:	2b40      	cmp	r3, #64	; 0x40
 800b786:	d10e      	bne.n	800b7a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b792:	2b40      	cmp	r3, #64	; 0x40
 800b794:	d107      	bne.n	800b7a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b79e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f989 	bl	800bab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	f003 0320 	and.w	r3, r3, #32
 800b7b0:	2b20      	cmp	r3, #32
 800b7b2:	d10e      	bne.n	800b7d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	f003 0320 	and.w	r3, r3, #32
 800b7be:	2b20      	cmp	r3, #32
 800b7c0:	d107      	bne.n	800b7d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f06f 0220 	mvn.w	r2, #32
 800b7ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 fb7d 	bl	800becc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7e0:	d10f      	bne.n	800b802 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7f0:	d107      	bne.n	800b802 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800b7fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fb83 	bl	800bf08 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b80c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b810:	d10f      	bne.n	800b832 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b81c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b820:	d107      	bne.n	800b832 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800b82a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fb75 	bl	800bf1c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b83c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b840:	d10f      	bne.n	800b862 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b84c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b850:	d107      	bne.n	800b862 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b85a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fb67 	bl	800bf30 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b86c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b870:	d10f      	bne.n	800b892 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b87c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b880:	d107      	bne.n	800b892 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800b88a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fb59 	bl	800bf44 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b892:	bf00      	nop
 800b894:	3708      	adds	r7, #8
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
	...

0800b89c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d101      	bne.n	800b8b4 <HAL_TIM_ConfigClockSource+0x18>
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	e0d2      	b.n	800ba5a <HAL_TIM_ConfigClockSource+0x1be>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2202      	movs	r2, #2
 800b8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b8d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b8d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8f0:	f000 80a9 	beq.w	800ba46 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8f8:	d81a      	bhi.n	800b930 <HAL_TIM_ConfigClockSource+0x94>
 800b8fa:	2b30      	cmp	r3, #48	; 0x30
 800b8fc:	f000 809a 	beq.w	800ba34 <HAL_TIM_ConfigClockSource+0x198>
 800b900:	2b30      	cmp	r3, #48	; 0x30
 800b902:	d809      	bhi.n	800b918 <HAL_TIM_ConfigClockSource+0x7c>
 800b904:	2b10      	cmp	r3, #16
 800b906:	f000 8095 	beq.w	800ba34 <HAL_TIM_ConfigClockSource+0x198>
 800b90a:	2b20      	cmp	r3, #32
 800b90c:	f000 8092 	beq.w	800ba34 <HAL_TIM_ConfigClockSource+0x198>
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 808f 	beq.w	800ba34 <HAL_TIM_ConfigClockSource+0x198>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b916:	e097      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800b918:	2b50      	cmp	r3, #80	; 0x50
 800b91a:	d05b      	beq.n	800b9d4 <HAL_TIM_ConfigClockSource+0x138>
 800b91c:	2b50      	cmp	r3, #80	; 0x50
 800b91e:	d802      	bhi.n	800b926 <HAL_TIM_ConfigClockSource+0x8a>
 800b920:	2b40      	cmp	r3, #64	; 0x40
 800b922:	d077      	beq.n	800ba14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b924:	e090      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800b926:	2b60      	cmp	r3, #96	; 0x60
 800b928:	d064      	beq.n	800b9f4 <HAL_TIM_ConfigClockSource+0x158>
 800b92a:	2b70      	cmp	r3, #112	; 0x70
 800b92c:	d028      	beq.n	800b980 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800b92e:	e08b      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800b930:	4a4c      	ldr	r2, [pc, #304]	; (800ba64 <HAL_TIM_ConfigClockSource+0x1c8>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d07e      	beq.n	800ba34 <HAL_TIM_ConfigClockSource+0x198>
 800b936:	4a4b      	ldr	r2, [pc, #300]	; (800ba64 <HAL_TIM_ConfigClockSource+0x1c8>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d810      	bhi.n	800b95e <HAL_TIM_ConfigClockSource+0xc2>
 800b93c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b940:	d078      	beq.n	800ba34 <HAL_TIM_ConfigClockSource+0x198>
 800b942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b946:	d803      	bhi.n	800b950 <HAL_TIM_ConfigClockSource+0xb4>
 800b948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b94c:	d02f      	beq.n	800b9ae <HAL_TIM_ConfigClockSource+0x112>
      break;
 800b94e:	e07b      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800b950:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b954:	d06e      	beq.n	800ba34 <HAL_TIM_ConfigClockSource+0x198>
 800b956:	4a44      	ldr	r2, [pc, #272]	; (800ba68 <HAL_TIM_ConfigClockSource+0x1cc>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d06b      	beq.n	800ba34 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800b95c:	e074      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800b95e:	4a43      	ldr	r2, [pc, #268]	; (800ba6c <HAL_TIM_ConfigClockSource+0x1d0>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d067      	beq.n	800ba34 <HAL_TIM_ConfigClockSource+0x198>
 800b964:	4a41      	ldr	r2, [pc, #260]	; (800ba6c <HAL_TIM_ConfigClockSource+0x1d0>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d803      	bhi.n	800b972 <HAL_TIM_ConfigClockSource+0xd6>
 800b96a:	4a41      	ldr	r2, [pc, #260]	; (800ba70 <HAL_TIM_ConfigClockSource+0x1d4>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d061      	beq.n	800ba34 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800b970:	e06a      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800b972:	4a40      	ldr	r2, [pc, #256]	; (800ba74 <HAL_TIM_ConfigClockSource+0x1d8>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d05d      	beq.n	800ba34 <HAL_TIM_ConfigClockSource+0x198>
 800b978:	4a3f      	ldr	r2, [pc, #252]	; (800ba78 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d05a      	beq.n	800ba34 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800b97e:	e063      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6818      	ldr	r0, [r3, #0]
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	6899      	ldr	r1, [r3, #8]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	f000 f9c0 	bl	800bd14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b9a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	609a      	str	r2, [r3, #8]
      break;
 800b9ac:	e04c      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6818      	ldr	r0, [r3, #0]
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	6899      	ldr	r1, [r3, #8]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	f000 f9a9 	bl	800bd14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	689a      	ldr	r2, [r3, #8]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9d0:	609a      	str	r2, [r3, #8]
      break;
 800b9d2:	e039      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6818      	ldr	r0, [r3, #0]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	6859      	ldr	r1, [r3, #4]
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	f000 f91b 	bl	800bc1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2150      	movs	r1, #80	; 0x50
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f000 f974 	bl	800bcda <TIM_ITRx_SetConfig>
      break;
 800b9f2:	e029      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6818      	ldr	r0, [r3, #0]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	6859      	ldr	r1, [r3, #4]
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	461a      	mov	r2, r3
 800ba02:	f000 f93a 	bl	800bc7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2160      	movs	r1, #96	; 0x60
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 f964 	bl	800bcda <TIM_ITRx_SetConfig>
      break;
 800ba12:	e019      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6818      	ldr	r0, [r3, #0]
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	6859      	ldr	r1, [r3, #4]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	461a      	mov	r2, r3
 800ba22:	f000 f8fb 	bl	800bc1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2140      	movs	r1, #64	; 0x40
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 f954 	bl	800bcda <TIM_ITRx_SetConfig>
      break;
 800ba32:	e009      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4610      	mov	r0, r2
 800ba40:	f000 f94b 	bl	800bcda <TIM_ITRx_SetConfig>
        break;
 800ba44:	e000      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800ba46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	00100030 	.word	0x00100030
 800ba68:	00100020 	.word	0x00100020
 800ba6c:	00100050 	.word	0x00100050
 800ba70:	00100040 	.word	0x00100040
 800ba74:	00100060 	.word	0x00100060
 800ba78:	00100070 	.word	0x00100070

0800ba7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba84:	bf00      	nop
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bac0:	bf00      	nop
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a46      	ldr	r2, [pc, #280]	; (800bbf8 <TIM_Base_SetConfig+0x12c>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d017      	beq.n	800bb14 <TIM_Base_SetConfig+0x48>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baea:	d013      	beq.n	800bb14 <TIM_Base_SetConfig+0x48>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a43      	ldr	r2, [pc, #268]	; (800bbfc <TIM_Base_SetConfig+0x130>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d00f      	beq.n	800bb14 <TIM_Base_SetConfig+0x48>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a42      	ldr	r2, [pc, #264]	; (800bc00 <TIM_Base_SetConfig+0x134>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d00b      	beq.n	800bb14 <TIM_Base_SetConfig+0x48>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a41      	ldr	r2, [pc, #260]	; (800bc04 <TIM_Base_SetConfig+0x138>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d007      	beq.n	800bb14 <TIM_Base_SetConfig+0x48>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a40      	ldr	r2, [pc, #256]	; (800bc08 <TIM_Base_SetConfig+0x13c>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d003      	beq.n	800bb14 <TIM_Base_SetConfig+0x48>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a3f      	ldr	r2, [pc, #252]	; (800bc0c <TIM_Base_SetConfig+0x140>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d108      	bne.n	800bb26 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a33      	ldr	r2, [pc, #204]	; (800bbf8 <TIM_Base_SetConfig+0x12c>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d023      	beq.n	800bb76 <TIM_Base_SetConfig+0xaa>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb34:	d01f      	beq.n	800bb76 <TIM_Base_SetConfig+0xaa>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a30      	ldr	r2, [pc, #192]	; (800bbfc <TIM_Base_SetConfig+0x130>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d01b      	beq.n	800bb76 <TIM_Base_SetConfig+0xaa>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a2f      	ldr	r2, [pc, #188]	; (800bc00 <TIM_Base_SetConfig+0x134>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d017      	beq.n	800bb76 <TIM_Base_SetConfig+0xaa>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	4a2e      	ldr	r2, [pc, #184]	; (800bc04 <TIM_Base_SetConfig+0x138>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d013      	beq.n	800bb76 <TIM_Base_SetConfig+0xaa>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4a2d      	ldr	r2, [pc, #180]	; (800bc08 <TIM_Base_SetConfig+0x13c>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d00f      	beq.n	800bb76 <TIM_Base_SetConfig+0xaa>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4a2d      	ldr	r2, [pc, #180]	; (800bc10 <TIM_Base_SetConfig+0x144>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d00b      	beq.n	800bb76 <TIM_Base_SetConfig+0xaa>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4a2c      	ldr	r2, [pc, #176]	; (800bc14 <TIM_Base_SetConfig+0x148>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d007      	beq.n	800bb76 <TIM_Base_SetConfig+0xaa>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4a2b      	ldr	r2, [pc, #172]	; (800bc18 <TIM_Base_SetConfig+0x14c>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d003      	beq.n	800bb76 <TIM_Base_SetConfig+0xaa>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4a26      	ldr	r2, [pc, #152]	; (800bc0c <TIM_Base_SetConfig+0x140>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d108      	bne.n	800bb88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	689a      	ldr	r2, [r3, #8]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a12      	ldr	r2, [pc, #72]	; (800bbf8 <TIM_Base_SetConfig+0x12c>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d013      	beq.n	800bbdc <TIM_Base_SetConfig+0x110>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a14      	ldr	r2, [pc, #80]	; (800bc08 <TIM_Base_SetConfig+0x13c>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d00f      	beq.n	800bbdc <TIM_Base_SetConfig+0x110>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a14      	ldr	r2, [pc, #80]	; (800bc10 <TIM_Base_SetConfig+0x144>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d00b      	beq.n	800bbdc <TIM_Base_SetConfig+0x110>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a13      	ldr	r2, [pc, #76]	; (800bc14 <TIM_Base_SetConfig+0x148>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d007      	beq.n	800bbdc <TIM_Base_SetConfig+0x110>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a12      	ldr	r2, [pc, #72]	; (800bc18 <TIM_Base_SetConfig+0x14c>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d003      	beq.n	800bbdc <TIM_Base_SetConfig+0x110>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a0d      	ldr	r2, [pc, #52]	; (800bc0c <TIM_Base_SetConfig+0x140>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d103      	bne.n	800bbe4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	691a      	ldr	r2, [r3, #16]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	615a      	str	r2, [r3, #20]
}
 800bbea:	bf00      	nop
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	40012c00 	.word	0x40012c00
 800bbfc:	40000400 	.word	0x40000400
 800bc00:	40000800 	.word	0x40000800
 800bc04:	40000c00 	.word	0x40000c00
 800bc08:	40013400 	.word	0x40013400
 800bc0c:	40015000 	.word	0x40015000
 800bc10:	40014000 	.word	0x40014000
 800bc14:	40014400 	.word	0x40014400
 800bc18:	40014800 	.word	0x40014800

0800bc1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6a1b      	ldr	r3, [r3, #32]
 800bc2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6a1b      	ldr	r3, [r3, #32]
 800bc32:	f023 0201 	bic.w	r2, r3, #1
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	699b      	ldr	r3, [r3, #24]
 800bc3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	011b      	lsls	r3, r3, #4
 800bc4c:	693a      	ldr	r2, [r7, #16]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f023 030a 	bic.w	r3, r3, #10
 800bc58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc5a:	697a      	ldr	r2, [r7, #20]
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	621a      	str	r2, [r3, #32]
}
 800bc6e:	bf00      	nop
 800bc70:	371c      	adds	r7, #28
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b087      	sub	sp, #28
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	60f8      	str	r0, [r7, #12]
 800bc82:	60b9      	str	r1, [r7, #8]
 800bc84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	f023 0210 	bic.w	r2, r3, #16
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6a1b      	ldr	r3, [r3, #32]
 800bc9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bca4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	031b      	lsls	r3, r3, #12
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	4313      	orrs	r3, r2
 800bcae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bcb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	011b      	lsls	r3, r3, #4
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	693a      	ldr	r2, [r7, #16]
 800bccc:	621a      	str	r2, [r3, #32]
}
 800bcce:	bf00      	nop
 800bcd0:	371c      	adds	r7, #28
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b085      	sub	sp, #20
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800bcf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	f043 0307 	orr.w	r3, r3, #7
 800bd00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	609a      	str	r2, [r3, #8]
}
 800bd08:	bf00      	nop
 800bd0a:	3714      	adds	r7, #20
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b087      	sub	sp, #28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	021a      	lsls	r2, r3, #8
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	431a      	orrs	r2, r3
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	697a      	ldr	r2, [r7, #20]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	697a      	ldr	r2, [r7, #20]
 800bd46:	609a      	str	r2, [r3, #8]
}
 800bd48:	bf00      	nop
 800bd4a:	371c      	adds	r7, #28
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b087      	sub	sp, #28
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	f003 031f 	and.w	r3, r3, #31
 800bd66:	2201      	movs	r2, #1
 800bd68:	fa02 f303 	lsl.w	r3, r2, r3
 800bd6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6a1a      	ldr	r2, [r3, #32]
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	43db      	mvns	r3, r3
 800bd76:	401a      	ands	r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6a1a      	ldr	r2, [r3, #32]
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f003 031f 	and.w	r3, r3, #31
 800bd86:	6879      	ldr	r1, [r7, #4]
 800bd88:	fa01 f303 	lsl.w	r3, r1, r3
 800bd8c:	431a      	orrs	r2, r3
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	621a      	str	r2, [r3, #32]
}
 800bd92:	bf00      	nop
 800bd94:	371c      	adds	r7, #28
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
	...

0800bda0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d101      	bne.n	800bdb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	e074      	b.n	800bea2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2202      	movs	r2, #2
 800bdc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a34      	ldr	r2, [pc, #208]	; (800beb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d009      	beq.n	800bdf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a33      	ldr	r2, [pc, #204]	; (800beb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d004      	beq.n	800bdf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a31      	ldr	r2, [pc, #196]	; (800beb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d108      	bne.n	800be08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bdfc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	68fa      	ldr	r2, [r7, #12]
 800be04:	4313      	orrs	r3, r2
 800be06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800be0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a21      	ldr	r2, [pc, #132]	; (800beb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d022      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be38:	d01d      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a1f      	ldr	r2, [pc, #124]	; (800bebc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d018      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a1d      	ldr	r2, [pc, #116]	; (800bec0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d013      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a1c      	ldr	r2, [pc, #112]	; (800bec4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d00e      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a15      	ldr	r2, [pc, #84]	; (800beb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d009      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a18      	ldr	r2, [pc, #96]	; (800bec8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d004      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a11      	ldr	r2, [pc, #68]	; (800beb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d10c      	bne.n	800be90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	4313      	orrs	r3, r2
 800be86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	40012c00 	.word	0x40012c00
 800beb4:	40013400 	.word	0x40013400
 800beb8:	40015000 	.word	0x40015000
 800bebc:	40000400 	.word	0x40000400
 800bec0:	40000800 	.word	0x40000800
 800bec4:	40000c00 	.word	0x40000c00
 800bec8:	40014000 	.word	0x40014000

0800becc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bf24:	bf00      	nop
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bf38:	bf00      	nop
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bf4c:	bf00      	nop
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <__libc_init_array>:
 800bf58:	b570      	push	{r4, r5, r6, lr}
 800bf5a:	4e0d      	ldr	r6, [pc, #52]	; (800bf90 <__libc_init_array+0x38>)
 800bf5c:	4c0d      	ldr	r4, [pc, #52]	; (800bf94 <__libc_init_array+0x3c>)
 800bf5e:	1ba4      	subs	r4, r4, r6
 800bf60:	10a4      	asrs	r4, r4, #2
 800bf62:	2500      	movs	r5, #0
 800bf64:	42a5      	cmp	r5, r4
 800bf66:	d109      	bne.n	800bf7c <__libc_init_array+0x24>
 800bf68:	4e0b      	ldr	r6, [pc, #44]	; (800bf98 <__libc_init_array+0x40>)
 800bf6a:	4c0c      	ldr	r4, [pc, #48]	; (800bf9c <__libc_init_array+0x44>)
 800bf6c:	f000 f82c 	bl	800bfc8 <_init>
 800bf70:	1ba4      	subs	r4, r4, r6
 800bf72:	10a4      	asrs	r4, r4, #2
 800bf74:	2500      	movs	r5, #0
 800bf76:	42a5      	cmp	r5, r4
 800bf78:	d105      	bne.n	800bf86 <__libc_init_array+0x2e>
 800bf7a:	bd70      	pop	{r4, r5, r6, pc}
 800bf7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf80:	4798      	blx	r3
 800bf82:	3501      	adds	r5, #1
 800bf84:	e7ee      	b.n	800bf64 <__libc_init_array+0xc>
 800bf86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf8a:	4798      	blx	r3
 800bf8c:	3501      	adds	r5, #1
 800bf8e:	e7f2      	b.n	800bf76 <__libc_init_array+0x1e>
 800bf90:	0800c7f8 	.word	0x0800c7f8
 800bf94:	0800c7f8 	.word	0x0800c7f8
 800bf98:	0800c7f8 	.word	0x0800c7f8
 800bf9c:	0800c7fc 	.word	0x0800c7fc

0800bfa0 <memcpy>:
 800bfa0:	b510      	push	{r4, lr}
 800bfa2:	1e43      	subs	r3, r0, #1
 800bfa4:	440a      	add	r2, r1
 800bfa6:	4291      	cmp	r1, r2
 800bfa8:	d100      	bne.n	800bfac <memcpy+0xc>
 800bfaa:	bd10      	pop	{r4, pc}
 800bfac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfb4:	e7f7      	b.n	800bfa6 <memcpy+0x6>

0800bfb6 <memset>:
 800bfb6:	4402      	add	r2, r0
 800bfb8:	4603      	mov	r3, r0
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d100      	bne.n	800bfc0 <memset+0xa>
 800bfbe:	4770      	bx	lr
 800bfc0:	f803 1b01 	strb.w	r1, [r3], #1
 800bfc4:	e7f9      	b.n	800bfba <memset+0x4>
	...

0800bfc8 <_init>:
 800bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfca:	bf00      	nop
 800bfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfce:	bc08      	pop	{r3}
 800bfd0:	469e      	mov	lr, r3
 800bfd2:	4770      	bx	lr

0800bfd4 <_fini>:
 800bfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd6:	bf00      	nop
 800bfd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfda:	bc08      	pop	{r3}
 800bfdc:	469e      	mov	lr, r3
 800bfde:	4770      	bx	lr
