
Eltek_Control_v.1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf70  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000818  0800d148  0800d148  0001d148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d960  0800d960  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d960  0800d960  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d960  0800d960  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d960  0800d960  0001d960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d964  0800d964  0001d964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800d968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b9e8  2000002c  0800d994  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ba14  0800d994  0002ba14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028a2a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ac9  00000000  00000000  00048a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f28  00000000  00000000  0004d550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ca0  00000000  00000000  0004f478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cb9e  00000000  00000000  00051118  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d514  00000000  00000000  0007dcb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00130aa1  00000000  00000000  0009b1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cbc6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008420  00000000  00000000  001cbce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d130 	.word	0x0800d130

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	0800d130 	.word	0x0800d130

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <DATA_Write_Theta_PLL>:
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DATA_Write_Theta_PLL(float Theta)                             
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	ed87 0a01 	vstr	s0, [r7, #4]

  DATA_theta_PLL=Theta;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <DATA_Write_Theta_PLL+0x1c>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	200000ac 	.word	0x200000ac

08000ab4 <DATA_Read_Theta_PLL>:
  * @retval DATA_theta_PLL (radians)
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
float DATA_Read_Theta_PLL(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  
  return DATA_theta_PLL;
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <DATA_Read_Theta_PLL+0x18>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	ee07 3a90 	vmov	s15, r3
}
 8000ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	200000ac 	.word	0x200000ac

08000ad0 <DATA_CURR_Write_ClarkePark>:
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void DATA_CURR_Write_ClarkePark(TRANSFORM_QDO_t Results_ClarkePark)
                                
 {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	eef0 6a40 	vmov.f32	s13, s0
 8000ada:	eeb0 7a60 	vmov.f32	s14, s1
 8000ade:	eef0 7a41 	vmov.f32	s15, s2
 8000ae2:	edc7 6a01 	vstr	s13, [r7, #4]
 8000ae6:	ed87 7a02 	vstr	s14, [r7, #8]
 8000aea:	edc7 7a03 	vstr	s15, [r7, #12]
                                
DATA_CURR_ClarkePark.axd=Results_ClarkePark.axd;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000af2:	6013      	str	r3, [r2, #0]
DATA_CURR_ClarkePark.axq=Results_ClarkePark.axq;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000af8:	6053      	str	r3, [r2, #4]
DATA_CURR_ClarkePark.axo=Results_ClarkePark.axo;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000afe:	6093      	str	r3, [r2, #8]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	20000080 	.word	0x20000080

08000b10 <DATA_VOLT_Write_ClarkePark>:
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void DATA_VOLT_Write_ClarkePark(TRANSFORM_QDO_t Results_ClarkePark)
                                
 {
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	eef0 6a40 	vmov.f32	s13, s0
 8000b1a:	eeb0 7a60 	vmov.f32	s14, s1
 8000b1e:	eef0 7a41 	vmov.f32	s15, s2
 8000b22:	edc7 6a01 	vstr	s13, [r7, #4]
 8000b26:	ed87 7a02 	vstr	s14, [r7, #8]
 8000b2a:	edc7 7a03 	vstr	s15, [r7, #12]
                                
DATA_VOLT_ClarkePark.axd=Results_ClarkePark.axd;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b32:	6013      	str	r3, [r2, #0]
DATA_VOLT_ClarkePark.axq=Results_ClarkePark.axq;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b38:	6053      	str	r3, [r2, #4]
DATA_VOLT_ClarkePark.axo=Results_ClarkePark.axo;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b3e:	6093      	str	r3, [r2, #8]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	20000094 	.word	0x20000094

08000b50 <DATA_Acquisition_from_DMA>:
* @retval None
*
* @note Function valid for STM32G4xx microconroller family  
*/
void DATA_Acquisition_from_DMA(uint32_t* p_ADC1_Data,uint32_t* p_ADC2_Data)                            
{   
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
//  VDC_ADC.Vdc_pos=p_ADC2_Data[0];
//  VDC_ADC.Vdc_neg=p_ADC2_Data[1];
//#elif STDES_PFCBIDIR_REV2

//T_ext=p_ADC2_Data[2];//////
  T_int=p_ADC1_Data[7];//////
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	331c      	adds	r3, #28
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <DATA_Acquisition_from_DMA+0x74>)
 8000b64:	801a      	strh	r2, [r3, #0]
  //AC Side Voltage
  VAC_ADC.phA=p_ADC1_Data[2];
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <DATA_Acquisition_from_DMA+0x78>)
 8000b6c:	6013      	str	r3, [r2, #0]
  VAC_ADC.phB=p_ADC1_Data[3];
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <DATA_Acquisition_from_DMA+0x78>)
 8000b74:	6053      	str	r3, [r2, #4]
  VAC_ADC.phC=p_ADC1_Data[4];
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <DATA_Acquisition_from_DMA+0x78>)
 8000b7c:	6093      	str	r3, [r2, #8]
  //AC Side Current                           
  IAC_ADC.phA=p_ADC1_Data[0];
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b84:	6013      	str	r3, [r2, #0]
  IAC_ADC.phB=p_ADC1_Data[1];
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b8c:	6053      	str	r3, [r2, #4]

  IAC_ADC.phC = IAC_ADC.phA+IAC_ADC.phB - 2048 ;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b9e:	6093      	str	r3, [r2, #8]

  //IAC_ADC.phC=p_ADC1_Data[];
  // DC Side Current
  //IDC_ADC.IDC_adc=p_ADC1_Data[3];
  //VDC                         
  VDC_ADC.Vdc_pos=p_ADC1_Data[5];
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <DATA_Acquisition_from_DMA+0x80>)
 8000ba6:	6013      	str	r3, [r2, #0]
  VDC_ADC.Vdc_neg=4096-p_ADC1_Data[6];
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3318      	adds	r3, #24
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000bb2:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <DATA_Acquisition_from_DMA+0x80>)
 8000bb4:	6053      	str	r3, [r2, #4]
//  VDC_ADC.Vdc_neg=p_ADC1_Data[7];
//  IDC_ADC.Idc_adc=p_ADC1_Data[8];
//#else
//  SELECT DEFINE
//#endif
} 
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	200000c0 	.word	0x200000c0
 8000bc8:	200000b4 	.word	0x200000b4
 8000bcc:	20000070 	.word	0x20000070
 8000bd0:	2000008c 	.word	0x2000008c

08000bd4 <Read_GRID>:
  * 
  * @retval VAC_ADC, pointer to VoltageAC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
VoltageAC_ADC_Struct* Read_GRID(void){
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return &VAC_ADC;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <Read_GRID+0x10>)
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	200000b4 	.word	0x200000b4

08000be8 <Read_Curr_GRID>:
  * 
  * @retval IAC_ADC, pointer to CurrentAC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
CurrentAC_ADC_Struct* Read_Curr_GRID(void){
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return &IAC_ADC;
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <Read_Curr_GRID+0x10>)
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	20000070 	.word	0x20000070

08000bfc <Read_Curr_DC>:
  * 
  * @retval IAC_ADC, pointer to CurrentDC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
CurrentDC_ADC_Struct* Read_Curr_DC(void){
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return &IDC_ADC;
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <Read_Curr_DC+0x10>)
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	2000007c 	.word	0x2000007c

08000c10 <Read_Volt_DC>:
  * 
  * @retval VDC_ADC, pointer to VoltageDC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
VoltageDC_ADC_Struct* Read_Volt_DC(void){
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return &VDC_ADC;
 8000c14:	4b02      	ldr	r3, [pc, #8]	; (8000c20 <Read_Volt_DC+0x10>)
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	2000008c 	.word	0x2000008c

08000c24 <DPC_FSM_Application>:
  * @brief  Executes converter's state machine task
  * @param  None
  * @retval None
  */
void DPC_FSM_Application(void)
{    
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    /**### Global State Machine */
  switch(DPC_FSM_State){                     
 8000c28:	4b46      	ldr	r3, [pc, #280]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b07      	cmp	r3, #7
 8000c30:	f200 8084 	bhi.w	8000d3c <DPC_FSM_Application+0x118>
 8000c34:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <DPC_FSM_Application+0x18>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c5d 	.word	0x08000c5d
 8000c40:	08000c7d 	.word	0x08000c7d
 8000c44:	08000c9d 	.word	0x08000c9d
 8000c48:	08000cbd 	.word	0x08000cbd
 8000c4c:	08000cdd 	.word	0x08000cdd
 8000c50:	08000cfd 	.word	0x08000cfd
 8000c54:	08000d1d 	.word	0x08000d1d
 8000c58:	08000d37 	.word	0x08000d37
    case DPC_FSM_WAIT:    /** @arg  \a DP_FSM_WAIT state:  ...*/
      //if(checkfault.....  
         if(DPC_FSM_WAIT_Func()){
 8000c5c:	f004 f946 	bl	8004eec <DPC_FSM_WAIT_Func>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d006      	beq.n	8000c74 <DPC_FSM_Application+0x50>
           DPC_FSM_State = DPC_FSM_State_Get();
 8000c66:	f000 f86f 	bl	8000d48 <DPC_FSM_State_Get>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000c70:	701a      	strb	r2, [r3, #0]
         }
         else{
          DPC_FSM_State = DPC_FSM_STOP;
         }
      break;    
 8000c72:	e064      	b.n	8000d3e <DPC_FSM_Application+0x11a>
          DPC_FSM_State = DPC_FSM_STOP;
 8000c74:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000c76:	2205      	movs	r2, #5
 8000c78:	701a      	strb	r2, [r3, #0]
      break;    
 8000c7a:	e060      	b.n	8000d3e <DPC_FSM_Application+0x11a>
    case DPC_FSM_IDLE:    /** @arg  \a DP_FSM_IDLE state:  ... */            
        if(DPC_FSM_IDLE_Func()){
 8000c7c:	f004 f966 	bl	8004f4c <DPC_FSM_IDLE_Func>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <DPC_FSM_Application+0x70>
           DPC_FSM_State = DPC_FSM_State_Get();
 8000c86:	f000 f85f 	bl	8000d48 <DPC_FSM_State_Get>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000c90:	701a      	strb	r2, [r3, #0]
        }
        else{
         DPC_FSM_State = DPC_FSM_STOP;
        }
      break;
 8000c92:	e054      	b.n	8000d3e <DPC_FSM_Application+0x11a>
         DPC_FSM_State = DPC_FSM_STOP;
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000c96:	2205      	movs	r2, #5
 8000c98:	701a      	strb	r2, [r3, #0]
      break;
 8000c9a:	e050      	b.n	8000d3e <DPC_FSM_Application+0x11a>
    case DPC_FSM_INIT:    /** @arg  \a DP_FSM_INIT state: ... */
        
        if(DPC_FSM_INIT_Func()){
 8000c9c:	f004 f98e 	bl	8004fbc <DPC_FSM_INIT_Func>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d006      	beq.n	8000cb4 <DPC_FSM_Application+0x90>
           DPC_FSM_State = DPC_FSM_State_Get();
 8000ca6:	f000 f84f 	bl	8000d48 <DPC_FSM_State_Get>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000cb0:	701a      	strb	r2, [r3, #0]
        }
        else{
         DPC_FSM_State = DPC_FSM_STOP;
        }
      break;      
 8000cb2:	e044      	b.n	8000d3e <DPC_FSM_Application+0x11a>
         DPC_FSM_State = DPC_FSM_STOP;
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000cb6:	2205      	movs	r2, #5
 8000cb8:	701a      	strb	r2, [r3, #0]
      break;      
 8000cba:	e040      	b.n	8000d3e <DPC_FSM_Application+0x11a>
    case DPC_FSM_START:     /**  @arg \a DP_FSM_START state: ... */
        
        if(DPC_FSM_START_Func()){
 8000cbc:	f004 fa1c 	bl	80050f8 <DPC_FSM_START_Func>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d006      	beq.n	8000cd4 <DPC_FSM_Application+0xb0>
           DPC_FSM_State = DPC_FSM_State_Get();
 8000cc6:	f000 f83f 	bl	8000d48 <DPC_FSM_State_Get>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000cd0:	701a      	strb	r2, [r3, #0]
        }
        else{
         DPC_FSM_State = DPC_FSM_STOP;
        }
      break;  
 8000cd2:	e034      	b.n	8000d3e <DPC_FSM_Application+0x11a>
         DPC_FSM_State = DPC_FSM_STOP;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000cd6:	2205      	movs	r2, #5
 8000cd8:	701a      	strb	r2, [r3, #0]
      break;  
 8000cda:	e030      	b.n	8000d3e <DPC_FSM_Application+0x11a>
    case DPC_FSM_RUN:           /** @arg \a DP_FSM_RUN state: ... */  
        
        if(DPC_FSM_RUN_Func()){
 8000cdc:	f004 fa78 	bl	80051d0 <DPC_FSM_RUN_Func>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d006      	beq.n	8000cf4 <DPC_FSM_Application+0xd0>
           DPC_FSM_State = DPC_FSM_State_Get();
 8000ce6:	f000 f82f 	bl	8000d48 <DPC_FSM_State_Get>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000cf0:	701a      	strb	r2, [r3, #0]
        }
        else{
         DPC_FSM_State = DPC_FSM_STOP;
        }
      break;  
 8000cf2:	e024      	b.n	8000d3e <DPC_FSM_Application+0x11a>
         DPC_FSM_State = DPC_FSM_STOP;
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000cf6:	2205      	movs	r2, #5
 8000cf8:	701a      	strb	r2, [r3, #0]
      break;  
 8000cfa:	e020      	b.n	8000d3e <DPC_FSM_Application+0x11a>
    case DPC_FSM_STOP:          /** @arg \a DP_FSM_STOP state: ... */
        
        if(DPC_FSM_STOP_Func()){
 8000cfc:	f004 fabc 	bl	8005278 <DPC_FSM_STOP_Func>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <DPC_FSM_Application+0xf0>
           DPC_FSM_State = DPC_FSM_State_Get();
 8000d06:	f000 f81f 	bl	8000d48 <DPC_FSM_State_Get>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000d10:	701a      	strb	r2, [r3, #0]
        }
        else{
         DPC_FSM_State = DPC_FSM_ERROR;
        }
      break;
 8000d12:	e014      	b.n	8000d3e <DPC_FSM_Application+0x11a>
         DPC_FSM_State = DPC_FSM_ERROR;
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000d16:	2206      	movs	r2, #6
 8000d18:	701a      	strb	r2, [r3, #0]
      break;
 8000d1a:	e010      	b.n	8000d3e <DPC_FSM_Application+0x11a>
    case DPC_FSM_ERROR:         /** @arg \a DP_FSM_FAULT state: ... */
      
        if(DPC_FSM_ERROR_Func()){          
 8000d1c:	f004 faba 	bl	8005294 <DPC_FSM_ERROR_Func>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <DPC_FSM_Application+0x10a>
           DPC_FSM_State = DPC_FSM_FAULT;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000d28:	2207      	movs	r2, #7
 8000d2a:	701a      	strb	r2, [r3, #0]
        }
        else{
         DPC_FSM_State = DPC_FSM_FAULT;
        }
      break;
 8000d2c:	e007      	b.n	8000d3e <DPC_FSM_Application+0x11a>
         DPC_FSM_State = DPC_FSM_FAULT;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <DPC_FSM_Application+0x120>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	701a      	strb	r2, [r3, #0]
      break;
 8000d34:	e003      	b.n	8000d3e <DPC_FSM_Application+0x11a>
    case DPC_FSM_FAULT:         /** @arg \a DP_FSM_FAULT state: ... */
       DPC_FSM_FAULT_Func();
 8000d36:	f004 fb35 	bl	80053a4 <DPC_FSM_FAULT_Func>
      break;
 8000d3a:	e000      	b.n	8000d3e <DPC_FSM_Application+0x11a>
    default:
    break;
 8000d3c:	bf00      	nop
  }
  /*-- end of switch-case State Machine --*/ 
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000048 	.word	0x20000048

08000d48 <DPC_FSM_State_Get>:
  * @brief  DPC_FSM_State_Get: return the new state of FSM
  * @param  None
  * @retval DP_FSM_State_t: new state
  */
DPC_FSM_State_t DPC_FSM_State_Get(void)
{   
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
 return DPC_FSM_NEW_State;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <DPC_FSM_State_Get+0x14>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	20000049 	.word	0x20000049

08000d60 <DPC_FSM_State_Set>:
  * @brief  DPC_FSM_State_Set: Set the new state of FSM
  * @param  DP_FSM_State_t: new state to set
  * @retval none
  */
void DPC_FSM_State_Set(DPC_FSM_State_t eNewStateVal)
{   
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  DPC_FSM_NEW_State = eNewStateVal;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <DPC_FSM_State_Set+0x1c>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	7013      	strb	r3, [r2, #0]
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	20000049 	.word	0x20000049

08000d80 <DPC_FLT_Faulterror_Check>:
  *
  * @retval DPC_FAULTERROR_LIST_TypeDef: error or fault occours, hiest priority
  *
  * @note Function valid for STM32G4xx and STM32F74x microconroller family   
  */
DPC_FAULTERROR_LIST_TypeDef DPC_FLT_Faulterror_Check(void){
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0

DPC_FAULTERROR_LIST_TypeDef uwFaErVecLocal=NO_FAULT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]

if(uwFaultErrorVector != NO_FAULT){
 8000d8a:	4ba0      	ldr	r3, [pc, #640]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8135 	beq.w	8000ffe <DPC_FLT_Faulterror_Check+0x27e>

  if(uwFaultErrorVector & FAULT_OCL){
 8000d94:	4b9d      	ldr	r3, [pc, #628]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <DPC_FLT_Faulterror_Check+0x26>
    uwFaErVecLocal = FAULT_OCL;
 8000da0:	2301      	movs	r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	e12b      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_OVL){
 8000da6:	4b99      	ldr	r3, [pc, #612]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <DPC_FLT_Faulterror_Check+0x38>
    uwFaErVecLocal = FAULT_OVL;
 8000db2:	2302      	movs	r3, #2
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	e122      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_OVC){
 8000db8:	4b94      	ldr	r3, [pc, #592]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <DPC_FLT_Faulterror_Check+0x4a>
    uwFaErVecLocal = FAULT_OVC;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	e119      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_OCS){
 8000dca:	4b90      	ldr	r3, [pc, #576]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d002      	beq.n	8000ddc <DPC_FLT_Faulterror_Check+0x5c>
    uwFaErVecLocal = FAULT_OCS;
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	e110      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_OVS){
 8000ddc:	4b8b      	ldr	r3, [pc, #556]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <DPC_FLT_Faulterror_Check+0x6e>
    uwFaErVecLocal = FAULT_OVS;
 8000de8:	2310      	movs	r3, #16
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	e107      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_INR){
 8000dee:	4b87      	ldr	r3, [pc, #540]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0320 	and.w	r3, r3, #32
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <DPC_FLT_Faulterror_Check+0x80>
    uwFaErVecLocal = FAULT_INR;
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	e0fe      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_BRS){
 8000e00:	4b82      	ldr	r3, [pc, #520]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <DPC_FLT_Faulterror_Check+0x92>
    uwFaErVecLocal = FAULT_BRS;
 8000e0c:	2340      	movs	r3, #64	; 0x40
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	e0f5      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_PLL_OR){
 8000e12:	4b7e      	ldr	r3, [pc, #504]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <DPC_FLT_Faulterror_Check+0xa4>
    uwFaErVecLocal = FAULT_PLL_OR;
 8000e1e:	2380      	movs	r3, #128	; 0x80
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	e0ec      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & FAULT_PFC_UVLO){
 8000e24:	4b79      	ldr	r3, [pc, #484]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <DPC_FLT_Faulterror_Check+0xb8>
    uwFaErVecLocal = FAULT_PFC_UVLO;
 8000e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	e0e2      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & FAULT_IDLE){
 8000e38:	4b74      	ldr	r3, [pc, #464]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <DPC_FLT_Faulterror_Check+0xcc>
    uwFaErVecLocal = FAULT_IDLE;
 8000e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	e0d8      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & FAULT_GEN){
 8000e4c:	4b6f      	ldr	r3, [pc, #444]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <DPC_FLT_Faulterror_Check+0xe0>
    uwFaErVecLocal = FAULT_GEN;
 8000e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	e0ce      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & FAULT_012){
 8000e60:	4b6a      	ldr	r3, [pc, #424]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <DPC_FLT_Faulterror_Check+0xf4>
    uwFaErVecLocal = FAULT_012;
 8000e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	e0c4      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & FAULT_013){
 8000e74:	4b65      	ldr	r3, [pc, #404]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <DPC_FLT_Faulterror_Check+0x108>
    uwFaErVecLocal = FAULT_013;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	e0ba      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & FAULT_014){
 8000e88:	4b60      	ldr	r3, [pc, #384]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <DPC_FLT_Faulterror_Check+0x11c>
    uwFaErVecLocal = FAULT_014;
 8000e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	e0b0      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }    
  else if(uwFaultErrorVector & FAULT_015){
 8000e9c:	4b5b      	ldr	r3, [pc, #364]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <DPC_FLT_Faulterror_Check+0x130>
    uwFaErVecLocal = FAULT_015;
 8000ea8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	e0a6      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }    
  else if(uwFaultErrorVector & FAULT_016){
 8000eb0:	4b56      	ldr	r3, [pc, #344]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <DPC_FLT_Faulterror_Check+0x144>
    uwFaErVecLocal = FAULT_016;
 8000ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	e09c      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }      
  // ADD new Fault Index
  else if(uwFaultErrorVector & ERROR_PLL){
 8000ec4:	4b51      	ldr	r3, [pc, #324]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <DPC_FLT_Faulterror_Check+0x158>
    uwFaErVecLocal = ERROR_PLL;
 8000ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	e092      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & ERROR_IDLE){
 8000ed8:	4b4c      	ldr	r3, [pc, #304]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <DPC_FLT_Faulterror_Check+0x16c>
    uwFaErVecLocal = ERROR_IDLE;
 8000ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	e088      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & ERROR_START_INRS){
 8000eec:	4b47      	ldr	r3, [pc, #284]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <DPC_FLT_Faulterror_Check+0x180>
    uwFaErVecLocal = ERROR_START_INRS;
 8000ef8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	e07e      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_FSM){
 8000f00:	4b42      	ldr	r3, [pc, #264]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <DPC_FLT_Faulterror_Check+0x194>
    uwFaErVecLocal = ERROR_FSM;
 8000f0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	e074      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_PFC_UVLO){
 8000f14:	4b3d      	ldr	r3, [pc, #244]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <DPC_FLT_Faulterror_Check+0x1a8>
    uwFaErVecLocal = ERROR_PFC_UVLO;
 8000f20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	e06a      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_BRS){
 8000f28:	4b38      	ldr	r3, [pc, #224]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <DPC_FLT_Faulterror_Check+0x1bc>
    uwFaErVecLocal = ERROR_BRS;
 8000f34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e060      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_AC_UV){
 8000f3c:	4b33      	ldr	r3, [pc, #204]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <DPC_FLT_Faulterror_Check+0x1d0>
    uwFaErVecLocal = ERROR_AC_UV;
 8000f48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	e056      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_PLL_OR){
 8000f50:	4b2e      	ldr	r3, [pc, #184]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <DPC_FLT_Faulterror_Check+0x1e4>
    uwFaErVecLocal = ERROR_PLL_OR;
 8000f5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	e04c      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_PFC_RUN){
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <DPC_FLT_Faulterror_Check+0x1f8>
    uwFaErVecLocal = ERROR_PFC_RUN;
 8000f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	e042      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_AC_UVLO){
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <DPC_FLT_Faulterror_Check+0x20c>
    uwFaErVecLocal = ERROR_AC_UVLO;
 8000f84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	e038      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_AC_OFF){
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <DPC_FLT_Faulterror_Check+0x220>
    uwFaErVecLocal = ERROR_AC_OFF;
 8000f98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	e02e      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_PFC){
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <DPC_FLT_Faulterror_Check+0x234>
    uwFaErVecLocal = ERROR_PFC;
 8000fac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	e024      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_013){
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <DPC_FLT_Faulterror_Check+0x248>
    uwFaErVecLocal = ERROR_013;
 8000fc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	e01a      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_014){
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <DPC_FLT_Faulterror_Check+0x25c>
    uwFaErVecLocal = ERROR_014;
 8000fd4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	e010      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_015){
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <DPC_FLT_Faulterror_Check+0x270>
    uwFaErVecLocal = ERROR_015;
 8000fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	e006      	b.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_016){
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <DPC_FLT_Faulterror_Check+0x28c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	da02      	bge.n	8000ffe <DPC_FLT_Faulterror_Check+0x27e>
    uwFaErVecLocal = ERROR_016;
 8000ff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ffc:	607b      	str	r3, [r7, #4]
  }  
  // ADD new Error Index
  
}

return uwFaErVecLocal;  
 8000ffe:	687b      	ldr	r3, [r7, #4]
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	200000c4 	.word	0x200000c4

08001010 <DPC_FLT_Faulterror_Set>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx and STM32F74x microconroller family   
  */
void DPC_FLT_Faulterror_Set(DPC_FAULTERROR_LIST_TypeDef eFaulterror){
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uwFaultErrorVector |= eFaulterror;                                                    /*!< Set fault/error in the faulterror vector*/
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <DPC_FLT_Faulterror_Set+0x20>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4313      	orrs	r3, r2
 8001020:	4a03      	ldr	r2, [pc, #12]	; (8001030 <DPC_FLT_Faulterror_Set+0x20>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	200000c4 	.word	0x200000c4

08001034 <DPC_FLT_Error_Reset>:
  *
  * @retval DPC_FAULTERROR_LIST_TypeDef: error or fault occours, hiest priority
  *
  * @note Function valid for STM32G4xx and STM32F74x microconroller family   
  */
DPC_FAULTERROR_STATUS_TypeDef DPC_FLT_Error_Reset(DPC_FAULTERROR_LIST_TypeDef eError){
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

DPC_FAULTERROR_STATUS_TypeDef uwErVecLocal=NO_FAULTERROR;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]

if(uwFaultErrorVector & 0x0000FFFF){
 8001040:	4b68      	ldr	r3, [pc, #416]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	b29b      	uxth	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <DPC_FLT_Error_Reset+0x1c>
  uwErVecLocal = NOT_ERASABLE;
 800104a:	2303      	movs	r3, #3
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e0c2      	b.n	80011d6 <DPC_FLT_Error_Reset+0x1a2>
}
else{
   if(uwFaultErrorVector & ERROR_PLL){
 8001050:	4b64      	ldr	r3, [pc, #400]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <DPC_FLT_Error_Reset+0x34>
      uwFaultErrorVector &= !ERROR_PLL;
 800105c:	4b61      	ldr	r3, [pc, #388]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 8001062:	2305      	movs	r3, #5
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e0b0      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_IDLE){
 8001068:	4b5e      	ldr	r3, [pc, #376]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <DPC_FLT_Error_Reset+0x4c>
      uwFaultErrorVector &= !ERROR_IDLE;
 8001074:	4b5b      	ldr	r3, [pc, #364]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 800107a:	2305      	movs	r3, #5
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e0a4      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }            
    else if(uwFaultErrorVector & ERROR_START_INRS){
 8001080:	4b58      	ldr	r3, [pc, #352]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <DPC_FLT_Error_Reset+0x64>
      uwFaultErrorVector &= !ERROR_START_INRS;
 800108c:	4b55      	ldr	r3, [pc, #340]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 8001092:	2305      	movs	r3, #5
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	e098      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }           
    else if(uwFaultErrorVector & ERROR_FSM){
 8001098:	4b52      	ldr	r3, [pc, #328]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <DPC_FLT_Error_Reset+0x7c>
      uwFaultErrorVector &= !ERROR_FSM;
 80010a4:	4b4f      	ldr	r3, [pc, #316]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 80010aa:	2305      	movs	r3, #5
 80010ac:	73fb      	strb	r3, [r7, #15]
 80010ae:	e08c      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_PFC_UVLO){
 80010b0:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <DPC_FLT_Error_Reset+0x94>
      uwFaultErrorVector &= !ERROR_PFC_UVLO;
 80010bc:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 80010c2:	2305      	movs	r3, #5
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e080      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_BRS){
 80010c8:	4b46      	ldr	r3, [pc, #280]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <DPC_FLT_Error_Reset+0xac>
      uwFaultErrorVector &= !ERROR_BRS;
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 80010da:	2305      	movs	r3, #5
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e074      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_AC_UV){
 80010e0:	4b40      	ldr	r3, [pc, #256]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <DPC_FLT_Error_Reset+0xc4>
      uwFaultErrorVector &= !ERROR_AC_UV;
 80010ec:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 80010f2:	2305      	movs	r3, #5
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	e068      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_PLL_OR){
 80010f8:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <DPC_FLT_Error_Reset+0xdc>
      uwFaultErrorVector &= !ERROR_PLL_OR;
 8001104:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 800110a:	2305      	movs	r3, #5
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e05c      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_PFC_RUN){
 8001110:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <DPC_FLT_Error_Reset+0xf4>
      uwFaultErrorVector &= !ERROR_PFC_RUN;
 800111c:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 8001122:	2305      	movs	r3, #5
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e050      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_AC_UVLO){
 8001128:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <DPC_FLT_Error_Reset+0x10c>
      uwFaultErrorVector &= !ERROR_AC_UVLO;
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 800113a:	2305      	movs	r3, #5
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e044      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_AC_OFF){
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <DPC_FLT_Error_Reset+0x124>
      uwFaultErrorVector &= !ERROR_AC_OFF;
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 8001152:	2305      	movs	r3, #5
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e038      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_PFC){
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <DPC_FLT_Error_Reset+0x13c>
      uwFaultErrorVector &= !ERROR_PFC;
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 800116a:	2305      	movs	r3, #5
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e02c      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_013){
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <DPC_FLT_Error_Reset+0x154>
      uwFaultErrorVector &= !ERROR_013;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 8001182:	2305      	movs	r3, #5
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	e020      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_014){
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <DPC_FLT_Error_Reset+0x16c>
      uwFaultErrorVector &= !ERROR_014;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 800119a:	2305      	movs	r3, #5
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	e014      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_015){
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <DPC_FLT_Error_Reset+0x184>
      uwFaultErrorVector &= !ERROR_015;
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 80011b2:	2305      	movs	r3, #5
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e008      	b.n	80011ca <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_016){
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	da04      	bge.n	80011ca <DPC_FLT_Error_Reset+0x196>
      uwFaultErrorVector &= !ERROR_016;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 80011c6:	2305      	movs	r3, #5
 80011c8:	73fb      	strb	r3, [r7, #15]
    }   
   if(uwFaultErrorVector | 0x00000000){
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <DPC_FLT_Error_Reset+0x1b0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <DPC_FLT_Error_Reset+0x1a2>
    uwErVecLocal = ERASE_ERROR_LIST_NOT_EMPTY;
 80011d2:	2304      	movs	r3, #4
 80011d4:	73fb      	strb	r3, [r7, #15]
  }
}
return uwErVecLocal;  
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	200000c4 	.word	0x200000c4

080011e8 <Current_Decoupling_Control>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void Current_Decoupling_Control(CDC_Struct *pCDC_sub,PI_STRUCT_t *pPI_ID_CURR_CTRL_sub, PI_STRUCT_t *pPI_IQ_CURR_CTRL_sub ,float *pVd_ctrl_FF_sub, float *pVq_ctrl_FF_sub){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b090      	sub	sp, #64	; 0x40
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]

float fomegagrid_sub=pCDC_sub->omegagrid;                                                       ///Omega grid value expressed in Hz - Related to decoupled terms
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
float fInductor_sub=pCDC_sub->Inductor;                                                         ///Inductor value expressed in H - Related to decoupled terms
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
float fId_ref_sub=pCDC_sub->Id_ref;                                                             ///Local variable - d-axis current referance
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
float fIq_ref_sub=pCDC_sub->Iq_ref;                                                             ///Local variable - q-axis current referance
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
float fId_feed_sub=pCDC_sub->Id_feed;                                                           ///Local variable - d-axis current feedback
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
float fIq_feed_sub=pCDC_sub->Iq_feed;                                                           ///Local variable - q-axis current feedback
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
float fVq_Curr_Ctrl_sub;                                                                        ///Local variable - q-axis PI output
float fVd_Decoupling_sub;                                                                       ///Local variable - d-axis decoupling term
float fVq_Decoupling_sub;                                                                       ///Local variable - d-axis decoupling term
//float *pVd_ctrl_FF_sub;                                                                          ///Local variable - d-axis FeefForward term
//float *pVq_ctrl_FF_sub;                                                                          ///Local variable - d-axis FeefForward term
float fVdc_sub=pCDC_sub->Vdc_feed;                                                              ///Local variable - Vdc feedback
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	627b      	str	r3, [r7, #36]	; 0x24

  fVd_Curr_Ctrl_sub=PI(fId_ref_sub, fId_feed_sub , pPI_ID_CURR_CTRL_sub);                       ///d-axis PI regulator block
 8001220:	68b8      	ldr	r0, [r7, #8]
 8001222:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001226:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800122a:	f001 ff39 	bl	80030a0 <PI>
 800122e:	ed87 0a08 	vstr	s0, [r7, #32]
  fVq_Curr_Ctrl_sub=PI(fIq_ref_sub, fIq_feed_sub , pPI_IQ_CURR_CTRL_sub);                       ///q-axis PI regulator block
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001238:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800123c:	f001 ff30 	bl	80030a0 <PI>
 8001240:	ed87 0a07 	vstr	s0, [r7, #28]

  if(pCDC_sub->Decoupling_Enable==SET)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800124a:	2b01      	cmp	r3, #1
 800124c:	d130      	bne.n	80012b0 <Current_Decoupling_Control+0xc8>
  {
  pCDC_sub->Vd_Decoupling=fVd_Decoupling_sub=fIq_feed_sub*fomegagrid_sub*fInductor_sub;         ///d-axis decoupling term block
 800124e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001252:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800125e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001262:	edc7 7a06 	vstr	s15, [r7, #24]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
  pCDC_sub->Vq_Decoupling=fVq_Decoupling_sub=fId_feed_sub*fomegagrid_sub*fInductor_sub;         ///q-axis decoupling term block
 800126c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001270:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001278:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800127c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001280:	edc7 7a05 	vstr	s15, [r7, #20]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
  pCDC_sub->Vd_Curr_Ctrl=(fVd_Curr_Ctrl_sub-fVd_Decoupling_sub);                                ///d-axis decoupling term applied
 800128a:	ed97 7a08 	vldr	s14, [r7, #32]
 800128e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	edc3 7a08 	vstr	s15, [r3, #32]
  pCDC_sub->Vq_Curr_Ctrl=(fVq_Curr_Ctrl_sub+fVq_Decoupling_sub);                                ///q-axis decoupling term applied
 800129c:	ed97 7a07 	vldr	s14, [r7, #28]
 80012a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 80012ae:	e005      	b.n	80012bc <Current_Decoupling_Control+0xd4>
  }
  else
  {
  pCDC_sub->Vd_Curr_Ctrl=fVd_Curr_Ctrl_sub;                                                    ///d-axis decoupling term bypassed
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6a3a      	ldr	r2, [r7, #32]
 80012b4:	621a      	str	r2, [r3, #32]
  pCDC_sub->Vq_Curr_Ctrl=fVq_Curr_Ctrl_sub;                                                    ///q-axis decoupling term bypassed
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24
  }



  if(pCDC_sub->FF_Enable==SET)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d105      	bne.n	80012d2 <Current_Decoupling_Control+0xea>
  {
  FeedForward_Control(pCDC_sub,pVd_ctrl_FF_sub,pVq_ctrl_FF_sub);                                ///dq-axis Feed_Forward applied
 80012c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012c8:	6839      	ldr	r1, [r7, #0]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f837 	bl	800133e <FeedForward_Control>
 80012d0:	e007      	b.n	80012e2 <Current_Decoupling_Control+0xfa>
  }
  else
  {
    *pVd_ctrl_FF_sub=pCDC_sub->Vd_Curr_Ctrl;                                                    ///d-axis Feed_Forward bypassed
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6a1a      	ldr	r2, [r3, #32]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	601a      	str	r2, [r3, #0]
    *pVq_ctrl_FF_sub=pCDC_sub->Vq_Curr_Ctrl;                                                    ///q-axis Feed_Forward bypassed
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012e0:	601a      	str	r2, [r3, #0]
  }

  if(pCDC_sub->VDC_FF_Enable==SET)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d114      	bne.n	8001316 <Current_Decoupling_Control+0x12e>
  {
    *pVd_ctrl_FF_sub=*pVq_ctrl_FF_sub/fVdc_sub;                                                 ///d-axis - Vdc Feed_Forward applied
 80012ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012ee:	edd3 6a00 	vldr	s13, [r3]
 80012f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	edc3 7a00 	vstr	s15, [r3]
    *pVq_ctrl_FF_sub=*pVq_ctrl_FF_sub/fVdc_sub;                                                 ///q-axis - Vdc Feed_Forward applied
 8001300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001302:	edd3 6a00 	vldr	s13, [r3]
 8001306:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800130a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001310:	edc3 7a00 	vstr	s15, [r3]
 8001314:	e007      	b.n	8001326 <Current_Decoupling_Control+0x13e>
  }
  else
  {
    *pVd_ctrl_FF_sub=pCDC_sub->Vd_Curr_Ctrl;                                                    ///d-axis - Vdc Feed_Forward bypassed
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6a1a      	ldr	r2, [r3, #32]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	601a      	str	r2, [r3, #0]
    *pVq_ctrl_FF_sub=pCDC_sub->Vq_Curr_Ctrl;                                                    ///q-axis - Vdc Feed_Forward bypassed
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001324:	601a      	str	r2, [r3, #0]
  }


  *pVd_ctrl_FF_sub=*pVd_ctrl_FF_sub;                                                               ///d-axis Vcontrol CDC output term
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	601a      	str	r2, [r3, #0]
  *pVq_ctrl_FF_sub=*pVq_ctrl_FF_sub;                                                               ///q-axis Vcontrol CDC output term
 800132e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001334:	601a      	str	r2, [r3, #0]

}
 8001336:	bf00      	nop
 8001338:	3740      	adds	r7, #64	; 0x40
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <FeedForward_Control>:
  *
  * @note Function valid for STM32G4xx microconroller family
  */

void FeedForward_Control(CDC_Struct *pCDC_sub,float *pVd_ctrl_FF_sub, float *pVq_ctrl_FF_sub)
{
 800133e:	b480      	push	{r7}
 8001340:	b089      	sub	sp, #36	; 0x24
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
float fVd_feed_sub=pCDC_sub->Vd_feed;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	61fb      	str	r3, [r7, #28]
float fVq_feed_sub=pCDC_sub->Vq_feed;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	61bb      	str	r3, [r7, #24]
float fVd_ctrl_sub=pCDC_sub->Vd_Curr_Ctrl;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	617b      	str	r3, [r7, #20]
float fVq_ctrl_sub=pCDC_sub->Vq_Curr_Ctrl;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	613b      	str	r3, [r7, #16]


pCDC_sub->Vd_ctrl_FF=fVd_feed_sub-fVd_ctrl_sub;
 8001362:	ed97 7a07 	vldr	s14, [r7, #28]
 8001366:	edd7 7a05 	vldr	s15, [r7, #20]
 800136a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
pCDC_sub->Vq_ctrl_FF=fVq_feed_sub-fVq_ctrl_sub;
 8001374:	ed97 7a06 	vldr	s14, [r7, #24]
 8001378:	edd7 7a04 	vldr	s15, [r7, #16]
 800137c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

  *pVd_ctrl_FF_sub=pCDC_sub->Vd_ctrl_FF;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	601a      	str	r2, [r3, #0]
  *pVq_ctrl_FF_sub=pCDC_sub->Vq_ctrl_FF;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
}
 8001396:	bf00      	nop
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <Voltage_Control>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void Voltage_Control(VOLTAGECTRL_Struct *VOLTAGECTRL_sub,PI_STRUCT_t *PI_VDC_CTRL_sub, float *Id_ctrl_sub){
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
  float Vdc_ref_sub=VOLTAGECTRL_sub->Vdc_ref;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	617b      	str	r3, [r7, #20]
  float Vdc_feed_sub=VOLTAGECTRL_sub->Vdc_feed;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	613b      	str	r3, [r7, #16]

  PI(Vdc_ref_sub, Vdc_feed_sub , PI_VDC_CTRL_sub);
 80013ba:	68b8      	ldr	r0, [r7, #8]
 80013bc:	edd7 0a04 	vldr	s1, [r7, #16]
 80013c0:	ed97 0a05 	vldr	s0, [r7, #20]
 80013c4:	f001 fe6c 	bl	80030a0 <PI>
  VOLTAGECTRL_sub->Id_ctrl=PI_VDC_CTRL_sub->PIout_sat;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	69da      	ldr	r2, [r3, #28]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	609a      	str	r2, [r3, #8]
  *Id_ctrl_sub=PI_VDC_CTRL_sub->PIout_sat;
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	69da      	ldr	r2, [r3, #28]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	bf00      	nop
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <DPC_LPCNTRL_PFC_Mode_Reset>:
  * @retval null
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void DPC_LPCNTRL_PFC_Mode_Reset(PI_STRUCT_t *PI_VDC_CTRL, CDC_Struct *CDC)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
        PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <DPC_LPCNTRL_PFC_Mode>:
  * @retval null
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void DPC_LPCNTRL_PFC_Mode(PFC_CTRL_t *pPFC_CTRL_loc, PI_STRUCT_t *PI_VDC_CTRL, VOLTAGECTRL_Struct *VOLTAGECTRL, CDC_Struct *CDC,TRANSFORM_QDO_t *V_DQO_CTRL,TRANSFORM_QDO_t *Current_qdo,TRANSFORM_QDO_t *Voltage_qdo,VoltageDC_ADC_NORM_Struct *VOLTAGE_ADC_DC_IN_PHY)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b08a      	sub	sp, #40	; 0x28
 8001412:	af02      	add	r7, sp, #8
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	603b      	str	r3, [r7, #0]

  float Id_ctrl_sub=0;
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  float Vd_ctrl_FF=0;
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
  float Vq_ctrl_FF=0;
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	617b      	str	r3, [r7, #20]



  pPFC_CTRL_loc->VOLTAGECTRL=*VOLTAGECTRL;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	33ec      	adds	r3, #236	; 0xec
 8001434:	ca07      	ldmia	r2, {r0, r1, r2}
 8001436:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  pPFC_CTRL_loc->CDC=*CDC;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	3314      	adds	r3, #20
 8001440:	4611      	mov	r1, r2
 8001442:	22d8      	movs	r2, #216	; 0xd8
 8001444:	4618      	mov	r0, r3
 8001446:	f00b fe5f 	bl	800d108 <memcpy>

   if(pPFC_CTRL_loc->PFC_CTRL_State==VOLTAGE_LOOP) /// Voltage and Current control closed
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	789b      	ldrb	r3, [r3, #2]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d15c      	bne.n	800150c <DPC_LPCNTRL_PFC_Mode+0xfe>
  {
    PI_VDC_CTRL->resetPI=pPFC_CTRL_loc->VdcCTRL_Reset;          ///Release PI accumulator
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	785a      	ldrb	r2, [r3, #1]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    VOLTAGECTRL->Vdc_ref=pPFC_CTRL_loc->PFC_VDC_Ref;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8a1b      	ldrh	r3, [r3, #16]
 8001460:	ee07 3a90 	vmov	s15, r3
 8001464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	edc3 7a00 	vstr	s15, [r3]
    VOLTAGECTRL->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;
 800146e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	605a      	str	r2, [r3, #4]
    CDC->pPI_ID_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	781a      	ldrb	r2, [r3, #0]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    CDC->Id_feed=Current_qdo->axd;                              ///Pass dq current feedback to CDC struct (d-axis)
 8001494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	611a      	str	r2, [r3, #16]
    CDC->Iq_feed=Current_qdo->axq;                              ///Pass dq current feedback to CDC struct (q-axis)
 800149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	615a      	str	r2, [r3, #20]
    CDC->Vd_feed=Voltage_qdo->axd;                              ///Pass dq voltage feedback to CDC struct (d-axis)
 80014a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
    CDC->Vq_feed=Voltage_qdo->axq;                              ///Pass dq voltage feedback to CDC struct (q-axis)
 80014ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
    CDC->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;               ///Pass DC voltage feedback to CDC struct
 80014b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	639a      	str	r2, [r3, #56]	; 0x38

    Voltage_Control(VOLTAGECTRL, PI_VDC_CTRL,&Id_ctrl_sub);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	461a      	mov	r2, r3
 80014c2:	68b9      	ldr	r1, [r7, #8]
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff6c 	bl	80013a2 <Voltage_Control>
    CDC->Id_ref=Id_ctrl_sub;
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	609a      	str	r2, [r3, #8]
    CDC->Iq_ref=0;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
    Current_Decoupling_Control(CDC,&CDC->pPI_ID_CURR_CTRL,&CDC->pPI_IQ_CURR_CTRL, &Vd_ctrl_FF,&Vq_ctrl_FF);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80014e4:	f107 0018 	add.w	r0, r7, #24
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	4603      	mov	r3, r0
 80014f0:	6838      	ldr	r0, [r7, #0]
 80014f2:	f7ff fe79 	bl	80011e8 <Current_Decoupling_Control>

    V_DQO_CTRL->axd=Vd_ctrl_FF;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fa:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001500:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 8001502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
    V_DQO_CTRL->axd=0;
    V_DQO_CTRL->axq=0;
    V_DQO_CTRL->axo=0;
  }

}
 800150a:	e08e      	b.n	800162a <DPC_LPCNTRL_PFC_Mode+0x21c>
  else if(pPFC_CTRL_loc->PFC_CTRL_State==CURRENT_LOOP) /// Only Current control closed
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d13b      	bne.n	800158c <DPC_LPCNTRL_PFC_Mode+0x17e>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	781a      	ldrb	r2, [r3, #0]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->Id_feed=Current_qdo->axd;                              ///Pass dq current feedback to CDC struct (d-axis)
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	611a      	str	r2, [r3, #16]
    CDC->Iq_feed=Current_qdo->axq;                              ///Pass dq current feedback to CDC struct (q-axis)
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	615a      	str	r2, [r3, #20]
    CDC->Vd_feed=Voltage_qdo->axd;                              ///Pass dq voltage feedback to CDC struct (d-axis)
 8001540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
    CDC->Vq_feed=Voltage_qdo->axq;                              ///Pass dq voltage feedback to CDC struct (q-axis)
 8001548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
    CDC->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;               ///Pass DC voltage feedback to CDC struct
 8001550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	639a      	str	r2, [r3, #56]	; 0x38
    Current_Decoupling_Control(CDC,&CDC->pPI_ID_CURR_CTRL,&CDC->pPI_IQ_CURR_CTRL, &Vd_ctrl_FF,&Vq_ctrl_FF);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8001564:	f107 0018 	add.w	r0, r7, #24
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	4603      	mov	r3, r0
 8001570:	6838      	ldr	r0, [r7, #0]
 8001572:	f7ff fe39 	bl	80011e8 <Current_Decoupling_Control>
    V_DQO_CTRL->axd=Vd_ctrl_FF;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001580:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 8001582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
}
 800158a:	e04e      	b.n	800162a <DPC_LPCNTRL_PFC_Mode+0x21c>
  else if(pPFC_CTRL_loc->PFC_CTRL_State==OPEN_LOOP) /// Open LOOP
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	789b      	ldrb	r3, [r3, #2]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d132      	bne.n	80015fa <DPC_LPCNTRL_PFC_Mode+0x1ec>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->Vd_Curr_Ctrl=pPFC_CTRL_loc->V_DQO_CTRL_MAN.axd;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	621a      	str	r2, [r3, #32]
    CDC->Vq_Curr_Ctrl=pPFC_CTRL_loc->V_DQO_CTRL_MAN.axq;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
    if(CDC->FF_Enable==SET)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d108      	bne.n	80015d8 <DPC_LPCNTRL_PFC_Mode+0x1ca>
    FeedForward_Control(CDC,&Vd_ctrl_FF,&Vq_ctrl_FF);                                ///dq-axis Feed_Forward applied
 80015c6:	f107 0214 	add.w	r2, r7, #20
 80015ca:	f107 0318 	add.w	r3, r7, #24
 80015ce:	4619      	mov	r1, r3
 80015d0:	6838      	ldr	r0, [r7, #0]
 80015d2:	f7ff feb4 	bl	800133e <FeedForward_Control>
 80015d6:	e005      	b.n	80015e4 <DPC_LPCNTRL_PFC_Mode+0x1d6>
    Vd_ctrl_FF=CDC->Vd_Curr_Ctrl;                                                    ///d-axis Feed_Forward bypassed
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	61bb      	str	r3, [r7, #24]
    Vq_ctrl_FF=CDC->Vq_Curr_Ctrl;                                                    ///q-axis Feed_Forward bypassed
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	617b      	str	r3, [r7, #20]
    V_DQO_CTRL->axd=Vd_ctrl_FF;
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 80015f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
}
 80015f8:	e017      	b.n	800162a <DPC_LPCNTRL_PFC_Mode+0x21c>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    V_DQO_CTRL->axd=0;
 8001612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=0;
 800161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
}
 800162a:	bf00      	nop
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <DPC_LPCNTRL_BURST_Init>:
*
* @retval none
*
* @note Function valid for STM32G4xx microconroller family
*/
void DPC_LPCNTRL_BURST_Init(BURST_STRUCT *BURST_t_local,FlagStatus Burst_Enable_loc,uint16_t Vref_hist_VOLT,uint16_t delta_Vref_hist_VOLT,float I_dc_NO_LOAD_Limit_AMP_loc,float I_dc_LOW_LOAD_Limit_AMP_loc,float duty_no_load_local,float duty_low_load_local,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc){
 8001632:	b480      	push	{r7}
 8001634:	b08d      	sub	sp, #52	; 0x34
 8001636:	af00      	add	r7, sp, #0
 8001638:	61f8      	str	r0, [r7, #28]
 800163a:	4608      	mov	r0, r1
 800163c:	4611      	mov	r1, r2
 800163e:	461a      	mov	r2, r3
 8001640:	ed87 0a04 	vstr	s0, [r7, #16]
 8001644:	edc7 0a03 	vstr	s1, [r7, #12]
 8001648:	ed87 1a02 	vstr	s2, [r7, #8]
 800164c:	edc7 1a01 	vstr	s3, [r7, #4]
 8001650:	4603      	mov	r3, r0
 8001652:	76fb      	strb	r3, [r7, #27]
 8001654:	460b      	mov	r3, r1
 8001656:	833b      	strh	r3, [r7, #24]
 8001658:	4613      	mov	r3, r2
 800165a:	82fb      	strh	r3, [r7, #22]
  uint16_t Vout_load_min;                                                                       /*!< Local histeresis lower ouput DC voltage Thrueshold expressed in Bits */
  uint16_t I_dc_NO_LOAD_Limit_loc;                                                              /// Local variable to pass Output current theshold (Expressed in AMPs) to determinate No Load Condition
  uint16_t I_dc_LOW_LOAD_Limit_loc;                                                             /// Local variable to pass Output current theshold (Expressed in AMPs) to determinate Low Load Condition


  Vref_hist_loc=(uint16_t)(((float)Vref_hist_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);
 800165c:	8b3b      	ldrh	r3, [r7, #24]
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001668:	edd3 7a06 	vldr	s15, [r3, #24]
 800166c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001672:	edd3 7a08 	vldr	s15, [r3, #32]
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167e:	ee17 3a90 	vmov	r3, s15
 8001682:	85fb      	strh	r3, [r7, #46]	; 0x2e
  delta_Vref_hist_loc=(uint16_t)(((float)delta_Vref_hist_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);
 8001684:	8afb      	ldrh	r3, [r7, #22]
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800168e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001690:	edd3 7a06 	vldr	s15, [r3, #24]
 8001694:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800169a:	edd3 7a08 	vldr	s15, [r3, #32]
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a6:	ee17 3a90 	vmov	r3, s15
 80016aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  Vout_load_max=Vref_hist_loc+delta_Vref_hist_loc;                                              /*!< Obtain and set higher output voltage term*/
 80016ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80016ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016b0:	4413      	add	r3, r2
 80016b2:	857b      	strh	r3, [r7, #42]	; 0x2a
  Vout_load_min=Vref_hist_loc-delta_Vref_hist_loc;                                              /*!< Obtain and set lower output voltage term*/
 80016b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80016b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	853b      	strh	r3, [r7, #40]	; 0x28

  //I_dc_NO_LOAD_Limit_loc=(uint16_t)(((float)I_dc_NO_LOAD_Limit_AMP_loc*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);       /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
  //I_dc_LOW_LOAD_Limit_loc=(uint16_t)(((float)I_dc_LOW_LOAD_Limit_AMP_loc*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);     /// (IDC_Low_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
  I_dc_NO_LOAD_Limit_loc = (uint16_t)(float)I_dc_NO_LOAD_Limit_AMP_loc;
 80016bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016c4:	ee17 3a90 	vmov	r3, s15
 80016c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  I_dc_LOW_LOAD_Limit_loc=(uint16_t)(float)I_dc_LOW_LOAD_Limit_AMP_loc;
 80016ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016d2:	ee17 3a90 	vmov	r3, s15
 80016d6:	84bb      	strh	r3, [r7, #36]	; 0x24


  BURST_t_local->Vref_hist=Vref_hist_loc;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80016dc:	805a      	strh	r2, [r3, #2]
  BURST_t_local->delta_Vref_hist=delta_Vref_hist_loc;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80016e2:	809a      	strh	r2, [r3, #4]
  BURST_t_local->Vout_max=Vout_load_max;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80016e8:	80da      	strh	r2, [r3, #6]
  BURST_t_local->Vout_min=Vout_load_min;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016ee:	811a      	strh	r2, [r3, #8]
  BURST_t_local->Duty_Limit=0.5;
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80016f6:	615a      	str	r2, [r3, #20]
  BURST_t_local->Duty_noload=duty_no_load_local;
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	60da      	str	r2, [r3, #12]
  BURST_t_local->Duty_lowload=duty_low_load_local;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	611a      	str	r2, [r3, #16]
  BURST_t_local->Burst_Enable=Burst_Enable_loc;
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	7efa      	ldrb	r2, [r7, #27]
 8001708:	761a      	strb	r2, [r3, #24]
  BURST_t_local->Iout_no_load_threshold=I_dc_NO_LOAD_Limit_loc;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800170e:	835a      	strh	r2, [r3, #26]
  BURST_t_local->Iout_low_load_threshold=I_dc_LOW_LOAD_Limit_loc;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001714:	839a      	strh	r2, [r3, #28]

}
 8001716:	bf00      	nop
 8001718:	3734      	adds	r7, #52	; 0x34
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <DPC_LPCNTRL_Burst_Check>:
*
* @retval none
*
* @note Function valid for STM32G4xx microconroller family
*/
BURST_StatusTypeDef DPC_LPCNTRL_Burst_Check(uint32_t* p_Data_Sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub/*uint32_t* iDC_Data_Sub*/,BURST_STRUCT *BURST_CTRL_f){
 8001722:	b480      	push	{r7}
 8001724:	b08b      	sub	sp, #44	; 0x2c
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  float I_max;
  float I_min;
  int16_t I_max_int;
  int16_t I_min_int;

  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phA){
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ed97 7a08 	vldr	s14, [r7, #32]
 8001738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	d502      	bpl.n	8001748 <DPC_LPCNTRL_Burst_Check+0x26>
	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	623b      	str	r3, [r7, #32]
  }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	edd3 7a01 	vldr	s15, [r3, #4]
 800174e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	d502      	bpl.n	8001762 <DPC_LPCNTRL_Burst_Check+0x40>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	623b      	str	r3, [r7, #32]
    }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	edd3 7a02 	vldr	s15, [r3, #8]
 8001768:	ed97 7a08 	vldr	s14, [r7, #32]
 800176c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d502      	bpl.n	800177c <DPC_LPCNTRL_Burst_Check+0x5a>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	623b      	str	r3, [r7, #32]
  }

  if (I_min > CURRENT_ADC_AC_IN_NORM_Sub->phA){
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ed97 7a07 	vldr	s14, [r7, #28]
 8001786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178e:	dd02      	ble.n	8001796 <DPC_LPCNTRL_Burst_Check+0x74>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61fb      	str	r3, [r7, #28]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	edd3 7a01 	vldr	s15, [r3, #4]
 800179c:	ed97 7a07 	vldr	s14, [r7, #28]
 80017a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	d502      	bpl.n	80017b0 <DPC_LPCNTRL_Burst_Check+0x8e>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61fb      	str	r3, [r7, #28]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80017b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80017ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d502      	bpl.n	80017ca <DPC_LPCNTRL_Burst_Check+0xa8>
	I_min = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	61fb      	str	r3, [r7, #28]
  }

  I_min_int = (int16_t) I_min;
 80017ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80017ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d2:	ee17 3a90 	vmov	r3, s15
 80017d6:	833b      	strh	r3, [r7, #24]
  I_max_int = (int16_t) I_max;
 80017d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80017dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e0:	ee17 3a90 	vmov	r3, s15
 80017e4:	837b      	strh	r3, [r7, #26]

  if (-I_min_int > I_max_int){
 80017e6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017ea:	425a      	negs	r2, r3
 80017ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dd03      	ble.n	80017fc <DPC_LPCNTRL_Burst_Check+0xda>
	  I_max_int= -I_min_int;
 80017f4:	8b3b      	ldrh	r3, [r7, #24]
 80017f6:	425b      	negs	r3, r3
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	837b      	strh	r3, [r7, #26]
  }

  if(BURST_CTRL_f->Burst_Enable==SET){                                                  /** If Burst_Enable is SET */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7e1b      	ldrb	r3, [r3, #24]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d130      	bne.n	8001866 <DPC_LPCNTRL_Burst_Check+0x144>

    BURST_CTRL_f->Vout_load=p_Data_Sub[0]+p_Data_Sub[1];                                /*!< Pass voltages data in local terms ([0]=VDC_upper  [1]=VDC_lower) */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3304      	adds	r3, #4
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4413      	add	r3, r2
 8001814:	b29a      	uxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	801a      	strh	r2, [r3, #0]
    Vout_load_max=BURST_CTRL_f->Vout_max;                                               /*!< Set higher output voltage term*/
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	88db      	ldrh	r3, [r3, #6]
 800181e:	82fb      	strh	r3, [r7, #22]
    Vout_load_min=BURST_CTRL_f->Vout_min;                                               /*!< Set lower output voltage term*/                                                                /// [0]=Iload
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	891b      	ldrh	r3, [r3, #8]
 8001824:	82bb      	strh	r3, [r7, #20]

    if(I_max_int<=(BURST_CTRL_f->Iout_no_load_threshold)){                           ///NO_LOAD  Check
 8001826:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	8b52      	ldrh	r2, [r2, #26]
 800182e:	4293      	cmp	r3, r2
 8001830:	dc15      	bgt.n	800185e <DPC_LPCNTRL_Burst_Check+0x13c>
      if (BURST_CTRL_f->Vout_load>Vout_load_max)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	8afa      	ldrh	r2, [r7, #22]
 8001838:	429a      	cmp	r2, r3
 800183a:	d203      	bcs.n	8001844 <DPC_LPCNTRL_Burst_Check+0x122>
      {
        BURST_Status=BURST_Complete;
 800183c:	2301      	movs	r3, #1
 800183e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001842:	e013      	b.n	800186c <DPC_LPCNTRL_Burst_Check+0x14a>
      }
      else if (BURST_CTRL_f->Vout_load<Vout_load_min)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	8aba      	ldrh	r2, [r7, #20]
 800184a:	429a      	cmp	r2, r3
 800184c:	d903      	bls.n	8001856 <DPC_LPCNTRL_Burst_Check+0x134>
      {
        BURST_Status=BURST_Progress;
 800184e:	2303      	movs	r3, #3
 8001850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001854:	e00a      	b.n	800186c <DPC_LPCNTRL_Burst_Check+0x14a>
      }
      else
      {
        BURST_Status=BURST_Complete;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800185c:	e006      	b.n	800186c <DPC_LPCNTRL_Burst_Check+0x14a>
      }
    }
    else
    {
      BURST_Status=BURST_Error;
 800185e:	2302      	movs	r3, #2
 8001860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001864:	e002      	b.n	800186c <DPC_LPCNTRL_Burst_Check+0x14a>
    }
  }
  else{                                                                                 /** If Burst_Enable is RESET */
    BURST_Status=BURST_Disable;
 8001866:	2305      	movs	r3, #5
 8001868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  BURST_CTRL_f->BURST_Status=BURST_Status;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001872:	779a      	strb	r2, [r3, #30]
  BURST_CTRL_f->uI_load_Burst=I_max_int;
 8001874:	8b7a      	ldrh	r2, [r7, #26]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	841a      	strh	r2, [r3, #32]

  return BURST_Status;
 800187a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800187e:	4618      	mov	r0, r3
 8001880:	372c      	adds	r7, #44	; 0x2c
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <DPC_LPCNTRL_Burst_Mode>:
* @retval none
*
* @note Working with DPC_LPCNTRL_Burst_Check
* @note Function valid for STM32G4xx microconroller family
*/
void DPC_LPCNTRL_Burst_Mode(uint32_t* p_Data_Sub,BURST_STRUCT *BURST_CTRL_f,CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub/*uint32_t* iDC_Data_Sub*/,DPC_PWM_TypeDef *tDPC_PWM_loc,DMA_PWMDUTY_STRUCT* DMA_SOURCE ){
 800188a:	b580      	push	{r7, lr}
 800188c:	b08a      	sub	sp, #40	; 0x28
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	603b      	str	r3, [r7, #0]
  int16_t I_max_int;
  int16_t I_min_int;
  float Burst_Duty;
  DMA_PWMDUTY_STRUCT* DMA_SOURCE1;

  I_max=0;
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24

  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phA){
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	d502      	bpl.n	80018b8 <DPC_LPCNTRL_Burst_Mode+0x2e>
	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80018be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d502      	bpl.n	80018d2 <DPC_LPCNTRL_Burst_Mode+0x48>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	d502      	bpl.n	80018ec <DPC_LPCNTRL_Burst_Mode+0x62>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (I_min > CURRENT_ADC_AC_IN_NORM_Sub->phA){
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ed97 7a08 	vldr	s14, [r7, #32]
 80018f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	dd02      	ble.n	8001906 <DPC_LPCNTRL_Burst_Mode+0x7c>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	623b      	str	r3, [r7, #32]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	edd3 7a01 	vldr	s15, [r3, #4]
 800190c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	d502      	bpl.n	8001920 <DPC_LPCNTRL_Burst_Mode+0x96>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	623b      	str	r3, [r7, #32]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	edd3 7a02 	vldr	s15, [r3, #8]
 8001926:	ed97 7a08 	vldr	s14, [r7, #32]
 800192a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001932:	d502      	bpl.n	800193a <DPC_LPCNTRL_Burst_Mode+0xb0>
	I_min = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	623b      	str	r3, [r7, #32]
  }

  I_min_int = (uint16_t) I_min;
 800193a:	edd7 7a08 	vldr	s15, [r7, #32]
 800193e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001942:	ee17 3a90 	vmov	r3, s15
 8001946:	b29b      	uxth	r3, r3
 8001948:	82fb      	strh	r3, [r7, #22]
  I_max_int = (uint16_t) I_max;
 800194a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800194e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001952:	ee17 3a90 	vmov	r3, s15
 8001956:	b29b      	uxth	r3, r3
 8001958:	83fb      	strh	r3, [r7, #30]

  if (-I_min_int > I_max_int){
 800195a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800195e:	425a      	negs	r2, r3
 8001960:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001964:	429a      	cmp	r2, r3
 8001966:	dd03      	ble.n	8001970 <DPC_LPCNTRL_Burst_Mode+0xe6>
	  I_max_int= -I_min_int;
 8001968:	8afb      	ldrh	r3, [r7, #22]
 800196a:	425b      	negs	r3, r3
 800196c:	b29b      	uxth	r3, r3
 800196e:	83fb      	strh	r3, [r7, #30]
  }

  if (BURST_CTRL_f->Burst_Enable==SET){                                                 /** If Burst_Enable is SET */
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	7e1b      	ldrb	r3, [r3, #24]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d178      	bne.n	8001a6a <DPC_LPCNTRL_Burst_Mode+0x1e0>

    Vout_load=p_Data_Sub[0]+p_Data_Sub[1];                                              /*!< Pass voltages data in local terms ([0]=VDC_upper  [1]=VDC_lower) */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3304      	adds	r3, #4
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4413      	add	r3, r2
 8001988:	82bb      	strh	r3, [r7, #20]
    Vout_load_max=BURST_CTRL_f->Vout_max;                                               /*!< Set higher output voltage term*/
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	88db      	ldrh	r3, [r3, #6]
 800198e:	827b      	strh	r3, [r7, #18]
    Vout_load_min=BURST_CTRL_f->Vout_min;                                               /*!< Set lower output voltage term*/
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	891b      	ldrh	r3, [r3, #8]
 8001994:	823b      	strh	r3, [r7, #16]
    BURST_CTRL_f->Vout_load=Vout_load;                                                  /*!< Store output voltage in "BURST_CTRL" struct */
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	8aba      	ldrh	r2, [r7, #20]
 800199a:	801a      	strh	r2, [r3, #0]
    //I_load_Burst=iDC_Data_Sub[0];                                                       /// [0]=Iload


  if(BURST_CTRL_f->BURST_Status==BURST_Progress || BURST_CTRL_f->BURST_Status==BURST_Run){
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	7f9b      	ldrb	r3, [r3, #30]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d003      	beq.n	80019ac <DPC_LPCNTRL_Burst_Mode+0x122>
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	7f9b      	ldrb	r3, [r3, #30]
 80019a8:	2b06      	cmp	r3, #6
 80019aa:	d15e      	bne.n	8001a6a <DPC_LPCNTRL_Burst_Mode+0x1e0>

    if(BURST_CTRL_f->Duty_noload>BURST_CTRL_f->Duty_Limit){                              ///Start Check Duty LIMIT
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80019b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c0:	dd03      	ble.n	80019ca <DPC_LPCNTRL_Burst_Mode+0x140>
      BURST_CTRL_f->Duty_noload=BURST_CTRL_f->Duty_Limit;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	60da      	str	r2, [r3, #12]
    }//End Check Duty_noload LIMIT
    if(BURST_CTRL_f->Duty_lowload>BURST_CTRL_f->Duty_Limit){                             ///Start Check Duty LIMIT
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	ed93 7a04 	vldr	s14, [r3, #16]
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80019d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	dd03      	ble.n	80019e8 <DPC_LPCNTRL_Burst_Mode+0x15e>
      BURST_CTRL_f->Duty_lowload=BURST_CTRL_f->Duty_Limit;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	695a      	ldr	r2, [r3, #20]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	611a      	str	r2, [r3, #16]
    }//End Check Duty_lowload LIMIT


    if(I_max_int<=(BURST_CTRL_f->Iout_no_load_threshold)){                           ///NO_LOAD  Check
 80019e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	8b52      	ldrh	r2, [r2, #26]
 80019f0:	4293      	cmp	r3, r2
 80019f2:	dc03      	bgt.n	80019fc <DPC_LPCNTRL_Burst_Mode+0x172>
    Burst_Duty=BURST_CTRL_f->Duty_noload;
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	e00e      	b.n	8001a1a <DPC_LPCNTRL_Burst_Mode+0x190>
    }
    else if(I_max_int>(BURST_CTRL_f->Iout_no_load_threshold) || I_max_int<=(BURST_CTRL_f->Iout_low_load_threshold)){                     ///LOW_LOAD  Check
 80019fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	8b52      	ldrh	r2, [r2, #26]
 8001a04:	4293      	cmp	r3, r2
 8001a06:	dc05      	bgt.n	8001a14 <DPC_LPCNTRL_Burst_Mode+0x18a>
 8001a08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	8b92      	ldrh	r2, [r2, #28]
 8001a10:	4293      	cmp	r3, r2
 8001a12:	dc02      	bgt.n	8001a1a <DPC_LPCNTRL_Burst_Mode+0x190>
    Burst_Duty=BURST_CTRL_f->Duty_lowload;
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	61bb      	str	r3, [r7, #24]
    }

    DPC_PWM_Send_Burst_PWM(tDPC_PWM_loc,Burst_Duty,Burst_Duty,Burst_Duty,DMA_SOURCE);  /*!< Refresh BURST Duty*/
 8001a1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a1c:	ed97 1a06 	vldr	s2, [r7, #24]
 8001a20:	edd7 0a06 	vldr	s1, [r7, #24]
 8001a24:	ed97 0a06 	vldr	s0, [r7, #24]
 8001a28:	6838      	ldr	r0, [r7, #0]
 8001a2a:	f000 ffbf 	bl	80029ac <DPC_PWM_Send_Burst_PWM>
    //DMA_SOURCE=DMA_SOURCE1;

//      if (Vout_load>Vout_load_max && BURST_CTRL_f->BURST_PACKAGE==SET)                  /*!< Occured when Vout overcome higher trueshold and BURST_Flag is active*/
      if (Vout_load>Vout_load_max)                                                      /*!< Occured when Vout overcome higher trueshold and BURST_Flag is active*/
 8001a2e:	8aba      	ldrh	r2, [r7, #20]
 8001a30:	8a7b      	ldrh	r3, [r7, #18]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d908      	bls.n	8001a48 <DPC_LPCNTRL_Burst_Mode+0x1be>

      {
        DPC_PWM_OutDisable();                                                           /*!< DISABLE BURST PWM*/
 8001a36:	f001 fa13 	bl	8002e60 <DPC_PWM_OutDisable>
        BURST_CTRL_f->BURST_PACKAGE=RESET;                                              /*!< BURST_Flag become RESET (Burst Inactive)*/
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	729a      	strb	r2, [r3, #10]
        BURST_CTRL_f->BURST_IN_RANGE=RESET;                                             /*!< BURST_IN_RANGE_Flag become RESET (Vout higher then limit)*/
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2200      	movs	r2, #0
 8001a44:	72da      	strb	r2, [r3, #11]
 8001a46:	e010      	b.n	8001a6a <DPC_LPCNTRL_Burst_Mode+0x1e0>
      }
//      else if (Vout_load<Vout_load_min && BURST_CTRL_f->BURST_PACKAGE==RESET)           /*!< Occured when Vout is lower then low-trueshold and BURST_Flag is stopped*/
      else if (Vout_load<Vout_load_min)                                                 /*!< Occured when Vout is lower then low-trueshold and BURST_Flag is stopped*/
 8001a48:	8aba      	ldrh	r2, [r7, #20]
 8001a4a:	8a3b      	ldrh	r3, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d209      	bcs.n	8001a64 <DPC_LPCNTRL_Burst_Mode+0x1da>
      {
        DPC_PWM_OutEnable(tDPC_PWM_loc);                                               /*!< ENABLE BURST PWM*/
 8001a50:	6838      	ldr	r0, [r7, #0]
 8001a52:	f001 fa0b 	bl	8002e6c <DPC_PWM_OutEnable>
        BURST_CTRL_f->BURST_PACKAGE=SET;                                                /*!< BURST_Flag become SET (Burst Active)*/
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	729a      	strb	r2, [r3, #10]
        BURST_CTRL_f->BURST_IN_RANGE=RESET;                                             /*!< BURST_IN_RANGE_Flag become RESET (Vout lower then limit)*/
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	72da      	strb	r2, [r3, #11]
 8001a62:	e002      	b.n	8001a6a <DPC_LPCNTRL_Burst_Mode+0x1e0>
      }
      else                                                                              /*!< Occured in inner hysteresis window*/
      {
        BURST_CTRL_f->BURST_IN_RANGE=SET;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2201      	movs	r2, #1
 8001a68:	72da      	strb	r2, [r3, #11]
      }
  }
  }
  BURST_CTRL_f->uI_load_Burst=I_max;
 8001a6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a72:	ee17 3a90 	vmov	r3, s15
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	841a      	strh	r2, [r3, #32]
  BURST_CTRL_f->Burst_Duty=Burst_Duty;
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a82:	bf00      	nop
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <DPC_LPCNTRL_Inrush_Check>:
  *
  * @retval INRUSH_StatusTypeDef
  *
  * @note Function valid for STM32G4xx microconroller family
  */
INRUSH_StatusTypeDef DPC_LPCNTRL_Inrush_Check(uint32_t* p_Data_Sub,CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub/* uint32_t* iDC_Data_Sub*/,INRUSH_STRUCT *INRUSH_CTRL_f){
 8001a8a:	b480      	push	{r7}
 8001a8c:	b08b      	sub	sp, #44	; 0x2c
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
  float I_max;
  float I_min;
  int16_t I_max_int;
  int16_t I_min_int;

  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phA){
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	d502      	bpl.n	8001ab0 <DPC_LPCNTRL_Inrush_Check+0x26>
	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	623b      	str	r3, [r7, #32]
  }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ab6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac2:	d502      	bpl.n	8001aca <DPC_LPCNTRL_Inrush_Check+0x40>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	623b      	str	r3, [r7, #32]
    }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ad0:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d502      	bpl.n	8001ae4 <DPC_LPCNTRL_Inrush_Check+0x5a>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	623b      	str	r3, [r7, #32]
  }

  if (I_min > CURRENT_ADC_AC_IN_NORM_Sub->phA){
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	dd02      	ble.n	8001afe <DPC_LPCNTRL_Inrush_Check+0x74>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61fb      	str	r3, [r7, #28]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b04:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b10:	d502      	bpl.n	8001b18 <DPC_LPCNTRL_Inrush_Check+0x8e>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61fb      	str	r3, [r7, #28]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	d502      	bpl.n	8001b32 <DPC_LPCNTRL_Inrush_Check+0xa8>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	61fb      	str	r3, [r7, #28]
  }

  I_min_int = (int16_t) I_min;
 8001b32:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3a:	ee17 3a90 	vmov	r3, s15
 8001b3e:	833b      	strh	r3, [r7, #24]
  I_max_int = (int16_t) I_max;
 8001b40:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b48:	ee17 3a90 	vmov	r3, s15
 8001b4c:	837b      	strh	r3, [r7, #26]

  if (-I_min_int > I_max_int){
 8001b4e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b52:	425a      	negs	r2, r3
 8001b54:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dd03      	ble.n	8001b64 <DPC_LPCNTRL_Inrush_Check+0xda>
	  I_max_int= -I_min_int;
 8001b5c:	8b3b      	ldrh	r3, [r7, #24]
 8001b5e:	425b      	negs	r3, r3
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	837b      	strh	r3, [r7, #26]
  }

  if (INRUSH_CTRL_f->InrushEnable==SET){                                                /** If InrushEnable is SET */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7a9b      	ldrb	r3, [r3, #10]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d132      	bne.n	8001bd2 <DPC_LPCNTRL_Inrush_Check+0x148>

    Vout_load=p_Data_Sub[0]+p_Data_Sub[1];                                              /*!< Pass voltages data in local terms ([0]=VDC_upper  [1]=VDC_lower) */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3304      	adds	r3, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	82fb      	strh	r3, [r7, #22]
    //I_load_Inrush=iDC_Data_Sub[0];                                                      /*!< Pass current data in local terms [0]=Iload */
    I_load_Inrush=(uint16_t) I_max_int;
 8001b7e:	8b7b      	ldrh	r3, [r7, #26]
 8001b80:	84bb      	strh	r3, [r7, #36]	; 0x24
    INRUSH_CTRL_f->Vout_load=Vout_load;                                                 /*!< Store output voltage in "INRUSH" struct */
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	8afa      	ldrh	r2, [r7, #22]
 8001b86:	801a      	strh	r2, [r3, #0]
    Vout_load_max=INRUSH_CTRL_f->Vout_max;                                              /*!< Set higher output voltage term*/
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	88db      	ldrh	r3, [r3, #6]
 8001b8c:	82bb      	strh	r3, [r7, #20]
    Vout_load_min=INRUSH_CTRL_f->Vout_min;                                              /*!< Set lower output voltage term*/
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	891b      	ldrh	r3, [r3, #8]
 8001b92:	827b      	strh	r3, [r7, #18]
    Iout_load_threshold=INRUSH_CTRL_f->Iout_load_threshold;                             /*!< Set output current term*/
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	899b      	ldrh	r3, [r3, #12]
 8001b98:	823b      	strh	r3, [r7, #16]

    if(I_load_Inrush<=Iout_load_threshold){                                             /*!< NO_LOAD  Check */
 8001b9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b9c:	8a3b      	ldrh	r3, [r7, #16]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d813      	bhi.n	8001bca <DPC_LPCNTRL_Inrush_Check+0x140>
      if (Vout_load>Vout_load_max)                                                      /*!< ERROR Check - If occur AC OVERVOLTAGE or 3W-4W are not properly configurated*/
 8001ba2:	8afa      	ldrh	r2, [r7, #22]
 8001ba4:	8abb      	ldrh	r3, [r7, #20]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d903      	bls.n	8001bb2 <DPC_LPCNTRL_Inrush_Check+0x128>
      {
        INRUSH_Status=INRUSH_Error;
 8001baa:	2302      	movs	r3, #2
 8001bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bb0:	e012      	b.n	8001bd8 <DPC_LPCNTRL_Inrush_Check+0x14e>
      }
      else if (Vout_load<Vout_load_min)                                                 /*!< Inrush Check - If NOT occured AC UNDERVOLTAGE or 3W-4W are not properly configurated*/
 8001bb2:	8afa      	ldrh	r2, [r7, #22]
 8001bb4:	8a7b      	ldrh	r3, [r7, #18]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d203      	bcs.n	8001bc2 <DPC_LPCNTRL_Inrush_Check+0x138>
      {
        INRUSH_Status=INRUSH_Progress;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bc0:	e00a      	b.n	8001bd8 <DPC_LPCNTRL_Inrush_Check+0x14e>
      }
      else                                                                              /** InrushEnable is SET and completed*/
      {
        INRUSH_Status=INRUSH_Complete;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bc8:	e006      	b.n	8001bd8 <DPC_LPCNTRL_Inrush_Check+0x14e>
      }
    }///  END NO_LOAD  Check
    else                                                                                /** InrushEnable is SET but DC current is present during the inrush (ERROR) */
    {
      INRUSH_Status=INRUSH_Error;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bd0:	e002      	b.n	8001bd8 <DPC_LPCNTRL_Inrush_Check+0x14e>
    }
  }
  else                                                                                  /** If InrushEnable is RESET */
  {
    INRUSH_Status=INRUSH_Disable;
 8001bd2:	2305      	movs	r3, #5
 8001bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  INRUSH_CTRL_f->INRUSH_Status=INRUSH_Status;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001bde:	741a      	strb	r2, [r3, #16]
  INRUSH_CTRL_f->I_load_Inrush=I_load_Inrush;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001be4:	81da      	strh	r2, [r3, #14]

  return INRUSH_Status;
 8001be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	372c      	adds	r7, #44	; 0x2c
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <DPC_LPCNTRL_Inrush_Init>:
  * @retval INRUSH_StatusTypeDef
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void DPC_LPCNTRL_Inrush_Init(INRUSH_STRUCT *INRUSH_CTRL_f,uint16_t Vref_hist_VOLT_loc,uint16_t delta_Vref_hist_VOLT_loc,float I_dc_NO_LOAD_Limit_AMP_loc,FlagStatus InrushEnable_loc,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b089      	sub	sp, #36	; 0x24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	4608      	mov	r0, r1
 8001c00:	4611      	mov	r1, r2
 8001c02:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c06:	461a      	mov	r2, r3
 8001c08:	4603      	mov	r3, r0
 8001c0a:	817b      	strh	r3, [r7, #10]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	813b      	strh	r3, [r7, #8]
 8001c10:	4613      	mov	r3, r2
 8001c12:	70fb      	strb	r3, [r7, #3]
  uint16_t Vout_load_min;                                                                       /*!< Local histeresis lower ouput DC voltage Thrueshold expressed in Bits */
  uint16_t I_dc_NO_LOAD_Limit_loc;                                                              /// Local variable to pass Output current theshold (Expressed in AMPs) to determinate No Load Condition



  Vref_hist_loc=(uint16_t)(((float)Vref_hist_VOLT_loc*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c20:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c36:	ee17 3a90 	vmov	r3, s15
 8001c3a:	83fb      	strh	r3, [r7, #30]
  delta_Vref_hist_loc=(uint16_t)(((float)delta_Vref_hist_VOLT_loc*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);
 8001c3c:	893b      	ldrh	r3, [r7, #8]
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c5e:	ee17 3a90 	vmov	r3, s15
 8001c62:	83bb      	strh	r3, [r7, #28]

  Vout_load_max=Vref_hist_loc+delta_Vref_hist_loc;                                              /*!< Obtain and set higher output voltage term*/
 8001c64:	8bfa      	ldrh	r2, [r7, #30]
 8001c66:	8bbb      	ldrh	r3, [r7, #28]
 8001c68:	4413      	add	r3, r2
 8001c6a:	837b      	strh	r3, [r7, #26]
  Vout_load_min=Vref_hist_loc-delta_Vref_hist_loc;                                              /*!< Obtain and set lower output voltage term*/
 8001c6c:	8bfa      	ldrh	r2, [r7, #30]
 8001c6e:	8bbb      	ldrh	r3, [r7, #28]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	833b      	strh	r3, [r7, #24]

  //I_dc_NO_LOAD_Limit_loc=(uint16_t)(((float)I_dc_NO_LOAD_Limit_AMP_loc*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);   /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
  I_dc_NO_LOAD_Limit_loc=(uint16_t)I_dc_NO_LOAD_Limit_AMP_loc;
 8001c74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7c:	ee17 3a90 	vmov	r3, s15
 8001c80:	82fb      	strh	r3, [r7, #22]



  INRUSH_CTRL_f->Vref_hist=Vref_hist_loc;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8bfa      	ldrh	r2, [r7, #30]
 8001c86:	805a      	strh	r2, [r3, #2]
  INRUSH_CTRL_f->delta_Vref_hist=delta_Vref_hist_loc;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8bba      	ldrh	r2, [r7, #28]
 8001c8c:	809a      	strh	r2, [r3, #4]
  INRUSH_CTRL_f->InrushEnable=InrushEnable_loc;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	729a      	strb	r2, [r3, #10]
  INRUSH_CTRL_f->Vout_max=Vout_load_max;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8b7a      	ldrh	r2, [r7, #26]
 8001c98:	80da      	strh	r2, [r3, #6]
  INRUSH_CTRL_f->Vout_min=Vout_load_min;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8b3a      	ldrh	r2, [r7, #24]
 8001c9e:	811a      	strh	r2, [r3, #8]
  INRUSH_CTRL_f->Iout_load_threshold=I_dc_NO_LOAD_Limit_loc;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8afa      	ldrh	r2, [r7, #22]
 8001ca4:	819a      	strh	r2, [r3, #12]
}
 8001ca6:	bf00      	nop
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <DPC_LPCNTRL_CDC_Init>:
  * @retval none
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void DPC_LPCNTRL_CDC_Init(CDC_Struct *CDC_local,float omegagrid_loc,float Inductor_loc,FlagStatus FF_Enable_SET,FlagStatus Decoupling_Enable_SET,FlagStatus VDC_FF_Enable_SET)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cbe:	edc7 0a01 	vstr	s1, [r7, #4]
 8001cc2:	4608      	mov	r0, r1
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4603      	mov	r3, r0
 8001cca:	70fb      	strb	r3, [r7, #3]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70bb      	strb	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  CDC_local->omegagrid=omegagrid_loc;                   /*!< Set omega in Current Decaupling Control*/
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	601a      	str	r2, [r3, #0]
  CDC_local->Inductor=Inductor_loc;                     /*!< Set Inductor value in Current Decaupling Control*/
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	605a      	str	r2, [r3, #4]
  CDC_local->FF_Enable=FF_Enable_SET;                   /*!< Set Initial state of AC FeedForward in Current Decoupling Control*/
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  CDC_local->Decoupling_Enable=Decoupling_Enable_SET;   /*!< Set Initial state of Decoupling compensator in Current Decoupling Control*/
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	78ba      	ldrb	r2, [r7, #2]
 8001cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  CDC_local->VDC_FF_Enable=VDC_FF_Enable_SET;           /*!< Set Initial state of DC FeedForward in Current Decoupling Control*/
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	787a      	ldrb	r2, [r7, #1]
 8001cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <DPC_LPCNTRL_PFC_Init>:
*
* @note Function valid for STM32G4xx microconroller family
*/
//void DPC_LPCNTRL_PFC_Init(PFC_CTRL_t *pPFC_CTRL,PFC_CTRL_State_TypeDef PFC_CTRL_State,uint16_t PFC_VDC_Ref_loc,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc);
void DPC_LPCNTRL_PFC_Init(PFC_CTRL_t *pPFC_CTRL_loc,PFC_CTRL_State_TypeDef PFC_CTRL_State,uint16_t PFC_VDC_Ref_loc,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	72fb      	strb	r3, [r7, #11]
 8001d12:	4613      	mov	r3, r2
 8001d14:	813b      	strh	r3, [r7, #8]
  uint16_t PFC_VDC_Ref_BITs_loc;                                                                                /// Local variable to pass Output voltage reference  (Expressed in BITs)
  PFC_VDC_Ref_BITs_loc=(uint16_t)(((float)PFC_VDC_Ref_loc*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);   /// (V_dc_ref [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias
 8001d16:	893b      	ldrh	r3, [r7, #8]
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d38:	ee17 3a90 	vmov	r3, s15
 8001d3c:	82fb      	strh	r3, [r7, #22]

  pPFC_CTRL_loc->PFC_VDC_Ref=PFC_VDC_Ref_loc;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	893a      	ldrh	r2, [r7, #8]
 8001d42:	821a      	strh	r2, [r3, #16]
  pPFC_CTRL_loc->PFC_VDC_Ref_BITs=PFC_VDC_Ref_BITs_loc;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8afa      	ldrh	r2, [r7, #22]
 8001d48:	825a      	strh	r2, [r3, #18]
  pPFC_CTRL_loc->CDC_Reset=RESET;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
  pPFC_CTRL_loc->VdcCTRL_Reset=RESET;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	705a      	strb	r2, [r3, #1]
  pPFC_CTRL_loc->PFC_CTRL_State=PFC_CTRL_State;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	7afa      	ldrb	r2, [r7, #11]
 8001d5a:	709a      	strb	r2, [r3, #2]
}
 8001d5c:	bf00      	nop
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <FastSin>:
  * @retval SinTable: value of sin  
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    

float FastSin(float theta){
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t tempAdj;
  
    if (theta < 0.0f) theta += DOUBLE_PI;
 8001d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7e:	d507      	bpl.n	8001d90 <FastSin+0x28>
 8001d80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d84:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001df4 <FastSin+0x8c>
 8001d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d8c:	edc7 7a01 	vstr	s15, [r7, #4]
    if (theta > DOUBLE_PI) theta -= DOUBLE_PI; 
 8001d90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d94:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001df4 <FastSin+0x8c>
 8001d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	dd07      	ble.n	8001db2 <FastSin+0x4a>
 8001da2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001df4 <FastSin+0x8c>
 8001daa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dae:	edc7 7a01 	vstr	s15, [r7, #4]
    
    tempAdj = (uint16_t) (Multiplier*theta);
 8001db2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001db6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001df8 <FastSin+0x90>
 8001dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc2:	ee17 3a90 	vmov	r3, s15
 8001dc6:	81fb      	strh	r3, [r7, #14]
    if(tempAdj >= LUT_SAMPLE ){
 8001dc8:	89fb      	ldrh	r3, [r7, #14]
 8001dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dce:	d302      	bcc.n	8001dd6 <FastSin+0x6e>
      tempAdj = LUT_SAMPLE-1;
 8001dd0:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001dd4:	81fb      	strh	r3, [r7, #14]
    }
  return SinTable[tempAdj] ;
 8001dd6:	89fb      	ldrh	r3, [r7, #14]
 8001dd8:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <FastSin+0x94>)
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	ee07 3a90 	vmov	s15, r3
} 
 8001de4:	eeb0 0a67 	vmov.f32	s0, s15
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40c90fdb 	.word	0x40c90fdb
 8001df8:	42a2f983 	.word	0x42a2f983
 8001dfc:	0800d148 	.word	0x0800d148

08001e00 <FastCos>:
  * 
  * @retval SinTable: value of Cos  
  *
  * @note Function valid for STM32G4xx microconroller family  
  */      
float FastCos(float theta){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	ed87 0a01 	vstr	s0, [r7, #4]
  
    return FastSin(HALF_PI - theta);
 8001e0a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001e2c <FastCos+0x2c>
 8001e0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e16:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1a:	f7ff ffa5 	bl	8001d68 <FastSin>
 8001e1e:	eef0 7a40 	vmov.f32	s15, s0
    }
 8001e22:	eeb0 0a67 	vmov.f32	s0, s15
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	3fc90fdb 	.word	0x3fc90fdb

08001e30 <Integral>:
*
* @retval integrator output value.
*
* @note Function valid for STM32G4xx microconroller family  
*/
float Integral(INTEGRATOR_STRUCT *pInteg, float Input) {
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	ed87 0a00 	vstr	s0, [r7]
  
  pInteg->Integral_in=Input;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	609a      	str	r2, [r3, #8]
  
  pInteg->Integral_prev=pInteg->Integralout;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	605a      	str	r2, [r3, #4]
  
  pInteg->Integralout=pInteg->Integral_prev+(pInteg->Integral_in*pInteg->Ts);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	edc3 7a03 	vstr	s15, [r3, #12]
  return(pInteg->Integralout);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	ee07 3a90 	vmov	s15, r3
}
 8001e72:	eeb0 0a67 	vmov.f32	s0, s15
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <DPC_MISC_Check_DCLoad>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

DPC_Load_Status_TypeDef DPC_MISC_Check_DCLoad(DPC_Load_TypeDef *DPC_Load_loc,DPC_Load_Limit_TypeDef DC_Load_Limit_sub)
{
 8001e80:	b084      	sub	sp, #16
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  uint16_t VDC;
  VoltageDC_ADC_Struct* DATA_VDC;  
  CurrentDC_ADC_Struct* DATA_IDC;
  
  DATA_VDC =  Read_Volt_DC(); 
 8001e92:	f7fe febd 	bl	8000c10 <Read_Volt_DC>
 8001e96:	6138      	str	r0, [r7, #16]
  DATA_IDC = Read_Curr_DC(); 
 8001e98:	f7fe feb0 	bl	8000bfc <Read_Curr_DC>
 8001e9c:	60f8      	str	r0, [r7, #12]
  
  VDC=DATA_VDC->Vdc_pos+DATA_VDC->Vdc_neg;
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	817b      	strh	r3, [r7, #10]
  
  DPC_Load_Status_TypeDef Load_Status;
 
  
  if((DATA_VDC->Vdc_pos > DC_Load_Limit_sub.V_cap_Limit) || (DATA_VDC->Vdc_neg > DC_Load_Limit_sub.V_cap_Limit)){  
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d804      	bhi.n	8001ec2 <DPC_MISC_Check_DCLoad+0x42>
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d907      	bls.n	8001ed2 <DPC_MISC_Check_DCLoad+0x52>
    DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 8001ec2:	f000 ffcd 	bl	8002e60 <DPC_PWM_OutDisable>
//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
    Load_Status=OVERVOLTAGE_CAP;
 8001ec6:	2305      	movs	r3, #5
 8001ec8:	75fb      	strb	r3, [r7, #23]
    DPC_FLT_Faulterror_Set(FAULT_OVC);    
 8001eca:	2004      	movs	r0, #4
 8001ecc:	f7ff f8a0 	bl	8001010 <DPC_FLT_Faulterror_Set>
 8001ed0:	e049      	b.n	8001f66 <DPC_MISC_Check_DCLoad+0xe6>
  }
  else if (VDC>DC_Load_Limit_sub.V_dc_Limit){
 8001ed2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ed4:	897a      	ldrh	r2, [r7, #10]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d907      	bls.n	8001eea <DPC_MISC_Check_DCLoad+0x6a>
    DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 8001eda:	f000 ffc1 	bl	8002e60 <DPC_PWM_OutDisable>
//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
    Load_Status=OVERVOLTAGE_LOAD;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	75fb      	strb	r3, [r7, #23]
    DPC_FLT_Faulterror_Set(FAULT_OVL);
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f7ff f894 	bl	8001010 <DPC_FLT_Faulterror_Set>
 8001ee8:	e03d      	b.n	8001f66 <DPC_MISC_Check_DCLoad+0xe6>
  }
  else {
    if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_Over_load_Threshold)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d305      	bcc.n	8001f00 <DPC_MISC_Check_DCLoad+0x80>
    {
      Load_Status=OVERCURRENT_LOAD;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	75fb      	strb	r3, [r7, #23]
      DPC_FLT_Faulterror_Set(FAULT_OCL);       
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7ff f889 	bl	8001010 <DPC_FLT_Faulterror_Set>
 8001efe:	e032      	b.n	8001f66 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_Low_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==LOW_LOAD || DPC_Load_loc->DPC_Load_Status==NO_LOAD))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d30a      	bcc.n	8001f20 <DPC_MISC_Check_DCLoad+0xa0>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d003      	beq.n	8001f1a <DPC_MISC_Check_DCLoad+0x9a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <DPC_MISC_Check_DCLoad+0xa0>
    {
      Load_Status=ON_LOAD;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	75fb      	strb	r3, [r7, #23]
 8001f1e:	e022      	b.n	8001f66 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else if(DATA_IDC->IDC_adc<=DC_Load_Limit_sub.I_Low_load_Min_Threshold && (DPC_Load_loc->DPC_Load_Status==ON_LOAD))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d806      	bhi.n	8001f38 <DPC_MISC_Check_DCLoad+0xb8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d102      	bne.n	8001f38 <DPC_MISC_Check_DCLoad+0xb8>
    {
      Load_Status=LOW_LOAD;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75fb      	strb	r3, [r7, #23]
 8001f36:	e016      	b.n	8001f66 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_No_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==NO_LOAD))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d306      	bcc.n	8001f50 <DPC_MISC_Check_DCLoad+0xd0>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <DPC_MISC_Check_DCLoad+0xd0>
    {
      Load_Status=LOW_LOAD;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	75fb      	strb	r3, [r7, #23]
 8001f4e:	e00a      	b.n	8001f66 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else if(DATA_IDC->IDC_adc<=DC_Load_Limit_sub.I_No_load_Min_Threshold)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d802      	bhi.n	8001f60 <DPC_MISC_Check_DCLoad+0xe0>
    {
      Load_Status=NO_LOAD;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]
 8001f5e:	e002      	b.n	8001f66 <DPC_MISC_Check_DCLoad+0xe6>
    }
    else
    {
      Load_Status=DPC_Load_loc->DPC_Load_Status;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  DPC_Load_loc->DPC_Load_Status=Load_Status;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7dfa      	ldrb	r2, [r7, #23]
 8001f6a:	701a      	strb	r2, [r3, #0]
  return Load_Status;
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f78:	b004      	add	sp, #16
 8001f7a:	4770      	bx	lr
 8001f7c:	0000      	movs	r0, r0
	...

08001f80 <DPC_MISC_DCLoad_Init>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

void DPC_MISC_DCLoad_Init(DPC_Load_Limit_TypeDef *DC_Load_Limit_sub,uint16_t V_dc_Limit_VOLT,uint16_t V_cap_Limit_VOLT,float I_dc_NO_LOAD_Limit_AMP,float I_dc_LOW_LOAD_Limit_AMP,float I_dc_OVER_LOAD_Limit_AMP,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b08d      	sub	sp, #52	; 0x34
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6178      	str	r0, [r7, #20]
 8001f88:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f8c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f90:	ed87 1a01 	vstr	s2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	460b      	mov	r3, r1
 8001f98:	827b      	strh	r3, [r7, #18]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	823b      	strh	r3, [r7, #16]
  uint16_t I_dc_LOW_LOAD_Min_Limit_loc;                                                                 /// Local variable to pass Output current Min theshold (Expressed in AMPs) to determinate Light Load Condition  
  uint16_t I_dc_OVER_LOAD_Limit_loc;                                                                    /// Local variable to pass Output current theshold (Expressed in AMPs)to determinate Over Load Condition
  

  
  V_cap_Limit_loc=(uint16_t)(((float)V_cap_Limit_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);                                        /// (Vcap_limit_Threshold [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias 
 8001f9e:	8a3b      	ldrh	r3, [r7, #16]
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc0:	ee17 3a90 	vmov	r3, s15
 8001fc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  V_dc_Limit_loc=(uint16_t)(((float)V_dc_Limit_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);                                          /// (Vdc_limit_Threshold [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias
 8001fc6:	8a7b      	ldrh	r3, [r7, #18]
 8001fc8:	ee07 3a90 	vmov	s15, r3
 8001fcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe8:	ee17 3a90 	vmov	r3, s15
 8001fec:	85bb      	strh	r3, [r7, #44]	; 0x2c

  I_dc_NO_LOAD_Limit_loc=(uint16_t)(((float)I_dc_NO_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                           /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800200a:	ee17 3a90 	vmov	r3, s15
 800200e:	857b      	strh	r3, [r7, #42]	; 0x2a
  I_dc_NO_LOAD_Delta_Limit_loc=(uint16_t)((I_dc_NO_LOAD_Limit_loc - DPC_ADC_Conf_loc->B_Idc)*((float)DPC_NO_LOAD_DELTA_CURR*0.01));                     ///
 8002010:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002024:	ee17 0a90 	vmov	r0, s15
 8002028:	f7fe fa5a 	bl	80004e0 <__aeabi_f2d>
 800202c:	a33c      	add	r3, pc, #240	; (adr r3, 8002120 <DPC_MISC_DCLoad_Init+0x1a0>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe faad 	bl	8000590 <__aeabi_dmul>
 8002036:	4603      	mov	r3, r0
 8002038:	460c      	mov	r4, r1
 800203a:	4618      	mov	r0, r3
 800203c:	4621      	mov	r1, r4
 800203e:	f7fe fcb9 	bl	80009b4 <__aeabi_d2uiz>
 8002042:	4603      	mov	r3, r0
 8002044:	853b      	strh	r3, [r7, #40]	; 0x28
  I_dc_NO_LOAD_Max_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc + I_dc_NO_LOAD_Delta_Limit_loc);                                                 /// 
 8002046:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002048:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800204a:	4413      	add	r3, r2
 800204c:	84fb      	strh	r3, [r7, #38]	; 0x26
  I_dc_NO_LOAD_Min_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc - I_dc_NO_LOAD_Delta_Limit_loc);                                                 /// 
 800204e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002050:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	84bb      	strh	r3, [r7, #36]	; 0x24

  I_dc_LOW_LOAD_Limit_loc=(uint16_t)(((float)I_dc_LOW_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                         /// (IDC_Light_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800205c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002060:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800206a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002072:	ee17 3a90 	vmov	r3, s15
 8002076:	847b      	strh	r3, [r7, #34]	; 0x22
  I_dc_LOW_LOAD_Delta_Limit_loc=(uint16_t)((I_dc_LOW_LOAD_Limit_loc - DPC_ADC_Conf_loc->B_Idc)*((float)DPC_LOW_LOAD_DELTA_CURR*0.01));                   ///
 8002078:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208c:	ee17 0a90 	vmov	r0, s15
 8002090:	f7fe fa26 	bl	80004e0 <__aeabi_f2d>
 8002094:	a324      	add	r3, pc, #144	; (adr r3, 8002128 <DPC_MISC_DCLoad_Init+0x1a8>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	f7fe fa79 	bl	8000590 <__aeabi_dmul>
 800209e:	4603      	mov	r3, r0
 80020a0:	460c      	mov	r4, r1
 80020a2:	4618      	mov	r0, r3
 80020a4:	4621      	mov	r1, r4
 80020a6:	f7fe fc85 	bl	80009b4 <__aeabi_d2uiz>
 80020aa:	4603      	mov	r3, r0
 80020ac:	843b      	strh	r3, [r7, #32]
  I_dc_LOW_LOAD_Max_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc + I_dc_LOW_LOAD_Delta_Limit_loc);                                               /// 
 80020ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80020b0:	8c3b      	ldrh	r3, [r7, #32]
 80020b2:	4413      	add	r3, r2
 80020b4:	83fb      	strh	r3, [r7, #30]
  I_dc_LOW_LOAD_Min_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc - I_dc_LOW_LOAD_Delta_Limit_loc);                                               /// 
 80020b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80020b8:	8c3b      	ldrh	r3, [r7, #32]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	83bb      	strh	r3, [r7, #28]

  I_dc_OVER_LOAD_Limit_loc=(uint16_t)(((float)I_dc_OVER_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                       /// (IDC_Over_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias   
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80020c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80020c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80020d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020da:	ee17 3a90 	vmov	r3, s15
 80020de:	837b      	strh	r3, [r7, #26]
  
  DC_Load_Limit_sub->V_cap_Limit=V_cap_Limit_loc;  
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80020e4:	801a      	strh	r2, [r3, #0]
  DC_Load_Limit_sub->V_dc_Limit=V_dc_Limit_loc;  
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80020ea:	821a      	strh	r2, [r3, #16]
  DC_Load_Limit_sub->I_No_load_Threshold=I_dc_NO_LOAD_Limit_loc;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80020f0:	805a      	strh	r2, [r3, #2]
  DC_Load_Limit_sub->I_No_load_Max_Threshold=I_dc_NO_LOAD_Max_Limit_loc;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80020f6:	809a      	strh	r2, [r3, #4]
  DC_Load_Limit_sub->I_No_load_Min_Threshold=I_dc_NO_LOAD_Min_Limit_loc;  
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020fc:	80da      	strh	r2, [r3, #6]
  DC_Load_Limit_sub->I_Low_load_Threshold=I_dc_LOW_LOAD_Limit_loc;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002102:	811a      	strh	r2, [r3, #8]
  DC_Load_Limit_sub->I_Low_load_Max_Threshold=I_dc_LOW_LOAD_Max_Limit_loc;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	8bfa      	ldrh	r2, [r7, #30]
 8002108:	815a      	strh	r2, [r3, #10]
  DC_Load_Limit_sub->I_Low_load_Min_Threshold=I_dc_LOW_LOAD_Min_Limit_loc;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	8bba      	ldrh	r2, [r7, #28]
 800210e:	819a      	strh	r2, [r3, #12]
  DC_Load_Limit_sub->I_Over_load_Threshold=I_dc_OVER_LOAD_Limit_loc;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	8b7a      	ldrh	r2, [r7, #26]
 8002114:	81da      	strh	r2, [r3, #14]
  
  
}
 8002116:	bf00      	nop
 8002118:	3734      	adds	r7, #52	; 0x34
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	bf00      	nop
 8002120:	9999999a 	.word	0x9999999a
 8002124:	3fc99999 	.word	0x3fc99999
 8002128:	33333333 	.word	0x33333333
 800212c:	3fd33333 	.word	0x3fd33333

08002130 <DPC_MISC_ACSource_Init>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

void DPC_MISC_ACSource_Init(DPC_Source_Limit_TypeDef *AC_Source_Limit_sub,uint16_t V_ac_Limit_VOLT,uint16_t V_ac_UV_Limit_VOLT,uint16_t V_ac_UVLO_Limit_VOLT,uint16_t V_ac_Low_Limit_VOLT,uint16_t I_ac_Limit_AMP,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8002130:	b480      	push	{r7}
 8002132:	b08b      	sub	sp, #44	; 0x2c
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	461a      	mov	r2, r3
 800213e:	4603      	mov	r3, r0
 8002140:	817b      	strh	r3, [r7, #10]
 8002142:	460b      	mov	r3, r1
 8002144:	813b      	strh	r3, [r7, #8]
 8002146:	4613      	mov	r3, r2
 8002148:	80fb      	strh	r3, [r7, #6]
  uint16_t V_ac_neg_Low_Limit_loc;                                                                                                      /*!< >*/
  
  uint16_t I_ac_pos_Limit_loc;                                                                                                          /*!< >*/
  uint16_t I_ac_neg_Limit_loc;                                                                                                          /*!< >*/
   
  V_ac_pos_Limit_loc=(uint16_t)(((float)V_ac_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                              /*!< >*/
 800214a:	897b      	ldrh	r3, [r7, #10]
 800214c:	ee07 3a90 	vmov	s15, r3
 8002150:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002160:	edd3 7a02 	vldr	s15, [r3, #8]
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800216c:	ee17 3a90 	vmov	r3, s15
 8002170:	84fb      	strh	r3, [r7, #38]	; 0x26
  V_ac_neg_Limit_loc=(uint16_t)(((float)-V_ac_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                             /*!< >*/
 8002172:	897b      	ldrh	r3, [r7, #10]
 8002174:	425b      	negs	r3, r3
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800217e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218a:	edd3 7a02 	vldr	s15, [r3, #8]
 800218e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002196:	ee17 3a90 	vmov	r3, s15
 800219a:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  V_ac_pos_UVLO_Limit_loc=(uint16_t)(((float)V_ac_UVLO_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                    /*!< >*/
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80021b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021be:	ee17 3a90 	vmov	r3, s15
 80021c2:	847b      	strh	r3, [r7, #34]	; 0x22
  V_ac_neg_UVLO_Limit_loc=(uint16_t)(((float)-V_ac_UVLO_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                   /*!< >*/
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	425b      	negs	r3, r3
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d2:	edd3 7a00 	vldr	s15, [r3]
 80021d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80021e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e8:	ee17 3a90 	vmov	r3, s15
 80021ec:	843b      	strh	r3, [r7, #32]
  
  V_ac_pos_UV_Limit_loc=(uint16_t)(((float)V_ac_UV_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                        /*!< >*/
 80021ee:	893b      	ldrh	r3, [r7, #8]
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	edd3 7a02 	vldr	s15, [r3, #8]
 8002208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002210:	ee17 3a90 	vmov	r3, s15
 8002214:	83fb      	strh	r3, [r7, #30]
  V_ac_neg_UV_Limit_loc=(uint16_t)(((float)-V_ac_UV_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                       /*!< >*/
 8002216:	893b      	ldrh	r3, [r7, #8]
 8002218:	425b      	negs	r3, r3
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800223a:	ee17 3a90 	vmov	r3, s15
 800223e:	83bb      	strh	r3, [r7, #28]
  
  V_ac_pos_Low_Limit_loc=(uint16_t)(((float)V_ac_Low_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                      /*!< >*/
 8002240:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002256:	edd3 7a02 	vldr	s15, [r3, #8]
 800225a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002262:	ee17 3a90 	vmov	r3, s15
 8002266:	837b      	strh	r3, [r7, #26]
  V_ac_neg_Low_Limit_loc=(uint16_t)(((float)-V_ac_Low_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                     /*!< >*/
 8002268:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800226a:	425b      	negs	r3, r3
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002280:	edd3 7a02 	vldr	s15, [r3, #8]
 8002284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800228c:	ee17 3a90 	vmov	r3, s15
 8002290:	833b      	strh	r3, [r7, #24]
  
  I_ac_pos_Limit_loc=(uint16_t)(((float)I_ac_Limit_AMP*DPC_ADC_Conf_loc->G_Iac)+DPC_ADC_Conf_loc->B_Iac);                               /*!< >*/
 8002292:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800229c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229e:	edd3 7a03 	vldr	s15, [r3, #12]
 80022a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80022ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b4:	ee17 3a90 	vmov	r3, s15
 80022b8:	82fb      	strh	r3, [r7, #22]
  I_ac_neg_Limit_loc=(uint16_t)(((float)-I_ac_Limit_AMP*DPC_ADC_Conf_loc->G_Iac)+DPC_ADC_Conf_loc->B_Iac);                              /*!< >*/
 80022ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80022bc:	425b      	negs	r3, r3
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80022cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80022d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022de:	ee17 3a90 	vmov	r3, s15
 80022e2:	82bb      	strh	r3, [r7, #20]
  
  
  AC_Source_Limit_sub->V_ac_pos_Limit=V_ac_pos_Limit_loc;                                                                               /*!< >*/
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80022e8:	801a      	strh	r2, [r3, #0]
  AC_Source_Limit_sub->V_ac_neg_Limit=V_ac_neg_Limit_loc;                                                                               /*!< >*/
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022ee:	805a      	strh	r2, [r3, #2]
  
  AC_Source_Limit_sub->V_ac_pos_UVLO_Limit=V_ac_pos_UVLO_Limit_loc;                                                                     /*!< >*/
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80022f4:	809a      	strh	r2, [r3, #4]
  AC_Source_Limit_sub->V_ac_neg_UVLO_Limit=V_ac_neg_UVLO_Limit_loc;                                                                     /*!< >*/  
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8c3a      	ldrh	r2, [r7, #32]
 80022fa:	80da      	strh	r2, [r3, #6]
    
  AC_Source_Limit_sub->V_ac_pos_UV_Limit=V_ac_pos_UV_Limit_loc;                                                                         /*!< >*/
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8bfa      	ldrh	r2, [r7, #30]
 8002300:	811a      	strh	r2, [r3, #8]
  AC_Source_Limit_sub->V_ac_neg_UV_Limit=V_ac_neg_UV_Limit_loc;                                                                         /*!< >*/
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8bba      	ldrh	r2, [r7, #28]
 8002306:	815a      	strh	r2, [r3, #10]
    
  AC_Source_Limit_sub->V_ac_pos_Low_Limit=V_ac_pos_Low_Limit_loc;                                                                       /*!< >*/
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8b7a      	ldrh	r2, [r7, #26]
 800230c:	819a      	strh	r2, [r3, #12]
  AC_Source_Limit_sub->V_ac_neg_Low_Limit=V_ac_neg_Low_Limit_loc;                                                                       /*!< >*/
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8b3a      	ldrh	r2, [r7, #24]
 8002312:	81da      	strh	r2, [r3, #14]
  
  AC_Source_Limit_sub->I_ac_pos_Limit=I_ac_pos_Limit_loc;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8afa      	ldrh	r2, [r7, #22]
 8002318:	821a      	strh	r2, [r3, #16]
  AC_Source_Limit_sub->I_ac_neg_Limit=I_ac_neg_Limit_loc;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8aba      	ldrh	r2, [r7, #20]
 800231e:	825a      	strh	r2, [r3, #18]
  
  
}
 8002320:	bf00      	nop
 8002322:	372c      	adds	r7, #44	; 0x2c
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <DPC_MISC_APPL_Timer_Init>:
* @retval None
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/
void DPC_MISC_APPL_Timer_Init(TIM_HandleTypeDef AppTIM, uint32_t  APPL_Freq_Desidered)
{
 800232c:	b084      	sub	sp, #16
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	f107 0c18 	add.w	ip, r7, #24
 8002338:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

  uint32_t Timers_Clock;                                                                ///
  uint32_t Timers_PSC;                                                                  ///
  uint32_t Timers_ClockPSCed;                                                           ///

  Timers_PSC=(uint32_t)(READ_REG(AppTIM.Instance->PSC));                                ///
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	60fb      	str	r3, [r7, #12]
  Timers_Clock=HAL_RCC_GetPCLK2Freq();                                                  ///  
 8002342:	f009 fd21 	bl	800bd88 <HAL_RCC_GetPCLK2Freq>
 8002346:	60b8      	str	r0, [r7, #8]
  
  Timers_ClockPSCed=(Timers_Clock/(Timers_PSC+1));                                      ///
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3301      	adds	r3, #1
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002352:	607b      	str	r3, [r7, #4]
  
  AppTIM.Init.Period = ((Timers_ClockPSCed/APPL_Freq_Desidered) - 1);                   ///
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_TIM_Base_Init(&AppTIM) != HAL_OK){Error_Handler();}                           ///Init Task Timer  
 8002360:	f107 0018 	add.w	r0, r7, #24
 8002364:	f009 ffed 	bl	800c342 <HAL_TIM_Base_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <DPC_MISC_APPL_Timer_Init+0x46>
 800236e:	f003 fa6b 	bl	8005848 <Error_Handler>
 
} 
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800237c:	b004      	add	sp, #16
 800237e:	4770      	bx	lr

08002380 <DPC_MISC_Appl_Timer_Start>:




void DPC_MISC_Appl_Timer_Start(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&APPL_Tim1);  //Inizializza il Timer con IT che gestisce l'aggiornamento del duty
 8002384:	4807      	ldr	r0, [pc, #28]	; (80023a4 <DPC_MISC_Appl_Timer_Start+0x24>)
 8002386:	f00a f833 	bl	800c3f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&APPL_Tim3);  //Inizializza il Timer con IT che gestisce l'aggiornamento del duty
 800238a:	4807      	ldr	r0, [pc, #28]	; (80023a8 <DPC_MISC_Appl_Timer_Start+0x28>)
 800238c:	f00a f830 	bl	800c3f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&APPL_Tim2);  //Inizializza il Timer con IT che gestisce l'aggiornamento ddel display 
 8002390:	4806      	ldr	r0, [pc, #24]	; (80023ac <DPC_MISC_Appl_Timer_Start+0x2c>)
 8002392:	f00a f82d 	bl	800c3f0 <HAL_TIM_Base_Start_IT>
    
  HAL_TIM_PWM_Start(&APPL_Tim4, TIM_CHANNEL_1);   
 8002396:	2100      	movs	r1, #0
 8002398:	4805      	ldr	r0, [pc, #20]	; (80023b0 <DPC_MISC_Appl_Timer_Start+0x30>)
 800239a:	f00a f8a1 	bl	800c4e0 <HAL_TIM_PWM_Start>
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000b9c4 	.word	0x2000b9c4
 80023a8:	2000b978 	.word	0x2000b978
 80023ac:	2000b92c 	.word	0x2000b92c
 80023b0:	2000b8e0 	.word	0x2000b8e0

080023b4 <DPC_MISC_BLED_Set>:
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/



void DPC_MISC_BLED_Set(TIM_HandleTypeDef *htim_bled,uint32_t TIM_CHANNEL_BLED,DPC_BLED_TypeDef State_BLED){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	4613      	mov	r3, r2
 80023c0:	71fb      	strb	r3, [r7, #7]
//    break;
//  case BLED_Wait:
//    __HAL_TIM_SET_COMPARE(htim_bled, TIM_CHANNEL_BLED, 0xC000);  // 0xB000 = Orange 0x0000 = Red  0xFFFF = Green//      HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
//    break;
//  }
	  switch ( State_BLED){
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d86a      	bhi.n	800249e <DPC_MISC_BLED_Set+0xea>
 80023c8:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <DPC_MISC_BLED_Set+0x1c>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	080023e9 	.word	0x080023e9
 80023d4:	0800249f 	.word	0x0800249f
 80023d8:	08002403 	.word	0x08002403
 80023dc:	08002445 	.word	0x08002445
 80023e0:	0800246b 	.word	0x0800246b
 80023e4:	08002485 	.word	0x08002485
	  case BLED_Idle:
		  HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_SET);  // 0xB000 = Orange 0x0000 = Red  0xFFFF = Green//      HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	2140      	movs	r1, #64	; 0x40
 80023ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f0:	f006 f9e0 	bl	80087b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin, GPIO_PIN_RESET);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2110      	movs	r1, #16
 80023f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fc:	f006 f9da 	bl	80087b4 <HAL_GPIO_WritePin>
		  break;
 8002400:	e04d      	b.n	800249e <DPC_MISC_BLED_Set+0xea>
//	  case BLED_StartUp_inrush:
//	    __HAL_TIM_SET_COMPARE(htim_bled, TIM_CHANNEL_BLED, 0xE000);  // 0xB000 = Orange 0x0000 = Red  0xFFFF = Green//      HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
//	    break;
	  case BLED_Fault:
	    HAL_Delay(600);
 8002402:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002406:	f003 fd4d 	bl	8005ea4 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_SET);
 800240a:	2201      	movs	r2, #1
 800240c:	2140      	movs	r1, #64	; 0x40
 800240e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002412:	f006 f9cf 	bl	80087b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	2110      	movs	r1, #16
 800241a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800241e:	f006 f9c9 	bl	80087b4 <HAL_GPIO_WritePin>
	    HAL_Delay(600);
 8002422:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002426:	f003 fd3d 	bl	8005ea4 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2140      	movs	r1, #64	; 0x40
 800242e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002432:	f006 f9bf 	bl	80087b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin, GPIO_PIN_SET);
 8002436:	2201      	movs	r2, #1
 8002438:	2110      	movs	r1, #16
 800243a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800243e:	f006 f9b9 	bl	80087b4 <HAL_GPIO_WritePin>
	    break;
 8002442:	e02c      	b.n	800249e <DPC_MISC_BLED_Set+0xea>
	  case BLED_Error:
		  HAL_Delay(100);
 8002444:	2064      	movs	r0, #100	; 0x64
 8002446:	f003 fd2d 	bl	8005ea4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_RESET);
 800244a:	2200      	movs	r2, #0
 800244c:	2140      	movs	r1, #64	; 0x40
 800244e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002452:	f006 f9af 	bl	80087b4 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8002456:	2064      	movs	r0, #100	; 0x64
 8002458:	f003 fd24 	bl	8005ea4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_SET);
 800245c:	2201      	movs	r2, #1
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002464:	f006 f9a6 	bl	80087b4 <HAL_GPIO_WritePin>
		break;
 8002468:	e019      	b.n	800249e <DPC_MISC_BLED_Set+0xea>
	  case BLED_Run:
		HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_SET);   // 0xB000 = Orange 0x0000 = Red  0xFFFF = Green//      HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
 800246a:	2201      	movs	r2, #1
 800246c:	2140      	movs	r1, #64	; 0x40
 800246e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002472:	f006 f99f 	bl	80087b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin, GPIO_PIN_SET);
 8002476:	2201      	movs	r2, #1
 8002478:	2110      	movs	r1, #16
 800247a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247e:	f006 f999 	bl	80087b4 <HAL_GPIO_WritePin>
		break;
 8002482:	e00c      	b.n	800249e <DPC_MISC_BLED_Set+0xea>
	  case BLED_StartUp_burst:
		  HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	2140      	movs	r1, #64	; 0x40
 8002488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800248c:	f006 f992 	bl	80087b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	2140      	movs	r1, #64	; 0x40
 8002494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002498:	f006 f98c 	bl	80087b4 <HAL_GPIO_WritePin>
		  break;
 800249c:	bf00      	nop
//	    break;
//	  case BLED_Wait:
//	    __HAL_TIM_SET_COMPARE(htim_bled, TIM_CHANNEL_BLED, 0xC000);  // 0xB000 = Orange 0x0000 = Red  0xFFFF = Green//      HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
//	    break;
	  }
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop

080024a8 <DPC_MISC_CHECK_AC_SOURCE>:
* @retval void
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

DPC_Source_Status_TypeDef DPC_MISC_CHECK_AC_SOURCE(DPC_Source_TypeDef  *AC_Source_sub,DPC_Source_Limit_TypeDef AC_Source_Limit_sub,float Theta){
 80024a8:	b084      	sub	sp, #16
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b08c      	sub	sp, #48	; 0x30
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80024b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80024ba:	ed87 0a00 	vstr	s0, [r7]
  
  DPC_Source_Status_TypeDef Status_Source = AC_Source_sub->Status_Source; 
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7a1b      	ldrb	r3, [r3, #8]
 80024c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  float Theta_start = 0.08;                                                                             /*!< Approximation of 2Pi to define the SIN near to zero crossing>*/
 80024c6:	4b7b      	ldr	r3, [pc, #492]	; (80026b4 <DPC_MISC_CHECK_AC_SOURCE+0x20c>)
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
  float Theta_stop = 6.20;                                                                              /*!< Approximation of 2Pi to define the SIN near to zero crossing>*/
 80024ca:	4b7b      	ldr	r3, [pc, #492]	; (80026b8 <DPC_MISC_CHECK_AC_SOURCE+0x210>)
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint16_t I_ac_pos_Limit_local;                                                                        /*!< >*/
  uint16_t I_ac_neg_Limit_local;                                                                        /*!< >*/
  
  
  V_ac_pos_Limit_local=AC_Source_Limit_sub.V_ac_pos_Limit;                                              /*!< >*/
 80024ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80024d0:	847b      	strh	r3, [r7, #34]	; 0x22
  V_ac_neg_Limit_local=AC_Source_Limit_sub.V_ac_neg_Limit;                                              /*!< >*/
 80024d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80024d4:	843b      	strh	r3, [r7, #32]
  
  V_ac_pos_UVLO_Limit_local=AC_Source_Limit_sub.V_ac_pos_UVLO_Limit;                                    /*!< >*/
 80024d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024da:	83fb      	strh	r3, [r7, #30]
  V_ac_neg_UVLO_Limit_local=AC_Source_Limit_sub.V_ac_neg_UVLO_Limit;                                    /*!< >*/
 80024dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80024e0:	83bb      	strh	r3, [r7, #28]
  
  V_ac_pos_UV_Limit_local=AC_Source_Limit_sub.V_ac_pos_UV_Limit;                                        /*!< >*/
 80024e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80024e6:	837b      	strh	r3, [r7, #26]
  V_ac_neg_UV_Limit_local=AC_Source_Limit_sub.V_ac_neg_UV_Limit;                                        /*!< >*/
 80024e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80024ec:	833b      	strh	r3, [r7, #24]
  
  V_ac_pos_Low_Limit_local=AC_Source_Limit_sub.V_ac_pos_Low_Limit;                                      /*!< >*/
 80024ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024f2:	82fb      	strh	r3, [r7, #22]
  V_ac_neg_Low_Limit_local=AC_Source_Limit_sub.V_ac_neg_Low_Limit;                                      /*!< >*/
 80024f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024f8:	82bb      	strh	r3, [r7, #20]
  
  I_ac_pos_Limit_local=AC_Source_Limit_sub.I_ac_pos_Limit;                                              /*!< >*/
 80024fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024fe:	827b      	strh	r3, [r7, #18]
  I_ac_neg_Limit_local=AC_Source_Limit_sub.I_ac_neg_Limit;                                              /*!< >*/
 8002500:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002504:	823b      	strh	r3, [r7, #16]
  
  
  
  DATA_VAC = Read_GRID();                                                                               /*!< >*/
 8002506:	f7fe fb65 	bl	8000bd4 <Read_GRID>
 800250a:	60f8      	str	r0, [r7, #12]
  DATA_IAC = Read_Curr_GRID();                                                                          /*!< >*/
 800250c:	f7fe fb6c 	bl	8000be8 <Read_Curr_GRID>
 8002510:	60b8      	str	r0, [r7, #8]
//    Status_Source=OVERVOLTAGE_SOURCE;
//    DPC_FLT_Faulterror_Set(FAULT_OVS);  
//  }
//  else{  
    
    if(Theta<=Theta_start){    
 8002512:	ed97 7a00 	vldr	s14, [r7]
 8002516:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800251a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	d812      	bhi.n	800254a <DPC_MISC_CHECK_AC_SOURCE+0xa2>
      /// Reset pk max & pk min of AC Voltage    
      AC_Source_sub->V_ac_pk_pos_local=0;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	801a      	strh	r2, [r3, #0]
      AC_Source_sub->V_ac_pk_neg_local=1<<12;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002530:	805a      	strh	r2, [r3, #2]
      /// Reset pk max & pk min of AC Current  
      AC_Source_sub->I_ac_pk_pos_local=0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	809a      	strh	r2, [r3, #4]
      AC_Source_sub->I_ac_pk_neg_local=1<<12;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800253e:	80da      	strh	r2, [r3, #6]
      Status_Source=AC_Source_sub->Status_Source;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7a1b      	ldrb	r3, [r3, #8]
 8002544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002548:	e0a6      	b.n	8002698 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
    }
    else if(Theta>Theta_start && Theta<Theta_stop){
 800254a:	ed97 7a00 	vldr	s14, [r7]
 800254e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255a:	dd39      	ble.n	80025d0 <DPC_MISC_CHECK_AC_SOURCE+0x128>
 800255c:	ed97 7a00 	vldr	s14, [r7]
 8002560:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	d530      	bpl.n	80025d0 <DPC_MISC_CHECK_AC_SOURCE+0x128>
      /// Determinate pk max & pk min of AC Voltage
      if(AC_Source_sub->V_ac_pk_pos_local<DATA_VAC->phA){
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d204      	bcs.n	8002586 <DPC_MISC_CHECK_AC_SOURCE+0xde>
        AC_Source_sub->V_ac_pk_pos_local=DATA_VAC->phA;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	801a      	strh	r2, [r3, #0]
      }
      if(AC_Source_sub->V_ac_pk_neg_local>DATA_VAC->phA){
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	885b      	ldrh	r3, [r3, #2]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d904      	bls.n	800259e <DPC_MISC_CHECK_AC_SOURCE+0xf6>
        AC_Source_sub->V_ac_pk_neg_local=DATA_VAC->phA;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	805a      	strh	r2, [r3, #2]
      }
      /// Determinate pk max & pk min of AC Current
      
      if(AC_Source_sub->I_ac_pk_pos_local<DATA_IAC->phA){
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	889b      	ldrh	r3, [r3, #4]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d204      	bcs.n	80025b6 <DPC_MISC_CHECK_AC_SOURCE+0x10e>
        AC_Source_sub->I_ac_pk_pos_local=DATA_IAC->phA;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	809a      	strh	r2, [r3, #4]
      }
      if(AC_Source_sub->I_ac_pk_neg_local>DATA_IAC->phA){
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	88db      	ldrh	r3, [r3, #6]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d969      	bls.n	8002698 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        AC_Source_sub->I_ac_pk_neg_local=DATA_IAC->phA;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	80da      	strh	r2, [r3, #6]
      if(AC_Source_sub->I_ac_pk_neg_local>DATA_IAC->phA){
 80025ce:	e063      	b.n	8002698 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
      }
      
    }
    else if(Theta>=Theta_stop){
 80025d0:	ed97 7a00 	vldr	s14, [r7]
 80025d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e0:	db5a      	blt.n	8002698 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
      
      if((AC_Source_sub->V_ac_pk_pos_local == 0) || (AC_Source_sub->V_ac_pk_neg_local == 1<<12)){ 
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d004      	beq.n	80025f4 <DPC_MISC_CHECK_AC_SOURCE+0x14c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	885b      	ldrh	r3, [r3, #2]
 80025ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f2:	d107      	bne.n	8002604 <DPC_MISC_CHECK_AC_SOURCE+0x15c>
    	  if (Status_Source!=OVERCURRENT_SOURCE){
 80025f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d04d      	beq.n	8002698 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
    		  Status_Source=WAIT_SOURCE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    	  if (Status_Source!=OVERCURRENT_SOURCE){
 8002602:	e049      	b.n	8002698 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
    	  }
      }
      else if (Status_Source!=OVERCURRENT_SOURCE){
 8002604:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002608:	2b06      	cmp	r3, #6
 800260a:	d045      	beq.n	8002698 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
      //else{
        if((AC_Source_sub->V_ac_pk_pos_local > V_ac_pos_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local < V_ac_neg_Limit_local)){
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002612:	429a      	cmp	r2, r3
 8002614:	d20b      	bcs.n	800262e <DPC_MISC_CHECK_AC_SOURCE+0x186>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	885b      	ldrh	r3, [r3, #2]
 800261a:	8c3a      	ldrh	r2, [r7, #32]
 800261c:	429a      	cmp	r2, r3
 800261e:	d906      	bls.n	800262e <DPC_MISC_CHECK_AC_SOURCE+0x186>
          Status_Source=OVERVOLTAGE_SOURCE;
 8002620:	2305      	movs	r3, #5
 8002622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(FAULT_OVS);
 8002626:	2010      	movs	r0, #16
 8002628:	f7fe fcf2 	bl	8001010 <DPC_FLT_Faulterror_Set>
 800262c:	e034      	b.n	8002698 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        } 
        else if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_Low_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_Low_Limit_local)){
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	8afa      	ldrh	r2, [r7, #22]
 8002634:	429a      	cmp	r2, r3
 8002636:	d90c      	bls.n	8002652 <DPC_MISC_CHECK_AC_SOURCE+0x1aa>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	885b      	ldrh	r3, [r3, #2]
 800263c:	8aba      	ldrh	r2, [r7, #20]
 800263e:	429a      	cmp	r2, r3
 8002640:	d207      	bcs.n	8002652 <DPC_MISC_CHECK_AC_SOURCE+0x1aa>
          Status_Source=NO_SOURCE;
 8002642:	2301      	movs	r3, #1
 8002644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(ERROR_AC_OFF);
 8002648:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800264c:	f7fe fce0 	bl	8001010 <DPC_FLT_Faulterror_Set>
 8002650:	e022      	b.n	8002698 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        }
        else if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_UV_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_UV_Limit_local)){
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	8b7a      	ldrh	r2, [r7, #26]
 8002658:	429a      	cmp	r2, r3
 800265a:	d90c      	bls.n	8002676 <DPC_MISC_CHECK_AC_SOURCE+0x1ce>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	885b      	ldrh	r3, [r3, #2]
 8002660:	8b3a      	ldrh	r2, [r7, #24]
 8002662:	429a      	cmp	r2, r3
 8002664:	d207      	bcs.n	8002676 <DPC_MISC_CHECK_AC_SOURCE+0x1ce>
          Status_Source=UV_SOURCE;
 8002666:	2302      	movs	r3, #2
 8002668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(ERROR_AC_UV); 
 800266c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002670:	f7fe fcce 	bl	8001010 <DPC_FLT_Faulterror_Set>
 8002674:	e010      	b.n	8002698 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        }      
        else {
          Status_Source=OK_SOURCE;
 8002676:	2304      	movs	r3, #4
 8002678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_UVLO_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_UVLO_Limit_local)){
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	8bfa      	ldrh	r2, [r7, #30]
 8002682:	429a      	cmp	r2, r3
 8002684:	d908      	bls.n	8002698 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	885b      	ldrh	r3, [r3, #2]
 800268a:	8bba      	ldrh	r2, [r7, #28]
 800268c:	429a      	cmp	r2, r3
 800268e:	d203      	bcs.n	8002698 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
            DPC_FLT_Faulterror_Set(ERROR_AC_UVLO);
 8002690:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002694:	f7fe fcbc 	bl	8001010 <DPC_FLT_Faulterror_Set>
  //    }
  //    Status_Source=OK_SOURCE;   
  //  }    
  //  }
  
  AC_Source_sub->Status_Source=Status_Source;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800269e:	721a      	strb	r2, [r3, #8]
  return Status_Source;
 80026a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3730      	adds	r7, #48	; 0x30
 80026a8:	46bd      	mov	sp, r7
 80026aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026ae:	b004      	add	sp, #16
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	3da3d70a 	.word	0x3da3d70a
 80026b8:	40c66666 	.word	0x40c66666

080026bc <DPC_PLL_Init>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DPC_PLL_Init(PLL_Struct *PLL_sub, float kp_pll, float ki_pll, float Ts_pll, float phi_2pi, float delta_freq, uint8_t uFeedforward_Hz, FlagStatus satPI_toggle,float PIsat_up,float PIsat_down){
 80026bc:	b480      	push	{r7}
 80026be:	b08b      	sub	sp, #44	; 0x2c
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6278      	str	r0, [r7, #36]	; 0x24
 80026c4:	ed87 0a08 	vstr	s0, [r7, #32]
 80026c8:	edc7 0a07 	vstr	s1, [r7, #28]
 80026cc:	ed87 1a06 	vstr	s2, [r7, #24]
 80026d0:	edc7 1a05 	vstr	s3, [r7, #20]
 80026d4:	ed87 2a04 	vstr	s4, [r7, #16]
 80026d8:	460b      	mov	r3, r1
 80026da:	edc7 2a02 	vstr	s5, [r7, #8]
 80026de:	ed87 3a01 	vstr	s6, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	4613      	mov	r3, r2
 80026e6:	73bb      	strb	r3, [r7, #14]

PLL_sub->PLL_Enable=SET;
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
PLL_sub->kp_pll=kp_pll;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	6a3a      	ldr	r2, [r7, #32]
 80026f4:	61da      	str	r2, [r3, #28]
PLL_sub->ki_pll=ki_pll;
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	621a      	str	r2, [r3, #32]
PLL_sub->k0_pll=kp_pll;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	6a3a      	ldr	r2, [r7, #32]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
PLL_sub->k1_pll=ki_pll*Ts_pll;
 8002702:	ed97 7a07 	vldr	s14, [r7, #28]
 8002706:	edd7 7a06 	vldr	s15, [r7, #24]
 800270a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
PLL_sub->Ts_pll=Ts_pll;
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c
PLL_sub->pll_phi_2pi=phi_2pi;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	60da      	str	r2, [r3, #12]
PLL_sub->delta_freq=delta_freq;
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
PLL_sub->uFreqFeedforwardHz=uFeedforward_Hz;
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
PLL_sub->pi_pll.satPI_toggle=satPI_toggle;
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	7bba      	ldrb	r2, [r7, #14]
 8002734:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
PLL_sub->pi_pll.PIsat_up=PIsat_up;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	659a      	str	r2, [r3, #88]	; 0x58
PLL_sub->pi_pll.PIsat_down=PIsat_down;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c
if(PLL_sub->PLL_Enable==SET){
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800274a:	2b01      	cmp	r3, #1
 800274c:	d104      	bne.n	8002758 <DPC_PLL_Init+0x9c>
PLL_sub->Status_PLL=PLL_IDLE;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
else if(PLL_sub->PLL_Enable==RESET){
PLL_sub->Status_PLL=PLL_DISABLED;
}  
}
 8002756:	e008      	b.n	800276a <DPC_PLL_Init+0xae>
else if(PLL_sub->PLL_Enable==RESET){
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <DPC_PLL_Init+0xae>
PLL_sub->Status_PLL=PLL_DISABLED;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	2205      	movs	r2, #5
 8002766:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 800276a:	bf00      	nop
 800276c:	372c      	adds	r7, #44	; 0x2c
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <DPC_PLL_pllqd_Run>:
  * 
  * @retval STATUS_PLL_TypeDef 
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
STATUS_PLL_TypeDef DPC_PLL_pllqd_Run(PLL_Struct *PLL_sub, VoltageAC_qd_PLL_Struct *VAC_qd_PLL,float *theta_out,  float *omega_pi_out){
 8002778:	b5b0      	push	{r4, r5, r7, lr}
 800277a:	b092      	sub	sp, #72	; 0x48
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
 
  STATUS_PLL_TypeDef STATUS_PLL;
  
  if(PLL_sub->PLL_Enable)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80f0 	beq.w	8002972 <DPC_PLL_pllqd_Run+0x1fa>
  {
  
//Pass "PLL_sub" data
//float kp_pll_sub=PLL_sub->kp_pll;                                       ///Local variable to pass kp data
//float ki_pll_sub=PLL_sub->ki_pll;                                       ///Local variable to pass ki data
float k0_pll_sub=PLL_sub->k0_pll;                                       ///Local variable to pass k0 data
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	643b      	str	r3, [r7, #64]	; 0x40
float k1_pll_sub=PLL_sub->k1_pll;                                       ///Local variable to pass k1 data
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
float pll_theta_in_sub = PLL_sub->pll_theta_in;                         /// Loacal variable to pass PLL theta input
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	63bb      	str	r3, [r7, #56]	; 0x38
float pll_theta_out_sub = PLL_sub->pll_theta_out;                       ///Local variable to pass PLL theta output
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
float Ts_pll_sub = PLL_sub->Ts_pll;                                     ///Local variable to pass Ts 
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	633b      	str	r3, [r7, #48]	; 0x30
FlagStatus satPI_toggle_sub = PLL_sub->pi_pll.satPI_toggle;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80027b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
float PIsat_down_sub=PLL_sub->pi_pll.PIsat_down;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
float PIsat_up_sub=PLL_sub->pi_pll.PIsat_up;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
//block!!

//Pass "VAC_qd_PLL" data 
float pll_d_sub=VAC_qd_PLL->Vph_d;      //Local variable to pass Vd
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	623b      	str	r3, [r7, #32]
float pll_q_sub=VAC_qd_PLL->Vph_q;      //Local variable to pass Vq
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	61fb      	str	r3, [r7, #28]
float pll_o_sub=VAC_qd_PLL->Vph_o;      //Local variable to pass Vo
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	61bb      	str	r3, [r7, #24]
//Local Data 
float omega_pi_pll_sub;  //omega_pi_pll_sub represent the output of the PI of PLL
float omega_pi_ff_pll_sub; //omega_pi_pll_sub will be added by feedforward terms
  
  // Set in actual angle (input) the previous value (output) 
  pll_theta_in_sub=pll_theta_out_sub;
 80027d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38
  //Save this new data in the "PLL_sub" struct
  PLL_sub->pll_theta_in=pll_theta_in_sub;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027e0:	601a      	str	r2, [r3, #0]
  
  //Pass and save the input "Vdq0" in "PLL_sub" struct
  PLL_sub->pll_d=pll_d_sub;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a3a      	ldr	r2, [r7, #32]
 80027e6:	611a      	str	r2, [r3, #16]
  PLL_sub->pll_q=pll_q_sub;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	615a      	str	r2, [r3, #20]
  PLL_sub->pll_o=pll_o_sub;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	619a      	str	r2, [r3, #24]
  
  //Configure the PI for PLL (k0, k1, SAT)
  // LOOP FILTER PI         
  PI_PLL.k0=k0_pll_sub; //K0=Kp
 80027f4:	4a69      	ldr	r2, [pc, #420]	; (800299c <DPC_PLL_pllqd_Run+0x224>)
 80027f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f8:	6353      	str	r3, [r2, #52]	; 0x34
  PI_PLL.k1=k1_pll_sub; //K1=Ki*Ts
 80027fa:	4a68      	ldr	r2, [pc, #416]	; (800299c <DPC_PLL_pllqd_Run+0x224>)
 80027fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fe:	6393      	str	r3, [r2, #56]	; 0x38
  
  PI_PLL.satPI_toggle=satPI_toggle_sub;
 8002800:	4a66      	ldr	r2, [pc, #408]	; (800299c <DPC_PLL_pllqd_Run+0x224>)
 8002802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002806:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
  PI_PLL.PIsat_up=PIsat_up_sub;
 800280a:	4a64      	ldr	r2, [pc, #400]	; (800299c <DPC_PLL_pllqd_Run+0x224>)
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	6213      	str	r3, [r2, #32]
  PI_PLL.PIsat_down=PIsat_down_sub;
 8002810:	4a62      	ldr	r2, [pc, #392]	; (800299c <DPC_PLL_pllqd_Run+0x224>)
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	6253      	str	r3, [r2, #36]	; 0x24
  
  
  //Task PI    
  PI(0, -pll_q_sub , &PI_PLL);
 8002816:	edd7 7a07 	vldr	s15, [r7, #28]
 800281a:	eef1 7a67 	vneg.f32	s15, s15
 800281e:	485f      	ldr	r0, [pc, #380]	; (800299c <DPC_PLL_pllqd_Run+0x224>)
 8002820:	eef0 0a67 	vmov.f32	s1, s15
 8002824:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80029a0 <DPC_PLL_pllqd_Run+0x228>
 8002828:	f000 fc3a 	bl	80030a0 <PI>
  
  //Pass the internal PI (PI_PLL) data in the "PLL_sub"
  PLL_sub->pi_pll=PI_PLL;          
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a5b      	ldr	r2, [pc, #364]	; (800299c <DPC_PLL_pllqd_Run+0x224>)
 8002830:	3338      	adds	r3, #56	; 0x38
 8002832:	4611      	mov	r1, r2
 8002834:	2248      	movs	r2, #72	; 0x48
 8002836:	4618      	mov	r0, r3
 8002838:	f00a fc66 	bl	800d108 <memcpy>
  
  omega_pi_pll_sub=PI_PLL.PIout_sat;
 800283c:	4b57      	ldr	r3, [pc, #348]	; (800299c <DPC_PLL_pllqd_Run+0x224>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	617b      	str	r3, [r7, #20]
  
  PLL_sub->omega_piout=omega_pi_pll_sub;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
  
  // FEEDFORWARD
  omega_pi_ff_pll_sub=omega_pi_pll_sub+PLL_sub->uFreqFeedforwardHz;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002856:	ed97 7a05 	vldr	s14, [r7, #20]
 800285a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285e:	edc7 7a04 	vstr	s15, [r7, #16]
  
  //  VTO - SATURATED INTEGRATOR    //Substitude with Integrator() of "integrator.h" 
  
  INTEGRATOR_PLL.Ts=Ts_pll_sub;  //Pass Ts(LocalVariable) to Integrator_PLL(struct)
 8002862:	4a50      	ldr	r2, [pc, #320]	; (80029a4 <DPC_PLL_pllqd_Run+0x22c>)
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002866:	6013      	str	r3, [r2, #0]
  Integral(&INTEGRATOR_PLL,omega_pi_ff_pll_sub);   //Task Integrator    
 8002868:	ed97 0a04 	vldr	s0, [r7, #16]
 800286c:	484d      	ldr	r0, [pc, #308]	; (80029a4 <DPC_PLL_pllqd_Run+0x22c>)
 800286e:	f7ff fadf 	bl	8001e30 <Integral>
  
  // SATURATE INTEGRATOR
  if (INTEGRATOR_PLL.Integralout>1)
 8002872:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <DPC_PLL_pllqd_Run+0x22c>)
 8002874:	edd3 7a03 	vldr	s15, [r3, #12]
 8002878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800287c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002884:	dd04      	ble.n	8002890 <DPC_PLL_pllqd_Run+0x118>
  {
    INTEGRATOR_PLL.Integralout=0;
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <DPC_PLL_pllqd_Run+0x22c>)
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	e010      	b.n	80028b2 <DPC_PLL_pllqd_Run+0x13a>
  }
  else if (INTEGRATOR_PLL.Integralout<0)
 8002890:	4b44      	ldr	r3, [pc, #272]	; (80029a4 <DPC_PLL_pllqd_Run+0x22c>)
 8002892:	edd3 7a03 	vldr	s15, [r3, #12]
 8002896:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	d504      	bpl.n	80028aa <DPC_PLL_pllqd_Run+0x132>
  {
    INTEGRATOR_PLL.Integralout=1;
 80028a0:	4b40      	ldr	r3, [pc, #256]	; (80029a4 <DPC_PLL_pllqd_Run+0x22c>)
 80028a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	e003      	b.n	80028b2 <DPC_PLL_pllqd_Run+0x13a>
  }
  else 
  {
    INTEGRATOR_PLL.Integralout=INTEGRATOR_PLL.Integralout;
 80028aa:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <DPC_PLL_pllqd_Run+0x22c>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	4a3d      	ldr	r2, [pc, #244]	; (80029a4 <DPC_PLL_pllqd_Run+0x22c>)
 80028b0:	60d3      	str	r3, [r2, #12]
  }
  
  //Pass INTEGRATOR_PLL(struct) to local PLL_sub(struct)
  PLL_sub->integrator_pll=INTEGRATOR_PLL;    
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a3b      	ldr	r2, [pc, #236]	; (80029a4 <DPC_PLL_pllqd_Run+0x22c>)
 80028b6:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80028ba:	4615      	mov	r5, r2
 80028bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028c0:	682b      	ldr	r3, [r5, #0]
 80028c2:	6023      	str	r3, [r4, #0]
  
  pll_theta_out_sub=INTEGRATOR_PLL.Integralout;
 80028c4:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <DPC_PLL_pllqd_Run+0x22c>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
  
  *theta_out=pll_theta_out_sub;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ce:	601a      	str	r2, [r3, #0]
  *omega_pi_out=omega_pi_ff_pll_sub;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	601a      	str	r2, [r3, #0]
  
  PLL_sub->pll_theta_out=pll_theta_out_sub;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028da:	605a      	str	r2, [r3, #4]
  
  PLL_sub->pll_theta_out_2pi= PLL_sub->pll_theta_out*DOUBLE_PI; //Scale normalized theta to (0-2pi)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	edd3 7a01 	vldr	s15, [r3, #4]
 80028e2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80029a8 <DPC_PLL_pllqd_Run+0x230>
 80028e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	edc3 7a02 	vstr	s15, [r3, #8]
  
  PLL_sub->omega_ff_pll=omega_pi_ff_pll_sub;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34
  
if((PLL_sub->omega_ff_pll-PLL_sub->uFreqFeedforwardHz)<PLL_sub->delta_freq&&(PLL_sub->omega_ff_pll-PLL_sub->uFreqFeedforwardHz)>-PLL_sub->delta_freq) ///CHECK
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800290a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291c:	d51d      	bpl.n	800295a <DPC_PLL_pllqd_Run+0x1e2>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002932:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800293c:	eef1 7a67 	vneg.f32	s15, s15
 8002940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002948:	dd07      	ble.n	800295a <DPC_PLL_pllqd_Run+0x1e2>
{
  PLL_sub->Status_PLL=PLL_SYNC;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  STATUS_PLL=PLL_SYNC;
 8002952:	2301      	movs	r3, #1
 8002954:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002958:	e01a      	b.n	8002990 <DPC_PLL_pllqd_Run+0x218>
}
else
{
  PLL_sub->Status_PLL=PLL_OUTRANGE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2202      	movs	r2, #2
 800295e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  STATUS_PLL=PLL_OUTRANGE;
 8002962:	2302      	movs	r3, #2
 8002964:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  DPC_FLT_Faulterror_Set(ERROR_PLL_OR);
 8002968:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800296c:	f7fe fb50 	bl	8001010 <DPC_FLT_Faulterror_Set>
 8002970:	e00e      	b.n	8002990 <DPC_PLL_pllqd_Run+0x218>
}

  }
  else{
    PLL_sub->omega_ff_pll=0;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	635a      	str	r2, [r3, #52]	; 0x34
    PLL_sub->pll_theta_out=0;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	605a      	str	r2, [r3, #4]
    PLL_sub->pll_theta_out_2pi=0;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
    STATUS_PLL=PLL_DISABLED;
 800298a:	2305      	movs	r3, #5
 800298c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
return STATUS_PLL;
 8002990:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8002994:	4618      	mov	r0, r3
 8002996:	3748      	adds	r7, #72	; 0x48
 8002998:	46bd      	mov	sp, r7
 800299a:	bdb0      	pop	{r4, r5, r7, pc}
 800299c:	200000ec 	.word	0x200000ec
 80029a0:	00000000 	.word	0x00000000
 80029a4:	200000d4 	.word	0x200000d4
 80029a8:	40c90fdb 	.word	0x40c90fdb

080029ac <DPC_PWM_Send_Burst_PWM>:
  *
  * @retval Null 
  *
  * @note Function valid for STM32G4xx microconroller family   
  */
void DPC_PWM_Send_Burst_PWM(DPC_PWM_TypeDef *tDPC_PWM_loc,float BURST_A,float BURST_B,float BURST_C,DMA_PWMDUTY_STRUCT* DMA_SRC ){
 80029ac:	b480      	push	{r7}
 80029ae:	b08b      	sub	sp, #44	; 0x2c
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6178      	str	r0, [r7, #20]
 80029b4:	ed87 0a04 	vstr	s0, [r7, #16]
 80029b8:	edc7 0a03 	vstr	s1, [r7, #12]
 80029bc:	ed87 1a02 	vstr	s2, [r7, #8]
 80029c0:	6079      	str	r1, [r7, #4]
  uint32_t dutyVCpos;
  uint32_t dutyVCneg;

  uint16_t PWM_PERIOD_COUNTER_INT;

  PWM_PERIOD_COUNTER_INT=__HAL_HRTIM_GETPERIOD(&PWM_Tim1, HRTIM_TIMERINDEX_TIMER_A);
 80029c2:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <DPC_PWM_Send_Burst_PWM+0xb8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  dutyVApos = BURST_A*PWM_PERIOD_COUNTER_INT;
 80029cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80029da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e2:	ee17 3a90 	vmov	r3, s15
 80029e6:	623b      	str	r3, [r7, #32]
  dutyVBpos = BURST_B*PWM_PERIOD_COUNTER_INT;
 80029e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80029f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029fe:	ee17 3a90 	vmov	r3, s15
 8002a02:	61fb      	str	r3, [r7, #28]
  dutyVCpos = BURST_C*PWM_PERIOD_COUNTER_INT;
 8002a04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a1a:	ee17 3a90 	vmov	r3, s15
 8002a1e:	61bb      	str	r3, [r7, #24]


	DMA_SRC->phAA=dutyVApos;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a3a      	ldr	r2, [r7, #32]
 8002a24:	601a      	str	r2, [r3, #0]
	DMA_SRC->phAB=dutyVApos;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	605a      	str	r2, [r3, #4]
	DMA_SRC->phBA=dutyVBpos;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	609a      	str	r2, [r3, #8]
	DMA_SRC->phBB=dutyVBpos;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	60da      	str	r2, [r3, #12]
	DMA_SRC->phCA=dutyVCpos;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	611a      	str	r2, [r3, #16]
	DMA_SRC->phCB=dutyVCpos;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	615a      	str	r2, [r3, #20]
	DMA_SRC->phA=dutyVApos;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a3a      	ldr	r2, [r7, #32]
 8002a48:	619a      	str	r2, [r3, #24]
	DMA_SRC->phB=dutyVBpos;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	61da      	str	r2, [r3, #28]
	DMA_SRC->phC=dutyVCpos;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	621a      	str	r2, [r3, #32]
//  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0x2,HRTIM_COMPAREUNIT_1,ValueH);
//  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0x3,HRTIM_COMPAREUNIT_1,ValueL);
//  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0x4,HRTIM_COMPAREUNIT_1,ValueH);
//  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0x5,HRTIM_COMPAREUNIT_1,ValueL);
  
}
 8002a56:	bf00      	nop
 8002a58:	372c      	adds	r7, #44	; 0x2c
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	2000035c 	.word	0x2000035c

08002a68 <DPC_PWM_Send_Duty_SPWM>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_Send_Duty_SPWM(DPC_PWM_TypeDef *tDPC_PWM_loc,float VA,float VB,float VC, DMA_PWMDUTY_STRUCT* DMA_SRC)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b095      	sub	sp, #84	; 0x54
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6178      	str	r0, [r7, #20]
 8002a70:	ed87 0a04 	vstr	s0, [r7, #16]
 8002a74:	edc7 0a03 	vstr	s1, [r7, #12]
 8002a78:	ed87 1a02 	vstr	s2, [r7, #8]
 8002a7c:	6079      	str	r1, [r7, #4]
  
  if(VA>1){VA=1;}
 8002a7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8e:	dd03      	ble.n	8002a98 <DPC_PWM_Send_Duty_SPWM+0x30>
 8002a90:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	e00a      	b.n	8002aae <DPC_PWM_Send_Duty_SPWM+0x46>
  else if(VA<-1){VA=-1;}
 8002a98:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a9c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa8:	d501      	bpl.n	8002aae <DPC_PWM_Send_Duty_SPWM+0x46>
 8002aaa:	4ba9      	ldr	r3, [pc, #676]	; (8002d50 <DPC_PWM_Send_Duty_SPWM+0x2e8>)
 8002aac:	613b      	str	r3, [r7, #16]
  if(VB>=1){VB=1;}
 8002aae:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	db03      	blt.n	8002ac8 <DPC_PWM_Send_Duty_SPWM+0x60>
 8002ac0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	e00a      	b.n	8002ade <DPC_PWM_Send_Duty_SPWM+0x76>
  else if(VB<-1){VB=-1;}
 8002ac8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002acc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	d501      	bpl.n	8002ade <DPC_PWM_Send_Duty_SPWM+0x76>
 8002ada:	4b9d      	ldr	r3, [pc, #628]	; (8002d50 <DPC_PWM_Send_Duty_SPWM+0x2e8>)
 8002adc:	60fb      	str	r3, [r7, #12]
  if(VC>=1){VC=1;}
 8002ade:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aee:	db03      	blt.n	8002af8 <DPC_PWM_Send_Duty_SPWM+0x90>
 8002af0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	e00a      	b.n	8002b0e <DPC_PWM_Send_Duty_SPWM+0xa6>
  else if(VC<-1){VC=-1;}  
 8002af8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002afc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b08:	d501      	bpl.n	8002b0e <DPC_PWM_Send_Duty_SPWM+0xa6>
 8002b0a:	4b91      	ldr	r3, [pc, #580]	; (8002d50 <DPC_PWM_Send_Duty_SPWM+0x2e8>)
 8002b0c:	60bb      	str	r3, [r7, #8]

  uint16_t PWM_PERIOD_COUNTER_INT;
  PWM_PERIOD_COUNTER_INT=__HAL_HRTIM_GETPERIOD(&PWM_Tim1, HRTIM_TIMERINDEX_TIMER_A);
 8002b0e:	4b91      	ldr	r3, [pc, #580]	; (8002d54 <DPC_PWM_Send_Duty_SPWM+0x2ec>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	83fb      	strh	r3, [r7, #30]
  uint32_t dutyVBpos;
  uint32_t dutyVBneg;
  uint32_t dutyVCpos;
  uint32_t dutyVCneg;  
  
  if(VA>=0.0f){VApos=VA;VAneg=0;}else if(VA<0.0f){VApos=0.0f;VAneg=-1*VA;}  
 8002b18:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b24:	db05      	blt.n	8002b32 <DPC_PWM_Send_Duty_SPWM+0xca>
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b30:	e00f      	b.n	8002b52 <DPC_PWM_Send_Duty_SPWM+0xea>
 8002b32:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	d508      	bpl.n	8002b52 <DPC_PWM_Send_Duty_SPWM+0xea>
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b46:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b4a:	eef1 7a67 	vneg.f32	s15, s15
 8002b4e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  if(VB>=0.0f){VBpos=VB;VBneg=0;}else if(VB<0.0f){VBpos=0.0f;VBneg=-1*VB;}
 8002b52:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5e:	db05      	blt.n	8002b6c <DPC_PWM_Send_Duty_SPWM+0x104>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	647b      	str	r3, [r7, #68]	; 0x44
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	643b      	str	r3, [r7, #64]	; 0x40
 8002b6a:	e00f      	b.n	8002b8c <DPC_PWM_Send_Duty_SPWM+0x124>
 8002b6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b78:	d508      	bpl.n	8002b8c <DPC_PWM_Send_Duty_SPWM+0x124>
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b84:	eef1 7a67 	vneg.f32	s15, s15
 8002b88:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  if(VC>=0.0f){VCpos=VC;VCneg=0;}else if(VC<0.0f){VCpos=0.0f;VCneg=-1*VC;}
 8002b8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b98:	db05      	blt.n	8002ba6 <DPC_PWM_Send_Duty_SPWM+0x13e>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ba4:	e00f      	b.n	8002bc6 <DPC_PWM_Send_Duty_SPWM+0x15e>
 8002ba6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb2:	d508      	bpl.n	8002bc6 <DPC_PWM_Send_Duty_SPWM+0x15e>
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bba:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bbe:	eef1 7a67 	vneg.f32	s15, s15
 8002bc2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
     dutyVAneg=(uint32_t)(VAneg*PWM_PERIOD_COUNTER_INT);
 8002bc6:	8bfb      	ldrh	r3, [r7, #30]
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bdc:	ee17 3a90 	vmov	r3, s15
 8002be0:	633b      	str	r3, [r7, #48]	; 0x30

  tDPC_PWM_loc->VApos=VApos;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002be6:	605a      	str	r2, [r3, #4]
  tDPC_PWM_loc->VBpos=VBpos;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bec:	60da      	str	r2, [r3, #12]
  tDPC_PWM_loc->VCpos=VCpos;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bf2:	615a      	str	r2, [r3, #20]
  tDPC_PWM_loc->VAneg=VAneg;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bf8:	609a      	str	r2, [r3, #8]
  tDPC_PWM_loc->VBneg=VBneg;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bfe:	611a      	str	r2, [r3, #16]
  tDPC_PWM_loc->VCneg=VCneg;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c04:	619a      	str	r2, [r3, #24]
  
  dutyVApos=(uint32_t)(VApos*PWM_PERIOD_COUNTER_INT);
 8002c06:	8bfb      	ldrh	r3, [r7, #30]
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c10:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1c:	ee17 3a90 	vmov	r3, s15
 8002c20:	637b      	str	r3, [r7, #52]	; 0x34
  
  dutyVBpos=(uint32_t)(VBpos*PWM_PERIOD_COUNTER_INT);
 8002c22:	8bfb      	ldrh	r3, [r7, #30]
 8002c24:	ee07 3a90 	vmov	s15, r3
 8002c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c38:	ee17 3a90 	vmov	r3, s15
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  dutyVBneg=(uint32_t)(VBneg*PWM_PERIOD_COUNTER_INT);
 8002c3e:	8bfb      	ldrh	r3, [r7, #30]
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c48:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c54:	ee17 3a90 	vmov	r3, s15
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
  
  dutyVCpos=(uint32_t)(VCpos*PWM_PERIOD_COUNTER_INT);
 8002c5a:	8bfb      	ldrh	r3, [r7, #30]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c64:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c70:	ee17 3a90 	vmov	r3, s15
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  dutyVCneg=(uint32_t)(VCneg*PWM_PERIOD_COUNTER_INT); 
 8002c76:	8bfb      	ldrh	r3, [r7, #30]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c80:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c8c:	ee17 3a90 	vmov	r3, s15
 8002c90:	623b      	str	r3, [r7, #32]
  
  if(dutyVApos>=tDPC_PWM_loc->dutyMaxLim){dutyVApos=tDPC_PWM_loc->dutyMaxLim;}
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d303      	bcc.n	8002ca4 <DPC_PWM_Send_Duty_SPWM+0x23c>
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca2:	e007      	b.n	8002cb4 <DPC_PWM_Send_Duty_SPWM+0x24c>
  else if(dutyVApos<tDPC_PWM_loc->dutyMinLim){dutyVApos=tDPC_PWM_loc->dutyMinLim;}
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d202      	bcs.n	8002cb4 <DPC_PWM_Send_Duty_SPWM+0x24c>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
  
  if(dutyVAneg>=tDPC_PWM_loc->dutyMaxLim){dutyVAneg=tDPC_PWM_loc->dutyMaxLim;}
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d303      	bcc.n	8002cc6 <DPC_PWM_Send_Duty_SPWM+0x25e>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc4:	e007      	b.n	8002cd6 <DPC_PWM_Send_Duty_SPWM+0x26e>
  else if(dutyVAneg<tDPC_PWM_loc->dutyMinLim){dutyVAneg=tDPC_PWM_loc->dutyMinLim;}
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d202      	bcs.n	8002cd6 <DPC_PWM_Send_Duty_SPWM+0x26e>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	633b      	str	r3, [r7, #48]	; 0x30
  
  if(dutyVBpos>=tDPC_PWM_loc->dutyMaxLim){dutyVBpos=tDPC_PWM_loc->dutyMaxLim;}
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d303      	bcc.n	8002ce8 <DPC_PWM_Send_Duty_SPWM+0x280>
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce6:	e007      	b.n	8002cf8 <DPC_PWM_Send_Duty_SPWM+0x290>
  else if(dutyVBpos<tDPC_PWM_loc->dutyMinLim){dutyVBpos=tDPC_PWM_loc->dutyMinLim;}
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d202      	bcs.n	8002cf8 <DPC_PWM_Send_Duty_SPWM+0x290>
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(dutyVBneg>tDPC_PWM_loc->dutyMaxLim){dutyVBneg=tDPC_PWM_loc->dutyMaxLim;}
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d903      	bls.n	8002d0a <DPC_PWM_Send_Duty_SPWM+0x2a2>
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d08:	e007      	b.n	8002d1a <DPC_PWM_Send_Duty_SPWM+0x2b2>
  else if(dutyVBneg<tDPC_PWM_loc->dutyMinLim){dutyVBneg=tDPC_PWM_loc->dutyMinLim;}
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d202      	bcs.n	8002d1a <DPC_PWM_Send_Duty_SPWM+0x2b2>
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
  
  if(dutyVCpos>=tDPC_PWM_loc->dutyMaxLim){dutyVCpos=tDPC_PWM_loc->dutyMaxLim;}
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d303      	bcc.n	8002d2c <DPC_PWM_Send_Duty_SPWM+0x2c4>
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2a:	e007      	b.n	8002d3c <DPC_PWM_Send_Duty_SPWM+0x2d4>
  else if(dutyVCpos<tDPC_PWM_loc->dutyMinLim){dutyVCpos=tDPC_PWM_loc->dutyMinLim;}
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d202      	bcs.n	8002d3c <DPC_PWM_Send_Duty_SPWM+0x2d4>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(dutyVCneg>=tDPC_PWM_loc->dutyMaxLim){dutyVCneg=tDPC_PWM_loc->dutyMaxLim;}
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d308      	bcc.n	8002d58 <DPC_PWM_Send_Duty_SPWM+0x2f0>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	623b      	str	r3, [r7, #32]
 8002d4c:	e00c      	b.n	8002d68 <DPC_PWM_Send_Duty_SPWM+0x300>
 8002d4e:	bf00      	nop
 8002d50:	bf800000 	.word	0xbf800000
 8002d54:	2000035c 	.word	0x2000035c
  else if(dutyVCneg<tDPC_PWM_loc->dutyMinLim){dutyVCneg=tDPC_PWM_loc->dutyMinLim;}   
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d202      	bcs.n	8002d68 <DPC_PWM_Send_Duty_SPWM+0x300>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	623b      	str	r3, [r7, #32]
//  if (dutyVApos<=500){
//	  //HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA1);
//	  dutyVApos=0;
//  }
  //else HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA1);
  	DMA_SRC->phAA=dutyVApos;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d6c:	601a      	str	r2, [r3, #0]
  	DMA_SRC->phAB=dutyVAneg;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d72:	605a      	str	r2, [r3, #4]
  	DMA_SRC->phBA=dutyVBpos;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d78:	609a      	str	r2, [r3, #8]
  	DMA_SRC->phBB=dutyVBneg;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d7e:	60da      	str	r2, [r3, #12]
  	DMA_SRC->phCA=dutyVCpos;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	611a      	str	r2, [r3, #16]
  	DMA_SRC->phCB=dutyVCneg;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a3a      	ldr	r2, [r7, #32]
 8002d8a:	615a      	str	r2, [r3, #20]
  	DMA_SRC->phA=dutyVApos+dutyVAneg;
 8002d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	441a      	add	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	619a      	str	r2, [r3, #24]
  	DMA_SRC->phB=dutyVBpos+dutyVBneg;
 8002d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	441a      	add	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	61da      	str	r2, [r3, #28]
  	DMA_SRC->phC=dutyVCpos+dutyVCneg;
 8002da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	441a      	add	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	621a      	str	r2, [r3, #32]
//#endif
//#else
//  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
//    return;
}
 8002daa:	bf00      	nop
 8002dac:	3754      	adds	r7, #84	; 0x54
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop

08002db8 <DPC_PWM_HRTIM_Start>:
*
* @note Function valid for STM32G4xx microconroller family   
*/

void DPC_PWM_HRTIM_Start(void)
{     
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
//                                 + HRTIM_TIMERID_TIMER_E + HRTIM_TIMERID_TIMER_F);
//  HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1 + HRTIM_OUTPUT_TA2 + HRTIM_OUTPUT_TB1 + HRTIM_OUTPUT_TB2 + HRTIM_OUTPUT_TC1 + HRTIM_OUTPUT_TC2 + + HRTIM_OUTPUT_TD1 + HRTIM_OUTPUT_TD2 + HRTIM_OUTPUT_TE1 + HRTIM_OUTPUT_TE2 + HRTIM_OUTPUT_TF1 + HRTIM_OUTPUT_TF2);

//	HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_A + HRTIM_TIMERID_TIMER_B + HRTIM_TIMERID_TIMER_C);

	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_A);
 8002dbc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002dc0:	4814      	ldr	r0, [pc, #80]	; (8002e14 <DPC_PWM_HRTIM_Start+0x5c>)
 8002dc2:	f006 fe03 	bl	80099cc <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
 8002dc6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002dca:	4812      	ldr	r0, [pc, #72]	; (8002e14 <DPC_PWM_HRTIM_Start+0x5c>)
 8002dcc:	f006 fdfe 	bl	80099cc <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);
 8002dd0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002dd4:	480f      	ldr	r0, [pc, #60]	; (8002e14 <DPC_PWM_HRTIM_Start+0x5c>)
 8002dd6:	f006 fdf9 	bl	80099cc <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCountStart_IT(&PWM_Tim1, HRTIM_TIMERID_TIMER_A);
 8002dda:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002dde:	480d      	ldr	r0, [pc, #52]	; (8002e14 <DPC_PWM_HRTIM_Start+0x5c>)
 8002de0:	f006 fd84 	bl	80098ec <HAL_HRTIM_WaveformCountStart_IT>
	HAL_HRTIM_WaveformCountStart_IT(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
 8002de4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002de8:	480a      	ldr	r0, [pc, #40]	; (8002e14 <DPC_PWM_HRTIM_Start+0x5c>)
 8002dea:	f006 fd7f 	bl	80098ec <HAL_HRTIM_WaveformCountStart_IT>
	HAL_HRTIM_WaveformCountStart_IT(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);
 8002dee:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002df2:	4808      	ldr	r0, [pc, #32]	; (8002e14 <DPC_PWM_HRTIM_Start+0x5c>)
 8002df4:	f006 fd7a 	bl	80098ec <HAL_HRTIM_WaveformCountStart_IT>
	//HAL_HRTIM_WaveformCountStart_DMA(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A);
	//HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
	//HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);

	//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1);
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1);
 8002df8:	2101      	movs	r1, #1
 8002dfa:	4806      	ldr	r0, [pc, #24]	; (8002e14 <DPC_PWM_HRTIM_Start+0x5c>)
 8002dfc:	f006 fd1b 	bl	8009836 <HAL_HRTIM_WaveformOutputStart>
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TB1);
 8002e00:	2104      	movs	r1, #4
 8002e02:	4804      	ldr	r0, [pc, #16]	; (8002e14 <DPC_PWM_HRTIM_Start+0x5c>)
 8002e04:	f006 fd17 	bl	8009836 <HAL_HRTIM_WaveformOutputStart>
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TC1);
 8002e08:	2110      	movs	r1, #16
 8002e0a:	4802      	ldr	r0, [pc, #8]	; (8002e14 <DPC_PWM_HRTIM_Start+0x5c>)
 8002e0c:	f006 fd13 	bl	8009836 <HAL_HRTIM_WaveformOutputStart>
}
 8002e10:	bf00      	nop
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	2000035c 	.word	0x2000035c

08002e18 <DPC_PWM_HRTIM_OutDisable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_HRTIM_OutDisable(void)
{     
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
//#ifdef STDES_PFCBIDIR_REV2
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA1);
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	4806      	ldr	r0, [pc, #24]	; (8002e38 <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002e20:	f006 fd36 	bl	8009890 <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA2);
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB1);
 8002e24:	2104      	movs	r1, #4
 8002e26:	4804      	ldr	r0, [pc, #16]	; (8002e38 <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002e28:	f006 fd32 	bl	8009890 <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB2);
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TC1);
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	4802      	ldr	r0, [pc, #8]	; (8002e38 <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002e30:	f006 fd2e 	bl	8009890 <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA2);
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB2);
//#else
////  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	2000035c 	.word	0x2000035c

08002e3c <DPC_PWM_HRTIM_OutEnable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_HRTIM_OutEnable(void)
{     
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
//#ifdef STDES_PFCBIDIR_REV2
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA1);
 8002e40:	2101      	movs	r1, #1
 8002e42:	4806      	ldr	r0, [pc, #24]	; (8002e5c <DPC_PWM_HRTIM_OutEnable+0x20>)
 8002e44:	f006 fcf7 	bl	8009836 <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA2);
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB1);
 8002e48:	2104      	movs	r1, #4
 8002e4a:	4804      	ldr	r0, [pc, #16]	; (8002e5c <DPC_PWM_HRTIM_OutEnable+0x20>)
 8002e4c:	f006 fcf3 	bl	8009836 <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB2);
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TC1);
 8002e50:	2110      	movs	r1, #16
 8002e52:	4802      	ldr	r0, [pc, #8]	; (8002e5c <DPC_PWM_HRTIM_OutEnable+0x20>)
 8002e54:	f006 fcef 	bl	8009836 <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA2);
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB2);
//#else
////  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	2000035c 	.word	0x2000035c

08002e60 <DPC_PWM_OutDisable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_OutDisable(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
//#ifdef USE_ADVTIM
//    DPC_PWM_ADVTIM_OutDisable();                                                ///Safe: Disable ADVTIM outputs if enabled
//#elif USE_HRTIM
    DPC_PWM_HRTIM_OutDisable();                                                 ///Safe: Disable HRTIM outputs if enabled
 8002e64:	f7ff ffd8 	bl	8002e18 <DPC_PWM_HRTIM_OutDisable>
//#else
//    SELECT DEFINE
//#endif
}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <DPC_PWM_OutEnable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_OutEnable(DPC_PWM_TypeDef *tDPC_PWM_loc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if(tDPC_PWM_loc->DPC_PWM_Status==PWM_Armed){    
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d106      	bne.n	8002e8a <DPC_PWM_OutEnable+0x1e>
//#ifdef USE_ADVTIM
//    DPC_PWM_ADVTIM_OutEnable();
//#elif USE_HRTIM
    DPC_PWM_HRTIM_OutEnable();
 8002e7c:	f7ff ffde 	bl	8002e3c <DPC_PWM_HRTIM_OutEnable>
    HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 8002e80:	2201      	movs	r2, #1
 8002e82:	2120      	movs	r1, #32
 8002e84:	4803      	ldr	r0, [pc, #12]	; (8002e94 <DPC_PWM_OutEnable+0x28>)
 8002e86:	f005 fc95 	bl	80087b4 <HAL_GPIO_WritePin>
//#else
//    SELECT DEFINE
//#endif
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	48000800 	.word	0x48000800

08002e98 <DPC_PWM_Start>:
*
* @note Function valid for STM32G4xx microconroller family   
*/

void DPC_PWM_Start(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
//#ifdef USE_ADVTIM
//  DPC_PWM_ADVTIM_PWMStart();                                                        ///
//  DPC_PWM_ADVTIM_OutDisable();                                                  ///Safe: Disable ADVTIM outputs if enabled
//#elif USE_HRTIM
  DPC_PWM_HRTIM_Start();                                                        ///
 8002e9c:	f7ff ff8c 	bl	8002db8 <DPC_PWM_HRTIM_Start>
  DPC_PWM_HRTIM_OutDisable();                                                   ///Safe: Disable HRTIM outputs if enabled
 8002ea0:	f7ff ffba 	bl	8002e18 <DPC_PWM_HRTIM_OutDisable>
//#else
//  SELECT DEFINE
//#endif
}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <DPC_PWM_Init>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_Init(uint32_t  BURST_PWM_Freq_Desidered,uint32_t  PWM_Freq_Desidered,DPC_PWM_StatusTypeDef DPC_PWM_SET, DPC_PWM_TypeDef *tDPC_PWM_loc, DMA_PWMDUTY_STRUCT *DUTY_SRC)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b0a0      	sub	sp, #128	; 0x80
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	71fb      	strb	r3, [r7, #7]

  uint32_t PWM_Period;                                                          ///
  uint32_t BURST_PWM_Period;                                                    ///  
  uint32_t Timers_Clock;                                                        ///
  uint32_t f_tim_ket_ck;                                                        ///  
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	2260      	movs	r2, #96	; 0x60
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f00a f92c 	bl	800d11e <memset>
  
  
  Timers_Clock=HAL_RCC_GetPCLK2Freq();                                      ///
 8002ec6:	f008 ff5f 	bl	800bd88 <HAL_RCC_GetPCLK2Freq>
 8002eca:	67f8      	str	r0, [r7, #124]	; 0x7c
  f_tim_ket_ck=Timers_Clock;                                                /// Represent frequency Internal clock source (tim_ker_ck) expressed in Hz - see: pag-1063 RM0440 Rev1
 8002ecc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ece:	67bb      	str	r3, [r7, #120]	; 0x78
  PWM_Period=((f_tim_ket_ck/PWM_Freq_Desidered) - 1)*16;                       ///  uint32_t PWM_Period;
 8002ed0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8002edc:	3b01      	subs	r3, #1
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	677b      	str	r3, [r7, #116]	; 0x74
  BURST_PWM_Period=((f_tim_ket_ck/BURST_PWM_Freq_Desidered) - 1);           ///  uint32_t PWM_Period;
 8002ee2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	673b      	str	r3, [r7, #112]	; 0x70
  tDPC_PWM_loc->dutyMaxLim=tempDEF_dutyMaxLim;                                  /// Adapt to PRESCALER
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f248 42cf 	movw	r2, #33999	; 0x84cf
 8002ef4:	61da      	str	r2, [r3, #28]
  tDPC_PWM_loc->dutyMinLim=tempDEF_dutyMinLim;                                  /// Adapt to PRESCALER
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	621a      	str	r2, [r3, #32]
  
  tDPC_PWM_loc->PWM_Period=PWM_Period;                                          ///
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
  tDPC_PWM_loc->BURST_PWM_Period=BURST_PWM_Period;                              ///  
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28
  tDPC_PWM_loc->DPC_PWM_Status=DPC_PWM_SET;                                     ///
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	79fa      	ldrb	r2, [r7, #7]
 8002f0c:	701a      	strb	r2, [r3, #0]

  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST;
 8002f12:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f16:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMASize = 0x1;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	623b      	str	r3, [r7, #32]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8002f20:	2300      	movs	r3, #0
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002f24:	2300      	movs	r3, #0
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002f30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f34:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002f36:	2300      	movs	r3, #0
 8002f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002f42:	2300      	movs	r3, #0
 8002f44:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1|HRTIM_TIMFAULTENABLE_FAULT3;
 8002f46:	2305      	movs	r3, #5
 8002f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002f52:	2300      	movs	r3, #0
 8002f54:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8002f5e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f62:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phA;
 8002f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[0].CMP1xR);
 8002f70:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <DPC_PWM_Init+0x14c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	339c      	adds	r3, #156	; 0x9c
 8002f76:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002f78:	f107 0310 	add.w	r3, r7, #16
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2100      	movs	r1, #0
 8002f80:	481c      	ldr	r0, [pc, #112]	; (8002ff4 <DPC_PWM_Init+0x14c>)
 8002f82:	f006 fa13 	bl	80093ac <HAL_HRTIM_WaveformTimerConfig>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <DPC_PWM_Init+0xe8>
  {
    Error_Handler();
 8002f8c:	f002 fc5c 	bl	8005848 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phB;
 8002f90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f94:	331c      	adds	r3, #28
 8002f96:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[1].CMP1xR);
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <DPC_PWM_Init+0x14c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8002fa0:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8002fa2:	f107 0310 	add.w	r3, r7, #16
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4812      	ldr	r0, [pc, #72]	; (8002ff4 <DPC_PWM_Init+0x14c>)
 8002fac:	f006 f9fe 	bl	80093ac <HAL_HRTIM_WaveformTimerConfig>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <DPC_PWM_Init+0x112>
  {
    Error_Handler();
 8002fb6:	f002 fc47 	bl	8005848 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phC;
 8002fba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fbe:	3320      	adds	r3, #32
 8002fc0:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[2].CMP1xR);
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <DPC_PWM_Init+0x14c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002fca:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8002fcc:	f107 0310 	add.w	r3, r7, #16
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	4807      	ldr	r0, [pc, #28]	; (8002ff4 <DPC_PWM_Init+0x14c>)
 8002fd6:	f006 f9e9 	bl	80093ac <HAL_HRTIM_WaveformTimerConfig>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <DPC_PWM_Init+0x13c>
  {
    Error_Handler();
 8002fe0:	f002 fc32 	bl	8005848 <Error_Handler>
  }


  DPC_PWM_Start();                                                              ///
 8002fe4:	f7ff ff58 	bl	8002e98 <DPC_PWM_Start>
  DPC_PWM_OutDisable();                                                         ///Safe: Disable PWM outputs if enabled 
 8002fe8:	f7ff ff3a 	bl	8002e60 <DPC_PWM_OutDisable>
}
 8002fec:	bf00      	nop
 8002fee:	3780      	adds	r7, #128	; 0x80
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2000035c 	.word	0x2000035c

08002ff8 <DPC_PI_Init>:
* @retval None
*
* @note Function valid for STM32G4xx microconroller family  
*/  
void DPC_PI_Init(PI_STRUCT_t *pPI,float Init_Val_Kp,float Init_Val_Ki,float Init_Val_Ts,float Init_PIsat_up, float Init_PIsat_down,FlagStatus satPI_toggle_local,FlagStatus antiwindPI_toggle_local,float Antiwindup_Gain_local)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	61f8      	str	r0, [r7, #28]
 8003000:	ed87 0a06 	vstr	s0, [r7, #24]
 8003004:	edc7 0a05 	vstr	s1, [r7, #20]
 8003008:	ed87 1a04 	vstr	s2, [r7, #16]
 800300c:	edc7 1a03 	vstr	s3, [r7, #12]
 8003010:	ed87 2a02 	vstr	s4, [r7, #8]
 8003014:	460b      	mov	r3, r1
 8003016:	edc7 2a00 	vstr	s5, [r7]
 800301a:	71fb      	strb	r3, [r7, #7]
 800301c:	4613      	mov	r3, r2
 800301e:	71bb      	strb	r3, [r7, #6]
  pPI->Kp=Init_Val_Kp;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	609a      	str	r2, [r3, #8]
  pPI->Ki=Init_Val_Ki;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	60da      	str	r2, [r3, #12]
  pPI->Ts=Init_Val_Ts;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	611a      	str	r2, [r3, #16]
  pPI->Integral=0;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
  pPI->PIout=0;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	619a      	str	r2, [r3, #24]
  pPI->PIsat_up=Init_PIsat_up;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	621a      	str	r2, [r3, #32]
  pPI->PIsat_down=Init_PIsat_down;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
  pPI->error=0;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
  pPI->Integralout=0;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c
  pPI->resetPI=RESET;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pPI->k0=Init_Val_Kp; //K0=Kp
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	635a      	str	r2, [r3, #52]	; 0x34
  pPI->k1=Init_Val_Ki*Init_Val_Ts; //K1=Ki*Ts
 800306c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003070:	edd7 7a04 	vldr	s15, [r7, #16]
 8003074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  pPI->satPI_toggle=satPI_toggle_local;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	79fa      	ldrb	r2, [r7, #7]
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pPI->antiwindPI_toggle=antiwindPI_toggle_local;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	79ba      	ldrb	r2, [r7, #6]
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  pPI->Antiwindup_Gain=Antiwindup_Gain_local;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003094:	bf00      	nop
 8003096:	3724      	adds	r7, #36	; 0x24
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <PI>:
* @retval float Return output data of PI regulator
*
* @note Function valid for STM32G4xx microconroller family  
*/
float PI(float Ref, float Feed , PI_STRUCT_t *pPI)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80030aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80030ae:	6078      	str	r0, [r7, #4]
pPI->Ref=Ref;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	601a      	str	r2, [r3, #0]
pPI->Feed=Feed;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	605a      	str	r2, [r3, #4]

  if(pPI->resetPI==SET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d104      	bne.n	80030d0 <PI+0x30>
  {
    pPI->Integral=0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	615a      	str	r2, [r3, #20]
 80030ce:	e031      	b.n	8003134 <PI+0x94>
  }
  else{
    pPI->error=(float)Ref-(float)Feed;
 80030d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80030d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80030d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pPI->Integral=pPI->Integral+(pPI->k1*pPI->error)+pPI->Antiwindup_Term;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	ed93 7a05 	vldr	s14, [r3, #20]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80030f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	edc3 7a05 	vstr	s15, [r3, #20]
    pPI->Integralout=pPI->Integral;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c
    pPI->PIout=(pPI->k0*pPI->error)+pPI->Integralout;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800312a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	edc3 7a06 	vstr	s15, [r3, #24]
  }

  //Start Check Saturation
  if (pPI->satPI_toggle==SET){
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313a:	2b01      	cmp	r3, #1
 800313c:	d13e      	bne.n	80031bc <PI+0x11c>
    //Saturation
    if(    pPI->PIout>pPI->PIsat_up)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	ed93 7a06 	vldr	s14, [r3, #24]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	edd3 7a08 	vldr	s15, [r3, #32]
 800314a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800314e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003152:	dd04      	ble.n	800315e <PI+0xbe>
    {
      pPI->PIout_sat=pPI->PIsat_up;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	61da      	str	r2, [r3, #28]
 800315c:	e013      	b.n	8003186 <PI+0xe6>
    }
    else if(    pPI->PIout<pPI->PIsat_down)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	ed93 7a06 	vldr	s14, [r3, #24]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800316a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800316e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003172:	d504      	bpl.n	800317e <PI+0xde>
    {
      pPI->PIout_sat=pPI->PIsat_down;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	61da      	str	r2, [r3, #28]
 800317c:	e003      	b.n	8003186 <PI+0xe6>
    }
    else {
      pPI->PIout_sat=pPI->PIout;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	61da      	str	r2, [r3, #28]
    }
     
    //Start Check Antiwindup
    if (pPI->antiwindPI_toggle==SET){
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800318c:	2b01      	cmp	r3, #1
 800318e:	d110      	bne.n	80031b2 <PI+0x112>
      //Saturation
      pPI->Antiwindup_Term=(pPI->PIout_sat-pPI->PIout)*pPI->Antiwindup_Gain;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	ed93 7a07 	vldr	s14, [r3, #28]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	edd3 7a06 	vldr	s15, [r3, #24]
 800319c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80031a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80031b0:	e00c      	b.n	80031cc <PI+0x12c>
    }
    else {
      pPI->Antiwindup_Term=0;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80031ba:	e007      	b.n	80031cc <PI+0x12c>
    }
    //End Check Antiwindup    
  }
  else {
    pPI->PIout_sat=pPI->PIout;  
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699a      	ldr	r2, [r3, #24]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	61da      	str	r2, [r3, #28]
    pPI->Antiwindup_Term=0;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  //End Check Saturation
  
  return pPI->PIout_sat;  
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	ee07 3a90 	vmov	s15, r3
}
 80031d4:	eeb0 0a67 	vmov.f32	s0, s15
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <DPC_TO_Init>:
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	2300      	movs	r3, #0
 80031ec:	71fb      	strb	r3, [r7, #7]
 80031ee:	e00d      	b.n	800320c <DPC_TO_Init+0x28>
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <DPC_TO_Init+0x3c>)
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	2200      	movs	r2, #0
 80031fa:	711a      	strb	r2, [r3, #4]
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <DPC_TO_Init+0x3c>)
 8003200:	2100      	movs	r1, #0
 8003202:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	3301      	adds	r3, #1
 800320a:	71fb      	strb	r3, [r7, #7]
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	2b05      	cmp	r3, #5
 8003210:	d9ee      	bls.n	80031f0 <DPC_TO_Init+0xc>
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20000134 	.word	0x20000134

08003224 <DPC_TO_Set>:
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	71fb      	strb	r3, [r7, #7]
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	4a0d      	ldr	r2, [pc, #52]	; (800326c <DPC_TO_Set+0x48>)
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	791b      	ldrb	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10c      	bne.n	800325c <DPC_TO_Set+0x38>
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	4a09      	ldr	r2, [pc, #36]	; (800326c <DPC_TO_Set+0x48>)
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	2201      	movs	r2, #1
 800324c:	711a      	strb	r2, [r3, #4]
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	4906      	ldr	r1, [pc, #24]	; (800326c <DPC_TO_Set+0x48>)
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000134 	.word	0x20000134

08003270 <DPC_TO_Check>:
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <DPC_TO_Check+0x50>)
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	791b      	ldrb	r3, [r3, #4]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d102      	bne.n	8003292 <DPC_TO_Check+0x22>
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
 8003290:	e00e      	b.n	80032b0 <DPC_TO_Check+0x40>
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <DPC_TO_Check+0x50>)
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	791b      	ldrb	r3, [r3, #4]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d107      	bne.n	80032b0 <DPC_TO_Check+0x40>
 80032a0:	2302      	movs	r3, #2
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <DPC_TO_Check+0x50>)
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	2200      	movs	r2, #0
 80032ae:	711a      	strb	r2, [r3, #4]
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000134 	.word	0x20000134

080032c4 <TimeoutMng>:
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	2300      	movs	r3, #0
 80032cc:	71fb      	strb	r3, [r7, #7]
 80032ce:	e01e      	b.n	800330e <TimeoutMng+0x4a>
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	4a13      	ldr	r2, [pc, #76]	; (8003320 <TimeoutMng+0x5c>)
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	791b      	ldrb	r3, [r3, #4]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d114      	bne.n	8003308 <TimeoutMng+0x44>
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	4a0f      	ldr	r2, [pc, #60]	; (8003320 <TimeoutMng+0x5c>)
 80032e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <TimeoutMng+0x34>
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <TimeoutMng+0x5c>)
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	2202      	movs	r2, #2
 80032f4:	711a      	strb	r2, [r3, #4]
 80032f6:	e007      	b.n	8003308 <TimeoutMng+0x44>
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <TimeoutMng+0x5c>)
 80032fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003300:	3a01      	subs	r2, #1
 8003302:	4907      	ldr	r1, [pc, #28]	; (8003320 <TimeoutMng+0x5c>)
 8003304:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	3301      	adds	r3, #1
 800330c:	71fb      	strb	r3, [r7, #7]
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	2b05      	cmp	r3, #5
 8003312:	d9dd      	bls.n	80032d0 <TimeoutMng+0xc>
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	20000134 	.word	0x20000134

08003324 <Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void Park(float alpha, float beta, float theta,float phi, float *d, float *q){
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	; 0x28
 8003328:	af00      	add	r7, sp, #0
 800332a:	ed87 0a05 	vstr	s0, [r7, #20]
 800332e:	edc7 0a04 	vstr	s1, [r7, #16]
 8003332:	ed87 1a03 	vstr	s2, [r7, #12]
 8003336:	edc7 1a02 	vstr	s3, [r7, #8]
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
    float theta_act=theta+phi;
 800333e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003342:	edd7 7a02 	vldr	s15, [r7, #8]
 8003346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosine = FastCos(theta_act);
 800334e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003352:	f7fe fd55 	bl	8001e00 <FastCos>
 8003356:	ed87 0a08 	vstr	s0, [r7, #32]
    float sine = FastSin(theta_act);
 800335a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800335e:	f7fe fd03 	bl	8001d68 <FastSin>
 8003362:	ed87 0a07 	vstr	s0, [r7, #28]
    *d = alpha*cosine + beta*sine;
 8003366:	ed97 7a05 	vldr	s14, [r7, #20]
 800336a:	edd7 7a08 	vldr	s15, [r7, #32]
 800336e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003372:	edd7 6a04 	vldr	s13, [r7, #16]
 8003376:	edd7 7a07 	vldr	s15, [r7, #28]
 800337a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	edc3 7a00 	vstr	s15, [r3]
    *q = -alpha*sine + beta*cosine;
 8003388:	edd7 7a05 	vldr	s15, [r7, #20]
 800338c:	eeb1 7a67 	vneg.f32	s14, s15
 8003390:	edd7 7a07 	vldr	s15, [r7, #28]
 8003394:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003398:	edd7 6a04 	vldr	s13, [r7, #16]
 800339c:	edd7 7a08 	vldr	s15, [r7, #32]
 80033a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	edc3 7a00 	vstr	s15, [r3]
}
 80033ae:	bf00      	nop
 80033b0:	3728      	adds	r7, #40	; 0x28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <InvPark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void InvPark(float d, float q, float theta, float phi, float *alpha, float *beta){
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b08a      	sub	sp, #40	; 0x28
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	ed87 0a05 	vstr	s0, [r7, #20]
 80033c0:	edc7 0a04 	vstr	s1, [r7, #16]
 80033c4:	ed87 1a03 	vstr	s2, [r7, #12]
 80033c8:	edc7 1a02 	vstr	s3, [r7, #8]
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
    float theta_act=theta+phi;
 80033d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80033d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosine = FastCos(theta_act);
 80033e0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80033e4:	f7fe fd0c 	bl	8001e00 <FastCos>
 80033e8:	ed87 0a08 	vstr	s0, [r7, #32]
    float sine = FastSin(theta_act);
 80033ec:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80033f0:	f7fe fcba 	bl	8001d68 <FastSin>
 80033f4:	ed87 0a07 	vstr	s0, [r7, #28]
    *alpha = d*cosine - q*sine;
 80033f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80033fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003404:	edd7 6a04 	vldr	s13, [r7, #16]
 8003408:	edd7 7a07 	vldr	s15, [r7, #28]
 800340c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	edc3 7a00 	vstr	s15, [r3]
    *beta =  d*sine + q*cosine;
 800341a:	ed97 7a05 	vldr	s14, [r7, #20]
 800341e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003422:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003426:	edd7 6a04 	vldr	s13, [r7, #16]
 800342a:	edd7 7a08 	vldr	s15, [r7, #32]
 800342e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	edc3 7a00 	vstr	s15, [r3]
    }
 800343c:	bf00      	nop
 800343e:	3728      	adds	r7, #40	; 0x28
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	0000      	movs	r0, r0
	...

08003448 <Clarke>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void Clarke(float a, float b,float c, float *alpha, float *beta){
 8003448:	b5b0      	push	{r4, r5, r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003452:	edc7 0a04 	vstr	s1, [r7, #16]
 8003456:	ed87 1a03 	vstr	s2, [r7, #12]
 800345a:	60b8      	str	r0, [r7, #8]
 800345c:	6079      	str	r1, [r7, #4]
    *alpha = 0.666f*(a-(0.5f*b)-(0.5f*c));
 800345e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003462:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800346a:	ed97 7a05 	vldr	s14, [r7, #20]
 800346e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003472:	edd7 7a03 	vldr	s15, [r7, #12]
 8003476:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800347a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800347e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003482:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003500 <Clarke+0xb8>
 8003486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	edc3 7a00 	vstr	s15, [r3]
    *beta = 0.666666*(0.866025*b - 0.866025*c);
 8003490:	6938      	ldr	r0, [r7, #16]
 8003492:	f7fd f825 	bl	80004e0 <__aeabi_f2d>
 8003496:	a316      	add	r3, pc, #88	; (adr r3, 80034f0 <Clarke+0xa8>)
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f7fd f878 	bl	8000590 <__aeabi_dmul>
 80034a0:	4603      	mov	r3, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	4625      	mov	r5, r4
 80034a6:	461c      	mov	r4, r3
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7fd f819 	bl	80004e0 <__aeabi_f2d>
 80034ae:	a310      	add	r3, pc, #64	; (adr r3, 80034f0 <Clarke+0xa8>)
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f7fd f86c 	bl	8000590 <__aeabi_dmul>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4620      	mov	r0, r4
 80034be:	4629      	mov	r1, r5
 80034c0:	f7fc feae 	bl	8000220 <__aeabi_dsub>
 80034c4:	4603      	mov	r3, r0
 80034c6:	460c      	mov	r4, r1
 80034c8:	4618      	mov	r0, r3
 80034ca:	4621      	mov	r1, r4
 80034cc:	a30a      	add	r3, pc, #40	; (adr r3, 80034f8 <Clarke+0xb0>)
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f7fd f85d 	bl	8000590 <__aeabi_dmul>
 80034d6:	4603      	mov	r3, r0
 80034d8:	460c      	mov	r4, r1
 80034da:	4618      	mov	r0, r3
 80034dc:	4621      	mov	r1, r4
 80034de:	f7fd fa89 	bl	80009f4 <__aeabi_d2f>
 80034e2:	4602      	mov	r2, r0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	601a      	str	r2, [r3, #0]
    }
 80034e8:	bf00      	nop
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bdb0      	pop	{r4, r5, r7, pc}
 80034f0:	0f9096bc 	.word	0x0f9096bc
 80034f4:	3febb67a 	.word	0x3febb67a
 80034f8:	ef6b5d46 	.word	0xef6b5d46
 80034fc:	3fe55553 	.word	0x3fe55553
 8003500:	3f2a7efa 	.word	0x3f2a7efa

08003504 <InvClarke>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void InvClarke(float alpha, float beta, float *a, float *b, float *c){
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	ed87 0a05 	vstr	s0, [r7, #20]
 800350e:	edc7 0a04 	vstr	s1, [r7, #16]
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
    *a = alpha;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	601a      	str	r2, [r3, #0]
    *b = 0.5f*(-alpha + 1.73205080757f*beta);
 800351e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003522:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003574 <InvClarke+0x70>
 8003526:	ee27 7a87 	vmul.f32	s14, s15, s14
 800352a:	edd7 7a05 	vldr	s15, [r7, #20]
 800352e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003532:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	edc3 7a00 	vstr	s15, [r3]
    *c = 0.5f*(-alpha - 1.73205080757f*beta);
 8003540:	edd7 7a05 	vldr	s15, [r7, #20]
 8003544:	eeb1 7a67 	vneg.f32	s14, s15
 8003548:	edd7 7a04 	vldr	s15, [r7, #16]
 800354c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003574 <InvClarke+0x70>
 8003550:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003558:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800355c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	edc3 7a00 	vstr	s15, [r3]
} 
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	3fddb3d7 	.word	0x3fddb3d7

08003578 <Clarke_Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void Clarke_Park(float a, float b, float c, float theta,float phi, float *d, float *q,float *o){
 8003578:	b580      	push	{r7, lr}
 800357a:	b08c      	sub	sp, #48	; 0x30
 800357c:	af00      	add	r7, sp, #0
 800357e:	ed87 0a07 	vstr	s0, [r7, #28]
 8003582:	edc7 0a06 	vstr	s1, [r7, #24]
 8003586:	ed87 1a05 	vstr	s2, [r7, #20]
 800358a:	edc7 1a04 	vstr	s3, [r7, #16]
 800358e:	ed87 2a03 	vstr	s4, [r7, #12]
 8003592:	60b8      	str	r0, [r7, #8]
 8003594:	6079      	str	r1, [r7, #4]
 8003596:	603a      	str	r2, [r7, #0]
float beta_sub;
float d_sub;
float q_sub;
//float o_sub;  
  
Clarke(a, b, c, &alpha_sub, &beta_sub);
 8003598:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800359c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035a0:	4611      	mov	r1, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	ed97 1a05 	vldr	s2, [r7, #20]
 80035a8:	edd7 0a06 	vldr	s1, [r7, #24]
 80035ac:	ed97 0a07 	vldr	s0, [r7, #28]
 80035b0:	f7ff ff4a 	bl	8003448 <Clarke>
Park(alpha_sub, beta_sub, theta,phi, &d_sub, &q_sub);
 80035b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80035b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80035bc:	f107 0220 	add.w	r2, r7, #32
 80035c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	edd7 1a03 	vldr	s3, [r7, #12]
 80035cc:	ed97 1a04 	vldr	s2, [r7, #16]
 80035d0:	eef0 0a47 	vmov.f32	s1, s14
 80035d4:	eeb0 0a67 	vmov.f32	s0, s15
 80035d8:	f7ff fea4 	bl	8003324 <Park>


*d=d_sub;
 80035dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	601a      	str	r2, [r3, #0]
*q=q_sub;
 80035e2:	6a3a      	ldr	r2, [r7, #32]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	601a      	str	r2, [r3, #0]
//*o=o_sub=0;

    
    
}
 80035e8:	bf00      	nop
 80035ea:	3730      	adds	r7, #48	; 0x30
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <Run_ClarkePark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void Run_ClarkePark(TRANSFORM_ABC_t* abc_sub,float theta_sub,float phi_sub,TRANSFORM_QDO_t* out_cl_pa_sub ){
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80035fc:	edc7 0a01 	vstr	s1, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
 
float pll_d_sub;
float pll_q_sub;
float pll_o_sub;
 
  Clarke_Park(abc_sub->axA, abc_sub->axB, abc_sub->axC,theta_sub,phi_sub,&pll_d_sub,&pll_q_sub,&pll_o_sub);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	edd3 7a00 	vldr	s15, [r3]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	ed93 7a01 	vldr	s14, [r3, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	edd3 6a02 	vldr	s13, [r3, #8]
 8003614:	f107 0214 	add.w	r2, r7, #20
 8003618:	f107 0118 	add.w	r1, r7, #24
 800361c:	f107 031c 	add.w	r3, r7, #28
 8003620:	4618      	mov	r0, r3
 8003622:	ed97 2a01 	vldr	s4, [r7, #4]
 8003626:	edd7 1a02 	vldr	s3, [r7, #8]
 800362a:	eeb0 1a66 	vmov.f32	s2, s13
 800362e:	eef0 0a47 	vmov.f32	s1, s14
 8003632:	eeb0 0a67 	vmov.f32	s0, s15
 8003636:	f7ff ff9f 	bl	8003578 <Clarke_Park>
  
  
  out_cl_pa_sub->axd=pll_d_sub;
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	601a      	str	r2, [r3, #0]
  out_cl_pa_sub->axq=pll_q_sub;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	605a      	str	r2, [r3, #4]
  out_cl_pa_sub->axo=pll_o_sub;
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	609a      	str	r2, [r3, #8]
}
 800364c:	bf00      	nop
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <inv_Clarke_Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void inv_Clarke_Park(float d, float q, float o, float theta,float phi, float *a, float *b,float *c){
 8003654:	b580      	push	{r7, lr}
 8003656:	b08e      	sub	sp, #56	; 0x38
 8003658:	af00      	add	r7, sp, #0
 800365a:	ed87 0a07 	vstr	s0, [r7, #28]
 800365e:	edc7 0a06 	vstr	s1, [r7, #24]
 8003662:	ed87 1a05 	vstr	s2, [r7, #20]
 8003666:	edc7 1a04 	vstr	s3, [r7, #16]
 800366a:	ed87 2a03 	vstr	s4, [r7, #12]
 800366e:	60b8      	str	r0, [r7, #8]
 8003670:	6079      	str	r1, [r7, #4]
 8003672:	603a      	str	r2, [r7, #0]
float beta_sub;
float a_sub;
float b_sub;
float c_sub;

InvPark(d, q, theta,phi,&alpha_sub, &beta_sub);
 8003674:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003678:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	edd7 1a03 	vldr	s3, [r7, #12]
 8003684:	ed97 1a04 	vldr	s2, [r7, #16]
 8003688:	edd7 0a06 	vldr	s1, [r7, #24]
 800368c:	ed97 0a07 	vldr	s0, [r7, #28]
 8003690:	f7ff fe91 	bl	80033b6 <InvPark>
InvClarke(alpha_sub, beta_sub, &a_sub, &b_sub, &c_sub);
 8003694:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003698:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800369c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80036a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80036a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036a8:	4618      	mov	r0, r3
 80036aa:	eef0 0a47 	vmov.f32	s1, s14
 80036ae:	eeb0 0a67 	vmov.f32	s0, s15
 80036b2:	f7ff ff27 	bl	8003504 <InvClarke>

*a=a_sub;
 80036b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	601a      	str	r2, [r3, #0]
*b=b_sub;
 80036bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	601a      	str	r2, [r3, #0]
*c=c_sub;
 80036c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	601a      	str	r2, [r3, #0]
} 
 80036c8:	bf00      	nop
 80036ca:	3738      	adds	r7, #56	; 0x38
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <Run_Inv_ClarkePark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void Run_Inv_ClarkePark(TRANSFORM_QDO_t* dqo_sub,float theta_sub,float phi_sub,TRANSFORM_ABC_t* out_inv_cl_pa_sub ){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80036dc:	edc7 0a01 	vstr	s1, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
 
float a_sub;
float b_sub;
float c_sub;
 
  inv_Clarke_Park(dqo_sub->axd, dqo_sub->axq, dqo_sub->axo,theta_sub,phi_sub,&a_sub,&b_sub,&c_sub);  
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	edd3 7a00 	vldr	s15, [r3]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80036f4:	f107 0214 	add.w	r2, r7, #20
 80036f8:	f107 0118 	add.w	r1, r7, #24
 80036fc:	f107 031c 	add.w	r3, r7, #28
 8003700:	4618      	mov	r0, r3
 8003702:	ed97 2a01 	vldr	s4, [r7, #4]
 8003706:	edd7 1a02 	vldr	s3, [r7, #8]
 800370a:	eeb0 1a66 	vmov.f32	s2, s13
 800370e:	eef0 0a47 	vmov.f32	s1, s14
 8003712:	eeb0 0a67 	vmov.f32	s0, s15
 8003716:	f7ff ff9d 	bl	8003654 <inv_Clarke_Park>
  
  out_inv_cl_pa_sub->axA=a_sub;
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	601a      	str	r2, [r3, #0]
  out_inv_cl_pa_sub->axB=b_sub;
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	605a      	str	r2, [r3, #4]
  out_inv_cl_pa_sub->axC=c_sub;
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <ADC_Voltage_AC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC_Voltage_AC_ProcessData(uint32_t* p_Data_Sub, VoltageAC_ADC_NORM_Struct* VOLTAGE_ADC_AC_IN_NORM_Sub){
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phA=((float)(p_Data_Sub[0])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800374a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80037b4 <ADC_Voltage_AC_ProcessData+0x80>
 800374e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003756:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phB=((float)(p_Data_Sub[1])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800376e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80037b4 <ADC_Voltage_AC_ProcessData+0x80>
 8003772:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800377a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	edc3 7a01 	vstr	s15, [r3, #4]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phC=((float)(p_Data_Sub[2])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3308      	adds	r3, #8
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003792:	eddf 6a08 	vldr	s13, [pc, #32]	; 80037b4 <ADC_Voltage_AC_ProcessData+0x80>
 8003796:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800379a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800379e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	45000000 	.word	0x45000000

080037b8 <ADC2Phy_Voltage_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_Voltage_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, VoltageAC_ADC_NORM_Struct* VOLTAGE_ADC_AC_IN_NORM_Sub){
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  
  float B_Vac=DPC_ADC_Conf->B_Vac;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	617b      	str	r3, [r7, #20]
//  float G_Vac=DPC_ADC_Conf->G_Vac;
  float invG_Vac=DPC_ADC_Conf->invG_Vac;  
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	613b      	str	r3, [r7, #16]
  
  VOLTAGE_ADC_AC_IN_NORM_Sub->phA=((float)((int16_t)p_Data_Sub[0]-B_Vac)*(float)(invG_Vac));    
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	b21b      	sxth	r3, r3
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037de:	edd7 7a05 	vldr	s15, [r7, #20]
 80037e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80037ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phB=((float)((int16_t)p_Data_Sub[1]-B_Vac)*(float)(invG_Vac));    
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	3304      	adds	r3, #4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	b21b      	sxth	r3, r3
 80037fc:	ee07 3a90 	vmov	s15, r3
 8003800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003804:	edd7 7a05 	vldr	s15, [r7, #20]
 8003808:	ee37 7a67 	vsub.f32	s14, s14, s15
 800380c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	edc3 7a01 	vstr	s15, [r3, #4]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phC=((float)((int16_t)p_Data_Sub[2]-B_Vac)*(float)(invG_Vac));    
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	3308      	adds	r3, #8
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	b21b      	sxth	r3, r3
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800382a:	edd7 7a05 	vldr	s15, [r7, #20]
 800382e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003832:	edd7 7a04 	vldr	s15, [r7, #16]
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <ADC_Voltage_DC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC_Voltage_DC_ProcessData(uint32_t* p_Data_Sub, VoltageDC_ADC_NORM_Struct* VOLTAGE_ADC_DC_IN_NORM_Sub){
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_pos=((float)(p_Data_Sub[0])/(float)(1<<11));    //(float)(1<<11)==(2.44140625e-4*2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003862:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003898 <ADC_Voltage_DC_ProcessData+0x4c>
 8003866:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_neg=((float)(p_Data_Sub[1])/(float)(1<<11));    //(float)(1<<11)==(2.44140625e-4*2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800387e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003898 <ADC_Voltage_DC_ProcessData+0x4c>
 8003882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	edc3 7a01 	vstr	s15, [r3, #4]
}  
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	45000000 	.word	0x45000000

0800389c <ADC2Phy_DC_Voltage_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_DC_Voltage_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, VoltageDC_ADC_NORM_Struct* VOLTAGE_ADC_DC_IN_NORM_Sub){
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  
  float B_Vdc=DPC_ADC_Conf->B_Vdc;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	617b      	str	r3, [r7, #20]
//  float G_Vdc=DPC_ADC_Conf->G_Vdc;
  float invG_Vdc=DPC_ADC_Conf->invG_Vdc;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	613b      	str	r3, [r7, #16]
  
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_pos=((float)((int16_t)p_Data_Sub[0]-B_Vdc)*(float)(invG_Vdc)); 
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	b21b      	sxth	r3, r3
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80038ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_neg=((float)((int16_t)p_Data_Sub[1]-100)*(float)(invG_Vdc));
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	3304      	adds	r3, #4
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	b21b      	sxth	r3, r3
 80038e0:	3b64      	subs	r3, #100	; 0x64
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	edc3 7a01 	vstr	s15, [r3, #4]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_tot=VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_pos+VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_neg;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	ed93 7a00 	vldr	s14, [r3]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	edd3 7a01 	vldr	s15, [r3, #4]
 8003904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	edc3 7a02 	vstr	s15, [r3, #8]
  
}  
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <ADC_Current_AC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    
void ADC_Current_AC_ProcessData(uint32_t* p_Data_Sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub){
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  CURRENT_ADC_AC_IN_NORM_Sub->phA=((float)(p_Data_Sub[0])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003932:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800399c <ADC_Current_AC_ProcessData+0x80>
 8003936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800393a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800393e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	edc3 7a00 	vstr	s15, [r3]
  CURRENT_ADC_AC_IN_NORM_Sub->phB=((float)(p_Data_Sub[1])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003956:	eddf 6a11 	vldr	s13, [pc, #68]	; 800399c <ADC_Current_AC_ProcessData+0x80>
 800395a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800395e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003962:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	edc3 7a01 	vstr	s15, [r3, #4]
  CURRENT_ADC_AC_IN_NORM_Sub->phC=((float)(p_Data_Sub[2])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3308      	adds	r3, #8
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800397a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800399c <ADC_Current_AC_ProcessData+0x80>
 800397e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003986:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	45000000 	.word	0x45000000

080039a0 <ADC2Phy_Current_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_Current_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub){
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  
  float B_Iac=DPC_ADC_Conf->B_Iac;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	617b      	str	r3, [r7, #20]
//  float G_Iac=DPC_ADC_Conf->G_Iac;
  float invG_Iac=DPC_ADC_Conf->invG_Iac;  
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	613b      	str	r3, [r7, #16]
  
  CURRENT_ADC_AC_IN_NORM_Sub->phA=((float)((int16_t)p_Data_Sub[0]-B_Iac)*(float)(invG_Iac));    
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	b21b      	sxth	r3, r3
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80039ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80039d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	edc3 7a00 	vstr	s15, [r3]
  CURRENT_ADC_AC_IN_NORM_Sub->phB=((float)((int16_t)p_Data_Sub[1]-B_Iac)*(float)(invG_Iac));    
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	3304      	adds	r3, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	b21b      	sxth	r3, r3
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80039f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80039f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	edc3 7a01 	vstr	s15, [r3, #4]
  CURRENT_ADC_AC_IN_NORM_Sub->phC=((float)((int16_t)p_Data_Sub[2]-B_Iac)*(float)(invG_Iac));    
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3308      	adds	r3, #8
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	b21b      	sxth	r3, r3
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <DPC_ADC_Init>:
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    

void DPC_ADC_Init(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,float G_Vac,float B_Vac,float G_Iac,float B_Iac,float G_Vdc,float B_Vdc,float G_Idc,float B_Idc){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08a      	sub	sp, #40	; 0x28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6278      	str	r0, [r7, #36]	; 0x24
 8003a3c:	ed87 0a08 	vstr	s0, [r7, #32]
 8003a40:	edc7 0a07 	vstr	s1, [r7, #28]
 8003a44:	ed87 1a06 	vstr	s2, [r7, #24]
 8003a48:	edc7 1a05 	vstr	s3, [r7, #20]
 8003a4c:	ed87 2a04 	vstr	s4, [r7, #16]
 8003a50:	edc7 2a03 	vstr	s5, [r7, #12]
 8003a54:	ed87 3a02 	vstr	s6, [r7, #8]
 8003a58:	edc7 3a01 	vstr	s7, [r7, #4]
  
	DPC_ADC_Default_Init();
 8003a5c:	f000 f844 	bl	8003ae8 <DPC_ADC_Default_Init>

	DPC_ADC_Conf->B_Vac=B_Vac;
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	609a      	str	r2, [r3, #8]
	DPC_ADC_Conf->G_Vac=G_Vac;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	6a3a      	ldr	r2, [r7, #32]
 8003a6a:	601a      	str	r2, [r3, #0]
	DPC_ADC_Conf->invG_Vac=(float)(1.0/G_Vac);
 8003a6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a70:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	edc3 7a01 	vstr	s15, [r3, #4]

	DPC_ADC_Conf->B_Vdc=B_Vdc;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	621a      	str	r2, [r3, #32]
	DPC_ADC_Conf->G_Vdc=G_Vdc;
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	619a      	str	r2, [r3, #24]
	DPC_ADC_Conf->invG_Vdc=(float)(1.0/G_Vdc);
 8003a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	edc3 7a07 	vstr	s15, [r3, #28]

	DPC_ADC_Conf->B_Iac=B_Iac;
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	615a      	str	r2, [r3, #20]
	DPC_ADC_Conf->G_Iac=G_Iac;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	60da      	str	r2, [r3, #12]
	DPC_ADC_Conf->invG_Iac=(float)(1.0/G_Iac);
 8003aa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aac:	ed97 7a06 	vldr	s14, [r7, #24]
 8003ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	edc3 7a04 	vstr	s15, [r3, #16]

	DPC_ADC_Conf->B_Idc=B_Idc;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	62da      	str	r2, [r3, #44]	; 0x2c
	DPC_ADC_Conf->G_Idc=G_Idc;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24
	DPC_ADC_Conf->invG_Idc=(float)(1.0/G_Idc);
 8003ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aca:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	DPC_ADC_Conf->DPC_ADC_Conf_Complete=SET;
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
}
 8003ae0:	bf00      	nop
 8003ae2:	3728      	adds	r7, #40	; 0x28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <DPC_ADC_Default_Init>:
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family
  */

void DPC_ADC_Default_Init(){
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b092      	sub	sp, #72	; 0x48
 8003aec:	af00      	add	r7, sp, #0

	  ADC_MultiModeTypeDef multimode = {0};
 8003aee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	609a      	str	r2, [r3, #8]
	  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003afa:	f107 0320 	add.w	r3, r7, #32
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	605a      	str	r2, [r3, #4]
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	60da      	str	r2, [r3, #12]
 8003b08:	611a      	str	r2, [r3, #16]
 8003b0a:	615a      	str	r2, [r3, #20]
 8003b0c:	619a      	str	r2, [r3, #24]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8003b0e:	463b      	mov	r3, r7
 8003b10:	2220      	movs	r2, #32
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f009 fb02 	bl	800d11e <memset>

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8003b1a:	4b79      	ldr	r3, [pc, #484]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003b20:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b22:	4b77      	ldr	r3, [pc, #476]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003b28:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b2a:	4b75      	ldr	r3, [pc, #468]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b30:	4b73      	ldr	r3, [pc, #460]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	60da      	str	r2, [r3, #12]
	  hadc1.Init.GainCompensation = 0;
 8003b36:	4b72      	ldr	r3, [pc, #456]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003b3c:	4b70      	ldr	r3, [pc, #448]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	615a      	str	r2, [r3, #20]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b42:	4b6f      	ldr	r3, [pc, #444]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b44:	2204      	movs	r2, #4
 8003b46:	619a      	str	r2, [r3, #24]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003b48:	4b6d      	ldr	r3, [pc, #436]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	771a      	strb	r2, [r3, #28]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8003b4e:	4b6c      	ldr	r3, [pc, #432]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	775a      	strb	r2, [r3, #29]
	  hadc1.Init.NbrOfConversion = 8;
 8003b54:	4b6a      	ldr	r3, [pc, #424]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b56:	2208      	movs	r2, #8
 8003b58:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b5a:	4b69      	ldr	r3, [pc, #420]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b62:	4b67      	ldr	r3, [pc, #412]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b68:	4b65      	ldr	r3, [pc, #404]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003b6e:	4b64      	ldr	r3, [pc, #400]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003b76:	4b62      	ldr	r3, [pc, #392]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc1.Init.OversamplingMode = ENABLE;
 8003b7c:	4b60      	ldr	r3, [pc, #384]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8003b84:	4b5e      	ldr	r3, [pc, #376]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b86:	2208      	movs	r2, #8
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8003b8a:	4b5d      	ldr	r3, [pc, #372]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b8c:	2260      	movs	r2, #96	; 0x60
 8003b8e:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003b90:	4b5b      	ldr	r3, [pc, #364]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003b96:	4b5a      	ldr	r3, [pc, #360]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b9c:	4858      	ldr	r0, [pc, #352]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003b9e:	f002 fc99 	bl	80064d4 <HAL_ADC_Init>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <DPC_ADC_Default_Init+0xc4>
	  {
	    Error_Handler();
 8003ba8:	f001 fe4e 	bl	8005848 <Error_Handler>
	  }
	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003bac:	2300      	movs	r3, #0
 8003bae:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003bb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4852      	ldr	r0, [pc, #328]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003bb8:	f003 fe86 	bl	80078c8 <HAL_ADCEx_MultiModeConfigChannel>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <DPC_ADC_Default_Init+0xde>
	  {
	    Error_Handler();
 8003bc2:	f001 fe41 	bl	8005848 <Error_Handler>
	  }
	  /** Configure Analog WatchDog 1
	  */
	  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003bc6:	4b4f      	ldr	r3, [pc, #316]	; (8003d04 <DPC_ADC_Default_Init+0x21c>)
 8003bc8:	623b      	str	r3, [r7, #32]
	  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8003bca:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
	  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 8003bd0:	4b4d      	ldr	r3, [pc, #308]	; (8003d08 <DPC_ADC_Default_Init+0x220>)
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
	  AnalogWDGConfig.ITMode = DISABLE;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	  AnalogWDGConfig.HighThreshold = 0x0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	633b      	str	r3, [r7, #48]	; 0x30
	  AnalogWDGConfig.LowThreshold = 0x0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
	  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8003be6:	f107 0320 	add.w	r3, r7, #32
 8003bea:	4619      	mov	r1, r3
 8003bec:	4844      	ldr	r0, [pc, #272]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003bee:	f003 fb5b 	bl	80072a8 <HAL_ADC_AnalogWDGConfig>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <DPC_ADC_Default_Init+0x114>
	  {
	    Error_Handler();
 8003bf8:	f001 fe26 	bl	8005848 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8003bfc:	4b42      	ldr	r3, [pc, #264]	; (8003d08 <DPC_ADC_Default_Init+0x220>)
 8003bfe:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c00:	2306      	movs	r3, #6
 8003c02:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8003c04:	2301      	movs	r3, #1
 8003c06:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003c08:	237f      	movs	r3, #127	; 0x7f
 8003c0a:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c14:	463b      	mov	r3, r7
 8003c16:	4619      	mov	r1, r3
 8003c18:	4839      	ldr	r0, [pc, #228]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003c1a:	f002 ff07 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <DPC_ADC_Default_Init+0x140>
	  {
	    Error_Handler();
 8003c24:	f001 fe10 	bl	8005848 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8003c28:	4b38      	ldr	r3, [pc, #224]	; (8003d0c <DPC_ADC_Default_Init+0x224>)
 8003c2a:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003c2c:	230c      	movs	r3, #12
 8003c2e:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c30:	463b      	mov	r3, r7
 8003c32:	4619      	mov	r1, r3
 8003c34:	4832      	ldr	r0, [pc, #200]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003c36:	f002 fef9 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <DPC_ADC_Default_Init+0x15c>
	  {
	    Error_Handler();
 8003c40:	f001 fe02 	bl	8005848 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8003c44:	4b32      	ldr	r3, [pc, #200]	; (8003d10 <DPC_ADC_Default_Init+0x228>)
 8003c46:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003c48:	2312      	movs	r3, #18
 8003c4a:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	4619      	mov	r1, r3
 8003c50:	482b      	ldr	r0, [pc, #172]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003c52:	f002 feeb 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <DPC_ADC_Default_Init+0x178>
	  {
	    Error_Handler();
 8003c5c:	f001 fdf4 	bl	8005848 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8003c60:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <DPC_ADC_Default_Init+0x22c>)
 8003c62:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003c64:	2318      	movs	r3, #24
 8003c66:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c68:	463b      	mov	r3, r7
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4824      	ldr	r0, [pc, #144]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003c6e:	f002 fedd 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <DPC_ADC_Default_Init+0x194>
	  {
	    Error_Handler();
 8003c78:	f001 fde6 	bl	8005848 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_5;
 8003c7c:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <DPC_ADC_Default_Init+0x230>)
 8003c7e:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c84:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c86:	463b      	mov	r3, r7
 8003c88:	4619      	mov	r1, r3
 8003c8a:	481d      	ldr	r0, [pc, #116]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003c8c:	f002 fece 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <DPC_ADC_Default_Init+0x1b2>
	  {
	    Error_Handler();
 8003c96:	f001 fdd7 	bl	8005848 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <DPC_ADC_Default_Init+0x234>)
 8003c9c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_6;
 8003c9e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003ca2:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4815      	ldr	r0, [pc, #84]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003caa:	f002 febf 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <DPC_ADC_Default_Init+0x1d0>
	  {
	    Error_Handler();
 8003cb4:	f001 fdc8 	bl	8005848 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <DPC_ADC_Default_Init+0x238>)
 8003cba:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_7;
 8003cbc:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8003cc0:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	480e      	ldr	r0, [pc, #56]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003cc8:	f002 feb0 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <DPC_ADC_Default_Init+0x1ee>
	  {
	    Error_Handler();
 8003cd2:	f001 fdb9 	bl	8005848 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8003cd6:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <DPC_ADC_Default_Init+0x23c>)
 8003cd8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_8;
 8003cda:	f44f 7389 	mov.w	r3, #274	; 0x112
 8003cde:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4805      	ldr	r0, [pc, #20]	; (8003d00 <DPC_ADC_Default_Init+0x218>)
 8003cea:	f002 fe9f 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <DPC_ADC_Default_Init+0x210>
	  {
	    Error_Handler();
 8003cf4:	f001 fda8 	bl	8005848 <Error_Handler>
	  }
}
 8003cf8:	bf00      	nop
 8003cfa:	3748      	adds	r7, #72	; 0x48
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200001d0 	.word	0x200001d0
 8003d04:	7dc00000 	.word	0x7dc00000
 8003d08:	04300002 	.word	0x04300002
 8003d0c:	08600004 	.word	0x08600004
 8003d10:	0c900008 	.word	0x0c900008
 8003d14:	10c00010 	.word	0x10c00010
 8003d18:	14f00020 	.word	0x14f00020
 8003d1c:	19200040 	.word	0x19200040
 8003d20:	1d500080 	.word	0x1d500080
 8003d24:	c3210000 	.word	0xc3210000

08003d28 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc5;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b092      	sub	sp, #72	; 0x48
 8003d2c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8003d2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	605a      	str	r2, [r3, #4]
 8003d38:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003d3a:	f107 0320 	add.w	r3, r7, #32
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	611a      	str	r2, [r3, #16]
 8003d4a:	615a      	str	r2, [r3, #20]
 8003d4c:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003d4e:	463b      	mov	r3, r7
 8003d50:	2220      	movs	r2, #32
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f009 f9e2 	bl	800d11e <memset>

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003d5a:	4b7a      	ldr	r3, [pc, #488]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003d5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003d60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003d62:	4b78      	ldr	r3, [pc, #480]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003d64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003d6a:	4b76      	ldr	r3, [pc, #472]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d70:	4b74      	ldr	r3, [pc, #464]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003d76:	4b73      	ldr	r3, [pc, #460]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003d7c:	4b71      	ldr	r3, [pc, #452]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d82:	4b70      	ldr	r3, [pc, #448]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003d84:	2204      	movs	r2, #4
 8003d86:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003d88:	4b6e      	ldr	r3, [pc, #440]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003d8e:	4b6d      	ldr	r3, [pc, #436]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 8;
 8003d94:	4b6b      	ldr	r3, [pc, #428]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003d96:	2208      	movs	r2, #8
 8003d98:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d9a:	4b6a      	ldr	r3, [pc, #424]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003da2:	4b68      	ldr	r3, [pc, #416]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003da8:	4b66      	ldr	r3, [pc, #408]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003dae:	4b65      	ldr	r3, [pc, #404]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003db6:	4b63      	ldr	r3, [pc, #396]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8003dbc:	4b61      	ldr	r3, [pc, #388]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8003dc4:	4b5f      	ldr	r3, [pc, #380]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8003dca:	4b5e      	ldr	r3, [pc, #376]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003dcc:	2260      	movs	r2, #96	; 0x60
 8003dce:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003dd0:	4b5c      	ldr	r3, [pc, #368]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003dd6:	4b5b      	ldr	r3, [pc, #364]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ddc:	4859      	ldr	r0, [pc, #356]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003dde:	f002 fb79 	bl	80064d4 <HAL_ADC_Init>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8003de8:	f001 fd2e 	bl	8005848 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003dec:	2300      	movs	r3, #0
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003df0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003df4:	4619      	mov	r1, r3
 8003df6:	4853      	ldr	r0, [pc, #332]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003df8:	f003 fd66 	bl	80078c8 <HAL_ADCEx_MultiModeConfigChannel>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003e02:	f001 fd21 	bl	8005848 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003e06:	4b50      	ldr	r3, [pc, #320]	; (8003f48 <MX_ADC1_Init+0x220>)
 8003e08:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8003e0a:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 8003e10:	4b4e      	ldr	r3, [pc, #312]	; (8003f4c <MX_ADC1_Init+0x224>)
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = DISABLE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 0x0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0x0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8003e26:	f107 0320 	add.w	r3, r7, #32
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4845      	ldr	r0, [pc, #276]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003e2e:	f003 fa3b 	bl	80072a8 <HAL_ADC_AnalogWDGConfig>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8003e38:	f001 fd06 	bl	8005848 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003e3c:	4b43      	ldr	r3, [pc, #268]	; (8003f4c <MX_ADC1_Init+0x224>)
 8003e3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003e40:	2306      	movs	r3, #6
 8003e42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8003e44:	2301      	movs	r3, #1
 8003e46:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003e48:	237f      	movs	r3, #127	; 0x7f
 8003e4a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e54:	463b      	mov	r3, r7
 8003e56:	4619      	mov	r1, r3
 8003e58:	483a      	ldr	r0, [pc, #232]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003e5a:	f002 fde7 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8003e64:	f001 fcf0 	bl	8005848 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003e68:	4b39      	ldr	r3, [pc, #228]	; (8003f50 <MX_ADC1_Init+0x228>)
 8003e6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e70:	463b      	mov	r3, r7
 8003e72:	4619      	mov	r1, r3
 8003e74:	4833      	ldr	r0, [pc, #204]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003e76:	f002 fdd9 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8003e80:	f001 fce2 	bl	8005848 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003e84:	4b33      	ldr	r3, [pc, #204]	; (8003f54 <MX_ADC1_Init+0x22c>)
 8003e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003e88:	2312      	movs	r3, #18
 8003e8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e8c:	463b      	mov	r3, r7
 8003e8e:	4619      	mov	r1, r3
 8003e90:	482c      	ldr	r0, [pc, #176]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003e92:	f002 fdcb 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8003e9c:	f001 fcd4 	bl	8005848 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003ea0:	4b2d      	ldr	r3, [pc, #180]	; (8003f58 <MX_ADC1_Init+0x230>)
 8003ea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003ea4:	2318      	movs	r3, #24
 8003ea6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003eac:	463b      	mov	r3, r7
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4824      	ldr	r0, [pc, #144]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003eb2:	f002 fdbb 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 8003ebc:	f001 fcc4 	bl	8005848 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003ec0:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <MX_ADC1_Init+0x234>)
 8003ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ec8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003eca:	463b      	mov	r3, r7
 8003ecc:	4619      	mov	r1, r3
 8003ece:	481d      	ldr	r0, [pc, #116]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003ed0:	f002 fdac 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <MX_ADC1_Init+0x1b6>
  {
    Error_Handler();
 8003eda:	f001 fcb5 	bl	8005848 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003ede:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <MX_ADC1_Init+0x238>)
 8003ee0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8003ee2:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003ee6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ee8:	463b      	mov	r3, r7
 8003eea:	4619      	mov	r1, r3
 8003eec:	4815      	ldr	r0, [pc, #84]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003eee:	f002 fd9d 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_ADC1_Init+0x1d4>
  {
    Error_Handler();
 8003ef8:	f001 fca6 	bl	8005848 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8003efc:	4b19      	ldr	r3, [pc, #100]	; (8003f64 <MX_ADC1_Init+0x23c>)
 8003efe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8003f00:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8003f04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f06:	463b      	mov	r3, r7
 8003f08:	4619      	mov	r1, r3
 8003f0a:	480e      	ldr	r0, [pc, #56]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003f0c:	f002 fd8e 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <MX_ADC1_Init+0x1f2>
  {
    Error_Handler();
 8003f16:	f001 fc97 	bl	8005848 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <MX_ADC1_Init+0x224>)
 8003f1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8003f1e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8003f22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f28:	463b      	mov	r3, r7
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4805      	ldr	r0, [pc, #20]	; (8003f44 <MX_ADC1_Init+0x21c>)
 8003f2e:	f002 fd7d 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_ADC1_Init+0x214>
  {
    Error_Handler();
 8003f38:	f001 fc86 	bl	8005848 <Error_Handler>
  }

}
 8003f3c:	bf00      	nop
 8003f3e:	3748      	adds	r7, #72	; 0x48
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	200001d0 	.word	0x200001d0
 8003f48:	7dc00000 	.word	0x7dc00000
 8003f4c:	04300002 	.word	0x04300002
 8003f50:	08600004 	.word	0x08600004
 8003f54:	0c900008 	.word	0x0c900008
 8003f58:	10c00010 	.word	0x10c00010
 8003f5c:	19200040 	.word	0x19200040
 8003f60:	1d500080 	.word	0x1d500080
 8003f64:	c3210000 	.word	0xc3210000

08003f68 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8003f6e:	463b      	mov	r3, r7
 8003f70:	2220      	movs	r2, #32
 8003f72:	2100      	movs	r1, #0
 8003f74:	4618      	mov	r0, r3
 8003f76:	f009 f8d2 	bl	800d11e <memset>

  /** Common config
  */
  hadc5.Instance = ADC5;
 8003f7a:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003f7c:	4a2b      	ldr	r2, [pc, #172]	; (800402c <MX_ADC5_Init+0xc4>)
 8003f7e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003f80:	4b29      	ldr	r3, [pc, #164]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003f82:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003f86:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f8e:	4b26      	ldr	r3, [pc, #152]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8003f94:	4b24      	ldr	r3, [pc, #144]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003fa0:	4b21      	ldr	r3, [pc, #132]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8003fac:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8003fb2:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003fc6:	4b18      	ldr	r3, [pc, #96]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8003fcc:	4b16      	ldr	r3, [pc, #88]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8003fda:	4b13      	ldr	r3, [pc, #76]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8003fe2:	4811      	ldr	r0, [pc, #68]	; (8004028 <MX_ADC5_Init+0xc0>)
 8003fe4:	f002 fa76 	bl	80064d4 <HAL_ADC_Init>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8003fee:	f001 fc2b 	bl	8005848 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <MX_ADC5_Init+0xc8>)
 8003ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ff6:	2306      	movs	r3, #6
 8003ff8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ffe:	237f      	movs	r3, #127	; 0x7f
 8004000:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004002:	2304      	movs	r3, #4
 8004004:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800400a:	463b      	mov	r3, r7
 800400c:	4619      	mov	r1, r3
 800400e:	4806      	ldr	r0, [pc, #24]	; (8004028 <MX_ADC5_Init+0xc0>)
 8004010:	f002 fd0c 	bl	8006a2c <HAL_ADC_ConfigChannel>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 800401a:	f001 fc15 	bl	8005848 <Error_Handler>
  }

}
 800401e:	bf00      	nop
 8004020:	3720      	adds	r7, #32
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000164 	.word	0x20000164
 800402c:	50000600 	.word	0x50000600
 8004030:	90c00010 	.word	0x90c00010

08004034 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	; 0x30
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800403c:	f107 031c 	add.w	r3, r7, #28
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004054:	f040 8082 	bne.w	800415c <HAL_ADC_MspInit+0x128>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004058:	4b4b      	ldr	r3, [pc, #300]	; (8004188 <HAL_ADC_MspInit+0x154>)
 800405a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405c:	4a4a      	ldr	r2, [pc, #296]	; (8004188 <HAL_ADC_MspInit+0x154>)
 800405e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004064:	4b48      	ldr	r3, [pc, #288]	; (8004188 <HAL_ADC_MspInit+0x154>)
 8004066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004070:	4b45      	ldr	r3, [pc, #276]	; (8004188 <HAL_ADC_MspInit+0x154>)
 8004072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004074:	4a44      	ldr	r2, [pc, #272]	; (8004188 <HAL_ADC_MspInit+0x154>)
 8004076:	f043 0304 	orr.w	r3, r3, #4
 800407a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800407c:	4b42      	ldr	r3, [pc, #264]	; (8004188 <HAL_ADC_MspInit+0x154>)
 800407e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004088:	4b3f      	ldr	r3, [pc, #252]	; (8004188 <HAL_ADC_MspInit+0x154>)
 800408a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408c:	4a3e      	ldr	r2, [pc, #248]	; (8004188 <HAL_ADC_MspInit+0x154>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004094:	4b3c      	ldr	r3, [pc, #240]	; (8004188 <HAL_ADC_MspInit+0x154>)
 8004096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040a0:	4b39      	ldr	r3, [pc, #228]	; (8004188 <HAL_ADC_MspInit+0x154>)
 80040a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a4:	4a38      	ldr	r2, [pc, #224]	; (8004188 <HAL_ADC_MspInit+0x154>)
 80040a6:	f043 0302 	orr.w	r3, r3, #2
 80040aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ac:	4b36      	ldr	r3, [pc, #216]	; (8004188 <HAL_ADC_MspInit+0x154>)
 80040ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_VDC__Pin|ADC_VDC_C1_Pin;
 80040b8:	2303      	movs	r3, #3
 80040ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040bc:	2303      	movs	r3, #3
 80040be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c4:	f107 031c 	add.w	r3, r7, #28
 80040c8:	4619      	mov	r1, r3
 80040ca:	4830      	ldr	r0, [pc, #192]	; (800418c <HAL_ADC_MspInit+0x158>)
 80040cc:	f004 f9f0 	bl	80084b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IA_Pin|ADC_IB_Pin|ADC_VA_Pin|ADC_VB_Pin;
 80040d0:	230f      	movs	r3, #15
 80040d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040d4:	2303      	movs	r3, #3
 80040d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040dc:	f107 031c 	add.w	r3, r7, #28
 80040e0:	4619      	mov	r1, r3
 80040e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040e6:	f004 f9e3 	bl	80084b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VC_Pin;
 80040ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040f0:	2303      	movs	r3, #3
 80040f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VC_GPIO_Port, &GPIO_InitStruct);
 80040f8:	f107 031c 	add.w	r3, r7, #28
 80040fc:	4619      	mov	r1, r3
 80040fe:	4824      	ldr	r0, [pc, #144]	; (8004190 <HAL_ADC_MspInit+0x15c>)
 8004100:	f004 f9d6 	bl	80084b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8004104:	4b23      	ldr	r3, [pc, #140]	; (8004194 <HAL_ADC_MspInit+0x160>)
 8004106:	4a24      	ldr	r2, [pc, #144]	; (8004198 <HAL_ADC_MspInit+0x164>)
 8004108:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800410a:	4b22      	ldr	r3, [pc, #136]	; (8004194 <HAL_ADC_MspInit+0x160>)
 800410c:	2205      	movs	r2, #5
 800410e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004110:	4b20      	ldr	r3, [pc, #128]	; (8004194 <HAL_ADC_MspInit+0x160>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004116:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <HAL_ADC_MspInit+0x160>)
 8004118:	2200      	movs	r2, #0
 800411a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800411c:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <HAL_ADC_MspInit+0x160>)
 800411e:	2280      	movs	r2, #128	; 0x80
 8004120:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004122:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <HAL_ADC_MspInit+0x160>)
 8004124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004128:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800412a:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <HAL_ADC_MspInit+0x160>)
 800412c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004130:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004132:	4b18      	ldr	r3, [pc, #96]	; (8004194 <HAL_ADC_MspInit+0x160>)
 8004134:	2220      	movs	r2, #32
 8004136:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004138:	4b16      	ldr	r3, [pc, #88]	; (8004194 <HAL_ADC_MspInit+0x160>)
 800413a:	2200      	movs	r2, #0
 800413c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800413e:	4815      	ldr	r0, [pc, #84]	; (8004194 <HAL_ADC_MspInit+0x160>)
 8004140:	f003 fe08 	bl	8007d54 <HAL_DMA_Init>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 800414a:	f001 fb7d 	bl	8005848 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a10      	ldr	r2, [pc, #64]	; (8004194 <HAL_ADC_MspInit+0x160>)
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
 8004154:	4a0f      	ldr	r2, [pc, #60]	; (8004194 <HAL_ADC_MspInit+0x160>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_RCC_ADC345_CLK_ENABLE();
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800415a:	e010      	b.n	800417e <HAL_ADC_MspInit+0x14a>
  else if(adcHandle->Instance==ADC5)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0e      	ldr	r2, [pc, #56]	; (800419c <HAL_ADC_MspInit+0x168>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10b      	bne.n	800417e <HAL_ADC_MspInit+0x14a>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <HAL_ADC_MspInit+0x154>)
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	4a07      	ldr	r2, [pc, #28]	; (8004188 <HAL_ADC_MspInit+0x154>)
 800416c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_ADC_MspInit+0x154>)
 8004174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]
}
 800417e:	bf00      	nop
 8004180:	3730      	adds	r7, #48	; 0x30
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
 800418c:	48000800 	.word	0x48000800
 8004190:	48000400 	.word	0x48000400
 8004194:	2000023c 	.word	0x2000023c
 8004198:	40020044 	.word	0x40020044
 800419c:	50000600 	.word	0x50000600

080041a0 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0

  hcordic.Instance = CORDIC;
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <MX_CORDIC_Init+0x20>)
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <MX_CORDIC_Init+0x24>)
 80041a8:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80041aa:	4805      	ldr	r0, [pc, #20]	; (80041c0 <MX_CORDIC_Init+0x20>)
 80041ac:	f003 fc90 	bl	8007ad0 <HAL_CORDIC_Init>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80041b6:	f001 fb47 	bl	8005848 <Error_Handler>
  }

}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	2000029c 	.word	0x2000029c
 80041c4:	40020c00 	.word	0x40020c00

080041c8 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <HAL_CORDIC_MspInit+0x38>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10b      	bne.n	80041f2 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <HAL_CORDIC_MspInit+0x3c>)
 80041dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041de:	4a09      	ldr	r2, [pc, #36]	; (8004204 <HAL_CORDIC_MspInit+0x3c>)
 80041e0:	f043 0308 	orr.w	r3, r3, #8
 80041e4:	6493      	str	r3, [r2, #72]	; 0x48
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <HAL_CORDIC_MspInit+0x3c>)
 80041e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40020c00 	.word	0x40020c00
 8004204:	40021000 	.word	0x40021000

08004208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800420e:	4b22      	ldr	r3, [pc, #136]	; (8004298 <MX_DMA_Init+0x90>)
 8004210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004212:	4a21      	ldr	r2, [pc, #132]	; (8004298 <MX_DMA_Init+0x90>)
 8004214:	f043 0304 	orr.w	r3, r3, #4
 8004218:	6493      	str	r3, [r2, #72]	; 0x48
 800421a:	4b1f      	ldr	r3, [pc, #124]	; (8004298 <MX_DMA_Init+0x90>)
 800421c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	607b      	str	r3, [r7, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004226:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <MX_DMA_Init+0x90>)
 8004228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422a:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <MX_DMA_Init+0x90>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6493      	str	r3, [r2, #72]	; 0x48
 8004232:	4b19      	ldr	r3, [pc, #100]	; (8004298 <MX_DMA_Init+0x90>)
 8004234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800423e:	2200      	movs	r2, #0
 8004240:	2100      	movs	r1, #0
 8004242:	200b      	movs	r0, #11
 8004244:	f003 fd51 	bl	8007cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004248:	200b      	movs	r0, #11
 800424a:	f003 fd68 	bl	8007d1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800424e:	2200      	movs	r2, #0
 8004250:	2100      	movs	r1, #0
 8004252:	200c      	movs	r0, #12
 8004254:	f003 fd49 	bl	8007cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004258:	200c      	movs	r0, #12
 800425a:	f003 fd60 	bl	8007d1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800425e:	2200      	movs	r2, #0
 8004260:	2100      	movs	r1, #0
 8004262:	200d      	movs	r0, #13
 8004264:	f003 fd41 	bl	8007cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004268:	200d      	movs	r0, #13
 800426a:	f003 fd58 	bl	8007d1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800426e:	2200      	movs	r2, #0
 8004270:	2100      	movs	r1, #0
 8004272:	200e      	movs	r0, #14
 8004274:	f003 fd39 	bl	8007cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004278:	200e      	movs	r0, #14
 800427a:	f003 fd50 	bl	8007d1e <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 800427e:	2200      	movs	r2, #0
 8004280:	2100      	movs	r1, #0
 8004282:	205e      	movs	r0, #94	; 0x5e
 8004284:	f003 fd31 	bl	8007cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8004288:	205e      	movs	r0, #94	; 0x5e
 800428a:	f003 fd48 	bl	8007d1e <HAL_NVIC_EnableIRQ>

}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000

0800429c <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0

  hfmac.Instance = FMAC;
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <MX_FMAC_Init+0x20>)
 80042a2:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <MX_FMAC_Init+0x24>)
 80042a4:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80042a6:	4805      	ldr	r0, [pc, #20]	; (80042bc <MX_FMAC_Init+0x20>)
 80042a8:	f004 f856 	bl	8008358 <HAL_FMAC_Init>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80042b2:	f001 fac9 	bl	8005848 <Error_Handler>
  }

}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200002c4 	.word	0x200002c4
 80042c0:	40021400 	.word	0x40021400

080042c4 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <HAL_FMAC_MspInit+0x38>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d10b      	bne.n	80042ee <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80042d6:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <HAL_FMAC_MspInit+0x3c>)
 80042d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042da:	4a09      	ldr	r2, [pc, #36]	; (8004300 <HAL_FMAC_MspInit+0x3c>)
 80042dc:	f043 0310 	orr.w	r3, r3, #16
 80042e0:	6493      	str	r3, [r2, #72]	; 0x48
 80042e2:	4b07      	ldr	r3, [pc, #28]	; (8004300 <HAL_FMAC_MspInit+0x3c>)
 80042e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40021400 	.word	0x40021400
 8004300:	40021000 	.word	0x40021000

08004304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800430a:	f107 030c 	add.w	r3, r7, #12
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	609a      	str	r2, [r3, #8]
 8004316:	60da      	str	r2, [r3, #12]
 8004318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800431a:	4b28      	ldr	r3, [pc, #160]	; (80043bc <MX_GPIO_Init+0xb8>)
 800431c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431e:	4a27      	ldr	r2, [pc, #156]	; (80043bc <MX_GPIO_Init+0xb8>)
 8004320:	f043 0304 	orr.w	r3, r3, #4
 8004324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004326:	4b25      	ldr	r3, [pc, #148]	; (80043bc <MX_GPIO_Init+0xb8>)
 8004328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004332:	4b22      	ldr	r3, [pc, #136]	; (80043bc <MX_GPIO_Init+0xb8>)
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	4a21      	ldr	r2, [pc, #132]	; (80043bc <MX_GPIO_Init+0xb8>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800433e:	4b1f      	ldr	r3, [pc, #124]	; (80043bc <MX_GPIO_Init+0xb8>)
 8004340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	607b      	str	r3, [r7, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800434a:	4b1c      	ldr	r3, [pc, #112]	; (80043bc <MX_GPIO_Init+0xb8>)
 800434c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434e:	4a1b      	ldr	r2, [pc, #108]	; (80043bc <MX_GPIO_Init+0xb8>)
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004356:	4b19      	ldr	r3, [pc, #100]	; (80043bc <MX_GPIO_Init+0xb8>)
 8004358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin|LED_HL1_Pin|Relay_Pin, GPIO_PIN_RESET);
 8004362:	2200      	movs	r2, #0
 8004364:	21d0      	movs	r1, #208	; 0xd0
 8004366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800436a:	f004 fa23 	bl	80087b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_RESET);
 800436e:	2200      	movs	r2, #0
 8004370:	2120      	movs	r1, #32
 8004372:	4813      	ldr	r0, [pc, #76]	; (80043c0 <MX_GPIO_Init+0xbc>)
 8004374:	f004 fa1e 	bl	80087b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_HL2_Pin|LED_HL1_Pin|Relay_Pin;
 8004378:	23d0      	movs	r3, #208	; 0xd0
 800437a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800437c:	2301      	movs	r3, #1
 800437e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004388:	f107 030c 	add.w	r3, r7, #12
 800438c:	4619      	mov	r1, r3
 800438e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004392:	f004 f88d 	bl	80084b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PFC_SW_SRC_Pin;
 8004396:	2320      	movs	r3, #32
 8004398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800439a:	2301      	movs	r3, #1
 800439c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PFC_SW_SRC_GPIO_Port, &GPIO_InitStruct);
 80043a6:	f107 030c 	add.w	r3, r7, #12
 80043aa:	4619      	mov	r1, r3
 80043ac:	4804      	ldr	r0, [pc, #16]	; (80043c0 <MX_GPIO_Init+0xbc>)
 80043ae:	f004 f87f 	bl	80084b0 <HAL_GPIO_Init>

}
 80043b2:	bf00      	nop
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
 80043c0:	48000800 	.word	0x48000800

080043c4 <MX_HRTIM1_Init>:
DMA_HandleTypeDef hdma_hrtim1_b;
DMA_HandleTypeDef hdma_hrtim1_c;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b0b6      	sub	sp, #216	; 0xd8
 80043c8:	af00      	add	r7, sp, #0
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 80043ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	60da      	str	r2, [r3, #12]
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 80043d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	609a      	str	r2, [r3, #8]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80043e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80043f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	605a      	str	r2, [r3, #4]
 80043fc:	609a      	str	r2, [r3, #8]
 80043fe:	60da      	str	r2, [r3, #12]
 8004400:	611a      	str	r2, [r3, #16]
 8004402:	615a      	str	r2, [r3, #20]
 8004404:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8004406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800440a:	2260      	movs	r2, #96	; 0x60
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f008 fe85 	bl	800d11e <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8004414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8004420:	1d3b      	adds	r3, r7, #4
 8004422:	2220      	movs	r2, #32
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f008 fe79 	bl	800d11e <memset>

  hhrtim1.Instance = HRTIM1;
 800442c:	4bd0      	ldr	r3, [pc, #832]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 800442e:	4ad1      	ldr	r2, [pc, #836]	; (8004774 <MX_HRTIM1_Init+0x3b0>)
 8004430:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_FLT1|HRTIM_IT_FLT3;
 8004432:	4bcf      	ldr	r3, [pc, #828]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 8004434:	2205      	movs	r2, #5
 8004436:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8004438:	4bcd      	ldr	r3, [pc, #820]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 800443e:	48cc      	ldr	r0, [pc, #816]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 8004440:	f004 f9d0 	bl	80087e4 <HAL_HRTIM_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_HRTIM1_Init+0x8a>
  {
    Error_Handler();
 800444a:	f001 f9fd 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 800444e:	210c      	movs	r1, #12
 8004450:	48c7      	ldr	r0, [pc, #796]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 8004452:	f004 fa97 	bl	8008984 <HAL_HRTIM_DLLCalibrationStart>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <MX_HRTIM1_Init+0x9c>
  {
    Error_Handler();
 800445c:	f001 f9f4 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8004460:	210a      	movs	r1, #10
 8004462:	48c3      	ldr	r0, [pc, #780]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 8004464:	f004 fae6 	bl	8008a34 <HAL_HRTIM_PollForDLLCalibration>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <MX_HRTIM1_Init+0xae>
  {
    Error_Handler();
 800446e:	f001 f9eb 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 8004472:	2100      	movs	r1, #0
 8004474:	48be      	ldr	r0, [pc, #760]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 8004476:	f004 fcf9 	bl	8008e6c <HAL_HRTIM_FaultPrescalerConfig>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <MX_HRTIM1_Init+0xc0>
  {
    Error_Handler();
 8004480:	f001 f9e2 	bl	8005848 <Error_Handler>
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
 8004484:	2300      	movs	r3, #0
 8004486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 800448a:	2302      	movs	r3, #2
 800448c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 8004496:	2300      	movs	r3, #0
 8004498:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultCfg) != HAL_OK)
 800449c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80044a0:	461a      	mov	r2, r3
 80044a2:	2101      	movs	r1, #1
 80044a4:	48b2      	ldr	r0, [pc, #712]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 80044a6:	f004 fb21 	bl	8008aec <HAL_HRTIM_FaultConfig>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <MX_HRTIM1_Init+0xf0>
  {
    Error_Handler();
 80044b0:	f001 f9ca 	bl	8005848 <Error_Handler>
//  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
//  {
//    Error_Handler();
//  }

  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_1, HRTIM_FAULTMODECTL_ENABLED);
 80044b4:	2201      	movs	r2, #1
 80044b6:	2101      	movs	r1, #1
 80044b8:	48ad      	ldr	r0, [pc, #692]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 80044ba:	f004 fef5 	bl	80092a8 <HAL_HRTIM_FaultModeCtl>
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 80044be:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80044c2:	461a      	mov	r2, r3
 80044c4:	2104      	movs	r1, #4
 80044c6:	48aa      	ldr	r0, [pc, #680]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 80044c8:	f004 fdf6 	bl	80090b8 <HAL_HRTIM_FaultCounterConfig>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <MX_HRTIM1_Init+0x112>
  {
    Error_Handler();
 80044d2:	f001 f9b9 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 80044d6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80044da:	461a      	mov	r2, r3
 80044dc:	2104      	movs	r1, #4
 80044de:	48a4      	ldr	r0, [pc, #656]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 80044e0:	f004 fcfe 	bl	8008ee0 <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <MX_HRTIM1_Init+0x12a>
  {
    Error_Handler();
 80044ea:	f001 f9ad 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 80044ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80044f2:	461a      	mov	r2, r3
 80044f4:	2104      	movs	r1, #4
 80044f6:	489e      	ldr	r0, [pc, #632]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 80044f8:	f004 fcf2 	bl	8008ee0 <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_HRTIM1_Init+0x142>
  {
    Error_Handler();
 8004502:	f001 f9a1 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_3, &pFaultCfg) != HAL_OK)
 8004506:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800450a:	461a      	mov	r2, r3
 800450c:	2104      	movs	r1, #4
 800450e:	4898      	ldr	r0, [pc, #608]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 8004510:	f004 faec 	bl	8008aec <HAL_HRTIM_FaultConfig>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <MX_HRTIM1_Init+0x15a>
  {
    Error_Handler();
 800451a:	f001 f995 	bl	8005848 <Error_Handler>
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_3, HRTIM_FAULTMODECTL_ENABLED);
 800451e:	2201      	movs	r2, #1
 8004520:	2104      	movs	r1, #4
 8004522:	4893      	ldr	r0, [pc, #588]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 8004524:	f004 fec0 	bl	80092a8 <HAL_HRTIM_FaultModeCtl>
  pTimeBaseCfg.Period = 34000;
 8004528:	f248 43d0 	movw	r3, #34000	; 0x84d0
 800452c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8004530:	2300      	movs	r3, #0
 8004532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 8004536:	2302      	movs	r3, #2
 8004538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800453c:	2308      	movs	r3, #8
 800453e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8004542:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004546:	461a      	mov	r2, r3
 8004548:	2100      	movs	r1, #0
 800454a:	4889      	ldr	r0, [pc, #548]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 800454c:	f004 faa6 	bl	8008a9c <HAL_HRTIM_TimeBaseConfig>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <MX_HRTIM1_Init+0x196>
  {
    Error_Handler();
 8004556:	f001 f977 	bl	8005848 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 800456c:	2300      	movs	r3, #0
 800456e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8004572:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004576:	461a      	mov	r2, r3
 8004578:	2100      	movs	r1, #0
 800457a:	487d      	ldr	r0, [pc, #500]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 800457c:	f004 ff88 	bl	8009490 <HAL_HRTIM_WaveformTimerControl>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <MX_HRTIM1_Init+0x1c6>
  {
    Error_Handler();
 8004586:	f001 f95f 	bl	8005848 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800458a:	2300      	movs	r3, #0
 800458c:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST;
 800458e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMASrcAddress = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMADstAddress = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.DMASize = 0x1;
 800459c:	2301      	movs	r3, #1
 800459e:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80045a0:	2300      	movs	r3, #0
 80045a2:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80045a4:	2300      	movs	r3, #0
 80045a6:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80045a8:	2300      	movs	r3, #0
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80045ac:	2300      	movs	r3, #0
 80045ae:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 80045b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045b8:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80045ba:	2300      	movs	r3, #0
 80045bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80045be:	2300      	movs	r3, #0
 80045c0:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80045c2:	2300      	movs	r3, #0
 80045c4:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80045c6:	2300      	movs	r3, #0
 80045c8:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1|HRTIM_TIMFAULTENABLE_FAULT3;
 80045ca:	2305      	movs	r3, #5
 80045cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80045d2:	2300      	movs	r3, #0
 80045d4:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80045d6:	2300      	movs	r3, #0
 80045d8:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80045da:	2300      	movs	r3, #0
 80045dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 80045e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80045ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80045f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045f8:	461a      	mov	r2, r3
 80045fa:	2100      	movs	r1, #0
 80045fc:	485c      	ldr	r0, [pc, #368]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 80045fe:	f004 fed5 	bl	80093ac <HAL_HRTIM_WaveformTimerConfig>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <MX_HRTIM1_Init+0x248>
  {
    Error_Handler();
 8004608:	f001 f91e 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 800460c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004610:	461a      	mov	r2, r3
 8004612:	2101      	movs	r1, #1
 8004614:	4856      	ldr	r0, [pc, #344]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 8004616:	f004 fec9 	bl	80093ac <HAL_HRTIM_WaveformTimerConfig>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <MX_HRTIM1_Init+0x260>
  {
    Error_Handler();
 8004620:	f001 f912 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8004624:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004628:	461a      	mov	r2, r3
 800462a:	2102      	movs	r1, #2
 800462c:	4850      	ldr	r0, [pc, #320]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 800462e:	f004 febd 	bl	80093ac <HAL_HRTIM_WaveformTimerConfig>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <MX_HRTIM1_Init+0x278>
  {
    Error_Handler();
 8004638:	f001 f906 	bl	8005848 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x5000;
 800463c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8004642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004646:	2201      	movs	r2, #1
 8004648:	2100      	movs	r1, #0
 800464a:	4849      	ldr	r0, [pc, #292]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 800464c:	f004 ff54 	bl	80094f8 <HAL_HRTIM_WaveformCompareConfig>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <MX_HRTIM1_Init+0x296>
  {
    Error_Handler();
 8004656:	f001 f8f7 	bl	8005848 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 800465a:	2305      	movs	r3, #5
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800465e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004662:	2204      	movs	r2, #4
 8004664:	2100      	movs	r1, #0
 8004666:	4842      	ldr	r0, [pc, #264]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 8004668:	f004 ff46 	bl	80094f8 <HAL_HRTIM_WaveformCompareConfig>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <MX_HRTIM1_Init+0x2b2>
  {
    Error_Handler();
 8004672:	f001 f8e9 	bl	8005848 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 800467a:	2304      	movs	r3, #4
 800467c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 800467e:	2308      	movs	r3, #8
 8004680:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_INACTIVE;
 800468a:	2320      	movs	r3, #32
 800468c:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8004692:	2300      	movs	r3, #0
 8004694:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8004696:	1d3b      	adds	r3, r7, #4
 8004698:	2201      	movs	r2, #1
 800469a:	2100      	movs	r1, #0
 800469c:	4834      	ldr	r0, [pc, #208]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 800469e:	f005 f899 	bl	80097d4 <HAL_HRTIM_WaveformOutputConfig>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <MX_HRTIM1_Init+0x2e8>
  {
    Error_Handler();
 80046a8:	f001 f8ce 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80046ac:	1d3b      	adds	r3, r7, #4
 80046ae:	2204      	movs	r2, #4
 80046b0:	2101      	movs	r1, #1
 80046b2:	482f      	ldr	r0, [pc, #188]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 80046b4:	f005 f88e 	bl	80097d4 <HAL_HRTIM_WaveformOutputConfig>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <MX_HRTIM1_Init+0x2fe>
  {
    Error_Handler();
 80046be:	f001 f8c3 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 80046c2:	1d3b      	adds	r3, r7, #4
 80046c4:	2210      	movs	r2, #16
 80046c6:	2102      	movs	r1, #2
 80046c8:	4829      	ldr	r0, [pc, #164]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 80046ca:	f005 f883 	bl	80097d4 <HAL_HRTIM_WaveformOutputConfig>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <MX_HRTIM1_Init+0x314>
  {
    Error_Handler();
 80046d4:	f001 f8b8 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80046d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046dc:	461a      	mov	r2, r3
 80046de:	2101      	movs	r1, #1
 80046e0:	4823      	ldr	r0, [pc, #140]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 80046e2:	f004 f9db 	bl	8008a9c <HAL_HRTIM_TimeBaseConfig>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <MX_HRTIM1_Init+0x32c>
  {
    Error_Handler();
 80046ec:	f001 f8ac 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 80046f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80046f4:	461a      	mov	r2, r3
 80046f6:	2101      	movs	r1, #1
 80046f8:	481d      	ldr	r0, [pc, #116]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 80046fa:	f004 fec9 	bl	8009490 <HAL_HRTIM_WaveformTimerControl>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_HRTIM1_Init+0x344>
  {
    Error_Handler();
 8004704:	f001 f8a0 	bl	8005848 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x2000;
 8004708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800470e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004712:	2201      	movs	r2, #1
 8004714:	2101      	movs	r1, #1
 8004716:	4816      	ldr	r0, [pc, #88]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 8004718:	f004 feee 	bl	80094f8 <HAL_HRTIM_WaveformCompareConfig>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <MX_HRTIM1_Init+0x362>
  {
    Error_Handler();
 8004722:	f001 f891 	bl	8005848 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 8004726:	2305      	movs	r3, #5
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800472a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800472e:	2204      	movs	r2, #4
 8004730:	2101      	movs	r1, #1
 8004732:	480f      	ldr	r0, [pc, #60]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 8004734:	f004 fee0 	bl	80094f8 <HAL_HRTIM_WaveformCompareConfig>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <MX_HRTIM1_Init+0x37e>
  {
    Error_Handler();
 800473e:	f001 f883 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8004742:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004746:	461a      	mov	r2, r3
 8004748:	2102      	movs	r1, #2
 800474a:	4809      	ldr	r0, [pc, #36]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 800474c:	f004 f9a6 	bl	8008a9c <HAL_HRTIM_TimeBaseConfig>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <MX_HRTIM1_Init+0x396>
  {
    Error_Handler();
 8004756:	f001 f877 	bl	8005848 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 800475a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800475e:	461a      	mov	r2, r3
 8004760:	2102      	movs	r1, #2
 8004762:	4803      	ldr	r0, [pc, #12]	; (8004770 <MX_HRTIM1_Init+0x3ac>)
 8004764:	f004 fe94 	bl	8009490 <HAL_HRTIM_WaveformTimerControl>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d006      	beq.n	800477c <MX_HRTIM1_Init+0x3b8>
 800476e:	e003      	b.n	8004778 <MX_HRTIM1_Init+0x3b4>
 8004770:	2000035c 	.word	0x2000035c
 8004774:	40016800 	.word	0x40016800
  {
    Error_Handler();
 8004778:	f001 f866 	bl	8005848 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x8000;
 800477c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8004782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004786:	2201      	movs	r2, #1
 8004788:	2102      	movs	r1, #2
 800478a:	480e      	ldr	r0, [pc, #56]	; (80047c4 <MX_HRTIM1_Init+0x400>)
 800478c:	f004 feb4 	bl	80094f8 <HAL_HRTIM_WaveformCompareConfig>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <MX_HRTIM1_Init+0x3d6>
  {
    Error_Handler();
 8004796:	f001 f857 	bl	8005848 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 800479a:	2305      	movs	r3, #5
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800479e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a2:	2204      	movs	r2, #4
 80047a4:	2102      	movs	r1, #2
 80047a6:	4807      	ldr	r0, [pc, #28]	; (80047c4 <MX_HRTIM1_Init+0x400>)
 80047a8:	f004 fea6 	bl	80094f8 <HAL_HRTIM_WaveformCompareConfig>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <MX_HRTIM1_Init+0x3f2>
  {
    Error_Handler();
 80047b2:	f001 f849 	bl	8005848 <Error_Handler>
  }
  HAL_HRTIM_MspPostInit(&hhrtim1);
 80047b6:	4803      	ldr	r0, [pc, #12]	; (80047c4 <MX_HRTIM1_Init+0x400>)
 80047b8:	f000 f94a 	bl	8004a50 <HAL_HRTIM_MspPostInit>

}
 80047bc:	bf00      	nop
 80047be:	37d8      	adds	r7, #216	; 0xd8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	2000035c 	.word	0x2000035c

080047c8 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08e      	sub	sp, #56	; 0x38
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	609a      	str	r2, [r3, #8]
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 80047e0:	f107 0314 	add.w	r3, r7, #20
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	60da      	str	r2, [r3, #12]
  if(hrtimHandle->Instance==HRTIM1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a8e      	ldr	r2, [pc, #568]	; (8004a2c <HAL_HRTIM_MspInit+0x264>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	f040 8115 	bne.w	8004a24 <HAL_HRTIM_MspInit+0x25c>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80047fa:	4b8d      	ldr	r3, [pc, #564]	; (8004a30 <HAL_HRTIM_MspInit+0x268>)
 80047fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fe:	4a8c      	ldr	r2, [pc, #560]	; (8004a30 <HAL_HRTIM_MspInit+0x268>)
 8004800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004804:	6613      	str	r3, [r2, #96]	; 0x60
 8004806:	4b8a      	ldr	r3, [pc, #552]	; (8004a30 <HAL_HRTIM_MspInit+0x268>)
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004812:	4b87      	ldr	r3, [pc, #540]	; (8004a30 <HAL_HRTIM_MspInit+0x268>)
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	4a86      	ldr	r2, [pc, #536]	; (8004a30 <HAL_HRTIM_MspInit+0x268>)
 8004818:	f043 0302 	orr.w	r3, r3, #2
 800481c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800481e:	4b84      	ldr	r3, [pc, #528]	; (8004a30 <HAL_HRTIM_MspInit+0x268>)
 8004820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800482a:	4b81      	ldr	r3, [pc, #516]	; (8004a30 <HAL_HRTIM_MspInit+0x268>)
 800482c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482e:	4a80      	ldr	r2, [pc, #512]	; (8004a30 <HAL_HRTIM_MspInit+0x268>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004836:	4b7e      	ldr	r3, [pc, #504]	; (8004a30 <HAL_HRTIM_MspInit+0x268>)
 8004838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB10     ------> HRTIM1_FLT3
    PA12     ------> HRTIM1_FLT1
    */
    GPIO_InitStruct.Pin = OCP_A_Pin;
 8004842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004848:	2302      	movs	r3, #2
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484c:	2300      	movs	r3, #0
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004850:	2300      	movs	r3, #0
 8004852:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8004854:	230d      	movs	r3, #13
 8004856:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCP_A_GPIO_Port, &GPIO_InitStruct);
 8004858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800485c:	4619      	mov	r1, r3
 800485e:	4875      	ldr	r0, [pc, #468]	; (8004a34 <HAL_HRTIM_MspInit+0x26c>)
 8004860:	f003 fe26 	bl	80084b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AC_FAULT_Pin;
 8004864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486a:	2302      	movs	r3, #2
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004872:	2300      	movs	r3, #0
 8004874:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8004876:	230d      	movs	r3, #13
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AC_FAULT_GPIO_Port, &GPIO_InitStruct);
 800487a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800487e:	4619      	mov	r1, r3
 8004880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004884:	f003 fe14 	bl	80084b0 <HAL_GPIO_Init>

    /* HRTIM1 DMA Init */
    /* HRTIM1_A Init */
    hdma_hrtim1_a.Instance = DMA1_Channel1;
 8004888:	4b6b      	ldr	r3, [pc, #428]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 800488a:	4a6c      	ldr	r2, [pc, #432]	; (8004a3c <HAL_HRTIM_MspInit+0x274>)
 800488c:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_a.Init.Request = DMA_REQUEST_HRTIM1_A;
 800488e:	4b6a      	ldr	r3, [pc, #424]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 8004890:	2260      	movs	r2, #96	; 0x60
 8004892:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004894:	4b68      	ldr	r3, [pc, #416]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 8004896:	2210      	movs	r2, #16
 8004898:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800489a:	4b67      	ldr	r3, [pc, #412]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 800489c:	2200      	movs	r2, #0
 800489e:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_a.Init.MemInc = DMA_MINC_ENABLE;
 80048a0:	4b65      	ldr	r3, [pc, #404]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 80048a2:	2280      	movs	r2, #128	; 0x80
 80048a4:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80048a6:	4b64      	ldr	r3, [pc, #400]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 80048a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ac:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80048ae:	4b62      	ldr	r3, [pc, #392]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 80048b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b4:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_a.Init.Mode = DMA_CIRCULAR;
 80048b6:	4b60      	ldr	r3, [pc, #384]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 80048b8:	2220      	movs	r2, #32
 80048ba:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80048bc:	4b5e      	ldr	r3, [pc, #376]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 80048be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_a) != HAL_OK)
 80048c4:	485c      	ldr	r0, [pc, #368]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 80048c6:	f003 fa45 	bl	8007d54 <HAL_DMA_Init>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <HAL_HRTIM_MspInit+0x10c>
    {
      Error_Handler();
 80048d0:	f000 ffba 	bl	8005848 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80048d8:	2300      	movs	r3, #0
 80048da:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 80048dc:	2300      	movs	r3, #0
 80048de:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 80048e0:	2301      	movs	r3, #1
 80048e2:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 80048e4:	2301      	movs	r3, #1
 80048e6:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_a, &pSyncConfig) != HAL_OK)
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	4619      	mov	r1, r3
 80048ee:	4852      	ldr	r0, [pc, #328]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 80048f0:	f003 fca2 	bl	8008238 <HAL_DMAEx_ConfigMuxSync>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_HRTIM_MspInit+0x136>
    {
      Error_Handler();
 80048fa:	f000 ffa5 	bl	8005848 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerA,hdma_hrtim1_a);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a4d      	ldr	r2, [pc, #308]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 8004902:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8004906:	4a4c      	ldr	r2, [pc, #304]	; (8004a38 <HAL_HRTIM_MspInit+0x270>)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1_B Init */
    hdma_hrtim1_b.Instance = DMA1_Channel2;
 800490c:	4b4c      	ldr	r3, [pc, #304]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 800490e:	4a4d      	ldr	r2, [pc, #308]	; (8004a44 <HAL_HRTIM_MspInit+0x27c>)
 8004910:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_b.Init.Request = DMA_REQUEST_HRTIM1_B;
 8004912:	4b4b      	ldr	r3, [pc, #300]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 8004914:	2261      	movs	r2, #97	; 0x61
 8004916:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004918:	4b49      	ldr	r3, [pc, #292]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 800491a:	2210      	movs	r2, #16
 800491c:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800491e:	4b48      	ldr	r3, [pc, #288]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 8004920:	2200      	movs	r2, #0
 8004922:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_b.Init.MemInc = DMA_MINC_ENABLE;
 8004924:	4b46      	ldr	r3, [pc, #280]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 8004926:	2280      	movs	r2, #128	; 0x80
 8004928:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800492a:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 800492c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004930:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004932:	4b43      	ldr	r3, [pc, #268]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 8004934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004938:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_b.Init.Mode = DMA_CIRCULAR;
 800493a:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 800493c:	2220      	movs	r2, #32
 800493e:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8004940:	4b3f      	ldr	r3, [pc, #252]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 8004942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004946:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_b) != HAL_OK)
 8004948:	483d      	ldr	r0, [pc, #244]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 800494a:	f003 fa03 	bl	8007d54 <HAL_DMA_Init>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_HRTIM_MspInit+0x190>
    {
      Error_Handler();
 8004954:	f000 ff78 	bl	8005848 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800495c:	2300      	movs	r3, #0
 800495e:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8004960:	2300      	movs	r3, #0
 8004962:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8004964:	2301      	movs	r3, #1
 8004966:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8004968:	2301      	movs	r3, #1
 800496a:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_b, &pSyncConfig) != HAL_OK)
 800496c:	f107 0314 	add.w	r3, r7, #20
 8004970:	4619      	mov	r1, r3
 8004972:	4833      	ldr	r0, [pc, #204]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 8004974:	f003 fc60 	bl	8008238 <HAL_DMAEx_ConfigMuxSync>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_HRTIM_MspInit+0x1ba>
    {
      Error_Handler();
 800497e:	f000 ff63 	bl	8005848 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerB,hdma_hrtim1_b);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2e      	ldr	r2, [pc, #184]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 8004986:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800498a:	4a2d      	ldr	r2, [pc, #180]	; (8004a40 <HAL_HRTIM_MspInit+0x278>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1_C Init */
    hdma_hrtim1_c.Instance = DMA1_Channel3;
 8004990:	4b2d      	ldr	r3, [pc, #180]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 8004992:	4a2e      	ldr	r2, [pc, #184]	; (8004a4c <HAL_HRTIM_MspInit+0x284>)
 8004994:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_c.Init.Request = DMA_REQUEST_HRTIM1_C;
 8004996:	4b2c      	ldr	r3, [pc, #176]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 8004998:	2262      	movs	r2, #98	; 0x62
 800499a:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_c.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800499c:	4b2a      	ldr	r3, [pc, #168]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 800499e:	2210      	movs	r2, #16
 80049a0:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_c.Init.PeriphInc = DMA_PINC_DISABLE;
 80049a2:	4b29      	ldr	r3, [pc, #164]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_c.Init.MemInc = DMA_MINC_ENABLE;
 80049a8:	4b27      	ldr	r3, [pc, #156]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 80049aa:	2280      	movs	r2, #128	; 0x80
 80049ac:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_c.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80049ae:	4b26      	ldr	r3, [pc, #152]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 80049b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b4:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_c.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80049b6:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 80049b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049bc:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_c.Init.Mode = DMA_CIRCULAR;
 80049be:	4b22      	ldr	r3, [pc, #136]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 80049c0:	2220      	movs	r2, #32
 80049c2:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_c.Init.Priority = DMA_PRIORITY_HIGH;
 80049c4:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 80049c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_c) != HAL_OK)
 80049cc:	481e      	ldr	r0, [pc, #120]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 80049ce:	f003 f9c1 	bl	8007d54 <HAL_DMA_Init>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_HRTIM_MspInit+0x214>
    {
      Error_Handler();
 80049d8:	f000 ff36 	bl	8005848 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 80049ec:	2301      	movs	r3, #1
 80049ee:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_c, &pSyncConfig) != HAL_OK)
 80049f0:	f107 0314 	add.w	r3, r7, #20
 80049f4:	4619      	mov	r1, r3
 80049f6:	4814      	ldr	r0, [pc, #80]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 80049f8:	f003 fc1e 	bl	8008238 <HAL_DMAEx_ConfigMuxSync>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_HRTIM_MspInit+0x23e>
    {
      Error_Handler();
 8004a02:	f000 ff21 	bl	8005848 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerC,hdma_hrtim1_c);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a0f      	ldr	r2, [pc, #60]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 8004a0a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8004a0e:	4a0e      	ldr	r2, [pc, #56]	; (8004a48 <HAL_HRTIM_MspInit+0x280>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_FLT_IRQn, 0, 0);
 8004a14:	2200      	movs	r2, #0
 8004a16:	2100      	movs	r1, #0
 8004a18:	2049      	movs	r0, #73	; 0x49
 8004a1a:	f003 f966 	bl	8007cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_FLT_IRQn);
 8004a1e:	2049      	movs	r0, #73	; 0x49
 8004a20:	f003 f97d 	bl	8007d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8004a24:	bf00      	nop
 8004a26:	3738      	adds	r7, #56	; 0x38
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40016800 	.word	0x40016800
 8004a30:	40021000 	.word	0x40021000
 8004a34:	48000400 	.word	0x48000400
 8004a38:	200002fc 	.word	0x200002fc
 8004a3c:	40020008 	.word	0x40020008
 8004a40:	20000458 	.word	0x20000458
 8004a44:	4002001c 	.word	0x4002001c
 8004a48:	200004b8 	.word	0x200004b8
 8004a4c:	40020030 	.word	0x40020030

08004a50 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08a      	sub	sp, #40	; 0x28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a58:	f107 0314 	add.w	r3, r7, #20
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	60da      	str	r2, [r3, #12]
 8004a66:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <HAL_HRTIM_MspPostInit+0xa0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d13a      	bne.n	8004ae8 <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a72:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <HAL_HRTIM_MspPostInit+0xa4>)
 8004a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a76:	4a1f      	ldr	r2, [pc, #124]	; (8004af4 <HAL_HRTIM_MspPostInit+0xa4>)
 8004a78:	f043 0302 	orr.w	r3, r3, #2
 8004a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a7e:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <HAL_HRTIM_MspPostInit+0xa4>)
 8004a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a8a:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <HAL_HRTIM_MspPostInit+0xa4>)
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8e:	4a19      	ldr	r2, [pc, #100]	; (8004af4 <HAL_HRTIM_MspPostInit+0xa4>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a96:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <HAL_HRTIM_MspPostInit+0xa4>)
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM1 GPIO Configuration
    PB12     ------> HRTIM1_CHC1
    PA8     ------> HRTIM1_CHA1
    PA10     ------> HRTIM1_CHB1
    */
    GPIO_InitStruct.Pin = TC_HS_Pin;
 8004aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8004ab4:	230d      	movs	r3, #13
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TC_HS_GPIO_Port, &GPIO_InitStruct);
 8004ab8:	f107 0314 	add.w	r3, r7, #20
 8004abc:	4619      	mov	r1, r3
 8004abe:	480e      	ldr	r0, [pc, #56]	; (8004af8 <HAL_HRTIM_MspPostInit+0xa8>)
 8004ac0:	f003 fcf6 	bl	80084b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TA_HS_Pin|TB_HS_Pin;
 8004ac4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aca:	2302      	movs	r3, #2
 8004acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8004ad6:	230d      	movs	r3, #13
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ada:	f107 0314 	add.w	r3, r7, #20
 8004ade:	4619      	mov	r1, r3
 8004ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ae4:	f003 fce4 	bl	80084b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8004ae8:	bf00      	nop
 8004aea:	3728      	adds	r7, #40	; 0x28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40016800 	.word	0x40016800
 8004af4:	40021000 	.word	0x40021000
 8004af8:	48000400 	.word	0x48000400

08004afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afe:	b091      	sub	sp, #68	; 0x44
 8004b00:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b02:	f001 f95e 	bl	8005dc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b06:	f000 f97f 	bl	8004e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b0a:	f7ff fbfb 	bl	8004304 <MX_GPIO_Init>
  MX_DMA_Init();
 8004b0e:	f7ff fb7b 	bl	8004208 <MX_DMA_Init>
  MX_TIM2_Init();
 8004b12:	f000 ff9b 	bl	8005a4c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004b16:	f000 ffe5 	bl	8005ae4 <MX_TIM3_Init>
  MX_CORDIC_Init();
 8004b1a:	f7ff fb41 	bl	80041a0 <MX_CORDIC_Init>
  MX_ADC1_Init();
 8004b1e:	f7ff f903 	bl	8003d28 <MX_ADC1_Init>
  MX_ADC5_Init();
 8004b22:	f7ff fa21 	bl	8003f68 <MX_ADC5_Init>
  MX_RNG_Init();
 8004b26:	f000 fe93 	bl	8005850 <MX_RNG_Init>
  MX_TIM6_Init();
 8004b2a:	f001 f829 	bl	8005b80 <MX_TIM6_Init>
  MX_HRTIM1_Init();
 8004b2e:	f7ff fc49 	bl	80043c4 <MX_HRTIM1_Init>
  MX_TIM15_Init();
 8004b32:	f001 f85b 	bl	8005bec <MX_TIM15_Init>
  MX_FMAC_Init();
 8004b36:	f7ff fbb1 	bl	800429c <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  PWM_PERIOD_COUNTER = 10000;
 8004b3a:	4b86      	ldr	r3, [pc, #536]	; (8004d54 <main+0x258>)
 8004b3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b40:	601a      	str	r2, [r3, #0]

  DPC_ADC_Init(&DPC_ADC_Conf,G_VAC,B_VAC,G_IAC,B_IAC,G_VDC,B_VDC,G_IDC,B_IDC);
 8004b42:	eddf 3a85 	vldr	s7, [pc, #532]	; 8004d58 <main+0x25c>
 8004b46:	ed9f 3a85 	vldr	s6, [pc, #532]	; 8004d5c <main+0x260>
 8004b4a:	eddf 2a85 	vldr	s5, [pc, #532]	; 8004d60 <main+0x264>
 8004b4e:	ed9f 2a85 	vldr	s4, [pc, #532]	; 8004d64 <main+0x268>
 8004b52:	eddf 1a81 	vldr	s3, [pc, #516]	; 8004d58 <main+0x25c>
 8004b56:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8004d68 <main+0x26c>
 8004b5a:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8004d58 <main+0x25c>
 8004b5e:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8004d6c <main+0x270>
 8004b62:	4883      	ldr	r0, [pc, #524]	; (8004d70 <main+0x274>)
 8004b64:	f7fe ff66 	bl	8003a34 <DPC_ADC_Init>

  DPC_MISC_APPL_Timer_Init(APPL_Tim1, RefreshTime_DESIDERED);   //timer setting                                                                                                                                        /// Function used to Init the timers APP_TIM1 (htim2) used in the power application
 8004b68:	4e82      	ldr	r6, [pc, #520]	; (8004d74 <main+0x278>)
 8004b6a:	f242 7310 	movw	r3, #10000	; 0x2710
 8004b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b70:	466d      	mov	r5, sp
 8004b72:	f106 0410 	add.w	r4, r6, #16
 8004b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b82:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004b86:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004b8a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b8e:	f7fd fbcd 	bl	800232c <DPC_MISC_APPL_Timer_Init>
  DPC_MISC_APPL_Timer_Init(APPL_Tim2, RefreshTime_TO_DESIDERED);                                                                                                                                        /// Function used to Init the timers APP_TIM1 (htim3) used in the power application
 8004b92:	4e79      	ldr	r6, [pc, #484]	; (8004d78 <main+0x27c>)
 8004b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b98:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b9a:	466d      	mov	r5, sp
 8004b9c:	f106 0410 	add.w	r4, r6, #16
 8004ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004bb0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004bb4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004bb8:	f7fd fbb8 	bl	800232c <DPC_MISC_APPL_Timer_Init>
  DPC_MISC_APPL_Timer_Init(APPL_Tim3, RefreshTime2_DESIDERED);
 8004bbc:	4e6f      	ldr	r6, [pc, #444]	; (8004d7c <main+0x280>)
 8004bbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004bc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bc4:	466d      	mov	r5, sp
 8004bc6:	f106 0410 	add.w	r4, r6, #16
 8004bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bd6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004bda:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004bde:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004be2:	f7fd fba3 	bl	800232c <DPC_MISC_APPL_Timer_Init>

  DPC_MISC_Analog_Start();
 8004be6:	f000 fbf3 	bl	80053d0 <DPC_MISC_Analog_Start>

  DPC_PLL_Init(&PLL_CONVERTER,PLL_KP, PLL_KI, DPC_PLL_TS,PLL_PHI_2pi,PLL_DELTA_F,PLL_FF_Hz,DPC_PLL_SAT_EN,DPC_PLL_PIsat_up,DPC_PLL_PIsat_down);                                                         /// INIT PLL
 8004bea:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8004d80 <main+0x284>
 8004bee:	eddf 2a65 	vldr	s5, [pc, #404]	; 8004d84 <main+0x288>
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	2132      	movs	r1, #50	; 0x32
 8004bf6:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 8004bfa:	eddf 1a63 	vldr	s3, [pc, #396]	; 8004d88 <main+0x28c>
 8004bfe:	ed9f 1a63 	vldr	s2, [pc, #396]	; 8004d8c <main+0x290>
 8004c02:	eddf 0a63 	vldr	s1, [pc, #396]	; 8004d90 <main+0x294>
 8004c06:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8004c0a:	4862      	ldr	r0, [pc, #392]	; (8004d94 <main+0x298>)
 8004c0c:	f7fd fd56 	bl	80026bc <DPC_PLL_Init>
  DPC_PI_Init(&CDC.pPI_ID_CURR_CTRL,DPC_ID_KP,DPC_ID_KI,DPC_PI_ID_TS,DPC_PI_ID_sat_up,DPC_PI_ID_sat_down,DPC_PI_ID_SAT_EN,DPC_PI_ID_AW_EN,DPC_PI_ID_AWTG);                                              /// INIT PI CURRENT CTRL D
 8004c10:	eddf 2a61 	vldr	s5, [pc, #388]	; 8004d98 <main+0x29c>
 8004c14:	2201      	movs	r2, #1
 8004c16:	2101      	movs	r1, #1
 8004c18:	ed9f 2a60 	vldr	s4, [pc, #384]	; 8004d9c <main+0x2a0>
 8004c1c:	eddf 1a60 	vldr	s3, [pc, #384]	; 8004da0 <main+0x2a4>
 8004c20:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8004da4 <main+0x2a8>
 8004c24:	eddf 0a60 	vldr	s1, [pc, #384]	; 8004da8 <main+0x2ac>
 8004c28:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8004dac <main+0x2b0>
 8004c2c:	4860      	ldr	r0, [pc, #384]	; (8004db0 <main+0x2b4>)
 8004c2e:	f7fe f9e3 	bl	8002ff8 <DPC_PI_Init>
  DPC_PI_Init(&CDC.pPI_IQ_CURR_CTRL,DPC_IQ_KP,DPC_IQ_KI,DPC_PI_IQ_TS,DPC_PI_IQ_sat_up,DPC_PI_IQ_sat_down,DPC_PI_IQ_SAT_EN,DPC_PI_IQ_AW_EN,DPC_PI_IQ_AWTG);                                              /// INIT PI CURRENT CTRL Q
 8004c32:	eddf 2a59 	vldr	s5, [pc, #356]	; 8004d98 <main+0x29c>
 8004c36:	2201      	movs	r2, #1
 8004c38:	2101      	movs	r1, #1
 8004c3a:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8004db4 <main+0x2b8>
 8004c3e:	eddf 1a5e 	vldr	s3, [pc, #376]	; 8004db8 <main+0x2bc>
 8004c42:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8004da4 <main+0x2a8>
 8004c46:	eddf 0a58 	vldr	s1, [pc, #352]	; 8004da8 <main+0x2ac>
 8004c4a:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8004dac <main+0x2b0>
 8004c4e:	485b      	ldr	r0, [pc, #364]	; (8004dbc <main+0x2c0>)
 8004c50:	f7fe f9d2 	bl	8002ff8 <DPC_PI_Init>
  DPC_PI_Init(&pPI_VDC_CTRL,DPC_VCTRL_KP,DPC_VCTRL_KI,DPC_PI_VDC_TS,DPC_VCTRL_PI_sat_up,DPC_VCTRL_PI_sat_down,DPC_VCTRL_PI_SAT_EN,DPC_VCTRL_PI_AW_EN,DPC_VCTRL_PI_AWTG);                                /// INIT PI VOLTAGE CTRL
 8004c54:	eddf 2a5a 	vldr	s5, [pc, #360]	; 8004dc0 <main+0x2c4>
 8004c58:	2201      	movs	r2, #1
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	ed9f 2a40 	vldr	s4, [pc, #256]	; 8004d60 <main+0x264>
 8004c60:	eddf 1a58 	vldr	s3, [pc, #352]	; 8004dc4 <main+0x2c8>
 8004c64:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8004da4 <main+0x2a8>
 8004c68:	eddf 0a57 	vldr	s1, [pc, #348]	; 8004dc8 <main+0x2cc>
 8004c6c:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8004dcc <main+0x2d0>
 8004c70:	4857      	ldr	r0, [pc, #348]	; (8004dd0 <main+0x2d4>)
 8004c72:	f7fe f9c1 	bl	8002ff8 <DPC_PI_Init>
  DPC_LPCNTRL_CDC_Init(&CDC,DPC_PLL_OMEGAGRID,DPC_INDUCTOR,CDC_FF_Init,CDC_DEC_INIT,CDC_VDC_FF_INIT);
 8004c76:	2300      	movs	r3, #0
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	eddf 0a55 	vldr	s1, [pc, #340]	; 8004dd4 <main+0x2d8>
 8004c80:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8004dd8 <main+0x2dc>
 8004c84:	4855      	ldr	r0, [pc, #340]	; (8004ddc <main+0x2e0>)
 8004c86:	f7fd f814 	bl	8001cb2 <DPC_LPCNTRL_CDC_Init>
  DPC_LPCNTRL_BURST_Init(&BURST_CTRL,DPC_BURST_EN,RUN_BURST_VREF_V,RUN_BURST_VHIST,DPC_NO_LOAD_CURR,DPC_LOW_LOAD_CURR,DPC_BURST_DUTY_NL,DPC_BURST_DUTY_LL,&DPC_ADC_Conf);                               /// INIT BURST CONTROL
 8004c8a:	4b39      	ldr	r3, [pc, #228]	; (8004d70 <main+0x274>)
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	eef5 1a00 	vmov.f32	s3, #80	; 0x3e800000  0.250
 8004c92:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8004db8 <main+0x2bc>
 8004c96:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004c9a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8004c9e:	230a      	movs	r3, #10
 8004ca0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	484e      	ldr	r0, [pc, #312]	; (8004de0 <main+0x2e4>)
 8004ca8:	f7fc fcc3 	bl	8001632 <DPC_LPCNTRL_BURST_Init>
  DPC_LPCNTRL_BURST_Init(&STARTBURST_CTRL,DPC_STARTBURST_EN,STARTBURST_VREF_V,START_BURST_VHIST,DPC_START_NO_LOAD_CURR,DPC_START_LOW_LOAD_CURR,DPC_STARTBURST_DUTY,0,&DPC_ADC_Conf);                    /// INIT STARTBURST CONTROL
 8004cac:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <main+0x274>)
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	eddf 1a2b 	vldr	s3, [pc, #172]	; 8004d60 <main+0x264>
 8004cb4:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8004de4 <main+0x2e8>
 8004cb8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8004cbc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004cc0:	230a      	movs	r3, #10
 8004cc2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	4847      	ldr	r0, [pc, #284]	; (8004de8 <main+0x2ec>)
 8004cca:	f7fc fcb2 	bl	8001632 <DPC_LPCNTRL_BURST_Init>
  DPC_LPCNTRL_Inrush_Init(&INRUSH_CTRL,INRUSH_VREF_V,INRUSH_VLIM,DPC_NO_LOAD_CURR,DPC_INRS_EN,&DPC_ADC_Conf);
 8004cce:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <main+0x274>)
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8004cd8:	221e      	movs	r2, #30
 8004cda:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004cde:	4843      	ldr	r0, [pc, #268]	; (8004dec <main+0x2f0>)
 8004ce0:	f7fc ff89 	bl	8001bf6 <DPC_LPCNTRL_Inrush_Init>

  DPC_MISC_ACSource_Init(&AC_Source_Limit,DPC_VAC_PK_OV,DPC_VAC_PK_UV,DPC_VAC_PK_UVLO,DPC_VAC_MIN,DPC_IAC_MAX,&DPC_ADC_Conf);                                                                           /// INIT AC_Source
 8004ce4:	4b22      	ldr	r3, [pc, #136]	; (8004d70 <main+0x274>)
 8004ce6:	9302      	str	r3, [sp, #8]
 8004ce8:	231e      	movs	r3, #30
 8004cea:	9301      	str	r3, [sp, #4]
 8004cec:	2314      	movs	r3, #20
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	2346      	movs	r3, #70	; 0x46
 8004cf2:	222a      	movs	r2, #42	; 0x2a
 8004cf4:	f240 2135 	movw	r1, #565	; 0x235
 8004cf8:	483d      	ldr	r0, [pc, #244]	; (8004df0 <main+0x2f4>)
 8004cfa:	f7fd fa19 	bl	8002130 <DPC_MISC_ACSource_Init>
  DPC_MISC_DCLoad_Init(&DC_Load_Limit,DPC_VDC_OV,DPC_VCAP_LIM,DPC_NO_LOAD_CURR,DPC_LOW_LOAD_CURR,DPC_OVER_LOAD_CURR,&DPC_ADC_Conf);
 8004cfe:	4b1c      	ldr	r3, [pc, #112]	; (8004d70 <main+0x274>)
 8004d00:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8004d04:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004d08:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8004d0c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8004d10:	f240 21ee 	movw	r1, #750	; 0x2ee
 8004d14:	4837      	ldr	r0, [pc, #220]	; (8004df4 <main+0x2f8>)
 8004d16:	f7fd f933 	bl	8001f80 <DPC_MISC_DCLoad_Init>

  DPC_LPCNTRL_PFC_Init(&pPFC_CTRL,DPC_CTRL_INIT,DPC_PFC_VDC,&DPC_ADC_Conf);
 8004d1a:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <main+0x274>)
 8004d1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d20:	2102      	movs	r1, #2
 8004d22:	4835      	ldr	r0, [pc, #212]	; (8004df8 <main+0x2fc>)
 8004d24:	f7fc ffee 	bl	8001d04 <DPC_LPCNTRL_PFC_Init>
  DPC_PWM_Init(DPC_BURST_PWM_FREQ,PWM_FREQ,DPC_PWM_INIT,&tDPC_PWM, &DMA_HRTIM_SRC);
 8004d28:	4b34      	ldr	r3, [pc, #208]	; (8004dfc <main+0x300>)
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	4b34      	ldr	r3, [pc, #208]	; (8004e00 <main+0x304>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f649 4140 	movw	r1, #40000	; 0x9c40
 8004d34:	f644 6020 	movw	r0, #20000	; 0x4e20
 8004d38:	f7fe f8b6 	bl	8002ea8 <DPC_PWM_Init>
//  DPC_FSM_State_Set(DPC_FSM_WAIT);
//
  DPC_MISC_Appl_Timer_Start();
 8004d3c:	f7fd fb20 	bl	8002380 <DPC_MISC_Appl_Timer_Start>
  DPC_TO_Init();
 8004d40:	f7fe fa50 	bl	80031e4 <DPC_TO_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 8004d44:	2201      	movs	r2, #1
 8004d46:	2120      	movs	r1, #32
 8004d48:	482e      	ldr	r0, [pc, #184]	; (8004e04 <main+0x308>)
 8004d4a:	f003 fd33 	bl	80087b4 <HAL_GPIO_WritePin>
	  DPC_FSM_Application();
 8004d4e:	f7fb ff69 	bl	8000c24 <DPC_FSM_Application>
	  HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 8004d52:	e7f7      	b.n	8004d44 <main+0x248>
 8004d54:	2000b71c 	.word	0x2000b71c
 8004d58:	45000000 	.word	0x45000000
 8004d5c:	42cccccd 	.word	0x42cccccd
 8004d60:	00000000 	.word	0x00000000
 8004d64:	40f73b64 	.word	0x40f73b64
 8004d68:	422aae14 	.word	0x422aae14
 8004d6c:	4096a7f0 	.word	0x4096a7f0
 8004d70:	20001868 	.word	0x20001868
 8004d74:	2000b9c4 	.word	0x2000b9c4
 8004d78:	2000b92c 	.word	0x2000b92c
 8004d7c:	2000b978 	.word	0x2000b978
 8004d80:	c2480000 	.word	0xc2480000
 8004d84:	42480000 	.word	0x42480000
 8004d88:	bfc90fd8 	.word	0xbfc90fd8
 8004d8c:	3951b717 	.word	0x3951b717
 8004d90:	43fa0000 	.word	0x43fa0000
 8004d94:	2000b670 	.word	0x2000b670
 8004d98:	3c23d70a 	.word	0x3c23d70a
 8004d9c:	bf666666 	.word	0xbf666666
 8004da0:	3f666666 	.word	0x3f666666
 8004da4:	38d1b717 	.word	0x38d1b717
 8004da8:	4410d99a 	.word	0x4410d99a
 8004dac:	3e2eb1c4 	.word	0x3e2eb1c4
 8004db0:	200005e0 	.word	0x200005e0
 8004db4:	bdcccccd 	.word	0xbdcccccd
 8004db8:	3dcccccd 	.word	0x3dcccccd
 8004dbc:	20000628 	.word	0x20000628
 8004dc0:	3ca3d70a 	.word	0x3ca3d70a
 8004dc4:	3e6ffb34 	.word	0x3e6ffb34
 8004dc8:	3e99999a 	.word	0x3e99999a
 8004dcc:	39d1b717 	.word	0x39d1b717
 8004dd0:	2000b578 	.word	0x2000b578
 8004dd4:	3a6bedfa 	.word	0x3a6bedfa
 8004dd8:	439d0000 	.word	0x439d0000
 8004ddc:	20000598 	.word	0x20000598
 8004de0:	2000b4e8 	.word	0x2000b4e8
 8004de4:	3cf5c28f 	.word	0x3cf5c28f
 8004de8:	2000054c 	.word	0x2000054c
 8004dec:	2000b54c 	.word	0x2000b54c
 8004df0:	200006b0 	.word	0x200006b0
 8004df4:	2000b51c 	.word	0x2000b51c
 8004df8:	2000b7d4 	.word	0x2000b7d4
 8004dfc:	2000004c 	.word	0x2000004c
 8004e00:	20001818 	.word	0x20001818
 8004e04:	48000800 	.word	0x48000800

08004e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b0a8      	sub	sp, #160	; 0xa0
 8004e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004e12:	2238      	movs	r2, #56	; 0x38
 8004e14:	2100      	movs	r1, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f008 f981 	bl	800d11e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	60da      	str	r2, [r3, #12]
 8004e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	2254      	movs	r2, #84	; 0x54
 8004e30:	2100      	movs	r1, #0
 8004e32:	4618      	mov	r0, r3
 8004e34:	f008 f973 	bl	800d11e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004e38:	2000      	movs	r0, #0
 8004e3a:	f006 fa2f 	bl	800b29c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8004e3e:	2322      	movs	r3, #34	; 0x22
 8004e40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e46:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e48:	2340      	movs	r3, #64	; 0x40
 8004e4a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e52:	2302      	movs	r3, #2
 8004e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e58:	2302      	movs	r3, #2
 8004e5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004e5e:	2304      	movs	r3, #4
 8004e60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004e64:	2355      	movs	r3, #85	; 0x55
 8004e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004e70:	2302      	movs	r3, #2
 8004e72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004e76:	2302      	movs	r3, #2
 8004e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004e80:	4618      	mov	r0, r3
 8004e82:	f006 fabf 	bl	800b404 <HAL_RCC_OscConfig>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004e8c:	f000 fcdc 	bl	8005848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e90:	230f      	movs	r3, #15
 8004e92:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e94:	2303      	movs	r3, #3
 8004e96:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004ea4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004ea8:	2104      	movs	r1, #4
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f006 fdc2 	bl	800ba34 <HAL_RCC_ClockConfig>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004eb6:	f000 fcc7 	bl	8005848 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12
 8004eba:	f44f 33e0 	mov.w	r3, #114688	; 0x1c000
 8004ebe:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ec4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004ec8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8004eca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ece:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f006 ffb4 	bl	800be40 <HAL_RCCEx_PeriphCLKConfig>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8004ede:	f000 fcb3 	bl	8005848 <Error_Handler>
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	37a0      	adds	r7, #160	; 0xa0
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <DPC_FSM_WAIT_Func>:
* @brief  Executes converter's state machine WAIT STate Function
* @param  None
* @retval true/false
*/
bool DPC_FSM_WAIT_Func(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
  bool RetVal = false;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	71fb      	strb	r3, [r7, #7]

  DPC_Status_Plug_ACSource_TypeDef Status_Plug_ACSource;

  DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_Wait);
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4813      	ldr	r0, [pc, #76]	; (8004f48 <DPC_FSM_WAIT_Func+0x5c>)
 8004efc:	f7fd fa5a 	bl	80023b4 <DPC_MISC_BLED_Set>
  //Status_Plug_ACSource=DPC_MISC_AC_SOURCE_Plugged(AC_Source_Limit);
  Status_Plug_ACSource=OK_Plug_ACSource;///Check AC SOURCE state reading AC Voltage and curent
 8004f00:	2301      	movs	r3, #1
 8004f02:	71bb      	strb	r3, [r7, #6]
  if(Status_Plug_ACSource==OK_Plug_ACSource){
 8004f04:	79bb      	ldrb	r3, [r7, #6]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d113      	bne.n	8004f32 <DPC_FSM_WAIT_Func+0x46>
    if(DPC_TO_Set(TO_IDLE,TO_IDLE_Tick)==TO_OUT_OK){                                       ///TimeOut of Idle State of the Finite State Machine
 8004f0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f0e:	2004      	movs	r0, #4
 8004f10:	f7fe f988 	bl	8003224 <DPC_TO_Set>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d105      	bne.n	8004f26 <DPC_FSM_WAIT_Func+0x3a>
      RetVal = true;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	71fb      	strb	r3, [r7, #7]
      DPC_FSM_State_Set(DPC_FSM_IDLE);
 8004f1e:	2001      	movs	r0, #1
 8004f20:	f7fb ff1e 	bl	8000d60 <DPC_FSM_State_Set>
 8004f24:	e00a      	b.n	8004f3c <DPC_FSM_WAIT_Func+0x50>
    }
    else{
      RetVal = false;
 8004f26:	2300      	movs	r3, #0
 8004f28:	71fb      	strb	r3, [r7, #7]
      DPC_FSM_State_Set(DPC_FSM_STOP);
 8004f2a:	2005      	movs	r0, #5
 8004f2c:	f7fb ff18 	bl	8000d60 <DPC_FSM_State_Set>
 8004f30:	e004      	b.n	8004f3c <DPC_FSM_WAIT_Func+0x50>
    }
  }
  else{
      RetVal = true;
 8004f32:	2301      	movs	r3, #1
 8004f34:	71fb      	strb	r3, [r7, #7]
      DPC_FSM_State_Set(DPC_FSM_WAIT);
 8004f36:	2000      	movs	r0, #0
 8004f38:	f7fb ff12 	bl	8000d60 <DPC_FSM_State_Set>
  }
  return RetVal;
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	2000b8e0 	.word	0x2000b8e0

08004f4c <DPC_FSM_IDLE_Func>:
* @brief  Executes converter's state machine IDLE STate Function
* @param  None
* @retval true/false
*/
bool DPC_FSM_IDLE_Func(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
  bool RetVal = true;
 8004f52:	2301      	movs	r3, #1
 8004f54:	71fb      	strb	r3, [r7, #7]

  DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_Idle);                           ///DPC Bicolor LED SET to FSM_Idle
 8004f56:	2200      	movs	r2, #0
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4815      	ldr	r0, [pc, #84]	; (8004fb0 <DPC_FSM_IDLE_Func+0x64>)
 8004f5c:	f7fd fa2a 	bl	80023b4 <DPC_MISC_BLED_Set>

  if(DPC_TO_Check(TO_IDLE)==TO_OUT_TOOK || DPC_TO_Check(TO_IDLE)==TO_OUT_ERR){
 8004f60:	2004      	movs	r0, #4
 8004f62:	f7fe f985 	bl	8003270 <DPC_TO_Check>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d005      	beq.n	8004f78 <DPC_FSM_IDLE_Func+0x2c>
 8004f6c:	2004      	movs	r0, #4
 8004f6e:	f7fe f97f 	bl	8003270 <DPC_TO_Check>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d116      	bne.n	8004fa6 <DPC_FSM_IDLE_Func+0x5a>

//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);
    if(Status_Source==OK_SOURCE){
 8004f78:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <DPC_FSM_IDLE_Func+0x68>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d112      	bne.n	8004fa6 <DPC_FSM_IDLE_Func+0x5a>
      if(Status_Load==NO_LOAD){
 8004f80:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <DPC_FSM_IDLE_Func+0x6c>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d105      	bne.n	8004f94 <DPC_FSM_IDLE_Func+0x48>
        DPC_PWM_OutDisable();
 8004f88:	f7fd ff6a 	bl	8002e60 <DPC_PWM_OutDisable>
        //      if(HAL_GPIO_ReadPin(USR_BTN_GPIO_Port, USR_BTN_Pin)){
        DPC_FSM_State_Set(DPC_FSM_INIT);
 8004f8c:	2002      	movs	r0, #2
 8004f8e:	f7fb fee7 	bl	8000d60 <DPC_FSM_State_Set>
 8004f92:	e008      	b.n	8004fa6 <DPC_FSM_IDLE_Func+0x5a>
        //      }
      }

      else{
        RetVal = false;
 8004f94:	2300      	movs	r3, #0
 8004f96:	71fb      	strb	r3, [r7, #7]
        DPC_FLT_Faulterror_Set(ERROR_IDLE);
 8004f98:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004f9c:	f7fc f838 	bl	8001010 <DPC_FLT_Faulterror_Set>
        DPC_FSM_State_Set(DPC_FSM_STOP);
 8004fa0:	2005      	movs	r0, #5
 8004fa2:	f7fb fedd 	bl	8000d60 <DPC_FSM_State_Set>
      }
    }
  }

  return RetVal;
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	2000b8e0 	.word	0x2000b8e0
 8004fb4:	20000672 	.word	0x20000672
 8004fb8:	2000b7bc 	.word	0x2000b7bc

08004fbc <DPC_FSM_INIT_Func>:
* @brief  Executes converter's state machine INIT STate Function
* @param  None
* @retval true/false
*/
bool DPC_FSM_INIT_Func(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
  bool RetVal = true;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	71fb      	strb	r3, [r7, #7]

  //DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_StartUp_inrush);                                                             ///DPC Bicolor LED SET to FSM_StartUp_inrush
  DPC_PWM_OutDisable();
 8004fc6:	f7fd ff4b 	bl	8002e60 <DPC_PWM_OutDisable>
  if (!Relay_State && Status_Source==OK_SOURCE){
 8004fca:	4b44      	ldr	r3, [pc, #272]	; (80050dc <DPC_FSM_INIT_Func+0x120>)
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d122      	bne.n	8005018 <DPC_FSM_INIT_Func+0x5c>
 8004fd2:	4b43      	ldr	r3, [pc, #268]	; (80050e0 <DPC_FSM_INIT_Func+0x124>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d11e      	bne.n	8005018 <DPC_FSM_INIT_Func+0x5c>
	  TO_State=DPC_TO_Check(0);
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f7fe f948 	bl	8003270 <DPC_TO_Check>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4b3f      	ldr	r3, [pc, #252]	; (80050e4 <DPC_FSM_INIT_Func+0x128>)
 8004fe6:	701a      	strb	r2, [r3, #0]
	  if (TO_State==TO_OUT_TOOK){
 8004fe8:	4b3e      	ldr	r3, [pc, #248]	; (80050e4 <DPC_FSM_INIT_Func+0x128>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d109      	bne.n	8005004 <DPC_FSM_INIT_Func+0x48>
		  Relay_State = 1;
 8004ff0:	4b3a      	ldr	r3, [pc, #232]	; (80050dc <DPC_FSM_INIT_Func+0x120>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_SET);
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	2180      	movs	r1, #128	; 0x80
 8004ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ffe:	f003 fbd9 	bl	80087b4 <HAL_GPIO_WritePin>
	  if (TO_State==TO_OUT_TOOK){
 8005002:	e064      	b.n	80050ce <DPC_FSM_INIT_Func+0x112>
	  }
	  else if (TO_State==TO_OUT_OK){
 8005004:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <DPC_FSM_INIT_Func+0x128>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d060      	beq.n	80050ce <DPC_FSM_INIT_Func+0x112>

	  }
	  else{
		  DPC_TO_Set(0, RELAY_TIMEOUT);
 800500c:	f241 3188 	movw	r1, #5000	; 0x1388
 8005010:	2000      	movs	r0, #0
 8005012:	f7fe f907 	bl	8003224 <DPC_TO_Set>
	  if (TO_State==TO_OUT_TOOK){
 8005016:	e05a      	b.n	80050ce <DPC_FSM_INIT_Func+0x112>
	  }
  }
  else if(Status_Source==OK_SOURCE && Relay_State){
 8005018:	4b31      	ldr	r3, [pc, #196]	; (80050e0 <DPC_FSM_INIT_Func+0x124>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b04      	cmp	r3, #4
 800501e:	d157      	bne.n	80050d0 <DPC_FSM_INIT_Func+0x114>
 8005020:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <DPC_FSM_INIT_Func+0x120>)
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d053      	beq.n	80050d0 <DPC_FSM_INIT_Func+0x114>


//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_ON);
//    DPC_MISC_RELAY_Cntl(RELAY_SER_1, RELAY_OFF);                                                                            ///Insert Inrush current resistor opening the Inrush relays

    if (INRUSH_State==INRUSH_Disable){
 8005028:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <DPC_FSM_INIT_Func+0x12c>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b05      	cmp	r3, #5
 800502e:	d106      	bne.n	800503e <DPC_FSM_INIT_Func+0x82>
      PC_State=FSM_StartUp_burst;
 8005030:	4b2e      	ldr	r3, [pc, #184]	; (80050ec <DPC_FSM_INIT_Func+0x130>)
 8005032:	2202      	movs	r2, #2
 8005034:	701a      	strb	r2, [r3, #0]
      DPC_FSM_State_Set(DPC_FSM_START);
 8005036:	2003      	movs	r0, #3
 8005038:	f7fb fe92 	bl	8000d60 <DPC_FSM_State_Set>
 800503c:	e048      	b.n	80050d0 <DPC_FSM_INIT_Func+0x114>
//      DPC_MISC_RELAY_Cntl(RELAY_SER_1, RELAY_ON);                                                                           /// Bypass Resistors of the inrush current limiter
    }
    else {
      if(INRUSH_State==INRUSH_Start){
 800503e:	4b2a      	ldr	r3, [pc, #168]	; (80050e8 <DPC_FSM_INIT_Func+0x12c>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d107      	bne.n	8005056 <DPC_FSM_INIT_Func+0x9a>
        //future check here
        INRUSH_State=INRUSH_Progress;
 8005046:	4b28      	ldr	r3, [pc, #160]	; (80050e8 <DPC_FSM_INIT_Func+0x12c>)
 8005048:	2203      	movs	r2, #3
 800504a:	701a      	strb	r2, [r3, #0]
        DPC_FLT_Error_Reset(ERROR_PFC_UVLO);
 800504c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005050:	f7fb fff0 	bl	8001034 <DPC_FLT_Error_Reset>
 8005054:	e03c      	b.n	80050d0 <DPC_FSM_INIT_Func+0x114>
      }
      else if(INRUSH_State==INRUSH_Progress){
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <DPC_FSM_INIT_Func+0x12c>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b03      	cmp	r3, #3
 800505c:	d110      	bne.n	8005080 <DPC_FSM_INIT_Func+0xc4>
        //!!!
    	//INRUSH_State=DPC_LPCNTRL_Inrush_Check((uint32_t*)Read_Volt_DC(),(uint32_t*)Read_Curr_DC(),&INRUSH_CTRL);            ///Inrush Check for the FSM
    	INRUSH_State=DPC_LPCNTRL_Inrush_Check((uint32_t*)Read_Volt_DC(),&CURRENT_ADC_AC_IN_PHY,&INRUSH_CTRL);
 800505e:	f7fb fdd7 	bl	8000c10 <Read_Volt_DC>
 8005062:	4603      	mov	r3, r0
 8005064:	4a22      	ldr	r2, [pc, #136]	; (80050f0 <DPC_FSM_INIT_Func+0x134>)
 8005066:	4923      	ldr	r1, [pc, #140]	; (80050f4 <DPC_FSM_INIT_Func+0x138>)
 8005068:	4618      	mov	r0, r3
 800506a:	f7fc fd0e 	bl	8001a8a <DPC_LPCNTRL_Inrush_Check>
 800506e:	4603      	mov	r3, r0
 8005070:	461a      	mov	r2, r3
 8005072:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <DPC_FSM_INIT_Func+0x12c>)
 8005074:	701a      	strb	r2, [r3, #0]
    	DPC_FLT_Error_Reset(ERROR_PFC_UVLO);
 8005076:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800507a:	f7fb ffdb 	bl	8001034 <DPC_FLT_Error_Reset>
 800507e:	e027      	b.n	80050d0 <DPC_FSM_INIT_Func+0x114>
      }
      else if(INRUSH_State==INRUSH_Complete){
 8005080:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <DPC_FSM_INIT_Func+0x12c>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d10d      	bne.n	80050a4 <DPC_FSM_INIT_Func+0xe8>
        PC_State=FSM_StartUp_burst;
 8005088:	4b18      	ldr	r3, [pc, #96]	; (80050ec <DPC_FSM_INIT_Func+0x130>)
 800508a:	2202      	movs	r2, #2
 800508c:	701a      	strb	r2, [r3, #0]
        //DPC_MISC_RELAY_Cntl(RELAY_SER_1, RELAY_ON);                                                                         /// Bypass Resistors of the inrush current limiter
        DPC_FLT_Error_Reset(ERROR_PFC_UVLO);
 800508e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005092:	f7fb ffcf 	bl	8001034 <DPC_FLT_Error_Reset>
        DPC_FLT_Error_Reset(FAULT_PLL_OR);
 8005096:	2080      	movs	r0, #128	; 0x80
 8005098:	f7fb ffcc 	bl	8001034 <DPC_FLT_Error_Reset>
        DPC_FSM_State_Set(DPC_FSM_START);
 800509c:	2003      	movs	r0, #3
 800509e:	f7fb fe5f 	bl	8000d60 <DPC_FSM_State_Set>
 80050a2:	e015      	b.n	80050d0 <DPC_FSM_INIT_Func+0x114>
      }
      else if(INRUSH_State==INRUSH_Error){
 80050a4:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <DPC_FSM_INIT_Func+0x12c>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d105      	bne.n	80050b8 <DPC_FSM_INIT_Func+0xfc>

        RetVal = false;
 80050ac:	2300      	movs	r3, #0
 80050ae:	71fb      	strb	r3, [r7, #7]
        //      DPC_FLT_Faulterror_Set(ERROR_START_INRS);
        DPC_FLT_Faulterror_Set(FAULT_INR);
 80050b0:	2020      	movs	r0, #32
 80050b2:	f7fb ffad 	bl	8001010 <DPC_FLT_Faulterror_Set>
 80050b6:	e00b      	b.n	80050d0 <DPC_FSM_INIT_Func+0x114>
      }
      else if(INRUSH_State==INRUSH_Disable){
 80050b8:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <DPC_FSM_INIT_Func+0x12c>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b05      	cmp	r3, #5
 80050be:	d107      	bne.n	80050d0 <DPC_FSM_INIT_Func+0x114>
        PC_State=FSM_StartUp_burst;
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <DPC_FSM_INIT_Func+0x130>)
 80050c2:	2202      	movs	r2, #2
 80050c4:	701a      	strb	r2, [r3, #0]
        DPC_FSM_State_Set(DPC_FSM_START);
 80050c6:	2003      	movs	r0, #3
 80050c8:	f7fb fe4a 	bl	8000d60 <DPC_FSM_State_Set>
 80050cc:	e000      	b.n	80050d0 <DPC_FSM_INIT_Func+0x114>
	  if (TO_State==TO_OUT_TOOK){
 80050ce:	bf00      	nop
        //DPC_MISC_RELAY_Cntl(RELAY_SER_1, RELAY_ON);                                                                         /// Bypass Resistors of the inrush current limiter
      }
    }
  }
return RetVal;
 80050d0:	79fb      	ldrb	r3, [r7, #7]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	2000b5fc 	.word	0x2000b5fc
 80050e0:	20000672 	.word	0x20000672
 80050e4:	2000b570 	.word	0x2000b570
 80050e8:	2000b52e 	.word	0x2000b52e
 80050ec:	20000580 	.word	0x20000580
 80050f0:	2000b54c 	.word	0x2000b54c
 80050f4:	20000518 	.word	0x20000518

080050f8 <DPC_FSM_START_Func>:
* @brief  Executes converter's state machine START STate Function
* @param  None
* @retval true/false
*/
bool DPC_FSM_START_Func(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
  bool RetVal = true;
 80050fe:	2301      	movs	r3, #1
 8005100:	71fb      	strb	r3, [r7, #7]

  DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_StartUp_burst);                                                      ///DPC Bicolor LED SET to FSM_StartUp_burst
 8005102:	2205      	movs	r2, #5
 8005104:	2100      	movs	r1, #0
 8005106:	482c      	ldr	r0, [pc, #176]	; (80051b8 <DPC_FSM_START_Func+0xc0>)
 8005108:	f7fd f954 	bl	80023b4 <DPC_MISC_BLED_Set>
//  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET);                                                              ///

  if(Status_Source==NO_SOURCE){
 800510c:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <DPC_FSM_START_Func+0xc4>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d106      	bne.n	8005122 <DPC_FSM_START_Func+0x2a>
	  DPC_FLT_Faulterror_Set(ERROR_AC_OFF);
 8005114:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005118:	f7fb ff7a 	bl	8001010 <DPC_FLT_Faulterror_Set>
	  DPC_FSM_State_Set(DPC_FSM_ERROR);
 800511c:	2006      	movs	r0, #6
 800511e:	f7fb fe1f 	bl	8000d60 <DPC_FSM_State_Set>
  }
  if(BURST_State==BURST_Start){
 8005122:	4b27      	ldr	r3, [pc, #156]	; (80051c0 <DPC_FSM_START_Func+0xc8>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d107      	bne.n	800513a <DPC_FSM_START_Func+0x42>
    //future check here
    BURST_State=BURST_Progress;
 800512a:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <DPC_FSM_START_Func+0xc8>)
 800512c:	2203      	movs	r2, #3
 800512e:	701a      	strb	r2, [r3, #0]
    DPC_FLT_Error_Reset(ERROR_PFC_UVLO);
 8005130:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005134:	f7fb ff7e 	bl	8001034 <DPC_FLT_Error_Reset>
 8005138:	e039      	b.n	80051ae <DPC_FSM_START_Func+0xb6>
  }
  else if(BURST_State==BURST_Progress){
 800513a:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <DPC_FSM_START_Func+0xc8>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2b03      	cmp	r3, #3
 8005140:	d110      	bne.n	8005164 <DPC_FSM_START_Func+0x6c>
    //BURST_State=DPC_LPCNTRL_Burst_Check((uint32_t*)Read_Volt_DC(),(uint32_t*)Read_Curr_DC(),&STARTBURST_CTRL);        ///Burst Check for the FSM
	  BURST_State=DPC_LPCNTRL_Burst_Check((uint32_t*)Read_Volt_DC(),&CURRENT_ADC_AC_IN_PHY,&STARTBURST_CTRL);
 8005142:	f7fb fd65 	bl	8000c10 <Read_Volt_DC>
 8005146:	4603      	mov	r3, r0
 8005148:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <DPC_FSM_START_Func+0xcc>)
 800514a:	491f      	ldr	r1, [pc, #124]	; (80051c8 <DPC_FSM_START_Func+0xd0>)
 800514c:	4618      	mov	r0, r3
 800514e:	f7fc fae8 	bl	8001722 <DPC_LPCNTRL_Burst_Check>
 8005152:	4603      	mov	r3, r0
 8005154:	461a      	mov	r2, r3
 8005156:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <DPC_FSM_START_Func+0xc8>)
 8005158:	701a      	strb	r2, [r3, #0]

	  DPC_FLT_Error_Reset(ERROR_PFC_UVLO);
 800515a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800515e:	f7fb ff69 	bl	8001034 <DPC_FLT_Error_Reset>
 8005162:	e024      	b.n	80051ae <DPC_FSM_START_Func+0xb6>
  }
  else if(BURST_State==BURST_Complete){
 8005164:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <DPC_FSM_START_Func+0xc8>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d10c      	bne.n	8005186 <DPC_FSM_START_Func+0x8e>
    DPC_FLT_Error_Reset(ERROR_PFC_UVLO);
 800516c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005170:	f7fb ff60 	bl	8001034 <DPC_FLT_Error_Reset>
    PC_State=FSM_Run;
 8005174:	4b15      	ldr	r3, [pc, #84]	; (80051cc <DPC_FSM_START_Func+0xd4>)
 8005176:	2203      	movs	r2, #3
 8005178:	701a      	strb	r2, [r3, #0]
    DPC_FSM_State_Set(DPC_FSM_RUN);
 800517a:	2004      	movs	r0, #4
 800517c:	f7fb fdf0 	bl	8000d60 <DPC_FSM_State_Set>
    DPC_PWM_OutDisable();
 8005180:	f7fd fe6e 	bl	8002e60 <DPC_PWM_OutDisable>
 8005184:	e013      	b.n	80051ae <DPC_FSM_START_Func+0xb6>
  }
  else if(BURST_State==BURST_Error){
 8005186:	4b0e      	ldr	r3, [pc, #56]	; (80051c0 <DPC_FSM_START_Func+0xc8>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d108      	bne.n	80051a0 <DPC_FSM_START_Func+0xa8>
    RetVal = false;
 800518e:	2300      	movs	r3, #0
 8005190:	71fb      	strb	r3, [r7, #7]
    DPC_FSM_State_Set(DPC_FSM_STOP);
 8005192:	2005      	movs	r0, #5
 8005194:	f7fb fde4 	bl	8000d60 <DPC_FSM_State_Set>
    //      DPC_FLT_Faulterror_Set(ERROR_BRS);
    DPC_FLT_Faulterror_Set(FAULT_BRS);
 8005198:	2040      	movs	r0, #64	; 0x40
 800519a:	f7fb ff39 	bl	8001010 <DPC_FLT_Faulterror_Set>
 800519e:	e006      	b.n	80051ae <DPC_FSM_START_Func+0xb6>
  }
  else if(BURST_State==BURST_Disable){
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <DPC_FSM_START_Func+0xc8>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b05      	cmp	r3, #5
 80051a6:	d102      	bne.n	80051ae <DPC_FSM_START_Func+0xb6>
    DPC_FSM_State_Set(DPC_FSM_RUN);
 80051a8:	2004      	movs	r0, #4
 80051aa:	f7fb fdd9 	bl	8000d60 <DPC_FSM_State_Set>
  }
  return RetVal;
 80051ae:	79fb      	ldrb	r3, [r7, #7]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	2000b8e0 	.word	0x2000b8e0
 80051bc:	20000672 	.word	0x20000672
 80051c0:	200017f4 	.word	0x200017f4
 80051c4:	2000054c 	.word	0x2000054c
 80051c8:	20000518 	.word	0x20000518
 80051cc:	20000580 	.word	0x20000580

080051d0 <DPC_FSM_RUN_Func>:
* @brief  Executes converter's state machine RUN STate Function
* @param  None
* @retval true/false
*/
bool DPC_FSM_RUN_Func(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
  bool RetVal = true;
 80051d6:	2301      	movs	r3, #1
 80051d8:	71fb      	strb	r3, [r7, #7]

  if(DPC_FLT_Faulterror_Check()){
 80051da:	f7fb fdd1 	bl	8000d80 <DPC_FLT_Faulterror_Check>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <DPC_FSM_RUN_Func+0x20>
      RetVal = false;
 80051e4:	2300      	movs	r3, #0
 80051e6:	71fb      	strb	r3, [r7, #7]
      DPC_FSM_State_Set(DPC_FSM_STOP);
 80051e8:	2005      	movs	r0, #5
 80051ea:	f7fb fdb9 	bl	8000d60 <DPC_FSM_State_Set>
 80051ee:	e032      	b.n	8005256 <DPC_FSM_RUN_Func+0x86>
  }
  else{

  //WIP - Insert Check Grid (PLL MUST BE SYNCHRONIZED)
  DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_Run);                                  ///DPC Bicolor LED SET to FSM_Run
 80051f0:	2204      	movs	r2, #4
 80051f2:	2100      	movs	r1, #0
 80051f4:	481a      	ldr	r0, [pc, #104]	; (8005260 <DPC_FSM_RUN_Func+0x90>)
 80051f6:	f7fd f8dd 	bl	80023b4 <DPC_MISC_BLED_Set>
  if(Status_Source==OK_SOURCE  && PLL_Status==PLL_SYNC){
 80051fa:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <DPC_FSM_RUN_Func+0x94>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d121      	bne.n	8005246 <DPC_FSM_RUN_Func+0x76>
 8005202:	4b19      	ldr	r3, [pc, #100]	; (8005268 <DPC_FSM_RUN_Func+0x98>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d11d      	bne.n	8005246 <DPC_FSM_RUN_Func+0x76>
    if(Status_Load==NO_LOAD){
 800520a:	4b18      	ldr	r3, [pc, #96]	; (800526c <DPC_FSM_RUN_Func+0x9c>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <DPC_FSM_RUN_Func+0x50>
      BURST_CTRL.BURST_Status=BURST_Run;
 8005212:	4b17      	ldr	r3, [pc, #92]	; (8005270 <DPC_FSM_RUN_Func+0xa0>)
 8005214:	2206      	movs	r2, #6
 8005216:	779a      	strb	r2, [r3, #30]
      FSM_Run_State=Run_Burst_Mode;
 8005218:	4b16      	ldr	r3, [pc, #88]	; (8005274 <DPC_FSM_RUN_Func+0xa4>)
 800521a:	2201      	movs	r2, #1
 800521c:	701a      	strb	r2, [r3, #0]
    if(Status_Load==NO_LOAD){
 800521e:	e019      	b.n	8005254 <DPC_FSM_RUN_Func+0x84>
    }
    else if(Status_Load==LOW_LOAD){
 8005220:	4b12      	ldr	r3, [pc, #72]	; (800526c <DPC_FSM_RUN_Func+0x9c>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d106      	bne.n	8005236 <DPC_FSM_RUN_Func+0x66>
      BURST_CTRL.BURST_Status=BURST_Run;
 8005228:	4b11      	ldr	r3, [pc, #68]	; (8005270 <DPC_FSM_RUN_Func+0xa0>)
 800522a:	2206      	movs	r2, #6
 800522c:	779a      	strb	r2, [r3, #30]
      FSM_Run_State=Run_Burst_Mode;
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <DPC_FSM_RUN_Func+0xa4>)
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
    if(Status_Load==NO_LOAD){
 8005234:	e00e      	b.n	8005254 <DPC_FSM_RUN_Func+0x84>
    }
    else if(Status_Load==ON_LOAD){
 8005236:	4b0d      	ldr	r3, [pc, #52]	; (800526c <DPC_FSM_RUN_Func+0x9c>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d10a      	bne.n	8005254 <DPC_FSM_RUN_Func+0x84>
      FSM_Run_State=Run_PFC_Mode;
 800523e:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <DPC_FSM_RUN_Func+0xa4>)
 8005240:	2202      	movs	r2, #2
 8005242:	701a      	strb	r2, [r3, #0]
    if(Status_Load==NO_LOAD){
 8005244:	e006      	b.n	8005254 <DPC_FSM_RUN_Func+0x84>
//      DPC_FLT_Faulterror_Set(ERROR_PFC_RUN);
//      DPC_FSM_State_Set(DPC_FSM_STOP);
//    }
  }
  else{
    RetVal = false;
 8005246:	2300      	movs	r3, #0
 8005248:	71fb      	strb	r3, [r7, #7]
    DPC_FLT_Faulterror_Set(ERROR_PFC);
 800524a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800524e:	f7fb fedf 	bl	8001010 <DPC_FLT_Faulterror_Set>
 8005252:	e000      	b.n	8005256 <DPC_FSM_RUN_Func+0x86>
    if(Status_Load==NO_LOAD){
 8005254:	bf00      	nop
  }
  }
  return RetVal;
 8005256:	79fb      	ldrb	r3, [r7, #7]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	2000b8e0 	.word	0x2000b8e0
 8005264:	20000672 	.word	0x20000672
 8005268:	200006ac 	.word	0x200006ac
 800526c:	2000b7bc 	.word	0x2000b7bc
 8005270:	2000b4e8 	.word	0x2000b4e8
 8005274:	2000b5e8 	.word	0x2000b5e8

08005278 <DPC_FSM_STOP_Func>:
  * @brief  Executes converter's state machine STOP STate Function
  * @param  None
  * @retval true/false
  */
bool DPC_FSM_STOP_Func(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
bool RetVal = true;
 800527e:	2301      	movs	r3, #1
 8005280:	71fb      	strb	r3, [r7, #7]

  //DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_Stop);                                 ///DPC Bicolor LED SET to FSM_Stop
  DPC_FSM_State_Set(DPC_FSM_ERROR);
 8005282:	2006      	movs	r0, #6
 8005284:	f7fb fd6c 	bl	8000d60 <DPC_FSM_State_Set>

 return RetVal;
 8005288:	79fb      	ldrb	r3, [r7, #7]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <DPC_FSM_ERROR_Func>:
* @brief  Executes converter's state machine ERR/FAUL STate Function
* @param  None
* @retval true/false
*/
bool DPC_FSM_ERROR_Func(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
  bool RetVal = true;
 800529a:	2301      	movs	r3, #1
 800529c:	71fb      	strb	r3, [r7, #7]
  DPC_FAULTERROR_LIST_TypeDef eError;

  DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_Error);                                ///DPC Bicolor LED SET to FSM_Error
 800529e:	2203      	movs	r2, #3
 80052a0:	2100      	movs	r1, #0
 80052a2:	483e      	ldr	r0, [pc, #248]	; (800539c <DPC_FSM_ERROR_Func+0x108>)
 80052a4:	f7fd f886 	bl	80023b4 <DPC_MISC_BLED_Set>
  eError = DPC_FLT_Faulterror_Check();
 80052a8:	f7fb fd6a 	bl	8000d80 <DPC_FLT_Faulterror_Check>
 80052ac:	6038      	str	r0, [r7, #0]

  if(eError & FAULT_MASK){
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00d      	beq.n	80052d2 <DPC_FSM_ERROR_Func+0x3e>
    DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 80052b6:	f7fd fdd3 	bl	8002e60 <DPC_PWM_OutDisable>
    //DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
    HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 80052ba:	2200      	movs	r2, #0
 80052bc:	2180      	movs	r1, #128	; 0x80
 80052be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052c2:	f003 fa77 	bl	80087b4 <HAL_GPIO_WritePin>
    //Fault detected
    RetVal = false;
 80052c6:	2300      	movs	r3, #0
 80052c8:	71fb      	strb	r3, [r7, #7]
    DPC_FSM_State_Set(DPC_FSM_FAULT);
 80052ca:	2007      	movs	r0, #7
 80052cc:	f7fb fd48 	bl	8000d60 <DPC_FSM_State_Set>
 80052d0:	e05e      	b.n	8005390 <DPC_FSM_ERROR_Func+0xfc>
  }
  else if(eError & ERROR_MASK){
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	041b      	lsls	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d059      	beq.n	8005390 <DPC_FSM_ERROR_Func+0xfc>
    //put here the error recovery
    if(DPC_FLT_Faulterror_Check()==ERROR_PFC_UVLO)
 80052dc:	f7fb fd50 	bl	8000d80 <DPC_FLT_Faulterror_Check>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052e6:	d110      	bne.n	800530a <DPC_FSM_ERROR_Func+0x76>
    {
      if(PC_State==FSM_Run){
 80052e8:	4b2d      	ldr	r3, [pc, #180]	; (80053a0 <DPC_FSM_ERROR_Func+0x10c>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d14f      	bne.n	8005390 <DPC_FSM_ERROR_Func+0xfc>
        DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 80052f0:	f7fd fdb6 	bl	8002e60 <DPC_PWM_OutDisable>
//        DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
        HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 80052f4:	2200      	movs	r2, #0
 80052f6:	2180      	movs	r1, #128	; 0x80
 80052f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052fc:	f003 fa5a 	bl	80087b4 <HAL_GPIO_WritePin>
        DPC_FLT_Faulterror_Set(FAULT_PFC_UVLO);
 8005300:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005304:	f7fb fe84 	bl	8001010 <DPC_FLT_Faulterror_Set>
 8005308:	e042      	b.n	8005390 <DPC_FSM_ERROR_Func+0xfc>
      }
    }
    else if(DPC_FLT_Faulterror_Check()==ERROR_PLL_OR)
 800530a:	f7fb fd39 	bl	8000d80 <DPC_FLT_Faulterror_Check>
 800530e:	4603      	mov	r3, r0
 8005310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005314:	d10f      	bne.n	8005336 <DPC_FSM_ERROR_Func+0xa2>
    {
      if(PC_State==FSM_Run){
 8005316:	4b22      	ldr	r3, [pc, #136]	; (80053a0 <DPC_FSM_ERROR_Func+0x10c>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b03      	cmp	r3, #3
 800531c:	d138      	bne.n	8005390 <DPC_FSM_ERROR_Func+0xfc>
        DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 800531e:	f7fd fd9f 	bl	8002e60 <DPC_PWM_OutDisable>
//        DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
        HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 8005322:	2200      	movs	r2, #0
 8005324:	2180      	movs	r1, #128	; 0x80
 8005326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800532a:	f003 fa43 	bl	80087b4 <HAL_GPIO_WritePin>
        DPC_FLT_Faulterror_Set(FAULT_PLL_OR);
 800532e:	2080      	movs	r0, #128	; 0x80
 8005330:	f7fb fe6e 	bl	8001010 <DPC_FLT_Faulterror_Set>
 8005334:	e02c      	b.n	8005390 <DPC_FSM_ERROR_Func+0xfc>
      }
    }
    else if(DPC_FLT_Faulterror_Check()==ERROR_AC_OFF)
 8005336:	f7fb fd23 	bl	8000d80 <DPC_FLT_Faulterror_Check>
 800533a:	4603      	mov	r3, r0
 800533c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005340:	d110      	bne.n	8005364 <DPC_FSM_ERROR_Func+0xd0>
    {
      if(PC_State==FSM_Run){
 8005342:	4b17      	ldr	r3, [pc, #92]	; (80053a0 <DPC_FSM_ERROR_Func+0x10c>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b03      	cmp	r3, #3
 8005348:	d122      	bne.n	8005390 <DPC_FSM_ERROR_Func+0xfc>
        DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 800534a:	f7fd fd89 	bl	8002e60 <DPC_PWM_OutDisable>
//        DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
        HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 800534e:	2200      	movs	r2, #0
 8005350:	2180      	movs	r1, #128	; 0x80
 8005352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005356:	f003 fa2d 	bl	80087b4 <HAL_GPIO_WritePin>
        DPC_FLT_Faulterror_Set(FAULT_GEN);
 800535a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800535e:	f7fb fe57 	bl	8001010 <DPC_FLT_Faulterror_Set>
 8005362:	e015      	b.n	8005390 <DPC_FSM_ERROR_Func+0xfc>
      }
    }
    else if(DPC_FLT_Faulterror_Check()==ERROR_AC_UVLO)
 8005364:	f7fb fd0c 	bl	8000d80 <DPC_FLT_Faulterror_Check>
 8005368:	4603      	mov	r3, r0
 800536a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800536e:	d10f      	bne.n	8005390 <DPC_FSM_ERROR_Func+0xfc>
    {
      if(PC_State==FSM_Run){
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <DPC_FSM_ERROR_Func+0x10c>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d10b      	bne.n	8005390 <DPC_FSM_ERROR_Func+0xfc>
        DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 8005378:	f7fd fd72 	bl	8002e60 <DPC_PWM_OutDisable>
//        DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
        HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 800537c:	2200      	movs	r2, #0
 800537e:	2180      	movs	r1, #128	; 0x80
 8005380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005384:	f003 fa16 	bl	80087b4 <HAL_GPIO_WritePin>
        DPC_FLT_Faulterror_Set(FAULT_GEN);
 8005388:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800538c:	f7fb fe40 	bl	8001010 <DPC_FLT_Faulterror_Set>
//        DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
//        DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
//        DPC_FLT_Faulterror_Set(FAULT_GEN);
//    }
  }
  return RetVal;
 8005390:	79fb      	ldrb	r3, [r7, #7]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	2000b8e0 	.word	0x2000b8e0
 80053a0:	20000580 	.word	0x20000580

080053a4 <DPC_FSM_FAULT_Func>:
  * @brief  Executes converter's state machine FAULT STate Function
  * @param  None
  * @retval true/false
  */
bool DPC_FSM_FAULT_Func(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
bool RetVal = true;
 80053aa:	2301      	movs	r3, #1
 80053ac:	71fb      	strb	r3, [r7, #7]
  DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_Fault);                                ///DPC Bicolor LED SET to FSM_Fault
 80053ae:	2202      	movs	r2, #2
 80053b0:	2100      	movs	r1, #0
 80053b2:	4806      	ldr	r0, [pc, #24]	; (80053cc <DPC_FSM_FAULT_Func+0x28>)
 80053b4:	f7fc fffe 	bl	80023b4 <DPC_MISC_BLED_Set>
  DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 80053b8:	f7fd fd52 	bl	8002e60 <DPC_PWM_OutDisable>
  HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 80053bc:	2200      	movs	r2, #0
 80053be:	2180      	movs	r1, #128	; 0x80
 80053c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053c4:	f003 f9f6 	bl	80087b4 <HAL_GPIO_WritePin>
  //  DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
  while(1)
 80053c8:	e7fe      	b.n	80053c8 <DPC_FSM_FAULT_Func+0x24>
 80053ca:	bf00      	nop
 80053cc:	2000b8e0 	.word	0x2000b8e0

080053d0 <DPC_MISC_Analog_Start>:

  return RetVal;
}


void  DPC_MISC_Analog_Start(void){
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  HAL_ADC_Start_DMA(&hadc1,p_ADC1_Data,ADC1_CHs);                              ///HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* p_ADC1_Data, uint32_t Length)
 80053d4:	2208      	movs	r2, #8
 80053d6:	4903      	ldr	r1, [pc, #12]	; (80053e4 <DPC_MISC_Analog_Start+0x14>)
 80053d8:	4803      	ldr	r0, [pc, #12]	; (80053e8 <DPC_MISC_Analog_Start+0x18>)
 80053da:	f001 fa3b 	bl	8006854 <HAL_ADC_Start_DMA>
}
 80053de:	bf00      	nop
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	200017f8 	.word	0x200017f8
 80053e8:	200001d0 	.word	0x200001d0

080053ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af04      	add	r7, sp, #16
 80053f2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fc:	f040 810d 	bne.w	800561a <HAL_TIM_PeriodElapsedCallback+0x22e>
	{
		DATA_Acquisition_from_DMA(p_ADC1_Data,p_ADC2_Data); //Pass ADC DMA Data in DATA LAYER
 8005400:	498c      	ldr	r1, [pc, #560]	; (8005634 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005402:	488d      	ldr	r0, [pc, #564]	; (8005638 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005404:	f7fb fba4 	bl	8000b50 <DATA_Acquisition_from_DMA>


		//start READ variable from DATA LAYER
		ADC_Current_AC_ProcessData((uint32_t*)Read_Curr_GRID(),&CURRENT_ADC_AC_IN_NORM);                    /// Read Current AC from DATA Layer and pass it at CURRENT_ADC_AC_IN_NORM
 8005408:	f7fb fbee 	bl	8000be8 <Read_Curr_GRID>
 800540c:	4603      	mov	r3, r0
 800540e:	498b      	ldr	r1, [pc, #556]	; (800563c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe fa83 	bl	800391c <ADC_Current_AC_ProcessData>
		ADC2Phy_Current_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Curr_GRID(),&CURRENT_ADC_AC_IN_PHY);      /// Read Current AC from DATA Layer and pass it at CURRENT_ADC_AC_IN_PHY
 8005416:	f7fb fbe7 	bl	8000be8 <Read_Curr_GRID>
 800541a:	4603      	mov	r3, r0
 800541c:	4a88      	ldr	r2, [pc, #544]	; (8005640 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800541e:	4619      	mov	r1, r3
 8005420:	4888      	ldr	r0, [pc, #544]	; (8005644 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005422:	f7fe fabd 	bl	80039a0 <ADC2Phy_Current_ProcessData>
		//end READ variable from DATA LAYER

		Status_Load=DPC_MISC_Check_DCLoad(&DPC_Load,DC_Load_Limit);
 8005426:	4b88      	ldr	r3, [pc, #544]	; (8005648 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	2100      	movs	r1, #0
 800542c:	4611      	mov	r1, r2
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	2500      	movs	r5, #0
 8005432:	4615      	mov	r5, r2
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	2400      	movs	r4, #0
 8005438:	4614      	mov	r4, r2
 800543a:	466a      	mov	r2, sp
 800543c:	330c      	adds	r3, #12
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	6010      	str	r0, [r2, #0]
 8005442:	889b      	ldrh	r3, [r3, #4]
 8005444:	8093      	strh	r3, [r2, #4]
 8005446:	462a      	mov	r2, r5
 8005448:	4623      	mov	r3, r4
 800544a:	4880      	ldr	r0, [pc, #512]	; (800564c <HAL_TIM_PeriodElapsedCallback+0x260>)
 800544c:	f7fc fd18 	bl	8001e80 <DPC_MISC_Check_DCLoad>
 8005450:	4603      	mov	r3, r0
 8005452:	461a      	mov	r2, r3
 8005454:	4b7e      	ldr	r3, [pc, #504]	; (8005650 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8005456:	701a      	strb	r2, [r3, #0]
		Status_Source=DPC_MISC_CHECK_AC_SOURCE(&AC_SOURCE,AC_Source_Limit,PLL_CONVERTER.pll_theta_out_2pi);  ///Check AC SOURCE state reading AC Voltage and curent
 8005458:	4b7e      	ldr	r3, [pc, #504]	; (8005654 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800545a:	edd3 7a02 	vldr	s15, [r3, #8]
 800545e:	4b7e      	ldr	r3, [pc, #504]	; (8005658 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	2600      	movs	r6, #0
 8005464:	4616      	mov	r6, r2
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	2500      	movs	r5, #0
 800546a:	4615      	mov	r5, r2
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	2400      	movs	r4, #0
 8005470:	4614      	mov	r4, r2
 8005472:	466a      	mov	r2, sp
 8005474:	330c      	adds	r3, #12
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	6859      	ldr	r1, [r3, #4]
 800547a:	c203      	stmia	r2!, {r0, r1}
 800547c:	eeb0 0a67 	vmov.f32	s0, s15
 8005480:	4631      	mov	r1, r6
 8005482:	462a      	mov	r2, r5
 8005484:	4623      	mov	r3, r4
 8005486:	4875      	ldr	r0, [pc, #468]	; (800565c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005488:	f7fd f80e 	bl	80024a8 <DPC_MISC_CHECK_AC_SOURCE>
 800548c:	4603      	mov	r3, r0
 800548e:	461a      	mov	r2, r3
 8005490:	4b73      	ldr	r3, [pc, #460]	; (8005660 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8005492:	701a      	strb	r2, [r3, #0]

		Iabc_temp=*((TRANSFORM_ABC_t*)&CURRENT_ADC_AC_IN_NORM);                                             /// Sensing Current
 8005494:	4a69      	ldr	r2, [pc, #420]	; (800563c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8005496:	4b73      	ldr	r3, [pc, #460]	; (8005664 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8005498:	ca07      	ldmia	r2, {r0, r1, r2}
 800549a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Iabc_Phy=*((TRANSFORM_ABC_t*)&CURRENT_ADC_AC_IN_PHY);                                               /// Sensing Current in Physical dimension
 800549e:	4a68      	ldr	r2, [pc, #416]	; (8005640 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80054a0:	4b71      	ldr	r3, [pc, #452]	; (8005668 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80054a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80054a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		Run_ClarkePark(&Iabc_temp, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Current_qdo);
 80054a8:	f7fb fb04 	bl	8000ab4 <DATA_Read_Theta_PLL>
 80054ac:	eeb0 7a40 	vmov.f32	s14, s0
 80054b0:	4b68      	ldr	r3, [pc, #416]	; (8005654 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80054b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80054b6:	496d      	ldr	r1, [pc, #436]	; (800566c <HAL_TIM_PeriodElapsedCallback+0x280>)
 80054b8:	eef0 0a67 	vmov.f32	s1, s15
 80054bc:	eeb0 0a47 	vmov.f32	s0, s14
 80054c0:	4868      	ldr	r0, [pc, #416]	; (8005664 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80054c2:	f7fe f895 	bl	80035f0 <Run_ClarkePark>
		//Run_ClarkePark(&Iabc_Phy, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Current_qdo_Phy);

		DATA_CURR_Write_ClarkePark(Current_qdo);  // Current qdo in DATA layer
 80054c6:	4b69      	ldr	r3, [pc, #420]	; (800566c <HAL_TIM_PeriodElapsedCallback+0x280>)
 80054c8:	edd3 6a00 	vldr	s13, [r3]
 80054cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80054d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80054d4:	eeb0 0a66 	vmov.f32	s0, s13
 80054d8:	eef0 0a47 	vmov.f32	s1, s14
 80054dc:	eeb0 1a67 	vmov.f32	s2, s15
 80054e0:	f7fb faf6 	bl	8000ad0 <DATA_CURR_Write_ClarkePark>
//			HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_RESET);
//		}
//
		//FSM_Run_State = Run_Idle;

		if (PC_State==FSM_Run)                                      ///__________FSM_Run________
 80054e4:	4b62      	ldr	r3, [pc, #392]	; (8005670 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d156      	bne.n	800559a <HAL_TIM_PeriodElapsedCallback+0x1ae>
		{
		  switch(FSM_Run_State){
 80054ec:	4b61      	ldr	r3, [pc, #388]	; (8005674 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d03c      	beq.n	800556e <HAL_TIM_PeriodElapsedCallback+0x182>
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d002      	beq.n	80054fe <HAL_TIM_PeriodElapsedCallback+0x112>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d046      	beq.n	800558a <HAL_TIM_PeriodElapsedCallback+0x19e>
 80054fc:	e077      	b.n	80055ee <HAL_TIM_PeriodElapsedCallback+0x202>
		  case Run_PFC_Mode:
			DPC_LPCNTRL_PFC_Mode(&pPFC_CTRL,&pPI_VDC_CTRL,&VOLTAGECTRL,&CDC,&V_DQO_CTRL,&Current_qdo,&Voltage_qdo,&VOLTAGE_ADC_DC_IN_PHY); ///PFC CONTROL______
 80054fe:	4b5e      	ldr	r3, [pc, #376]	; (8005678 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8005500:	9303      	str	r3, [sp, #12]
 8005502:	4b5e      	ldr	r3, [pc, #376]	; (800567c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8005504:	9302      	str	r3, [sp, #8]
 8005506:	4b59      	ldr	r3, [pc, #356]	; (800566c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	4b5d      	ldr	r3, [pc, #372]	; (8005680 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4b5d      	ldr	r3, [pc, #372]	; (8005684 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005510:	4a5d      	ldr	r2, [pc, #372]	; (8005688 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8005512:	495e      	ldr	r1, [pc, #376]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8005514:	485e      	ldr	r0, [pc, #376]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8005516:	f7fb ff7a 	bl	800140e <DPC_LPCNTRL_PFC_Mode>
			Run_Inv_ClarkePark(&V_DQO_CTRL,PLL_CONVERTER.pll_theta_out_2pi,PLL_CONVERTER.pll_phi_2pi,&V_ABC_CTRL);                                  /// DQO to ABC Voltag to provide to modulator
 800551a:	4b4e      	ldr	r3, [pc, #312]	; (8005654 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800551c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005520:	4b4c      	ldr	r3, [pc, #304]	; (8005654 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8005522:	ed93 7a03 	vldr	s14, [r3, #12]
 8005526:	495b      	ldr	r1, [pc, #364]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8005528:	eef0 0a47 	vmov.f32	s1, s14
 800552c:	eeb0 0a67 	vmov.f32	s0, s15
 8005530:	4853      	ldr	r0, [pc, #332]	; (8005680 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8005532:	f7fe f8cd 	bl	80036d0 <Run_Inv_ClarkePark>
			DPC_PWM_OutEnable(&tDPC_PWM);                                                                                                           ///PWM output will be enabled in PFC_Mode
 8005536:	4858      	ldr	r0, [pc, #352]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8005538:	f7fd fc98 	bl	8002e6c <DPC_PWM_OutEnable>
			HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 800553c:	2201      	movs	r2, #1
 800553e:	2120      	movs	r1, #32
 8005540:	4856      	ldr	r0, [pc, #344]	; (800569c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8005542:	f003 f937 	bl	80087b4 <HAL_GPIO_WritePin>
			DPC_PWM_Send_Duty_SPWM(&tDPC_PWM,V_ABC_CTRL.axA,V_ABC_CTRL.axB,V_ABC_CTRL.axC,&DMA_HRTIM_SRC);                                                         ///MODULATOR
 8005546:	4b53      	ldr	r3, [pc, #332]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8005548:	edd3 7a00 	vldr	s15, [r3]
 800554c:	4b51      	ldr	r3, [pc, #324]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800554e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005552:	4b50      	ldr	r3, [pc, #320]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8005554:	edd3 6a02 	vldr	s13, [r3, #8]
 8005558:	4951      	ldr	r1, [pc, #324]	; (80056a0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800555a:	eeb0 1a66 	vmov.f32	s2, s13
 800555e:	eef0 0a47 	vmov.f32	s1, s14
 8005562:	eeb0 0a67 	vmov.f32	s0, s15
 8005566:	484c      	ldr	r0, [pc, #304]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8005568:	f7fd fa7e 	bl	8002a68 <DPC_PWM_Send_Duty_SPWM>
			  break;
 800556c:	e03f      	b.n	80055ee <HAL_TIM_PeriodElapsedCallback+0x202>
		  case Run_Burst_Mode:
			//DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&BURST_CTRL,(uint32_t*)Read_Curr_DC(),&tDPC_PWM);
			DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&BURST_CTRL,&CURRENT_ADC_AC_IN_PHY,&tDPC_PWM, &DMA_HRTIM_SRC);
 800556e:	f7fb fb4f 	bl	8000c10 <Read_Volt_DC>
 8005572:	4b4b      	ldr	r3, [pc, #300]	; (80056a0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	4b48      	ldr	r3, [pc, #288]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8005578:	4a31      	ldr	r2, [pc, #196]	; (8005640 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800557a:	494a      	ldr	r1, [pc, #296]	; (80056a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800557c:	f7fc f985 	bl	800188a <DPC_LPCNTRL_Burst_Mode>
			DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 8005580:	4940      	ldr	r1, [pc, #256]	; (8005684 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005582:	4842      	ldr	r0, [pc, #264]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8005584:	f7fb ff2c 	bl	80013e0 <DPC_LPCNTRL_PFC_Mode_Reset>
			break;
 8005588:	e031      	b.n	80055ee <HAL_TIM_PeriodElapsedCallback+0x202>
		  case Run_Idle:
			//Idle_Mode();
			DPC_PWM_OutDisable();
 800558a:	f7fd fc69 	bl	8002e60 <DPC_PWM_OutDisable>
			DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 800558e:	493d      	ldr	r1, [pc, #244]	; (8005684 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005590:	483e      	ldr	r0, [pc, #248]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8005592:	f7fb ff25 	bl	80013e0 <DPC_LPCNTRL_PFC_Mode_Reset>
			break;
 8005596:	bf00      	nop
 8005598:	e029      	b.n	80055ee <HAL_TIM_PeriodElapsedCallback+0x202>
		  }
		}
		else if (PC_State==FSM_StartUp_burst)                        ///__________FSM_StartUp_burst__________
 800559a:	4b35      	ldr	r3, [pc, #212]	; (8005670 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d110      	bne.n	80055c4 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		{
		  //DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&STARTBURST_CTRL,(uint32_t*)Read_Curr_DC(),&tDPC_PWM);
		  DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&STARTBURST_CTRL,&CURRENT_ADC_AC_IN_PHY,&tDPC_PWM, &DMA_HRTIM_SRC);
 80055a2:	f7fb fb35 	bl	8000c10 <Read_Volt_DC>
 80055a6:	4b3e      	ldr	r3, [pc, #248]	; (80056a0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	4b3b      	ldr	r3, [pc, #236]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80055ac:	4a24      	ldr	r2, [pc, #144]	; (8005640 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80055ae:	493e      	ldr	r1, [pc, #248]	; (80056a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80055b0:	f7fc f96b 	bl	800188a <DPC_LPCNTRL_Burst_Mode>
		  DPC_PWM_OutEnable(&tDPC_PWM);
 80055b4:	4838      	ldr	r0, [pc, #224]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80055b6:	f7fd fc59 	bl	8002e6c <DPC_PWM_OutEnable>
		  DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 80055ba:	4932      	ldr	r1, [pc, #200]	; (8005684 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80055bc:	4833      	ldr	r0, [pc, #204]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80055be:	f7fb ff0f 	bl	80013e0 <DPC_LPCNTRL_PFC_Mode_Reset>
 80055c2:	e014      	b.n	80055ee <HAL_TIM_PeriodElapsedCallback+0x202>
		}
		else if(PC_State==FSM_Fault)                                ///FSM_Fault
 80055c4:	4b2a      	ldr	r3, [pc, #168]	; (8005670 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d110      	bne.n	80055ee <HAL_TIM_PeriodElapsedCallback+0x202>
		{
		  DPC_PWM_OutDisable();
 80055cc:	f7fd fc48 	bl	8002e60 <DPC_PWM_OutDisable>
		  if(Trigger_Timestamp==SET){
 80055d0:	4b36      	ldr	r3, [pc, #216]	; (80056ac <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d10a      	bne.n	80055ee <HAL_TIM_PeriodElapsedCallback+0x202>
		  Timestamp_PLL_CONVERTER=PLL_CONVERTER;
 80055d8:	4a35      	ldr	r2, [pc, #212]	; (80056b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80055da:	4b1e      	ldr	r3, [pc, #120]	; (8005654 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80055dc:	4610      	mov	r0, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	239c      	movs	r3, #156	; 0x9c
 80055e2:	461a      	mov	r2, r3
 80055e4:	f007 fd90 	bl	800d108 <memcpy>
		  Trigger_Timestamp=RESET;
 80055e8:	4b30      	ldr	r3, [pc, #192]	; (80056ac <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	701a      	strb	r2, [r3, #0]
		  }
		}
		if (Status_Source==OK_SOURCE){
 80055ee:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d102      	bne.n	80055fc <HAL_TIM_PeriodElapsedCallback+0x210>
			Flag2=1;
 80055f6:	4b2f      	ldr	r3, [pc, #188]	; (80056b4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
//			DMA_HRTIM_DST[2]=1;
//		}


//		Prev_Saturation = DMA_HRTIM_SRC[0];
		Flag = __HAL_HRTIM_GET_FLAG(&hhrtim1,HRTIM_FLAG_FLT1);
 80055fc:	4b2e      	ldr	r3, [pc, #184]	; (80056b8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	bf0c      	ite	eq
 800560c:	2301      	moveq	r3, #1
 800560e:	2300      	movne	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	4b29      	ldr	r3, [pc, #164]	; (80056bc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005616:	601a      	str	r2, [r3, #0]
	DATA_Write_Theta_PLL(PLL_CONVERTER.pll_theta_out_2pi);                                              ///Pass Theta to DATA LAYER

	Service_step++;
	}

}
 8005618:	e0de      	b.n	80057d8 <HAL_TIM_PeriodElapsedCallback+0x3ec>
	else if(htim->Instance == TIM3){
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a28      	ldr	r2, [pc, #160]	; (80056c0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d151      	bne.n	80056c8 <HAL_TIM_PeriodElapsedCallback+0x2dc>
		TimeoutMng();
 8005624:	f7fd fe4e 	bl	80032c4 <TimeoutMng>
		Timeout[0]++;
 8005628:	4b26      	ldr	r3, [pc, #152]	; (80056c4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3301      	adds	r3, #1
 800562e:	4a25      	ldr	r2, [pc, #148]	; (80056c4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005630:	6013      	str	r3, [r2, #0]
}
 8005632:	e0d1      	b.n	80057d8 <HAL_TIM_PeriodElapsedCallback+0x3ec>
 8005634:	2000b534 	.word	0x2000b534
 8005638:	200017f8 	.word	0x200017f8
 800563c:	2000b510 	.word	0x2000b510
 8005640:	20000518 	.word	0x20000518
 8005644:	20001868 	.word	0x20001868
 8005648:	2000b51c 	.word	0x2000b51c
 800564c:	2000b624 	.word	0x2000b624
 8005650:	2000b7bc 	.word	0x2000b7bc
 8005654:	2000b670 	.word	0x2000b670
 8005658:	200006b0 	.word	0x200006b0
 800565c:	2000069c 	.word	0x2000069c
 8005660:	20000672 	.word	0x20000672
 8005664:	20000574 	.word	0x20000574
 8005668:	2000b618 	.word	0x2000b618
 800566c:	2000067c 	.word	0x2000067c
 8005670:	20000580 	.word	0x20000580
 8005674:	2000b5e8 	.word	0x2000b5e8
 8005678:	20000530 	.word	0x20000530
 800567c:	2000b4dc 	.word	0x2000b4dc
 8005680:	20000524 	.word	0x20000524
 8005684:	20000598 	.word	0x20000598
 8005688:	2000b634 	.word	0x2000b634
 800568c:	2000b578 	.word	0x2000b578
 8005690:	2000b7d4 	.word	0x2000b7d4
 8005694:	20000584 	.word	0x20000584
 8005698:	20001818 	.word	0x20001818
 800569c:	48000800 	.word	0x48000800
 80056a0:	2000004c 	.word	0x2000004c
 80056a4:	2000b4e8 	.word	0x2000b4e8
 80056a8:	2000054c 	.word	0x2000054c
 80056ac:	20000000 	.word	0x20000000
 80056b0:	2000b720 	.word	0x2000b720
 80056b4:	2000b668 	.word	0x2000b668
 80056b8:	2000035c 	.word	0x2000035c
 80056bc:	2000b7d0 	.word	0x2000b7d0
 80056c0:	40000400 	.word	0x40000400
 80056c4:	2000b604 	.word	0x2000b604
	else if(htim->Instance == TIM6){
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a44      	ldr	r2, [pc, #272]	; (80057e0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	f040 8082 	bne.w	80057d8 <HAL_TIM_PeriodElapsedCallback+0x3ec>
	ADC_Voltage_AC_ProcessData((uint32_t*)Read_GRID(),&VOLTAGE_ADC_AC_IN_NORM);                         /// Read Voltage AC from DATA Layer and pass it at VOLTAGE_ADC_AC_IN_NORM
 80056d4:	f7fb fa7e 	bl	8000bd4 <Read_GRID>
 80056d8:	4603      	mov	r3, r0
 80056da:	4942      	ldr	r1, [pc, #264]	; (80057e4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fe f829 	bl	8003734 <ADC_Voltage_AC_ProcessData>
	ADC_Voltage_DC_ProcessData((uint32_t*)Read_Volt_DC(),&VOLTAGE_ADC_DC_IN_NORM);                      /// Read Voltage DC from DATA Layer and pass it at VOLTAGE_ADC_DC_IN_NORM
 80056e2:	f7fb fa95 	bl	8000c10 <Read_Volt_DC>
 80056e6:	4603      	mov	r3, r0
 80056e8:	493f      	ldr	r1, [pc, #252]	; (80057e8 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe f8ae 	bl	800384c <ADC_Voltage_DC_ProcessData>
	ADC2Phy_DC_Voltage_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Volt_DC(),&VOLTAGE_ADC_DC_IN_PHY);     /// Read Voltage AC from DATA Layer and pass it at VOLTAGE_ADC_AC_IN_PHY
 80056f0:	f7fb fa8e 	bl	8000c10 <Read_Volt_DC>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4a3d      	ldr	r2, [pc, #244]	; (80057ec <HAL_TIM_PeriodElapsedCallback+0x400>)
 80056f8:	4619      	mov	r1, r3
 80056fa:	483d      	ldr	r0, [pc, #244]	; (80057f0 <HAL_TIM_PeriodElapsedCallback+0x404>)
 80056fc:	f7fe f8ce 	bl	800389c <ADC2Phy_DC_Voltage_ProcessData>
	ADC2Phy_Voltage_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_GRID(),&VOLTAGE_ADC_AC_IN_PHY);           /// Read Voltage DC from DATA Layer and pass it at VOLTAGE_ADC_DC_IN_PHY
 8005700:	f7fb fa68 	bl	8000bd4 <Read_GRID>
 8005704:	4603      	mov	r3, r0
 8005706:	4a3b      	ldr	r2, [pc, #236]	; (80057f4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8005708:	4619      	mov	r1, r3
 800570a:	4839      	ldr	r0, [pc, #228]	; (80057f0 <HAL_TIM_PeriodElapsedCallback+0x404>)
 800570c:	f7fe f854 	bl	80037b8 <ADC2Phy_Voltage_ProcessData>
	if (Service_step>=500){
 8005710:	4b39      	ldr	r3, [pc, #228]	; (80057f8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005718:	d302      	bcc.n	8005720 <HAL_TIM_PeriodElapsedCallback+0x334>
		Service_step=0;
 800571a:	4b37      	ldr	r3, [pc, #220]	; (80057f8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 800571c:	2200      	movs	r2, #0
 800571e:	801a      	strh	r2, [r3, #0]
		Service_data[0][Service_step]=CURRENT_ADC_DC_IN_PHY.IDC_adc;
 8005720:	4b35      	ldr	r3, [pc, #212]	; (80057f8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	4b35      	ldr	r3, [pc, #212]	; (80057fc <HAL_TIM_PeriodElapsedCallback+0x410>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4935      	ldr	r1, [pc, #212]	; (8005800 <HAL_TIM_PeriodElapsedCallback+0x414>)
 800572c:	0083      	lsls	r3, r0, #2
 800572e:	440b      	add	r3, r1
 8005730:	601a      	str	r2, [r3, #0]
	Vabc_temp=*((TRANSFORM_ABC_t*)&VOLTAGE_ADC_AC_IN_NORM);                                             /// Sensing Voltage
 8005732:	4a2c      	ldr	r2, [pc, #176]	; (80057e4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8005734:	4b33      	ldr	r3, [pc, #204]	; (8005804 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8005736:	ca07      	ldmia	r2, {r0, r1, r2}
 8005738:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Vabc_Phy=*((TRANSFORM_ABC_t*)&VOLTAGE_ADC_AC_IN_PHY);                                               /// Sensing Voltage in Physical dimension
 800573c:	4a2d      	ldr	r2, [pc, #180]	; (80057f4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 800573e:	4b32      	ldr	r3, [pc, #200]	; (8005808 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8005740:	ca07      	ldmia	r2, {r0, r1, r2}
 8005742:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Run_ClarkePark(&Vabc_temp, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Voltage_qdo);
 8005746:	f7fb f9b5 	bl	8000ab4 <DATA_Read_Theta_PLL>
 800574a:	eeb0 7a40 	vmov.f32	s14, s0
 800574e:	4b2f      	ldr	r3, [pc, #188]	; (800580c <HAL_TIM_PeriodElapsedCallback+0x420>)
 8005750:	edd3 7a03 	vldr	s15, [r3, #12]
 8005754:	492e      	ldr	r1, [pc, #184]	; (8005810 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8005756:	eef0 0a67 	vmov.f32	s1, s15
 800575a:	eeb0 0a47 	vmov.f32	s0, s14
 800575e:	4829      	ldr	r0, [pc, #164]	; (8005804 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8005760:	f7fd ff46 	bl	80035f0 <Run_ClarkePark>
	Run_ClarkePark(&Vabc_Phy, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Voltage_qdo_Phy);        ///
 8005764:	f7fb f9a6 	bl	8000ab4 <DATA_Read_Theta_PLL>
 8005768:	eeb0 7a40 	vmov.f32	s14, s0
 800576c:	4b27      	ldr	r3, [pc, #156]	; (800580c <HAL_TIM_PeriodElapsedCallback+0x420>)
 800576e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005772:	4928      	ldr	r1, [pc, #160]	; (8005814 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8005774:	eef0 0a67 	vmov.f32	s1, s15
 8005778:	eeb0 0a47 	vmov.f32	s0, s14
 800577c:	4822      	ldr	r0, [pc, #136]	; (8005808 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800577e:	f7fd ff37 	bl	80035f0 <Run_ClarkePark>
	DATA_VOLT_Write_ClarkePark(Voltage_qdo);                                                            /// Voltage qdo in DATA layer
 8005782:	4b23      	ldr	r3, [pc, #140]	; (8005810 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8005784:	edd3 6a00 	vldr	s13, [r3]
 8005788:	ed93 7a01 	vldr	s14, [r3, #4]
 800578c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005790:	eeb0 0a66 	vmov.f32	s0, s13
 8005794:	eef0 0a47 	vmov.f32	s1, s14
 8005798:	eeb0 1a67 	vmov.f32	s2, s15
 800579c:	f7fb f9b8 	bl	8000b10 <DATA_VOLT_Write_ClarkePark>
	VOLTAGE_AC_qd_IN_NORM=*((VoltageAC_qd_PLL_Struct*)&Voltage_qdo);                                    ///Auxiliary Data for PLL
 80057a0:	4a1b      	ldr	r2, [pc, #108]	; (8005810 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80057a2:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80057a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80057a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PLL_Status=DPC_PLL_pllqd_Run(&PLL_CONVERTER,&VOLTAGE_AC_qd_IN_NORM,&theta_out_pll,&omega_out_pll);  ///PLL Phase Extimation
 80057aa:	4b1c      	ldr	r3, [pc, #112]	; (800581c <HAL_TIM_PeriodElapsedCallback+0x430>)
 80057ac:	4a1c      	ldr	r2, [pc, #112]	; (8005820 <HAL_TIM_PeriodElapsedCallback+0x434>)
 80057ae:	491a      	ldr	r1, [pc, #104]	; (8005818 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80057b0:	4816      	ldr	r0, [pc, #88]	; (800580c <HAL_TIM_PeriodElapsedCallback+0x420>)
 80057b2:	f7fc ffe1 	bl	8002778 <DPC_PLL_pllqd_Run>
 80057b6:	4603      	mov	r3, r0
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <HAL_TIM_PeriodElapsedCallback+0x438>)
 80057bc:	701a      	strb	r2, [r3, #0]
	DATA_Write_Theta_PLL(PLL_CONVERTER.pll_theta_out_2pi);                                              ///Pass Theta to DATA LAYER
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <HAL_TIM_PeriodElapsedCallback+0x420>)
 80057c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80057c4:	eeb0 0a67 	vmov.f32	s0, s15
 80057c8:	f7fb f964 	bl	8000a94 <DATA_Write_Theta_PLL>
	Service_step++;
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	3301      	adds	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80057d6:	801a      	strh	r2, [r3, #0]
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e0:	40001000 	.word	0x40001000
 80057e4:	2000b540 	.word	0x2000b540
 80057e8:	2000b7c0 	.word	0x2000b7c0
 80057ec:	20000530 	.word	0x20000530
 80057f0:	20001868 	.word	0x20001868
 80057f4:	2000b5cc 	.word	0x2000b5cc
 80057f8:	20000670 	.word	0x20000670
 80057fc:	20001854 	.word	0x20001854
 8005800:	2000189c 	.word	0x2000189c
 8005804:	2000b640 	.word	0x2000b640
 8005808:	2000b560 	.word	0x2000b560
 800580c:	2000b670 	.word	0x2000b670
 8005810:	2000b4dc 	.word	0x2000b4dc
 8005814:	2000185c 	.word	0x2000185c
 8005818:	20001848 	.word	0x20001848
 800581c:	20000590 	.word	0x20000590
 8005820:	2000b530 	.word	0x2000b530
 8005824:	200006ac 	.word	0x200006ac

08005828 <HAL_HRTIM_Fault1Callback>:

void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim){
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	DPC_FLT_Faulterror_Set(FAULT_OCS);
 8005830:	2008      	movs	r0, #8
 8005832:	f7fb fbed 	bl	8001010 <DPC_FLT_Faulterror_Set>
	while(1){}
 8005836:	e7fe      	b.n	8005836 <HAL_HRTIM_Fault1Callback+0xe>

08005838 <HAL_HRTIM_Fault3Callback>:

}
void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim){
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
	DPC_FLT_Faulterror_Set(FAULT_OCS);
 8005840:	2008      	movs	r0, #8
 8005842:	f7fb fbe5 	bl	8001010 <DPC_FLT_Faulterror_Set>
	while(1){}
 8005846:	e7fe      	b.n	8005846 <HAL_HRTIM_Fault3Callback+0xe>

08005848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800584c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800584e:	e7fe      	b.n	800584e <Error_Handler+0x6>

08005850 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8005854:	4b07      	ldr	r3, [pc, #28]	; (8005874 <MX_RNG_Init+0x24>)
 8005856:	4a08      	ldr	r2, [pc, #32]	; (8005878 <MX_RNG_Init+0x28>)
 8005858:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <MX_RNG_Init+0x24>)
 800585c:	2200      	movs	r2, #0
 800585e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8005860:	4804      	ldr	r0, [pc, #16]	; (8005874 <MX_RNG_Init+0x24>)
 8005862:	f006 fd39 	bl	800c2d8 <HAL_RNG_Init>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800586c:	f7ff ffec 	bl	8005848 <Error_Handler>
  }

}
 8005870:	bf00      	nop
 8005872:	bd80      	pop	{r7, pc}
 8005874:	2000b8cc 	.word	0x2000b8cc
 8005878:	50060800 	.word	0x50060800

0800587c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a0a      	ldr	r2, [pc, #40]	; (80058b4 <HAL_RNG_MspInit+0x38>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10b      	bne.n	80058a6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <HAL_RNG_MspInit+0x3c>)
 8005890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005892:	4a09      	ldr	r2, [pc, #36]	; (80058b8 <HAL_RNG_MspInit+0x3c>)
 8005894:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800589a:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <HAL_RNG_MspInit+0x3c>)
 800589c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	50060800 	.word	0x50060800
 80058b8:	40021000 	.word	0x40021000

080058bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c2:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <HAL_MspInit+0x44>)
 80058c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c6:	4a0e      	ldr	r2, [pc, #56]	; (8005900 <HAL_MspInit+0x44>)
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	6613      	str	r3, [r2, #96]	; 0x60
 80058ce:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <HAL_MspInit+0x44>)
 80058d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	607b      	str	r3, [r7, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058da:	4b09      	ldr	r3, [pc, #36]	; (8005900 <HAL_MspInit+0x44>)
 80058dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058de:	4a08      	ldr	r2, [pc, #32]	; (8005900 <HAL_MspInit+0x44>)
 80058e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e4:	6593      	str	r3, [r2, #88]	; 0x58
 80058e6:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_MspInit+0x44>)
 80058e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80058f2:	f005 fd77 	bl	800b3e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40021000 	.word	0x40021000

08005904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005908:	e7fe      	b.n	8005908 <NMI_Handler+0x4>

0800590a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800590a:	b480      	push	{r7}
 800590c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800590e:	e7fe      	b.n	800590e <HardFault_Handler+0x4>

08005910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005914:	e7fe      	b.n	8005914 <MemManage_Handler+0x4>

08005916 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005916:	b480      	push	{r7}
 8005918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800591a:	e7fe      	b.n	800591a <BusFault_Handler+0x4>

0800591c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005920:	e7fe      	b.n	8005920 <UsageFault_Handler+0x4>

08005922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005922:	b480      	push	{r7}
 8005924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005926:	bf00      	nop
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800593e:	b480      	push	{r7}
 8005940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005942:	bf00      	nop
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005950:	f000 fa8a 	bl	8005e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005954:	bf00      	nop
 8005956:	bd80      	pop	{r7, pc}

08005958 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_a);
 800595c:	4802      	ldr	r0, [pc, #8]	; (8005968 <DMA1_Channel1_IRQHandler+0x10>)
 800595e:	f002 fb1c 	bl	8007f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005962:	bf00      	nop
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200002fc 	.word	0x200002fc

0800596c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_b);
 8005970:	4802      	ldr	r0, [pc, #8]	; (800597c <DMA1_Channel2_IRQHandler+0x10>)
 8005972:	f002 fb12 	bl	8007f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005976:	bf00      	nop
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000458 	.word	0x20000458

08005980 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_c);
 8005984:	4802      	ldr	r0, [pc, #8]	; (8005990 <DMA1_Channel3_IRQHandler+0x10>)
 8005986:	f002 fb08 	bl	8007f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800598a:	bf00      	nop
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	200004b8 	.word	0x200004b8

08005994 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005998:	4802      	ldr	r0, [pc, #8]	; (80059a4 <DMA1_Channel4_IRQHandler+0x10>)
 800599a:	f002 fafe 	bl	8007f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800599e:	bf00      	nop
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	2000023c 	.word	0x2000023c

080059a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80059ac:	4802      	ldr	r0, [pc, #8]	; (80059b8 <TIM2_IRQHandler+0x10>)
 80059ae:	f006 fea9 	bl	800c704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80059b2:	bf00      	nop
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	2000b9c4 	.word	0x2000b9c4

080059bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80059c0:	4802      	ldr	r0, [pc, #8]	; (80059cc <TIM3_IRQHandler+0x10>)
 80059c2:	f006 fe9f 	bl	800c704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	2000b92c 	.word	0x2000b92c

080059d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80059d4:	4802      	ldr	r0, [pc, #8]	; (80059e0 <TIM6_DAC_IRQHandler+0x10>)
 80059d6:	f006 fe95 	bl	800c704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80059da:	bf00      	nop
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	2000b978 	.word	0x2000b978

080059e4 <HRTIM1_FLT_IRQHandler>:

/**
  * @brief This function handles HRTIM fault global interrupt.
  */
void HRTIM1_FLT_IRQHandler(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_FLT_IRQn 0 */

  /* USER CODE END HRTIM1_FLT_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_COMMON);
 80059e8:	21ff      	movs	r1, #255	; 0xff
 80059ea:	4802      	ldr	r0, [pc, #8]	; (80059f4 <HRTIM1_FLT_IRQHandler+0x10>)
 80059ec:	f004 f8da 	bl	8009ba4 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_FLT_IRQn 1 */

  /* USER CODE END HRTIM1_FLT_IRQn 1 */
}
 80059f0:	bf00      	nop
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	2000035c 	.word	0x2000035c

080059f8 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_hrtim1_a);
 80059fc:	4805      	ldr	r0, [pc, #20]	; (8005a14 <DMAMUX_OVR_IRQHandler+0x1c>)
 80059fe:	f002 fc59 	bl	80082b4 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_hrtim1_b);
 8005a02:	4805      	ldr	r0, [pc, #20]	; (8005a18 <DMAMUX_OVR_IRQHandler+0x20>)
 8005a04:	f002 fc56 	bl	80082b4 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel3
  HAL_DMAEx_MUX_IRQHandler(&hdma_hrtim1_c);
 8005a08:	4804      	ldr	r0, [pc, #16]	; (8005a1c <DMAMUX_OVR_IRQHandler+0x24>)
 8005a0a:	f002 fc53 	bl	80082b4 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8005a0e:	bf00      	nop
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	200002fc 	.word	0x200002fc
 8005a18:	20000458 	.word	0x20000458
 8005a1c:	200004b8 	.word	0x200004b8

08005a20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005a24:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <SystemInit+0x28>)
 8005a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2a:	4a07      	ldr	r2, [pc, #28]	; (8005a48 <SystemInit+0x28>)
 8005a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005a34:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <SystemInit+0x28>)
 8005a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a3a:	609a      	str	r2, [r3, #8]
#endif
}
 8005a3c:	bf00      	nop
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	e000ed00 	.word	0xe000ed00

08005a4c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a52:	f107 0310 	add.w	r3, r7, #16
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	605a      	str	r2, [r3, #4]
 8005a5c:	609a      	str	r2, [r3, #8]
 8005a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	605a      	str	r2, [r3, #4]
 8005a68:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <MX_TIM2_Init+0x94>)
 8005a6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005a72:	4b1b      	ldr	r3, [pc, #108]	; (8005ae0 <MX_TIM2_Init+0x94>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a78:	4b19      	ldr	r3, [pc, #100]	; (8005ae0 <MX_TIM2_Init+0x94>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8005a7e:	4b18      	ldr	r3, [pc, #96]	; (8005ae0 <MX_TIM2_Init+0x94>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a84:	4b16      	ldr	r3, [pc, #88]	; (8005ae0 <MX_TIM2_Init+0x94>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a8a:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <MX_TIM2_Init+0x94>)
 8005a8c:	2280      	movs	r2, #128	; 0x80
 8005a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005a90:	4813      	ldr	r0, [pc, #76]	; (8005ae0 <MX_TIM2_Init+0x94>)
 8005a92:	f006 fc56 	bl	800c342 <HAL_TIM_Base_Init>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005a9c:	f7ff fed4 	bl	8005848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005aa6:	f107 0310 	add.w	r3, r7, #16
 8005aaa:	4619      	mov	r1, r3
 8005aac:	480c      	ldr	r0, [pc, #48]	; (8005ae0 <MX_TIM2_Init+0x94>)
 8005aae:	f006 ffa9 	bl	800ca04 <HAL_TIM_ConfigClockSource>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005ab8:	f7ff fec6 	bl	8005848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8005abc:	2330      	movs	r3, #48	; 0x30
 8005abe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005ac4:	1d3b      	adds	r3, r7, #4
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4805      	ldr	r0, [pc, #20]	; (8005ae0 <MX_TIM2_Init+0x94>)
 8005aca:	f007 fa1d 	bl	800cf08 <HAL_TIMEx_MasterConfigSynchronization>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005ad4:	f7ff feb8 	bl	8005848 <Error_Handler>
  }

}
 8005ad8:	bf00      	nop
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	2000b9c4 	.word	0x2000b9c4

08005ae4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005aea:	f107 0310 	add.w	r3, r7, #16
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	605a      	str	r2, [r3, #4]
 8005af4:	609a      	str	r2, [r3, #8]
 8005af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005af8:	1d3b      	adds	r3, r7, #4
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	605a      	str	r2, [r3, #4]
 8005b00:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8005b02:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <MX_TIM3_Init+0x94>)
 8005b04:	4a1d      	ldr	r2, [pc, #116]	; (8005b7c <MX_TIM3_Init+0x98>)
 8005b06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005b08:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <MX_TIM3_Init+0x94>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b0e:	4b1a      	ldr	r3, [pc, #104]	; (8005b78 <MX_TIM3_Init+0x94>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8005b14:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <MX_TIM3_Init+0x94>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b1a:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <MX_TIM3_Init+0x94>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b20:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <MX_TIM3_Init+0x94>)
 8005b22:	2280      	movs	r2, #128	; 0x80
 8005b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005b26:	4814      	ldr	r0, [pc, #80]	; (8005b78 <MX_TIM3_Init+0x94>)
 8005b28:	f006 fc0b 	bl	800c342 <HAL_TIM_Base_Init>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8005b32:	f7ff fe89 	bl	8005848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005b3c:	f107 0310 	add.w	r3, r7, #16
 8005b40:	4619      	mov	r1, r3
 8005b42:	480d      	ldr	r0, [pc, #52]	; (8005b78 <MX_TIM3_Init+0x94>)
 8005b44:	f006 ff5e 	bl	800ca04 <HAL_TIM_ConfigClockSource>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8005b4e:	f7ff fe7b 	bl	8005848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4806      	ldr	r0, [pc, #24]	; (8005b78 <MX_TIM3_Init+0x94>)
 8005b60:	f007 f9d2 	bl	800cf08 <HAL_TIMEx_MasterConfigSynchronization>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8005b6a:	f7ff fe6d 	bl	8005848 <Error_Handler>
  }

}
 8005b6e:	bf00      	nop
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	2000b92c 	.word	0x2000b92c
 8005b7c:	40000400 	.word	0x40000400

08005b80 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b86:	1d3b      	adds	r3, r7, #4
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8005b90:	4b14      	ldr	r3, [pc, #80]	; (8005be4 <MX_TIM6_Init+0x64>)
 8005b92:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <MX_TIM6_Init+0x68>)
 8005b94:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8005b96:	4b13      	ldr	r3, [pc, #76]	; (8005be4 <MX_TIM6_Init+0x64>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b9c:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <MX_TIM6_Init+0x64>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 32000;
 8005ba2:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <MX_TIM6_Init+0x64>)
 8005ba4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8005ba8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005baa:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <MX_TIM6_Init+0x64>)
 8005bac:	2280      	movs	r2, #128	; 0x80
 8005bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005bb0:	480c      	ldr	r0, [pc, #48]	; (8005be4 <MX_TIM6_Init+0x64>)
 8005bb2:	f006 fbc6 	bl	800c342 <HAL_TIM_Base_Init>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005bbc:	f7ff fe44 	bl	8005848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005bc0:	2320      	movs	r3, #32
 8005bc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4805      	ldr	r0, [pc, #20]	; (8005be4 <MX_TIM6_Init+0x64>)
 8005bce:	f007 f99b 	bl	800cf08 <HAL_TIMEx_MasterConfigSynchronization>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005bd8:	f7ff fe36 	bl	8005848 <Error_Handler>
  }

}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	2000b978 	.word	0x2000b978
 8005be8:	40001000 	.word	0x40001000

08005bec <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bf2:	f107 0310 	add.w	r3, r7, #16
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	609a      	str	r2, [r3, #8]
 8005bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c00:	1d3b      	adds	r3, r7, #4
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	605a      	str	r2, [r3, #4]
 8005c08:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8005c0a:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <MX_TIM15_Init+0x9c>)
 8005c0c:	4a1f      	ldr	r2, [pc, #124]	; (8005c8c <MX_TIM15_Init+0xa0>)
 8005c0e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8005c10:	4b1d      	ldr	r3, [pc, #116]	; (8005c88 <MX_TIM15_Init+0x9c>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c16:	4b1c      	ldr	r3, [pc, #112]	; (8005c88 <MX_TIM15_Init+0x9c>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8005c1c:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <MX_TIM15_Init+0x9c>)
 8005c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c22:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c24:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <MX_TIM15_Init+0x9c>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005c2a:	4b17      	ldr	r3, [pc, #92]	; (8005c88 <MX_TIM15_Init+0x9c>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c30:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <MX_TIM15_Init+0x9c>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005c36:	4814      	ldr	r0, [pc, #80]	; (8005c88 <MX_TIM15_Init+0x9c>)
 8005c38:	f006 fb83 	bl	800c342 <HAL_TIM_Base_Init>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8005c42:	f7ff fe01 	bl	8005848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005c4c:	f107 0310 	add.w	r3, r7, #16
 8005c50:	4619      	mov	r1, r3
 8005c52:	480d      	ldr	r0, [pc, #52]	; (8005c88 <MX_TIM15_Init+0x9c>)
 8005c54:	f006 fed6 	bl	800ca04 <HAL_TIM_ConfigClockSource>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8005c5e:	f7ff fdf3 	bl	8005848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c62:	2300      	movs	r3, #0
 8005c64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005c6a:	1d3b      	adds	r3, r7, #4
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4806      	ldr	r0, [pc, #24]	; (8005c88 <MX_TIM15_Init+0x9c>)
 8005c70:	f007 f94a 	bl	800cf08 <HAL_TIMEx_MasterConfigSynchronization>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8005c7a:	f7ff fde5 	bl	8005848 <Error_Handler>
  }

}
 8005c7e:	bf00      	nop
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	2000b8e0 	.word	0x2000b8e0
 8005c8c:	40014000 	.word	0x40014000

08005c90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d114      	bne.n	8005ccc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005ca2:	4b2f      	ldr	r3, [pc, #188]	; (8005d60 <HAL_TIM_Base_MspInit+0xd0>)
 8005ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca6:	4a2e      	ldr	r2, [pc, #184]	; (8005d60 <HAL_TIM_Base_MspInit+0xd0>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	6593      	str	r3, [r2, #88]	; 0x58
 8005cae:	4b2c      	ldr	r3, [pc, #176]	; (8005d60 <HAL_TIM_Base_MspInit+0xd0>)
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 8005cba:	2202      	movs	r2, #2
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	201c      	movs	r0, #28
 8005cc0:	f002 f813 	bl	8007cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005cc4:	201c      	movs	r0, #28
 8005cc6:	f002 f82a 	bl	8007d1e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8005cca:	e044      	b.n	8005d56 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a24      	ldr	r2, [pc, #144]	; (8005d64 <HAL_TIM_Base_MspInit+0xd4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d114      	bne.n	8005d00 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005cd6:	4b22      	ldr	r3, [pc, #136]	; (8005d60 <HAL_TIM_Base_MspInit+0xd0>)
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cda:	4a21      	ldr	r2, [pc, #132]	; (8005d60 <HAL_TIM_Base_MspInit+0xd0>)
 8005cdc:	f043 0302 	orr.w	r3, r3, #2
 8005ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ce2:	4b1f      	ldr	r3, [pc, #124]	; (8005d60 <HAL_TIM_Base_MspInit+0xd0>)
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 4);
 8005cee:	2204      	movs	r2, #4
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	201d      	movs	r0, #29
 8005cf4:	f001 fff9 	bl	8007cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005cf8:	201d      	movs	r0, #29
 8005cfa:	f002 f810 	bl	8007d1e <HAL_NVIC_EnableIRQ>
}
 8005cfe:	e02a      	b.n	8005d56 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <HAL_TIM_Base_MspInit+0xd8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d114      	bne.n	8005d34 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005d0a:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <HAL_TIM_Base_MspInit+0xd0>)
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0e:	4a14      	ldr	r2, [pc, #80]	; (8005d60 <HAL_TIM_Base_MspInit+0xd0>)
 8005d10:	f043 0310 	orr.w	r3, r3, #16
 8005d14:	6593      	str	r3, [r2, #88]	; 0x58
 8005d16:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <HAL_TIM_Base_MspInit+0xd0>)
 8005d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 3);
 8005d22:	2203      	movs	r2, #3
 8005d24:	2100      	movs	r1, #0
 8005d26:	2036      	movs	r0, #54	; 0x36
 8005d28:	f001 ffdf 	bl	8007cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005d2c:	2036      	movs	r0, #54	; 0x36
 8005d2e:	f001 fff6 	bl	8007d1e <HAL_NVIC_EnableIRQ>
}
 8005d32:	e010      	b.n	8005d56 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM15)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <HAL_TIM_Base_MspInit+0xdc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d10b      	bne.n	8005d56 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005d3e:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <HAL_TIM_Base_MspInit+0xd0>)
 8005d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d42:	4a07      	ldr	r2, [pc, #28]	; (8005d60 <HAL_TIM_Base_MspInit+0xd0>)
 8005d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d48:	6613      	str	r3, [r2, #96]	; 0x60
 8005d4a:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <HAL_TIM_Base_MspInit+0xd0>)
 8005d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d52:	60bb      	str	r3, [r7, #8]
 8005d54:	68bb      	ldr	r3, [r7, #8]
}
 8005d56:	bf00      	nop
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40021000 	.word	0x40021000
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40001000 	.word	0x40001000
 8005d6c:	40014000 	.word	0x40014000

08005d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005d70:	480d      	ldr	r0, [pc, #52]	; (8005da8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005d72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d74:	480d      	ldr	r0, [pc, #52]	; (8005dac <LoopForever+0x6>)
  ldr r1, =_edata
 8005d76:	490e      	ldr	r1, [pc, #56]	; (8005db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005d78:	4a0e      	ldr	r2, [pc, #56]	; (8005db4 <LoopForever+0xe>)
  movs r3, #0
 8005d7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005d7c:	e002      	b.n	8005d84 <LoopCopyDataInit>

08005d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d82:	3304      	adds	r3, #4

08005d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d88:	d3f9      	bcc.n	8005d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d8a:	4a0b      	ldr	r2, [pc, #44]	; (8005db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005d8c:	4c0b      	ldr	r4, [pc, #44]	; (8005dbc <LoopForever+0x16>)
  movs r3, #0
 8005d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d90:	e001      	b.n	8005d96 <LoopFillZerobss>

08005d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d94:	3204      	adds	r2, #4

08005d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d98:	d3fb      	bcc.n	8005d92 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005d9a:	f7ff fe41 	bl	8005a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d9e:	f007 f98f 	bl	800d0c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005da2:	f7fe feab 	bl	8004afc <main>

08005da6 <LoopForever>:

LoopForever:
    b LoopForever
 8005da6:	e7fe      	b.n	8005da6 <LoopForever>
  ldr   r0, =_estack
 8005da8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005db0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8005db4:	0800d968 	.word	0x0800d968
  ldr r2, =_sbss
 8005db8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8005dbc:	2000ba14 	.word	0x2000ba14

08005dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005dc0:	e7fe      	b.n	8005dc0 <ADC1_2_IRQHandler>

08005dc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dcc:	2003      	movs	r0, #3
 8005dce:	f001 ff81 	bl	8007cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	f000 f80e 	bl	8005df4 <HAL_InitTick>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	71fb      	strb	r3, [r7, #7]
 8005de2:	e001      	b.n	8005de8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005de4:	f7ff fd6a 	bl	80058bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005de8:	79fb      	ldrb	r3, [r7, #7]

}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005e00:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <HAL_InitTick+0x68>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d022      	beq.n	8005e4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005e08:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <HAL_InitTick+0x6c>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <HAL_InitTick+0x68>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e14:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 ff8c 	bl	8007d3a <HAL_SYSTICK_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10f      	bne.n	8005e48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b0f      	cmp	r3, #15
 8005e2c:	d809      	bhi.n	8005e42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e2e:	2200      	movs	r2, #0
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	f04f 30ff 	mov.w	r0, #4294967295
 8005e36:	f001 ff58 	bl	8007cea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e3a:	4a0a      	ldr	r2, [pc, #40]	; (8005e64 <HAL_InitTick+0x70>)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	e007      	b.n	8005e52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	73fb      	strb	r3, [r7, #15]
 8005e46:	e004      	b.n	8005e52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	73fb      	strb	r3, [r7, #15]
 8005e4c:	e001      	b.n	8005e52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	2000000c 	.word	0x2000000c
 8005e60:	20000004 	.word	0x20000004
 8005e64:	20000008 	.word	0x20000008

08005e68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <HAL_IncTick+0x1c>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <HAL_IncTick+0x20>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4413      	add	r3, r2
 8005e76:	4a03      	ldr	r2, [pc, #12]	; (8005e84 <HAL_IncTick+0x1c>)
 8005e78:	6013      	str	r3, [r2, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	2000ba10 	.word	0x2000ba10
 8005e88:	2000000c 	.word	0x2000000c

08005e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005e90:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <HAL_GetTick+0x14>)
 8005e92:	681b      	ldr	r3, [r3, #0]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	2000ba10 	.word	0x2000ba10

08005ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005eac:	f7ff ffee 	bl	8005e8c <HAL_GetTick>
 8005eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d004      	beq.n	8005ec8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ebe:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <HAL_Delay+0x40>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ec8:	bf00      	nop
 8005eca:	f7ff ffdf 	bl	8005e8c <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d8f7      	bhi.n	8005eca <HAL_Delay+0x26>
  {
  }
}
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	2000000c 	.word	0x2000000c

08005ee8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	609a      	str	r2, [r3, #8]
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	609a      	str	r2, [r3, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3360      	adds	r3, #96	; 0x60
 8005f62:	461a      	mov	r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <LL_ADC_SetOffset+0x44>)
 8005f72:	4013      	ands	r3, r2
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	03fff000 	.word	0x03fff000

08005f98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3360      	adds	r3, #96	; 0x60
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3360      	adds	r3, #96	; 0x60
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b087      	sub	sp, #28
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3360      	adds	r3, #96	; 0x60
 800600a:	461a      	mov	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	431a      	orrs	r2, r3
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3360      	adds	r3, #96	; 0x60
 8006040:	461a      	mov	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	431a      	orrs	r2, r3
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	615a      	str	r2, [r3, #20]
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b087      	sub	sp, #28
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3330      	adds	r3, #48	; 0x30
 80060c2:	461a      	mov	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	f003 030c 	and.w	r3, r3, #12
 80060ce:	4413      	add	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	211f      	movs	r1, #31
 80060de:	fa01 f303 	lsl.w	r3, r1, r3
 80060e2:	43db      	mvns	r3, r3
 80060e4:	401a      	ands	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	0e9b      	lsrs	r3, r3, #26
 80060ea:	f003 011f 	and.w	r1, r3, #31
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	fa01 f303 	lsl.w	r3, r1, r3
 80060f8:	431a      	orrs	r2, r3
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800610a:	b480      	push	{r7}
 800610c:	b087      	sub	sp, #28
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3314      	adds	r3, #20
 800611a:	461a      	mov	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	0e5b      	lsrs	r3, r3, #25
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	4413      	add	r3, r2
 8006128:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	0d1b      	lsrs	r3, r3, #20
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	2107      	movs	r1, #7
 8006138:	fa01 f303 	lsl.w	r3, r1, r3
 800613c:	43db      	mvns	r3, r3
 800613e:	401a      	ands	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	0d1b      	lsrs	r3, r3, #20
 8006144:	f003 031f 	and.w	r3, r3, #31
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	fa01 f303 	lsl.w	r3, r1, r3
 800614e:	431a      	orrs	r2, r3
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006178:	43db      	mvns	r3, r3
 800617a:	401a      	ands	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f003 0318 	and.w	r3, r3, #24
 8006182:	4908      	ldr	r1, [pc, #32]	; (80061a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006184:	40d9      	lsrs	r1, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	400b      	ands	r3, r1
 800618a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618e:	431a      	orrs	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006196:	bf00      	nop
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	0007ffff 	.word	0x0007ffff

080061a8 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
  *          -  On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	330c      	adds	r3, #12
 80061b8:	4618      	mov	r0, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	0d1b      	lsrs	r3, r3, #20
 80061be:	f003 0103 	and.w	r1, r3, #3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f003 0201 	and.w	r2, r3, #1
 80061c8:	4613      	mov	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4403      	add	r3, r0
 80061d6:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 80061e2:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 80061e6:	43db      	mvns	r3, r3
 80061e8:	401a      	ands	r2, r3
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	400b      	ands	r3, r1
 80061f0:	431a      	orrs	r2, r3
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8006202:	b480      	push	{r7}
 8006204:	b087      	sub	sp, #28
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
 800620e:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3320      	adds	r3, #32
 8006214:	461a      	mov	r2, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	0d1b      	lsrs	r3, r3, #20
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	4413      	add	r3, r2
 8006222:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	0419      	lsls	r1, r3, #16
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	430b      	orrs	r3, r1
 8006234:	431a      	orrs	r2, r3
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 031f 	and.w	r3, r3, #31
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006272:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6093      	str	r3, [r2, #8]
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800629a:	d101      	bne.n	80062a0 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80062be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ea:	d101      	bne.n	80062f0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800630e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006312:	f043 0201 	orr.w	r2, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <LL_ADC_IsEnabled+0x18>
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <LL_ADC_IsEnabled+0x1a>
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800635c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006360:	f043 0204 	orr.w	r2, r3, #4
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d101      	bne.n	800638c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006388:	2301      	movs	r3, #1
 800638a:	e000      	b.n	800638e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d101      	bne.n	80063b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2280      	movs	r2, #128	; 0x80
 80063cc:	601a      	str	r2, [r3, #0]
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063e8:	601a      	str	r2, [r3, #0]
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006404:	601a      	str	r2, [r3, #0]
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	605a      	str	r2, [r3, #4]
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	605a      	str	r2, [r3, #4]
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	605a      	str	r2, [r3, #4]
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	605a      	str	r2, [r3, #4]
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	605a      	str	r2, [r3, #4]
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	605a      	str	r2, [r3, #4]
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
	...

080064d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80064d4:	b590      	push	{r4, r7, lr}
 80064d6:	b089      	sub	sp, #36	; 0x24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e1ad      	b.n	800684a <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d109      	bne.n	8006510 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7fd fd99 	bl	8004034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff feb6 	bl	8006286 <LL_ADC_IsDeepPowerDownEnabled>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d004      	beq.n	800652a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fe9c 	bl	8006262 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fed1 	bl	80062d6 <LL_ADC_IsInternalRegulatorEnabled>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d113      	bne.n	8006562 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f7ff feb5 	bl	80062ae <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006544:	4b9e      	ldr	r3, [pc, #632]	; (80067c0 <HAL_ADC_Init+0x2ec>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	099b      	lsrs	r3, r3, #6
 800654a:	4a9e      	ldr	r2, [pc, #632]	; (80067c4 <HAL_ADC_Init+0x2f0>)
 800654c:	fba2 2303 	umull	r2, r3, r2, r3
 8006550:	099b      	lsrs	r3, r3, #6
 8006552:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006554:	e002      	b.n	800655c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	3b01      	subs	r3, #1
 800655a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f9      	bne.n	8006556 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff feb5 	bl	80062d6 <LL_ADC_IsInternalRegulatorEnabled>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10d      	bne.n	800658e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	f043 0210 	orr.w	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006582:	f043 0201 	orr.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff feee 	bl	8006374 <LL_ADC_REG_IsConversionOngoing>
 8006598:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 8148 	bne.w	8006838 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f040 8144 	bne.w	8006838 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80065b8:	f043 0202 	orr.w	r2, r3, #2
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff feae 	bl	8006326 <LL_ADC_IsEnabled>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d141      	bne.n	8006654 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065d8:	d004      	beq.n	80065e4 <HAL_ADC_Init+0x110>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a7a      	ldr	r2, [pc, #488]	; (80067c8 <HAL_ADC_Init+0x2f4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d10f      	bne.n	8006604 <HAL_ADC_Init+0x130>
 80065e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80065e8:	f7ff fe9d 	bl	8006326 <LL_ADC_IsEnabled>
 80065ec:	4604      	mov	r4, r0
 80065ee:	4876      	ldr	r0, [pc, #472]	; (80067c8 <HAL_ADC_Init+0x2f4>)
 80065f0:	f7ff fe99 	bl	8006326 <LL_ADC_IsEnabled>
 80065f4:	4603      	mov	r3, r0
 80065f6:	4323      	orrs	r3, r4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bf0c      	ite	eq
 80065fc:	2301      	moveq	r3, #1
 80065fe:	2300      	movne	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	e012      	b.n	800662a <HAL_ADC_Init+0x156>
 8006604:	4871      	ldr	r0, [pc, #452]	; (80067cc <HAL_ADC_Init+0x2f8>)
 8006606:	f7ff fe8e 	bl	8006326 <LL_ADC_IsEnabled>
 800660a:	4604      	mov	r4, r0
 800660c:	4870      	ldr	r0, [pc, #448]	; (80067d0 <HAL_ADC_Init+0x2fc>)
 800660e:	f7ff fe8a 	bl	8006326 <LL_ADC_IsEnabled>
 8006612:	4603      	mov	r3, r0
 8006614:	431c      	orrs	r4, r3
 8006616:	486f      	ldr	r0, [pc, #444]	; (80067d4 <HAL_ADC_Init+0x300>)
 8006618:	f7ff fe85 	bl	8006326 <LL_ADC_IsEnabled>
 800661c:	4603      	mov	r3, r0
 800661e:	4323      	orrs	r3, r4
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf0c      	ite	eq
 8006624:	2301      	moveq	r3, #1
 8006626:	2300      	movne	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d012      	beq.n	8006654 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006636:	d004      	beq.n	8006642 <HAL_ADC_Init+0x16e>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a62      	ldr	r2, [pc, #392]	; (80067c8 <HAL_ADC_Init+0x2f4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d101      	bne.n	8006646 <HAL_ADC_Init+0x172>
 8006642:	4a65      	ldr	r2, [pc, #404]	; (80067d8 <HAL_ADC_Init+0x304>)
 8006644:	e000      	b.n	8006648 <HAL_ADC_Init+0x174>
 8006646:	4a65      	ldr	r2, [pc, #404]	; (80067dc <HAL_ADC_Init+0x308>)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	4619      	mov	r1, r3
 800664e:	4610      	mov	r0, r2
 8006650:	f7ff fc4a 	bl	8005ee8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	7f5b      	ldrb	r3, [r3, #29]
 8006658:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800665e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006664:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800666a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006672:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006674:	4313      	orrs	r3, r2
 8006676:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800667e:	2b01      	cmp	r3, #1
 8006680:	d106      	bne.n	8006690 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	3b01      	subs	r3, #1
 8006688:	045b      	lsls	r3, r3, #17
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	4313      	orrs	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	4b4b      	ldr	r3, [pc, #300]	; (80067e0 <HAL_ADC_Init+0x30c>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	69b9      	ldr	r1, [r7, #24]
 80066bc:	430b      	orrs	r3, r1
 80066be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff fe4a 	bl	8006374 <LL_ADC_REG_IsConversionOngoing>
 80066e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fe57 	bl	800639a <LL_ADC_INJ_IsConversionOngoing>
 80066ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d17f      	bne.n	80067f4 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d17c      	bne.n	80067f4 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80066fe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006706:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006708:	4313      	orrs	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006716:	f023 0302 	bic.w	r3, r3, #2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6812      	ldr	r2, [r2, #0]
 800671e:	69b9      	ldr	r1, [r7, #24]
 8006720:	430b      	orrs	r3, r1
 8006722:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d017      	beq.n	800675c <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691a      	ldr	r2, [r3, #16]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800673a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006744:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6911      	ldr	r1, [r2, #16]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6812      	ldr	r2, [r2, #0]
 8006754:	430b      	orrs	r3, r1
 8006756:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800675a:	e013      	b.n	8006784 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800676a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800677c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006780:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800678a:	2b01      	cmp	r3, #1
 800678c:	d12a      	bne.n	80067e4 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006798:	f023 0304 	bic.w	r3, r3, #4
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067a4:	4311      	orrs	r1, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80067aa:	4311      	orrs	r1, r2
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067b0:	430a      	orrs	r2, r1
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	611a      	str	r2, [r3, #16]
 80067be:	e019      	b.n	80067f4 <HAL_ADC_Init+0x320>
 80067c0:	20000004 	.word	0x20000004
 80067c4:	053e2d63 	.word	0x053e2d63
 80067c8:	50000100 	.word	0x50000100
 80067cc:	50000400 	.word	0x50000400
 80067d0:	50000500 	.word	0x50000500
 80067d4:	50000600 	.word	0x50000600
 80067d8:	50000300 	.word	0x50000300
 80067dc:	50000700 	.word	0x50000700
 80067e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d10c      	bne.n	8006816 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f023 010f 	bic.w	r1, r3, #15
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	1e5a      	subs	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
 8006814:	e007      	b.n	8006826 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 020f 	bic.w	r2, r2, #15
 8006824:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682a:	f023 0303 	bic.w	r3, r3, #3
 800682e:	f043 0201 	orr.w	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	65da      	str	r2, [r3, #92]	; 0x5c
 8006836:	e007      	b.n	8006848 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	f043 0210 	orr.w	r2, r3, #16
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006848:	7ffb      	ldrb	r3, [r7, #31]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3724      	adds	r7, #36	; 0x24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd90      	pop	{r4, r7, pc}
 8006852:	bf00      	nop

08006854 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006868:	d004      	beq.n	8006874 <HAL_ADC_Start_DMA+0x20>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a58      	ldr	r2, [pc, #352]	; (80069d0 <HAL_ADC_Start_DMA+0x17c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d101      	bne.n	8006878 <HAL_ADC_Start_DMA+0x24>
 8006874:	4b57      	ldr	r3, [pc, #348]	; (80069d4 <HAL_ADC_Start_DMA+0x180>)
 8006876:	e000      	b.n	800687a <HAL_ADC_Start_DMA+0x26>
 8006878:	4b57      	ldr	r3, [pc, #348]	; (80069d8 <HAL_ADC_Start_DMA+0x184>)
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fce3 	bl	8006246 <LL_ADC_GetMultimode>
 8006880:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fd74 	bl	8006374 <LL_ADC_REG_IsConversionOngoing>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	f040 8096 	bne.w	80069c0 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_ADC_Start_DMA+0x4e>
 800689e:	2302      	movs	r3, #2
 80068a0:	e091      	b.n	80069c6 <HAL_ADC_Start_DMA+0x172>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b05      	cmp	r3, #5
 80068b4:	d002      	beq.n	80068bc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b09      	cmp	r3, #9
 80068ba:	d17a      	bne.n	80069b2 <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 feef 	bl	80076a0 <ADC_Enable>
 80068c2:	4603      	mov	r3, r0
 80068c4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80068c6:	7dfb      	ldrb	r3, [r7, #23]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d16d      	bne.n	80069a8 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a3a      	ldr	r2, [pc, #232]	; (80069d0 <HAL_ADC_Start_DMA+0x17c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d009      	beq.n	80068fe <HAL_ADC_Start_DMA+0xaa>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a3b      	ldr	r2, [pc, #236]	; (80069dc <HAL_ADC_Start_DMA+0x188>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d002      	beq.n	80068fa <HAL_ADC_Start_DMA+0xa6>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	e003      	b.n	8006902 <HAL_ADC_Start_DMA+0xae>
 80068fa:	4b39      	ldr	r3, [pc, #228]	; (80069e0 <HAL_ADC_Start_DMA+0x18c>)
 80068fc:	e001      	b.n	8006902 <HAL_ADC_Start_DMA+0xae>
 80068fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	6812      	ldr	r2, [r2, #0]
 8006906:	4293      	cmp	r3, r2
 8006908:	d002      	beq.n	8006910 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d105      	bne.n	800691c <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006914:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d006      	beq.n	8006936 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800692c:	f023 0206 	bic.w	r2, r3, #6
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	661a      	str	r2, [r3, #96]	; 0x60
 8006934:	e002      	b.n	800693c <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006940:	4a28      	ldr	r2, [pc, #160]	; (80069e4 <HAL_ADC_Start_DMA+0x190>)
 8006942:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006948:	4a27      	ldr	r2, [pc, #156]	; (80069e8 <HAL_ADC_Start_DMA+0x194>)
 800694a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006950:	4a26      	ldr	r2, [pc, #152]	; (80069ec <HAL_ADC_Start_DMA+0x198>)
 8006952:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	221c      	movs	r2, #28
 800695a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0210 	orr.w	r2, r2, #16
 8006972:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0201 	orr.w	r2, r2, #1
 8006982:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3340      	adds	r3, #64	; 0x40
 800698e:	4619      	mov	r1, r3
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f001 fa86 	bl	8007ea4 <HAL_DMA_Start_IT>
 8006998:	4603      	mov	r3, r0
 800699a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff fcd3 	bl	800634c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80069a6:	e00d      	b.n	80069c4 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80069b0:	e008      	b.n	80069c4 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80069be:	e001      	b.n	80069c4 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80069c0:	2302      	movs	r3, #2
 80069c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	50000100 	.word	0x50000100
 80069d4:	50000300 	.word	0x50000300
 80069d8:	50000700 	.word	0x50000700
 80069dc:	50000500 	.word	0x50000500
 80069e0:	50000400 	.word	0x50000400
 80069e4:	08007755 	.word	0x08007755
 80069e8:	0800782d 	.word	0x0800782d
 80069ec:	08007849 	.word	0x08007849

080069f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b0b6      	sub	sp, #216	; 0xd8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d102      	bne.n	8006a50 <HAL_ADC_ConfigChannel+0x24>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	f000 bc12 	b.w	8007274 <HAL_ADC_ConfigChannel+0x848>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff fc89 	bl	8006374 <LL_ADC_REG_IsConversionOngoing>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f040 83f2 	bne.w	800724e <HAL_ADC_ConfigChannel+0x822>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	6859      	ldr	r1, [r3, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	f7ff fb1b 	bl	80060b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7ff fc77 	bl	8006374 <LL_ADC_REG_IsConversionOngoing>
 8006a86:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fc83 	bl	800639a <LL_ADC_INJ_IsConversionOngoing>
 8006a94:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f040 81d9 	bne.w	8006e54 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f040 81d4 	bne.w	8006e54 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab4:	d10f      	bne.n	8006ad6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	f7ff fb22 	bl	800610a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff fac9 	bl	8006066 <LL_ADC_SetSamplingTimeCommonConfig>
 8006ad4:	e00e      	b.n	8006af4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6819      	ldr	r1, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f7ff fb11 	bl	800610a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2100      	movs	r1, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff fab9 	bl	8006066 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	08db      	lsrs	r3, r3, #3
 8006b00:	f003 0303 	and.w	r3, r3, #3
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d022      	beq.n	8006b5c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6919      	ldr	r1, [r3, #16]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b26:	f7ff fa13 	bl	8005f50 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6919      	ldr	r1, [r3, #16]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	461a      	mov	r2, r3
 8006b38:	f7ff fa5f 	bl	8005ffa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	6919      	ldr	r1, [r3, #16]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	7f1b      	ldrb	r3, [r3, #28]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d102      	bne.n	8006b52 <HAL_ADC_ConfigChannel+0x126>
 8006b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b50:	e000      	b.n	8006b54 <HAL_ADC_ConfigChannel+0x128>
 8006b52:	2300      	movs	r3, #0
 8006b54:	461a      	mov	r2, r3
 8006b56:	f7ff fa6b 	bl	8006030 <LL_ADC_SetOffsetSaturation>
 8006b5a:	e17b      	b.n	8006e54 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2100      	movs	r1, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff fa18 	bl	8005f98 <LL_ADC_GetOffsetChannel>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <HAL_ADC_ConfigChannel+0x15c>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2100      	movs	r1, #0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff fa0d 	bl	8005f98 <LL_ADC_GetOffsetChannel>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	0e9b      	lsrs	r3, r3, #26
 8006b82:	f003 021f 	and.w	r2, r3, #31
 8006b86:	e01e      	b.n	8006bc6 <HAL_ADC_ConfigChannel+0x19a>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fa02 	bl	8005f98 <LL_ADC_GetOffsetChannel>
 8006b94:	4603      	mov	r3, r0
 8006b96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b9e:	fa93 f3a3 	rbit	r3, r3
 8006ba2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006baa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006bb6:	2320      	movs	r3, #32
 8006bb8:	e004      	b.n	8006bc4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006bba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bbe:	fab3 f383 	clz	r3, r3
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d105      	bne.n	8006bde <HAL_ADC_ConfigChannel+0x1b2>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	0e9b      	lsrs	r3, r3, #26
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	e018      	b.n	8006c10 <HAL_ADC_ConfigChannel+0x1e4>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006bea:	fa93 f3a3 	rbit	r3, r3
 8006bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006c02:	2320      	movs	r3, #32
 8006c04:	e004      	b.n	8006c10 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c0a:	fab3 f383 	clz	r3, r3
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d106      	bne.n	8006c22 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff f9d1 	bl	8005fc4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2101      	movs	r1, #1
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff f9b5 	bl	8005f98 <LL_ADC_GetOffsetChannel>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <HAL_ADC_ConfigChannel+0x222>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff f9aa 	bl	8005f98 <LL_ADC_GetOffsetChannel>
 8006c44:	4603      	mov	r3, r0
 8006c46:	0e9b      	lsrs	r3, r3, #26
 8006c48:	f003 021f 	and.w	r2, r3, #31
 8006c4c:	e01e      	b.n	8006c8c <HAL_ADC_ConfigChannel+0x260>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2101      	movs	r1, #1
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff f99f 	bl	8005f98 <LL_ADC_GetOffsetChannel>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c64:	fa93 f3a3 	rbit	r3, r3
 8006c68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006c7c:	2320      	movs	r3, #32
 8006c7e:	e004      	b.n	8006c8a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c84:	fab3 f383 	clz	r3, r3
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <HAL_ADC_ConfigChannel+0x278>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	0e9b      	lsrs	r3, r3, #26
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	e018      	b.n	8006cd6 <HAL_ADC_ConfigChannel+0x2aa>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cb0:	fa93 f3a3 	rbit	r3, r3
 8006cb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006cc8:	2320      	movs	r3, #32
 8006cca:	e004      	b.n	8006cd6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cd0:	fab3 f383 	clz	r3, r3
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d106      	bne.n	8006ce8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7ff f96e 	bl	8005fc4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2102      	movs	r1, #2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff f952 	bl	8005f98 <LL_ADC_GetOffsetChannel>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <HAL_ADC_ConfigChannel+0x2e8>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2102      	movs	r1, #2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff f947 	bl	8005f98 <LL_ADC_GetOffsetChannel>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	0e9b      	lsrs	r3, r3, #26
 8006d0e:	f003 021f 	and.w	r2, r3, #31
 8006d12:	e01e      	b.n	8006d52 <HAL_ADC_ConfigChannel+0x326>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2102      	movs	r1, #2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff f93c 	bl	8005f98 <LL_ADC_GetOffsetChannel>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d2a:	fa93 f3a3 	rbit	r3, r3
 8006d2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006d32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006d42:	2320      	movs	r3, #32
 8006d44:	e004      	b.n	8006d50 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d4a:	fab3 f383 	clz	r3, r3
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d105      	bne.n	8006d6a <HAL_ADC_ConfigChannel+0x33e>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	0e9b      	lsrs	r3, r3, #26
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	e016      	b.n	8006d98 <HAL_ADC_ConfigChannel+0x36c>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d76:	fa93 f3a3 	rbit	r3, r3
 8006d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006d7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006d8a:	2320      	movs	r3, #32
 8006d8c:	e004      	b.n	8006d98 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d92:	fab3 f383 	clz	r3, r3
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d106      	bne.n	8006daa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2200      	movs	r2, #0
 8006da2:	2102      	movs	r1, #2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff f90d 	bl	8005fc4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2103      	movs	r1, #3
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff f8f1 	bl	8005f98 <LL_ADC_GetOffsetChannel>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <HAL_ADC_ConfigChannel+0x3aa>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2103      	movs	r1, #3
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff f8e6 	bl	8005f98 <LL_ADC_GetOffsetChannel>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	0e9b      	lsrs	r3, r3, #26
 8006dd0:	f003 021f 	and.w	r2, r3, #31
 8006dd4:	e017      	b.n	8006e06 <HAL_ADC_ConfigChannel+0x3da>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2103      	movs	r1, #3
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff f8db 	bl	8005f98 <LL_ADC_GetOffsetChannel>
 8006de2:	4603      	mov	r3, r0
 8006de4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006de8:	fa93 f3a3 	rbit	r3, r3
 8006dec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006df0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006df8:	2320      	movs	r3, #32
 8006dfa:	e003      	b.n	8006e04 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dfe:	fab3 f383 	clz	r3, r3
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d105      	bne.n	8006e1e <HAL_ADC_ConfigChannel+0x3f2>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	0e9b      	lsrs	r3, r3, #26
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	e011      	b.n	8006e42 <HAL_ADC_ConfigChannel+0x416>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e26:	fa93 f3a3 	rbit	r3, r3
 8006e2a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006e36:	2320      	movs	r3, #32
 8006e38:	e003      	b.n	8006e42 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3c:	fab3 f383 	clz	r3, r3
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d106      	bne.n	8006e54 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2103      	movs	r1, #3
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7ff f8b8 	bl	8005fc4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff fa64 	bl	8006326 <LL_ADC_IsEnabled>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f040 813d 	bne.w	80070e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6818      	ldr	r0, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6819      	ldr	r1, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f7ff f974 	bl	8006160 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	4aa2      	ldr	r2, [pc, #648]	; (8007108 <HAL_ADC_ConfigChannel+0x6dc>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	f040 812e 	bne.w	80070e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10b      	bne.n	8006eac <HAL_ADC_ConfigChannel+0x480>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	0e9b      	lsrs	r3, r3, #26
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	2b09      	cmp	r3, #9
 8006ea2:	bf94      	ite	ls
 8006ea4:	2301      	movls	r3, #1
 8006ea6:	2300      	movhi	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	e019      	b.n	8006ee0 <HAL_ADC_ConfigChannel+0x4b4>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb4:	fa93 f3a3 	rbit	r3, r3
 8006eb8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ebc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006ec4:	2320      	movs	r3, #32
 8006ec6:	e003      	b.n	8006ed0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006eca:	fab3 f383 	clz	r3, r3
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	2b09      	cmp	r3, #9
 8006ed8:	bf94      	ite	ls
 8006eda:	2301      	movls	r3, #1
 8006edc:	2300      	movhi	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d079      	beq.n	8006fd8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d107      	bne.n	8006f00 <HAL_ADC_ConfigChannel+0x4d4>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	0e9b      	lsrs	r3, r3, #26
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	069b      	lsls	r3, r3, #26
 8006efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006efe:	e015      	b.n	8006f2c <HAL_ADC_ConfigChannel+0x500>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f08:	fa93 f3a3 	rbit	r3, r3
 8006f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f10:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006f18:	2320      	movs	r3, #32
 8006f1a:	e003      	b.n	8006f24 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f1e:	fab3 f383 	clz	r3, r3
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	3301      	adds	r3, #1
 8006f26:	069b      	lsls	r3, r3, #26
 8006f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <HAL_ADC_ConfigChannel+0x520>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	0e9b      	lsrs	r3, r3, #26
 8006f3e:	3301      	adds	r3, #1
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	2101      	movs	r1, #1
 8006f46:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4a:	e017      	b.n	8006f7c <HAL_ADC_ConfigChannel+0x550>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f54:	fa93 f3a3 	rbit	r3, r3
 8006f58:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006f64:	2320      	movs	r3, #32
 8006f66:	e003      	b.n	8006f70 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f6a:	fab3 f383 	clz	r3, r3
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	3301      	adds	r3, #1
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	2101      	movs	r1, #1
 8006f78:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7c:	ea42 0103 	orr.w	r1, r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <HAL_ADC_ConfigChannel+0x576>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	0e9b      	lsrs	r3, r3, #26
 8006f92:	3301      	adds	r3, #1
 8006f94:	f003 021f 	and.w	r2, r3, #31
 8006f98:	4613      	mov	r3, r2
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	4413      	add	r3, r2
 8006f9e:	051b      	lsls	r3, r3, #20
 8006fa0:	e018      	b.n	8006fd4 <HAL_ADC_ConfigChannel+0x5a8>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	fa93 f3a3 	rbit	r3, r3
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006fba:	2320      	movs	r3, #32
 8006fbc:	e003      	b.n	8006fc6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc0:	fab3 f383 	clz	r3, r3
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	f003 021f 	and.w	r2, r3, #31
 8006fcc:	4613      	mov	r3, r2
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	4413      	add	r3, r2
 8006fd2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	e07e      	b.n	80070d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d107      	bne.n	8006ff4 <HAL_ADC_ConfigChannel+0x5c8>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	0e9b      	lsrs	r3, r3, #26
 8006fea:	3301      	adds	r3, #1
 8006fec:	069b      	lsls	r3, r3, #26
 8006fee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ff2:	e015      	b.n	8007020 <HAL_ADC_ConfigChannel+0x5f4>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffc:	fa93 f3a3 	rbit	r3, r3
 8007000:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800700c:	2320      	movs	r3, #32
 800700e:	e003      	b.n	8007018 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	fab3 f383 	clz	r3, r3
 8007016:	b2db      	uxtb	r3, r3
 8007018:	3301      	adds	r3, #1
 800701a:	069b      	lsls	r3, r3, #26
 800701c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007028:	2b00      	cmp	r3, #0
 800702a:	d109      	bne.n	8007040 <HAL_ADC_ConfigChannel+0x614>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	0e9b      	lsrs	r3, r3, #26
 8007032:	3301      	adds	r3, #1
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	2101      	movs	r1, #1
 800703a:	fa01 f303 	lsl.w	r3, r1, r3
 800703e:	e017      	b.n	8007070 <HAL_ADC_ConfigChannel+0x644>
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	fa93 f3a3 	rbit	r3, r3
 800704c:	61fb      	str	r3, [r7, #28]
  return result;
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007058:	2320      	movs	r3, #32
 800705a:	e003      	b.n	8007064 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	fab3 f383 	clz	r3, r3
 8007062:	b2db      	uxtb	r3, r3
 8007064:	3301      	adds	r3, #1
 8007066:	f003 031f 	and.w	r3, r3, #31
 800706a:	2101      	movs	r1, #1
 800706c:	fa01 f303 	lsl.w	r3, r1, r3
 8007070:	ea42 0103 	orr.w	r1, r2, r3
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10d      	bne.n	800709c <HAL_ADC_ConfigChannel+0x670>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	0e9b      	lsrs	r3, r3, #26
 8007086:	3301      	adds	r3, #1
 8007088:	f003 021f 	and.w	r2, r3, #31
 800708c:	4613      	mov	r3, r2
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	4413      	add	r3, r2
 8007092:	3b1e      	subs	r3, #30
 8007094:	051b      	lsls	r3, r3, #20
 8007096:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800709a:	e01b      	b.n	80070d4 <HAL_ADC_ConfigChannel+0x6a8>
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	fa93 f3a3 	rbit	r3, r3
 80070a8:	613b      	str	r3, [r7, #16]
  return result;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80070b4:	2320      	movs	r3, #32
 80070b6:	e003      	b.n	80070c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	fab3 f383 	clz	r3, r3
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	3301      	adds	r3, #1
 80070c2:	f003 021f 	and.w	r2, r3, #31
 80070c6:	4613      	mov	r3, r2
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	4413      	add	r3, r2
 80070cc:	3b1e      	subs	r3, #30
 80070ce:	051b      	lsls	r3, r3, #20
 80070d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070d4:	430b      	orrs	r3, r1
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	6892      	ldr	r2, [r2, #8]
 80070da:	4619      	mov	r1, r3
 80070dc:	f7ff f815 	bl	800610a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	4b09      	ldr	r3, [pc, #36]	; (800710c <HAL_ADC_ConfigChannel+0x6e0>)
 80070e6:	4013      	ands	r3, r2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 80bd 	beq.w	8007268 <HAL_ADC_ConfigChannel+0x83c>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070f6:	d004      	beq.n	8007102 <HAL_ADC_ConfigChannel+0x6d6>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a04      	ldr	r2, [pc, #16]	; (8007110 <HAL_ADC_ConfigChannel+0x6e4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d10a      	bne.n	8007118 <HAL_ADC_ConfigChannel+0x6ec>
 8007102:	4b04      	ldr	r3, [pc, #16]	; (8007114 <HAL_ADC_ConfigChannel+0x6e8>)
 8007104:	e009      	b.n	800711a <HAL_ADC_ConfigChannel+0x6ee>
 8007106:	bf00      	nop
 8007108:	407f0000 	.word	0x407f0000
 800710c:	80080000 	.word	0x80080000
 8007110:	50000100 	.word	0x50000100
 8007114:	50000300 	.word	0x50000300
 8007118:	4b58      	ldr	r3, [pc, #352]	; (800727c <HAL_ADC_ConfigChannel+0x850>)
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe ff0a 	bl	8005f34 <LL_ADC_GetCommonPathInternalCh>
 8007120:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a55      	ldr	r2, [pc, #340]	; (8007280 <HAL_ADC_ConfigChannel+0x854>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_ADC_ConfigChannel+0x70c>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a54      	ldr	r2, [pc, #336]	; (8007284 <HAL_ADC_ConfigChannel+0x858>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d139      	bne.n	80071ac <HAL_ADC_ConfigChannel+0x780>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800713c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d133      	bne.n	80071ac <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800714c:	d005      	beq.n	800715a <HAL_ADC_ConfigChannel+0x72e>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a4d      	ldr	r2, [pc, #308]	; (8007288 <HAL_ADC_ConfigChannel+0x85c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	f040 8084 	bne.w	8007262 <HAL_ADC_ConfigChannel+0x836>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007162:	d004      	beq.n	800716e <HAL_ADC_ConfigChannel+0x742>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a48      	ldr	r2, [pc, #288]	; (800728c <HAL_ADC_ConfigChannel+0x860>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d101      	bne.n	8007172 <HAL_ADC_ConfigChannel+0x746>
 800716e:	4a48      	ldr	r2, [pc, #288]	; (8007290 <HAL_ADC_ConfigChannel+0x864>)
 8007170:	e000      	b.n	8007174 <HAL_ADC_ConfigChannel+0x748>
 8007172:	4a42      	ldr	r2, [pc, #264]	; (800727c <HAL_ADC_ConfigChannel+0x850>)
 8007174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800717c:	4619      	mov	r1, r3
 800717e:	4610      	mov	r0, r2
 8007180:	f7fe fec5 	bl	8005f0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007184:	4b43      	ldr	r3, [pc, #268]	; (8007294 <HAL_ADC_ConfigChannel+0x868>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	099b      	lsrs	r3, r3, #6
 800718a:	4a43      	ldr	r2, [pc, #268]	; (8007298 <HAL_ADC_ConfigChannel+0x86c>)
 800718c:	fba2 2303 	umull	r2, r3, r2, r3
 8007190:	099a      	lsrs	r2, r3, #6
 8007192:	4613      	mov	r3, r2
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800719c:	e002      	b.n	80071a4 <HAL_ADC_ConfigChannel+0x778>
          {
            wait_loop_index--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f9      	bne.n	800719e <HAL_ADC_ConfigChannel+0x772>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80071aa:	e05a      	b.n	8007262 <HAL_ADC_ConfigChannel+0x836>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a3a      	ldr	r2, [pc, #232]	; (800729c <HAL_ADC_ConfigChannel+0x870>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d125      	bne.n	8007202 <HAL_ADC_ConfigChannel+0x7d6>
 80071b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d11f      	bne.n	8007202 <HAL_ADC_ConfigChannel+0x7d6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a31      	ldr	r2, [pc, #196]	; (800728c <HAL_ADC_ConfigChannel+0x860>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d104      	bne.n	80071d6 <HAL_ADC_ConfigChannel+0x7aa>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a33      	ldr	r2, [pc, #204]	; (80072a0 <HAL_ADC_ConfigChannel+0x874>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d047      	beq.n	8007266 <HAL_ADC_ConfigChannel+0x83a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071de:	d004      	beq.n	80071ea <HAL_ADC_ConfigChannel+0x7be>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a29      	ldr	r2, [pc, #164]	; (800728c <HAL_ADC_ConfigChannel+0x860>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d101      	bne.n	80071ee <HAL_ADC_ConfigChannel+0x7c2>
 80071ea:	4a29      	ldr	r2, [pc, #164]	; (8007290 <HAL_ADC_ConfigChannel+0x864>)
 80071ec:	e000      	b.n	80071f0 <HAL_ADC_ConfigChannel+0x7c4>
 80071ee:	4a23      	ldr	r2, [pc, #140]	; (800727c <HAL_ADC_ConfigChannel+0x850>)
 80071f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f7fe fe87 	bl	8005f0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007200:	e031      	b.n	8007266 <HAL_ADC_ConfigChannel+0x83a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a27      	ldr	r2, [pc, #156]	; (80072a4 <HAL_ADC_ConfigChannel+0x878>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d12d      	bne.n	8007268 <HAL_ADC_ConfigChannel+0x83c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800720c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d127      	bne.n	8007268 <HAL_ADC_ConfigChannel+0x83c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a1b      	ldr	r2, [pc, #108]	; (800728c <HAL_ADC_ConfigChannel+0x860>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d022      	beq.n	8007268 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800722a:	d004      	beq.n	8007236 <HAL_ADC_ConfigChannel+0x80a>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a16      	ldr	r2, [pc, #88]	; (800728c <HAL_ADC_ConfigChannel+0x860>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d101      	bne.n	800723a <HAL_ADC_ConfigChannel+0x80e>
 8007236:	4a16      	ldr	r2, [pc, #88]	; (8007290 <HAL_ADC_ConfigChannel+0x864>)
 8007238:	e000      	b.n	800723c <HAL_ADC_ConfigChannel+0x810>
 800723a:	4a10      	ldr	r2, [pc, #64]	; (800727c <HAL_ADC_ConfigChannel+0x850>)
 800723c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007240:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007244:	4619      	mov	r1, r3
 8007246:	4610      	mov	r0, r2
 8007248:	f7fe fe61 	bl	8005f0e <LL_ADC_SetCommonPathInternalCh>
 800724c:	e00c      	b.n	8007268 <HAL_ADC_ConfigChannel+0x83c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007252:	f043 0220 	orr.w	r2, r3, #32
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007260:	e002      	b.n	8007268 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007262:	bf00      	nop
 8007264:	e000      	b.n	8007268 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007266:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007270:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007274:	4618      	mov	r0, r3
 8007276:	37d8      	adds	r7, #216	; 0xd8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	50000700 	.word	0x50000700
 8007280:	c3210000 	.word	0xc3210000
 8007284:	90c00010 	.word	0x90c00010
 8007288:	50000600 	.word	0x50000600
 800728c:	50000100 	.word	0x50000100
 8007290:	50000300 	.word	0x50000300
 8007294:	20000004 	.word	0x20000004
 8007298:	053e2d63 	.word	0x053e2d63
 800729c:	c7520000 	.word	0xc7520000
 80072a0:	50000500 	.word	0x50000500
 80072a4:	cb840000 	.word	0xcb840000

080072a8 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08e      	sub	sp, #56	; 0x38
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072c0:	d003      	beq.n	80072ca <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80072c6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_ADC_AnalogWDGConfig+0x30>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e1dc      	b.n	8007692 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff f845 	bl	8006374 <LL_ADC_REG_IsConversionOngoing>
 80072ea:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff f852 	bl	800639a <LL_ADC_INJ_IsConversionOngoing>
 80072f6:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80072f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f040 8163 	bne.w	80075c6 <HAL_ADC_AnalogWDGConfig+0x31e>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	2b00      	cmp	r3, #0
 8007304:	f040 815f 	bne.w	80075c6 <HAL_ADC_AnalogWDGConfig+0x31e>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4aa6      	ldr	r2, [pc, #664]	; (80075a8 <HAL_ADC_AnalogWDGConfig+0x300>)
 800730e:	4293      	cmp	r3, r2
 8007310:	f040 8086 	bne.w	8007420 <HAL_ADC_AnalogWDGConfig+0x178>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800731c:	d042      	beq.n	80073a4 <HAL_ADC_AnalogWDGConfig+0xfc>
 800731e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007322:	d806      	bhi.n	8007332 <HAL_ADC_AnalogWDGConfig+0x8a>
 8007324:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007328:	d034      	beq.n	8007394 <HAL_ADC_AnalogWDGConfig+0xec>
 800732a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800732e:	d00a      	beq.n	8007346 <HAL_ADC_AnalogWDGConfig+0x9e>
 8007330:	e048      	b.n	80073c4 <HAL_ADC_AnalogWDGConfig+0x11c>
 8007332:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007336:	d03d      	beq.n	80073b4 <HAL_ADC_AnalogWDGConfig+0x10c>
 8007338:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800733c:	d01d      	beq.n	800737a <HAL_ADC_AnalogWDGConfig+0xd2>
 800733e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007342:	d00d      	beq.n	8007360 <HAL_ADC_AnalogWDGConfig+0xb8>
 8007344:	e03e      	b.n	80073c4 <HAL_ADC_AnalogWDGConfig+0x11c>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6818      	ldr	r0, [r3, #0]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8007352:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8007356:	461a      	mov	r2, r3
 8007358:	4993      	ldr	r1, [pc, #588]	; (80075a8 <HAL_ADC_AnalogWDGConfig+0x300>)
 800735a:	f7fe ff25 	bl	80061a8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 800735e:	e039      	b.n	80073d4 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800736c:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8007370:	461a      	mov	r2, r3
 8007372:	498d      	ldr	r1, [pc, #564]	; (80075a8 <HAL_ADC_AnalogWDGConfig+0x300>)
 8007374:	f7fe ff18 	bl	80061a8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8007378:	e02c      	b.n	80073d4 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8007386:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 800738a:	461a      	mov	r2, r3
 800738c:	4986      	ldr	r1, [pc, #536]	; (80075a8 <HAL_ADC_AnalogWDGConfig+0x300>)
 800738e:	f7fe ff0b 	bl	80061a8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8007392:	e01f      	b.n	80073d4 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a84      	ldr	r2, [pc, #528]	; (80075ac <HAL_ADC_AnalogWDGConfig+0x304>)
 800739a:	4983      	ldr	r1, [pc, #524]	; (80075a8 <HAL_ADC_AnalogWDGConfig+0x300>)
 800739c:	4618      	mov	r0, r3
 800739e:	f7fe ff03 	bl	80061a8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80073a2:	e017      	b.n	80073d4 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a81      	ldr	r2, [pc, #516]	; (80075b0 <HAL_ADC_AnalogWDGConfig+0x308>)
 80073aa:	497f      	ldr	r1, [pc, #508]	; (80075a8 <HAL_ADC_AnalogWDGConfig+0x300>)
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fe fefb 	bl	80061a8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80073b2:	e00f      	b.n	80073d4 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a7e      	ldr	r2, [pc, #504]	; (80075b4 <HAL_ADC_AnalogWDGConfig+0x30c>)
 80073ba:	497b      	ldr	r1, [pc, #492]	; (80075a8 <HAL_ADC_AnalogWDGConfig+0x300>)
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fe fef3 	bl	80061a8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80073c2:	e007      	b.n	80073d4 <HAL_ADC_AnalogWDGConfig+0x12c>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2200      	movs	r2, #0
 80073ca:	4977      	ldr	r1, [pc, #476]	; (80075a8 <HAL_ADC_AnalogWDGConfig+0x300>)
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe feeb 	bl	80061a8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80073d2:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	699a      	ldr	r2, [r3, #24]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe ffe0 	bl	80063c0 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	7b1b      	ldrb	r3, [r3, #12]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d105      	bne.n	8007414 <HAL_ADC_AnalogWDGConfig+0x16c>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff f800 	bl	8006412 <LL_ADC_EnableIT_AWD1>
 8007412:	e0d8      	b.n	80075c6 <HAL_ADC_AnalogWDGConfig+0x31e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff f82a 	bl	8006472 <LL_ADC_DisableIT_AWD1>
 800741e:	e0d2      	b.n	80075c6 <HAL_ADC_AnalogWDGConfig+0x31e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007428:	d077      	beq.n	800751a <HAL_ADC_AnalogWDGConfig+0x272>
 800742a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800742e:	d806      	bhi.n	800743e <HAL_ADC_AnalogWDGConfig+0x196>
 8007430:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007434:	d071      	beq.n	800751a <HAL_ADC_AnalogWDGConfig+0x272>
 8007436:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800743a:	d009      	beq.n	8007450 <HAL_ADC_AnalogWDGConfig+0x1a8>
 800743c:	e076      	b.n	800752c <HAL_ADC_AnalogWDGConfig+0x284>
 800743e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007442:	d06a      	beq.n	800751a <HAL_ADC_AnalogWDGConfig+0x272>
 8007444:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007448:	d002      	beq.n	8007450 <HAL_ADC_AnalogWDGConfig+0x1a8>
 800744a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800744e:	d16d      	bne.n	800752c <HAL_ADC_AnalogWDGConfig+0x284>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a58      	ldr	r2, [pc, #352]	; (80075b8 <HAL_ADC_AnalogWDGConfig+0x310>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d12f      	bne.n	80074ba <HAL_ADC_AnalogWDGConfig+0x212>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007462:	2b00      	cmp	r3, #0
 8007464:	d108      	bne.n	8007478 <HAL_ADC_AnalogWDGConfig+0x1d0>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	0e9b      	lsrs	r3, r3, #26
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2201      	movs	r2, #1
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	e016      	b.n	80074a6 <HAL_ADC_AnalogWDGConfig+0x1fe>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	fa93 f3a3 	rbit	r3, r3
 8007484:	61bb      	str	r3, [r7, #24]
  return result;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <HAL_ADC_AnalogWDGConfig+0x1ec>
    return 32U;
 8007490:	2320      	movs	r3, #32
 8007492:	e003      	b.n	800749c <HAL_ADC_AnalogWDGConfig+0x1f4>
  return __builtin_clz(value);
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	fab3 f383 	clz	r3, r3
 800749a:	b2db      	uxtb	r3, r3
 800749c:	f003 031f 	and.w	r3, r3, #31
 80074a0:	2201      	movs	r2, #1
 80074a2:	fa02 f303 	lsl.w	r3, r2, r3
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	430b      	orrs	r3, r1
 80074b4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80074b8:	e041      	b.n	800753e <HAL_ADC_AnalogWDGConfig+0x296>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d108      	bne.n	80074d8 <HAL_ADC_AnalogWDGConfig+0x230>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	0e9b      	lsrs	r3, r3, #26
 80074cc:	f003 031f 	and.w	r3, r3, #31
 80074d0:	2201      	movs	r2, #1
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	e016      	b.n	8007506 <HAL_ADC_AnalogWDGConfig+0x25e>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	fa93 f3a3 	rbit	r3, r3
 80074e4:	60fb      	str	r3, [r7, #12]
  return result;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <HAL_ADC_AnalogWDGConfig+0x24c>
    return 32U;
 80074f0:	2320      	movs	r3, #32
 80074f2:	e003      	b.n	80074fc <HAL_ADC_AnalogWDGConfig+0x254>
  return __builtin_clz(value);
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	fab3 f383 	clz	r3, r3
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	2201      	movs	r2, #1
 8007502:	fa02 f303 	lsl.w	r3, r2, r3
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6812      	ldr	r2, [r2, #0]
 800750a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6812      	ldr	r2, [r2, #0]
 8007512:	430b      	orrs	r3, r1
 8007514:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8007518:	e011      	b.n	800753e <HAL_ADC_AnalogWDGConfig+0x296>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a24      	ldr	r2, [pc, #144]	; (80075b4 <HAL_ADC_AnalogWDGConfig+0x30c>)
 8007524:	4619      	mov	r1, r3
 8007526:	f7fe fe3f 	bl	80061a8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800752a:	e008      	b.n	800753e <HAL_ADC_AnalogWDGConfig+0x296>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2200      	movs	r2, #0
 8007536:	4619      	mov	r1, r3
 8007538:	f7fe fe36 	bl	80061a8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800753c:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a1d      	ldr	r2, [pc, #116]	; (80075b8 <HAL_ADC_AnalogWDGConfig+0x310>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d11a      	bne.n	800757e <HAL_ADC_AnalogWDGConfig+0x2d6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4618      	mov	r0, r3
 800755a:	f7fe ff3e 	bl	80063da <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	7b1b      	ldrb	r3, [r3, #12]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d105      	bne.n	8007572 <HAL_ADC_AnalogWDGConfig+0x2ca>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe ff61 	bl	8006432 <LL_ADC_EnableIT_AWD2>
 8007570:	e029      	b.n	80075c6 <HAL_ADC_AnalogWDGConfig+0x31e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe ff8b 	bl	8006492 <LL_ADC_DisableIT_AWD2>
 800757c:	e023      	b.n	80075c6 <HAL_ADC_AnalogWDGConfig+0x31e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007582:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe ff31 	bl	80063f6 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	7b1b      	ldrb	r3, [r3, #12]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d10f      	bne.n	80075bc <HAL_ADC_AnalogWDGConfig+0x314>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe ff56 	bl	8006452 <LL_ADC_EnableIT_AWD3>
 80075a6:	e00e      	b.n	80075c6 <HAL_ADC_AnalogWDGConfig+0x31e>
 80075a8:	7dc00000 	.word	0x7dc00000
 80075ac:	0087ffff 	.word	0x0087ffff
 80075b0:	0107ffff 	.word	0x0107ffff
 80075b4:	0187ffff 	.word	0x0187ffff
 80075b8:	0017ffff 	.word	0x0017ffff
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe ff76 	bl	80064b2 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a34      	ldr	r2, [pc, #208]	; (800769c <HAL_ADC_AnalogWDGConfig+0x3f4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d118      	bne.n	8007602 <HAL_ADC_AnalogWDGConfig+0x35a>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	08db      	lsrs	r3, r3, #3
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	fa02 f303 	lsl.w	r3, r2, r3
 80075e6:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	695a      	ldr	r2, [r3, #20]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	08db      	lsrs	r3, r3, #3
 80075f4:	f003 0303 	and.w	r3, r3, #3
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007600:	e039      	b.n	8007676 <HAL_ADC_AnalogWDGConfig+0x3ce>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f003 0318 	and.w	r3, r3, #24
 800760c:	2b18      	cmp	r3, #24
 800760e:	d011      	beq.n	8007634 <HAL_ADC_AnalogWDGConfig+0x38c>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	6919      	ldr	r1, [r3, #16]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	08db      	lsrs	r3, r3, #3
 800761c:	f003 0203 	and.w	r2, r3, #3
 8007620:	4613      	mov	r3, r2
 8007622:	07db      	lsls	r3, r3, #31
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	3304      	adds	r3, #4
 800762a:	f003 031f 	and.w	r3, r3, #31
 800762e:	fa21 f303 	lsr.w	r3, r1, r3
 8007632:	e002      	b.n	800763a <HAL_ADC_AnalogWDGConfig+0x392>
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f003 0318 	and.w	r3, r3, #24
 8007646:	2b18      	cmp	r3, #24
 8007648:	d011      	beq.n	800766e <HAL_ADC_AnalogWDGConfig+0x3c6>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	6959      	ldr	r1, [r3, #20]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f003 0203 	and.w	r2, r3, #3
 800765a:	4613      	mov	r3, r2
 800765c:	07db      	lsls	r3, r3, #31
 800765e:	1a9b      	subs	r3, r3, r2
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	3304      	adds	r3, #4
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	fa21 f303 	lsr.w	r3, r1, r3
 800766c:	e002      	b.n	8007674 <HAL_ADC_AnalogWDGConfig+0x3cc>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6819      	ldr	r1, [r3, #0]
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007682:	f7fe fdbe 	bl	8006202 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800768e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007692:	4618      	mov	r0, r3
 8007694:	3738      	adds	r7, #56	; 0x38
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	7dc00000 	.word	0x7dc00000

080076a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fe fe3a 	bl	8006326 <LL_ADC_IsEnabled>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d146      	bne.n	8007746 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	4b24      	ldr	r3, [pc, #144]	; (8007750 <ADC_Enable+0xb0>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00d      	beq.n	80076e2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ca:	f043 0210 	orr.w	r2, r3, #16
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076d6:	f043 0201 	orr.w	r2, r3, #1
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e032      	b.n	8007748 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fe09 	bl	80062fe <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80076ec:	f7fe fbce 	bl	8005e8c <HAL_GetTick>
 80076f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80076f2:	e021      	b.n	8007738 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe fe14 	bl	8006326 <LL_ADC_IsEnabled>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe fdf8 	bl	80062fe <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800770e:	f7fe fbbd 	bl	8005e8c <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d90d      	bls.n	8007738 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007720:	f043 0210 	orr.w	r2, r3, #16
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800772c:	f043 0201 	orr.w	r2, r3, #1
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e007      	b.n	8007748 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b01      	cmp	r3, #1
 8007744:	d1d6      	bne.n	80076f4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	8000003f 	.word	0x8000003f

08007754 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007760:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007766:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800776a:	2b00      	cmp	r3, #0
 800776c:	d14b      	bne.n	8007806 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007772:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0308 	and.w	r3, r3, #8
 8007784:	2b00      	cmp	r3, #0
 8007786:	d021      	beq.n	80077cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4618      	mov	r0, r3
 800778e:	f7fe fc7d 	bl	800608c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d032      	beq.n	80077fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d12b      	bne.n	80077fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d11f      	bne.n	80077fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c2:	f043 0201 	orr.w	r2, r3, #1
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80077ca:	e018      	b.n	80077fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d111      	bne.n	80077fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d105      	bne.n	80077fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f6:	f043 0201 	orr.w	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff f8f6 	bl	80069f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007804:	e00e      	b.n	8007824 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780a:	f003 0310 	and.w	r3, r3, #16
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff f900 	bl	8006a18 <HAL_ADC_ErrorCallback>
}
 8007818:	e004      	b.n	8007824 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff f8e2 	bl	8006a04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007866:	f043 0204 	orr.w	r2, r3, #4
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f7ff f8d2 	bl	8006a18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007874:	bf00      	nop
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <LL_ADC_IsEnabled>:
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <LL_ADC_IsEnabled+0x18>
 8007890:	2301      	movs	r3, #1
 8007892:	e000      	b.n	8007896 <LL_ADC_IsEnabled+0x1a>
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80078a2:	b480      	push	{r7}
 80078a4:	b083      	sub	sp, #12
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 0304 	and.w	r3, r3, #4
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	d101      	bne.n	80078ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e000      	b.n	80078bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80078c8:	b590      	push	{r4, r7, lr}
 80078ca:	b0a1      	sub	sp, #132	; 0x84
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d101      	bne.n	80078e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e0e3      	b.n	8007aae <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078f6:	d102      	bne.n	80078fe <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80078f8:	4b6f      	ldr	r3, [pc, #444]	; (8007ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80078fa:	60bb      	str	r3, [r7, #8]
 80078fc:	e009      	b.n	8007912 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a6e      	ldr	r2, [pc, #440]	; (8007abc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d102      	bne.n	800790e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8007908:	4b6d      	ldr	r3, [pc, #436]	; (8007ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800790a:	60bb      	str	r3, [r7, #8]
 800790c:	e001      	b.n	8007912 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800790e:	2300      	movs	r3, #0
 8007910:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10b      	bne.n	8007930 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791c:	f043 0220 	orr.w	r2, r3, #32
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e0be      	b.n	8007aae <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	4618      	mov	r0, r3
 8007934:	f7ff ffb5 	bl	80078a2 <LL_ADC_REG_IsConversionOngoing>
 8007938:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f7ff ffaf 	bl	80078a2 <LL_ADC_REG_IsConversionOngoing>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	f040 80a0 	bne.w	8007a8c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800794c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800794e:	2b00      	cmp	r3, #0
 8007950:	f040 809c 	bne.w	8007a8c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800795c:	d004      	beq.n	8007968 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a55      	ldr	r2, [pc, #340]	; (8007ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d101      	bne.n	800796c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8007968:	4b56      	ldr	r3, [pc, #344]	; (8007ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800796a:	e000      	b.n	800796e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800796c:	4b56      	ldr	r3, [pc, #344]	; (8007ac8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800796e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d04b      	beq.n	8007a10 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	6859      	ldr	r1, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800798a:	035b      	lsls	r3, r3, #13
 800798c:	430b      	orrs	r3, r1
 800798e:	431a      	orrs	r2, r3
 8007990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007992:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800799c:	d004      	beq.n	80079a8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a45      	ldr	r2, [pc, #276]	; (8007ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d10f      	bne.n	80079c8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80079a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80079ac:	f7ff ff66 	bl	800787c <LL_ADC_IsEnabled>
 80079b0:	4604      	mov	r4, r0
 80079b2:	4841      	ldr	r0, [pc, #260]	; (8007ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80079b4:	f7ff ff62 	bl	800787c <LL_ADC_IsEnabled>
 80079b8:	4603      	mov	r3, r0
 80079ba:	4323      	orrs	r3, r4
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bf0c      	ite	eq
 80079c0:	2301      	moveq	r3, #1
 80079c2:	2300      	movne	r3, #0
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	e012      	b.n	80079ee <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80079c8:	483c      	ldr	r0, [pc, #240]	; (8007abc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80079ca:	f7ff ff57 	bl	800787c <LL_ADC_IsEnabled>
 80079ce:	4604      	mov	r4, r0
 80079d0:	483b      	ldr	r0, [pc, #236]	; (8007ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079d2:	f7ff ff53 	bl	800787c <LL_ADC_IsEnabled>
 80079d6:	4603      	mov	r3, r0
 80079d8:	431c      	orrs	r4, r3
 80079da:	483c      	ldr	r0, [pc, #240]	; (8007acc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80079dc:	f7ff ff4e 	bl	800787c <LL_ADC_IsEnabled>
 80079e0:	4603      	mov	r3, r0
 80079e2:	4323      	orrs	r3, r4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	bf0c      	ite	eq
 80079e8:	2301      	moveq	r3, #1
 80079ea:	2300      	movne	r3, #0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d056      	beq.n	8007aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80079f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80079fa:	f023 030f 	bic.w	r3, r3, #15
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	6811      	ldr	r1, [r2, #0]
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	6892      	ldr	r2, [r2, #8]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a0c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007a0e:	e047      	b.n	8007aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a1a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a24:	d004      	beq.n	8007a30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a23      	ldr	r2, [pc, #140]	; (8007ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d10f      	bne.n	8007a50 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8007a30:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007a34:	f7ff ff22 	bl	800787c <LL_ADC_IsEnabled>
 8007a38:	4604      	mov	r4, r0
 8007a3a:	481f      	ldr	r0, [pc, #124]	; (8007ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007a3c:	f7ff ff1e 	bl	800787c <LL_ADC_IsEnabled>
 8007a40:	4603      	mov	r3, r0
 8007a42:	4323      	orrs	r3, r4
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	bf0c      	ite	eq
 8007a48:	2301      	moveq	r3, #1
 8007a4a:	2300      	movne	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	e012      	b.n	8007a76 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8007a50:	481a      	ldr	r0, [pc, #104]	; (8007abc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8007a52:	f7ff ff13 	bl	800787c <LL_ADC_IsEnabled>
 8007a56:	4604      	mov	r4, r0
 8007a58:	4819      	ldr	r0, [pc, #100]	; (8007ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a5a:	f7ff ff0f 	bl	800787c <LL_ADC_IsEnabled>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	431c      	orrs	r4, r3
 8007a62:	481a      	ldr	r0, [pc, #104]	; (8007acc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007a64:	f7ff ff0a 	bl	800787c <LL_ADC_IsEnabled>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	4323      	orrs	r3, r4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	bf0c      	ite	eq
 8007a70:	2301      	moveq	r3, #1
 8007a72:	2300      	movne	r3, #0
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d012      	beq.n	8007aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007a82:	f023 030f 	bic.w	r3, r3, #15
 8007a86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007a88:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007a8a:	e009      	b.n	8007aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a90:	f043 0220 	orr.w	r2, r3, #32
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007a9e:	e000      	b.n	8007aa2 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007aa0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007aaa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3784      	adds	r7, #132	; 0x84
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd90      	pop	{r4, r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	50000100 	.word	0x50000100
 8007abc:	50000400 	.word	0x50000400
 8007ac0:	50000500 	.word	0x50000500
 8007ac4:	50000300 	.word	0x50000300
 8007ac8:	50000700 	.word	0x50000700
 8007acc:	50000600 	.word	0x50000600

08007ad0 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e023      	b.n	8007b2a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d106      	bne.n	8007afc <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7fc fb66 	bl	80041c8 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b44:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <__NVIC_SetPriorityGrouping+0x44>)
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b50:	4013      	ands	r3, r2
 8007b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b66:	4a04      	ldr	r2, [pc, #16]	; (8007b78 <__NVIC_SetPriorityGrouping+0x44>)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	60d3      	str	r3, [r2, #12]
}
 8007b6c:	bf00      	nop
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	e000ed00 	.word	0xe000ed00

08007b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b80:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <__NVIC_GetPriorityGrouping+0x18>)
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	0a1b      	lsrs	r3, r3, #8
 8007b86:	f003 0307 	and.w	r3, r3, #7
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	e000ed00 	.word	0xe000ed00

08007b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	db0b      	blt.n	8007bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	f003 021f 	and.w	r2, r3, #31
 8007bb0:	4907      	ldr	r1, [pc, #28]	; (8007bd0 <__NVIC_EnableIRQ+0x38>)
 8007bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bb6:	095b      	lsrs	r3, r3, #5
 8007bb8:	2001      	movs	r0, #1
 8007bba:	fa00 f202 	lsl.w	r2, r0, r2
 8007bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	e000e100 	.word	0xe000e100

08007bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	6039      	str	r1, [r7, #0]
 8007bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	db0a      	blt.n	8007bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	490c      	ldr	r1, [pc, #48]	; (8007c20 <__NVIC_SetPriority+0x4c>)
 8007bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bf2:	0112      	lsls	r2, r2, #4
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007bfc:	e00a      	b.n	8007c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	4908      	ldr	r1, [pc, #32]	; (8007c24 <__NVIC_SetPriority+0x50>)
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	3b04      	subs	r3, #4
 8007c0c:	0112      	lsls	r2, r2, #4
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	440b      	add	r3, r1
 8007c12:	761a      	strb	r2, [r3, #24]
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	e000e100 	.word	0xe000e100
 8007c24:	e000ed00 	.word	0xe000ed00

08007c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b089      	sub	sp, #36	; 0x24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	f1c3 0307 	rsb	r3, r3, #7
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	bf28      	it	cs
 8007c46:	2304      	movcs	r3, #4
 8007c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	2b06      	cmp	r3, #6
 8007c50:	d902      	bls.n	8007c58 <NVIC_EncodePriority+0x30>
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	3b03      	subs	r3, #3
 8007c56:	e000      	b.n	8007c5a <NVIC_EncodePriority+0x32>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	fa02 f303 	lsl.w	r3, r2, r3
 8007c66:	43da      	mvns	r2, r3
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	401a      	ands	r2, r3
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c70:	f04f 31ff 	mov.w	r1, #4294967295
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7a:	43d9      	mvns	r1, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c80:	4313      	orrs	r3, r2
         );
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3724      	adds	r7, #36	; 0x24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
	...

08007c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ca0:	d301      	bcc.n	8007ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e00f      	b.n	8007cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ca6:	4a0a      	ldr	r2, [pc, #40]	; (8007cd0 <SysTick_Config+0x40>)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007cae:	210f      	movs	r1, #15
 8007cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb4:	f7ff ff8e 	bl	8007bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007cb8:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <SysTick_Config+0x40>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007cbe:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <SysTick_Config+0x40>)
 8007cc0:	2207      	movs	r2, #7
 8007cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	e000e010 	.word	0xe000e010

08007cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff ff29 	bl	8007b34 <__NVIC_SetPriorityGrouping>
}
 8007ce2:	bf00      	nop
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b086      	sub	sp, #24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	607a      	str	r2, [r7, #4]
 8007cf6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007cf8:	f7ff ff40 	bl	8007b7c <__NVIC_GetPriorityGrouping>
 8007cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	68b9      	ldr	r1, [r7, #8]
 8007d02:	6978      	ldr	r0, [r7, #20]
 8007d04:	f7ff ff90 	bl	8007c28 <NVIC_EncodePriority>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d0e:	4611      	mov	r1, r2
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7ff ff5f 	bl	8007bd4 <__NVIC_SetPriority>
}
 8007d16:	bf00      	nop
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	4603      	mov	r3, r0
 8007d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7ff ff33 	bl	8007b98 <__NVIC_EnableIRQ>
}
 8007d32:	bf00      	nop
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b082      	sub	sp, #8
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff ffa4 	bl	8007c90 <SysTick_Config>
 8007d48:	4603      	mov	r3, r0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e08d      	b.n	8007e82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4b47      	ldr	r3, [pc, #284]	; (8007e8c <HAL_DMA_Init+0x138>)
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d80f      	bhi.n	8007d92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	4b45      	ldr	r3, [pc, #276]	; (8007e90 <HAL_DMA_Init+0x13c>)
 8007d7a:	4413      	add	r3, r2
 8007d7c:	4a45      	ldr	r2, [pc, #276]	; (8007e94 <HAL_DMA_Init+0x140>)
 8007d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d82:	091b      	lsrs	r3, r3, #4
 8007d84:	009a      	lsls	r2, r3, #2
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a42      	ldr	r2, [pc, #264]	; (8007e98 <HAL_DMA_Init+0x144>)
 8007d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8007d90:	e00e      	b.n	8007db0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	4b40      	ldr	r3, [pc, #256]	; (8007e9c <HAL_DMA_Init+0x148>)
 8007d9a:	4413      	add	r3, r2
 8007d9c:	4a3d      	ldr	r2, [pc, #244]	; (8007e94 <HAL_DMA_Init+0x140>)
 8007d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007da2:	091b      	lsrs	r3, r3, #4
 8007da4:	009a      	lsls	r2, r3, #2
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a3c      	ldr	r2, [pc, #240]	; (8007ea0 <HAL_DMA_Init+0x14c>)
 8007dae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f9b6 	bl	8008174 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e10:	d102      	bne.n	8007e18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e2c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d010      	beq.n	8007e58 <HAL_DMA_Init+0x104>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d80c      	bhi.n	8007e58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f9d6 	bl	80081f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007e54:	605a      	str	r2, [r3, #4]
 8007e56:	e008      	b.n	8007e6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	40020407 	.word	0x40020407
 8007e90:	bffdfff8 	.word	0xbffdfff8
 8007e94:	cccccccd 	.word	0xcccccccd
 8007e98:	40020000 	.word	0x40020000
 8007e9c:	bffdfbf8 	.word	0xbffdfbf8
 8007ea0:	40020400 	.word	0x40020400

08007ea4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <HAL_DMA_Start_IT+0x20>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e066      	b.n	8007f92 <HAL_DMA_Start_IT+0xee>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d155      	bne.n	8007f84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0201 	bic.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 f8fb 	bl	80080f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d008      	beq.n	8007f1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 020e 	orr.w	r2, r2, #14
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	e00f      	b.n	8007f3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0204 	bic.w	r2, r2, #4
 8007f2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 020a 	orr.w	r2, r2, #10
 8007f3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d007      	beq.n	8007f5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d007      	beq.n	8007f72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f042 0201 	orr.w	r2, r2, #1
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	e005      	b.n	8007f90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb6:	f003 031f 	and.w	r3, r3, #31
 8007fba:	2204      	movs	r2, #4
 8007fbc:	409a      	lsls	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d026      	beq.n	8008014 <HAL_DMA_IRQHandler+0x7a>
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d021      	beq.n	8008014 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d107      	bne.n	8007fee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0204 	bic.w	r2, r2, #4
 8007fec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	f003 021f 	and.w	r2, r3, #31
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffa:	2104      	movs	r1, #4
 8007ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8008000:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008006:	2b00      	cmp	r3, #0
 8008008:	d071      	beq.n	80080ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008012:	e06c      	b.n	80080ee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008018:	f003 031f 	and.w	r3, r3, #31
 800801c:	2202      	movs	r2, #2
 800801e:	409a      	lsls	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4013      	ands	r3, r2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d02e      	beq.n	8008086 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d029      	beq.n	8008086 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0320 	and.w	r3, r3, #32
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10b      	bne.n	8008058 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 020a 	bic.w	r2, r2, #10
 800804e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805c:	f003 021f 	and.w	r2, r3, #31
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008064:	2102      	movs	r1, #2
 8008066:	fa01 f202 	lsl.w	r2, r1, r2
 800806a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	2b00      	cmp	r3, #0
 800807a:	d038      	beq.n	80080ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008084:	e033      	b.n	80080ee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808a:	f003 031f 	and.w	r3, r3, #31
 800808e:	2208      	movs	r2, #8
 8008090:	409a      	lsls	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4013      	ands	r3, r2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d02a      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f003 0308 	and.w	r3, r3, #8
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d025      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 020e 	bic.w	r2, r2, #14
 80080b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b8:	f003 021f 	and.w	r2, r3, #31
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c0:	2101      	movs	r1, #1
 80080c2:	fa01 f202 	lsl.w	r2, r1, r2
 80080c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d004      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80080ee:	bf00      	nop
 80080f0:	bf00      	nop
}
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800810e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008114:	2b00      	cmp	r3, #0
 8008116:	d004      	beq.n	8008122 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008120:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008126:	f003 021f 	and.w	r2, r3, #31
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812e:	2101      	movs	r1, #1
 8008130:	fa01 f202 	lsl.w	r2, r1, r2
 8008134:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	2b10      	cmp	r3, #16
 8008144:	d108      	bne.n	8008158 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008156:	e007      	b.n	8008168 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	60da      	str	r2, [r3, #12]
}
 8008168:	bf00      	nop
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	4b16      	ldr	r3, [pc, #88]	; (80081dc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008184:	429a      	cmp	r2, r3
 8008186:	d802      	bhi.n	800818e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008188:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800818a:	617b      	str	r3, [r7, #20]
 800818c:	e001      	b.n	8008192 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800818e:	4b15      	ldr	r3, [pc, #84]	; (80081e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008190:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	3b08      	subs	r3, #8
 800819e:	4a12      	ldr	r2, [pc, #72]	; (80081e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80081a0:	fba2 2303 	umull	r2, r3, r2, r3
 80081a4:	091b      	lsrs	r3, r3, #4
 80081a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ac:	089b      	lsrs	r3, r3, #2
 80081ae:	009a      	lsls	r2, r3, #2
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	4413      	add	r3, r2
 80081b4:	461a      	mov	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a0b      	ldr	r2, [pc, #44]	; (80081ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80081be:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f003 031f 	and.w	r3, r3, #31
 80081c6:	2201      	movs	r2, #1
 80081c8:	409a      	lsls	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80081ce:	bf00      	nop
 80081d0:	371c      	adds	r7, #28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	40020407 	.word	0x40020407
 80081e0:	40020800 	.word	0x40020800
 80081e4:	40020820 	.word	0x40020820
 80081e8:	cccccccd 	.word	0xcccccccd
 80081ec:	40020880 	.word	0x40020880

080081f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008204:	4413      	add	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	461a      	mov	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a08      	ldr	r2, [pc, #32]	; (8008234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008212:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3b01      	subs	r3, #1
 8008218:	f003 031f 	and.w	r3, r3, #31
 800821c:	2201      	movs	r2, #1
 800821e:	409a      	lsls	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008224:	bf00      	nop
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	1000823f 	.word	0x1000823f
 8008234:	40020940 	.word	0x40020940

08008238 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b01      	cmp	r3, #1
 800824c:	d12b      	bne.n	80082a6 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008254:	2b01      	cmp	r3, #1
 8008256:	d101      	bne.n	800825c <HAL_DMAEx_ConfigMuxSync+0x24>
 8008258:	2302      	movs	r3, #2
 800825a:	e025      	b.n	80082a8 <HAL_DMAEx_ConfigMuxSync+0x70>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	b2d9      	uxtb	r1, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	061a      	lsls	r2, r3, #24
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	3b01      	subs	r3, #1
 8008278:	04db      	lsls	r3, r3, #19
 800827a:	431a      	orrs	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	431a      	orrs	r2, r3
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	7a1b      	ldrb	r3, [r3, #8]
 8008286:	041b      	lsls	r3, r3, #16
 8008288:	431a      	orrs	r2, r3
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	7a5b      	ldrb	r3, [r3, #9]
 800828e:	025b      	lsls	r3, r3, #9
 8008290:	431a      	orrs	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008296:	430a      	orrs	r2, r1
 8008298:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	e000      	b.n	80082a8 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
  }
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c6:	4013      	ands	r3, r2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d01a      	beq.n	8008302 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80082e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008306:	2b00      	cmp	r3, #0
 8008308:	d022      	beq.n	8008350 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008314:	4013      	ands	r3, r2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d01a      	beq.n	8008350 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008328:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008332:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008338:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	4798      	blx	r3
      }
    }
  }
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e033      	b.n	80083d2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d106      	bne.n	8008384 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7fb ffa0 	bl	80042c4 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f854 	bl	8008438 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_TIMEOUT)
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f822 	bl	80083da <FMAC_Reset>
 8008396:	4603      	mov	r3, r0
 8008398:	2b03      	cmp	r3, #3
 800839a:	d10c      	bne.n	80083b6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a0:	f043 0210 	orr.w	r2, r3, #16
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	22a0      	movs	r2, #160	; 0xa0
 80083ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	73fb      	strb	r3, [r7, #15]
 80083b4:	e008      	b.n	80083c8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083e2:	f7fd fd53 	bl	8005e8c <HAL_GetTick>
 80083e6:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	691a      	ldr	r2, [r3, #16]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80083f6:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80083f8:	e00f      	b.n	800841a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80083fa:	f7fd fd47 	bl	8005e8c <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008408:	d907      	bls.n	800841a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e00a      	b.n	8008430 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e8      	bne.n	80083fa <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f807 	bl	8008454 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f81b 	bl	8008482 <FMAC_ResetOutputStateAndDataPointers>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2220      	movs	r2, #32
 8008472:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80084be:	e15a      	b.n	8008776 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	2101      	movs	r1, #1
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	fa01 f303 	lsl.w	r3, r1, r3
 80084cc:	4013      	ands	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 814c 	beq.w	8008770 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d00b      	beq.n	80084f8 <HAL_GPIO_Init+0x48>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d007      	beq.n	80084f8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084ec:	2b11      	cmp	r3, #17
 80084ee:	d003      	beq.n	80084f8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2b12      	cmp	r3, #18
 80084f6:	d130      	bne.n	800855a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	005b      	lsls	r3, r3, #1
 8008502:	2203      	movs	r2, #3
 8008504:	fa02 f303 	lsl.w	r3, r2, r3
 8008508:	43db      	mvns	r3, r3
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	4013      	ands	r3, r2
 800850e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	fa02 f303 	lsl.w	r3, r2, r3
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800852e:	2201      	movs	r2, #1
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	fa02 f303 	lsl.w	r3, r2, r3
 8008536:	43db      	mvns	r3, r3
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	4013      	ands	r3, r2
 800853c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	091b      	lsrs	r3, r3, #4
 8008544:	f003 0201 	and.w	r2, r3, #1
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	fa02 f303 	lsl.w	r3, r2, r3
 800854e:	693a      	ldr	r2, [r7, #16]
 8008550:	4313      	orrs	r3, r2
 8008552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	2203      	movs	r2, #3
 8008566:	fa02 f303 	lsl.w	r3, r2, r3
 800856a:	43db      	mvns	r3, r3
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	4013      	ands	r3, r2
 8008570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	689a      	ldr	r2, [r3, #8]
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	fa02 f303 	lsl.w	r3, r2, r3
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	4313      	orrs	r3, r2
 8008582:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	2b02      	cmp	r3, #2
 8008590:	d003      	beq.n	800859a <HAL_GPIO_Init+0xea>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	2b12      	cmp	r3, #18
 8008598:	d123      	bne.n	80085e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	08da      	lsrs	r2, r3, #3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3208      	adds	r2, #8
 80085a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	220f      	movs	r2, #15
 80085b2:	fa02 f303 	lsl.w	r3, r2, r3
 80085b6:	43db      	mvns	r3, r3
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	4013      	ands	r3, r2
 80085bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	691a      	ldr	r2, [r3, #16]
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f003 0307 	and.w	r3, r3, #7
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	fa02 f303 	lsl.w	r3, r2, r3
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	08da      	lsrs	r2, r3, #3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	3208      	adds	r2, #8
 80085dc:	6939      	ldr	r1, [r7, #16]
 80085de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	2203      	movs	r2, #3
 80085ee:	fa02 f303 	lsl.w	r3, r2, r3
 80085f2:	43db      	mvns	r3, r3
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	4013      	ands	r3, r2
 80085f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f003 0203 	and.w	r2, r3, #3
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	4313      	orrs	r3, r2
 800860e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 80a6 	beq.w	8008770 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008624:	4b5b      	ldr	r3, [pc, #364]	; (8008794 <HAL_GPIO_Init+0x2e4>)
 8008626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008628:	4a5a      	ldr	r2, [pc, #360]	; (8008794 <HAL_GPIO_Init+0x2e4>)
 800862a:	f043 0301 	orr.w	r3, r3, #1
 800862e:	6613      	str	r3, [r2, #96]	; 0x60
 8008630:	4b58      	ldr	r3, [pc, #352]	; (8008794 <HAL_GPIO_Init+0x2e4>)
 8008632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	60bb      	str	r3, [r7, #8]
 800863a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800863c:	4a56      	ldr	r2, [pc, #344]	; (8008798 <HAL_GPIO_Init+0x2e8>)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	089b      	lsrs	r3, r3, #2
 8008642:	3302      	adds	r3, #2
 8008644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f003 0303 	and.w	r3, r3, #3
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	220f      	movs	r2, #15
 8008654:	fa02 f303 	lsl.w	r3, r2, r3
 8008658:	43db      	mvns	r3, r3
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	4013      	ands	r3, r2
 800865e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008666:	d01f      	beq.n	80086a8 <HAL_GPIO_Init+0x1f8>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a4c      	ldr	r2, [pc, #304]	; (800879c <HAL_GPIO_Init+0x2ec>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d019      	beq.n	80086a4 <HAL_GPIO_Init+0x1f4>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a4b      	ldr	r2, [pc, #300]	; (80087a0 <HAL_GPIO_Init+0x2f0>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d013      	beq.n	80086a0 <HAL_GPIO_Init+0x1f0>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a4a      	ldr	r2, [pc, #296]	; (80087a4 <HAL_GPIO_Init+0x2f4>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00d      	beq.n	800869c <HAL_GPIO_Init+0x1ec>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a49      	ldr	r2, [pc, #292]	; (80087a8 <HAL_GPIO_Init+0x2f8>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d007      	beq.n	8008698 <HAL_GPIO_Init+0x1e8>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a48      	ldr	r2, [pc, #288]	; (80087ac <HAL_GPIO_Init+0x2fc>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d101      	bne.n	8008694 <HAL_GPIO_Init+0x1e4>
 8008690:	2305      	movs	r3, #5
 8008692:	e00a      	b.n	80086aa <HAL_GPIO_Init+0x1fa>
 8008694:	2306      	movs	r3, #6
 8008696:	e008      	b.n	80086aa <HAL_GPIO_Init+0x1fa>
 8008698:	2304      	movs	r3, #4
 800869a:	e006      	b.n	80086aa <HAL_GPIO_Init+0x1fa>
 800869c:	2303      	movs	r3, #3
 800869e:	e004      	b.n	80086aa <HAL_GPIO_Init+0x1fa>
 80086a0:	2302      	movs	r3, #2
 80086a2:	e002      	b.n	80086aa <HAL_GPIO_Init+0x1fa>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e000      	b.n	80086aa <HAL_GPIO_Init+0x1fa>
 80086a8:	2300      	movs	r3, #0
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	f002 0203 	and.w	r2, r2, #3
 80086b0:	0092      	lsls	r2, r2, #2
 80086b2:	4093      	lsls	r3, r2
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086ba:	4937      	ldr	r1, [pc, #220]	; (8008798 <HAL_GPIO_Init+0x2e8>)
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	089b      	lsrs	r3, r3, #2
 80086c0:	3302      	adds	r3, #2
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80086c8:	4b39      	ldr	r3, [pc, #228]	; (80087b0 <HAL_GPIO_Init+0x300>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	43db      	mvns	r3, r3
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4013      	ands	r3, r2
 80086d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80086ec:	4a30      	ldr	r2, [pc, #192]	; (80087b0 <HAL_GPIO_Init+0x300>)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80086f2:	4b2f      	ldr	r3, [pc, #188]	; (80087b0 <HAL_GPIO_Init+0x300>)
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	43db      	mvns	r3, r3
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	4013      	ands	r3, r2
 8008700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008716:	4a26      	ldr	r2, [pc, #152]	; (80087b0 <HAL_GPIO_Init+0x300>)
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800871c:	4b24      	ldr	r3, [pc, #144]	; (80087b0 <HAL_GPIO_Init+0x300>)
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	43db      	mvns	r3, r3
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	4013      	ands	r3, r2
 800872a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	4313      	orrs	r3, r2
 800873e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008740:	4a1b      	ldr	r2, [pc, #108]	; (80087b0 <HAL_GPIO_Init+0x300>)
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008746:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <HAL_GPIO_Init+0x300>)
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	43db      	mvns	r3, r3
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4013      	ands	r3, r2
 8008754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4313      	orrs	r3, r2
 8008768:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800876a:	4a11      	ldr	r2, [pc, #68]	; (80087b0 <HAL_GPIO_Init+0x300>)
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	3301      	adds	r3, #1
 8008774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	fa22 f303 	lsr.w	r3, r2, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	f47f ae9d 	bne.w	80084c0 <HAL_GPIO_Init+0x10>
  }
}
 8008786:	bf00      	nop
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	40021000 	.word	0x40021000
 8008798:	40010000 	.word	0x40010000
 800879c:	48000400 	.word	0x48000400
 80087a0:	48000800 	.word	0x48000800
 80087a4:	48000c00 	.word	0x48000c00
 80087a8:	48001000 	.word	0x48001000
 80087ac:	48001400 	.word	0x48001400
 80087b0:	40010400 	.word	0x40010400

080087b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	460b      	mov	r3, r1
 80087be:	807b      	strh	r3, [r7, #2]
 80087c0:	4613      	mov	r3, r2
 80087c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80087c4:	787b      	ldrb	r3, [r7, #1]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80087ca:	887a      	ldrh	r2, [r7, #2]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80087d0:	e002      	b.n	80087d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80087d2:	887a      	ldrh	r2, [r7, #2]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e0be      	b.n	8008974 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2202      	movs	r2, #2
 80087fa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d02e      	beq.n	80088a0 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a4d      	ldr	r2, [pc, #308]	; (800897c <HAL_HRTIM_Init+0x198>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d10b      	bne.n	8008864 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800884c:	4b4c      	ldr	r3, [pc, #304]	; (8008980 <HAL_HRTIM_Init+0x19c>)
 800884e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008850:	4a4b      	ldr	r2, [pc, #300]	; (8008980 <HAL_HRTIM_Init+0x19c>)
 8008852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008856:	6613      	str	r3, [r2, #96]	; 0x60
 8008858:	4b49      	ldr	r3, [pc, #292]	; (8008980 <HAL_HRTIM_Init+0x19c>)
 800885a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800885c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008872:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4313      	orrs	r3, r2
 8008880:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008888:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7fb ff91 	bl	80047c8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d012      	beq.n	80088d8 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088c0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80088e8:	2300      	movs	r3, #0
 80088ea:	75fb      	strb	r3, [r7, #23]
 80088ec:	e03e      	b.n	800896c <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80088ee:	7dfa      	ldrb	r2, [r7, #23]
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	1a9b      	subs	r3, r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	440b      	add	r3, r1
 80088fc:	3318      	adds	r3, #24
 80088fe:	2200      	movs	r2, #0
 8008900:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8008902:	7dfa      	ldrb	r2, [r7, #23]
 8008904:	6879      	ldr	r1, [r7, #4]
 8008906:	4613      	mov	r3, r2
 8008908:	00db      	lsls	r3, r3, #3
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	440b      	add	r3, r1
 8008910:	331c      	adds	r3, #28
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8008916:	7dfa      	ldrb	r2, [r7, #23]
 8008918:	6879      	ldr	r1, [r7, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	1a9b      	subs	r3, r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	440b      	add	r3, r1
 8008924:	3320      	adds	r3, #32
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800892a:	7dfa      	ldrb	r2, [r7, #23]
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	1a9b      	subs	r3, r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	3324      	adds	r3, #36	; 0x24
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800893e:	7dfa      	ldrb	r2, [r7, #23]
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	1a9b      	subs	r3, r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	3328      	adds	r3, #40	; 0x28
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8008952:	7dfa      	ldrb	r2, [r7, #23]
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	4613      	mov	r3, r2
 8008958:	00db      	lsls	r3, r3, #3
 800895a:	1a9b      	subs	r3, r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	440b      	add	r3, r1
 8008960:	3330      	adds	r3, #48	; 0x30
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	3301      	adds	r3, #1
 800896a:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	2b06      	cmp	r3, #6
 8008970:	d9bd      	bls.n	80088ee <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	40016800 	.word	0x40016800
 8008980:	40021000 	.word	0x40021000

08008984 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008994:	2b01      	cmp	r3, #1
 8008996:	d101      	bne.n	800899c <HAL_HRTIM_DLLCalibrationStart+0x18>
 8008998:	2302      	movs	r3, #2
 800899a:	e045      	b.n	8008a28 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2202      	movs	r2, #2
 80089a8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b2:	d114      	bne.n	80089de <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f022 0202 	bic.w	r2, r2, #2
 80089c4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f042 0201 	orr.w	r2, r2, #1
 80089d8:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 80089dc:	e01f      	b.n	8008a1e <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f042 0202 	orr.w	r2, r2, #2
 80089ee:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80089fa:	f023 010c 	bic.w	r1, r3, #12
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0201 	orr.w	r2, r2, #1
 8008a1a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8008a3e:	f7fd fa25 	bl	8005e8c <HAL_GetTick>
 8008a42:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8008a44:	e014      	b.n	8008a70 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4c:	d010      	beq.n	8008a70 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8008a4e:	f7fd fa1d 	bl	8005e8c <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d302      	bcc.n	8008a64 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d105      	bne.n	8008a70 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2207      	movs	r2, #7
 8008a68:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e011      	b.n	8008a94 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a80:	d1e1      	bne.n	8008a46 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d101      	bne.n	8008ab8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e015      	b.n	8008ae4 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b06      	cmp	r3, #6
 8008ac4:	d104      	bne.n	8008ad0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8008ac6:	6879      	ldr	r1, [r7, #4]
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f001 f97a 	bl	8009dc2 <HRTIM_MasterBase_Config>
 8008ace:	e004      	b.n	8008ada <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	68b9      	ldr	r1, [r7, #8]
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f001 f9a3 	bl	8009e20 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <HAL_HRTIM_FaultConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Fault,
                                        HRTIM_FaultCfgTypeDef* pFaultCfg)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b089      	sub	sp, #36	; 0x24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_FAULTSOURCE(pFaultCfg->Source));
  assert_param(IS_HRTIM_FAULTPOLARITY(pFaultCfg->Polarity));
  assert_param(IS_HRTIM_FAULTFILTER(pFaultCfg->Filter));
  assert_param(IS_HRTIM_FAULTLOCK(pFaultCfg->Lock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d101      	bne.n	8008b08 <HAL_HRTIM_FaultConfig+0x1c>
  {
     return HAL_BUSY;
 8008b04:	2302      	movs	r3, #2
 8008b06:	e1aa      	b.n	8008e5e <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d101      	bne.n	8008b16 <HAL_HRTIM_FaultConfig+0x2a>
 8008b12:	2302      	movs	r3, #2
 8008b14:	e1a3      	b.n	8008e5e <HAL_HRTIM_FaultConfig+0x372>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2202      	movs	r2, #2
 8008b22:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure fault channel */
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b2e:	61fb      	str	r3, [r7, #28]
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b38:	61bb      	str	r3, [r7, #24]

  source0 =  (pFaultCfg->Source & 1U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	617b      	str	r3, [r7, #20]
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	085b      	lsrs	r3, r3, #1
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	613b      	str	r3, [r7, #16]

  switch (Fault)
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	2b1f      	cmp	r3, #31
 8008b56:	f200 813f 	bhi.w	8008dd8 <HAL_HRTIM_FaultConfig+0x2ec>
 8008b5a:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <HAL_HRTIM_FaultConfig+0x74>)
 8008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b60:	08008be1 	.word	0x08008be1
 8008b64:	08008c31 	.word	0x08008c31
 8008b68:	08008dd9 	.word	0x08008dd9
 8008b6c:	08008c87 	.word	0x08008c87
 8008b70:	08008dd9 	.word	0x08008dd9
 8008b74:	08008dd9 	.word	0x08008dd9
 8008b78:	08008dd9 	.word	0x08008dd9
 8008b7c:	08008cdd 	.word	0x08008cdd
 8008b80:	08008dd9 	.word	0x08008dd9
 8008b84:	08008dd9 	.word	0x08008dd9
 8008b88:	08008dd9 	.word	0x08008dd9
 8008b8c:	08008dd9 	.word	0x08008dd9
 8008b90:	08008dd9 	.word	0x08008dd9
 8008b94:	08008dd9 	.word	0x08008dd9
 8008b98:	08008dd9 	.word	0x08008dd9
 8008b9c:	08008d33 	.word	0x08008d33
 8008ba0:	08008dd9 	.word	0x08008dd9
 8008ba4:	08008dd9 	.word	0x08008dd9
 8008ba8:	08008dd9 	.word	0x08008dd9
 8008bac:	08008dd9 	.word	0x08008dd9
 8008bb0:	08008dd9 	.word	0x08008dd9
 8008bb4:	08008dd9 	.word	0x08008dd9
 8008bb8:	08008dd9 	.word	0x08008dd9
 8008bbc:	08008dd9 	.word	0x08008dd9
 8008bc0:	08008dd9 	.word	0x08008dd9
 8008bc4:	08008dd9 	.word	0x08008dd9
 8008bc8:	08008dd9 	.word	0x08008dd9
 8008bcc:	08008dd9 	.word	0x08008dd9
 8008bd0:	08008dd9 	.word	0x08008dd9
 8008bd4:	08008dd9 	.word	0x08008dd9
 8008bd8:	08008dd9 	.word	0x08008dd9
 8008bdc:	08008d83 	.word	0x08008d83
  {
  case HRTIM_FAULT_1:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8008be6:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT1SRC_0_Pos);
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	69fa      	ldr	r2, [r7, #28]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT1SRC_1);
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c06:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	041b      	lsls	r3, r3, #16
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008c1a:	69fa      	ldr	r2, [r7, #28]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	61fb      	str	r3, [r7, #28]
      break;
 8008c2e:	e0dc      	b.n	8008dea <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_2:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8008c36:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	021b      	lsls	r3, r3, #8
 8008c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c42:	69fa      	ldr	r2, [r7, #28]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT2SRC_0_Pos);
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	029b      	lsls	r3, r3, #10
 8008c4c:	69fa      	ldr	r2, [r7, #28]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT2SRC_1);
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c58:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	045b      	lsls	r3, r3, #17
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	021b      	lsls	r3, r3, #8
 8008c6a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	021b      	lsls	r3, r3, #8
 8008c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c7e:	69fa      	ldr	r2, [r7, #28]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	61fb      	str	r3, [r7, #28]
      break;
 8008c84:	e0b1      	b.n	8008dea <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_3:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
 8008c8c:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	041b      	lsls	r3, r3, #16
 8008c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c98:	69fa      	ldr	r2, [r7, #28]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT3SRC_0_Pos);
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	049b      	lsls	r3, r3, #18
 8008ca2:	69fa      	ldr	r2, [r7, #28]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT3SRC_1);
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cae:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	049b      	lsls	r3, r3, #18
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	041b      	lsls	r3, r3, #16
 8008cc0:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8008cc4:	69fa      	ldr	r2, [r7, #28]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	041b      	lsls	r3, r3, #16
 8008cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cd4:	69fa      	ldr	r2, [r7, #28]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	61fb      	str	r3, [r7, #28]
      break;
 8008cda:	e086      	b.n	8008dea <HAL_HRTIM_FaultConfig+0x2fe>
     }

  case HRTIM_FAULT_4:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008ce2:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	061b      	lsls	r3, r3, #24
 8008cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT4SRC_0_Pos);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	069b      	lsls	r3, r3, #26
 8008cf8:	69fa      	ldr	r2, [r7, #28]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT4SRC_1);
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008d04:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	04db      	lsls	r3, r3, #19
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	061b      	lsls	r3, r3, #24
 8008d16:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8008d1a:	69fa      	ldr	r2, [r7, #28]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	061b      	lsls	r3, r3, #24
 8008d26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	61fb      	str	r3, [r7, #28]
      break;
 8008d30:	e05b      	b.n	8008dea <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_5:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC_0 | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8008d38:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	69ba      	ldr	r2, [r7, #24]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d58:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT5SRC_1_Pos);
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	051b      	lsls	r3, r3, #20
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	61bb      	str	r3, [r7, #24]
      break;
 8008d80:	e033      	b.n	8008dea <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_6:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6P | HRTIM_FLTINR2_FLT6SRC_0 | HRTIM_FLTINR2_FLT6F | HRTIM_FLTINR2_FLT6LCK);
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8008d88:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	021b      	lsls	r3, r3, #8
 8008d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	029b      	lsls	r3, r3, #10
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008daa:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT6SRC_1_Pos);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	055b      	lsls	r3, r3, #21
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	021b      	lsls	r3, r3, #8
 8008dbc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	021b      	lsls	r3, r3, #8
 8008dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	61bb      	str	r3, [r7, #24]
      break;
 8008dd6:	e008      	b.n	8008dea <HAL_HRTIM_FaultConfig+0x2fe>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2207      	movs	r2, #7
 8008ddc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8008de8:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b07      	cmp	r3, #7
 8008df4:	d101      	bne.n	8008dfa <HAL_HRTIM_FaultConfig+0x30e>
  {
     return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e031      	b.n	8008e5e <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Update the HRTIM registers except LOCK bit */
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69fa      	ldr	r2, [r7, #28]
 8008e00:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8008e04:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e16:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  /* Update the HRTIM registers LOCK bit */
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	f248 0380 	movw	r3, #32896	; 0x8080
 8008e40:	4013      	ands	r3, r2
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	6812      	ldr	r2, [r2, #0]
 8008e46:	430b      	orrs	r3, r1
 8008e48:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3724      	adds	r7, #36	; 0x24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop

08008e6c <HAL_HRTIM_FaultPrescalerConfig>:
  * @note This function must be called before starting the timer and before
  *       enabling faults inputs
  */
HAL_StatusTypeDef HAL_HRTIM_FaultPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d101      	bne.n	8008e86 <HAL_HRTIM_FaultPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8008e82:	2302      	movs	r3, #2
 8008e84:	e025      	b.n	8008ed2 <HAL_HRTIM_FaultPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d101      	bne.n	8008e94 <HAL_HRTIM_FaultPrescalerConfig+0x28>
 8008e90:	2302      	movs	r3, #2
 8008e92:	e01e      	b.n	8008ed2 <HAL_HRTIM_FaultPrescalerConfig+0x66>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008eac:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
	...

08008ee0 <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultBlankingConfigAndEnable(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t Fault,
                                                HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTBLANKNGMODE(pFaultBlkCfg->BlankingSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d101      	bne.n	8008efc <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1c>
  {
     return HAL_BUSY;
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e0d7      	b.n	80090ac <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x2a>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e0d0      	b.n	80090ac <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2202      	movs	r2, #2
 8008f16:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	2b1f      	cmp	r3, #31
 8008f20:	f200 80aa 	bhi.w	8009078 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x198>
 8008f24:	a201      	add	r2, pc, #4	; (adr r2, 8008f2c <HAL_HRTIM_FaultBlankingConfigAndEnable+0x4c>)
 8008f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2a:	bf00      	nop
 8008f2c:	08008fad 	.word	0x08008fad
 8008f30:	08008fcf 	.word	0x08008fcf
 8008f34:	08009079 	.word	0x08009079
 8008f38:	08008ff1 	.word	0x08008ff1
 8008f3c:	08009079 	.word	0x08009079
 8008f40:	08009079 	.word	0x08009079
 8008f44:	08009079 	.word	0x08009079
 8008f48:	08009013 	.word	0x08009013
 8008f4c:	08009079 	.word	0x08009079
 8008f50:	08009079 	.word	0x08009079
 8008f54:	08009079 	.word	0x08009079
 8008f58:	08009079 	.word	0x08009079
 8008f5c:	08009079 	.word	0x08009079
 8008f60:	08009079 	.word	0x08009079
 8008f64:	08009079 	.word	0x08009079
 8008f68:	08009035 	.word	0x08009035
 8008f6c:	08009079 	.word	0x08009079
 8008f70:	08009079 	.word	0x08009079
 8008f74:	08009079 	.word	0x08009079
 8008f78:	08009079 	.word	0x08009079
 8008f7c:	08009079 	.word	0x08009079
 8008f80:	08009079 	.word	0x08009079
 8008f84:	08009079 	.word	0x08009079
 8008f88:	08009079 	.word	0x08009079
 8008f8c:	08009079 	.word	0x08009079
 8008f90:	08009079 	.word	0x08009079
 8008f94:	08009079 	.word	0x08009079
 8008f98:	08009079 	.word	0x08009079
 8008f9c:	08009079 	.word	0x08009079
 8008fa0:	08009079 	.word	0x08009079
 8008fa4:	08009079 	.word	0x08009079
 8008fa8:	08009057 	.word	0x08009057
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008fb4:	f023 0203 	bic.w	r2, r3, #3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	005b      	lsls	r3, r3, #1
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f042 0201 	orr.w	r2, r2, #1
 8008fc8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1BLKS | HRTIM_FLTINR3_FLT1BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT1BLKS_Pos) |
                  HRTIM_FLTINR3_FLT1BLKE));
       break;
 8008fcc:	e05d      	b.n	800908a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008fd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	025b      	lsls	r3, r3, #9
 8008fe0:	431a      	orrs	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2BLKS | HRTIM_FLTINR3_FLT2BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT2BLKS_Pos) |
                  HRTIM_FLTINR3_FLT2BLKE));
       break;
 8008fee:	e04c      	b.n	800908a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	045b      	lsls	r3, r3, #17
 8009002:	431a      	orrs	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800900c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3BLKS | HRTIM_FLTINR3_FLT3BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT3BLKS_Pos) |
                  HRTIM_FLTINR3_FLT3BLKE));
       break;
 8009010:	e03b      	b.n	800908a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800901a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	065b      	lsls	r3, r3, #25
 8009024:	431a      	orrs	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800902e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4BLKS | HRTIM_FLTINR3_FLT4BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT4BLKS_Pos) |
                  HRTIM_FLTINR3_FLT4BLKE));
       break;
 8009032:	e02a      	b.n	800908a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800903c:	f023 0203 	bic.w	r2, r3, #3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	005b      	lsls	r3, r3, #1
 8009046:	431a      	orrs	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f042 0201 	orr.w	r2, r2, #1
 8009050:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5BLKS | HRTIM_FLTINR4_FLT5BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT5BLKS_Pos) |
                  HRTIM_FLTINR4_FLT5BLKE));
      break;
 8009054:	e019      	b.n	800908a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800905e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	025b      	lsls	r3, r3, #9
 8009068:	431a      	orrs	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009072:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6BLKS | HRTIM_FLTINR4_FLT6BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT6BLKS_Pos) |
                  HRTIM_FLTINR4_FLT6BLKE));
      break;
 8009076:	e008      	b.n	800908a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2207      	movs	r2, #7
 800907c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8009088:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b07      	cmp	r3, #7
 8009094:	d101      	bne.n	800909a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1ba>
  {
     return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e008      	b.n	80090ac <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <HAL_HRTIM_FaultCounterConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultCounterConfig(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t Fault,
                                               HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTCOUNTER(pFaultBlkCfg->Threshold));
  assert_param(IS_HRTIM_FAULTCOUNTERRST(pFaultBlkCfg->ResetMode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d101      	bne.n	80090d4 <HAL_HRTIM_FaultCounterConfig+0x1c>
  {
     return HAL_BUSY;
 80090d0:	2302      	movs	r3, #2
 80090d2:	e0e3      	b.n	800929c <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d101      	bne.n	80090e2 <HAL_HRTIM_FaultCounterConfig+0x2a>
 80090de:	2302      	movs	r3, #2
 80090e0:	e0dc      	b.n	800929c <HAL_HRTIM_FaultCounterConfig+0x1e4>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2202      	movs	r2, #2
 80090ee:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	2b1f      	cmp	r3, #31
 80090f8:	f200 80b6 	bhi.w	8009268 <HAL_HRTIM_FaultCounterConfig+0x1b0>
 80090fc:	a201      	add	r2, pc, #4	; (adr r2, 8009104 <HAL_HRTIM_FaultCounterConfig+0x4c>)
 80090fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009102:	bf00      	nop
 8009104:	08009185 	.word	0x08009185
 8009108:	080091ab 	.word	0x080091ab
 800910c:	08009269 	.word	0x08009269
 8009110:	080091d1 	.word	0x080091d1
 8009114:	08009269 	.word	0x08009269
 8009118:	08009269 	.word	0x08009269
 800911c:	08009269 	.word	0x08009269
 8009120:	080091f7 	.word	0x080091f7
 8009124:	08009269 	.word	0x08009269
 8009128:	08009269 	.word	0x08009269
 800912c:	08009269 	.word	0x08009269
 8009130:	08009269 	.word	0x08009269
 8009134:	08009269 	.word	0x08009269
 8009138:	08009269 	.word	0x08009269
 800913c:	08009269 	.word	0x08009269
 8009140:	0800921d 	.word	0x0800921d
 8009144:	08009269 	.word	0x08009269
 8009148:	08009269 	.word	0x08009269
 800914c:	08009269 	.word	0x08009269
 8009150:	08009269 	.word	0x08009269
 8009154:	08009269 	.word	0x08009269
 8009158:	08009269 	.word	0x08009269
 800915c:	08009269 	.word	0x08009269
 8009160:	08009269 	.word	0x08009269
 8009164:	08009269 	.word	0x08009269
 8009168:	08009269 	.word	0x08009269
 800916c:	08009269 	.word	0x08009269
 8009170:	08009269 	.word	0x08009269
 8009174:	08009269 	.word	0x08009269
 8009178:	08009269 	.word	0x08009269
 800917c:	08009269 	.word	0x08009269
 8009180:	08009243 	.word	0x08009243
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800918c:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	009a      	lsls	r2, r3, #2
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	01db      	lsls	r3, r3, #7
 800919c:	431a      	orrs	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1RSTM | HRTIM_FLTINR3_FLT1CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT1CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT1RSTM_Pos));
       break;
 80091a8:	e067      	b.n	800927a <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80091b2:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	029a      	lsls	r2, r3, #10
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	03db      	lsls	r3, r3, #15
 80091c2:	431a      	orrs	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2RSTM | HRTIM_FLTINR3_FLT2CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT2CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT2RSTM_Pos));
       break;
 80091ce:	e054      	b.n	800927a <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80091d8:	f423 013c 	bic.w	r1, r3, #12320768	; 0xbc0000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	049a      	lsls	r2, r3, #18
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	05db      	lsls	r3, r3, #23
 80091e8:	431a      	orrs	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3RSTM | HRTIM_FLTINR3_FLT3CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT3CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT3RSTM_Pos));
       break;
 80091f4:	e041      	b.n	800927a <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80091fe:	f023 413c 	bic.w	r1, r3, #3154116608	; 0xbc000000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	069a      	lsls	r2, r3, #26
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	07db      	lsls	r3, r3, #31
 800920e:	431a      	orrs	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4RSTM | HRTIM_FLTINR3_FLT4CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT4CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT4RSTM_Pos));
       break;
 800921a:	e02e      	b.n	800927a <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_5:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009224:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	009a      	lsls	r2, r3, #2
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	01db      	lsls	r3, r3, #7
 8009234:	431a      	orrs	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5RSTM | HRTIM_FLTINR4_FLT5CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT5CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT5RSTM_Pos));
       break;
 8009240:	e01b      	b.n	800927a <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_6:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800924a:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	029a      	lsls	r2, r3, #10
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	03db      	lsls	r3, r3, #15
 800925a:	431a      	orrs	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6RSTM | HRTIM_FLTINR4_FLT6CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT6CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT6RSTM_Pos));
       break;
 8009266:	e008      	b.n	800927a <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2207      	movs	r2, #7
 800926c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8009278:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b07      	cmp	r3, #7
 8009284:	d101      	bne.n	800928a <HAL_HRTIM_FaultCounterConfig+0x1d2>
  {
     return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e008      	b.n	800929c <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <HAL_HRTIM_FaultModeCtl>:
  * @retval None
  */
void HAL_HRTIM_FaultModeCtl(HRTIM_HandleTypeDef * hhrtim,
                        uint32_t Faults,
                        uint32_t Enable)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Faults));
  assert_param(IS_HRTIM_FAULTMODECTL(Enable));

  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00d      	beq.n	80092da <HAL_HRTIM_FaultModeCtl+0x32>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092c6:	f023 0101 	bic.w	r1, r3, #1
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f003 0201 	and.w	r2, r3, #1
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	430a      	orrs	r2, r1
 80092d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	f003 0302 	and.w	r3, r3, #2
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00e      	beq.n	8009302 <HAL_HRTIM_FaultModeCtl+0x5a>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092ec:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	f003 0304 	and.w	r3, r3, #4
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00e      	beq.n	800932a <HAL_HRTIM_FaultModeCtl+0x82>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009314:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	041b      	lsls	r3, r3, #16
 800931c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	430a      	orrs	r2, r1
 8009326:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	f003 0308 	and.w	r3, r3, #8
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00e      	beq.n	8009352 <HAL_HRTIM_FaultModeCtl+0xaa>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800933c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	061b      	lsls	r3, r3, #24
 8009344:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	430a      	orrs	r2, r1
 800934e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f003 0310 	and.w	r3, r3, #16
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00d      	beq.n	8009378 <HAL_HRTIM_FaultModeCtl+0xd0>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009364:	f023 0101 	bic.w	r1, r3, #1
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f003 0201 	and.w	r2, r3, #1
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	f003 0320 	and.w	r3, r3, #32
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00e      	beq.n	80093a0 <HAL_HRTIM_FaultModeCtl+0xf8>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800938a:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	021b      	lsls	r3, r3, #8
 8009392:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
}
 80093a0:	bf00      	nop
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d101      	bne.n	80093c8 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80093c4:	2302      	movs	r3, #2
 80093c6:	e05f      	b.n	8009488 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d101      	bne.n	80093d6 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80093d2:	2302      	movs	r3, #2
 80093d4:	e058      	b.n	8009488 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2202      	movs	r2, #2
 80093e2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2b06      	cmp	r3, #6
 80093ea:	d104      	bne.n	80093f6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80093ec:	6879      	ldr	r1, [r7, #4]
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 fd56 	bl	8009ea0 <HRTIM_MasterWaveform_Config>
 80093f4:	e004      	b.n	8009400 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	68b9      	ldr	r1, [r7, #8]
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f000 fdee 	bl	8009fdc <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6819      	ldr	r1, [r3, #0]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	4613      	mov	r3, r2
 800940a:	00db      	lsls	r3, r3, #3
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4403      	add	r3, r0
 8009412:	3320      	adds	r3, #32
 8009414:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6859      	ldr	r1, [r3, #4]
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	00db      	lsls	r3, r3, #3
 8009422:	1a9b      	subs	r3, r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4403      	add	r3, r0
 8009428:	3324      	adds	r3, #36	; 0x24
 800942a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6899      	ldr	r1, [r3, #8]
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	4613      	mov	r3, r2
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	1a9b      	subs	r3, r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4403      	add	r3, r0
 800943e:	3328      	adds	r3, #40	; 0x28
 8009440:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68d9      	ldr	r1, [r3, #12]
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	4613      	mov	r3, r2
 800944c:	00db      	lsls	r3, r3, #3
 800944e:	1a9b      	subs	r3, r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4403      	add	r3, r0
 8009454:	332c      	adds	r3, #44	; 0x2c
 8009456:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6919      	ldr	r1, [r3, #16]
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	4613      	mov	r3, r2
 8009462:	00db      	lsls	r3, r3, #3
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4403      	add	r3, r0
 800946a:	3330      	adds	r3, #48	; 0x30
 800946c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800946e:	68b9      	ldr	r1, [r7, #8]
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f001 f8fb 	bl	800a66c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d101      	bne.n	80094ac <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 80094a8:	2302      	movs	r3, #2
 80094aa:	e020      	b.n	80094ee <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d101      	bne.n	80094ba <HAL_HRTIM_WaveformTimerControl+0x2a>
 80094b6:	2302      	movs	r3, #2
 80094b8:	e019      	b.n	80094ee <HAL_HRTIM_WaveformTimerControl+0x5e>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2202      	movs	r2, #2
 80094c6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	68b9      	ldr	r1, [r7, #8]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 ff18 	bl	800a304 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f001 f8c8 	bl	800a66c <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b02      	cmp	r3, #2
 8009510:	d101      	bne.n	8009516 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8009512:	2302      	movs	r3, #2
 8009514:	e157      	b.n	80097c6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800951c:	2b01      	cmp	r3, #1
 800951e:	d101      	bne.n	8009524 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8009520:	2302      	movs	r3, #2
 8009522:	e150      	b.n	80097c6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2202      	movs	r2, #2
 8009530:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b06      	cmp	r3, #6
 8009538:	d140      	bne.n	80095bc <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3b01      	subs	r3, #1
 800953e:	2b07      	cmp	r3, #7
 8009540:	d82a      	bhi.n	8009598 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8009542:	a201      	add	r2, pc, #4	; (adr r2, 8009548 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8009544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009548:	08009569 	.word	0x08009569
 800954c:	08009575 	.word	0x08009575
 8009550:	08009599 	.word	0x08009599
 8009554:	08009581 	.word	0x08009581
 8009558:	08009599 	.word	0x08009599
 800955c:	08009599 	.word	0x08009599
 8009560:	08009599 	.word	0x08009599
 8009564:	0800958d 	.word	0x0800958d
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	6812      	ldr	r2, [r2, #0]
 8009570:	61da      	str	r2, [r3, #28]
        break;
 8009572:	e01a      	b.n	80095aa <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	6812      	ldr	r2, [r2, #0]
 800957c:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800957e:	e014      	b.n	80095aa <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	6812      	ldr	r2, [r2, #0]
 8009588:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800958a:	e00e      	b.n	80095aa <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	6812      	ldr	r2, [r2, #0]
 8009594:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8009596:	e008      	b.n	80095aa <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2207      	movs	r2, #7
 800959c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 80095a8:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b07      	cmp	r3, #7
 80095b4:	f040 80fe 	bne.w	80097b4 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e104      	b.n	80097c6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3b01      	subs	r3, #1
 80095c0:	2b07      	cmp	r3, #7
 80095c2:	f200 80e3 	bhi.w	800978c <HAL_HRTIM_WaveformCompareConfig+0x294>
 80095c6:	a201      	add	r2, pc, #4	; (adr r2, 80095cc <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80095c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095cc:	080095ed 	.word	0x080095ed
 80095d0:	08009601 	.word	0x08009601
 80095d4:	0800978d 	.word	0x0800978d
 80095d8:	080096bd 	.word	0x080096bd
 80095dc:	0800978d 	.word	0x0800978d
 80095e0:	0800978d 	.word	0x0800978d
 80095e4:	0800978d 	.word	0x0800978d
 80095e8:	080096d1 	.word	0x080096d1
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6819      	ldr	r1, [r3, #0]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	01db      	lsls	r3, r3, #7
 80095f8:	440b      	add	r3, r1
 80095fa:	339c      	adds	r3, #156	; 0x9c
 80095fc:	601a      	str	r2, [r3, #0]
        break;
 80095fe:	e0d1      	b.n	80097a4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6819      	ldr	r1, [r3, #0]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	01db      	lsls	r3, r3, #7
 800960c:	440b      	add	r3, r1
 800960e:	33a4      	adds	r3, #164	; 0xa4
 8009610:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d03f      	beq.n	800969a <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	3301      	adds	r3, #1
 8009622:	01db      	lsls	r3, r3, #7
 8009624:	4413      	add	r3, r2
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	6811      	ldr	r1, [r2, #0]
 800962c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	3301      	adds	r3, #1
 8009634:	01db      	lsls	r3, r3, #7
 8009636:	440b      	add	r3, r1
 8009638:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	3301      	adds	r3, #1
 8009642:	01db      	lsls	r3, r3, #7
 8009644:	4413      	add	r3, r2
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	68f9      	ldr	r1, [r7, #12]
 800964e:	6809      	ldr	r1, [r1, #0]
 8009650:	431a      	orrs	r2, r3
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	3301      	adds	r3, #1
 8009656:	01db      	lsls	r3, r3, #7
 8009658:	440b      	add	r3, r1
 800965a:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009664:	d109      	bne.n	800967a <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6819      	ldr	r1, [r3, #0]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	689a      	ldr	r2, [r3, #8]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	01db      	lsls	r3, r3, #7
 8009672:	440b      	add	r3, r1
 8009674:	339c      	adds	r3, #156	; 0x9c
 8009676:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8009678:	e091      	b.n	800979e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009682:	f040 808c 	bne.w	800979e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6819      	ldr	r1, [r3, #0]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	689a      	ldr	r2, [r3, #8]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	01db      	lsls	r3, r3, #7
 8009692:	440b      	add	r3, r1
 8009694:	33a8      	adds	r3, #168	; 0xa8
 8009696:	601a      	str	r2, [r3, #0]
         break;
 8009698:	e081      	b.n	800979e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	3301      	adds	r3, #1
 80096a2:	01db      	lsls	r3, r3, #7
 80096a4:	4413      	add	r3, r2
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	6811      	ldr	r1, [r2, #0]
 80096ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	3301      	adds	r3, #1
 80096b4:	01db      	lsls	r3, r3, #7
 80096b6:	440b      	add	r3, r1
 80096b8:	601a      	str	r2, [r3, #0]
         break;
 80096ba:	e070      	b.n	800979e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6819      	ldr	r1, [r3, #0]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	01db      	lsls	r3, r3, #7
 80096c8:	440b      	add	r3, r1
 80096ca:	33a8      	adds	r3, #168	; 0xa8
 80096cc:	601a      	str	r2, [r3, #0]
        break;
 80096ce:	e069      	b.n	80097a4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6819      	ldr	r1, [r3, #0]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	01db      	lsls	r3, r3, #7
 80096dc:	440b      	add	r3, r1
 80096de:	33ac      	adds	r3, #172	; 0xac
 80096e0:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d03f      	beq.n	800976a <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	3301      	adds	r3, #1
 80096f2:	01db      	lsls	r3, r3, #7
 80096f4:	4413      	add	r3, r2
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	6811      	ldr	r1, [r2, #0]
 80096fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	3301      	adds	r3, #1
 8009704:	01db      	lsls	r3, r3, #7
 8009706:	440b      	add	r3, r1
 8009708:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	3301      	adds	r3, #1
 8009712:	01db      	lsls	r3, r3, #7
 8009714:	4413      	add	r3, r2
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	68f9      	ldr	r1, [r7, #12]
 8009720:	6809      	ldr	r1, [r1, #0]
 8009722:	431a      	orrs	r2, r3
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	3301      	adds	r3, #1
 8009728:	01db      	lsls	r3, r3, #7
 800972a:	440b      	add	r3, r1
 800972c:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009736:	d109      	bne.n	800974c <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6819      	ldr	r1, [r3, #0]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	689a      	ldr	r2, [r3, #8]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	01db      	lsls	r3, r3, #7
 8009744:	440b      	add	r3, r1
 8009746:	339c      	adds	r3, #156	; 0x9c
 8009748:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800974a:	e02a      	b.n	80097a2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009754:	d125      	bne.n	80097a2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6819      	ldr	r1, [r3, #0]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	689a      	ldr	r2, [r3, #8]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	01db      	lsls	r3, r3, #7
 8009762:	440b      	add	r3, r1
 8009764:	33a8      	adds	r3, #168	; 0xa8
 8009766:	601a      	str	r2, [r3, #0]
         break;
 8009768:	e01b      	b.n	80097a2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	3301      	adds	r3, #1
 8009772:	01db      	lsls	r3, r3, #7
 8009774:	4413      	add	r3, r2
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	6811      	ldr	r1, [r2, #0]
 800977c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	3301      	adds	r3, #1
 8009784:	01db      	lsls	r3, r3, #7
 8009786:	440b      	add	r3, r1
 8009788:	601a      	str	r2, [r3, #0]
         break;
 800978a:	e00a      	b.n	80097a2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2207      	movs	r2, #7
 8009790:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 800979c:	e002      	b.n	80097a4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800979e:	bf00      	nop
 80097a0:	e000      	b.n	80097a4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80097a2:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b07      	cmp	r3, #7
 80097ae:	d101      	bne.n	80097b4 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e008      	b.n	80097c6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop

080097d4 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d101      	bne.n	80097f2 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80097ee:	2302      	movs	r3, #2
 80097f0:	e01d      	b.n	800982e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d101      	bne.n	8009800 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80097fc:	2302      	movs	r3, #2
 80097fe:	e016      	b.n	800982e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2202      	movs	r2, #2
 800980c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	68b9      	ldr	r1, [r7, #8]
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fdd4 	bl	800a3c4 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8009836:	b480      	push	{r7}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8009846:	2b01      	cmp	r3, #1
 8009848:	d101      	bne.n	800984e <HAL_HRTIM_WaveformOutputStart+0x18>
 800984a:	2302      	movs	r3, #2
 800984c:	e01a      	b.n	8009884 <HAL_HRTIM_WaveformOutputStart+0x4e>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2202      	movs	r2, #2
 800985a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	430a      	orrs	r2, r1
 800986e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d101      	bne.n	80098a8 <HAL_HRTIM_WaveformOutputStop+0x18>
 80098a4:	2302      	movs	r3, #2
 80098a6:	e01a      	b.n	80098de <HAL_HRTIM_WaveformOutputStop+0x4e>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
	...

080098ec <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d101      	bne.n	8009904 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8009900:	2302      	movs	r3, #2
 8009902:	e05b      	b.n	80099bc <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	430a      	orrs	r2, r1
 8009926:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d009      	beq.n	8009948 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68d9      	ldr	r1, [r3, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	430a      	orrs	r2, r1
 8009946:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]
 800994c:	e022      	b.n	8009994 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	4a1d      	ldr	r2, [pc, #116]	; (80099c8 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8009952:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	4013      	ands	r3, r2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d017      	beq.n	800998e <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	7bfb      	ldrb	r3, [r7, #15]
 8009964:	01db      	lsls	r3, r3, #7
 8009966:	4413      	add	r3, r2
 8009968:	338c      	adds	r3, #140	; 0x8c
 800996a:	6818      	ldr	r0, [r3, #0]
 800996c:	7bfa      	ldrb	r2, [r7, #15]
 800996e:	6879      	ldr	r1, [r7, #4]
 8009970:	4613      	mov	r3, r2
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	1a9b      	subs	r3, r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	440b      	add	r3, r1
 800997a:	3320      	adds	r3, #32
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6819      	ldr	r1, [r3, #0]
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	4302      	orrs	r2, r0
 8009986:	01db      	lsls	r3, r3, #7
 8009988:	440b      	add	r3, r1
 800998a:	338c      	adds	r3, #140	; 0x8c
 800998c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	3301      	adds	r3, #1
 8009992:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	2b05      	cmp	r3, #5
 8009998:	d9d9      	bls.n	800994e <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6819      	ldr	r1, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;}
 80099ba:	2300      	movs	r3, #0
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	20000010 	.word	0x20000010

080099cc <HAL_HRTIM_WaveformCountStart_DMA>:
  *       size of each DMA transfer are specified at timer configuration time
  *       (see HAL_HRTIM_WaveformTimerConfig)
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_DMA(HRTIM_HandleTypeDef * hhrtim,
                                                     uint32_t Timers)
{
 80099cc:	b590      	push	{r4, r7, lr}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  DMA_HandleTypeDef * hdma;

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  if((hhrtim->State == HAL_HRTIM_STATE_BUSY))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d101      	bne.n	80099e6 <HAL_HRTIM_WaveformCountStart_DMA+0x1a>
  {
     return HAL_BUSY;
 80099e2:	2302      	movs	r3, #2
 80099e4:	e0d2      	b.n	8009b8c <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
  }

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2202      	movs	r2, #2
 80099ea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d101      	bne.n	80099fc <HAL_HRTIM_WaveformCountStart_DMA+0x30>
 80099f8:	2302      	movs	r3, #2
 80099fa:	e0c7      	b.n	8009b8c <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d033      	beq.n	8009a76 <HAL_HRTIM_WaveformCountStart_DMA+0xaa>
      (hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMARequests != 0U))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d02e      	beq.n	8009a76 <HAL_HRTIM_WaveformCountStart_DMA+0xaa>
  {
      /* Set the DMA error callback */
      hhrtim->hdmaMaster->XferErrorCallback = HRTIM_DMAError ;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a1e:	4a5d      	ldr	r2, [pc, #372]	; (8009b94 <HAL_HRTIM_WaveformCountStart_DMA+0x1c8>)
 8009a20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA transfer completed callback */
      hhrtim->hdmaMaster->XferCpltCallback = HRTIM_DMAMasterCplt;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a28:	4a5b      	ldr	r2, [pc, #364]	; (8009b98 <HAL_HRTIM_WaveformCountStart_DMA+0x1cc>)
 8009a2a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(hhrtim->hdmaMaster,
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a44:	f7fe fa2e 	bl	8007ea4 <HAL_DMA_Start_IT>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d009      	beq.n	8009a62 <HAL_HRTIM_WaveformCountStart_DMA+0x96>
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMASrcAddress,
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMADstAddress,
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMASize) != HAL_OK)
    {
            hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2207      	movs	r2, #7
 8009a52:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

            /* Process Unlocked */
            __HAL_UNLOCK(hhrtim);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

            return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e094      	b.n	8009b8c <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
        }

      /* Enable the timer DMA request */
      __HAL_HRTIM_MASTER_ENABLE_DMA(hhrtim,
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68d9      	ldr	r1, [r3, #12]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	60da      	str	r2, [r3, #12]
                                   hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMARequests);
  }

  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8009a76:	2300      	movs	r3, #0
 8009a78:	73fb      	strb	r3, [r7, #15]
 8009a7a:	e073      	b.n	8009b64 <HAL_HRTIM_WaveformCountStart_DMA+0x198>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	4a47      	ldr	r2, [pc, #284]	; (8009b9c <HAL_HRTIM_WaveformCountStart_DMA+0x1d0>)
 8009a80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	4013      	ands	r3, r2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d068      	beq.n	8009b5e <HAL_HRTIM_WaveformCountStart_DMA+0x192>
         (hhrtim->TimerParam[timer_idx].DMARequests != 0U))
 8009a8c:	7bfa      	ldrb	r2, [r7, #15]
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	4613      	mov	r3, r2
 8009a92:	00db      	lsls	r3, r3, #3
 8009a94:	1a9b      	subs	r3, r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	440b      	add	r3, r1
 8009a9a:	3324      	adds	r3, #36	; 0x24
 8009a9c:	681b      	ldr	r3, [r3, #0]
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d05d      	beq.n	8009b5e <HAL_HRTIM_WaveformCountStart_DMA+0x192>
    {
      /* Get the timer DMA handler */
      hdma = HRTIM_GetDMAHandleFromTimerIdx(hhrtim, timer_idx);
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fd4a 	bl	800a540 <HRTIM_GetDMAHandleFromTimerIdx>
 8009aac:	60b8      	str	r0, [r7, #8]

      if (hdma == NULL)
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d109      	bne.n	8009ac8 <HAL_HRTIM_WaveformCountStart_DMA+0xfc>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2207      	movs	r2, #7
 8009ab8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e061      	b.n	8009b8c <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
      }

       /* Set the DMA error callback */
      hdma->XferErrorCallback = HRTIM_DMAError ;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	4a32      	ldr	r2, [pc, #200]	; (8009b94 <HAL_HRTIM_WaveformCountStart_DMA+0x1c8>)
 8009acc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA transfer completed callback */
      hdma->XferCpltCallback = HRTIM_DMATimerxCplt;
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	4a33      	ldr	r2, [pc, #204]	; (8009ba0 <HAL_HRTIM_WaveformCountStart_DMA+0x1d4>)
 8009ad2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(hdma,
 8009ad4:	7bfa      	ldrb	r2, [r7, #15]
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	1a9b      	subs	r3, r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	440b      	add	r3, r1
 8009ae2:	3328      	adds	r3, #40	; 0x28
 8009ae4:	6818      	ldr	r0, [r3, #0]
 8009ae6:	7bfa      	ldrb	r2, [r7, #15]
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	4613      	mov	r3, r2
 8009aec:	00db      	lsls	r3, r3, #3
 8009aee:	1a9b      	subs	r3, r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	440b      	add	r3, r1
 8009af4:	332c      	adds	r3, #44	; 0x2c
 8009af6:	681c      	ldr	r4, [r3, #0]
 8009af8:	7bfa      	ldrb	r2, [r7, #15]
 8009afa:	6879      	ldr	r1, [r7, #4]
 8009afc:	4613      	mov	r3, r2
 8009afe:	00db      	lsls	r3, r3, #3
 8009b00:	1a9b      	subs	r3, r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	440b      	add	r3, r1
 8009b06:	3330      	adds	r3, #48	; 0x30
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	4601      	mov	r1, r0
 8009b0e:	68b8      	ldr	r0, [r7, #8]
 8009b10:	f7fe f9c8 	bl	8007ea4 <HAL_DMA_Start_IT>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d009      	beq.n	8009b2e <HAL_HRTIM_WaveformCountStart_DMA+0x162>
                       hhrtim->TimerParam[timer_idx].DMASrcAddress,
                       hhrtim->TimerParam[timer_idx].DMADstAddress,
                       hhrtim->TimerParam[timer_idx].DMASize) != HAL_OK)
    {
              hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2207      	movs	r2, #7
 8009b1e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

              /* Process Unlocked */
              __HAL_UNLOCK(hhrtim);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

              return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e02e      	b.n	8009b8c <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
        }

      /* Enable the timer DMA request */
      __HAL_HRTIM_TIMER_ENABLE_DMA(hhrtim,
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	01db      	lsls	r3, r3, #7
 8009b36:	4413      	add	r3, r2
 8009b38:	338c      	adds	r3, #140	; 0x8c
 8009b3a:	6818      	ldr	r0, [r3, #0]
 8009b3c:	7bfa      	ldrb	r2, [r7, #15]
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	4613      	mov	r3, r2
 8009b42:	00db      	lsls	r3, r3, #3
 8009b44:	1a9b      	subs	r3, r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	440b      	add	r3, r1
 8009b4a:	3324      	adds	r3, #36	; 0x24
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6819      	ldr	r1, [r3, #0]
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
 8009b54:	4302      	orrs	r2, r0
 8009b56:	01db      	lsls	r3, r3, #7
 8009b58:	440b      	add	r3, r1
 8009b5a:	338c      	adds	r3, #140	; 0x8c
 8009b5c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
 8009b60:	3301      	adds	r3, #1
 8009b62:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d988      	bls.n	8009a7c <HAL_HRTIM_WaveformCountStart_DMA+0xb0>
                                   hhrtim->TimerParam[timer_idx].DMARequests);
    }
  }

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, Timers);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6819      	ldr	r1, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	430a      	orrs	r2, r1
 8009b78:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd90      	pop	{r4, r7, pc}
 8009b94:	0800b281 	.word	0x0800b281
 8009b98:	0800afa3 	.word	0x0800afa3
 8009b9c:	20000010 	.word	0x20000010
 8009ba0:	0800b05d 	.word	0x0800b05d

08009ba4 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2bff      	cmp	r3, #255	; 0xff
 8009bb2:	d103      	bne.n	8009bbc <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fdc7 	bl	800a748 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8009bba:	e00a      	b.n	8009bd2 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b06      	cmp	r3, #6
 8009bc0:	d103      	bne.n	8009bca <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fe93 	bl	800a8ee <HRTIM_Master_ISR>
}
 8009bc8:	e003      	b.n	8009bd2 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 ff9a 	bl	800ab06 <HRTIM_Timer_ISR>
}
 8009bd2:	bf00      	nop
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b083      	sub	sp, #12
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8009be2:	bf00      	nop
 8009be4:	370c      	adds	r7, #12
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b083      	sub	sp, #12
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8009bf6:	bf00      	nop
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b083      	sub	sp, #12
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8009c0a:	bf00      	nop
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 8009c1e:	bf00      	nop
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8009c32:	bf00      	nop
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b083      	sub	sp, #12
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8009c5a:	bf00      	nop
 8009c5c:	370c      	adds	r7, #12
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b083      	sub	sp, #12
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8009c6e:	bf00      	nop
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr

08009c7a <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009c7a:	b480      	push	{r7}
 8009c7c:	b083      	sub	sp, #12
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8009c9a:	bf00      	nop
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b083      	sub	sp, #12
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8009cb0:	bf00      	nop
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8009cc6:	bf00      	nop
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8009cf2:	bf00      	nop
 8009cf4:	370c      	adds	r7, #12
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b083      	sub	sp, #12
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8009d1e:	bf00      	nop
 8009d20:	370c      	adds	r7, #12
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b083      	sub	sp, #12
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8009d4a:	bf00      	nop
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b083      	sub	sp, #12
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <HAL_HRTIM_ErrorCallback>:
  * @brief  Callback function invoked when a DMA error occurs
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_ErrorCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b083      	sub	sp, #12
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_ErrorCallback could be implemented in the user file
   */
}
 8009db6:	bf00      	nop
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b085      	sub	sp, #20
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f023 0307 	bic.w	r3, r3, #7
 8009dda:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f023 0318 	bic.w	r3, r3, #24
 8009dec:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	6812      	ldr	r2, [r2, #0]
 8009e08:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	6852      	ldr	r2, [r2, #4]
 8009e12:	619a      	str	r2, [r3, #24]
}
 8009e14:	bf00      	nop
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	3301      	adds	r3, #1
 8009e34:	01db      	lsls	r3, r3, #7
 8009e36:	4413      	add	r3, r2
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	f023 0307 	bic.w	r3, r3, #7
 8009e42:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f023 0318 	bic.w	r3, r3, #24
 8009e54:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	3301      	adds	r3, #1
 8009e68:	01db      	lsls	r3, r3, #7
 8009e6a:	4413      	add	r3, r2
 8009e6c:	697a      	ldr	r2, [r7, #20]
 8009e6e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6819      	ldr	r1, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	01db      	lsls	r3, r3, #7
 8009e7c:	440b      	add	r3, r1
 8009e7e:	3394      	adds	r3, #148	; 0x94
 8009e80:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6819      	ldr	r1, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	01db      	lsls	r3, r3, #7
 8009e8e:	440b      	add	r3, r1
 8009e90:	3398      	adds	r3, #152	; 0x98
 8009e92:	601a      	str	r2, [r3, #0]
}
 8009e94:	bf00      	nop
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8009eba:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f023 0320 	bic.w	r3, r3, #32
 8009ec2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ed4:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	2b20      	cmp	r3, #32
 8009edc:	d003      	beq.n	8009ee6 <HRTIM_MasterWaveform_Config+0x46>
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d108      	bne.n	8009ef8 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009eec:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f043 0320 	orr.w	r3, r3, #32
 8009ef4:	60fb      	str	r3, [r7, #12]
 8009ef6:	e021      	b.n	8009f3c <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	2b03      	cmp	r3, #3
 8009efe:	d108      	bne.n	8009f12 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f06:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	e014      	b.n	8009f3c <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	2b04      	cmp	r3, #4
 8009f18:	d108      	bne.n	8009f2c <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f20:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f28:	60fb      	str	r3, [r7, #12]
 8009f2a:	e007      	b.n	8009f3c <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f023 0320 	bic.w	r3, r3, #32
 8009f32:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f42:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	69db      	ldr	r3, [r3, #28]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f54:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009f66:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8009f78:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009f8a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009f9e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fb0:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8009fce:	bf00      	nop
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
	...

08009fdc <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b08b      	sub	sp, #44	; 0x2c
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	01db      	lsls	r3, r3, #7
 8009ff2:	4413      	add	r3, r2
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	6811      	ldr	r1, [r2, #0]
 8009ffa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	3301      	adds	r3, #1
 800a002:	01db      	lsls	r3, r3, #7
 800a004:	440b      	add	r3, r1
 800a006:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	3301      	adds	r3, #1
 800a010:	01db      	lsls	r3, r3, #7
 800a012:	4413      	add	r3, r2
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	01db      	lsls	r3, r3, #7
 800a020:	4413      	add	r3, r2
 800a022:	33e8      	adds	r3, #232	; 0xe8
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	01db      	lsls	r3, r3, #7
 800a030:	4413      	add	r3, r2
 800a032:	33e4      	adds	r3, #228	; 0xe4
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800a040:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	f023 0320 	bic.w	r3, r3, #32
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a050:	4313      	orrs	r3, r2
 800a052:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	2b20      	cmp	r3, #32
 800a05a:	d003      	beq.n	800a064 <HRTIM_TimingUnitWaveform_Config+0x88>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d108      	bne.n	800a076 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a066:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800a06a:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	f043 0320 	orr.w	r3, r3, #32
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
 800a074:	e021      	b.n	800a0ba <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	2b03      	cmp	r3, #3
 800a07c:	d108      	bne.n	800a090 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a084:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a08c:	627b      	str	r3, [r7, #36]	; 0x24
 800a08e:	e014      	b.n	800a0ba <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	2b04      	cmp	r3, #4
 800a096:	d108      	bne.n	800a0aa <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a09e:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a0a8:	e007      	b.n	800a0ba <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	f023 0320 	bic.w	r3, r3, #32
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800a0b8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	69db      	ldr	r3, [r3, #28]
 800a0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0d2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a1b      	ldr	r3, [r3, #32]
 800a0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800a0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a0e4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800a0f6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fe:	4313      	orrs	r3, r2
 800a100:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a104:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a108:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a110:	4313      	orrs	r3, r2
 800a112:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d109      	bne.n	800a130 <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a128:	025b      	lsls	r3, r3, #9
 800a12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12c:	4313      	orrs	r3, r2
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a136:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a140:	d103      	bne.n	800a14a <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a158:	4313      	orrs	r3, r2
 800a15a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a162:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a16a:	4313      	orrs	r3, r2
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 800a174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a178:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a180:	4313      	orrs	r3, r2
 800a182:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a18a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	4313      	orrs	r3, r2
 800a198:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1a0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	69ba      	ldr	r2, [r7, #24]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1b2:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b8:	6a3a      	ldr	r2, [r7, #32]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1c2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800a1c6:	d004      	beq.n	800a1d2 <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1cc:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800a1d0:	d103      	bne.n	800a1da <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d6:	2b40      	cmp	r3, #64	; 0x40
 800a1d8:	d108      	bne.n	800a1ec <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800a1e0:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1e6:	6a3a      	ldr	r2, [r7, #32]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 800a1ec:	6a3b      	ldr	r3, [r7, #32]
 800a1ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1f2:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1f8:	6a3a      	ldr	r2, [r7, #32]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a202:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b05      	cmp	r3, #5
 800a208:	d850      	bhi.n	800a2ac <HRTIM_TimingUnitWaveform_Config+0x2d0>
 800a20a:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <HRTIM_TimingUnitWaveform_Config+0x234>)
 800a20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a210:	0800a229 	.word	0x0800a229
 800a214:	0800a23f 	.word	0x0800a23f
 800a218:	0800a255 	.word	0x0800a255
 800a21c:	0800a26b 	.word	0x0800a26b
 800a220:	0800a281 	.word	0x0800a281
 800a224:	0800a297 	.word	0x0800a297
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a22e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	69fa      	ldr	r2, [r7, #28]
 800a238:	4313      	orrs	r3, r2
 800a23a:	61fb      	str	r3, [r7, #28]
      break;
 800a23c:	e037      	b.n	800a2ae <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a244:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	69fa      	ldr	r2, [r7, #28]
 800a24e:	4313      	orrs	r3, r2
 800a250:	61fb      	str	r3, [r7, #28]
      break;
 800a252:	e02c      	b.n	800a2ae <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a25a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a260:	00db      	lsls	r3, r3, #3
 800a262:	69fa      	ldr	r2, [r7, #28]
 800a264:	4313      	orrs	r3, r2
 800a266:	61fb      	str	r3, [r7, #28]
      break;
 800a268:	e021      	b.n	800a2ae <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a270:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a276:	011b      	lsls	r3, r3, #4
 800a278:	69fa      	ldr	r2, [r7, #28]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	61fb      	str	r3, [r7, #28]
      break;
 800a27e:	e016      	b.n	800a2ae <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a286:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28c:	015b      	lsls	r3, r3, #5
 800a28e:	69fa      	ldr	r2, [r7, #28]
 800a290:	4313      	orrs	r3, r2
 800a292:	61fb      	str	r3, [r7, #28]
      break;
 800a294:	e00b      	b.n	800a2ae <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a29c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a2:	019b      	lsls	r3, r3, #6
 800a2a4:	69fa      	ldr	r2, [r7, #28]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	61fb      	str	r3, [r7, #28]
      break;
 800a2aa:	e000      	b.n	800a2ae <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 800a2ac:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	01db      	lsls	r3, r3, #7
 800a2b8:	4413      	add	r3, r2
 800a2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2bc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	01db      	lsls	r3, r3, #7
 800a2c6:	4413      	add	r3, r2
 800a2c8:	33e8      	adds	r3, #232	; 0xe8
 800a2ca:	69ba      	ldr	r2, [r7, #24]
 800a2cc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	01db      	lsls	r3, r3, #7
 800a2d6:	4413      	add	r3, r2
 800a2d8:	33e4      	adds	r3, #228	; 0xe4
 800a2da:	6a3a      	ldr	r2, [r7, #32]
 800a2dc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	01db      	lsls	r3, r3, #7
 800a2e6:	4413      	add	r3, r2
 800a2e8:	33d4      	adds	r3, #212	; 0xd4
 800a2ea:	697a      	ldr	r2, [r7, #20]
 800a2ec:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	69fa      	ldr	r2, [r7, #28]
 800a2f4:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800a2f8:	bf00      	nop
 800a2fa:	372c      	adds	r7, #44	; 0x2c
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	01db      	lsls	r3, r3, #7
 800a318:	4413      	add	r3, r2
 800a31a:	33ec      	adds	r3, #236	; 0xec
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f023 0310 	bic.w	r3, r3, #16
 800a326:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	011b      	lsls	r3, r3, #4
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	4313      	orrs	r3, r2
 800a332:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a33a:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	4313      	orrs	r3, r2
 800a344:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a34c:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	4313      	orrs	r3, r2
 800a356:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a35e:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	697a      	ldr	r2, [r7, #20]
 800a366:	4313      	orrs	r3, r2
 800a368:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d11a      	bne.n	800a3a8 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f023 0304 	bic.w	r3, r3, #4
 800a378:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	4313      	orrs	r3, r2
 800a382:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f023 0302 	bic.w	r3, r3, #2
 800a38a:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	4313      	orrs	r3, r2
 800a394:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f023 0301 	bic.w	r3, r3, #1
 800a39c:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	01db      	lsls	r3, r3, #7
 800a3b0:	4413      	add	r3, r2
 800a3b2:	33ec      	adds	r3, #236	; 0xec
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	601a      	str	r2, [r3, #0]

}
 800a3b8:	bf00      	nop
 800a3ba:	371c      	adds	r7, #28
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b089      	sub	sp, #36	; 0x24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
 800a3d0:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	01db      	lsls	r3, r3, #7
 800a3de:	4413      	add	r3, r2
 800a3e0:	33e4      	adds	r3, #228	; 0xe4
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	01db      	lsls	r3, r3, #7
 800a3ee:	4413      	add	r3, r2
 800a3f0:	33b8      	adds	r3, #184	; 0xb8
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	617b      	str	r3, [r7, #20]

  switch (Output)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b20      	cmp	r3, #32
 800a3fa:	d037      	beq.n	800a46c <HRTIM_OutputConfig+0xa8>
 800a3fc:	2b20      	cmp	r3, #32
 800a3fe:	d80d      	bhi.n	800a41c <HRTIM_OutputConfig+0x58>
 800a400:	2b04      	cmp	r3, #4
 800a402:	d020      	beq.n	800a446 <HRTIM_OutputConfig+0x82>
 800a404:	2b04      	cmp	r3, #4
 800a406:	d804      	bhi.n	800a412 <HRTIM_OutputConfig+0x4e>
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d01c      	beq.n	800a446 <HRTIM_OutputConfig+0x82>
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d02d      	beq.n	800a46c <HRTIM_OutputConfig+0xa8>
      shift = 16U;
      break;
    }

  default:
    break;
 800a410:	e041      	b.n	800a496 <HRTIM_OutputConfig+0xd2>
  switch (Output)
 800a412:	2b08      	cmp	r3, #8
 800a414:	d02a      	beq.n	800a46c <HRTIM_OutputConfig+0xa8>
 800a416:	2b10      	cmp	r3, #16
 800a418:	d015      	beq.n	800a446 <HRTIM_OutputConfig+0x82>
    break;
 800a41a:	e03c      	b.n	800a496 <HRTIM_OutputConfig+0xd2>
  switch (Output)
 800a41c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a420:	d011      	beq.n	800a446 <HRTIM_OutputConfig+0x82>
 800a422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a426:	d804      	bhi.n	800a432 <HRTIM_OutputConfig+0x6e>
 800a428:	2b40      	cmp	r3, #64	; 0x40
 800a42a:	d00c      	beq.n	800a446 <HRTIM_OutputConfig+0x82>
 800a42c:	2b80      	cmp	r3, #128	; 0x80
 800a42e:	d01d      	beq.n	800a46c <HRTIM_OutputConfig+0xa8>
    break;
 800a430:	e031      	b.n	800a496 <HRTIM_OutputConfig+0xd2>
  switch (Output)
 800a432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a436:	d006      	beq.n	800a446 <HRTIM_OutputConfig+0x82>
 800a438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a43c:	d016      	beq.n	800a46c <HRTIM_OutputConfig+0xa8>
 800a43e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a442:	d013      	beq.n	800a46c <HRTIM_OutputConfig+0xa8>
    break;
 800a444:	e027      	b.n	800a496 <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6819      	ldr	r1, [r3, #0]
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	01db      	lsls	r3, r3, #7
 800a452:	440b      	add	r3, r1
 800a454:	33bc      	adds	r3, #188	; 0xbc
 800a456:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6819      	ldr	r1, [r3, #0]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	01db      	lsls	r3, r3, #7
 800a464:	440b      	add	r3, r1
 800a466:	33c0      	adds	r3, #192	; 0xc0
 800a468:	601a      	str	r2, [r3, #0]
      break;
 800a46a:	e014      	b.n	800a496 <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6819      	ldr	r1, [r3, #0]
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	01db      	lsls	r3, r3, #7
 800a478:	440b      	add	r3, r1
 800a47a:	33c4      	adds	r3, #196	; 0xc4
 800a47c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6819      	ldr	r1, [r3, #0]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	01db      	lsls	r3, r3, #7
 800a48a:	440b      	add	r3, r1
 800a48c:	33c8      	adds	r3, #200	; 0xc8
 800a48e:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800a490:	2310      	movs	r3, #16
 800a492:	61bb      	str	r3, [r7, #24]
      break;
 800a494:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800a496:	22fe      	movs	r2, #254	; 0xfe
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800a49e:	43db      	mvns	r3, r3
 800a4a0:	69fa      	ldr	r2, [r7, #28]
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b0:	69fa      	ldr	r2, [r7, #28]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	68da      	ldr	r2, [r3, #12]
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c0:	69fa      	ldr	r2, [r7, #28]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	691a      	ldr	r2, [r3, #16]
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d0:	69fa      	ldr	r2, [r7, #28]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	695a      	ldr	r2, [r3, #20]
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e0:	69fa      	ldr	r2, [r7, #28]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	699a      	ldr	r2, [r3, #24]
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f0:	69fa      	ldr	r2, [r7, #28]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b08      	cmp	r3, #8
 800a4fc:	d111      	bne.n	800a522 <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10c      	bne.n	800a522 <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d107      	bne.n	800a522 <HRTIM_OutputConfig+0x15e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	69da      	ldr	r2, [r3, #28]
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	fa02 f303 	lsl.w	r3, r2, r3
 800a51c:	69fa      	ldr	r2, [r7, #28]
 800a51e:	4313      	orrs	r3, r2
 800a520:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	01db      	lsls	r3, r3, #7
 800a52a:	4413      	add	r3, r2
 800a52c:	33e4      	adds	r3, #228	; 0xe4
 800a52e:	69fa      	ldr	r2, [r7, #28]
 800a530:	601a      	str	r2, [r3, #0]
}
 800a532:	bf00      	nop
 800a534:	3724      	adds	r7, #36	; 0x24
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
	...

0800a540 <HRTIM_GetDMAHandleFromTimerIdx>:
  return dma_request;
}

static DMA_HandleTypeDef * HRTIM_GetDMAHandleFromTimerIdx(HRTIM_HandleTypeDef * hhrtim,
                                                          uint32_t TimerIdx)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  DMA_HandleTypeDef * hdma = (DMA_HandleTypeDef *)NULL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	60fb      	str	r3, [r7, #12]

  switch (TimerIdx)
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b06      	cmp	r3, #6
 800a552:	d834      	bhi.n	800a5be <HRTIM_GetDMAHandleFromTimerIdx+0x7e>
 800a554:	a201      	add	r2, pc, #4	; (adr r2, 800a55c <HRTIM_GetDMAHandleFromTimerIdx+0x1c>)
 800a556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55a:	bf00      	nop
 800a55c:	0800a583 	.word	0x0800a583
 800a560:	0800a58d 	.word	0x0800a58d
 800a564:	0800a597 	.word	0x0800a597
 800a568:	0800a5a1 	.word	0x0800a5a1
 800a56c:	0800a5ab 	.word	0x0800a5ab
 800a570:	0800a5b5 	.word	0x0800a5b5
 800a574:	0800a579 	.word	0x0800a579
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hdma = hhrtim->hdmaMaster;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a57e:	60fb      	str	r3, [r7, #12]
      break;
 800a580:	e01e      	b.n	800a5c0 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hdma = hhrtim->hdmaTimerA;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a588:	60fb      	str	r3, [r7, #12]
      break;
 800a58a:	e019      	b.n	800a5c0 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hdma = hhrtim->hdmaTimerB;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a592:	60fb      	str	r3, [r7, #12]
      break;
 800a594:	e014      	b.n	800a5c0 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hdma = hhrtim->hdmaTimerC;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a59c:	60fb      	str	r3, [r7, #12]
      break;
 800a59e:	e00f      	b.n	800a5c0 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hdma = hhrtim->hdmaTimerD;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a5a6:	60fb      	str	r3, [r7, #12]
      break;
 800a5a8:	e00a      	b.n	800a5c0 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hdma = hhrtim->hdmaTimerE;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a5b0:	60fb      	str	r3, [r7, #12]
      break;
 800a5b2:	e005      	b.n	800a5c0 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hdma = hhrtim->hdmaTimerF;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800a5ba:	60fb      	str	r3, [r7, #12]
      break;
 800a5bc:	e000      	b.n	800a5c0 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  default:
    break;
 800a5be:	bf00      	nop
  }

  return hdma;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop

0800a5d0 <GetTimerIdxFromDMAHandle>:

static uint32_t GetTimerIdxFromDMAHandle(HRTIM_HandleTypeDef * hhrtim,
                                         DMA_HandleTypeDef * hdma)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint32_t timed_idx = 0xFFFFFFFFU;
 800a5da:	f04f 33ff 	mov.w	r3, #4294967295
 800a5de:	60fb      	str	r3, [r7, #12]

  if (hdma == hhrtim->hdmaMaster)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d102      	bne.n	800a5f2 <GetTimerIdxFromDMAHandle+0x22>
  {
    timed_idx = HRTIM_TIMERINDEX_MASTER;
 800a5ec:	2306      	movs	r3, #6
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	e034      	b.n	800a65c <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerA)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d102      	bne.n	800a604 <GetTimerIdxFromDMAHandle+0x34>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_A;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60fb      	str	r3, [r7, #12]
 800a602:	e02b      	b.n	800a65c <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerB)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d102      	bne.n	800a616 <GetTimerIdxFromDMAHandle+0x46>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_B;
 800a610:	2301      	movs	r3, #1
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	e022      	b.n	800a65c <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerC)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d102      	bne.n	800a628 <GetTimerIdxFromDMAHandle+0x58>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_C;
 800a622:	2302      	movs	r3, #2
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	e019      	b.n	800a65c <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerD)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a62e:	683a      	ldr	r2, [r7, #0]
 800a630:	429a      	cmp	r2, r3
 800a632:	d102      	bne.n	800a63a <GetTimerIdxFromDMAHandle+0x6a>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_D;
 800a634:	2303      	movs	r3, #3
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	e010      	b.n	800a65c <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a640:	683a      	ldr	r2, [r7, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d102      	bne.n	800a64c <GetTimerIdxFromDMAHandle+0x7c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_E;
 800a646:	2304      	movs	r3, #4
 800a648:	60fb      	str	r3, [r7, #12]
 800a64a:	e007      	b.n	800a65c <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerF)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	429a      	cmp	r2, r3
 800a656:	d101      	bne.n	800a65c <GetTimerIdxFromDMAHandle+0x8c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_F;
 800a658:	2305      	movs	r3, #5
 800a65a:	60fb      	str	r3, [r7, #12]
  }
  else
  {
    /* nothing to do */
  }
  return timed_idx;
 800a65c:	68fb      	ldr	r3, [r7, #12]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
	...

0800a66c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b06      	cmp	r3, #6
 800a67a:	d85e      	bhi.n	800a73a <HRTIM_ForceRegistersUpdate+0xce>
 800a67c:	a201      	add	r2, pc, #4	; (adr r2, 800a684 <HRTIM_ForceRegistersUpdate+0x18>)
 800a67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a682:	bf00      	nop
 800a684:	0800a6b7 	.word	0x0800a6b7
 800a688:	0800a6cd 	.word	0x0800a6cd
 800a68c:	0800a6e3 	.word	0x0800a6e3
 800a690:	0800a6f9 	.word	0x0800a6f9
 800a694:	0800a70f 	.word	0x0800a70f
 800a698:	0800a725 	.word	0x0800a725
 800a69c:	0800a6a1 	.word	0x0800a6a1
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f042 0201 	orr.w	r2, r2, #1
 800a6b0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800a6b4:	e042      	b.n	800a73c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f042 0202 	orr.w	r2, r2, #2
 800a6c6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800a6ca:	e037      	b.n	800a73c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f042 0204 	orr.w	r2, r2, #4
 800a6dc:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800a6e0:	e02c      	b.n	800a73c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f042 0208 	orr.w	r2, r2, #8
 800a6f2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800a6f6:	e021      	b.n	800a73c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f042 0210 	orr.w	r2, r2, #16
 800a708:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800a70c:	e016      	b.n	800a73c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f042 0220 	orr.w	r2, r2, #32
 800a71e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800a722:	e00b      	b.n	800a73c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a734:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800a738:	e000      	b.n	800a73c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800a73a:	bf00      	nop
  }
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* Fault 1 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d101      	bne.n	800a764 <HRTIM_HRTIM_ISR+0x1c>
 800a760:	2301      	movs	r3, #1
 800a762:	e000      	b.n	800a766 <HRTIM_HRTIM_ISR+0x1e>
 800a764:	2300      	movs	r3, #0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00f      	beq.n	800a78a <HRTIM_HRTIM_ISR+0x42>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT1) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800a772:	f003 0301 	and.w	r3, r3, #1
 800a776:	2b01      	cmp	r3, #1
 800a778:	d107      	bne.n	800a78a <HRTIM_HRTIM_ISR+0x42>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2201      	movs	r2, #1
 800a780:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7fb f84f 	bl	8005828 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800a792:	f003 0302 	and.w	r3, r3, #2
 800a796:	2b02      	cmp	r3, #2
 800a798:	d101      	bne.n	800a79e <HRTIM_HRTIM_ISR+0x56>
 800a79a:	2301      	movs	r3, #1
 800a79c:	e000      	b.n	800a7a0 <HRTIM_HRTIM_ISR+0x58>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00f      	beq.n	800a7c4 <HRTIM_HRTIM_ISR+0x7c>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT2) != RESET)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800a7ac:	f003 0302 	and.w	r3, r3, #2
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d107      	bne.n	800a7c4 <HRTIM_HRTIM_ISR+0x7c>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7ff fa0b 	bl	8009bda <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800a7cc:	f003 0304 	and.w	r3, r3, #4
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	d101      	bne.n	800a7d8 <HRTIM_HRTIM_ISR+0x90>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e000      	b.n	800a7da <HRTIM_HRTIM_ISR+0x92>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00f      	beq.n	800a7fe <HRTIM_HRTIM_ISR+0xb6>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT3) != RESET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800a7e6:	f003 0304 	and.w	r3, r3, #4
 800a7ea:	2b04      	cmp	r3, #4
 800a7ec:	d107      	bne.n	800a7fe <HRTIM_HRTIM_ISR+0xb6>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2204      	movs	r2, #4
 800a7f4:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7fb f81d 	bl	8005838 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800a806:	f003 0308 	and.w	r3, r3, #8
 800a80a:	2b08      	cmp	r3, #8
 800a80c:	d101      	bne.n	800a812 <HRTIM_HRTIM_ISR+0xca>
 800a80e:	2301      	movs	r3, #1
 800a810:	e000      	b.n	800a814 <HRTIM_HRTIM_ISR+0xcc>
 800a812:	2300      	movs	r3, #0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00f      	beq.n	800a838 <HRTIM_HRTIM_ISR+0xf0>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT4) != RESET)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800a820:	f003 0308 	and.w	r3, r3, #8
 800a824:	2b08      	cmp	r3, #8
 800a826:	d107      	bne.n	800a838 <HRTIM_HRTIM_ISR+0xf0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2208      	movs	r2, #8
 800a82e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7ff f9db 	bl	8009bee <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800a840:	f003 0310 	and.w	r3, r3, #16
 800a844:	2b10      	cmp	r3, #16
 800a846:	d101      	bne.n	800a84c <HRTIM_HRTIM_ISR+0x104>
 800a848:	2301      	movs	r3, #1
 800a84a:	e000      	b.n	800a84e <HRTIM_HRTIM_ISR+0x106>
 800a84c:	2300      	movs	r3, #0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00f      	beq.n	800a872 <HRTIM_HRTIM_ISR+0x12a>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT5) != RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800a85a:	f003 0310 	and.w	r3, r3, #16
 800a85e:	2b10      	cmp	r3, #16
 800a860:	d107      	bne.n	800a872 <HRTIM_HRTIM_ISR+0x12a>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2210      	movs	r2, #16
 800a868:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff f9c8 	bl	8009c02 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800a87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87e:	2b40      	cmp	r3, #64	; 0x40
 800a880:	d101      	bne.n	800a886 <HRTIM_HRTIM_ISR+0x13e>
 800a882:	2301      	movs	r3, #1
 800a884:	e000      	b.n	800a888 <HRTIM_HRTIM_ISR+0x140>
 800a886:	2300      	movs	r3, #0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00f      	beq.n	800a8ac <HRTIM_HRTIM_ISR+0x164>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT6) != RESET)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800a894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a898:	2b40      	cmp	r3, #64	; 0x40
 800a89a:	d107      	bne.n	800a8ac <HRTIM_HRTIM_ISR+0x164>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2240      	movs	r2, #64	; 0x40
 800a8a2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff f9b5 	bl	8009c16 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800a8b4:	f003 0320 	and.w	r3, r3, #32
 800a8b8:	2b20      	cmp	r3, #32
 800a8ba:	d101      	bne.n	800a8c0 <HRTIM_HRTIM_ISR+0x178>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e000      	b.n	800a8c2 <HRTIM_HRTIM_ISR+0x17a>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00f      	beq.n	800a8e6 <HRTIM_HRTIM_ISR+0x19e>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_SYSFLT) != RESET)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800a8ce:	f003 0320 	and.w	r3, r3, #32
 800a8d2:	2b20      	cmp	r3, #32
 800a8d4:	d107      	bne.n	800a8e6 <HRTIM_HRTIM_ISR+0x19e>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2220      	movs	r2, #32
 800a8dc:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7ff f9a2 	bl	8009c2a <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b082      	sub	sp, #8
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  /* DLL calibration ready event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800a8fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a906:	d101      	bne.n	800a90c <HRTIM_Master_ISR+0x1e>
 800a908:	2301      	movs	r3, #1
 800a90a:	e000      	b.n	800a90e <HRTIM_Master_ISR+0x20>
 800a90c:	2300      	movs	r3, #0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d019      	beq.n	800a946 <HRTIM_Master_ISR+0x58>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_DLLRDY) != RESET)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800a91a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a91e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a922:	d110      	bne.n	800a946 <HRTIM_Master_ISR+0x58>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a92c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f7ff f97c 	bl	8009c3e <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800a94e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a956:	d101      	bne.n	800a95c <HRTIM_Master_ISR+0x6e>
 800a958:	2301      	movs	r3, #1
 800a95a:	e000      	b.n	800a95e <HRTIM_Master_ISR+0x70>
 800a95c:	2300      	movs	r3, #0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d011      	beq.n	800a986 <HRTIM_Master_ISR+0x98>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_BMPER) != RESET)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800a96a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a972:	d108      	bne.n	800a986 <HRTIM_Master_ISR+0x98>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a97c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7ff f966 	bl	8009c52 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	2b01      	cmp	r3, #1
 800a992:	d101      	bne.n	800a998 <HRTIM_Master_ISR+0xaa>
 800a994:	2301      	movs	r3, #1
 800a996:	e000      	b.n	800a99a <HRTIM_Master_ISR+0xac>
 800a998:	2300      	movs	r3, #0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00e      	beq.n	800a9bc <HRTIM_Master_ISR+0xce>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP1) != RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	f003 0301 	and.w	r3, r3, #1
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d107      	bne.n	800a9bc <HRTIM_Master_ISR+0xce>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800a9b4:	2106      	movs	r1, #6
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff f975 	bl	8009ca6 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f003 0302 	and.w	r3, r3, #2
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d101      	bne.n	800a9ce <HRTIM_Master_ISR+0xe0>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e000      	b.n	800a9d0 <HRTIM_Master_ISR+0xe2>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00e      	beq.n	800a9f2 <HRTIM_Master_ISR+0x104>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP2) != RESET)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	f003 0302 	and.w	r3, r3, #2
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d107      	bne.n	800a9f2 <HRTIM_Master_ISR+0x104>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800a9ea:	2106      	movs	r1, #6
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7ff f965 	bl	8009cbc <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f003 0304 	and.w	r3, r3, #4
 800a9fc:	2b04      	cmp	r3, #4
 800a9fe:	d101      	bne.n	800aa04 <HRTIM_Master_ISR+0x116>
 800aa00:	2301      	movs	r3, #1
 800aa02:	e000      	b.n	800aa06 <HRTIM_Master_ISR+0x118>
 800aa04:	2300      	movs	r3, #0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00e      	beq.n	800aa28 <HRTIM_Master_ISR+0x13a>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP3) != RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	f003 0304 	and.w	r3, r3, #4
 800aa14:	2b04      	cmp	r3, #4
 800aa16:	d107      	bne.n	800aa28 <HRTIM_Master_ISR+0x13a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2204      	movs	r2, #4
 800aa1e:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800aa20:	2106      	movs	r1, #6
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7ff f955 	bl	8009cd2 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f003 0308 	and.w	r3, r3, #8
 800aa32:	2b08      	cmp	r3, #8
 800aa34:	d101      	bne.n	800aa3a <HRTIM_Master_ISR+0x14c>
 800aa36:	2301      	movs	r3, #1
 800aa38:	e000      	b.n	800aa3c <HRTIM_Master_ISR+0x14e>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00e      	beq.n	800aa5e <HRTIM_Master_ISR+0x170>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP4) != RESET)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	f003 0308 	and.w	r3, r3, #8
 800aa4a:	2b08      	cmp	r3, #8
 800aa4c:	d107      	bne.n	800aa5e <HRTIM_Master_ISR+0x170>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2208      	movs	r2, #8
 800aa54:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800aa56:	2106      	movs	r1, #6
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7ff f945 	bl	8009ce8 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	f003 0310 	and.w	r3, r3, #16
 800aa68:	2b10      	cmp	r3, #16
 800aa6a:	d101      	bne.n	800aa70 <HRTIM_Master_ISR+0x182>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e000      	b.n	800aa72 <HRTIM_Master_ISR+0x184>
 800aa70:	2300      	movs	r3, #0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00e      	beq.n	800aa94 <HRTIM_Master_ISR+0x1a6>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MREP) != RESET)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	f003 0310 	and.w	r3, r3, #16
 800aa80:	2b10      	cmp	r3, #16
 800aa82:	d107      	bne.n	800aa94 <HRTIM_Master_ISR+0x1a6>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2210      	movs	r2, #16
 800aa8a:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800aa8c:	2106      	movs	r1, #6
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7ff f8fe 	bl	8009c90 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f003 0320 	and.w	r3, r3, #32
 800aa9e:	2b20      	cmp	r3, #32
 800aaa0:	d101      	bne.n	800aaa6 <HRTIM_Master_ISR+0x1b8>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e000      	b.n	800aaa8 <HRTIM_Master_ISR+0x1ba>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00d      	beq.n	800aac8 <HRTIM_Master_ISR+0x1da>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_SYNC) != RESET)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	f003 0320 	and.w	r3, r3, #32
 800aab6:	2b20      	cmp	r3, #32
 800aab8:	d106      	bne.n	800aac8 <HRTIM_Master_ISR+0x1da>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2220      	movs	r2, #32
 800aac0:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7ff f8cf 	bl	8009c66 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad2:	2b40      	cmp	r3, #64	; 0x40
 800aad4:	d101      	bne.n	800aada <HRTIM_Master_ISR+0x1ec>
 800aad6:	2301      	movs	r3, #1
 800aad8:	e000      	b.n	800aadc <HRTIM_Master_ISR+0x1ee>
 800aada:	2300      	movs	r3, #0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00e      	beq.n	800aafe <HRTIM_Master_ISR+0x210>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MUPD) != RESET)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaea:	2b40      	cmp	r3, #64	; 0x40
 800aaec:	d107      	bne.n	800aafe <HRTIM_Master_ISR+0x210>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2240      	movs	r2, #64	; 0x40
 800aaf4:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800aaf6:	2106      	movs	r1, #6
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7ff f8be 	bl	8009c7a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800aafe:	bf00      	nop
 800ab00:	3708      	adds	r7, #8
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b082      	sub	sp, #8
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	6039      	str	r1, [r7, #0]
  /* Timer compare 1 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	3301      	adds	r3, #1
 800ab18:	01db      	lsls	r3, r3, #7
 800ab1a:	4413      	add	r3, r2
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0301 	and.w	r3, r3, #1
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d101      	bne.n	800ab2c <HRTIM_Timer_ISR+0x26>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e000      	b.n	800ab2e <HRTIM_Timer_ISR+0x28>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d016      	beq.n	800ab60 <HRTIM_Timer_ISR+0x5a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1) != RESET)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	01db      	lsls	r3, r3, #7
 800ab3a:	4413      	add	r3, r2
 800ab3c:	338c      	adds	r3, #140	; 0x8c
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 0301 	and.w	r3, r3, #1
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d10b      	bne.n	800ab60 <HRTIM_Timer_ISR+0x5a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	01db      	lsls	r3, r3, #7
 800ab50:	4413      	add	r3, r2
 800ab52:	3388      	adds	r3, #136	; 0x88
 800ab54:	2201      	movs	r2, #1
 800ab56:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7ff f8a3 	bl	8009ca6 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	01db      	lsls	r3, r3, #7
 800ab6a:	4413      	add	r3, r2
 800ab6c:	3304      	adds	r3, #4
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0302 	and.w	r3, r3, #2
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d101      	bne.n	800ab7c <HRTIM_Timer_ISR+0x76>
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e000      	b.n	800ab7e <HRTIM_Timer_ISR+0x78>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d016      	beq.n	800abb0 <HRTIM_Timer_ISR+0xaa>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2) != RESET)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	01db      	lsls	r3, r3, #7
 800ab8a:	4413      	add	r3, r2
 800ab8c:	338c      	adds	r3, #140	; 0x8c
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 0302 	and.w	r3, r3, #2
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d10b      	bne.n	800abb0 <HRTIM_Timer_ISR+0xaa>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	01db      	lsls	r3, r3, #7
 800aba0:	4413      	add	r3, r2
 800aba2:	3388      	adds	r3, #136	; 0x88
 800aba4:	2202      	movs	r2, #2
 800aba6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff f886 	bl	8009cbc <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	3301      	adds	r3, #1
 800abb8:	01db      	lsls	r3, r3, #7
 800abba:	4413      	add	r3, r2
 800abbc:	3304      	adds	r3, #4
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	2b04      	cmp	r3, #4
 800abc6:	d101      	bne.n	800abcc <HRTIM_Timer_ISR+0xc6>
 800abc8:	2301      	movs	r3, #1
 800abca:	e000      	b.n	800abce <HRTIM_Timer_ISR+0xc8>
 800abcc:	2300      	movs	r3, #0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d016      	beq.n	800ac00 <HRTIM_Timer_ISR+0xfa>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3) != RESET)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	01db      	lsls	r3, r3, #7
 800abda:	4413      	add	r3, r2
 800abdc:	338c      	adds	r3, #140	; 0x8c
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	2b04      	cmp	r3, #4
 800abe6:	d10b      	bne.n	800ac00 <HRTIM_Timer_ISR+0xfa>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	01db      	lsls	r3, r3, #7
 800abf0:	4413      	add	r3, r2
 800abf2:	3388      	adds	r3, #136	; 0x88
 800abf4:	2204      	movs	r2, #4
 800abf6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff f869 	bl	8009cd2 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	3301      	adds	r3, #1
 800ac08:	01db      	lsls	r3, r3, #7
 800ac0a:	4413      	add	r3, r2
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0308 	and.w	r3, r3, #8
 800ac14:	2b08      	cmp	r3, #8
 800ac16:	d101      	bne.n	800ac1c <HRTIM_Timer_ISR+0x116>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e000      	b.n	800ac1e <HRTIM_Timer_ISR+0x118>
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d016      	beq.n	800ac50 <HRTIM_Timer_ISR+0x14a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4) != RESET)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	01db      	lsls	r3, r3, #7
 800ac2a:	4413      	add	r3, r2
 800ac2c:	338c      	adds	r3, #140	; 0x8c
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 0308 	and.w	r3, r3, #8
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	d10b      	bne.n	800ac50 <HRTIM_Timer_ISR+0x14a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	01db      	lsls	r3, r3, #7
 800ac40:	4413      	add	r3, r2
 800ac42:	3388      	adds	r3, #136	; 0x88
 800ac44:	2208      	movs	r2, #8
 800ac46:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff f84c 	bl	8009ce8 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	3301      	adds	r3, #1
 800ac58:	01db      	lsls	r3, r3, #7
 800ac5a:	4413      	add	r3, r2
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0310 	and.w	r3, r3, #16
 800ac64:	2b10      	cmp	r3, #16
 800ac66:	d101      	bne.n	800ac6c <HRTIM_Timer_ISR+0x166>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e000      	b.n	800ac6e <HRTIM_Timer_ISR+0x168>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d016      	beq.n	800aca0 <HRTIM_Timer_ISR+0x19a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_REP) != RESET)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	01db      	lsls	r3, r3, #7
 800ac7a:	4413      	add	r3, r2
 800ac7c:	338c      	adds	r3, #140	; 0x8c
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0310 	and.w	r3, r3, #16
 800ac84:	2b10      	cmp	r3, #16
 800ac86:	d10b      	bne.n	800aca0 <HRTIM_Timer_ISR+0x19a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	01db      	lsls	r3, r3, #7
 800ac90:	4413      	add	r3, r2
 800ac92:	3388      	adds	r3, #136	; 0x88
 800ac94:	2210      	movs	r2, #16
 800ac96:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7fe fff8 	bl	8009c90 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	3301      	adds	r3, #1
 800aca8:	01db      	lsls	r3, r3, #7
 800acaa:	4413      	add	r3, r2
 800acac:	3304      	adds	r3, #4
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb4:	2b40      	cmp	r3, #64	; 0x40
 800acb6:	d101      	bne.n	800acbc <HRTIM_Timer_ISR+0x1b6>
 800acb8:	2301      	movs	r3, #1
 800acba:	e000      	b.n	800acbe <HRTIM_Timer_ISR+0x1b8>
 800acbc:	2300      	movs	r3, #0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d016      	beq.n	800acf0 <HRTIM_Timer_ISR+0x1ea>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD) != RESET)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	01db      	lsls	r3, r3, #7
 800acca:	4413      	add	r3, r2
 800accc:	338c      	adds	r3, #140	; 0x8c
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd4:	2b40      	cmp	r3, #64	; 0x40
 800acd6:	d10b      	bne.n	800acf0 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	01db      	lsls	r3, r3, #7
 800ace0:	4413      	add	r3, r2
 800ace2:	3388      	adds	r3, #136	; 0x88
 800ace4:	2240      	movs	r2, #64	; 0x40
 800ace6:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7fe ffc5 	bl	8009c7a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	3301      	adds	r3, #1
 800acf8:	01db      	lsls	r3, r3, #7
 800acfa:	4413      	add	r3, r2
 800acfc:	3304      	adds	r3, #4
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad04:	2b80      	cmp	r3, #128	; 0x80
 800ad06:	d101      	bne.n	800ad0c <HRTIM_Timer_ISR+0x206>
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e000      	b.n	800ad0e <HRTIM_Timer_ISR+0x208>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d016      	beq.n	800ad40 <HRTIM_Timer_ISR+0x23a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1) != RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	01db      	lsls	r3, r3, #7
 800ad1a:	4413      	add	r3, r2
 800ad1c:	338c      	adds	r3, #140	; 0x8c
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad24:	2b80      	cmp	r3, #128	; 0x80
 800ad26:	d10b      	bne.n	800ad40 <HRTIM_Timer_ISR+0x23a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	01db      	lsls	r3, r3, #7
 800ad30:	4413      	add	r3, r2
 800ad32:	3388      	adds	r3, #136	; 0x88
 800ad34:	2280      	movs	r2, #128	; 0x80
 800ad36:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7fe ffdf 	bl	8009cfe <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	3301      	adds	r3, #1
 800ad48:	01db      	lsls	r3, r3, #7
 800ad4a:	4413      	add	r3, r2
 800ad4c:	3304      	adds	r3, #4
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad58:	d101      	bne.n	800ad5e <HRTIM_Timer_ISR+0x258>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e000      	b.n	800ad60 <HRTIM_Timer_ISR+0x25a>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d018      	beq.n	800ad96 <HRTIM_Timer_ISR+0x290>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2) != RESET)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	01db      	lsls	r3, r3, #7
 800ad6c:	4413      	add	r3, r2
 800ad6e:	338c      	adds	r3, #140	; 0x8c
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad7a:	d10c      	bne.n	800ad96 <HRTIM_Timer_ISR+0x290>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	01db      	lsls	r3, r3, #7
 800ad84:	4413      	add	r3, r2
 800ad86:	3388      	adds	r3, #136	; 0x88
 800ad88:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad8c:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7fe ffbf 	bl	8009d14 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	01db      	lsls	r3, r3, #7
 800ada0:	4413      	add	r3, r2
 800ada2:	3304      	adds	r3, #4
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adae:	d101      	bne.n	800adb4 <HRTIM_Timer_ISR+0x2ae>
 800adb0:	2301      	movs	r3, #1
 800adb2:	e000      	b.n	800adb6 <HRTIM_Timer_ISR+0x2b0>
 800adb4:	2300      	movs	r3, #0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d018      	beq.n	800adec <HRTIM_Timer_ISR+0x2e6>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1) != RESET)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	01db      	lsls	r3, r3, #7
 800adc2:	4413      	add	r3, r2
 800adc4:	338c      	adds	r3, #140	; 0x8c
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800add0:	d10c      	bne.n	800adec <HRTIM_Timer_ISR+0x2e6>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	01db      	lsls	r3, r3, #7
 800adda:	4413      	add	r3, r2
 800addc:	3388      	adds	r3, #136	; 0x88
 800adde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ade2:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7fe ffb5 	bl	8009d56 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	01db      	lsls	r3, r3, #7
 800adf6:	4413      	add	r3, r2
 800adf8:	3304      	adds	r3, #4
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae04:	d101      	bne.n	800ae0a <HRTIM_Timer_ISR+0x304>
 800ae06:	2301      	movs	r3, #1
 800ae08:	e000      	b.n	800ae0c <HRTIM_Timer_ISR+0x306>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d018      	beq.n	800ae42 <HRTIM_Timer_ISR+0x33c>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1) != RESET)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	01db      	lsls	r3, r3, #7
 800ae18:	4413      	add	r3, r2
 800ae1a:	338c      	adds	r3, #140	; 0x8c
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae26:	d10c      	bne.n	800ae42 <HRTIM_Timer_ISR+0x33c>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	01db      	lsls	r3, r3, #7
 800ae30:	4413      	add	r3, r2
 800ae32:	3388      	adds	r3, #136	; 0x88
 800ae34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae38:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7fe ff95 	bl	8009d6c <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	01db      	lsls	r3, r3, #7
 800ae4c:	4413      	add	r3, r2
 800ae4e:	3304      	adds	r3, #4
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae5a:	d101      	bne.n	800ae60 <HRTIM_Timer_ISR+0x35a>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e000      	b.n	800ae62 <HRTIM_Timer_ISR+0x35c>
 800ae60:	2300      	movs	r3, #0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d018      	beq.n	800ae98 <HRTIM_Timer_ISR+0x392>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2) != RESET)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	01db      	lsls	r3, r3, #7
 800ae6e:	4413      	add	r3, r2
 800ae70:	338c      	adds	r3, #140	; 0x8c
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae7c:	d10c      	bne.n	800ae98 <HRTIM_Timer_ISR+0x392>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	01db      	lsls	r3, r3, #7
 800ae86:	4413      	add	r3, r2
 800ae88:	3388      	adds	r3, #136	; 0x88
 800ae8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae8e:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7fe ff75 	bl	8009d82 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	01db      	lsls	r3, r3, #7
 800aea2:	4413      	add	r3, r2
 800aea4:	3304      	adds	r3, #4
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aeac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeb0:	d101      	bne.n	800aeb6 <HRTIM_Timer_ISR+0x3b0>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e000      	b.n	800aeb8 <HRTIM_Timer_ISR+0x3b2>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d018      	beq.n	800aeee <HRTIM_Timer_ISR+0x3e8>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2) != RESET)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	01db      	lsls	r3, r3, #7
 800aec4:	4413      	add	r3, r2
 800aec6:	338c      	adds	r3, #140	; 0x8c
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aed2:	d10c      	bne.n	800aeee <HRTIM_Timer_ISR+0x3e8>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	01db      	lsls	r3, r3, #7
 800aedc:	4413      	add	r3, r2
 800aede:	3388      	adds	r3, #136	; 0x88
 800aee0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aee4:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7fe ff55 	bl	8009d98 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	3301      	adds	r3, #1
 800aef6:	01db      	lsls	r3, r3, #7
 800aef8:	4413      	add	r3, r2
 800aefa:	3304      	adds	r3, #4
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af06:	d101      	bne.n	800af0c <HRTIM_Timer_ISR+0x406>
 800af08:	2301      	movs	r3, #1
 800af0a:	e000      	b.n	800af0e <HRTIM_Timer_ISR+0x408>
 800af0c:	2300      	movs	r3, #0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d018      	beq.n	800af44 <HRTIM_Timer_ISR+0x43e>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST) != RESET)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	01db      	lsls	r3, r3, #7
 800af1a:	4413      	add	r3, r2
 800af1c:	338c      	adds	r3, #140	; 0x8c
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af28:	d10c      	bne.n	800af44 <HRTIM_Timer_ISR+0x43e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	01db      	lsls	r3, r3, #7
 800af32:	4413      	add	r3, r2
 800af34:	3388      	adds	r3, #136	; 0x88
 800af36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800af3a:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7fe fefe 	bl	8009d40 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	3301      	adds	r3, #1
 800af4c:	01db      	lsls	r3, r3, #7
 800af4e:	4413      	add	r3, r2
 800af50:	3304      	adds	r3, #4
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af5c:	d101      	bne.n	800af62 <HRTIM_Timer_ISR+0x45c>
 800af5e:	2301      	movs	r3, #1
 800af60:	e000      	b.n	800af64 <HRTIM_Timer_ISR+0x45e>
 800af62:	2300      	movs	r3, #0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d018      	beq.n	800af9a <HRTIM_Timer_ISR+0x494>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT) != RESET)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	01db      	lsls	r3, r3, #7
 800af70:	4413      	add	r3, r2
 800af72:	338c      	adds	r3, #140	; 0x8c
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af7e:	d10c      	bne.n	800af9a <HRTIM_Timer_ISR+0x494>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	01db      	lsls	r3, r3, #7
 800af88:	4413      	add	r3, r2
 800af8a:	3388      	adds	r3, #136	; 0x88
 800af8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800af90:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7fe fec8 	bl	8009d2a <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800af9a:	bf00      	nop
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <HRTIM_DMAMasterCplt>:
  * @brief  DMA callback invoked upon master timer related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMAMasterCplt(DMA_HandleTypeDef *hdma)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afae:	60fb      	str	r3, [r7, #12]

  if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP1) != (uint32_t)RESET)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d004      	beq.n	800afc8 <HRTIM_DMAMasterCplt+0x26>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800afbe:	2106      	movs	r1, #6
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7fe fe70 	bl	8009ca6 <HAL_HRTIM_Compare1EventCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 800afc6:	e045      	b.n	800b054 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP2) != (uint32_t)RESET)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d004      	beq.n	800afe0 <HRTIM_DMAMasterCplt+0x3e>
    HAL_HRTIM_Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800afd6:	2106      	movs	r1, #6
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f7fe fe6f 	bl	8009cbc <HAL_HRTIM_Compare2EventCallback>
}
 800afde:	e039      	b.n	800b054 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP3) != (uint32_t)RESET)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800afea:	2b00      	cmp	r3, #0
 800afec:	d004      	beq.n	800aff8 <HRTIM_DMAMasterCplt+0x56>
    HAL_HRTIM_Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800afee:	2106      	movs	r1, #6
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f7fe fe6e 	bl	8009cd2 <HAL_HRTIM_Compare3EventCallback>
}
 800aff6:	e02d      	b.n	800b054 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP4) != (uint32_t)RESET)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b002:	2b00      	cmp	r3, #0
 800b004:	d004      	beq.n	800b010 <HRTIM_DMAMasterCplt+0x6e>
    HAL_HRTIM_Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800b006:	2106      	movs	r1, #6
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f7fe fe6d 	bl	8009ce8 <HAL_HRTIM_Compare4EventCallback>
}
 800b00e:	e021      	b.n	800b054 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_SYNC) != (uint32_t)RESET)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d003      	beq.n	800b026 <HRTIM_DMAMasterCplt+0x84>
    HAL_HRTIM_SynchronizationEventCallback(hrtim);
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f7fe fe21 	bl	8009c66 <HAL_HRTIM_SynchronizationEventCallback>
}
 800b024:	e016      	b.n	800b054 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MUPD) != (uint32_t)RESET)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b030:	2b00      	cmp	r3, #0
 800b032:	d004      	beq.n	800b03e <HRTIM_DMAMasterCplt+0x9c>
    HAL_HRTIM_RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800b034:	2106      	movs	r1, #6
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f7fe fe1f 	bl	8009c7a <HAL_HRTIM_RegistersUpdateCallback>
}
 800b03c:	e00a      	b.n	800b054 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MREP) != (uint32_t)RESET)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <HRTIM_DMAMasterCplt+0xb2>
    HAL_HRTIM_RepetitionEventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800b04c:	2106      	movs	r1, #6
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f7fe fe1e 	bl	8009c90 <HAL_HRTIM_RepetitionEventCallback>
}
 800b054:	bf00      	nop
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <HRTIM_DMATimerxCplt>:
  * @brief  DMA callback invoked upon timer A..F related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMATimerxCplt(DMA_HandleTypeDef *hdma)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;

  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b068:	60fb      	str	r3, [r7, #12]

  timer_idx = (uint8_t)GetTimerIdxFromDMAHandle(hrtim, hdma);
 800b06a:	6879      	ldr	r1, [r7, #4]
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f7ff faaf 	bl	800a5d0 <GetTimerIdxFromDMAHandle>
 800b072:	4603      	mov	r3, r0
 800b074:	72fb      	strb	r3, [r7, #11]

  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 800b076:	7afb      	ldrb	r3, [r7, #11]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00f      	beq.n	800b09c <HRTIM_DMATimerxCplt+0x40>
 800b07c:	7afb      	ldrb	r3, [r7, #11]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d00c      	beq.n	800b09c <HRTIM_DMATimerxCplt+0x40>
 800b082:	7afb      	ldrb	r3, [r7, #11]
 800b084:	2b02      	cmp	r3, #2
 800b086:	d009      	beq.n	800b09c <HRTIM_DMATimerxCplt+0x40>
 800b088:	7afb      	ldrb	r3, [r7, #11]
 800b08a:	2b03      	cmp	r3, #3
 800b08c:	d006      	beq.n	800b09c <HRTIM_DMATimerxCplt+0x40>
 800b08e:	7afb      	ldrb	r3, [r7, #11]
 800b090:	2b04      	cmp	r3, #4
 800b092:	d003      	beq.n	800b09c <HRTIM_DMATimerxCplt+0x40>
 800b094:	7afb      	ldrb	r3, [r7, #11]
 800b096:	2b05      	cmp	r3, #5
 800b098:	f040 80ee 	bne.w	800b278 <HRTIM_DMATimerxCplt+0x21c>

  if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP1) != (uint32_t)RESET)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	7afb      	ldrb	r3, [r7, #11]
 800b0a2:	01db      	lsls	r3, r3, #7
 800b0a4:	4413      	add	r3, r2
 800b0a6:	338c      	adds	r3, #140	; 0x8c
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d005      	beq.n	800b0be <HRTIM_DMATimerxCplt+0x62>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, timer_idx);
 800b0b2:	7afb      	ldrb	r3, [r7, #11]
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f7fe fdf5 	bl	8009ca6 <HAL_HRTIM_Compare1EventCallback>
 800b0bc:	e0dd      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP2) != (uint32_t)RESET)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	7afb      	ldrb	r3, [r7, #11]
 800b0c4:	01db      	lsls	r3, r3, #7
 800b0c6:	4413      	add	r3, r2
 800b0c8:	338c      	adds	r3, #140	; 0x8c
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d005      	beq.n	800b0e0 <HRTIM_DMATimerxCplt+0x84>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare2EventCallback(hrtim, timer_idx);
 800b0d4:	7afb      	ldrb	r3, [r7, #11]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7fe fdef 	bl	8009cbc <HAL_HRTIM_Compare2EventCallback>
 800b0de:	e0cc      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP3) != (uint32_t)RESET)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	7afb      	ldrb	r3, [r7, #11]
 800b0e6:	01db      	lsls	r3, r3, #7
 800b0e8:	4413      	add	r3, r2
 800b0ea:	338c      	adds	r3, #140	; 0x8c
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d005      	beq.n	800b102 <HRTIM_DMATimerxCplt+0xa6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare3EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare3EventCallback(hrtim, timer_idx);
 800b0f6:	7afb      	ldrb	r3, [r7, #11]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f7fe fde9 	bl	8009cd2 <HAL_HRTIM_Compare3EventCallback>
 800b100:	e0bb      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP4) != (uint32_t)RESET)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	7afb      	ldrb	r3, [r7, #11]
 800b108:	01db      	lsls	r3, r3, #7
 800b10a:	4413      	add	r3, r2
 800b10c:	338c      	adds	r3, #140	; 0x8c
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d005      	beq.n	800b124 <HRTIM_DMATimerxCplt+0xc8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare4EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare4EventCallback(hrtim, timer_idx);
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	4619      	mov	r1, r3
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7fe fde3 	bl	8009ce8 <HAL_HRTIM_Compare4EventCallback>
 800b122:	e0aa      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_UPD) != (uint32_t)RESET)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	7afb      	ldrb	r3, [r7, #11]
 800b12a:	01db      	lsls	r3, r3, #7
 800b12c:	4413      	add	r3, r2
 800b12e:	338c      	adds	r3, #140	; 0x8c
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b136:	2b00      	cmp	r3, #0
 800b138:	d005      	beq.n	800b146 <HRTIM_DMATimerxCplt+0xea>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RegistersUpdateCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RegistersUpdateCallback(hrtim, timer_idx);
 800b13a:	7afb      	ldrb	r3, [r7, #11]
 800b13c:	4619      	mov	r1, r3
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f7fe fd9b 	bl	8009c7a <HAL_HRTIM_RegistersUpdateCallback>
 800b144:	e099      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT1) != (uint32_t)RESET)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	7afb      	ldrb	r3, [r7, #11]
 800b14c:	01db      	lsls	r3, r3, #7
 800b14e:	4413      	add	r3, r2
 800b150:	338c      	adds	r3, #140	; 0x8c
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d005      	beq.n	800b168 <HRTIM_DMATimerxCplt+0x10c>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture1EventCallback(hrtim, timer_idx);
 800b15c:	7afb      	ldrb	r3, [r7, #11]
 800b15e:	4619      	mov	r1, r3
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f7fe fdcc 	bl	8009cfe <HAL_HRTIM_Capture1EventCallback>
 800b166:	e088      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT2) != (uint32_t)RESET)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	7afb      	ldrb	r3, [r7, #11]
 800b16e:	01db      	lsls	r3, r3, #7
 800b170:	4413      	add	r3, r2
 800b172:	338c      	adds	r3, #140	; 0x8c
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d005      	beq.n	800b18a <HRTIM_DMATimerxCplt+0x12e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture2EventCallback(hrtim, timer_idx);
 800b17e:	7afb      	ldrb	r3, [r7, #11]
 800b180:	4619      	mov	r1, r3
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f7fe fdc6 	bl	8009d14 <HAL_HRTIM_Capture2EventCallback>
 800b188:	e077      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET1) != (uint32_t)RESET)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	7afb      	ldrb	r3, [r7, #11]
 800b190:	01db      	lsls	r3, r3, #7
 800b192:	4413      	add	r3, r2
 800b194:	338c      	adds	r3, #140	; 0x8c
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d005      	beq.n	800b1ac <HRTIM_DMATimerxCplt+0x150>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1SetCallback(hrtim, timer_idx);
 800b1a0:	7afb      	ldrb	r3, [r7, #11]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f7fe fdd6 	bl	8009d56 <HAL_HRTIM_Output1SetCallback>
 800b1aa:	e066      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST1) != (uint32_t)RESET)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	7afb      	ldrb	r3, [r7, #11]
 800b1b2:	01db      	lsls	r3, r3, #7
 800b1b4:	4413      	add	r3, r2
 800b1b6:	338c      	adds	r3, #140	; 0x8c
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d005      	beq.n	800b1ce <HRTIM_DMATimerxCplt+0x172>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1ResetCallback(hrtim, timer_idx);
 800b1c2:	7afb      	ldrb	r3, [r7, #11]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f7fe fdd0 	bl	8009d6c <HAL_HRTIM_Output1ResetCallback>
 800b1cc:	e055      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET2) != (uint32_t)RESET)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	7afb      	ldrb	r3, [r7, #11]
 800b1d4:	01db      	lsls	r3, r3, #7
 800b1d6:	4413      	add	r3, r2
 800b1d8:	338c      	adds	r3, #140	; 0x8c
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d005      	beq.n	800b1f0 <HRTIM_DMATimerxCplt+0x194>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2SetCallback(hrtim, timer_idx);
 800b1e4:	7afb      	ldrb	r3, [r7, #11]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f7fe fdca 	bl	8009d82 <HAL_HRTIM_Output2SetCallback>
 800b1ee:	e044      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST2) != (uint32_t)RESET)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	7afb      	ldrb	r3, [r7, #11]
 800b1f6:	01db      	lsls	r3, r3, #7
 800b1f8:	4413      	add	r3, r2
 800b1fa:	338c      	adds	r3, #140	; 0x8c
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b202:	2b00      	cmp	r3, #0
 800b204:	d005      	beq.n	800b212 <HRTIM_DMATimerxCplt+0x1b6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2ResetCallback(hrtim, timer_idx);
 800b206:	7afb      	ldrb	r3, [r7, #11]
 800b208:	4619      	mov	r1, r3
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f7fe fdc4 	bl	8009d98 <HAL_HRTIM_Output2ResetCallback>
 800b210:	e033      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST) != (uint32_t)RESET)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	7afb      	ldrb	r3, [r7, #11]
 800b218:	01db      	lsls	r3, r3, #7
 800b21a:	4413      	add	r3, r2
 800b21c:	338c      	adds	r3, #140	; 0x8c
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d005      	beq.n	800b234 <HRTIM_DMATimerxCplt+0x1d8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->CounterResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_CounterResetCallback(hrtim, timer_idx);
 800b228:	7afb      	ldrb	r3, [r7, #11]
 800b22a:	4619      	mov	r1, r3
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f7fe fd87 	bl	8009d40 <HAL_HRTIM_CounterResetCallback>
 800b232:	e022      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_DLYPRT) != (uint32_t)RESET)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	7afb      	ldrb	r3, [r7, #11]
 800b23a:	01db      	lsls	r3, r3, #7
 800b23c:	4413      	add	r3, r2
 800b23e:	338c      	adds	r3, #140	; 0x8c
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b246:	2b00      	cmp	r3, #0
 800b248:	d005      	beq.n	800b256 <HRTIM_DMATimerxCplt+0x1fa>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->DelayedProtectionCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_DelayedProtectionCallback(hrtim, timer_idx);
 800b24a:	7afb      	ldrb	r3, [r7, #11]
 800b24c:	4619      	mov	r1, r3
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f7fe fd6b 	bl	8009d2a <HAL_HRTIM_DelayedProtectionCallback>
 800b254:	e011      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_REP) != (uint32_t)RESET)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	7afb      	ldrb	r3, [r7, #11]
 800b25c:	01db      	lsls	r3, r3, #7
 800b25e:	4413      	add	r3, r2
 800b260:	338c      	adds	r3, #140	; 0x8c
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d006      	beq.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RepetitionEventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RepetitionEventCallback(hrtim, timer_idx);
 800b26c:	7afb      	ldrb	r3, [r7, #11]
 800b26e:	4619      	mov	r1, r3
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7fe fd0d 	bl	8009c90 <HAL_HRTIM_RepetitionEventCallback>
 800b276:	e000      	b.n	800b27a <HRTIM_DMATimerxCplt+0x21e>
  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 800b278:	bf00      	nop
  }
  else
  {
    /* nothing to do */
  }
}
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <HRTIM_DMAError>:
* @brief  DMA error callback
* @param  hdma pointer to DMA handle.
* @retval None
*/
static void HRTIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->ErrorCallback(hrtim);
#else
  HAL_HRTIM_ErrorCallback(hrtim);
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f7fe fd8d 	bl	8009dae <HAL_HRTIM_ErrorCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
}
 800b294:	bf00      	nop
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d141      	bne.n	800b32e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b2aa:	4b4b      	ldr	r3, [pc, #300]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b2b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2b6:	d131      	bne.n	800b31c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b2b8:	4b47      	ldr	r3, [pc, #284]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2be:	4a46      	ldr	r2, [pc, #280]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b2c8:	4b43      	ldr	r3, [pc, #268]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b2d0:	4a41      	ldr	r2, [pc, #260]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b2d8:	4b40      	ldr	r3, [pc, #256]	; (800b3dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2232      	movs	r2, #50	; 0x32
 800b2de:	fb02 f303 	mul.w	r3, r2, r3
 800b2e2:	4a3f      	ldr	r2, [pc, #252]	; (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e8:	0c9b      	lsrs	r3, r3, #18
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b2ee:	e002      	b.n	800b2f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b2f6:	4b38      	ldr	r3, [pc, #224]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b302:	d102      	bne.n	800b30a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1f2      	bne.n	800b2f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b30a:	4b33      	ldr	r3, [pc, #204]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b316:	d158      	bne.n	800b3ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b318:	2303      	movs	r3, #3
 800b31a:	e057      	b.n	800b3cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b31c:	4b2e      	ldr	r3, [pc, #184]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b322:	4a2d      	ldr	r2, [pc, #180]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b328:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b32c:	e04d      	b.n	800b3ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b334:	d141      	bne.n	800b3ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b336:	4b28      	ldr	r3, [pc, #160]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b33e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b342:	d131      	bne.n	800b3a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b344:	4b24      	ldr	r3, [pc, #144]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b34a:	4a23      	ldr	r2, [pc, #140]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b34c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b354:	4b20      	ldr	r3, [pc, #128]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b35c:	4a1e      	ldr	r2, [pc, #120]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b35e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b362:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b364:	4b1d      	ldr	r3, [pc, #116]	; (800b3dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2232      	movs	r2, #50	; 0x32
 800b36a:	fb02 f303 	mul.w	r3, r2, r3
 800b36e:	4a1c      	ldr	r2, [pc, #112]	; (800b3e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b370:	fba2 2303 	umull	r2, r3, r2, r3
 800b374:	0c9b      	lsrs	r3, r3, #18
 800b376:	3301      	adds	r3, #1
 800b378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b37a:	e002      	b.n	800b382 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3b01      	subs	r3, #1
 800b380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b382:	4b15      	ldr	r3, [pc, #84]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b38a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b38e:	d102      	bne.n	800b396 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1f2      	bne.n	800b37c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b396:	4b10      	ldr	r3, [pc, #64]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b39e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3a2:	d112      	bne.n	800b3ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e011      	b.n	800b3cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b3a8:	4b0b      	ldr	r3, [pc, #44]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3ae:	4a0a      	ldr	r2, [pc, #40]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b3b8:	e007      	b.n	800b3ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b3ba:	4b07      	ldr	r3, [pc, #28]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b3c2:	4a05      	ldr	r2, [pc, #20]	; (800b3d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b3c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	40007000 	.word	0x40007000
 800b3dc:	20000004 	.word	0x20000004
 800b3e0:	431bde83 	.word	0x431bde83

0800b3e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b3e8:	4b05      	ldr	r3, [pc, #20]	; (800b400 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	4a04      	ldr	r2, [pc, #16]	; (800b400 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b3ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3f2:	6093      	str	r3, [r2, #8]
}
 800b3f4:	bf00      	nop
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	40007000 	.word	0x40007000

0800b404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b088      	sub	sp, #32
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	e308      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d075      	beq.n	800b50e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b422:	4ba3      	ldr	r3, [pc, #652]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	f003 030c 	and.w	r3, r3, #12
 800b42a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b42c:	4ba0      	ldr	r3, [pc, #640]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	f003 0303 	and.w	r3, r3, #3
 800b434:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	2b0c      	cmp	r3, #12
 800b43a:	d102      	bne.n	800b442 <HAL_RCC_OscConfig+0x3e>
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d002      	beq.n	800b448 <HAL_RCC_OscConfig+0x44>
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	2b08      	cmp	r3, #8
 800b446:	d10b      	bne.n	800b460 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b448:	4b99      	ldr	r3, [pc, #612]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d05b      	beq.n	800b50c <HAL_RCC_OscConfig+0x108>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d157      	bne.n	800b50c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e2e3      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b468:	d106      	bne.n	800b478 <HAL_RCC_OscConfig+0x74>
 800b46a:	4b91      	ldr	r3, [pc, #580]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a90      	ldr	r2, [pc, #576]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b474:	6013      	str	r3, [r2, #0]
 800b476:	e01d      	b.n	800b4b4 <HAL_RCC_OscConfig+0xb0>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b480:	d10c      	bne.n	800b49c <HAL_RCC_OscConfig+0x98>
 800b482:	4b8b      	ldr	r3, [pc, #556]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a8a      	ldr	r2, [pc, #552]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b48c:	6013      	str	r3, [r2, #0]
 800b48e:	4b88      	ldr	r3, [pc, #544]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a87      	ldr	r2, [pc, #540]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b498:	6013      	str	r3, [r2, #0]
 800b49a:	e00b      	b.n	800b4b4 <HAL_RCC_OscConfig+0xb0>
 800b49c:	4b84      	ldr	r3, [pc, #528]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a83      	ldr	r2, [pc, #524]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b4a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4a6:	6013      	str	r3, [r2, #0]
 800b4a8:	4b81      	ldr	r3, [pc, #516]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a80      	ldr	r2, [pc, #512]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b4ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d013      	beq.n	800b4e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4bc:	f7fa fce6 	bl	8005e8c <HAL_GetTick>
 800b4c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b4c2:	e008      	b.n	800b4d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4c4:	f7fa fce2 	bl	8005e8c <HAL_GetTick>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	2b64      	cmp	r3, #100	; 0x64
 800b4d0:	d901      	bls.n	800b4d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	e2a8      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b4d6:	4b76      	ldr	r3, [pc, #472]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d0f0      	beq.n	800b4c4 <HAL_RCC_OscConfig+0xc0>
 800b4e2:	e014      	b.n	800b50e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4e4:	f7fa fcd2 	bl	8005e8c <HAL_GetTick>
 800b4e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b4ea:	e008      	b.n	800b4fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4ec:	f7fa fcce 	bl	8005e8c <HAL_GetTick>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	2b64      	cmp	r3, #100	; 0x64
 800b4f8:	d901      	bls.n	800b4fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e294      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b4fe:	4b6c      	ldr	r3, [pc, #432]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1f0      	bne.n	800b4ec <HAL_RCC_OscConfig+0xe8>
 800b50a:	e000      	b.n	800b50e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b50c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 0302 	and.w	r3, r3, #2
 800b516:	2b00      	cmp	r3, #0
 800b518:	d075      	beq.n	800b606 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b51a:	4b65      	ldr	r3, [pc, #404]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	f003 030c 	and.w	r3, r3, #12
 800b522:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b524:	4b62      	ldr	r3, [pc, #392]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	f003 0303 	and.w	r3, r3, #3
 800b52c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	2b0c      	cmp	r3, #12
 800b532:	d102      	bne.n	800b53a <HAL_RCC_OscConfig+0x136>
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2b02      	cmp	r3, #2
 800b538:	d002      	beq.n	800b540 <HAL_RCC_OscConfig+0x13c>
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	2b04      	cmp	r3, #4
 800b53e:	d11f      	bne.n	800b580 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b540:	4b5b      	ldr	r3, [pc, #364]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d005      	beq.n	800b558 <HAL_RCC_OscConfig+0x154>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	e267      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b558:	4b55      	ldr	r3, [pc, #340]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	061b      	lsls	r3, r3, #24
 800b566:	4952      	ldr	r1, [pc, #328]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b568:	4313      	orrs	r3, r2
 800b56a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b56c:	4b51      	ldr	r3, [pc, #324]	; (800b6b4 <HAL_RCC_OscConfig+0x2b0>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4618      	mov	r0, r3
 800b572:	f7fa fc3f 	bl	8005df4 <HAL_InitTick>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d043      	beq.n	800b604 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e253      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d023      	beq.n	800b5d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b588:	4b49      	ldr	r3, [pc, #292]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a48      	ldr	r2, [pc, #288]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b58e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b594:	f7fa fc7a 	bl	8005e8c <HAL_GetTick>
 800b598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b59a:	e008      	b.n	800b5ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b59c:	f7fa fc76 	bl	8005e8c <HAL_GetTick>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	d901      	bls.n	800b5ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e23c      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5ae:	4b40      	ldr	r3, [pc, #256]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d0f0      	beq.n	800b59c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5ba:	4b3d      	ldr	r3, [pc, #244]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	061b      	lsls	r3, r3, #24
 800b5c8:	4939      	ldr	r1, [pc, #228]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	604b      	str	r3, [r1, #4]
 800b5ce:	e01a      	b.n	800b606 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b5d0:	4b37      	ldr	r3, [pc, #220]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a36      	ldr	r2, [pc, #216]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b5d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5dc:	f7fa fc56 	bl	8005e8c <HAL_GetTick>
 800b5e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b5e2:	e008      	b.n	800b5f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5e4:	f7fa fc52 	bl	8005e8c <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d901      	bls.n	800b5f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e218      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b5f6:	4b2e      	ldr	r3, [pc, #184]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1f0      	bne.n	800b5e4 <HAL_RCC_OscConfig+0x1e0>
 800b602:	e000      	b.n	800b606 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b604:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f003 0308 	and.w	r3, r3, #8
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d03c      	beq.n	800b68c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	695b      	ldr	r3, [r3, #20]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d01c      	beq.n	800b654 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b61a:	4b25      	ldr	r3, [pc, #148]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b61c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b620:	4a23      	ldr	r2, [pc, #140]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b622:	f043 0301 	orr.w	r3, r3, #1
 800b626:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b62a:	f7fa fc2f 	bl	8005e8c <HAL_GetTick>
 800b62e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b630:	e008      	b.n	800b644 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b632:	f7fa fc2b 	bl	8005e8c <HAL_GetTick>
 800b636:	4602      	mov	r2, r0
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d901      	bls.n	800b644 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b640:	2303      	movs	r3, #3
 800b642:	e1f1      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b644:	4b1a      	ldr	r3, [pc, #104]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b64a:	f003 0302 	and.w	r3, r3, #2
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d0ef      	beq.n	800b632 <HAL_RCC_OscConfig+0x22e>
 800b652:	e01b      	b.n	800b68c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b654:	4b16      	ldr	r3, [pc, #88]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b65a:	4a15      	ldr	r2, [pc, #84]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b65c:	f023 0301 	bic.w	r3, r3, #1
 800b660:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b664:	f7fa fc12 	bl	8005e8c <HAL_GetTick>
 800b668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b66a:	e008      	b.n	800b67e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b66c:	f7fa fc0e 	bl	8005e8c <HAL_GetTick>
 800b670:	4602      	mov	r2, r0
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	2b02      	cmp	r3, #2
 800b678:	d901      	bls.n	800b67e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b67a:	2303      	movs	r3, #3
 800b67c:	e1d4      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b67e:	4b0c      	ldr	r3, [pc, #48]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b684:	f003 0302 	and.w	r3, r3, #2
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1ef      	bne.n	800b66c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 0304 	and.w	r3, r3, #4
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 80ab 	beq.w	800b7f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b69a:	2300      	movs	r3, #0
 800b69c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b69e:	4b04      	ldr	r3, [pc, #16]	; (800b6b0 <HAL_RCC_OscConfig+0x2ac>)
 800b6a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d106      	bne.n	800b6b8 <HAL_RCC_OscConfig+0x2b4>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e005      	b.n	800b6ba <HAL_RCC_OscConfig+0x2b6>
 800b6ae:	bf00      	nop
 800b6b0:	40021000 	.word	0x40021000
 800b6b4:	20000008 	.word	0x20000008
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00d      	beq.n	800b6da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6be:	4baf      	ldr	r3, [pc, #700]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6c2:	4aae      	ldr	r2, [pc, #696]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b6c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6c8:	6593      	str	r3, [r2, #88]	; 0x58
 800b6ca:	4bac      	ldr	r3, [pc, #688]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b6cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6d2:	60fb      	str	r3, [r7, #12]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b6da:	4ba9      	ldr	r3, [pc, #676]	; (800b980 <HAL_RCC_OscConfig+0x57c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d118      	bne.n	800b718 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6e6:	4ba6      	ldr	r3, [pc, #664]	; (800b980 <HAL_RCC_OscConfig+0x57c>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4aa5      	ldr	r2, [pc, #660]	; (800b980 <HAL_RCC_OscConfig+0x57c>)
 800b6ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b6f2:	f7fa fbcb 	bl	8005e8c <HAL_GetTick>
 800b6f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b6f8:	e008      	b.n	800b70c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6fa:	f7fa fbc7 	bl	8005e8c <HAL_GetTick>
 800b6fe:	4602      	mov	r2, r0
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	2b02      	cmp	r3, #2
 800b706:	d901      	bls.n	800b70c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b708:	2303      	movs	r3, #3
 800b70a:	e18d      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b70c:	4b9c      	ldr	r3, [pc, #624]	; (800b980 <HAL_RCC_OscConfig+0x57c>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b714:	2b00      	cmp	r3, #0
 800b716:	d0f0      	beq.n	800b6fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d108      	bne.n	800b732 <HAL_RCC_OscConfig+0x32e>
 800b720:	4b96      	ldr	r3, [pc, #600]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b726:	4a95      	ldr	r2, [pc, #596]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b728:	f043 0301 	orr.w	r3, r3, #1
 800b72c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b730:	e024      	b.n	800b77c <HAL_RCC_OscConfig+0x378>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	2b05      	cmp	r3, #5
 800b738:	d110      	bne.n	800b75c <HAL_RCC_OscConfig+0x358>
 800b73a:	4b90      	ldr	r3, [pc, #576]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b740:	4a8e      	ldr	r2, [pc, #568]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b742:	f043 0304 	orr.w	r3, r3, #4
 800b746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b74a:	4b8c      	ldr	r3, [pc, #560]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b750:	4a8a      	ldr	r2, [pc, #552]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b752:	f043 0301 	orr.w	r3, r3, #1
 800b756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b75a:	e00f      	b.n	800b77c <HAL_RCC_OscConfig+0x378>
 800b75c:	4b87      	ldr	r3, [pc, #540]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b762:	4a86      	ldr	r2, [pc, #536]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b764:	f023 0301 	bic.w	r3, r3, #1
 800b768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b76c:	4b83      	ldr	r3, [pc, #524]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b76e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b772:	4a82      	ldr	r2, [pc, #520]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b774:	f023 0304 	bic.w	r3, r3, #4
 800b778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d016      	beq.n	800b7b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b784:	f7fa fb82 	bl	8005e8c <HAL_GetTick>
 800b788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b78a:	e00a      	b.n	800b7a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b78c:	f7fa fb7e 	bl	8005e8c <HAL_GetTick>
 800b790:	4602      	mov	r2, r0
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	f241 3288 	movw	r2, #5000	; 0x1388
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d901      	bls.n	800b7a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b79e:	2303      	movs	r3, #3
 800b7a0:	e142      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7a2:	4b76      	ldr	r3, [pc, #472]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7a8:	f003 0302 	and.w	r3, r3, #2
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d0ed      	beq.n	800b78c <HAL_RCC_OscConfig+0x388>
 800b7b0:	e015      	b.n	800b7de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7b2:	f7fa fb6b 	bl	8005e8c <HAL_GetTick>
 800b7b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b7b8:	e00a      	b.n	800b7d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7ba:	f7fa fb67 	bl	8005e8c <HAL_GetTick>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d901      	bls.n	800b7d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	e12b      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b7d0:	4b6a      	ldr	r3, [pc, #424]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b7d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7d6:	f003 0302 	and.w	r3, r3, #2
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1ed      	bne.n	800b7ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b7de:	7ffb      	ldrb	r3, [r7, #31]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d105      	bne.n	800b7f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7e4:	4b65      	ldr	r3, [pc, #404]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b7e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7e8:	4a64      	ldr	r2, [pc, #400]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b7ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 0320 	and.w	r3, r3, #32
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d03c      	beq.n	800b876 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d01c      	beq.n	800b83e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b804:	4b5d      	ldr	r3, [pc, #372]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b80a:	4a5c      	ldr	r2, [pc, #368]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b80c:	f043 0301 	orr.w	r3, r3, #1
 800b810:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b814:	f7fa fb3a 	bl	8005e8c <HAL_GetTick>
 800b818:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b81a:	e008      	b.n	800b82e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b81c:	f7fa fb36 	bl	8005e8c <HAL_GetTick>
 800b820:	4602      	mov	r2, r0
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	2b02      	cmp	r3, #2
 800b828:	d901      	bls.n	800b82e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b82a:	2303      	movs	r3, #3
 800b82c:	e0fc      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b82e:	4b53      	ldr	r3, [pc, #332]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b830:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d0ef      	beq.n	800b81c <HAL_RCC_OscConfig+0x418>
 800b83c:	e01b      	b.n	800b876 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b83e:	4b4f      	ldr	r3, [pc, #316]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b840:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b844:	4a4d      	ldr	r2, [pc, #308]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b846:	f023 0301 	bic.w	r3, r3, #1
 800b84a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b84e:	f7fa fb1d 	bl	8005e8c <HAL_GetTick>
 800b852:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b854:	e008      	b.n	800b868 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b856:	f7fa fb19 	bl	8005e8c <HAL_GetTick>
 800b85a:	4602      	mov	r2, r0
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	2b02      	cmp	r3, #2
 800b862:	d901      	bls.n	800b868 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b864:	2303      	movs	r3, #3
 800b866:	e0df      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b868:	4b44      	ldr	r3, [pc, #272]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b86a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b86e:	f003 0302 	and.w	r3, r3, #2
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1ef      	bne.n	800b856 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	69db      	ldr	r3, [r3, #28]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 80d3 	beq.w	800ba26 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b880:	4b3e      	ldr	r3, [pc, #248]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	f003 030c 	and.w	r3, r3, #12
 800b888:	2b0c      	cmp	r3, #12
 800b88a:	f000 808d 	beq.w	800b9a8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	69db      	ldr	r3, [r3, #28]
 800b892:	2b02      	cmp	r3, #2
 800b894:	d15a      	bne.n	800b94c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b896:	4b39      	ldr	r3, [pc, #228]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a38      	ldr	r2, [pc, #224]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b89c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8a2:	f7fa faf3 	bl	8005e8c <HAL_GetTick>
 800b8a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8a8:	e008      	b.n	800b8bc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8aa:	f7fa faef 	bl	8005e8c <HAL_GetTick>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	1ad3      	subs	r3, r2, r3
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d901      	bls.n	800b8bc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b8b8:	2303      	movs	r3, #3
 800b8ba:	e0b5      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8bc:	4b2f      	ldr	r3, [pc, #188]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1f0      	bne.n	800b8aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b8c8:	4b2c      	ldr	r3, [pc, #176]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b8ca:	68da      	ldr	r2, [r3, #12]
 800b8cc:	4b2d      	ldr	r3, [pc, #180]	; (800b984 <HAL_RCC_OscConfig+0x580>)
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	6a11      	ldr	r1, [r2, #32]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b8d8:	3a01      	subs	r2, #1
 800b8da:	0112      	lsls	r2, r2, #4
 800b8dc:	4311      	orrs	r1, r2
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b8e2:	0212      	lsls	r2, r2, #8
 800b8e4:	4311      	orrs	r1, r2
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b8ea:	0852      	lsrs	r2, r2, #1
 800b8ec:	3a01      	subs	r2, #1
 800b8ee:	0552      	lsls	r2, r2, #21
 800b8f0:	4311      	orrs	r1, r2
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b8f6:	0852      	lsrs	r2, r2, #1
 800b8f8:	3a01      	subs	r2, #1
 800b8fa:	0652      	lsls	r2, r2, #25
 800b8fc:	4311      	orrs	r1, r2
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b902:	06d2      	lsls	r2, r2, #27
 800b904:	430a      	orrs	r2, r1
 800b906:	491d      	ldr	r1, [pc, #116]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b908:	4313      	orrs	r3, r2
 800b90a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b90c:	4b1b      	ldr	r3, [pc, #108]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a1a      	ldr	r2, [pc, #104]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b916:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b918:	4b18      	ldr	r3, [pc, #96]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	4a17      	ldr	r2, [pc, #92]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b91e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b922:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b924:	f7fa fab2 	bl	8005e8c <HAL_GetTick>
 800b928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b92a:	e008      	b.n	800b93e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b92c:	f7fa faae 	bl	8005e8c <HAL_GetTick>
 800b930:	4602      	mov	r2, r0
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	2b02      	cmp	r3, #2
 800b938:	d901      	bls.n	800b93e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b93a:	2303      	movs	r3, #3
 800b93c:	e074      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b93e:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d0f0      	beq.n	800b92c <HAL_RCC_OscConfig+0x528>
 800b94a:	e06c      	b.n	800ba26 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b94c:	4b0b      	ldr	r3, [pc, #44]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a0a      	ldr	r2, [pc, #40]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b956:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b958:	4b08      	ldr	r3, [pc, #32]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	4a07      	ldr	r2, [pc, #28]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b95e:	f023 0303 	bic.w	r3, r3, #3
 800b962:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b964:	4b05      	ldr	r3, [pc, #20]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	4a04      	ldr	r2, [pc, #16]	; (800b97c <HAL_RCC_OscConfig+0x578>)
 800b96a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b96e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b972:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b974:	f7fa fa8a 	bl	8005e8c <HAL_GetTick>
 800b978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b97a:	e00e      	b.n	800b99a <HAL_RCC_OscConfig+0x596>
 800b97c:	40021000 	.word	0x40021000
 800b980:	40007000 	.word	0x40007000
 800b984:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b988:	f7fa fa80 	bl	8005e8c <HAL_GetTick>
 800b98c:	4602      	mov	r2, r0
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	2b02      	cmp	r3, #2
 800b994:	d901      	bls.n	800b99a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b996:	2303      	movs	r3, #3
 800b998:	e046      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b99a:	4b25      	ldr	r3, [pc, #148]	; (800ba30 <HAL_RCC_OscConfig+0x62c>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1f0      	bne.n	800b988 <HAL_RCC_OscConfig+0x584>
 800b9a6:	e03e      	b.n	800ba26 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	69db      	ldr	r3, [r3, #28]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d101      	bne.n	800b9b4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e039      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b9b4:	4b1e      	ldr	r3, [pc, #120]	; (800ba30 <HAL_RCC_OscConfig+0x62c>)
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f003 0203 	and.w	r2, r3, #3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6a1b      	ldr	r3, [r3, #32]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d12c      	bne.n	800ba22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d123      	bne.n	800ba22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d11b      	bne.n	800ba22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d113      	bne.n	800ba22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba04:	085b      	lsrs	r3, r3, #1
 800ba06:	3b01      	subs	r3, #1
 800ba08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d109      	bne.n	800ba22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba18:	085b      	lsrs	r3, r3, #1
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d001      	beq.n	800ba26 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	e000      	b.n	800ba28 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3720      	adds	r7, #32
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	40021000 	.word	0x40021000

0800ba34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b086      	sub	sp, #24
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d101      	bne.n	800ba4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e11e      	b.n	800bc8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba4c:	4b91      	ldr	r3, [pc, #580]	; (800bc94 <HAL_RCC_ClockConfig+0x260>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f003 030f 	and.w	r3, r3, #15
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d910      	bls.n	800ba7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba5a:	4b8e      	ldr	r3, [pc, #568]	; (800bc94 <HAL_RCC_ClockConfig+0x260>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f023 020f 	bic.w	r2, r3, #15
 800ba62:	498c      	ldr	r1, [pc, #560]	; (800bc94 <HAL_RCC_ClockConfig+0x260>)
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba6a:	4b8a      	ldr	r3, [pc, #552]	; (800bc94 <HAL_RCC_ClockConfig+0x260>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f003 030f 	and.w	r3, r3, #15
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d001      	beq.n	800ba7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e106      	b.n	800bc8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 0301 	and.w	r3, r3, #1
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d073      	beq.n	800bb70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	2b03      	cmp	r3, #3
 800ba8e:	d129      	bne.n	800bae4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba90:	4b81      	ldr	r3, [pc, #516]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d101      	bne.n	800baa0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e0f4      	b.n	800bc8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800baa0:	f000 f988 	bl	800bdb4 <RCC_GetSysClockFreqFromPLLSource>
 800baa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	4a7c      	ldr	r2, [pc, #496]	; (800bc9c <HAL_RCC_ClockConfig+0x268>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d93f      	bls.n	800bb2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800baae:	4b7a      	ldr	r3, [pc, #488]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d009      	beq.n	800bace <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d033      	beq.n	800bb2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d12f      	bne.n	800bb2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bace:	4b72      	ldr	r3, [pc, #456]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bad6:	4a70      	ldr	r2, [pc, #448]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800badc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800bade:	2380      	movs	r3, #128	; 0x80
 800bae0:	617b      	str	r3, [r7, #20]
 800bae2:	e024      	b.n	800bb2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	2b02      	cmp	r3, #2
 800baea:	d107      	bne.n	800bafc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800baec:	4b6a      	ldr	r3, [pc, #424]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d109      	bne.n	800bb0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	e0c6      	b.n	800bc8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bafc:	4b66      	ldr	r3, [pc, #408]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d101      	bne.n	800bb0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e0be      	b.n	800bc8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800bb0c:	f000 f8ce 	bl	800bcac <HAL_RCC_GetSysClockFreq>
 800bb10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	4a61      	ldr	r2, [pc, #388]	; (800bc9c <HAL_RCC_ClockConfig+0x268>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d909      	bls.n	800bb2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bb1a:	4b5f      	ldr	r3, [pc, #380]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb22:	4a5d      	ldr	r2, [pc, #372]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bb24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800bb2a:	2380      	movs	r3, #128	; 0x80
 800bb2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bb2e:	4b5a      	ldr	r3, [pc, #360]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	f023 0203 	bic.w	r2, r3, #3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	4957      	ldr	r1, [pc, #348]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb40:	f7fa f9a4 	bl	8005e8c <HAL_GetTick>
 800bb44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb46:	e00a      	b.n	800bb5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb48:	f7fa f9a0 	bl	8005e8c <HAL_GetTick>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d901      	bls.n	800bb5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	e095      	b.n	800bc8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb5e:	4b4e      	ldr	r3, [pc, #312]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	f003 020c 	and.w	r2, r3, #12
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d1eb      	bne.n	800bb48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f003 0302 	and.w	r3, r3, #2
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d023      	beq.n	800bbc4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 0304 	and.w	r3, r3, #4
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d005      	beq.n	800bb94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bb88:	4b43      	ldr	r3, [pc, #268]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	4a42      	ldr	r2, [pc, #264]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bb8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bb92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 0308 	and.w	r3, r3, #8
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d007      	beq.n	800bbb0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bba0:	4b3d      	ldr	r3, [pc, #244]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bba8:	4a3b      	ldr	r2, [pc, #236]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bbaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bbae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbb0:	4b39      	ldr	r3, [pc, #228]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	4936      	ldr	r1, [pc, #216]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	608b      	str	r3, [r1, #8]
 800bbc2:	e008      	b.n	800bbd6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	2b80      	cmp	r3, #128	; 0x80
 800bbc8:	d105      	bne.n	800bbd6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bbca:	4b33      	ldr	r3, [pc, #204]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	4a32      	ldr	r2, [pc, #200]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bbd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bbd4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bbd6:	4b2f      	ldr	r3, [pc, #188]	; (800bc94 <HAL_RCC_ClockConfig+0x260>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 030f 	and.w	r3, r3, #15
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d21d      	bcs.n	800bc20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbe4:	4b2b      	ldr	r3, [pc, #172]	; (800bc94 <HAL_RCC_ClockConfig+0x260>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f023 020f 	bic.w	r2, r3, #15
 800bbec:	4929      	ldr	r1, [pc, #164]	; (800bc94 <HAL_RCC_ClockConfig+0x260>)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bbf4:	f7fa f94a 	bl	8005e8c <HAL_GetTick>
 800bbf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbfa:	e00a      	b.n	800bc12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bbfc:	f7fa f946 	bl	8005e8c <HAL_GetTick>
 800bc00:	4602      	mov	r2, r0
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d901      	bls.n	800bc12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	e03b      	b.n	800bc8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc12:	4b20      	ldr	r3, [pc, #128]	; (800bc94 <HAL_RCC_ClockConfig+0x260>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f003 030f 	and.w	r3, r3, #15
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d1ed      	bne.n	800bbfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f003 0304 	and.w	r3, r3, #4
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d008      	beq.n	800bc3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc2c:	4b1a      	ldr	r3, [pc, #104]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	4917      	ldr	r1, [pc, #92]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f003 0308 	and.w	r3, r3, #8
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d009      	beq.n	800bc5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bc4a:	4b13      	ldr	r3, [pc, #76]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	00db      	lsls	r3, r3, #3
 800bc58:	490f      	ldr	r1, [pc, #60]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bc5e:	f000 f825 	bl	800bcac <HAL_RCC_GetSysClockFreq>
 800bc62:	4601      	mov	r1, r0
 800bc64:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <HAL_RCC_ClockConfig+0x264>)
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	091b      	lsrs	r3, r3, #4
 800bc6a:	f003 030f 	and.w	r3, r3, #15
 800bc6e:	4a0c      	ldr	r2, [pc, #48]	; (800bca0 <HAL_RCC_ClockConfig+0x26c>)
 800bc70:	5cd3      	ldrb	r3, [r2, r3]
 800bc72:	f003 031f 	and.w	r3, r3, #31
 800bc76:	fa21 f303 	lsr.w	r3, r1, r3
 800bc7a:	4a0a      	ldr	r2, [pc, #40]	; (800bca4 <HAL_RCC_ClockConfig+0x270>)
 800bc7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bc7e:	4b0a      	ldr	r3, [pc, #40]	; (800bca8 <HAL_RCC_ClockConfig+0x274>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fa f8b6 	bl	8005df4 <HAL_InitTick>
 800bc88:	4603      	mov	r3, r0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3718      	adds	r7, #24
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	40022000 	.word	0x40022000
 800bc98:	40021000 	.word	0x40021000
 800bc9c:	04c4b400 	.word	0x04c4b400
 800bca0:	0800d948 	.word	0x0800d948
 800bca4:	20000004 	.word	0x20000004
 800bca8:	20000008 	.word	0x20000008

0800bcac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bcb2:	4b2c      	ldr	r3, [pc, #176]	; (800bd64 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	f003 030c 	and.w	r3, r3, #12
 800bcba:	2b04      	cmp	r3, #4
 800bcbc:	d102      	bne.n	800bcc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bcbe:	4b2a      	ldr	r3, [pc, #168]	; (800bd68 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bcc0:	613b      	str	r3, [r7, #16]
 800bcc2:	e047      	b.n	800bd54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bcc4:	4b27      	ldr	r3, [pc, #156]	; (800bd64 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	f003 030c 	and.w	r3, r3, #12
 800bccc:	2b08      	cmp	r3, #8
 800bcce:	d102      	bne.n	800bcd6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bcd0:	4b26      	ldr	r3, [pc, #152]	; (800bd6c <HAL_RCC_GetSysClockFreq+0xc0>)
 800bcd2:	613b      	str	r3, [r7, #16]
 800bcd4:	e03e      	b.n	800bd54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bcd6:	4b23      	ldr	r3, [pc, #140]	; (800bd64 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	f003 030c 	and.w	r3, r3, #12
 800bcde:	2b0c      	cmp	r3, #12
 800bce0:	d136      	bne.n	800bd50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bce2:	4b20      	ldr	r3, [pc, #128]	; (800bd64 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	f003 0303 	and.w	r3, r3, #3
 800bcea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bcec:	4b1d      	ldr	r3, [pc, #116]	; (800bd64 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	091b      	lsrs	r3, r3, #4
 800bcf2:	f003 030f 	and.w	r3, r3, #15
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2b03      	cmp	r3, #3
 800bcfe:	d10c      	bne.n	800bd1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bd00:	4a1a      	ldr	r2, [pc, #104]	; (800bd6c <HAL_RCC_GetSysClockFreq+0xc0>)
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd08:	4a16      	ldr	r2, [pc, #88]	; (800bd64 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd0a:	68d2      	ldr	r2, [r2, #12]
 800bd0c:	0a12      	lsrs	r2, r2, #8
 800bd0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bd12:	fb02 f303 	mul.w	r3, r2, r3
 800bd16:	617b      	str	r3, [r7, #20]
      break;
 800bd18:	e00c      	b.n	800bd34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bd1a:	4a13      	ldr	r2, [pc, #76]	; (800bd68 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd22:	4a10      	ldr	r2, [pc, #64]	; (800bd64 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd24:	68d2      	ldr	r2, [r2, #12]
 800bd26:	0a12      	lsrs	r2, r2, #8
 800bd28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bd2c:	fb02 f303 	mul.w	r3, r2, r3
 800bd30:	617b      	str	r3, [r7, #20]
      break;
 800bd32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bd34:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	0e5b      	lsrs	r3, r3, #25
 800bd3a:	f003 0303 	and.w	r3, r3, #3
 800bd3e:	3301      	adds	r3, #1
 800bd40:	005b      	lsls	r3, r3, #1
 800bd42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bd44:	697a      	ldr	r2, [r7, #20]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd4c:	613b      	str	r3, [r7, #16]
 800bd4e:	e001      	b.n	800bd54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bd50:	2300      	movs	r3, #0
 800bd52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bd54:	693b      	ldr	r3, [r7, #16]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	40021000 	.word	0x40021000
 800bd68:	00f42400 	.word	0x00f42400
 800bd6c:	007a1200 	.word	0x007a1200

0800bd70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bd70:	b480      	push	{r7}
 800bd72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bd74:	4b03      	ldr	r3, [pc, #12]	; (800bd84 <HAL_RCC_GetHCLKFreq+0x14>)
 800bd76:	681b      	ldr	r3, [r3, #0]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	20000004 	.word	0x20000004

0800bd88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bd8c:	f7ff fff0 	bl	800bd70 <HAL_RCC_GetHCLKFreq>
 800bd90:	4601      	mov	r1, r0
 800bd92:	4b06      	ldr	r3, [pc, #24]	; (800bdac <HAL_RCC_GetPCLK2Freq+0x24>)
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	0adb      	lsrs	r3, r3, #11
 800bd98:	f003 0307 	and.w	r3, r3, #7
 800bd9c:	4a04      	ldr	r2, [pc, #16]	; (800bdb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bd9e:	5cd3      	ldrb	r3, [r2, r3]
 800bda0:	f003 031f 	and.w	r3, r3, #31
 800bda4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	40021000 	.word	0x40021000
 800bdb0:	0800d958 	.word	0x0800d958

0800bdb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bdba:	4b1e      	ldr	r3, [pc, #120]	; (800be34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	f003 0303 	and.w	r3, r3, #3
 800bdc2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bdc4:	4b1b      	ldr	r3, [pc, #108]	; (800be34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	091b      	lsrs	r3, r3, #4
 800bdca:	f003 030f 	and.w	r3, r3, #15
 800bdce:	3301      	adds	r3, #1
 800bdd0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	2b03      	cmp	r3, #3
 800bdd6:	d10c      	bne.n	800bdf2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bdd8:	4a17      	ldr	r2, [pc, #92]	; (800be38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde0:	4a14      	ldr	r2, [pc, #80]	; (800be34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bde2:	68d2      	ldr	r2, [r2, #12]
 800bde4:	0a12      	lsrs	r2, r2, #8
 800bde6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bdea:	fb02 f303 	mul.w	r3, r2, r3
 800bdee:	617b      	str	r3, [r7, #20]
    break;
 800bdf0:	e00c      	b.n	800be0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bdf2:	4a12      	ldr	r2, [pc, #72]	; (800be3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdfa:	4a0e      	ldr	r2, [pc, #56]	; (800be34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bdfc:	68d2      	ldr	r2, [r2, #12]
 800bdfe:	0a12      	lsrs	r2, r2, #8
 800be00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800be04:	fb02 f303 	mul.w	r3, r2, r3
 800be08:	617b      	str	r3, [r7, #20]
    break;
 800be0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800be0c:	4b09      	ldr	r3, [pc, #36]	; (800be34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	0e5b      	lsrs	r3, r3, #25
 800be12:	f003 0303 	and.w	r3, r3, #3
 800be16:	3301      	adds	r3, #1
 800be18:	005b      	lsls	r3, r3, #1
 800be1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	fbb2 f3f3 	udiv	r3, r2, r3
 800be24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800be26:	687b      	ldr	r3, [r7, #4]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	371c      	adds	r7, #28
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	40021000 	.word	0x40021000
 800be38:	007a1200 	.word	0x007a1200
 800be3c:	00f42400 	.word	0x00f42400

0800be40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800be48:	2300      	movs	r3, #0
 800be4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800be4c:	2300      	movs	r3, #0
 800be4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 8098 	beq.w	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800be5e:	2300      	movs	r3, #0
 800be60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800be62:	4b43      	ldr	r3, [pc, #268]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10d      	bne.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800be6e:	4b40      	ldr	r3, [pc, #256]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be72:	4a3f      	ldr	r2, [pc, #252]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be78:	6593      	str	r3, [r2, #88]	; 0x58
 800be7a:	4b3d      	ldr	r3, [pc, #244]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be82:	60bb      	str	r3, [r7, #8]
 800be84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be86:	2301      	movs	r3, #1
 800be88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be8a:	4b3a      	ldr	r3, [pc, #232]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a39      	ldr	r2, [pc, #228]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800be90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be96:	f7f9 fff9 	bl	8005e8c <HAL_GetTick>
 800be9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be9c:	e009      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be9e:	f7f9 fff5 	bl	8005e8c <HAL_GetTick>
 800bea2:	4602      	mov	r2, r0
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d902      	bls.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	74fb      	strb	r3, [r7, #19]
        break;
 800beb0:	e005      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800beb2:	4b30      	ldr	r3, [pc, #192]	; (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d0ef      	beq.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bebe:	7cfb      	ldrb	r3, [r7, #19]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d159      	bne.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bec4:	4b2a      	ldr	r3, [pc, #168]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bece:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d01e      	beq.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d019      	beq.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bee0:	4b23      	ldr	r3, [pc, #140]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800beea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800beec:	4b20      	ldr	r3, [pc, #128]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800beee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bef2:	4a1f      	ldr	r2, [pc, #124]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800befc:	4b1c      	ldr	r3, [pc, #112]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800befe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf02:	4a1b      	ldr	r2, [pc, #108]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bf0c:	4a18      	ldr	r2, [pc, #96]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d016      	beq.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf1e:	f7f9 ffb5 	bl	8005e8c <HAL_GetTick>
 800bf22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bf24:	e00b      	b.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf26:	f7f9 ffb1 	bl	8005e8c <HAL_GetTick>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	1ad3      	subs	r3, r2, r3
 800bf30:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d902      	bls.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	74fb      	strb	r3, [r7, #19]
            break;
 800bf3c:	e006      	b.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bf3e:	4b0c      	ldr	r3, [pc, #48]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf44:	f003 0302 	and.w	r3, r3, #2
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d0ec      	beq.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bf4c:	7cfb      	ldrb	r3, [r7, #19]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10b      	bne.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf52:	4b07      	ldr	r3, [pc, #28]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf60:	4903      	ldr	r1, [pc, #12]	; (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf62:	4313      	orrs	r3, r2
 800bf64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bf68:	e008      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf6a:	7cfb      	ldrb	r3, [r7, #19]
 800bf6c:	74bb      	strb	r3, [r7, #18]
 800bf6e:	e005      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bf70:	40021000 	.word	0x40021000
 800bf74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf78:	7cfb      	ldrb	r3, [r7, #19]
 800bf7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bf7c:	7c7b      	ldrb	r3, [r7, #17]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d105      	bne.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf82:	4baf      	ldr	r3, [pc, #700]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf86:	4aae      	ldr	r2, [pc, #696]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 0301 	and.w	r3, r3, #1
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf9a:	4ba9      	ldr	r3, [pc, #676]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfa0:	f023 0203 	bic.w	r2, r3, #3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	49a5      	ldr	r1, [pc, #660]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 0302 	and.w	r3, r3, #2
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00a      	beq.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bfbc:	4ba0      	ldr	r3, [pc, #640]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfc2:	f023 020c 	bic.w	r2, r3, #12
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	499d      	ldr	r1, [pc, #628]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 0304 	and.w	r3, r3, #4
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00a      	beq.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bfde:	4b98      	ldr	r3, [pc, #608]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfe4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	4994      	ldr	r1, [pc, #592]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfee:	4313      	orrs	r3, r2
 800bff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f003 0308 	and.w	r3, r3, #8
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00a      	beq.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c000:	4b8f      	ldr	r3, [pc, #572]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c006:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	498c      	ldr	r1, [pc, #560]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c010:	4313      	orrs	r3, r2
 800c012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 0310 	and.w	r3, r3, #16
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00a      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c022:	4b87      	ldr	r3, [pc, #540]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	695b      	ldr	r3, [r3, #20]
 800c030:	4983      	ldr	r1, [pc, #524]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c032:	4313      	orrs	r3, r2
 800c034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 0320 	and.w	r3, r3, #32
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00a      	beq.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c044:	4b7e      	ldr	r3, [pc, #504]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c04a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	699b      	ldr	r3, [r3, #24]
 800c052:	497b      	ldr	r1, [pc, #492]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c054:	4313      	orrs	r3, r2
 800c056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00a      	beq.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c066:	4b76      	ldr	r3, [pc, #472]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c06c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	69db      	ldr	r3, [r3, #28]
 800c074:	4972      	ldr	r1, [pc, #456]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c076:	4313      	orrs	r3, r2
 800c078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00a      	beq.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c088:	4b6d      	ldr	r3, [pc, #436]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c08e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	496a      	ldr	r1, [pc, #424]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c098:	4313      	orrs	r3, r2
 800c09a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00a      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c0aa:	4b65      	ldr	r3, [pc, #404]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b8:	4961      	ldr	r1, [pc, #388]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00a      	beq.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c0cc:	4b5c      	ldr	r3, [pc, #368]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0d2:	f023 0203 	bic.w	r2, r3, #3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0da:	4959      	ldr	r1, [pc, #356]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00a      	beq.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c0ee:	4b54      	ldr	r3, [pc, #336]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fc:	4950      	ldr	r1, [pc, #320]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0fe:	4313      	orrs	r3, r2
 800c100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d015      	beq.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c110:	4b4b      	ldr	r3, [pc, #300]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c11e:	4948      	ldr	r1, [pc, #288]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c120:	4313      	orrs	r3, r2
 800c122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c12a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c12e:	d105      	bne.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c130:	4b43      	ldr	r3, [pc, #268]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	4a42      	ldr	r2, [pc, #264]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c13a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c144:	2b00      	cmp	r3, #0
 800c146:	d015      	beq.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c148:	4b3d      	ldr	r3, [pc, #244]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c14e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c156:	493a      	ldr	r1, [pc, #232]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c158:	4313      	orrs	r3, r2
 800c15a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c166:	d105      	bne.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c168:	4b35      	ldr	r3, [pc, #212]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	4a34      	ldr	r2, [pc, #208]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c16e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c172:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d015      	beq.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c180:	4b2f      	ldr	r3, [pc, #188]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c186:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18e:	492c      	ldr	r1, [pc, #176]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c190:	4313      	orrs	r3, r2
 800c192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c19e:	d105      	bne.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1a0:	4b27      	ldr	r3, [pc, #156]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	4a26      	ldr	r2, [pc, #152]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c1a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d015      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c1b8:	4b21      	ldr	r3, [pc, #132]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c6:	491e      	ldr	r1, [pc, #120]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1d6:	d105      	bne.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1d8:	4b19      	ldr	r3, [pc, #100]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	4a18      	ldr	r2, [pc, #96]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c1de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d015      	beq.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1f0:	4b13      	ldr	r3, [pc, #76]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c1f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fe:	4910      	ldr	r1, [pc, #64]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c200:	4313      	orrs	r3, r2
 800c202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c20e:	d105      	bne.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c210:	4b0b      	ldr	r3, [pc, #44]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	4a0a      	ldr	r2, [pc, #40]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c21a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c224:	2b00      	cmp	r3, #0
 800c226:	d018      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c228:	4b05      	ldr	r3, [pc, #20]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c22a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c22e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c236:	4902      	ldr	r1, [pc, #8]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c238:	4313      	orrs	r3, r2
 800c23a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c23e:	e001      	b.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800c240:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c24c:	d105      	bne.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c24e:	4b21      	ldr	r3, [pc, #132]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	4a20      	ldr	r2, [pc, #128]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c258:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c262:	2b00      	cmp	r3, #0
 800c264:	d015      	beq.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c266:	4b1b      	ldr	r3, [pc, #108]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c26c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c274:	4917      	ldr	r1, [pc, #92]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c276:	4313      	orrs	r3, r2
 800c278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c284:	d105      	bne.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c286:	4b13      	ldr	r3, [pc, #76]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	4a12      	ldr	r2, [pc, #72]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c28c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c290:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d015      	beq.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c29e:	4b0d      	ldr	r3, [pc, #52]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c2a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c2a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ac:	4909      	ldr	r1, [pc, #36]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2bc:	d105      	bne.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c2be:	4b05      	ldr	r3, [pc, #20]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	4a04      	ldr	r2, [pc, #16]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c2c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2c8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c2ca:	7cbb      	ldrb	r3, [r7, #18]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3718      	adds	r7, #24
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	40021000 	.word	0x40021000

0800c2d8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d101      	bne.n	800c2ea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e027      	b.n	800c33a <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	7a5b      	ldrb	r3, [r3, #9]
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d105      	bne.n	800c300 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7f9 fabe 	bl	800587c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2202      	movs	r2, #2
 800c304:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f023 0108 	bic.w	r1, r3, #8
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	685a      	ldr	r2, [r3, #4]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	430a      	orrs	r2, r1
 800c31a:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f042 0204 	orr.w	r2, r2, #4
 800c32a:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800c338:	2300      	movs	r3, #0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b082      	sub	sp, #8
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d101      	bne.n	800c354 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c350:	2301      	movs	r3, #1
 800c352:	e049      	b.n	800c3e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d106      	bne.n	800c36e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7f9 fc91 	bl	8005c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2202      	movs	r2, #2
 800c372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	3304      	adds	r3, #4
 800c37e:	4619      	mov	r1, r3
 800c380:	4610      	mov	r0, r2
 800c382:	f000 fc57 	bl	800cc34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2201      	movs	r2, #1
 800c38a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	2b01      	cmp	r3, #1
 800c402:	d001      	beq.n	800c408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	e054      	b.n	800c4b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2202      	movs	r2, #2
 800c40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68da      	ldr	r2, [r3, #12]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f042 0201 	orr.w	r2, r2, #1
 800c41e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a26      	ldr	r2, [pc, #152]	; (800c4c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d022      	beq.n	800c470 <HAL_TIM_Base_Start_IT+0x80>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c432:	d01d      	beq.n	800c470 <HAL_TIM_Base_Start_IT+0x80>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a22      	ldr	r2, [pc, #136]	; (800c4c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d018      	beq.n	800c470 <HAL_TIM_Base_Start_IT+0x80>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a21      	ldr	r2, [pc, #132]	; (800c4c8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d013      	beq.n	800c470 <HAL_TIM_Base_Start_IT+0x80>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a1f      	ldr	r2, [pc, #124]	; (800c4cc <HAL_TIM_Base_Start_IT+0xdc>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d00e      	beq.n	800c470 <HAL_TIM_Base_Start_IT+0x80>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a1e      	ldr	r2, [pc, #120]	; (800c4d0 <HAL_TIM_Base_Start_IT+0xe0>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d009      	beq.n	800c470 <HAL_TIM_Base_Start_IT+0x80>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a1c      	ldr	r2, [pc, #112]	; (800c4d4 <HAL_TIM_Base_Start_IT+0xe4>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d004      	beq.n	800c470 <HAL_TIM_Base_Start_IT+0x80>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a1b      	ldr	r2, [pc, #108]	; (800c4d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d115      	bne.n	800c49c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	689a      	ldr	r2, [r3, #8]
 800c476:	4b19      	ldr	r3, [pc, #100]	; (800c4dc <HAL_TIM_Base_Start_IT+0xec>)
 800c478:	4013      	ands	r3, r2
 800c47a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2b06      	cmp	r3, #6
 800c480:	d015      	beq.n	800c4ae <HAL_TIM_Base_Start_IT+0xbe>
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c488:	d011      	beq.n	800c4ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f042 0201 	orr.w	r2, r2, #1
 800c498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c49a:	e008      	b.n	800c4ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f042 0201 	orr.w	r2, r2, #1
 800c4aa:	601a      	str	r2, [r3, #0]
 800c4ac:	e000      	b.n	800c4b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3714      	adds	r7, #20
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	40012c00 	.word	0x40012c00
 800c4c4:	40000400 	.word	0x40000400
 800c4c8:	40000800 	.word	0x40000800
 800c4cc:	40000c00 	.word	0x40000c00
 800c4d0:	40013400 	.word	0x40013400
 800c4d4:	40014000 	.word	0x40014000
 800c4d8:	40015000 	.word	0x40015000
 800c4dc:	00010007 	.word	0x00010007

0800c4e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d109      	bne.n	800c504 <HAL_TIM_PWM_Start+0x24>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	bf14      	ite	ne
 800c4fc:	2301      	movne	r3, #1
 800c4fe:	2300      	moveq	r3, #0
 800c500:	b2db      	uxtb	r3, r3
 800c502:	e03c      	b.n	800c57e <HAL_TIM_PWM_Start+0x9e>
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	2b04      	cmp	r3, #4
 800c508:	d109      	bne.n	800c51e <HAL_TIM_PWM_Start+0x3e>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c510:	b2db      	uxtb	r3, r3
 800c512:	2b01      	cmp	r3, #1
 800c514:	bf14      	ite	ne
 800c516:	2301      	movne	r3, #1
 800c518:	2300      	moveq	r3, #0
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	e02f      	b.n	800c57e <HAL_TIM_PWM_Start+0x9e>
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b08      	cmp	r3, #8
 800c522:	d109      	bne.n	800c538 <HAL_TIM_PWM_Start+0x58>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	bf14      	ite	ne
 800c530:	2301      	movne	r3, #1
 800c532:	2300      	moveq	r3, #0
 800c534:	b2db      	uxtb	r3, r3
 800c536:	e022      	b.n	800c57e <HAL_TIM_PWM_Start+0x9e>
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	2b0c      	cmp	r3, #12
 800c53c:	d109      	bne.n	800c552 <HAL_TIM_PWM_Start+0x72>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c544:	b2db      	uxtb	r3, r3
 800c546:	2b01      	cmp	r3, #1
 800c548:	bf14      	ite	ne
 800c54a:	2301      	movne	r3, #1
 800c54c:	2300      	moveq	r3, #0
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	e015      	b.n	800c57e <HAL_TIM_PWM_Start+0x9e>
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2b10      	cmp	r3, #16
 800c556:	d109      	bne.n	800c56c <HAL_TIM_PWM_Start+0x8c>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	2b01      	cmp	r3, #1
 800c562:	bf14      	ite	ne
 800c564:	2301      	movne	r3, #1
 800c566:	2300      	moveq	r3, #0
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	e008      	b.n	800c57e <HAL_TIM_PWM_Start+0x9e>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c572:	b2db      	uxtb	r3, r3
 800c574:	2b01      	cmp	r3, #1
 800c576:	bf14      	ite	ne
 800c578:	2301      	movne	r3, #1
 800c57a:	2300      	moveq	r3, #0
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d001      	beq.n	800c586 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e0a6      	b.n	800c6d4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d104      	bne.n	800c596 <HAL_TIM_PWM_Start+0xb6>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2202      	movs	r2, #2
 800c590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c594:	e023      	b.n	800c5de <HAL_TIM_PWM_Start+0xfe>
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	2b04      	cmp	r3, #4
 800c59a:	d104      	bne.n	800c5a6 <HAL_TIM_PWM_Start+0xc6>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2202      	movs	r2, #2
 800c5a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5a4:	e01b      	b.n	800c5de <HAL_TIM_PWM_Start+0xfe>
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	2b08      	cmp	r3, #8
 800c5aa:	d104      	bne.n	800c5b6 <HAL_TIM_PWM_Start+0xd6>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2202      	movs	r2, #2
 800c5b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5b4:	e013      	b.n	800c5de <HAL_TIM_PWM_Start+0xfe>
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b0c      	cmp	r3, #12
 800c5ba:	d104      	bne.n	800c5c6 <HAL_TIM_PWM_Start+0xe6>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2202      	movs	r2, #2
 800c5c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c5c4:	e00b      	b.n	800c5de <HAL_TIM_PWM_Start+0xfe>
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b10      	cmp	r3, #16
 800c5ca:	d104      	bne.n	800c5d6 <HAL_TIM_PWM_Start+0xf6>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2202      	movs	r2, #2
 800c5d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c5d4:	e003      	b.n	800c5de <HAL_TIM_PWM_Start+0xfe>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2202      	movs	r2, #2
 800c5da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	6839      	ldr	r1, [r7, #0]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f000 fc68 	bl	800cebc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a3a      	ldr	r2, [pc, #232]	; (800c6dc <HAL_TIM_PWM_Start+0x1fc>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d018      	beq.n	800c628 <HAL_TIM_PWM_Start+0x148>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a39      	ldr	r2, [pc, #228]	; (800c6e0 <HAL_TIM_PWM_Start+0x200>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d013      	beq.n	800c628 <HAL_TIM_PWM_Start+0x148>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a37      	ldr	r2, [pc, #220]	; (800c6e4 <HAL_TIM_PWM_Start+0x204>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d00e      	beq.n	800c628 <HAL_TIM_PWM_Start+0x148>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a36      	ldr	r2, [pc, #216]	; (800c6e8 <HAL_TIM_PWM_Start+0x208>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d009      	beq.n	800c628 <HAL_TIM_PWM_Start+0x148>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a34      	ldr	r2, [pc, #208]	; (800c6ec <HAL_TIM_PWM_Start+0x20c>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d004      	beq.n	800c628 <HAL_TIM_PWM_Start+0x148>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a33      	ldr	r2, [pc, #204]	; (800c6f0 <HAL_TIM_PWM_Start+0x210>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d101      	bne.n	800c62c <HAL_TIM_PWM_Start+0x14c>
 800c628:	2301      	movs	r3, #1
 800c62a:	e000      	b.n	800c62e <HAL_TIM_PWM_Start+0x14e>
 800c62c:	2300      	movs	r3, #0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d007      	beq.n	800c642 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a25      	ldr	r2, [pc, #148]	; (800c6dc <HAL_TIM_PWM_Start+0x1fc>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d022      	beq.n	800c692 <HAL_TIM_PWM_Start+0x1b2>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c654:	d01d      	beq.n	800c692 <HAL_TIM_PWM_Start+0x1b2>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a26      	ldr	r2, [pc, #152]	; (800c6f4 <HAL_TIM_PWM_Start+0x214>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d018      	beq.n	800c692 <HAL_TIM_PWM_Start+0x1b2>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a24      	ldr	r2, [pc, #144]	; (800c6f8 <HAL_TIM_PWM_Start+0x218>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d013      	beq.n	800c692 <HAL_TIM_PWM_Start+0x1b2>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a23      	ldr	r2, [pc, #140]	; (800c6fc <HAL_TIM_PWM_Start+0x21c>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d00e      	beq.n	800c692 <HAL_TIM_PWM_Start+0x1b2>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a19      	ldr	r2, [pc, #100]	; (800c6e0 <HAL_TIM_PWM_Start+0x200>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d009      	beq.n	800c692 <HAL_TIM_PWM_Start+0x1b2>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a18      	ldr	r2, [pc, #96]	; (800c6e4 <HAL_TIM_PWM_Start+0x204>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d004      	beq.n	800c692 <HAL_TIM_PWM_Start+0x1b2>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a18      	ldr	r2, [pc, #96]	; (800c6f0 <HAL_TIM_PWM_Start+0x210>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d115      	bne.n	800c6be <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	689a      	ldr	r2, [r3, #8]
 800c698:	4b19      	ldr	r3, [pc, #100]	; (800c700 <HAL_TIM_PWM_Start+0x220>)
 800c69a:	4013      	ands	r3, r2
 800c69c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2b06      	cmp	r3, #6
 800c6a2:	d015      	beq.n	800c6d0 <HAL_TIM_PWM_Start+0x1f0>
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6aa:	d011      	beq.n	800c6d0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f042 0201 	orr.w	r2, r2, #1
 800c6ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6bc:	e008      	b.n	800c6d0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f042 0201 	orr.w	r2, r2, #1
 800c6cc:	601a      	str	r2, [r3, #0]
 800c6ce:	e000      	b.n	800c6d2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}
 800c6dc:	40012c00 	.word	0x40012c00
 800c6e0:	40013400 	.word	0x40013400
 800c6e4:	40014000 	.word	0x40014000
 800c6e8:	40014400 	.word	0x40014400
 800c6ec:	40014800 	.word	0x40014800
 800c6f0:	40015000 	.word	0x40015000
 800c6f4:	40000400 	.word	0x40000400
 800c6f8:	40000800 	.word	0x40000800
 800c6fc:	40000c00 	.word	0x40000c00
 800c700:	00010007 	.word	0x00010007

0800c704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	f003 0302 	and.w	r3, r3, #2
 800c716:	2b02      	cmp	r3, #2
 800c718:	d122      	bne.n	800c760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	f003 0302 	and.w	r3, r3, #2
 800c724:	2b02      	cmp	r3, #2
 800c726:	d11b      	bne.n	800c760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f06f 0202 	mvn.w	r2, #2
 800c730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	f003 0303 	and.w	r3, r3, #3
 800c742:	2b00      	cmp	r3, #0
 800c744:	d003      	beq.n	800c74e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fa56 	bl	800cbf8 <HAL_TIM_IC_CaptureCallback>
 800c74c:	e005      	b.n	800c75a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 fa48 	bl	800cbe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 fa59 	bl	800cc0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	f003 0304 	and.w	r3, r3, #4
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	d122      	bne.n	800c7b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	f003 0304 	and.w	r3, r3, #4
 800c778:	2b04      	cmp	r3, #4
 800c77a:	d11b      	bne.n	800c7b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f06f 0204 	mvn.w	r2, #4
 800c784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2202      	movs	r2, #2
 800c78a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c796:	2b00      	cmp	r3, #0
 800c798:	d003      	beq.n	800c7a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fa2c 	bl	800cbf8 <HAL_TIM_IC_CaptureCallback>
 800c7a0:	e005      	b.n	800c7ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 fa1e 	bl	800cbe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fa2f 	bl	800cc0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	f003 0308 	and.w	r3, r3, #8
 800c7be:	2b08      	cmp	r3, #8
 800c7c0:	d122      	bne.n	800c808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	f003 0308 	and.w	r3, r3, #8
 800c7cc:	2b08      	cmp	r3, #8
 800c7ce:	d11b      	bne.n	800c808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f06f 0208 	mvn.w	r2, #8
 800c7d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2204      	movs	r2, #4
 800c7de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	69db      	ldr	r3, [r3, #28]
 800c7e6:	f003 0303 	and.w	r3, r3, #3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d003      	beq.n	800c7f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fa02 	bl	800cbf8 <HAL_TIM_IC_CaptureCallback>
 800c7f4:	e005      	b.n	800c802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 f9f4 	bl	800cbe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fa05 	bl	800cc0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	f003 0310 	and.w	r3, r3, #16
 800c812:	2b10      	cmp	r3, #16
 800c814:	d122      	bne.n	800c85c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	f003 0310 	and.w	r3, r3, #16
 800c820:	2b10      	cmp	r3, #16
 800c822:	d11b      	bne.n	800c85c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f06f 0210 	mvn.w	r2, #16
 800c82c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2208      	movs	r2, #8
 800c832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	69db      	ldr	r3, [r3, #28]
 800c83a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d003      	beq.n	800c84a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f9d8 	bl	800cbf8 <HAL_TIM_IC_CaptureCallback>
 800c848:	e005      	b.n	800c856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f9ca 	bl	800cbe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 f9db 	bl	800cc0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	2b01      	cmp	r3, #1
 800c868:	d10e      	bne.n	800c888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	f003 0301 	and.w	r3, r3, #1
 800c874:	2b01      	cmp	r3, #1
 800c876:	d107      	bne.n	800c888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f06f 0201 	mvn.w	r2, #1
 800c880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7f8 fdb2 	bl	80053ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c892:	2b80      	cmp	r3, #128	; 0x80
 800c894:	d10e      	bne.n	800c8b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a0:	2b80      	cmp	r3, #128	; 0x80
 800c8a2:	d107      	bne.n	800c8b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c8ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fbca 	bl	800d048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8c2:	d10e      	bne.n	800c8e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ce:	2b80      	cmp	r3, #128	; 0x80
 800c8d0:	d107      	bne.n	800c8e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c8da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fbbd 	bl	800d05c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ec:	2b40      	cmp	r3, #64	; 0x40
 800c8ee:	d10e      	bne.n	800c90e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8fa:	2b40      	cmp	r3, #64	; 0x40
 800c8fc:	d107      	bne.n	800c90e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f989 	bl	800cc20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	691b      	ldr	r3, [r3, #16]
 800c914:	f003 0320 	and.w	r3, r3, #32
 800c918:	2b20      	cmp	r3, #32
 800c91a:	d10e      	bne.n	800c93a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	f003 0320 	and.w	r3, r3, #32
 800c926:	2b20      	cmp	r3, #32
 800c928:	d107      	bne.n	800c93a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f06f 0220 	mvn.w	r2, #32
 800c932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 fb7d 	bl	800d034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	691b      	ldr	r3, [r3, #16]
 800c940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c948:	d10f      	bne.n	800c96a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c958:	d107      	bne.n	800c96a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 fb83 	bl	800d070 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	691b      	ldr	r3, [r3, #16]
 800c970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c974:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c978:	d10f      	bne.n	800c99a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c988:	d107      	bne.n	800c99a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fb75 	bl	800d084 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	691b      	ldr	r3, [r3, #16]
 800c9a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c9a8:	d10f      	bne.n	800c9ca <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c9b8:	d107      	bne.n	800c9ca <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c9c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 fb67 	bl	800d098 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c9d8:	d10f      	bne.n	800c9fa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c9e8:	d107      	bne.n	800c9fa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c9f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fb59 	bl	800d0ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c9fa:	bf00      	nop
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
	...

0800ca04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d101      	bne.n	800ca1c <HAL_TIM_ConfigClockSource+0x18>
 800ca18:	2302      	movs	r3, #2
 800ca1a:	e0d2      	b.n	800cbc2 <HAL_TIM_ConfigClockSource+0x1be>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2202      	movs	r2, #2
 800ca28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ca3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ca3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca58:	f000 80a9 	beq.w	800cbae <HAL_TIM_ConfigClockSource+0x1aa>
 800ca5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca60:	d81a      	bhi.n	800ca98 <HAL_TIM_ConfigClockSource+0x94>
 800ca62:	2b30      	cmp	r3, #48	; 0x30
 800ca64:	f000 809a 	beq.w	800cb9c <HAL_TIM_ConfigClockSource+0x198>
 800ca68:	2b30      	cmp	r3, #48	; 0x30
 800ca6a:	d809      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x7c>
 800ca6c:	2b10      	cmp	r3, #16
 800ca6e:	f000 8095 	beq.w	800cb9c <HAL_TIM_ConfigClockSource+0x198>
 800ca72:	2b20      	cmp	r3, #32
 800ca74:	f000 8092 	beq.w	800cb9c <HAL_TIM_ConfigClockSource+0x198>
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f000 808f 	beq.w	800cb9c <HAL_TIM_ConfigClockSource+0x198>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ca7e:	e097      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca80:	2b50      	cmp	r3, #80	; 0x50
 800ca82:	d05b      	beq.n	800cb3c <HAL_TIM_ConfigClockSource+0x138>
 800ca84:	2b50      	cmp	r3, #80	; 0x50
 800ca86:	d802      	bhi.n	800ca8e <HAL_TIM_ConfigClockSource+0x8a>
 800ca88:	2b40      	cmp	r3, #64	; 0x40
 800ca8a:	d077      	beq.n	800cb7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ca8c:	e090      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca8e:	2b60      	cmp	r3, #96	; 0x60
 800ca90:	d064      	beq.n	800cb5c <HAL_TIM_ConfigClockSource+0x158>
 800ca92:	2b70      	cmp	r3, #112	; 0x70
 800ca94:	d028      	beq.n	800cae8 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800ca96:	e08b      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca98:	4a4c      	ldr	r2, [pc, #304]	; (800cbcc <HAL_TIM_ConfigClockSource+0x1c8>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d07e      	beq.n	800cb9c <HAL_TIM_ConfigClockSource+0x198>
 800ca9e:	4a4b      	ldr	r2, [pc, #300]	; (800cbcc <HAL_TIM_ConfigClockSource+0x1c8>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d810      	bhi.n	800cac6 <HAL_TIM_ConfigClockSource+0xc2>
 800caa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800caa8:	d078      	beq.n	800cb9c <HAL_TIM_ConfigClockSource+0x198>
 800caaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800caae:	d803      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0xb4>
 800cab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cab4:	d02f      	beq.n	800cb16 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800cab6:	e07b      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cab8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cabc:	d06e      	beq.n	800cb9c <HAL_TIM_ConfigClockSource+0x198>
 800cabe:	4a44      	ldr	r2, [pc, #272]	; (800cbd0 <HAL_TIM_ConfigClockSource+0x1cc>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d06b      	beq.n	800cb9c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800cac4:	e074      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cac6:	4a43      	ldr	r2, [pc, #268]	; (800cbd4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d067      	beq.n	800cb9c <HAL_TIM_ConfigClockSource+0x198>
 800cacc:	4a41      	ldr	r2, [pc, #260]	; (800cbd4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d803      	bhi.n	800cada <HAL_TIM_ConfigClockSource+0xd6>
 800cad2:	4a41      	ldr	r2, [pc, #260]	; (800cbd8 <HAL_TIM_ConfigClockSource+0x1d4>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d061      	beq.n	800cb9c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800cad8:	e06a      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cada:	4a40      	ldr	r2, [pc, #256]	; (800cbdc <HAL_TIM_ConfigClockSource+0x1d8>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d05d      	beq.n	800cb9c <HAL_TIM_ConfigClockSource+0x198>
 800cae0:	4a3f      	ldr	r2, [pc, #252]	; (800cbe0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d05a      	beq.n	800cb9c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800cae6:	e063      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6818      	ldr	r0, [r3, #0]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	6899      	ldr	r1, [r3, #8]
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	685a      	ldr	r2, [r3, #4]
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	f000 f9c0 	bl	800ce7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cb0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	609a      	str	r2, [r3, #8]
      break;
 800cb14:	e04c      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6818      	ldr	r0, [r3, #0]
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	6899      	ldr	r1, [r3, #8]
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	685a      	ldr	r2, [r3, #4]
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	f000 f9a9 	bl	800ce7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	689a      	ldr	r2, [r3, #8]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb38:	609a      	str	r2, [r3, #8]
      break;
 800cb3a:	e039      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6818      	ldr	r0, [r3, #0]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	6859      	ldr	r1, [r3, #4]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	461a      	mov	r2, r3
 800cb4a:	f000 f91b 	bl	800cd84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2150      	movs	r1, #80	; 0x50
 800cb54:	4618      	mov	r0, r3
 800cb56:	f000 f974 	bl	800ce42 <TIM_ITRx_SetConfig>
      break;
 800cb5a:	e029      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6818      	ldr	r0, [r3, #0]
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	6859      	ldr	r1, [r3, #4]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	461a      	mov	r2, r3
 800cb6a:	f000 f93a 	bl	800cde2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2160      	movs	r1, #96	; 0x60
 800cb74:	4618      	mov	r0, r3
 800cb76:	f000 f964 	bl	800ce42 <TIM_ITRx_SetConfig>
      break;
 800cb7a:	e019      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6818      	ldr	r0, [r3, #0]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	6859      	ldr	r1, [r3, #4]
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	461a      	mov	r2, r3
 800cb8a:	f000 f8fb 	bl	800cd84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2140      	movs	r1, #64	; 0x40
 800cb94:	4618      	mov	r0, r3
 800cb96:	f000 f954 	bl	800ce42 <TIM_ITRx_SetConfig>
      break;
 800cb9a:	e009      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4619      	mov	r1, r3
 800cba6:	4610      	mov	r0, r2
 800cba8:	f000 f94b 	bl	800ce42 <TIM_ITRx_SetConfig>
        break;
 800cbac:	e000      	b.n	800cbb0 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800cbae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cbc0:	2300      	movs	r3, #0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	00100030 	.word	0x00100030
 800cbd0:	00100020 	.word	0x00100020
 800cbd4:	00100050 	.word	0x00100050
 800cbd8:	00100040 	.word	0x00100040
 800cbdc:	00100060 	.word	0x00100060
 800cbe0:	00100070 	.word	0x00100070

0800cbe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cbec:	bf00      	nop
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc14:	bf00      	nop
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc28:	bf00      	nop
 800cc2a:	370c      	adds	r7, #12
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4a46      	ldr	r2, [pc, #280]	; (800cd60 <TIM_Base_SetConfig+0x12c>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d017      	beq.n	800cc7c <TIM_Base_SetConfig+0x48>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc52:	d013      	beq.n	800cc7c <TIM_Base_SetConfig+0x48>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4a43      	ldr	r2, [pc, #268]	; (800cd64 <TIM_Base_SetConfig+0x130>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d00f      	beq.n	800cc7c <TIM_Base_SetConfig+0x48>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4a42      	ldr	r2, [pc, #264]	; (800cd68 <TIM_Base_SetConfig+0x134>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d00b      	beq.n	800cc7c <TIM_Base_SetConfig+0x48>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4a41      	ldr	r2, [pc, #260]	; (800cd6c <TIM_Base_SetConfig+0x138>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d007      	beq.n	800cc7c <TIM_Base_SetConfig+0x48>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a40      	ldr	r2, [pc, #256]	; (800cd70 <TIM_Base_SetConfig+0x13c>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d003      	beq.n	800cc7c <TIM_Base_SetConfig+0x48>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4a3f      	ldr	r2, [pc, #252]	; (800cd74 <TIM_Base_SetConfig+0x140>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d108      	bne.n	800cc8e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4a33      	ldr	r2, [pc, #204]	; (800cd60 <TIM_Base_SetConfig+0x12c>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d023      	beq.n	800ccde <TIM_Base_SetConfig+0xaa>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc9c:	d01f      	beq.n	800ccde <TIM_Base_SetConfig+0xaa>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4a30      	ldr	r2, [pc, #192]	; (800cd64 <TIM_Base_SetConfig+0x130>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d01b      	beq.n	800ccde <TIM_Base_SetConfig+0xaa>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4a2f      	ldr	r2, [pc, #188]	; (800cd68 <TIM_Base_SetConfig+0x134>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d017      	beq.n	800ccde <TIM_Base_SetConfig+0xaa>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4a2e      	ldr	r2, [pc, #184]	; (800cd6c <TIM_Base_SetConfig+0x138>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d013      	beq.n	800ccde <TIM_Base_SetConfig+0xaa>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4a2d      	ldr	r2, [pc, #180]	; (800cd70 <TIM_Base_SetConfig+0x13c>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d00f      	beq.n	800ccde <TIM_Base_SetConfig+0xaa>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4a2d      	ldr	r2, [pc, #180]	; (800cd78 <TIM_Base_SetConfig+0x144>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d00b      	beq.n	800ccde <TIM_Base_SetConfig+0xaa>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	4a2c      	ldr	r2, [pc, #176]	; (800cd7c <TIM_Base_SetConfig+0x148>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d007      	beq.n	800ccde <TIM_Base_SetConfig+0xaa>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4a2b      	ldr	r2, [pc, #172]	; (800cd80 <TIM_Base_SetConfig+0x14c>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d003      	beq.n	800ccde <TIM_Base_SetConfig+0xaa>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	4a26      	ldr	r2, [pc, #152]	; (800cd74 <TIM_Base_SetConfig+0x140>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d108      	bne.n	800ccf0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	68fa      	ldr	r2, [r7, #12]
 800ccec:	4313      	orrs	r3, r2
 800ccee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	695b      	ldr	r3, [r3, #20]
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	689a      	ldr	r2, [r3, #8]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	4a12      	ldr	r2, [pc, #72]	; (800cd60 <TIM_Base_SetConfig+0x12c>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d013      	beq.n	800cd44 <TIM_Base_SetConfig+0x110>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	4a14      	ldr	r2, [pc, #80]	; (800cd70 <TIM_Base_SetConfig+0x13c>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d00f      	beq.n	800cd44 <TIM_Base_SetConfig+0x110>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	4a14      	ldr	r2, [pc, #80]	; (800cd78 <TIM_Base_SetConfig+0x144>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d00b      	beq.n	800cd44 <TIM_Base_SetConfig+0x110>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4a13      	ldr	r2, [pc, #76]	; (800cd7c <TIM_Base_SetConfig+0x148>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d007      	beq.n	800cd44 <TIM_Base_SetConfig+0x110>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a12      	ldr	r2, [pc, #72]	; (800cd80 <TIM_Base_SetConfig+0x14c>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d003      	beq.n	800cd44 <TIM_Base_SetConfig+0x110>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	4a0d      	ldr	r2, [pc, #52]	; (800cd74 <TIM_Base_SetConfig+0x140>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d103      	bne.n	800cd4c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	691a      	ldr	r2, [r3, #16]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	615a      	str	r2, [r3, #20]
}
 800cd52:	bf00      	nop
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	40012c00 	.word	0x40012c00
 800cd64:	40000400 	.word	0x40000400
 800cd68:	40000800 	.word	0x40000800
 800cd6c:	40000c00 	.word	0x40000c00
 800cd70:	40013400 	.word	0x40013400
 800cd74:	40015000 	.word	0x40015000
 800cd78:	40014000 	.word	0x40014000
 800cd7c:	40014400 	.word	0x40014400
 800cd80:	40014800 	.word	0x40014800

0800cd84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b087      	sub	sp, #28
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6a1b      	ldr	r3, [r3, #32]
 800cd94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6a1b      	ldr	r3, [r3, #32]
 800cd9a:	f023 0201 	bic.w	r2, r3, #1
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cdae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	011b      	lsls	r3, r3, #4
 800cdb4:	693a      	ldr	r2, [r7, #16]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	f023 030a 	bic.w	r3, r3, #10
 800cdc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	621a      	str	r2, [r3, #32]
}
 800cdd6:	bf00      	nop
 800cdd8:	371c      	adds	r7, #28
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr

0800cde2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cde2:	b480      	push	{r7}
 800cde4:	b087      	sub	sp, #28
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	60f8      	str	r0, [r7, #12]
 800cdea:	60b9      	str	r1, [r7, #8]
 800cdec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6a1b      	ldr	r3, [r3, #32]
 800cdf2:	f023 0210 	bic.w	r2, r3, #16
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	699b      	ldr	r3, [r3, #24]
 800cdfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6a1b      	ldr	r3, [r3, #32]
 800ce04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	031b      	lsls	r3, r3, #12
 800ce12:	697a      	ldr	r2, [r7, #20]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	011b      	lsls	r3, r3, #4
 800ce24:	693a      	ldr	r2, [r7, #16]
 800ce26:	4313      	orrs	r3, r2
 800ce28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	697a      	ldr	r2, [r7, #20]
 800ce2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	693a      	ldr	r2, [r7, #16]
 800ce34:	621a      	str	r2, [r3, #32]
}
 800ce36:	bf00      	nop
 800ce38:	371c      	adds	r7, #28
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce42:	b480      	push	{r7}
 800ce44:	b085      	sub	sp, #20
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
 800ce4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ce58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	4313      	orrs	r3, r2
 800ce64:	f043 0307 	orr.w	r3, r3, #7
 800ce68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	609a      	str	r2, [r3, #8]
}
 800ce70:	bf00      	nop
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b087      	sub	sp, #28
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
 800ce88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	021a      	lsls	r2, r3, #8
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	431a      	orrs	r2, r3
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	697a      	ldr	r2, [r7, #20]
 800cea6:	4313      	orrs	r3, r2
 800cea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	609a      	str	r2, [r3, #8]
}
 800ceb0:	bf00      	nop
 800ceb2:	371c      	adds	r7, #28
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b087      	sub	sp, #28
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	f003 031f 	and.w	r3, r3, #31
 800cece:	2201      	movs	r2, #1
 800ced0:	fa02 f303 	lsl.w	r3, r2, r3
 800ced4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6a1a      	ldr	r2, [r3, #32]
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	43db      	mvns	r3, r3
 800cede:	401a      	ands	r2, r3
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6a1a      	ldr	r2, [r3, #32]
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	f003 031f 	and.w	r3, r3, #31
 800ceee:	6879      	ldr	r1, [r7, #4]
 800cef0:	fa01 f303 	lsl.w	r3, r1, r3
 800cef4:	431a      	orrs	r2, r3
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	621a      	str	r2, [r3, #32]
}
 800cefa:	bf00      	nop
 800cefc:	371c      	adds	r7, #28
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr
	...

0800cf08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d101      	bne.n	800cf20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf1c:	2302      	movs	r3, #2
 800cf1e:	e074      	b.n	800d00a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2202      	movs	r2, #2
 800cf2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a34      	ldr	r2, [pc, #208]	; (800d018 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d009      	beq.n	800cf5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a33      	ldr	r2, [pc, #204]	; (800d01c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d004      	beq.n	800cf5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a31      	ldr	r2, [pc, #196]	; (800d020 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d108      	bne.n	800cf70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cf64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cf76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4a21      	ldr	r2, [pc, #132]	; (800d018 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d022      	beq.n	800cfde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfa0:	d01d      	beq.n	800cfde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a1f      	ldr	r2, [pc, #124]	; (800d024 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d018      	beq.n	800cfde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a1d      	ldr	r2, [pc, #116]	; (800d028 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d013      	beq.n	800cfde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a1c      	ldr	r2, [pc, #112]	; (800d02c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d00e      	beq.n	800cfde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4a15      	ldr	r2, [pc, #84]	; (800d01c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d009      	beq.n	800cfde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a18      	ldr	r2, [pc, #96]	; (800d030 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d004      	beq.n	800cfde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a11      	ldr	r2, [pc, #68]	; (800d020 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d10c      	bne.n	800cff8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	4313      	orrs	r3, r2
 800cfee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68ba      	ldr	r2, [r7, #8]
 800cff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3714      	adds	r7, #20
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	40012c00 	.word	0x40012c00
 800d01c:	40013400 	.word	0x40013400
 800d020:	40015000 	.word	0x40015000
 800d024:	40000400 	.word	0x40000400
 800d028:	40000800 	.word	0x40000800
 800d02c:	40000c00 	.word	0x40000c00
 800d030:	40014000 	.word	0x40014000

0800d034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d03c:	bf00      	nop
 800d03e:	370c      	adds	r7, #12
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d050:	bf00      	nop
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d064:	bf00      	nop
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d08c:	bf00      	nop
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d0b4:	bf00      	nop
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <__libc_init_array>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	4e0d      	ldr	r6, [pc, #52]	; (800d0f8 <__libc_init_array+0x38>)
 800d0c4:	4c0d      	ldr	r4, [pc, #52]	; (800d0fc <__libc_init_array+0x3c>)
 800d0c6:	1ba4      	subs	r4, r4, r6
 800d0c8:	10a4      	asrs	r4, r4, #2
 800d0ca:	2500      	movs	r5, #0
 800d0cc:	42a5      	cmp	r5, r4
 800d0ce:	d109      	bne.n	800d0e4 <__libc_init_array+0x24>
 800d0d0:	4e0b      	ldr	r6, [pc, #44]	; (800d100 <__libc_init_array+0x40>)
 800d0d2:	4c0c      	ldr	r4, [pc, #48]	; (800d104 <__libc_init_array+0x44>)
 800d0d4:	f000 f82c 	bl	800d130 <_init>
 800d0d8:	1ba4      	subs	r4, r4, r6
 800d0da:	10a4      	asrs	r4, r4, #2
 800d0dc:	2500      	movs	r5, #0
 800d0de:	42a5      	cmp	r5, r4
 800d0e0:	d105      	bne.n	800d0ee <__libc_init_array+0x2e>
 800d0e2:	bd70      	pop	{r4, r5, r6, pc}
 800d0e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d0e8:	4798      	blx	r3
 800d0ea:	3501      	adds	r5, #1
 800d0ec:	e7ee      	b.n	800d0cc <__libc_init_array+0xc>
 800d0ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d0f2:	4798      	blx	r3
 800d0f4:	3501      	adds	r5, #1
 800d0f6:	e7f2      	b.n	800d0de <__libc_init_array+0x1e>
 800d0f8:	0800d960 	.word	0x0800d960
 800d0fc:	0800d960 	.word	0x0800d960
 800d100:	0800d960 	.word	0x0800d960
 800d104:	0800d964 	.word	0x0800d964

0800d108 <memcpy>:
 800d108:	b510      	push	{r4, lr}
 800d10a:	1e43      	subs	r3, r0, #1
 800d10c:	440a      	add	r2, r1
 800d10e:	4291      	cmp	r1, r2
 800d110:	d100      	bne.n	800d114 <memcpy+0xc>
 800d112:	bd10      	pop	{r4, pc}
 800d114:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d11c:	e7f7      	b.n	800d10e <memcpy+0x6>

0800d11e <memset>:
 800d11e:	4402      	add	r2, r0
 800d120:	4603      	mov	r3, r0
 800d122:	4293      	cmp	r3, r2
 800d124:	d100      	bne.n	800d128 <memset+0xa>
 800d126:	4770      	bx	lr
 800d128:	f803 1b01 	strb.w	r1, [r3], #1
 800d12c:	e7f9      	b.n	800d122 <memset+0x4>
	...

0800d130 <_init>:
 800d130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d132:	bf00      	nop
 800d134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d136:	bc08      	pop	{r3}
 800d138:	469e      	mov	lr, r3
 800d13a:	4770      	bx	lr

0800d13c <_fini>:
 800d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13e:	bf00      	nop
 800d140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d142:	bc08      	pop	{r3}
 800d144:	469e      	mov	lr, r3
 800d146:	4770      	bx	lr
