
Eltek_Control_v.1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2dc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000818  0800d4b4  0800d4b4  0001d4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dccc  0800dccc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800dccc  0800dccc  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dccc  0800dccc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dccc  0800dccc  0001dccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcd0  0800dcd0  0001dcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800dcd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c370  2000002c  0800dd00  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c39c  0800dd00  0002c39c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028c08  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ad6  00000000  00000000  00048c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f38  00000000  00000000  0004d740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cb0  00000000  00000000  0004f678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cbba  00000000  00000000  00051328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d568  00000000  00000000  0007dee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00130bb0  00000000  00000000  0009b44a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cbffa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000847c  00000000  00000000  001cc078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d49c 	.word	0x0800d49c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	0800d49c 	.word	0x0800d49c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <DATA_Write_Theta_PLL>:
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DATA_Write_Theta_PLL(float Theta)                             
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	ed87 0a01 	vstr	s0, [r7, #4]

  DATA_theta_PLL=Theta;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <DATA_Write_Theta_PLL+0x1c>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	200000ac 	.word	0x200000ac

08000ab4 <DATA_Read_Theta_PLL>:
  * @retval DATA_theta_PLL (radians)
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
float DATA_Read_Theta_PLL(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  
  return DATA_theta_PLL;
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <DATA_Read_Theta_PLL+0x18>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	ee07 3a90 	vmov	s15, r3
}
 8000ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	200000ac 	.word	0x200000ac

08000ad0 <DATA_CURR_Write_ClarkePark>:
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void DATA_CURR_Write_ClarkePark(TRANSFORM_QDO_t Results_ClarkePark)
                                
 {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	eef0 6a40 	vmov.f32	s13, s0
 8000ada:	eeb0 7a60 	vmov.f32	s14, s1
 8000ade:	eef0 7a41 	vmov.f32	s15, s2
 8000ae2:	edc7 6a01 	vstr	s13, [r7, #4]
 8000ae6:	ed87 7a02 	vstr	s14, [r7, #8]
 8000aea:	edc7 7a03 	vstr	s15, [r7, #12]
                                
DATA_CURR_ClarkePark.axd=Results_ClarkePark.axd;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000af2:	6013      	str	r3, [r2, #0]
DATA_CURR_ClarkePark.axq=Results_ClarkePark.axq;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000af8:	6053      	str	r3, [r2, #4]
DATA_CURR_ClarkePark.axo=Results_ClarkePark.axo;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000afe:	6093      	str	r3, [r2, #8]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	20000080 	.word	0x20000080

08000b10 <DATA_VOLT_Write_ClarkePark>:
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void DATA_VOLT_Write_ClarkePark(TRANSFORM_QDO_t Results_ClarkePark)
                                
 {
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	eef0 6a40 	vmov.f32	s13, s0
 8000b1a:	eeb0 7a60 	vmov.f32	s14, s1
 8000b1e:	eef0 7a41 	vmov.f32	s15, s2
 8000b22:	edc7 6a01 	vstr	s13, [r7, #4]
 8000b26:	ed87 7a02 	vstr	s14, [r7, #8]
 8000b2a:	edc7 7a03 	vstr	s15, [r7, #12]
                                
DATA_VOLT_ClarkePark.axd=Results_ClarkePark.axd;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b32:	6013      	str	r3, [r2, #0]
DATA_VOLT_ClarkePark.axq=Results_ClarkePark.axq;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b38:	6053      	str	r3, [r2, #4]
DATA_VOLT_ClarkePark.axo=Results_ClarkePark.axo;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b3e:	6093      	str	r3, [r2, #8]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	20000094 	.word	0x20000094

08000b50 <DATA_Acquisition_from_DMA>:
* @retval None
*
* @note Function valid for STM32G4xx microconroller family  
*/
void DATA_Acquisition_from_DMA(uint32_t* p_ADC1_Data,uint32_t* p_ADC2_Data)                            
{   
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
//  VDC_ADC.Vdc_neg=p_ADC2_Data[1];
//#elif STDES_PFCBIDIR_REV2


//T_ext=p_ADC2_Data[2];//////
  T_int=p_ADC1_Data[7];//////
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	331c      	adds	r3, #28
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <DATA_Acquisition_from_DMA+0x74>)
 8000b64:	801a      	strh	r2, [r3, #0]
  //AC Side Voltage
  VAC_ADC.phA=p_ADC1_Data[2];
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <DATA_Acquisition_from_DMA+0x78>)
 8000b6c:	6013      	str	r3, [r2, #0]
  VAC_ADC.phB=p_ADC1_Data[3];
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <DATA_Acquisition_from_DMA+0x78>)
 8000b74:	6053      	str	r3, [r2, #4]
  VAC_ADC.phC=p_ADC1_Data[4];
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <DATA_Acquisition_from_DMA+0x78>)
 8000b7c:	6093      	str	r3, [r2, #8]
  //AC Side Current                           
  IAC_ADC.phA=p_ADC1_Data[0];
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b84:	6013      	str	r3, [r2, #0]
  IAC_ADC.phB=p_ADC1_Data[1];
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b8c:	6053      	str	r3, [r2, #4]

  IAC_ADC.phC = B_IAC - ((IAC_ADC.phA - B_IAC) + (IAC_ADC.phB - B_IAC));
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	f5c3 53b7 	rsb	r3, r3, #5856	; 0x16e0
 8000b9c:	3312      	adds	r3, #18
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <DATA_Acquisition_from_DMA+0x7c>)
 8000ba0:	6093      	str	r3, [r2, #8]

  //IAC_ADC.phC=p_ADC1_Data[];
  // DC Side Current
  //IDC_ADC.IDC_adc=p_ADC1_Data[3];
  //VDC                         
  VDC_ADC.Vdc_pos=p_ADC1_Data[5];
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <DATA_Acquisition_from_DMA+0x80>)
 8000ba8:	6013      	str	r3, [r2, #0]
  VDC_ADC.Vdc_neg=4096-p_ADC1_Data[6];
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3318      	adds	r3, #24
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <DATA_Acquisition_from_DMA+0x80>)
 8000bb6:	6053      	str	r3, [r2, #4]
//  VDC_ADC.Vdc_neg=p_ADC1_Data[7];
//  IDC_ADC.Idc_adc=p_ADC1_Data[8];
//#else
//  SELECT DEFINE
//#endif
} 
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	200000c0 	.word	0x200000c0
 8000bc8:	200000b4 	.word	0x200000b4
 8000bcc:	20000070 	.word	0x20000070
 8000bd0:	2000008c 	.word	0x2000008c

08000bd4 <Read_GRID>:
  * 
  * @retval VAC_ADC, pointer to VoltageAC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
VoltageAC_ADC_Struct* Read_GRID(void){
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return &VAC_ADC;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <Read_GRID+0x10>)
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	200000b4 	.word	0x200000b4

08000be8 <Read_Curr_GRID>:
  * 
  * @retval IAC_ADC, pointer to CurrentAC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
CurrentAC_ADC_Struct* Read_Curr_GRID(void){
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return &IAC_ADC;
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <Read_Curr_GRID+0x10>)
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	20000070 	.word	0x20000070

08000bfc <Read_Volt_DC>:
  * 
  * @retval VDC_ADC, pointer to VoltageDC_ADC struct
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
VoltageDC_ADC_Struct* Read_Volt_DC(void){
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return &VDC_ADC;
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <Read_Volt_DC+0x10>)
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	2000008c 	.word	0x2000008c

08000c10 <DPC_FSM_Application>:
  * @brief  Executes converter's state machine task
  * @param  None
  * @retval None
  */
void DPC_FSM_Application(void)
{    
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
    /**### Global State Machine */
  switch(DPC_FSM_State){                     
 8000c14:	4b46      	ldr	r3, [pc, #280]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b07      	cmp	r3, #7
 8000c1c:	f200 8084 	bhi.w	8000d28 <DPC_FSM_Application+0x118>
 8000c20:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <DPC_FSM_Application+0x18>)
 8000c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c26:	bf00      	nop
 8000c28:	08000c49 	.word	0x08000c49
 8000c2c:	08000c69 	.word	0x08000c69
 8000c30:	08000c89 	.word	0x08000c89
 8000c34:	08000ca9 	.word	0x08000ca9
 8000c38:	08000cc9 	.word	0x08000cc9
 8000c3c:	08000ce9 	.word	0x08000ce9
 8000c40:	08000d09 	.word	0x08000d09
 8000c44:	08000d23 	.word	0x08000d23
    case DPC_FSM_WAIT:    /** @arg  \a DP_FSM_WAIT state:  ...*/
      //if(checkfault.....  
         if(DPC_FSM_WAIT_Func()){
 8000c48:	f004 faa4 	bl	8005194 <DPC_FSM_WAIT_Func>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d006      	beq.n	8000c60 <DPC_FSM_Application+0x50>
           DPC_FSM_State = DPC_FSM_State_Get();
 8000c52:	f000 f86f 	bl	8000d34 <DPC_FSM_State_Get>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b35      	ldr	r3, [pc, #212]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000c5c:	701a      	strb	r2, [r3, #0]
         }
         else{
          DPC_FSM_State = DPC_FSM_STOP;
         }
      break;    
 8000c5e:	e064      	b.n	8000d2a <DPC_FSM_Application+0x11a>
          DPC_FSM_State = DPC_FSM_STOP;
 8000c60:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000c62:	2205      	movs	r2, #5
 8000c64:	701a      	strb	r2, [r3, #0]
      break;    
 8000c66:	e060      	b.n	8000d2a <DPC_FSM_Application+0x11a>
    case DPC_FSM_IDLE:    /** @arg  \a DP_FSM_IDLE state:  ... */            
        if(DPC_FSM_IDLE_Func()){
 8000c68:	f004 fac4 	bl	80051f4 <DPC_FSM_IDLE_Func>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d006      	beq.n	8000c80 <DPC_FSM_Application+0x70>
           DPC_FSM_State = DPC_FSM_State_Get();
 8000c72:	f000 f85f 	bl	8000d34 <DPC_FSM_State_Get>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000c7c:	701a      	strb	r2, [r3, #0]
        }
        else{
         DPC_FSM_State = DPC_FSM_STOP;
        }
      break;
 8000c7e:	e054      	b.n	8000d2a <DPC_FSM_Application+0x11a>
         DPC_FSM_State = DPC_FSM_STOP;
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000c82:	2205      	movs	r2, #5
 8000c84:	701a      	strb	r2, [r3, #0]
      break;
 8000c86:	e050      	b.n	8000d2a <DPC_FSM_Application+0x11a>
    case DPC_FSM_INIT:    /** @arg  \a DP_FSM_INIT state: ... */
        
        if(DPC_FSM_INIT_Func()){
 8000c88:	f004 fafa 	bl	8005280 <DPC_FSM_INIT_Func>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d006      	beq.n	8000ca0 <DPC_FSM_Application+0x90>
           DPC_FSM_State = DPC_FSM_State_Get();
 8000c92:	f000 f84f 	bl	8000d34 <DPC_FSM_State_Get>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000c9c:	701a      	strb	r2, [r3, #0]
        }
        else{
         DPC_FSM_State = DPC_FSM_STOP;
        }
      break;      
 8000c9e:	e044      	b.n	8000d2a <DPC_FSM_Application+0x11a>
         DPC_FSM_State = DPC_FSM_STOP;
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000ca2:	2205      	movs	r2, #5
 8000ca4:	701a      	strb	r2, [r3, #0]
      break;      
 8000ca6:	e040      	b.n	8000d2a <DPC_FSM_Application+0x11a>
    case DPC_FSM_START:     /**  @arg \a DP_FSM_START state: ... */
        
        if(DPC_FSM_START_Func()){
 8000ca8:	f004 fb88 	bl	80053bc <DPC_FSM_START_Func>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <DPC_FSM_Application+0xb0>
           DPC_FSM_State = DPC_FSM_State_Get();
 8000cb2:	f000 f83f 	bl	8000d34 <DPC_FSM_State_Get>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000cbc:	701a      	strb	r2, [r3, #0]
        }
        else{
         DPC_FSM_State = DPC_FSM_STOP;
        }
      break;  
 8000cbe:	e034      	b.n	8000d2a <DPC_FSM_Application+0x11a>
         DPC_FSM_State = DPC_FSM_STOP;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000cc2:	2205      	movs	r2, #5
 8000cc4:	701a      	strb	r2, [r3, #0]
      break;  
 8000cc6:	e030      	b.n	8000d2a <DPC_FSM_Application+0x11a>
    case DPC_FSM_RUN:           /** @arg \a DP_FSM_RUN state: ... */  
        
        if(DPC_FSM_RUN_Func()){
 8000cc8:	f004 fbfc 	bl	80054c4 <DPC_FSM_RUN_Func>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <DPC_FSM_Application+0xd0>
           DPC_FSM_State = DPC_FSM_State_Get();
 8000cd2:	f000 f82f 	bl	8000d34 <DPC_FSM_State_Get>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000cdc:	701a      	strb	r2, [r3, #0]
        }
        else{
         DPC_FSM_State = DPC_FSM_STOP;
        }
      break;  
 8000cde:	e024      	b.n	8000d2a <DPC_FSM_Application+0x11a>
         DPC_FSM_State = DPC_FSM_STOP;
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000ce2:	2205      	movs	r2, #5
 8000ce4:	701a      	strb	r2, [r3, #0]
      break;  
 8000ce6:	e020      	b.n	8000d2a <DPC_FSM_Application+0x11a>
    case DPC_FSM_STOP:          /** @arg \a DP_FSM_STOP state: ... */
        
        if(DPC_FSM_STOP_Func()){
 8000ce8:	f004 fc40 	bl	800556c <DPC_FSM_STOP_Func>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <DPC_FSM_Application+0xf0>
           DPC_FSM_State = DPC_FSM_State_Get();
 8000cf2:	f000 f81f 	bl	8000d34 <DPC_FSM_State_Get>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000cfc:	701a      	strb	r2, [r3, #0]
        }
        else{
         DPC_FSM_State = DPC_FSM_ERROR;
        }
      break;
 8000cfe:	e014      	b.n	8000d2a <DPC_FSM_Application+0x11a>
         DPC_FSM_State = DPC_FSM_ERROR;
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000d02:	2206      	movs	r2, #6
 8000d04:	701a      	strb	r2, [r3, #0]
      break;
 8000d06:	e010      	b.n	8000d2a <DPC_FSM_Application+0x11a>
    case DPC_FSM_ERROR:         /** @arg \a DP_FSM_FAULT state: ... */
      
        if(DPC_FSM_ERROR_Func()){          
 8000d08:	f004 fc3e 	bl	8005588 <DPC_FSM_ERROR_Func>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <DPC_FSM_Application+0x10a>
           DPC_FSM_State = DPC_FSM_FAULT;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	701a      	strb	r2, [r3, #0]
        }
        else{
         DPC_FSM_State = DPC_FSM_FAULT;
        }
      break;
 8000d18:	e007      	b.n	8000d2a <DPC_FSM_Application+0x11a>
         DPC_FSM_State = DPC_FSM_FAULT;
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <DPC_FSM_Application+0x120>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	701a      	strb	r2, [r3, #0]
      break;
 8000d20:	e003      	b.n	8000d2a <DPC_FSM_Application+0x11a>
    case DPC_FSM_FAULT:         /** @arg \a DP_FSM_FAULT state: ... */
       DPC_FSM_FAULT_Func();
 8000d22:	f004 fcb9 	bl	8005698 <DPC_FSM_FAULT_Func>
      break;
 8000d26:	e000      	b.n	8000d2a <DPC_FSM_Application+0x11a>
    default:
    break;
 8000d28:	bf00      	nop
  }
  /*-- end of switch-case State Machine --*/ 
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000048 	.word	0x20000048

08000d34 <DPC_FSM_State_Get>:
  * @brief  DPC_FSM_State_Get: return the new state of FSM
  * @param  None
  * @retval DP_FSM_State_t: new state
  */
DPC_FSM_State_t DPC_FSM_State_Get(void)
{   
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
 return DPC_FSM_NEW_State;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <DPC_FSM_State_Get+0x14>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	20000049 	.word	0x20000049

08000d4c <DPC_FSM_State_Set>:
  * @brief  DPC_FSM_State_Set: Set the new state of FSM
  * @param  DP_FSM_State_t: new state to set
  * @retval none
  */
void DPC_FSM_State_Set(DPC_FSM_State_t eNewStateVal)
{   
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  DPC_FSM_NEW_State = eNewStateVal;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <DPC_FSM_State_Set+0x1c>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	7013      	strb	r3, [r2, #0]
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	20000049 	.word	0x20000049

08000d6c <DPC_FLT_Faulterror_Check>:
  *
  * @retval DPC_FAULTERROR_LIST_TypeDef: error or fault occours, hiest priority
  *
  * @note Function valid for STM32G4xx and STM32F74x microconroller family   
  */
DPC_FAULTERROR_LIST_TypeDef DPC_FLT_Faulterror_Check(void){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0

DPC_FAULTERROR_LIST_TypeDef uwFaErVecLocal=NO_FAULT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]

if(uwFaultErrorVector != NO_FAULT){
 8000d76:	4ba0      	ldr	r3, [pc, #640]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8135 	beq.w	8000fea <DPC_FLT_Faulterror_Check+0x27e>

  if(uwFaultErrorVector & FAULT_OCL){
 8000d80:	4b9d      	ldr	r3, [pc, #628]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <DPC_FLT_Faulterror_Check+0x26>
    uwFaErVecLocal = FAULT_OCL;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	e12b      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_OVL){
 8000d92:	4b99      	ldr	r3, [pc, #612]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <DPC_FLT_Faulterror_Check+0x38>
    uwFaErVecLocal = FAULT_OVL;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	e122      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_OVC){
 8000da4:	4b94      	ldr	r3, [pc, #592]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <DPC_FLT_Faulterror_Check+0x4a>
    uwFaErVecLocal = FAULT_OVC;
 8000db0:	2304      	movs	r3, #4
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	e119      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_OCS){
 8000db6:	4b90      	ldr	r3, [pc, #576]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <DPC_FLT_Faulterror_Check+0x5c>
    uwFaErVecLocal = FAULT_OCS;
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	e110      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_OVS){
 8000dc8:	4b8b      	ldr	r3, [pc, #556]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <DPC_FLT_Faulterror_Check+0x6e>
    uwFaErVecLocal = FAULT_OVS;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	e107      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_INR){
 8000dda:	4b87      	ldr	r3, [pc, #540]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0320 	and.w	r3, r3, #32
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <DPC_FLT_Faulterror_Check+0x80>
    uwFaErVecLocal = FAULT_INR;
 8000de6:	2320      	movs	r3, #32
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	e0fe      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_BRS){
 8000dec:	4b82      	ldr	r3, [pc, #520]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <DPC_FLT_Faulterror_Check+0x92>
    uwFaErVecLocal = FAULT_BRS;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	e0f5      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & FAULT_PLL_OR){
 8000dfe:	4b7e      	ldr	r3, [pc, #504]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <DPC_FLT_Faulterror_Check+0xa4>
    uwFaErVecLocal = FAULT_PLL_OR;
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	e0ec      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & FAULT_PFC_UVLO){
 8000e10:	4b79      	ldr	r3, [pc, #484]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <DPC_FLT_Faulterror_Check+0xb8>
    uwFaErVecLocal = FAULT_PFC_UVLO;
 8000e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	e0e2      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & FAULT_IDLE){
 8000e24:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <DPC_FLT_Faulterror_Check+0xcc>
    uwFaErVecLocal = FAULT_IDLE;
 8000e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	e0d8      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & FAULT_GEN){
 8000e38:	4b6f      	ldr	r3, [pc, #444]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <DPC_FLT_Faulterror_Check+0xe0>
    uwFaErVecLocal = FAULT_GEN;
 8000e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	e0ce      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & FAULT_012){
 8000e4c:	4b6a      	ldr	r3, [pc, #424]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <DPC_FLT_Faulterror_Check+0xf4>
    uwFaErVecLocal = FAULT_012;
 8000e58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	e0c4      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & FAULT_013){
 8000e60:	4b65      	ldr	r3, [pc, #404]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <DPC_FLT_Faulterror_Check+0x108>
    uwFaErVecLocal = FAULT_013;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	e0ba      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & FAULT_014){
 8000e74:	4b60      	ldr	r3, [pc, #384]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <DPC_FLT_Faulterror_Check+0x11c>
    uwFaErVecLocal = FAULT_014;
 8000e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	e0b0      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }    
  else if(uwFaultErrorVector & FAULT_015){
 8000e88:	4b5b      	ldr	r3, [pc, #364]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <DPC_FLT_Faulterror_Check+0x130>
    uwFaErVecLocal = FAULT_015;
 8000e94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	e0a6      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }    
  else if(uwFaultErrorVector & FAULT_016){
 8000e9c:	4b56      	ldr	r3, [pc, #344]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <DPC_FLT_Faulterror_Check+0x144>
    uwFaErVecLocal = FAULT_016;
 8000ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	e09c      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }      
  // ADD new Fault Index
  else if(uwFaultErrorVector & ERROR_PLL){
 8000eb0:	4b51      	ldr	r3, [pc, #324]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <DPC_FLT_Faulterror_Check+0x158>
    uwFaErVecLocal = ERROR_PLL;
 8000ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	e092      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & ERROR_IDLE){
 8000ec4:	4b4c      	ldr	r3, [pc, #304]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <DPC_FLT_Faulterror_Check+0x16c>
    uwFaErVecLocal = ERROR_IDLE;
 8000ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	e088      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }  
  else if(uwFaultErrorVector & ERROR_START_INRS){
 8000ed8:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <DPC_FLT_Faulterror_Check+0x180>
    uwFaErVecLocal = ERROR_START_INRS;
 8000ee4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	e07e      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_FSM){
 8000eec:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <DPC_FLT_Faulterror_Check+0x194>
    uwFaErVecLocal = ERROR_FSM;
 8000ef8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	e074      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_PFC_UVLO){
 8000f00:	4b3d      	ldr	r3, [pc, #244]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <DPC_FLT_Faulterror_Check+0x1a8>
    uwFaErVecLocal = ERROR_PFC_UVLO;
 8000f0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	e06a      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_BRS){
 8000f14:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <DPC_FLT_Faulterror_Check+0x1bc>
    uwFaErVecLocal = ERROR_BRS;
 8000f20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	e060      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_AC_UV){
 8000f28:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <DPC_FLT_Faulterror_Check+0x1d0>
    uwFaErVecLocal = ERROR_AC_UV;
 8000f34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e056      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_PLL_OR){
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <DPC_FLT_Faulterror_Check+0x1e4>
    uwFaErVecLocal = ERROR_PLL_OR;
 8000f48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	e04c      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_PFC_RUN){
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <DPC_FLT_Faulterror_Check+0x1f8>
    uwFaErVecLocal = ERROR_PFC_RUN;
 8000f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	e042      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_AC_UVLO){
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <DPC_FLT_Faulterror_Check+0x20c>
    uwFaErVecLocal = ERROR_AC_UVLO;
 8000f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	e038      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_AC_OFF){
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <DPC_FLT_Faulterror_Check+0x220>
    uwFaErVecLocal = ERROR_AC_OFF;
 8000f84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	e02e      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_PFC){
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <DPC_FLT_Faulterror_Check+0x234>
    uwFaErVecLocal = ERROR_PFC;
 8000f98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	e024      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_013){
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <DPC_FLT_Faulterror_Check+0x248>
    uwFaErVecLocal = ERROR_013;
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	e01a      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_014){
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <DPC_FLT_Faulterror_Check+0x25c>
    uwFaErVecLocal = ERROR_014;
 8000fc0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	e010      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_015){
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <DPC_FLT_Faulterror_Check+0x270>
    uwFaErVecLocal = ERROR_015;
 8000fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	e006      	b.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
  }
  else if(uwFaultErrorVector & ERROR_016){
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <DPC_FLT_Faulterror_Check+0x28c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da02      	bge.n	8000fea <DPC_FLT_Faulterror_Check+0x27e>
    uwFaErVecLocal = ERROR_016;
 8000fe4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000fe8:	607b      	str	r3, [r7, #4]
  }  
  // ADD new Error Index
  
}

return uwFaErVecLocal;  
 8000fea:	687b      	ldr	r3, [r7, #4]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	200000c4 	.word	0x200000c4

08000ffc <DPC_FLT_Faulterror_Set>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx and STM32F74x microconroller family   
  */
void DPC_FLT_Faulterror_Set(DPC_FAULTERROR_LIST_TypeDef eFaulterror){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uwFaultErrorVector |= eFaulterror;                                                    /*!< Set fault/error in the faulterror vector*/
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <DPC_FLT_Faulterror_Set+0x20>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4313      	orrs	r3, r2
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <DPC_FLT_Faulterror_Set+0x20>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	200000c4 	.word	0x200000c4

08001020 <DPC_FLT_Error_Reset>:
  *
  * @retval DPC_FAULTERROR_LIST_TypeDef: error or fault occours, hiest priority
  *
  * @note Function valid for STM32G4xx and STM32F74x microconroller family   
  */
DPC_FAULTERROR_STATUS_TypeDef DPC_FLT_Error_Reset(DPC_FAULTERROR_LIST_TypeDef eError){
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

DPC_FAULTERROR_STATUS_TypeDef uwErVecLocal=NO_FAULTERROR;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

if(uwFaultErrorVector & 0x0000FFFF){
 800102c:	4b68      	ldr	r3, [pc, #416]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	b29b      	uxth	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <DPC_FLT_Error_Reset+0x1c>
  uwErVecLocal = NOT_ERASABLE;
 8001036:	2303      	movs	r3, #3
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e0c2      	b.n	80011c2 <DPC_FLT_Error_Reset+0x1a2>
}
else{
   if(uwFaultErrorVector & ERROR_PLL){
 800103c:	4b64      	ldr	r3, [pc, #400]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <DPC_FLT_Error_Reset+0x34>
      uwFaultErrorVector &= !ERROR_PLL;
 8001048:	4b61      	ldr	r3, [pc, #388]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 800104e:	2305      	movs	r3, #5
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e0b0      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_IDLE){
 8001054:	4b5e      	ldr	r3, [pc, #376]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <DPC_FLT_Error_Reset+0x4c>
      uwFaultErrorVector &= !ERROR_IDLE;
 8001060:	4b5b      	ldr	r3, [pc, #364]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 8001066:	2305      	movs	r3, #5
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e0a4      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }            
    else if(uwFaultErrorVector & ERROR_START_INRS){
 800106c:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <DPC_FLT_Error_Reset+0x64>
      uwFaultErrorVector &= !ERROR_START_INRS;
 8001078:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 800107e:	2305      	movs	r3, #5
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e098      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }           
    else if(uwFaultErrorVector & ERROR_FSM){
 8001084:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d005      	beq.n	800109c <DPC_FLT_Error_Reset+0x7c>
      uwFaultErrorVector &= !ERROR_FSM;
 8001090:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 8001096:	2305      	movs	r3, #5
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	e08c      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_PFC_UVLO){
 800109c:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <DPC_FLT_Error_Reset+0x94>
      uwFaultErrorVector &= !ERROR_PFC_UVLO;
 80010a8:	4b49      	ldr	r3, [pc, #292]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 80010ae:	2305      	movs	r3, #5
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e080      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_BRS){
 80010b4:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <DPC_FLT_Error_Reset+0xac>
      uwFaultErrorVector &= !ERROR_BRS;
 80010c0:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 80010c6:	2305      	movs	r3, #5
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e074      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_AC_UV){
 80010cc:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <DPC_FLT_Error_Reset+0xc4>
      uwFaultErrorVector &= !ERROR_AC_UV;
 80010d8:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 80010de:	2305      	movs	r3, #5
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e068      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_PLL_OR){
 80010e4:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <DPC_FLT_Error_Reset+0xdc>
      uwFaultErrorVector &= !ERROR_PLL_OR;
 80010f0:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 80010f6:	2305      	movs	r3, #5
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e05c      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_PFC_RUN){
 80010fc:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <DPC_FLT_Error_Reset+0xf4>
      uwFaultErrorVector &= !ERROR_PFC_RUN;
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 800110e:	2305      	movs	r3, #5
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	e050      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_AC_UVLO){
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <DPC_FLT_Error_Reset+0x10c>
      uwFaultErrorVector &= !ERROR_AC_UVLO;
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 8001126:	2305      	movs	r3, #5
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e044      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_AC_OFF){
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <DPC_FLT_Error_Reset+0x124>
      uwFaultErrorVector &= !ERROR_AC_OFF;
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 800113e:	2305      	movs	r3, #5
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e038      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_PFC){
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <DPC_FLT_Error_Reset+0x13c>
      uwFaultErrorVector &= !ERROR_PFC;
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 8001156:	2305      	movs	r3, #5
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e02c      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_013){
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <DPC_FLT_Error_Reset+0x154>
      uwFaultErrorVector &= !ERROR_013;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 800116e:	2305      	movs	r3, #5
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e020      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_014){
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <DPC_FLT_Error_Reset+0x16c>
      uwFaultErrorVector &= !ERROR_014;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 8001186:	2305      	movs	r3, #5
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e014      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_015){
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <DPC_FLT_Error_Reset+0x184>
      uwFaultErrorVector &= !ERROR_015;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 800119e:	2305      	movs	r3, #5
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e008      	b.n	80011b6 <DPC_FLT_Error_Reset+0x196>
    }
    else if(uwFaultErrorVector & ERROR_016){
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da04      	bge.n	80011b6 <DPC_FLT_Error_Reset+0x196>
      uwFaultErrorVector &= !ERROR_016;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
      uwErVecLocal = ERASE_OK;
 80011b2:	2305      	movs	r3, #5
 80011b4:	73fb      	strb	r3, [r7, #15]
    }   
   if(uwFaultErrorVector | 0x00000000){
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <DPC_FLT_Error_Reset+0x1b0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <DPC_FLT_Error_Reset+0x1a2>
    uwErVecLocal = ERASE_ERROR_LIST_NOT_EMPTY;
 80011be:	2304      	movs	r3, #4
 80011c0:	73fb      	strb	r3, [r7, #15]
  }
}
return uwErVecLocal;  
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	200000c4 	.word	0x200000c4

080011d4 <Current_Decoupling_Control>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void Current_Decoupling_Control(CDC_Struct *pCDC_sub,PI_STRUCT_t *pPI_ID_CURR_CTRL_sub, PI_STRUCT_t *pPI_IQ_CURR_CTRL_sub ,float *pVd_ctrl_FF_sub, float *pVq_ctrl_FF_sub){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b090      	sub	sp, #64	; 0x40
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]

float fomegagrid_sub=pCDC_sub->omegagrid;                                                       ///Omega grid value expressed in Hz - Related to decoupled terms
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
float fInductor_sub=pCDC_sub->Inductor;                                                         ///Inductor value expressed in H - Related to decoupled terms
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
float fId_ref_sub=pCDC_sub->Id_ref;                                                             ///Local variable - d-axis current referance
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
float fIq_ref_sub=pCDC_sub->Iq_ref;                                                             ///Local variable - q-axis current referance
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
float fId_feed_sub=pCDC_sub->Id_feed;                                                           ///Local variable - d-axis current feedback
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
float fIq_feed_sub=pCDC_sub->Iq_feed;                                                           ///Local variable - q-axis current feedback
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
float fVq_Curr_Ctrl_sub;                                                                        ///Local variable - q-axis PI output
float fVd_Decoupling_sub;                                                                       ///Local variable - d-axis decoupling term
float fVq_Decoupling_sub;                                                                       ///Local variable - d-axis decoupling term
//float *pVd_ctrl_FF_sub;                                                                          ///Local variable - d-axis FeefForward term
//float *pVq_ctrl_FF_sub;                                                                          ///Local variable - d-axis FeefForward term
float fVdc_sub=pCDC_sub->Vdc_feed;                                                              ///Local variable - Vdc feedback
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120a:	627b      	str	r3, [r7, #36]	; 0x24

  fVd_Curr_Ctrl_sub=PI(fId_ref_sub, fId_feed_sub , pPI_ID_CURR_CTRL_sub);                       ///d-axis PI regulator block
 800120c:	68b8      	ldr	r0, [r7, #8]
 800120e:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001212:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001216:	f001 ff6d 	bl	80030f4 <PI>
 800121a:	ed87 0a08 	vstr	s0, [r7, #32]
  fVq_Curr_Ctrl_sub=PI(fIq_ref_sub, fIq_feed_sub , pPI_IQ_CURR_CTRL_sub);                       ///q-axis PI regulator block
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001224:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001228:	f001 ff64 	bl	80030f4 <PI>
 800122c:	ed87 0a07 	vstr	s0, [r7, #28]

  if(pCDC_sub->Decoupling_Enable==SET)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001236:	2b01      	cmp	r3, #1
 8001238:	d130      	bne.n	800129c <Current_Decoupling_Control+0xc8>
  {
  pCDC_sub->Vd_Decoupling=fVd_Decoupling_sub=fIq_feed_sub*fomegagrid_sub*fInductor_sub;         ///d-axis decoupling term block
 800123a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800123e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124e:	edc7 7a06 	vstr	s15, [r7, #24]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
  pCDC_sub->Vq_Decoupling=fVq_Decoupling_sub=fId_feed_sub*fomegagrid_sub*fInductor_sub;         ///q-axis decoupling term block
 8001258:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800125c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001264:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	635a      	str	r2, [r3, #52]	; 0x34
  pCDC_sub->Vd_Curr_Ctrl=(fVd_Curr_Ctrl_sub-fVd_Decoupling_sub);                                ///d-axis decoupling term applied
 8001276:	ed97 7a08 	vldr	s14, [r7, #32]
 800127a:	edd7 7a06 	vldr	s15, [r7, #24]
 800127e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	edc3 7a08 	vstr	s15, [r3, #32]
  pCDC_sub->Vq_Curr_Ctrl=(fVq_Curr_Ctrl_sub+fVq_Decoupling_sub);                                ///q-axis decoupling term applied
 8001288:	ed97 7a07 	vldr	s14, [r7, #28]
 800128c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 800129a:	e005      	b.n	80012a8 <Current_Decoupling_Control+0xd4>
  }
  else
  {
  pCDC_sub->Vd_Curr_Ctrl=fVd_Curr_Ctrl_sub;                                                    ///d-axis decoupling term bypassed
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a3a      	ldr	r2, [r7, #32]
 80012a0:	621a      	str	r2, [r3, #32]
  pCDC_sub->Vq_Curr_Ctrl=fVq_Curr_Ctrl_sub;                                                    ///q-axis decoupling term bypassed
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
  }



  if(pCDC_sub->FF_Enable==SET)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <Current_Decoupling_Control+0xea>
  {
  FeedForward_Control(pCDC_sub,pVd_ctrl_FF_sub,pVq_ctrl_FF_sub);                                ///dq-axis Feed_Forward applied
 80012b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 f837 	bl	800132a <FeedForward_Control>
 80012bc:	e007      	b.n	80012ce <Current_Decoupling_Control+0xfa>
  }
  else
  {
    *pVd_ctrl_FF_sub=pCDC_sub->Vd_Curr_Ctrl;                                                    ///d-axis Feed_Forward bypassed
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6a1a      	ldr	r2, [r3, #32]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	601a      	str	r2, [r3, #0]
    *pVq_ctrl_FF_sub=pCDC_sub->Vq_Curr_Ctrl;                                                    ///q-axis Feed_Forward bypassed
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012cc:	601a      	str	r2, [r3, #0]
  }

  if(pCDC_sub->VDC_FF_Enable==SET)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d114      	bne.n	8001302 <Current_Decoupling_Control+0x12e>
  {
    *pVd_ctrl_FF_sub=*pVq_ctrl_FF_sub/fVdc_sub;                                                 ///d-axis - Vdc Feed_Forward applied
 80012d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012da:	edd3 6a00 	vldr	s13, [r3]
 80012de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	edc3 7a00 	vstr	s15, [r3]
    *pVq_ctrl_FF_sub=*pVq_ctrl_FF_sub/fVdc_sub;                                                 ///q-axis - Vdc Feed_Forward applied
 80012ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012ee:	edd3 6a00 	vldr	s13, [r3]
 80012f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012fc:	edc3 7a00 	vstr	s15, [r3]
 8001300:	e007      	b.n	8001312 <Current_Decoupling_Control+0x13e>
  }
  else
  {
    *pVd_ctrl_FF_sub=pCDC_sub->Vd_Curr_Ctrl;                                                    ///d-axis - Vdc Feed_Forward bypassed
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6a1a      	ldr	r2, [r3, #32]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	601a      	str	r2, [r3, #0]
    *pVq_ctrl_FF_sub=pCDC_sub->Vq_Curr_Ctrl;                                                    ///q-axis - Vdc Feed_Forward bypassed
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001310:	601a      	str	r2, [r3, #0]
  }


  *pVd_ctrl_FF_sub=*pVd_ctrl_FF_sub;                                                               ///d-axis Vcontrol CDC output term
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	601a      	str	r2, [r3, #0]
  *pVq_ctrl_FF_sub=*pVq_ctrl_FF_sub;                                                               ///q-axis Vcontrol CDC output term
 800131a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001320:	601a      	str	r2, [r3, #0]

}
 8001322:	bf00      	nop
 8001324:	3740      	adds	r7, #64	; 0x40
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <FeedForward_Control>:
  *
  * @note Function valid for STM32G4xx microconroller family
  */

void FeedForward_Control(CDC_Struct *pCDC_sub,float *pVd_ctrl_FF_sub, float *pVq_ctrl_FF_sub)
{
 800132a:	b480      	push	{r7}
 800132c:	b089      	sub	sp, #36	; 0x24
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
float fVd_feed_sub=pCDC_sub->Vd_feed;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	61fb      	str	r3, [r7, #28]
float fVq_feed_sub=pCDC_sub->Vq_feed;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	61bb      	str	r3, [r7, #24]
float fVd_ctrl_sub=pCDC_sub->Vd_Curr_Ctrl;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	617b      	str	r3, [r7, #20]
float fVq_ctrl_sub=pCDC_sub->Vq_Curr_Ctrl;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	613b      	str	r3, [r7, #16]


pCDC_sub->Vd_ctrl_FF=fVd_feed_sub-fVd_ctrl_sub;
 800134e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001352:	edd7 7a05 	vldr	s15, [r7, #20]
 8001356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
pCDC_sub->Vq_ctrl_FF=fVq_feed_sub-fVq_ctrl_sub;
 8001360:	ed97 7a06 	vldr	s14, [r7, #24]
 8001364:	edd7 7a04 	vldr	s15, [r7, #16]
 8001368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

  *pVd_ctrl_FF_sub=pCDC_sub->Vd_ctrl_FF;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	601a      	str	r2, [r3, #0]
  *pVq_ctrl_FF_sub=pCDC_sub->Vq_ctrl_FF;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	601a      	str	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <Voltage_Control>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void Voltage_Control(VOLTAGECTRL_Struct *VOLTAGECTRL_sub,PI_STRUCT_t *PI_VDC_CTRL_sub, float *Id_ctrl_sub){
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  float Vdc_ref_sub=VOLTAGECTRL_sub->Vdc_ref;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	617b      	str	r3, [r7, #20]
  float Vdc_feed_sub=VOLTAGECTRL_sub->Vdc_feed;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]

  PI(Vdc_ref_sub, Vdc_feed_sub , PI_VDC_CTRL_sub);
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	edd7 0a04 	vldr	s1, [r7, #16]
 80013ac:	ed97 0a05 	vldr	s0, [r7, #20]
 80013b0:	f001 fea0 	bl	80030f4 <PI>
  VOLTAGECTRL_sub->Id_ctrl=PI_VDC_CTRL_sub->PIout_sat;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	69da      	ldr	r2, [r3, #28]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	609a      	str	r2, [r3, #8]
  *Id_ctrl_sub=PI_VDC_CTRL_sub->PIout_sat;
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	69da      	ldr	r2, [r3, #28]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <DPC_LPCNTRL_PFC_Mode_Reset>:
  * @retval null
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void DPC_LPCNTRL_PFC_Mode_Reset(PI_STRUCT_t *PI_VDC_CTRL, CDC_Struct *CDC)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
        PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <DPC_LPCNTRL_PFC_Mode>:
  * @retval null
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void DPC_LPCNTRL_PFC_Mode(PFC_CTRL_t *pPFC_CTRL_loc, PI_STRUCT_t *PI_VDC_CTRL, VOLTAGECTRL_Struct *VOLTAGECTRL, CDC_Struct *CDC,TRANSFORM_QDO_t *V_DQO_CTRL,TRANSFORM_QDO_t *Current_qdo,TRANSFORM_QDO_t *Voltage_qdo,VoltageDC_ADC_NORM_Struct *VOLTAGE_ADC_DC_IN_PHY)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b08a      	sub	sp, #40	; 0x28
 80013fe:	af02      	add	r7, sp, #8
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	603b      	str	r3, [r7, #0]

  float Id_ctrl_sub=0;
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  float Vd_ctrl_FF=0;
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  float Vq_ctrl_FF=0;
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	617b      	str	r3, [r7, #20]



  pPFC_CTRL_loc->VOLTAGECTRL=*VOLTAGECTRL;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	33ec      	adds	r3, #236	; 0xec
 8001420:	ca07      	ldmia	r2, {r0, r1, r2}
 8001422:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  pPFC_CTRL_loc->CDC=*CDC;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	3314      	adds	r3, #20
 800142c:	4611      	mov	r1, r2
 800142e:	22d8      	movs	r2, #216	; 0xd8
 8001430:	4618      	mov	r0, r3
 8001432:	f00c f81f 	bl	800d474 <memcpy>

   if(pPFC_CTRL_loc->PFC_CTRL_State==VOLTAGE_LOOP) /// Voltage and Current control closed
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	789b      	ldrb	r3, [r3, #2]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d15c      	bne.n	80014f8 <DPC_LPCNTRL_PFC_Mode+0xfe>
  {
    PI_VDC_CTRL->resetPI=pPFC_CTRL_loc->VdcCTRL_Reset;          ///Release PI accumulator
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	785a      	ldrb	r2, [r3, #1]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    VOLTAGECTRL->Vdc_ref=pPFC_CTRL_loc->PFC_VDC_Ref;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8a1b      	ldrh	r3, [r3, #16]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	edc3 7a00 	vstr	s15, [r3]
    VOLTAGECTRL->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;
 800145a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	605a      	str	r2, [r3, #4]
    CDC->pPI_ID_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	781a      	ldrb	r2, [r3, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	781a      	ldrb	r2, [r3, #0]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    CDC->Id_feed=Current_qdo->axd;                              ///Pass dq current feedback to CDC struct (d-axis)
 8001480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	611a      	str	r2, [r3, #16]
    CDC->Iq_feed=Current_qdo->axq;                              ///Pass dq current feedback to CDC struct (q-axis)
 8001488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	615a      	str	r2, [r3, #20]
    CDC->Vd_feed=Voltage_qdo->axd;                              ///Pass dq voltage feedback to CDC struct (d-axis)
 8001490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
    CDC->Vq_feed=Voltage_qdo->axq;                              ///Pass dq voltage feedback to CDC struct (q-axis)
 8001498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
    CDC->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;               ///Pass DC voltage feedback to CDC struct
 80014a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	639a      	str	r2, [r3, #56]	; 0x38

    Voltage_Control(VOLTAGECTRL, PI_VDC_CTRL,&Id_ctrl_sub);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	461a      	mov	r2, r3
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff6c 	bl	800138e <Voltage_Control>
    CDC->Id_ref=Id_ctrl_sub;
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	609a      	str	r2, [r3, #8]
    CDC->Iq_ref=0;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
    Current_Decoupling_Control(CDC,&CDC->pPI_ID_CURR_CTRL,&CDC->pPI_IQ_CURR_CTRL, &Vd_ctrl_FF,&Vq_ctrl_FF);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80014d0:	f107 0018 	add.w	r0, r7, #24
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	4603      	mov	r3, r0
 80014dc:	6838      	ldr	r0, [r7, #0]
 80014de:	f7ff fe79 	bl	80011d4 <Current_Decoupling_Control>

    V_DQO_CTRL->axd=Vd_ctrl_FF;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e6:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ec:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
    V_DQO_CTRL->axd=0;
    V_DQO_CTRL->axq=0;
    V_DQO_CTRL->axo=0;
  }

}
 80014f6:	e08e      	b.n	8001616 <DPC_LPCNTRL_PFC_Mode+0x21c>
  else if(pPFC_CTRL_loc->PFC_CTRL_State==CURRENT_LOOP) /// Only Current control closed
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	789b      	ldrb	r3, [r3, #2]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d13b      	bne.n	8001578 <DPC_LPCNTRL_PFC_Mode+0x17e>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->Id_feed=Current_qdo->axd;                              ///Pass dq current feedback to CDC struct (d-axis)
 800151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	611a      	str	r2, [r3, #16]
    CDC->Iq_feed=Current_qdo->axq;                              ///Pass dq current feedback to CDC struct (q-axis)
 8001524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	615a      	str	r2, [r3, #20]
    CDC->Vd_feed=Voltage_qdo->axd;                              ///Pass dq voltage feedback to CDC struct (d-axis)
 800152c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
    CDC->Vq_feed=Voltage_qdo->axq;                              ///Pass dq voltage feedback to CDC struct (q-axis)
 8001534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
    CDC->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;               ///Pass DC voltage feedback to CDC struct
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	639a      	str	r2, [r3, #56]	; 0x38
    Current_Decoupling_Control(CDC,&CDC->pPI_ID_CURR_CTRL,&CDC->pPI_IQ_CURR_CTRL, &Vd_ctrl_FF,&Vq_ctrl_FF);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8001550:	f107 0018 	add.w	r0, r7, #24
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	4603      	mov	r3, r0
 800155c:	6838      	ldr	r0, [r7, #0]
 800155e:	f7ff fe39 	bl	80011d4 <Current_Decoupling_Control>
    V_DQO_CTRL->axd=Vd_ctrl_FF;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001566:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156c:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 800156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
}
 8001576:	e04e      	b.n	8001616 <DPC_LPCNTRL_PFC_Mode+0x21c>
  else if(pPFC_CTRL_loc->PFC_CTRL_State==OPEN_LOOP) /// Open LOOP
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	789b      	ldrb	r3, [r3, #2]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d132      	bne.n	80015e6 <DPC_LPCNTRL_PFC_Mode+0x1ec>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->Vd_Curr_Ctrl=pPFC_CTRL_loc->V_DQO_CTRL_MAN.axd;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	621a      	str	r2, [r3, #32]
    CDC->Vq_Curr_Ctrl=pPFC_CTRL_loc->V_DQO_CTRL_MAN.axq;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
    if(CDC->FF_Enable==SET)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d108      	bne.n	80015c4 <DPC_LPCNTRL_PFC_Mode+0x1ca>
    FeedForward_Control(CDC,&Vd_ctrl_FF,&Vq_ctrl_FF);                                ///dq-axis Feed_Forward applied
 80015b2:	f107 0214 	add.w	r2, r7, #20
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	4619      	mov	r1, r3
 80015bc:	6838      	ldr	r0, [r7, #0]
 80015be:	f7ff feb4 	bl	800132a <FeedForward_Control>
 80015c2:	e005      	b.n	80015d0 <DPC_LPCNTRL_PFC_Mode+0x1d6>
    Vd_ctrl_FF=CDC->Vd_Curr_Ctrl;                                                    ///d-axis Feed_Forward bypassed
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	61bb      	str	r3, [r7, #24]
    Vq_ctrl_FF=CDC->Vq_Curr_Ctrl;                                                    ///q-axis Feed_Forward bypassed
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	617b      	str	r3, [r7, #20]
    V_DQO_CTRL->axd=Vd_ctrl_FF;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
}
 80015e4:	e017      	b.n	8001616 <DPC_LPCNTRL_PFC_Mode+0x21c>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    V_DQO_CTRL->axd=0;
 80015fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=0;
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <DPC_LPCNTRL_BURST_Init>:
*
* @retval none
*
* @note Function valid for STM32G4xx microconroller family
*/
void DPC_LPCNTRL_BURST_Init(BURST_STRUCT *BURST_t_local,FlagStatus Burst_Enable_loc,uint16_t Vref_hist_VOLT,uint16_t delta_Vref_hist_VOLT,float I_dc_NO_LOAD_Limit_AMP_loc,float I_dc_LOW_LOAD_Limit_AMP_loc,float duty_no_load_local,float duty_low_load_local,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc){
 800161e:	b480      	push	{r7}
 8001620:	b08d      	sub	sp, #52	; 0x34
 8001622:	af00      	add	r7, sp, #0
 8001624:	61f8      	str	r0, [r7, #28]
 8001626:	4608      	mov	r0, r1
 8001628:	4611      	mov	r1, r2
 800162a:	461a      	mov	r2, r3
 800162c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001630:	edc7 0a03 	vstr	s1, [r7, #12]
 8001634:	ed87 1a02 	vstr	s2, [r7, #8]
 8001638:	edc7 1a01 	vstr	s3, [r7, #4]
 800163c:	4603      	mov	r3, r0
 800163e:	76fb      	strb	r3, [r7, #27]
 8001640:	460b      	mov	r3, r1
 8001642:	833b      	strh	r3, [r7, #24]
 8001644:	4613      	mov	r3, r2
 8001646:	82fb      	strh	r3, [r7, #22]
  uint16_t Vout_load_min;                                                                       /*!< Local histeresis lower ouput DC voltage Thrueshold expressed in Bits */
  uint16_t I_dc_NO_LOAD_Limit_loc;                                                              /// Local variable to pass Output current theshold (Expressed in AMPs) to determinate No Load Condition
  uint16_t I_dc_LOW_LOAD_Limit_loc;                                                             /// Local variable to pass Output current theshold (Expressed in AMPs) to determinate Low Load Condition


  Vref_hist_loc=(uint16_t)(((float)Vref_hist_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);
 8001648:	8b3b      	ldrh	r3, [r7, #24]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001654:	edd3 7a06 	vldr	s15, [r3, #24]
 8001658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800165e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166a:	ee17 3a90 	vmov	r3, s15
 800166e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  delta_Vref_hist_loc=(uint16_t)(((float)delta_Vref_hist_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);
 8001670:	8afb      	ldrh	r3, [r7, #22]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800167a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800167c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001686:	edd3 7a08 	vldr	s15, [r3, #32]
 800168a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001692:	ee17 3a90 	vmov	r3, s15
 8001696:	85bb      	strh	r3, [r7, #44]	; 0x2c
  Vout_load_max=Vref_hist_loc+delta_Vref_hist_loc;                                              /*!< Obtain and set higher output voltage term*/
 8001698:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800169a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800169c:	4413      	add	r3, r2
 800169e:	857b      	strh	r3, [r7, #42]	; 0x2a
  Vout_load_min=Vref_hist_loc-delta_Vref_hist_loc;                                              /*!< Obtain and set lower output voltage term*/
 80016a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80016a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	853b      	strh	r3, [r7, #40]	; 0x28

  //I_dc_NO_LOAD_Limit_loc=(uint16_t)(((float)I_dc_NO_LOAD_Limit_AMP_loc*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);       /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
  //I_dc_LOW_LOAD_Limit_loc=(uint16_t)(((float)I_dc_LOW_LOAD_Limit_AMP_loc*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);     /// (IDC_Low_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
  I_dc_NO_LOAD_Limit_loc = (uint16_t)(float)I_dc_NO_LOAD_Limit_AMP_loc;
 80016a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b0:	ee17 3a90 	vmov	r3, s15
 80016b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  I_dc_LOW_LOAD_Limit_loc=(uint16_t)(float)I_dc_LOW_LOAD_Limit_AMP_loc;
 80016b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016be:	ee17 3a90 	vmov	r3, s15
 80016c2:	84bb      	strh	r3, [r7, #36]	; 0x24


  BURST_t_local->Vref_hist=Vref_hist_loc;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80016c8:	805a      	strh	r2, [r3, #2]
  BURST_t_local->delta_Vref_hist=delta_Vref_hist_loc;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80016ce:	809a      	strh	r2, [r3, #4]
  BURST_t_local->Vout_max=Vout_load_max;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80016d4:	80da      	strh	r2, [r3, #6]
  BURST_t_local->Vout_min=Vout_load_min;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016da:	811a      	strh	r2, [r3, #8]
  BURST_t_local->Duty_Limit=0.5;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80016e2:	615a      	str	r2, [r3, #20]
  BURST_t_local->Duty_noload=duty_no_load_local;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	60da      	str	r2, [r3, #12]
  BURST_t_local->Duty_lowload=duty_low_load_local;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	611a      	str	r2, [r3, #16]
  BURST_t_local->Burst_Enable=Burst_Enable_loc;
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	7efa      	ldrb	r2, [r7, #27]
 80016f4:	761a      	strb	r2, [r3, #24]
  BURST_t_local->Iout_no_load_threshold=I_dc_NO_LOAD_Limit_loc;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80016fa:	835a      	strh	r2, [r3, #26]
  BURST_t_local->Iout_low_load_threshold=I_dc_LOW_LOAD_Limit_loc;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001700:	839a      	strh	r2, [r3, #28]

}
 8001702:	bf00      	nop
 8001704:	3734      	adds	r7, #52	; 0x34
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <DPC_LPCNTRL_Burst_Check>:
*
* @retval none
*
* @note Function valid for STM32G4xx microconroller family
*/
BURST_StatusTypeDef DPC_LPCNTRL_Burst_Check(uint32_t* p_Data_Sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub/*uint32_t* iDC_Data_Sub*/,BURST_STRUCT *BURST_CTRL_f){
 800170e:	b480      	push	{r7}
 8001710:	b08b      	sub	sp, #44	; 0x2c
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
  float I_max;
  float I_min;
  int16_t I_max_int;
  int16_t I_min_int;

  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phA){
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	ed97 7a08 	vldr	s14, [r7, #32]
 8001724:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172c:	d502      	bpl.n	8001734 <DPC_LPCNTRL_Burst_Check+0x26>
	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	623b      	str	r3, [r7, #32]
  }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	edd3 7a01 	vldr	s15, [r3, #4]
 800173a:	ed97 7a08 	vldr	s14, [r7, #32]
 800173e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	d502      	bpl.n	800174e <DPC_LPCNTRL_Burst_Check+0x40>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	623b      	str	r3, [r7, #32]
    }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	edd3 7a02 	vldr	s15, [r3, #8]
 8001754:	ed97 7a08 	vldr	s14, [r7, #32]
 8001758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001760:	d502      	bpl.n	8001768 <DPC_LPCNTRL_Burst_Check+0x5a>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	623b      	str	r3, [r7, #32]
  }

  if (I_min > CURRENT_ADC_AC_IN_NORM_Sub->phA){
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	dd02      	ble.n	8001782 <DPC_LPCNTRL_Burst_Check+0x74>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	61fb      	str	r3, [r7, #28]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	edd3 7a01 	vldr	s15, [r3, #4]
 8001788:	ed97 7a07 	vldr	s14, [r7, #28]
 800178c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001794:	d502      	bpl.n	800179c <DPC_LPCNTRL_Burst_Check+0x8e>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61fb      	str	r3, [r7, #28]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	edd3 7a02 	vldr	s15, [r3, #8]
 80017a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80017a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	d502      	bpl.n	80017b6 <DPC_LPCNTRL_Burst_Check+0xa8>
	I_min = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	61fb      	str	r3, [r7, #28]
  }

  I_min_int = (int16_t) I_min;
 80017b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80017ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017be:	ee17 3a90 	vmov	r3, s15
 80017c2:	833b      	strh	r3, [r7, #24]
  I_max_int = (int16_t) I_max;
 80017c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80017c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017cc:	ee17 3a90 	vmov	r3, s15
 80017d0:	837b      	strh	r3, [r7, #26]

  if (-I_min_int > I_max_int){
 80017d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017d6:	425a      	negs	r2, r3
 80017d8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017dc:	429a      	cmp	r2, r3
 80017de:	dd03      	ble.n	80017e8 <DPC_LPCNTRL_Burst_Check+0xda>
	  I_max_int= -I_min_int;
 80017e0:	8b3b      	ldrh	r3, [r7, #24]
 80017e2:	425b      	negs	r3, r3
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	837b      	strh	r3, [r7, #26]
  }

  if(BURST_CTRL_f->Burst_Enable==SET){                                                  /** If Burst_Enable is SET */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7e1b      	ldrb	r3, [r3, #24]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d130      	bne.n	8001852 <DPC_LPCNTRL_Burst_Check+0x144>

    BURST_CTRL_f->Vout_load=p_Data_Sub[0]+p_Data_Sub[1];                                /*!< Pass voltages data in local terms ([0]=VDC_upper  [1]=VDC_lower) */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3304      	adds	r3, #4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4413      	add	r3, r2
 8001800:	b29a      	uxth	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	801a      	strh	r2, [r3, #0]
    Vout_load_max=BURST_CTRL_f->Vout_max;                                               /*!< Set higher output voltage term*/
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	88db      	ldrh	r3, [r3, #6]
 800180a:	82fb      	strh	r3, [r7, #22]
    Vout_load_min=BURST_CTRL_f->Vout_min;                                               /*!< Set lower output voltage term*/                                                                /// [0]=Iload
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	891b      	ldrh	r3, [r3, #8]
 8001810:	82bb      	strh	r3, [r7, #20]

    if(I_max_int<=(BURST_CTRL_f->Iout_no_load_threshold)){                           ///NO_LOAD  Check
 8001812:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	8b52      	ldrh	r2, [r2, #26]
 800181a:	4293      	cmp	r3, r2
 800181c:	dc15      	bgt.n	800184a <DPC_LPCNTRL_Burst_Check+0x13c>
      if (BURST_CTRL_f->Vout_load>Vout_load_max)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	8afa      	ldrh	r2, [r7, #22]
 8001824:	429a      	cmp	r2, r3
 8001826:	d203      	bcs.n	8001830 <DPC_LPCNTRL_Burst_Check+0x122>
      {
        BURST_Status=BURST_Complete;
 8001828:	2301      	movs	r3, #1
 800182a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800182e:	e013      	b.n	8001858 <DPC_LPCNTRL_Burst_Check+0x14a>
      }
      else if (BURST_CTRL_f->Vout_load<Vout_load_min)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	8aba      	ldrh	r2, [r7, #20]
 8001836:	429a      	cmp	r2, r3
 8001838:	d903      	bls.n	8001842 <DPC_LPCNTRL_Burst_Check+0x134>
      {
        BURST_Status=BURST_Progress;
 800183a:	2303      	movs	r3, #3
 800183c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001840:	e00a      	b.n	8001858 <DPC_LPCNTRL_Burst_Check+0x14a>
      }
      else
      {
        BURST_Status=BURST_Complete;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001848:	e006      	b.n	8001858 <DPC_LPCNTRL_Burst_Check+0x14a>
      }
    }
    else
    {
      BURST_Status=BURST_Error;
 800184a:	2302      	movs	r3, #2
 800184c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001850:	e002      	b.n	8001858 <DPC_LPCNTRL_Burst_Check+0x14a>
    }
  }
  else{                                                                                 /** If Burst_Enable is RESET */
    BURST_Status=BURST_Disable;
 8001852:	2305      	movs	r3, #5
 8001854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  BURST_CTRL_f->BURST_Status=BURST_Status;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800185e:	779a      	strb	r2, [r3, #30]
  BURST_CTRL_f->uI_load_Burst=I_max_int;
 8001860:	8b7a      	ldrh	r2, [r7, #26]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	841a      	strh	r2, [r3, #32]

  return BURST_Status;
 8001866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800186a:	4618      	mov	r0, r3
 800186c:	372c      	adds	r7, #44	; 0x2c
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <DPC_LPCNTRL_Burst_Mode>:
* @retval none
*
* @note Working with DPC_LPCNTRL_Burst_Check
* @note Function valid for STM32G4xx microconroller family
*/
void DPC_LPCNTRL_Burst_Mode(uint32_t* p_Data_Sub,BURST_STRUCT *BURST_CTRL_f,CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub/*uint32_t* iDC_Data_Sub*/,DPC_PWM_TypeDef *tDPC_PWM_loc,DMA_PWMDUTY_STRUCT* DMA_SOURCE ){
 8001876:	b580      	push	{r7, lr}
 8001878:	b08a      	sub	sp, #40	; 0x28
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	603b      	str	r3, [r7, #0]
  int16_t I_max_int;
  int16_t I_min_int;
  float Burst_Duty;
  DMA_PWMDUTY_STRUCT* DMA_SOURCE1;

  I_max=0;
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24

  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phA){
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	d502      	bpl.n	80018a4 <DPC_LPCNTRL_Burst_Mode+0x2e>
	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80018aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	d502      	bpl.n	80018be <DPC_LPCNTRL_Burst_Mode+0x48>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d502      	bpl.n	80018d8 <DPC_LPCNTRL_Burst_Mode+0x62>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (I_min > CURRENT_ADC_AC_IN_NORM_Sub->phA){
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	ed97 7a08 	vldr	s14, [r7, #32]
 80018e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	dd02      	ble.n	80018f2 <DPC_LPCNTRL_Burst_Mode+0x7c>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	623b      	str	r3, [r7, #32]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f8:	ed97 7a08 	vldr	s14, [r7, #32]
 80018fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001904:	d502      	bpl.n	800190c <DPC_LPCNTRL_Burst_Mode+0x96>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	623b      	str	r3, [r7, #32]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001912:	ed97 7a08 	vldr	s14, [r7, #32]
 8001916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191e:	d502      	bpl.n	8001926 <DPC_LPCNTRL_Burst_Mode+0xb0>
	I_min = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	623b      	str	r3, [r7, #32]
  }

  I_min_int = (int16_t) (I_min*10);
 8001926:	edd7 7a08 	vldr	s15, [r7, #32]
 800192a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800192e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001936:	ee17 3a90 	vmov	r3, s15
 800193a:	82fb      	strh	r3, [r7, #22]
  I_max_int = (int16_t) (I_max*10);
 800193c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001940:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194c:	ee17 3a90 	vmov	r3, s15
 8001950:	83fb      	strh	r3, [r7, #30]

  if (-I_min_int > I_max_int){
 8001952:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001956:	425a      	negs	r2, r3
 8001958:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800195c:	429a      	cmp	r2, r3
 800195e:	dd03      	ble.n	8001968 <DPC_LPCNTRL_Burst_Mode+0xf2>
	  I_max_int= -I_min_int;
 8001960:	8afb      	ldrh	r3, [r7, #22]
 8001962:	425b      	negs	r3, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	83fb      	strh	r3, [r7, #30]
  }

  if (BURST_CTRL_f->Burst_Enable==SET){                                                 /** If Burst_Enable is SET */
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	7e1b      	ldrb	r3, [r3, #24]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d178      	bne.n	8001a62 <DPC_LPCNTRL_Burst_Mode+0x1ec>

    Vout_load=p_Data_Sub[0]+p_Data_Sub[1];                                              /*!< Pass voltages data in local terms ([0]=VDC_upper  [1]=VDC_lower) */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3304      	adds	r3, #4
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	b29b      	uxth	r3, r3
 800197e:	4413      	add	r3, r2
 8001980:	82bb      	strh	r3, [r7, #20]
    Vout_load_max=BURST_CTRL_f->Vout_max;                                               /*!< Set higher output voltage term*/
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	88db      	ldrh	r3, [r3, #6]
 8001986:	827b      	strh	r3, [r7, #18]
    Vout_load_min=BURST_CTRL_f->Vout_min;                                               /*!< Set lower output voltage term*/
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	891b      	ldrh	r3, [r3, #8]
 800198c:	823b      	strh	r3, [r7, #16]
    BURST_CTRL_f->Vout_load=Vout_load;                                                  /*!< Store output voltage in "BURST_CTRL" struct */
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	8aba      	ldrh	r2, [r7, #20]
 8001992:	801a      	strh	r2, [r3, #0]
    //I_load_Burst=iDC_Data_Sub[0];                                                       /// [0]=Iload


  if(BURST_CTRL_f->BURST_Status==BURST_Progress || BURST_CTRL_f->BURST_Status==BURST_Run){
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	7f9b      	ldrb	r3, [r3, #30]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d003      	beq.n	80019a4 <DPC_LPCNTRL_Burst_Mode+0x12e>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	7f9b      	ldrb	r3, [r3, #30]
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d15e      	bne.n	8001a62 <DPC_LPCNTRL_Burst_Mode+0x1ec>

    if(BURST_CTRL_f->Duty_noload>BURST_CTRL_f->Duty_Limit){                              ///Start Check Duty LIMIT
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80019b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b8:	dd03      	ble.n	80019c2 <DPC_LPCNTRL_Burst_Mode+0x14c>
      BURST_CTRL_f->Duty_noload=BURST_CTRL_f->Duty_Limit;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	60da      	str	r2, [r3, #12]
    }//End Check Duty_noload LIMIT
    if(BURST_CTRL_f->Duty_lowload>BURST_CTRL_f->Duty_Limit){                             ///Start Check Duty LIMIT
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	ed93 7a04 	vldr	s14, [r3, #16]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80019ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d6:	dd03      	ble.n	80019e0 <DPC_LPCNTRL_Burst_Mode+0x16a>
      BURST_CTRL_f->Duty_lowload=BURST_CTRL_f->Duty_Limit;
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	611a      	str	r2, [r3, #16]
    }//End Check Duty_lowload LIMIT


    if(I_max_int<=(BURST_CTRL_f->Iout_no_load_threshold)){                           ///NO_LOAD  Check
 80019e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	8b52      	ldrh	r2, [r2, #26]
 80019e8:	4293      	cmp	r3, r2
 80019ea:	dc03      	bgt.n	80019f4 <DPC_LPCNTRL_Burst_Mode+0x17e>
    Burst_Duty=BURST_CTRL_f->Duty_noload;
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	e00e      	b.n	8001a12 <DPC_LPCNTRL_Burst_Mode+0x19c>
    }
    else if(I_max_int>(BURST_CTRL_f->Iout_no_load_threshold) || I_max_int<=(BURST_CTRL_f->Iout_low_load_threshold)){                     ///LOW_LOAD  Check
 80019f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	8b52      	ldrh	r2, [r2, #26]
 80019fc:	4293      	cmp	r3, r2
 80019fe:	dc05      	bgt.n	8001a0c <DPC_LPCNTRL_Burst_Mode+0x196>
 8001a00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	8b92      	ldrh	r2, [r2, #28]
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	dc02      	bgt.n	8001a12 <DPC_LPCNTRL_Burst_Mode+0x19c>
    Burst_Duty=BURST_CTRL_f->Duty_lowload;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	61bb      	str	r3, [r7, #24]
    }

    DPC_PWM_Send_Burst_PWM(tDPC_PWM_loc,Burst_Duty,Burst_Duty,Burst_Duty,DMA_SOURCE);  /*!< Refresh BURST Duty*/
 8001a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a14:	ed97 1a06 	vldr	s2, [r7, #24]
 8001a18:	edd7 0a06 	vldr	s1, [r7, #24]
 8001a1c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001a20:	6838      	ldr	r0, [r7, #0]
 8001a22:	f000 ffed 	bl	8002a00 <DPC_PWM_Send_Burst_PWM>
    //DMA_SOURCE=DMA_SOURCE1;

//      if (Vout_load>Vout_load_max && BURST_CTRL_f->BURST_PACKAGE==SET)                  /*!< Occured when Vout overcome higher trueshold and BURST_Flag is active*/
      if (Vout_load>Vout_load_max)                                                      /*!< Occured when Vout overcome higher trueshold and BURST_Flag is active*/
 8001a26:	8aba      	ldrh	r2, [r7, #20]
 8001a28:	8a7b      	ldrh	r3, [r7, #18]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d908      	bls.n	8001a40 <DPC_LPCNTRL_Burst_Mode+0x1ca>

      {
        DPC_PWM_OutDisable();                                                           /*!< DISABLE BURST PWM*/
 8001a2e:	f001 fa41 	bl	8002eb4 <DPC_PWM_OutDisable>
        BURST_CTRL_f->BURST_PACKAGE=RESET;                                              /*!< BURST_Flag become RESET (Burst Inactive)*/
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2200      	movs	r2, #0
 8001a36:	729a      	strb	r2, [r3, #10]
        BURST_CTRL_f->BURST_IN_RANGE=RESET;                                             /*!< BURST_IN_RANGE_Flag become RESET (Vout higher then limit)*/
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	72da      	strb	r2, [r3, #11]
 8001a3e:	e010      	b.n	8001a62 <DPC_LPCNTRL_Burst_Mode+0x1ec>
      }
//      else if (Vout_load<Vout_load_min && BURST_CTRL_f->BURST_PACKAGE==RESET)           /*!< Occured when Vout is lower then low-trueshold and BURST_Flag is stopped*/
      else if (Vout_load<Vout_load_min)                                                 /*!< Occured when Vout is lower then low-trueshold and BURST_Flag is stopped*/
 8001a40:	8aba      	ldrh	r2, [r7, #20]
 8001a42:	8a3b      	ldrh	r3, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d209      	bcs.n	8001a5c <DPC_LPCNTRL_Burst_Mode+0x1e6>
      {
        DPC_PWM_OutEnable(tDPC_PWM_loc);                                               /*!< ENABLE BURST PWM*/
 8001a48:	6838      	ldr	r0, [r7, #0]
 8001a4a:	f001 fa39 	bl	8002ec0 <DPC_PWM_OutEnable>
        BURST_CTRL_f->BURST_PACKAGE=SET;                                                /*!< BURST_Flag become SET (Burst Active)*/
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2201      	movs	r2, #1
 8001a52:	729a      	strb	r2, [r3, #10]
        BURST_CTRL_f->BURST_IN_RANGE=RESET;                                             /*!< BURST_IN_RANGE_Flag become RESET (Vout lower then limit)*/
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2200      	movs	r2, #0
 8001a58:	72da      	strb	r2, [r3, #11]
 8001a5a:	e002      	b.n	8001a62 <DPC_LPCNTRL_Burst_Mode+0x1ec>
      }
      else                                                                              /*!< Occured in inner hysteresis window*/
      {
        BURST_CTRL_f->BURST_IN_RANGE=SET;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	72da      	strb	r2, [r3, #11]
      }
  }
  }
  BURST_CTRL_f->uI_load_Burst=I_max;
 8001a62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a6a:	ee17 3a90 	vmov	r3, s15
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	841a      	strh	r2, [r3, #32]
  BURST_CTRL_f->Burst_Duty=Burst_Duty;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <DPC_LPCNTRL_Inrush_Check>:
  *
  * @retval INRUSH_StatusTypeDef
  *
  * @note Function valid for STM32G4xx microconroller family
  */
INRUSH_StatusTypeDef DPC_LPCNTRL_Inrush_Check(uint32_t* p_Data_Sub,CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub/* uint32_t* iDC_Data_Sub*/,INRUSH_STRUCT *INRUSH_CTRL_f){
 8001a82:	b480      	push	{r7}
 8001a84:	b08b      	sub	sp, #44	; 0x2c
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
  float I_max;
  float I_min;
  int16_t I_max_int;
  int16_t I_min_int;

  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phA){
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	d502      	bpl.n	8001aa8 <DPC_LPCNTRL_Inrush_Check+0x26>
	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	623b      	str	r3, [r7, #32]
  }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aae:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aba:	d502      	bpl.n	8001ac2 <DPC_LPCNTRL_Inrush_Check+0x40>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	623b      	str	r3, [r7, #32]
    }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ac8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	d502      	bpl.n	8001adc <DPC_LPCNTRL_Inrush_Check+0x5a>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	623b      	str	r3, [r7, #32]
  }

  if (I_min > CURRENT_ADC_AC_IN_NORM_Sub->phA){
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aee:	dd02      	ble.n	8001af6 <DPC_LPCNTRL_Inrush_Check+0x74>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61fb      	str	r3, [r7, #28]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001afc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b08:	d502      	bpl.n	8001b10 <DPC_LPCNTRL_Inrush_Check+0x8e>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61fb      	str	r3, [r7, #28]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b16:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b22:	d502      	bpl.n	8001b2a <DPC_LPCNTRL_Inrush_Check+0xa8>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	61fb      	str	r3, [r7, #28]
  }

  I_min_int = (int16_t) (I_min*10);
 8001b2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b2e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3a:	ee17 3a90 	vmov	r3, s15
 8001b3e:	833b      	strh	r3, [r7, #24]
  I_max_int = (int16_t) (I_max*10);
 8001b40:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b50:	ee17 3a90 	vmov	r3, s15
 8001b54:	837b      	strh	r3, [r7, #26]

  if (-I_min_int > I_max_int){
 8001b56:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b5a:	425a      	negs	r2, r3
 8001b5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dd03      	ble.n	8001b6c <DPC_LPCNTRL_Inrush_Check+0xea>
	  I_max_int= -I_min_int;
 8001b64:	8b3b      	ldrh	r3, [r7, #24]
 8001b66:	425b      	negs	r3, r3
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	837b      	strh	r3, [r7, #26]
  }

  if (INRUSH_CTRL_f->InrushEnable==SET){                                                /** If InrushEnable is SET */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7a9b      	ldrb	r3, [r3, #10]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d132      	bne.n	8001bda <DPC_LPCNTRL_Inrush_Check+0x158>

    Vout_load=p_Data_Sub[0]+p_Data_Sub[1];                                              /*!< Pass voltages data in local terms ([0]=VDC_upper  [1]=VDC_lower) */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	82fb      	strh	r3, [r7, #22]
    //I_load_Inrush=iDC_Data_Sub[0];                                                      /*!< Pass current data in local terms [0]=Iload */
    I_load_Inrush=(uint16_t) I_max_int;
 8001b86:	8b7b      	ldrh	r3, [r7, #26]
 8001b88:	84bb      	strh	r3, [r7, #36]	; 0x24
    INRUSH_CTRL_f->Vout_load=Vout_load;                                                 /*!< Store output voltage in "INRUSH" struct */
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	8afa      	ldrh	r2, [r7, #22]
 8001b8e:	801a      	strh	r2, [r3, #0]
    Vout_load_max=INRUSH_CTRL_f->Vout_max;                                              /*!< Set higher output voltage term*/
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	88db      	ldrh	r3, [r3, #6]
 8001b94:	82bb      	strh	r3, [r7, #20]
    Vout_load_min=INRUSH_CTRL_f->Vout_min;                                              /*!< Set lower output voltage term*/
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	891b      	ldrh	r3, [r3, #8]
 8001b9a:	827b      	strh	r3, [r7, #18]
    Iout_load_threshold=INRUSH_CTRL_f->Iout_load_threshold;                             /*!< Set output current term*/
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	899b      	ldrh	r3, [r3, #12]
 8001ba0:	823b      	strh	r3, [r7, #16]

    if(I_load_Inrush<=Iout_load_threshold){                                             /*!< NO_LOAD  Check */
 8001ba2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ba4:	8a3b      	ldrh	r3, [r7, #16]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d813      	bhi.n	8001bd2 <DPC_LPCNTRL_Inrush_Check+0x150>
      if (Vout_load>Vout_load_max)                                                      /*!< ERROR Check - If occur AC OVERVOLTAGE or 3W-4W are not properly configurated*/
 8001baa:	8afa      	ldrh	r2, [r7, #22]
 8001bac:	8abb      	ldrh	r3, [r7, #20]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d903      	bls.n	8001bba <DPC_LPCNTRL_Inrush_Check+0x138>
      {
        INRUSH_Status=INRUSH_Error;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bb8:	e012      	b.n	8001be0 <DPC_LPCNTRL_Inrush_Check+0x15e>
      }
      else if (Vout_load<Vout_load_min)                                                 /*!< Inrush Check - If NOT occured AC UNDERVOLTAGE or 3W-4W are not properly configurated*/
 8001bba:	8afa      	ldrh	r2, [r7, #22]
 8001bbc:	8a7b      	ldrh	r3, [r7, #18]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d203      	bcs.n	8001bca <DPC_LPCNTRL_Inrush_Check+0x148>
      {
        INRUSH_Status=INRUSH_Progress;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bc8:	e00a      	b.n	8001be0 <DPC_LPCNTRL_Inrush_Check+0x15e>
      }
      else                                                                              /** InrushEnable is SET and completed*/
      {
        INRUSH_Status=INRUSH_Complete;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bd0:	e006      	b.n	8001be0 <DPC_LPCNTRL_Inrush_Check+0x15e>
      }
    }///  END NO_LOAD  Check
    else                                                                                /** InrushEnable is SET but DC current is present during the inrush (ERROR) */
    {
      INRUSH_Status=INRUSH_Error;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bd8:	e002      	b.n	8001be0 <DPC_LPCNTRL_Inrush_Check+0x15e>
    }
  }
  else                                                                                  /** If InrushEnable is RESET */
  {
    INRUSH_Status=INRUSH_Disable;
 8001bda:	2305      	movs	r3, #5
 8001bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  INRUSH_CTRL_f->INRUSH_Status=INRUSH_Status;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001be6:	741a      	strb	r2, [r3, #16]
  INRUSH_CTRL_f->I_load_Inrush=I_load_Inrush;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bec:	81da      	strh	r2, [r3, #14]

  return INRUSH_Status;
 8001bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	372c      	adds	r7, #44	; 0x2c
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <DPC_LPCNTRL_Inrush_Init>:
  * @retval INRUSH_StatusTypeDef
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void DPC_LPCNTRL_Inrush_Init(INRUSH_STRUCT *INRUSH_CTRL_f,uint16_t Vref_hist_VOLT_loc,uint16_t delta_Vref_hist_VOLT_loc,float I_dc_NO_LOAD_Limit_AMP_loc,FlagStatus InrushEnable_loc,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b089      	sub	sp, #36	; 0x24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	4608      	mov	r0, r1
 8001c08:	4611      	mov	r1, r2
 8001c0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4603      	mov	r3, r0
 8001c12:	817b      	strh	r3, [r7, #10]
 8001c14:	460b      	mov	r3, r1
 8001c16:	813b      	strh	r3, [r7, #8]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	70fb      	strb	r3, [r7, #3]
  uint16_t Vout_load_min;                                                                       /*!< Local histeresis lower ouput DC voltage Thrueshold expressed in Bits */
  uint16_t I_dc_NO_LOAD_Limit_loc;                                                              /// Local variable to pass Output current theshold (Expressed in AMPs) to determinate No Load Condition



  Vref_hist_loc=(uint16_t)(((float)Vref_hist_VOLT_loc*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);
 8001c1c:	897b      	ldrh	r3, [r7, #10]
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c28:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c3e:	ee17 3a90 	vmov	r3, s15
 8001c42:	83fb      	strh	r3, [r7, #30]
  delta_Vref_hist_loc=(uint16_t)(((float)delta_Vref_hist_VOLT_loc*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);
 8001c44:	893b      	ldrh	r3, [r7, #8]
 8001c46:	ee07 3a90 	vmov	s15, r3
 8001c4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c66:	ee17 3a90 	vmov	r3, s15
 8001c6a:	83bb      	strh	r3, [r7, #28]

  Vout_load_max=Vref_hist_loc+delta_Vref_hist_loc;                                              /*!< Obtain and set higher output voltage term*/
 8001c6c:	8bfa      	ldrh	r2, [r7, #30]
 8001c6e:	8bbb      	ldrh	r3, [r7, #28]
 8001c70:	4413      	add	r3, r2
 8001c72:	837b      	strh	r3, [r7, #26]
  Vout_load_min=Vref_hist_loc-delta_Vref_hist_loc;                                              /*!< Obtain and set lower output voltage term*/
 8001c74:	8bfa      	ldrh	r2, [r7, #30]
 8001c76:	8bbb      	ldrh	r3, [r7, #28]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	833b      	strh	r3, [r7, #24]

  //I_dc_NO_LOAD_Limit_loc=(uint16_t)(((float)I_dc_NO_LOAD_Limit_AMP_loc*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);   /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
  I_dc_NO_LOAD_Limit_loc=(uint16_t)I_dc_NO_LOAD_Limit_AMP_loc;
 8001c7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	82fb      	strh	r3, [r7, #22]



  INRUSH_CTRL_f->Vref_hist=Vref_hist_loc;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8bfa      	ldrh	r2, [r7, #30]
 8001c8e:	805a      	strh	r2, [r3, #2]
  INRUSH_CTRL_f->delta_Vref_hist=delta_Vref_hist_loc;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8bba      	ldrh	r2, [r7, #28]
 8001c94:	809a      	strh	r2, [r3, #4]
  INRUSH_CTRL_f->InrushEnable=InrushEnable_loc;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	729a      	strb	r2, [r3, #10]
  INRUSH_CTRL_f->Vout_max=Vout_load_max;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8b7a      	ldrh	r2, [r7, #26]
 8001ca0:	80da      	strh	r2, [r3, #6]
  INRUSH_CTRL_f->Vout_min=Vout_load_min;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8b3a      	ldrh	r2, [r7, #24]
 8001ca6:	811a      	strh	r2, [r3, #8]
  INRUSH_CTRL_f->Iout_load_threshold=I_dc_NO_LOAD_Limit_loc;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8afa      	ldrh	r2, [r7, #22]
 8001cac:	819a      	strh	r2, [r3, #12]
}
 8001cae:	bf00      	nop
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <DPC_LPCNTRL_CDC_Init>:
  * @retval none
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void DPC_LPCNTRL_CDC_Init(CDC_Struct *CDC_local,float omegagrid_loc,float Inductor_loc,FlagStatus FF_Enable_SET,FlagStatus Decoupling_Enable_SET,FlagStatus VDC_FF_Enable_SET)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cc6:	edc7 0a01 	vstr	s1, [r7, #4]
 8001cca:	4608      	mov	r0, r1
 8001ccc:	4611      	mov	r1, r2
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	70fb      	strb	r3, [r7, #3]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	70bb      	strb	r3, [r7, #2]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	707b      	strb	r3, [r7, #1]
  CDC_local->omegagrid=omegagrid_loc;                   /*!< Set omega in Current Decaupling Control*/
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	601a      	str	r2, [r3, #0]
  CDC_local->Inductor=Inductor_loc;                     /*!< Set Inductor value in Current Decaupling Control*/
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	605a      	str	r2, [r3, #4]
  CDC_local->FF_Enable=FF_Enable_SET;                   /*!< Set Initial state of AC FeedForward in Current Decoupling Control*/
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  CDC_local->Decoupling_Enable=Decoupling_Enable_SET;   /*!< Set Initial state of Decoupling compensator in Current Decoupling Control*/
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	78ba      	ldrb	r2, [r7, #2]
 8001cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  CDC_local->VDC_FF_Enable=VDC_FF_Enable_SET;           /*!< Set Initial state of DC FeedForward in Current Decoupling Control*/
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	787a      	ldrb	r2, [r7, #1]
 8001cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <DPC_LPCNTRL_PFC_Init>:
*
* @note Function valid for STM32G4xx microconroller family
*/
//void DPC_LPCNTRL_PFC_Init(PFC_CTRL_t *pPFC_CTRL,PFC_CTRL_State_TypeDef PFC_CTRL_State,uint16_t PFC_VDC_Ref_loc,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc);
void DPC_LPCNTRL_PFC_Init(PFC_CTRL_t *pPFC_CTRL_loc,PFC_CTRL_State_TypeDef PFC_CTRL_State,uint16_t PFC_VDC_Ref_loc,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	72fb      	strb	r3, [r7, #11]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	813b      	strh	r3, [r7, #8]
  uint16_t PFC_VDC_Ref_BITs_loc;                                                                                /// Local variable to pass Output voltage reference  (Expressed in BITs)
  PFC_VDC_Ref_BITs_loc=(uint16_t)(((float)PFC_VDC_Ref_loc*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);   /// (V_dc_ref [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias
 8001d1e:	893b      	ldrh	r3, [r7, #8]
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d40:	ee17 3a90 	vmov	r3, s15
 8001d44:	82fb      	strh	r3, [r7, #22]

  pPFC_CTRL_loc->PFC_VDC_Ref=PFC_VDC_Ref_loc;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	893a      	ldrh	r2, [r7, #8]
 8001d4a:	821a      	strh	r2, [r3, #16]
  pPFC_CTRL_loc->PFC_VDC_Ref_BITs=PFC_VDC_Ref_BITs_loc;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8afa      	ldrh	r2, [r7, #22]
 8001d50:	825a      	strh	r2, [r3, #18]
  pPFC_CTRL_loc->CDC_Reset=RESET;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
  pPFC_CTRL_loc->VdcCTRL_Reset=RESET;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	705a      	strb	r2, [r3, #1]
  pPFC_CTRL_loc->PFC_CTRL_State=PFC_CTRL_State;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	7afa      	ldrb	r2, [r7, #11]
 8001d62:	709a      	strb	r2, [r3, #2]
}
 8001d64:	bf00      	nop
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <FastSin>:
  * @retval SinTable: value of sin  
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    

float FastSin(float theta){
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t tempAdj;
  
    if (theta < 0.0f) theta += DOUBLE_PI;
 8001d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	d507      	bpl.n	8001d98 <FastSin+0x28>
 8001d88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d8c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001dfc <FastSin+0x8c>
 8001d90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d94:	edc7 7a01 	vstr	s15, [r7, #4]
    if (theta > DOUBLE_PI) theta -= DOUBLE_PI; 
 8001d98:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d9c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001dfc <FastSin+0x8c>
 8001da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	dd07      	ble.n	8001dba <FastSin+0x4a>
 8001daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dae:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001dfc <FastSin+0x8c>
 8001db2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001db6:	edc7 7a01 	vstr	s15, [r7, #4]
    
    tempAdj = (uint16_t) (Multiplier*theta);
 8001dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dbe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001e00 <FastSin+0x90>
 8001dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dca:	ee17 3a90 	vmov	r3, s15
 8001dce:	81fb      	strh	r3, [r7, #14]
    if(tempAdj >= LUT_SAMPLE ){
 8001dd0:	89fb      	ldrh	r3, [r7, #14]
 8001dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd6:	d302      	bcc.n	8001dde <FastSin+0x6e>
      tempAdj = LUT_SAMPLE-1;
 8001dd8:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001ddc:	81fb      	strh	r3, [r7, #14]
    }
  return SinTable[tempAdj] ;
 8001dde:	89fb      	ldrh	r3, [r7, #14]
 8001de0:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <FastSin+0x94>)
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	ee07 3a90 	vmov	s15, r3
} 
 8001dec:	eeb0 0a67 	vmov.f32	s0, s15
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40c90fdb 	.word	0x40c90fdb
 8001e00:	42a2f983 	.word	0x42a2f983
 8001e04:	0800d4b4 	.word	0x0800d4b4

08001e08 <FastCos>:
  * 
  * @retval SinTable: value of Cos  
  *
  * @note Function valid for STM32G4xx microconroller family  
  */      
float FastCos(float theta){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	ed87 0a01 	vstr	s0, [r7, #4]
  
    return FastSin(HALF_PI - theta);
 8001e12:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001e34 <FastCos+0x2c>
 8001e16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e22:	f7ff ffa5 	bl	8001d70 <FastSin>
 8001e26:	eef0 7a40 	vmov.f32	s15, s0
    }
 8001e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	3fc90fdb 	.word	0x3fc90fdb

08001e38 <Integral>:
*
* @retval integrator output value.
*
* @note Function valid for STM32G4xx microconroller family  
*/
float Integral(INTEGRATOR_STRUCT *pInteg, float Input) {
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	ed87 0a00 	vstr	s0, [r7]
  
  pInteg->Integral_in=Input;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	609a      	str	r2, [r3, #8]
  
  pInteg->Integral_prev=pInteg->Integralout;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	605a      	str	r2, [r3, #4]
  
  pInteg->Integralout=pInteg->Integral_prev+(pInteg->Integral_in*pInteg->Ts);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	edc3 7a03 	vstr	s15, [r3, #12]
  return(pInteg->Integralout);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	ee07 3a90 	vmov	s15, r3
}
 8001e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <DPC_MISC_Check_DCLoad>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

DPC_Load_Status_TypeDef DPC_MISC_Check_DCLoad(DPC_Load_TypeDef *DPC_Load_loc,DPC_Load_Limit_TypeDef DC_Load_Limit_sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub)
{
 8001e88:	b084      	sub	sp, #16
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b088      	sub	sp, #32
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  float I_min;
  int16_t I_max_int;
  int16_t I_min_int;


  DATA_VDC =  Read_Volt_DC(); 
 8001e9a:	f7fe feaf 	bl	8000bfc <Read_Volt_DC>
 8001e9e:	6138      	str	r0, [r7, #16]
  //DATA_IDC = Read_Curr_DC();
  
  VDC=DATA_VDC->Vdc_pos+DATA_VDC->Vdc_neg;
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	81fb      	strh	r3, [r7, #14]
  
  DPC_Load_Status_TypeDef Load_Status;
 


   if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phA){
 8001eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001eba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec2:	d502      	bpl.n	8001eca <DPC_MISC_Check_DCLoad+0x42>
 	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 8001ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	61fb      	str	r3, [r7, #28]
   }
   if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 8001eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ecc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ed0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001edc:	d502      	bpl.n	8001ee4 <DPC_MISC_Check_DCLoad+0x5c>
   	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 8001ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	61fb      	str	r3, [r7, #28]
     }
   if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 8001ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eea:	ed97 7a07 	vldr	s14, [r7, #28]
 8001eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	d502      	bpl.n	8001efe <DPC_MISC_Check_DCLoad+0x76>
   	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 8001ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	61fb      	str	r3, [r7, #28]
   }

   if (I_min > CURRENT_ADC_AC_IN_NORM_Sub->phA){
 8001efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f00:	edd3 7a00 	vldr	s15, [r3]
 8001f04:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	dd02      	ble.n	8001f18 <DPC_MISC_Check_DCLoad+0x90>
 	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 8001f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	61bb      	str	r3, [r7, #24]
   }
   if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 8001f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2a:	d502      	bpl.n	8001f32 <DPC_MISC_Check_DCLoad+0xaa>
 	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 8001f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	61bb      	str	r3, [r7, #24]
   }
   if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 8001f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f34:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f38:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	d502      	bpl.n	8001f4c <DPC_MISC_Check_DCLoad+0xc4>
 	I_min = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 8001f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
   }

   I_min_int = (int16_t) (I_min*10);
 8001f4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f5c:	ee17 3a90 	vmov	r3, s15
 8001f60:	81bb      	strh	r3, [r7, #12]
   I_max_int = (int16_t) (I_max*10);
 8001f62:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f66:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f72:	ee17 3a90 	vmov	r3, s15
 8001f76:	82fb      	strh	r3, [r7, #22]

   if (-I_min_int > I_max_int){
 8001f78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f7c:	425a      	negs	r2, r3
 8001f7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	dd03      	ble.n	8001f8e <DPC_MISC_Check_DCLoad+0x106>
 	  I_max_int= -I_min_int;
 8001f86:	89bb      	ldrh	r3, [r7, #12]
 8001f88:	425b      	negs	r3, r3
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	82fb      	strh	r3, [r7, #22]
   }

  
  if((DATA_VDC->Vdc_pos > DC_Load_Limit_sub.V_cap_Limit) || (DATA_VDC->Vdc_neg > DC_Load_Limit_sub.V_cap_Limit)){  
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d804      	bhi.n	8001fa2 <DPC_MISC_Check_DCLoad+0x11a>
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d907      	bls.n	8001fb2 <DPC_MISC_Check_DCLoad+0x12a>
    DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 8001fa2:	f000 ff87 	bl	8002eb4 <DPC_PWM_OutDisable>
//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
    Load_Status=OVERVOLTAGE_CAP;
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	757b      	strb	r3, [r7, #21]
    DPC_FLT_Faulterror_Set(FAULT_OVC);    
 8001faa:	2004      	movs	r0, #4
 8001fac:	f7ff f826 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 8001fb0:	e049      	b.n	8002046 <DPC_MISC_Check_DCLoad+0x1be>
  }
  else if (VDC>DC_Load_Limit_sub.V_dc_Limit){
 8001fb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001fb4:	89fa      	ldrh	r2, [r7, #14]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d907      	bls.n	8001fca <DPC_MISC_Check_DCLoad+0x142>
    DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 8001fba:	f000 ff7b 	bl	8002eb4 <DPC_PWM_OutDisable>
//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
    Load_Status=OVERVOLTAGE_LOAD;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	757b      	strb	r3, [r7, #21]
    DPC_FLT_Faulterror_Set(FAULT_OVL);
 8001fc2:	2002      	movs	r0, #2
 8001fc4:	f7ff f81a 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 8001fc8:	e03d      	b.n	8002046 <DPC_MISC_Check_DCLoad+0x1be>
  }
  else {
    //if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_Over_load_Threshold)
    if(I_max_int>=DC_Load_Limit_sub.I_Over_load_Threshold)
 8001fca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	db05      	blt.n	8001fe0 <DPC_MISC_Check_DCLoad+0x158>
    {
      Load_Status=OVERCURRENT_LOAD;
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	757b      	strb	r3, [r7, #21]
      DPC_FLT_Faulterror_Set(FAULT_OCL);       
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7ff f80f 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 8001fde:	e032      	b.n	8002046 <DPC_MISC_Check_DCLoad+0x1be>
    }
    //else if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_Low_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==LOW_LOAD || DPC_Load_loc->DPC_Load_Status==NO_LOAD))
    else if(I_max_int>=DC_Load_Limit_sub.I_Low_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==LOW_LOAD || DPC_Load_loc->DPC_Load_Status==NO_LOAD))
 8001fe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fe4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	db0a      	blt.n	8002000 <DPC_MISC_Check_DCLoad+0x178>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d003      	beq.n	8001ffa <DPC_MISC_Check_DCLoad+0x172>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d102      	bne.n	8002000 <DPC_MISC_Check_DCLoad+0x178>
    {
      Load_Status=ON_LOAD;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	757b      	strb	r3, [r7, #21]
 8001ffe:	e022      	b.n	8002046 <DPC_MISC_Check_DCLoad+0x1be>
    }
    //else if(DATA_IDC->IDC_adc<=DC_Load_Limit_sub.I_Low_load_Min_Threshold && (DPC_Load_loc->DPC_Load_Status==ON_LOAD))
    else if(I_max_int<=DC_Load_Limit_sub.I_Low_load_Min_Threshold && (DPC_Load_loc->DPC_Load_Status==ON_LOAD))
 8002000:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002004:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002006:	4293      	cmp	r3, r2
 8002008:	dc06      	bgt.n	8002018 <DPC_MISC_Check_DCLoad+0x190>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d102      	bne.n	8002018 <DPC_MISC_Check_DCLoad+0x190>
    {
      Load_Status=LOW_LOAD;
 8002012:	2301      	movs	r3, #1
 8002014:	757b      	strb	r3, [r7, #21]
 8002016:	e016      	b.n	8002046 <DPC_MISC_Check_DCLoad+0x1be>
    }
    //else if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_No_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==NO_LOAD))
    else if(I_max_int>=DC_Load_Limit_sub.I_No_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==NO_LOAD))
 8002018:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800201c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800201e:	4293      	cmp	r3, r2
 8002020:	db06      	blt.n	8002030 <DPC_MISC_Check_DCLoad+0x1a8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <DPC_MISC_Check_DCLoad+0x1a8>
    {
      Load_Status=LOW_LOAD;
 800202a:	2301      	movs	r3, #1
 800202c:	757b      	strb	r3, [r7, #21]
 800202e:	e00a      	b.n	8002046 <DPC_MISC_Check_DCLoad+0x1be>
    }
    //else if(DATA_IDC->IDC_adc<=DC_Load_Limit_sub.I_No_load_Min_Threshold)
    else if(I_max_int<=DC_Load_Limit_sub.I_No_load_Min_Threshold)
 8002030:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002034:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002036:	4293      	cmp	r3, r2
 8002038:	dc02      	bgt.n	8002040 <DPC_MISC_Check_DCLoad+0x1b8>
    {
      Load_Status=NO_LOAD;
 800203a:	2300      	movs	r3, #0
 800203c:	757b      	strb	r3, [r7, #21]
 800203e:	e002      	b.n	8002046 <DPC_MISC_Check_DCLoad+0x1be>
    }
    else
    {
      Load_Status=DPC_Load_loc->DPC_Load_Status;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	757b      	strb	r3, [r7, #21]
    }
  }
  
  DPC_Load_loc->DPC_Load_Status=Load_Status;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7d7a      	ldrb	r2, [r7, #21]
 800204a:	701a      	strb	r2, [r3, #0]
  return Load_Status;
 800204c:	7d7b      	ldrb	r3, [r7, #21]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002058:	b004      	add	sp, #16
 800205a:	4770      	bx	lr
 800205c:	0000      	movs	r0, r0
	...

08002060 <DPC_MISC_DCLoad_Init>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

void DPC_MISC_DCLoad_Init(DPC_Load_Limit_TypeDef *DC_Load_Limit_sub,uint16_t V_dc_Limit_VOLT,uint16_t V_cap_Limit_VOLT,float I_dc_NO_LOAD_Limit_AMP,float I_dc_LOW_LOAD_Limit_AMP,float I_dc_OVER_LOAD_Limit_AMP,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b08d      	sub	sp, #52	; 0x34
 8002064:	af00      	add	r7, sp, #0
 8002066:	6178      	str	r0, [r7, #20]
 8002068:	ed87 0a03 	vstr	s0, [r7, #12]
 800206c:	edc7 0a02 	vstr	s1, [r7, #8]
 8002070:	ed87 1a01 	vstr	s2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	460b      	mov	r3, r1
 8002078:	827b      	strh	r3, [r7, #18]
 800207a:	4613      	mov	r3, r2
 800207c:	823b      	strh	r3, [r7, #16]
  uint16_t I_dc_LOW_LOAD_Min_Limit_loc;                                                                 /// Local variable to pass Output current Min theshold (Expressed in AMPs) to determinate Light Load Condition  
  uint16_t I_dc_OVER_LOAD_Limit_loc;                                                                    /// Local variable to pass Output current theshold (Expressed in AMPs)to determinate Over Load Condition
  

  
  V_cap_Limit_loc=(uint16_t)(((float)V_cap_Limit_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);                                        /// (Vcap_limit_Threshold [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias 
 800207e:	8a3b      	ldrh	r3, [r7, #16]
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	edd3 7a06 	vldr	s15, [r3, #24]
 800208e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	edd3 7a08 	vldr	s15, [r3, #32]
 8002098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a0:	ee17 3a90 	vmov	r3, s15
 80020a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  V_dc_Limit_loc=(uint16_t)(((float)V_dc_Limit_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);                                          /// (Vdc_limit_Threshold [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias
 80020a6:	8a7b      	ldrh	r3, [r7, #18]
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80020b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80020c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c8:	ee17 3a90 	vmov	r3, s15
 80020cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
//  I_dc_NO_LOAD_Limit_loc=(uint16_t)(((float)I_dc_NO_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                           /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
//  I_dc_NO_LOAD_Delta_Limit_loc=(uint16_t)((I_dc_NO_LOAD_Limit_loc - DPC_ADC_Conf_loc->B_Idc)*((float)DPC_NO_LOAD_DELTA_CURR*0.01));                     ///
//  I_dc_NO_LOAD_Max_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc + I_dc_NO_LOAD_Delta_Limit_loc);                                                 ///
//  I_dc_NO_LOAD_Min_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc - I_dc_NO_LOAD_Delta_Limit_loc);

  I_dc_NO_LOAD_Limit_loc=(uint16_t)(float)I_dc_NO_LOAD_Limit_AMP;                           /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
 80020ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80020d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d6:	ee17 3a90 	vmov	r3, s15
 80020da:	857b      	strh	r3, [r7, #42]	; 0x2a
  I_dc_NO_LOAD_Delta_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc)*((float)DPC_NO_LOAD_DELTA_CURR*0.01);                     ///
 80020dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f9ec 	bl	80004bc <__aeabi_i2d>
 80020e4:	a336      	add	r3, pc, #216	; (adr r3, 80021c0 <DPC_MISC_DCLoad_Init+0x160>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	f7fe fa51 	bl	8000590 <__aeabi_dmul>
 80020ee:	4603      	mov	r3, r0
 80020f0:	460c      	mov	r4, r1
 80020f2:	4618      	mov	r0, r3
 80020f4:	4621      	mov	r1, r4
 80020f6:	f7fe fc5d 	bl	80009b4 <__aeabi_d2uiz>
 80020fa:	4603      	mov	r3, r0
 80020fc:	853b      	strh	r3, [r7, #40]	; 0x28
  I_dc_NO_LOAD_Max_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc + I_dc_NO_LOAD_Delta_Limit_loc);                                                 /// 
 80020fe:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002100:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002102:	4413      	add	r3, r2
 8002104:	84fb      	strh	r3, [r7, #38]	; 0x26
  I_dc_NO_LOAD_Min_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc - I_dc_NO_LOAD_Delta_Limit_loc);
 8002106:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002108:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	84bb      	strh	r3, [r7, #36]	; 0x24
//  I_dc_LOW_LOAD_Limit_loc=(uint16_t)(((float)I_dc_LOW_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                         /// (IDC_Light_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
//  I_dc_LOW_LOAD_Delta_Limit_loc=(uint16_t)((I_dc_LOW_LOAD_Limit_loc - DPC_ADC_Conf_loc->B_Idc)*((float)DPC_LOW_LOAD_DELTA_CURR*0.01));                   ///
//  I_dc_LOW_LOAD_Max_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc + I_dc_LOW_LOAD_Delta_Limit_loc);                                               ///
//  I_dc_LOW_LOAD_Min_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc - I_dc_LOW_LOAD_Delta_Limit_loc);

  I_dc_LOW_LOAD_Limit_loc=(uint16_t)((float)I_dc_LOW_LOAD_Limit_AMP);                         /// (IDC_Light_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
 800210e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002116:	ee17 3a90 	vmov	r3, s15
 800211a:	847b      	strh	r3, [r7, #34]	; 0x22
  I_dc_LOW_LOAD_Delta_Limit_loc=(uint16_t)((I_dc_LOW_LOAD_Limit_loc)*(float)DPC_LOW_LOAD_DELTA_CURR*0.01);                   ///
 800211c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002126:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800212a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800212e:	ee17 0a90 	vmov	r0, s15
 8002132:	f7fe f9d5 	bl	80004e0 <__aeabi_f2d>
 8002136:	a324      	add	r3, pc, #144	; (adr r3, 80021c8 <DPC_MISC_DCLoad_Init+0x168>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f7fe fa28 	bl	8000590 <__aeabi_dmul>
 8002140:	4603      	mov	r3, r0
 8002142:	460c      	mov	r4, r1
 8002144:	4618      	mov	r0, r3
 8002146:	4621      	mov	r1, r4
 8002148:	f7fe fc34 	bl	80009b4 <__aeabi_d2uiz>
 800214c:	4603      	mov	r3, r0
 800214e:	843b      	strh	r3, [r7, #32]
  I_dc_LOW_LOAD_Max_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc + I_dc_LOW_LOAD_Delta_Limit_loc);                                               /// 
 8002150:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002152:	8c3b      	ldrh	r3, [r7, #32]
 8002154:	4413      	add	r3, r2
 8002156:	83fb      	strh	r3, [r7, #30]
  I_dc_LOW_LOAD_Min_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc - I_dc_LOW_LOAD_Delta_Limit_loc); ///
 8002158:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800215a:	8c3b      	ldrh	r3, [r7, #32]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	83bb      	strh	r3, [r7, #28]

  I_dc_OVER_LOAD_Limit_loc=(uint16_t)(((float)I_dc_OVER_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                       /// (IDC_Over_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias   
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002166:	edd7 7a01 	vldr	s15, [r7, #4]
 800216a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800217c:	ee17 3a90 	vmov	r3, s15
 8002180:	837b      	strh	r3, [r7, #26]
  
  DC_Load_Limit_sub->V_cap_Limit=V_cap_Limit_loc;  
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002186:	801a      	strh	r2, [r3, #0]
  DC_Load_Limit_sub->V_dc_Limit=V_dc_Limit_loc;  
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800218c:	821a      	strh	r2, [r3, #16]
  DC_Load_Limit_sub->I_No_load_Threshold=I_dc_NO_LOAD_Limit_loc;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002192:	805a      	strh	r2, [r3, #2]
  DC_Load_Limit_sub->I_No_load_Max_Threshold=I_dc_NO_LOAD_Max_Limit_loc;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002198:	809a      	strh	r2, [r3, #4]
  DC_Load_Limit_sub->I_No_load_Min_Threshold=I_dc_NO_LOAD_Min_Limit_loc;  
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800219e:	80da      	strh	r2, [r3, #6]
  DC_Load_Limit_sub->I_Low_load_Threshold=I_dc_LOW_LOAD_Limit_loc;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80021a4:	811a      	strh	r2, [r3, #8]
  DC_Load_Limit_sub->I_Low_load_Max_Threshold=I_dc_LOW_LOAD_Max_Limit_loc;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	8bfa      	ldrh	r2, [r7, #30]
 80021aa:	815a      	strh	r2, [r3, #10]
  DC_Load_Limit_sub->I_Low_load_Min_Threshold=I_dc_LOW_LOAD_Min_Limit_loc;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	8bba      	ldrh	r2, [r7, #28]
 80021b0:	819a      	strh	r2, [r3, #12]
  DC_Load_Limit_sub->I_Over_load_Threshold=I_dc_OVER_LOAD_Limit_loc;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	8b7a      	ldrh	r2, [r7, #26]
 80021b6:	81da      	strh	r2, [r3, #14]
  
  
}
 80021b8:	bf00      	nop
 80021ba:	3734      	adds	r7, #52	; 0x34
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd90      	pop	{r4, r7, pc}
 80021c0:	9999999a 	.word	0x9999999a
 80021c4:	3fc99999 	.word	0x3fc99999
 80021c8:	47ae147b 	.word	0x47ae147b
 80021cc:	3f847ae1 	.word	0x3f847ae1

080021d0 <DPC_MISC_ACSource_Init>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

void DPC_MISC_ACSource_Init(DPC_Source_Limit_TypeDef *AC_Source_Limit_sub,uint16_t V_ac_Limit_VOLT,uint16_t V_ac_UV_Limit_VOLT,uint16_t V_ac_UVLO_Limit_VOLT,uint16_t V_ac_Low_Limit_VOLT,uint16_t I_ac_Limit_AMP,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b08b      	sub	sp, #44	; 0x2c
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	4608      	mov	r0, r1
 80021da:	4611      	mov	r1, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	817b      	strh	r3, [r7, #10]
 80021e2:	460b      	mov	r3, r1
 80021e4:	813b      	strh	r3, [r7, #8]
 80021e6:	4613      	mov	r3, r2
 80021e8:	80fb      	strh	r3, [r7, #6]
  uint16_t V_ac_neg_Low_Limit_loc;                                                                                                      /*!< >*/
  
  uint16_t I_ac_pos_Limit_loc;                                                                                                          /*!< >*/
  uint16_t I_ac_neg_Limit_loc;                                                                                                          /*!< >*/
   
  V_ac_pos_Limit_loc=(uint16_t)(((float)V_ac_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                              /*!< >*/
 80021ea:	897b      	ldrh	r3, [r7, #10]
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002200:	edd3 7a02 	vldr	s15, [r3, #8]
 8002204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800220c:	ee17 3a90 	vmov	r3, s15
 8002210:	84fb      	strh	r3, [r7, #38]	; 0x26
  V_ac_neg_Limit_loc=(uint16_t)(((float)-V_ac_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                             /*!< >*/
 8002212:	897b      	ldrh	r3, [r7, #10]
 8002214:	425b      	negs	r3, r3
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222a:	edd3 7a02 	vldr	s15, [r3, #8]
 800222e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002236:	ee17 3a90 	vmov	r3, s15
 800223a:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  V_ac_pos_UVLO_Limit_loc=(uint16_t)(((float)V_ac_UVLO_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                    /*!< >*/
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	edd3 7a02 	vldr	s15, [r3, #8]
 8002256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800225e:	ee17 3a90 	vmov	r3, s15
 8002262:	847b      	strh	r3, [r7, #34]	; 0x22
  V_ac_neg_UVLO_Limit_loc=(uint16_t)(((float)-V_ac_UVLO_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                   /*!< >*/
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	425b      	negs	r3, r3
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002288:	ee17 3a90 	vmov	r3, s15
 800228c:	843b      	strh	r3, [r7, #32]
  
  V_ac_pos_UV_Limit_loc=(uint16_t)(((float)V_ac_UV_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                        /*!< >*/
 800228e:	893b      	ldrh	r3, [r7, #8]
 8002290:	ee07 3a90 	vmov	s15, r3
 8002294:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80022a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b0:	ee17 3a90 	vmov	r3, s15
 80022b4:	83fb      	strh	r3, [r7, #30]
  V_ac_neg_UV_Limit_loc=(uint16_t)(((float)-V_ac_UV_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                       /*!< >*/
 80022b6:	893b      	ldrh	r3, [r7, #8]
 80022b8:	425b      	negs	r3, r3
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80022d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022da:	ee17 3a90 	vmov	r3, s15
 80022de:	83bb      	strh	r3, [r7, #28]
  
  V_ac_pos_Low_Limit_loc=(uint16_t)(((float)V_ac_Low_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                      /*!< >*/
 80022e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80022fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002302:	ee17 3a90 	vmov	r3, s15
 8002306:	837b      	strh	r3, [r7, #26]
  V_ac_neg_Low_Limit_loc=(uint16_t)(((float)-V_ac_Low_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                     /*!< >*/
 8002308:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800230a:	425b      	negs	r3, r3
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	edd3 7a02 	vldr	s15, [r3, #8]
 8002324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800232c:	ee17 3a90 	vmov	r3, s15
 8002330:	833b      	strh	r3, [r7, #24]
  
  I_ac_pos_Limit_loc=(uint16_t)(((float)I_ac_Limit_AMP*DPC_ADC_Conf_loc->G_Iac)+DPC_ADC_Conf_loc->B_Iac);                               /*!< >*/
 8002332:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002334:	ee07 3a90 	vmov	s15, r3
 8002338:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	edd3 7a05 	vldr	s15, [r3, #20]
 800234c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002354:	ee17 3a90 	vmov	r3, s15
 8002358:	82fb      	strh	r3, [r7, #22]
  I_ac_neg_Limit_loc=(uint16_t)(((float)-I_ac_Limit_AMP*DPC_ADC_Conf_loc->G_Iac)+DPC_ADC_Conf_loc->B_Iac);                              /*!< >*/
 800235a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800235c:	425b      	negs	r3, r3
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	edd3 7a03 	vldr	s15, [r3, #12]
 800236c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002372:	edd3 7a05 	vldr	s15, [r3, #20]
 8002376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800237e:	ee17 3a90 	vmov	r3, s15
 8002382:	82bb      	strh	r3, [r7, #20]
  
  
  AC_Source_Limit_sub->V_ac_pos_Limit=V_ac_pos_Limit_loc;                                                                               /*!< >*/
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002388:	801a      	strh	r2, [r3, #0]
  AC_Source_Limit_sub->V_ac_neg_Limit=V_ac_neg_Limit_loc;                                                                               /*!< >*/
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800238e:	805a      	strh	r2, [r3, #2]
  
  AC_Source_Limit_sub->V_ac_pos_UVLO_Limit=V_ac_pos_UVLO_Limit_loc;                                                                     /*!< >*/
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002394:	809a      	strh	r2, [r3, #4]
  AC_Source_Limit_sub->V_ac_neg_UVLO_Limit=V_ac_neg_UVLO_Limit_loc;                                                                     /*!< >*/  
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8c3a      	ldrh	r2, [r7, #32]
 800239a:	80da      	strh	r2, [r3, #6]
    
  AC_Source_Limit_sub->V_ac_pos_UV_Limit=V_ac_pos_UV_Limit_loc;                                                                         /*!< >*/
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8bfa      	ldrh	r2, [r7, #30]
 80023a0:	811a      	strh	r2, [r3, #8]
  AC_Source_Limit_sub->V_ac_neg_UV_Limit=V_ac_neg_UV_Limit_loc;                                                                         /*!< >*/
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8bba      	ldrh	r2, [r7, #28]
 80023a6:	815a      	strh	r2, [r3, #10]
    
  AC_Source_Limit_sub->V_ac_pos_Low_Limit=V_ac_pos_Low_Limit_loc;                                                                       /*!< >*/
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8b7a      	ldrh	r2, [r7, #26]
 80023ac:	819a      	strh	r2, [r3, #12]
  AC_Source_Limit_sub->V_ac_neg_Low_Limit=V_ac_neg_Low_Limit_loc;                                                                       /*!< >*/
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8b3a      	ldrh	r2, [r7, #24]
 80023b2:	81da      	strh	r2, [r3, #14]
  
  AC_Source_Limit_sub->I_ac_pos_Limit=I_ac_pos_Limit_loc;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8afa      	ldrh	r2, [r7, #22]
 80023b8:	821a      	strh	r2, [r3, #16]
  AC_Source_Limit_sub->I_ac_neg_Limit=I_ac_neg_Limit_loc;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8aba      	ldrh	r2, [r7, #20]
 80023be:	825a      	strh	r2, [r3, #18]
  
  
}
 80023c0:	bf00      	nop
 80023c2:	372c      	adds	r7, #44	; 0x2c
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <DPC_MISC_APPL_Timer_Init>:
* @retval None
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/
void DPC_MISC_APPL_Timer_Init(TIM_HandleTypeDef AppTIM, uint32_t  APPL_Freq_Desidered)
{
 80023cc:	b084      	sub	sp, #16
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	f107 0c18 	add.w	ip, r7, #24
 80023d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

  uint32_t Timers_Clock;                                                                ///
  uint32_t Timers_PSC;                                                                  ///
  uint32_t Timers_ClockPSCed;                                                           ///

  Timers_PSC=(uint32_t)(READ_REG(AppTIM.Instance->PSC));                                ///
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	60fb      	str	r3, [r7, #12]
  Timers_Clock=HAL_RCC_GetPCLK2Freq();                                                  ///  
 80023e2:	f009 fe87 	bl	800c0f4 <HAL_RCC_GetPCLK2Freq>
 80023e6:	60b8      	str	r0, [r7, #8]
  
  Timers_ClockPSCed=(Timers_Clock/(Timers_PSC+1));                                      ///
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3301      	adds	r3, #1
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	607b      	str	r3, [r7, #4]
  
  AppTIM.Init.Period = ((Timers_ClockPSCed/APPL_Freq_Desidered) - 1);                   ///
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_TIM_Base_Init(&AppTIM) != HAL_OK){Error_Handler();}                           ///Init Task Timer  
 8002400:	f107 0018 	add.w	r0, r7, #24
 8002404:	f00a f953 	bl	800c6ae <HAL_TIM_Base_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <DPC_MISC_APPL_Timer_Init+0x46>
 800240e:	f003 fbf3 	bl	8005bf8 <Error_Handler>
 
} 
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800241c:	b004      	add	sp, #16
 800241e:	4770      	bx	lr

08002420 <DPC_MISC_Appl_Timer_Start>:




void DPC_MISC_Appl_Timer_Start(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&APPL_Tim1);  //Inizializza il Timer con IT che gestisce l'aggiornamento del duty
 8002424:	4807      	ldr	r0, [pc, #28]	; (8002444 <DPC_MISC_Appl_Timer_Start+0x24>)
 8002426:	f00a f999 	bl	800c75c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&APPL_Tim3);  //Inizializza il Timer con IT che gestisce l'aggiornamento del duty
 800242a:	4807      	ldr	r0, [pc, #28]	; (8002448 <DPC_MISC_Appl_Timer_Start+0x28>)
 800242c:	f00a f996 	bl	800c75c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&APPL_Tim2);  //Inizializza il Timer con IT che gestisce l'aggiornamento ddel display 
 8002430:	4806      	ldr	r0, [pc, #24]	; (800244c <DPC_MISC_Appl_Timer_Start+0x2c>)
 8002432:	f00a f993 	bl	800c75c <HAL_TIM_Base_Start_IT>
    
  HAL_TIM_PWM_Start(&APPL_Tim4, TIM_CHANNEL_1);   
 8002436:	2100      	movs	r1, #0
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <DPC_MISC_Appl_Timer_Start+0x30>)
 800243a:	f00a fa07 	bl	800c84c <HAL_TIM_PWM_Start>
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	2000c34c 	.word	0x2000c34c
 8002448:	2000c300 	.word	0x2000c300
 800244c:	2000c2b4 	.word	0x2000c2b4
 8002450:	2000c268 	.word	0x2000c268

08002454 <DPC_MISC_BLED_Set>:
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/



void DPC_MISC_BLED_Set(TIM_HandleTypeDef *htim_bled,uint32_t TIM_CHANNEL_BLED,DPC_BLED_TypeDef State_BLED){
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	4613      	mov	r3, r2
 8002460:	71fb      	strb	r3, [r7, #7]
//    break;
//  case BLED_Wait:
//    __HAL_TIM_SET_COMPARE(htim_bled, TIM_CHANNEL_BLED, 0xC000);  // 0xB000 = Orange 0x0000 = Red  0xFFFF = Green//      HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
//    break;
//  }
	  switch ( State_BLED){
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d844      	bhi.n	80024f2 <DPC_MISC_BLED_Set+0x9e>
 8002468:	a201      	add	r2, pc, #4	; (adr r2, 8002470 <DPC_MISC_BLED_Set+0x1c>)
 800246a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246e:	bf00      	nop
 8002470:	080024f1 	.word	0x080024f1
 8002474:	080024f3 	.word	0x080024f3
 8002478:	08002489 	.word	0x08002489
 800247c:	080024a3 	.word	0x080024a3
 8002480:	080024bd 	.word	0x080024bd
 8002484:	080024d7 	.word	0x080024d7
//	  case BLED_StartUp_inrush:
//	    __HAL_TIM_SET_COMPARE(htim_bled, TIM_CHANNEL_BLED, 0xE000);  // 0xB000 = Orange 0x0000 = Red  0xFFFF = Green//      HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
//	    break;
	  case BLED_Fault:
//	    HAL_Delay(600);
	    HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_SET);
 8002488:	2201      	movs	r2, #1
 800248a:	2140      	movs	r1, #64	; 0x40
 800248c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002490:	f006 fb46 	bl	8008b20 <HAL_GPIO_WritePin>
//	    HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin, GPIO_PIN_RESET);
//	    HAL_Delay(600);
//	    HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	2110      	movs	r1, #16
 8002498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800249c:	f006 fb40 	bl	8008b20 <HAL_GPIO_WritePin>
	    break;
 80024a0:	e027      	b.n	80024f2 <DPC_MISC_BLED_Set+0x9e>
	  case BLED_Error:
//		  HAL_Delay(100);
		  HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_SET);
 80024a2:	2201      	movs	r2, #1
 80024a4:	2140      	movs	r1, #64	; 0x40
 80024a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024aa:	f006 fb39 	bl	8008b20 <HAL_GPIO_WritePin>
//		  HAL_Delay(100);
		  HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin, GPIO_PIN_SET);
 80024ae:	2201      	movs	r2, #1
 80024b0:	2110      	movs	r1, #16
 80024b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b6:	f006 fb33 	bl	8008b20 <HAL_GPIO_WritePin>
		break;
 80024ba:	e01a      	b.n	80024f2 <DPC_MISC_BLED_Set+0x9e>
	  case BLED_Run:
		HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_SET);   // 0xB000 = Orange 0x0000 = Red  0xFFFF = Green//      HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
 80024bc:	2201      	movs	r2, #1
 80024be:	2140      	movs	r1, #64	; 0x40
 80024c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c4:	f006 fb2c 	bl	8008b20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin, GPIO_PIN_RESET);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2110      	movs	r1, #16
 80024cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024d0:	f006 fb26 	bl	8008b20 <HAL_GPIO_WritePin>
		break;
 80024d4:	e00d      	b.n	80024f2 <DPC_MISC_BLED_Set+0x9e>
	  case BLED_StartUp_burst:
		  HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_RESET);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2140      	movs	r1, #64	; 0x40
 80024da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024de:	f006 fb1f 	bl	8008b20 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin, GPIO_PIN_SET);
 80024e2:	2201      	movs	r2, #1
 80024e4:	2110      	movs	r1, #16
 80024e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ea:	f006 fb19 	bl	8008b20 <HAL_GPIO_WritePin>
		  break;
 80024ee:	e000      	b.n	80024f2 <DPC_MISC_BLED_Set+0x9e>
		  break;
 80024f0:	bf00      	nop
//	    break;
//	  case BLED_Wait:
//	    __HAL_TIM_SET_COMPARE(htim_bled, TIM_CHANNEL_BLED, 0xC000);  // 0xB000 = Orange 0x0000 = Red  0xFFFF = Green//      HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
//	    break;
	  }
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop

080024fc <DPC_MISC_CHECK_AC_SOURCE>:
* @retval void
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

DPC_Source_Status_TypeDef DPC_MISC_CHECK_AC_SOURCE(DPC_Source_TypeDef  *AC_Source_sub,DPC_Source_Limit_TypeDef AC_Source_Limit_sub,float Theta){
 80024fc:	b084      	sub	sp, #16
 80024fe:	b580      	push	{r7, lr}
 8002500:	b08c      	sub	sp, #48	; 0x30
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800250a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800250e:	ed87 0a00 	vstr	s0, [r7]
  
  DPC_Source_Status_TypeDef Status_Source = AC_Source_sub->Status_Source; 
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7a1b      	ldrb	r3, [r3, #8]
 8002516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  float Theta_start = 0.08;                                                                             /*!< Approximation of 2Pi to define the SIN near to zero crossing>*/
 800251a:	4b7b      	ldr	r3, [pc, #492]	; (8002708 <DPC_MISC_CHECK_AC_SOURCE+0x20c>)
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
  float Theta_stop = 6.20;                                                                              /*!< Approximation of 2Pi to define the SIN near to zero crossing>*/
 800251e:	4b7b      	ldr	r3, [pc, #492]	; (800270c <DPC_MISC_CHECK_AC_SOURCE+0x210>)
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint16_t I_ac_pos_Limit_local;                                                                        /*!< >*/
  uint16_t I_ac_neg_Limit_local;                                                                        /*!< >*/
  
  
  V_ac_pos_Limit_local=AC_Source_Limit_sub.V_ac_pos_Limit;                                              /*!< >*/
 8002522:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002524:	847b      	strh	r3, [r7, #34]	; 0x22
  V_ac_neg_Limit_local=AC_Source_Limit_sub.V_ac_neg_Limit;                                              /*!< >*/
 8002526:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002528:	843b      	strh	r3, [r7, #32]
  
  V_ac_pos_UVLO_Limit_local=AC_Source_Limit_sub.V_ac_pos_UVLO_Limit;                                    /*!< >*/
 800252a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800252e:	83fb      	strh	r3, [r7, #30]
  V_ac_neg_UVLO_Limit_local=AC_Source_Limit_sub.V_ac_neg_UVLO_Limit;                                    /*!< >*/
 8002530:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002534:	83bb      	strh	r3, [r7, #28]
  
  V_ac_pos_UV_Limit_local=AC_Source_Limit_sub.V_ac_pos_UV_Limit;                                        /*!< >*/
 8002536:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800253a:	837b      	strh	r3, [r7, #26]
  V_ac_neg_UV_Limit_local=AC_Source_Limit_sub.V_ac_neg_UV_Limit;                                        /*!< >*/
 800253c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002540:	833b      	strh	r3, [r7, #24]
  
  V_ac_pos_Low_Limit_local=AC_Source_Limit_sub.V_ac_pos_Low_Limit;                                      /*!< >*/
 8002542:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002546:	82fb      	strh	r3, [r7, #22]
  V_ac_neg_Low_Limit_local=AC_Source_Limit_sub.V_ac_neg_Low_Limit;                                      /*!< >*/
 8002548:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800254c:	82bb      	strh	r3, [r7, #20]
  
  I_ac_pos_Limit_local=AC_Source_Limit_sub.I_ac_pos_Limit;                                              /*!< >*/
 800254e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002552:	827b      	strh	r3, [r7, #18]
  I_ac_neg_Limit_local=AC_Source_Limit_sub.I_ac_neg_Limit;                                              /*!< >*/
 8002554:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002558:	823b      	strh	r3, [r7, #16]
  
  
  
  DATA_VAC = Read_GRID();                                                                               /*!< >*/
 800255a:	f7fe fb3b 	bl	8000bd4 <Read_GRID>
 800255e:	60f8      	str	r0, [r7, #12]
  DATA_IAC = Read_Curr_GRID();                                                                          /*!< >*/
 8002560:	f7fe fb42 	bl	8000be8 <Read_Curr_GRID>
 8002564:	60b8      	str	r0, [r7, #8]
//    Status_Source=OVERVOLTAGE_SOURCE;
//    DPC_FLT_Faulterror_Set(FAULT_OVS);  
//  }
//  else{  
    
    if(Theta<=Theta_start){    
 8002566:	ed97 7a00 	vldr	s14, [r7]
 800256a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800256e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002576:	d812      	bhi.n	800259e <DPC_MISC_CHECK_AC_SOURCE+0xa2>
      /// Reset pk max & pk min of AC Voltage    
      AC_Source_sub->V_ac_pk_pos_local=0;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	801a      	strh	r2, [r3, #0]
      AC_Source_sub->V_ac_pk_neg_local=1<<12;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002584:	805a      	strh	r2, [r3, #2]
      /// Reset pk max & pk min of AC Current  
      AC_Source_sub->I_ac_pk_pos_local=0;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	809a      	strh	r2, [r3, #4]
      AC_Source_sub->I_ac_pk_neg_local=1<<12;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002592:	80da      	strh	r2, [r3, #6]
      Status_Source=AC_Source_sub->Status_Source;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7a1b      	ldrb	r3, [r3, #8]
 8002598:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800259c:	e0a6      	b.n	80026ec <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
    }
    else if(Theta>Theta_start && Theta<Theta_stop){
 800259e:	ed97 7a00 	vldr	s14, [r7]
 80025a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	dd39      	ble.n	8002624 <DPC_MISC_CHECK_AC_SOURCE+0x128>
 80025b0:	ed97 7a00 	vldr	s14, [r7]
 80025b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c0:	d530      	bpl.n	8002624 <DPC_MISC_CHECK_AC_SOURCE+0x128>
      /// Determinate pk max & pk min of AC Voltage
      if(AC_Source_sub->V_ac_pk_pos_local<DATA_VAC->phA){
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d204      	bcs.n	80025da <DPC_MISC_CHECK_AC_SOURCE+0xde>
        AC_Source_sub->V_ac_pk_pos_local=DATA_VAC->phA;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	801a      	strh	r2, [r3, #0]
      }
      if(AC_Source_sub->V_ac_pk_neg_local>DATA_VAC->phA){
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	885b      	ldrh	r3, [r3, #2]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d904      	bls.n	80025f2 <DPC_MISC_CHECK_AC_SOURCE+0xf6>
        AC_Source_sub->V_ac_pk_neg_local=DATA_VAC->phA;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	805a      	strh	r2, [r3, #2]
      }
      /// Determinate pk max & pk min of AC Current
      
      if(AC_Source_sub->I_ac_pk_pos_local<DATA_IAC->phA){
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	889b      	ldrh	r3, [r3, #4]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d204      	bcs.n	800260a <DPC_MISC_CHECK_AC_SOURCE+0x10e>
        AC_Source_sub->I_ac_pk_pos_local=DATA_IAC->phA;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	b29a      	uxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	809a      	strh	r2, [r3, #4]
      }
      if(AC_Source_sub->I_ac_pk_neg_local>DATA_IAC->phA){
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	88db      	ldrh	r3, [r3, #6]
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d969      	bls.n	80026ec <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        AC_Source_sub->I_ac_pk_neg_local=DATA_IAC->phA;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	80da      	strh	r2, [r3, #6]
      if(AC_Source_sub->I_ac_pk_neg_local>DATA_IAC->phA){
 8002622:	e063      	b.n	80026ec <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
      }
      
    }
    else if(Theta>=Theta_stop){
 8002624:	ed97 7a00 	vldr	s14, [r7]
 8002628:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800262c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002634:	db5a      	blt.n	80026ec <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
      
      if((AC_Source_sub->V_ac_pk_pos_local == 0) || (AC_Source_sub->V_ac_pk_neg_local == 1<<12)){ 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <DPC_MISC_CHECK_AC_SOURCE+0x14c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	885b      	ldrh	r3, [r3, #2]
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002646:	d107      	bne.n	8002658 <DPC_MISC_CHECK_AC_SOURCE+0x15c>
    	  if (Status_Source!=OVERCURRENT_SOURCE){
 8002648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800264c:	2b06      	cmp	r3, #6
 800264e:	d04d      	beq.n	80026ec <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
    		  Status_Source=WAIT_SOURCE;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    	  if (Status_Source!=OVERCURRENT_SOURCE){
 8002656:	e049      	b.n	80026ec <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
    	  }
      }
      else if (Status_Source!=OVERCURRENT_SOURCE){
 8002658:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800265c:	2b06      	cmp	r3, #6
 800265e:	d045      	beq.n	80026ec <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
      //else{
        if((AC_Source_sub->V_ac_pk_pos_local > V_ac_pos_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local < V_ac_neg_Limit_local)){
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002666:	429a      	cmp	r2, r3
 8002668:	d20b      	bcs.n	8002682 <DPC_MISC_CHECK_AC_SOURCE+0x186>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	885b      	ldrh	r3, [r3, #2]
 800266e:	8c3a      	ldrh	r2, [r7, #32]
 8002670:	429a      	cmp	r2, r3
 8002672:	d906      	bls.n	8002682 <DPC_MISC_CHECK_AC_SOURCE+0x186>
          Status_Source=OVERVOLTAGE_SOURCE;
 8002674:	2305      	movs	r3, #5
 8002676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(FAULT_OVS);
 800267a:	2010      	movs	r0, #16
 800267c:	f7fe fcbe 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 8002680:	e034      	b.n	80026ec <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        } 
        else if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_Low_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_Low_Limit_local)){
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	8afa      	ldrh	r2, [r7, #22]
 8002688:	429a      	cmp	r2, r3
 800268a:	d90c      	bls.n	80026a6 <DPC_MISC_CHECK_AC_SOURCE+0x1aa>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	885b      	ldrh	r3, [r3, #2]
 8002690:	8aba      	ldrh	r2, [r7, #20]
 8002692:	429a      	cmp	r2, r3
 8002694:	d207      	bcs.n	80026a6 <DPC_MISC_CHECK_AC_SOURCE+0x1aa>
          Status_Source=NO_SOURCE;
 8002696:	2301      	movs	r3, #1
 8002698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(ERROR_AC_OFF);
 800269c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80026a0:	f7fe fcac 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 80026a4:	e022      	b.n	80026ec <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        }
        else if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_UV_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_UV_Limit_local)){
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	8b7a      	ldrh	r2, [r7, #26]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d90c      	bls.n	80026ca <DPC_MISC_CHECK_AC_SOURCE+0x1ce>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	885b      	ldrh	r3, [r3, #2]
 80026b4:	8b3a      	ldrh	r2, [r7, #24]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d207      	bcs.n	80026ca <DPC_MISC_CHECK_AC_SOURCE+0x1ce>
          Status_Source=UV_SOURCE;
 80026ba:	2302      	movs	r3, #2
 80026bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(ERROR_AC_UV); 
 80026c0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80026c4:	f7fe fc9a 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 80026c8:	e010      	b.n	80026ec <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        }      
        else {
          Status_Source=OK_SOURCE;
 80026ca:	2304      	movs	r3, #4
 80026cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_UVLO_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_UVLO_Limit_local)){
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	8bfa      	ldrh	r2, [r7, #30]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d908      	bls.n	80026ec <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	885b      	ldrh	r3, [r3, #2]
 80026de:	8bba      	ldrh	r2, [r7, #28]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d203      	bcs.n	80026ec <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
            DPC_FLT_Faulterror_Set(ERROR_AC_UVLO);
 80026e4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80026e8:	f7fe fc88 	bl	8000ffc <DPC_FLT_Faulterror_Set>
  //    }
  //    Status_Source=OK_SOURCE;   
  //  }    
  //  }
  
  AC_Source_sub->Status_Source=Status_Source;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80026f2:	721a      	strb	r2, [r3, #8]
  return Status_Source;
 80026f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3730      	adds	r7, #48	; 0x30
 80026fc:	46bd      	mov	sp, r7
 80026fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002702:	b004      	add	sp, #16
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	3da3d70a 	.word	0x3da3d70a
 800270c:	40c66666 	.word	0x40c66666

08002710 <DPC_PLL_Init>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void DPC_PLL_Init(PLL_Struct *PLL_sub, float kp_pll, float ki_pll, float Ts_pll, float phi_2pi, float delta_freq, uint8_t uFeedforward_Hz, FlagStatus satPI_toggle,float PIsat_up,float PIsat_down){
 8002710:	b480      	push	{r7}
 8002712:	b08b      	sub	sp, #44	; 0x2c
 8002714:	af00      	add	r7, sp, #0
 8002716:	6278      	str	r0, [r7, #36]	; 0x24
 8002718:	ed87 0a08 	vstr	s0, [r7, #32]
 800271c:	edc7 0a07 	vstr	s1, [r7, #28]
 8002720:	ed87 1a06 	vstr	s2, [r7, #24]
 8002724:	edc7 1a05 	vstr	s3, [r7, #20]
 8002728:	ed87 2a04 	vstr	s4, [r7, #16]
 800272c:	460b      	mov	r3, r1
 800272e:	edc7 2a02 	vstr	s5, [r7, #8]
 8002732:	ed87 3a01 	vstr	s6, [r7, #4]
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	4613      	mov	r3, r2
 800273a:	73bb      	strb	r3, [r7, #14]

PLL_sub->PLL_Enable=SET;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
PLL_sub->kp_pll=kp_pll;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	6a3a      	ldr	r2, [r7, #32]
 8002748:	61da      	str	r2, [r3, #28]
PLL_sub->ki_pll=ki_pll;
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	621a      	str	r2, [r3, #32]
PLL_sub->k0_pll=kp_pll;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	6a3a      	ldr	r2, [r7, #32]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
PLL_sub->k1_pll=ki_pll*Ts_pll;
 8002756:	ed97 7a07 	vldr	s14, [r7, #28]
 800275a:	edd7 7a06 	vldr	s15, [r7, #24]
 800275e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
PLL_sub->Ts_pll=Ts_pll;
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c
PLL_sub->pll_phi_2pi=phi_2pi;
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	60da      	str	r2, [r3, #12]
PLL_sub->delta_freq=delta_freq;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
PLL_sub->uFreqFeedforwardHz=uFeedforward_Hz;
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
PLL_sub->pi_pll.satPI_toggle=satPI_toggle;
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	7bba      	ldrb	r2, [r7, #14]
 8002788:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
PLL_sub->pi_pll.PIsat_up=PIsat_up;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	659a      	str	r2, [r3, #88]	; 0x58
PLL_sub->pi_pll.PIsat_down=PIsat_down;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	65da      	str	r2, [r3, #92]	; 0x5c
if(PLL_sub->PLL_Enable==SET){
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d104      	bne.n	80027ac <DPC_PLL_Init+0x9c>
PLL_sub->Status_PLL=PLL_IDLE;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
else if(PLL_sub->PLL_Enable==RESET){
PLL_sub->Status_PLL=PLL_DISABLED;
}  
}
 80027aa:	e008      	b.n	80027be <DPC_PLL_Init+0xae>
else if(PLL_sub->PLL_Enable==RESET){
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d103      	bne.n	80027be <DPC_PLL_Init+0xae>
PLL_sub->Status_PLL=PLL_DISABLED;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	2205      	movs	r2, #5
 80027ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 80027be:	bf00      	nop
 80027c0:	372c      	adds	r7, #44	; 0x2c
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <DPC_PLL_pllqd_Run>:
  * 
  * @retval STATUS_PLL_TypeDef 
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
STATUS_PLL_TypeDef DPC_PLL_pllqd_Run(PLL_Struct *PLL_sub, VoltageAC_qd_PLL_Struct *VAC_qd_PLL,float *theta_out,  float *omega_pi_out){
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b092      	sub	sp, #72	; 0x48
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
 
  STATUS_PLL_TypeDef STATUS_PLL;
  
  if(PLL_sub->PLL_Enable)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80f0 	beq.w	80029c6 <DPC_PLL_pllqd_Run+0x1fa>
  {
  
//Pass "PLL_sub" data
//float kp_pll_sub=PLL_sub->kp_pll;                                       ///Local variable to pass kp data
//float ki_pll_sub=PLL_sub->ki_pll;                                       ///Local variable to pass ki data
float k0_pll_sub=PLL_sub->k0_pll;                                       ///Local variable to pass k0 data
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	643b      	str	r3, [r7, #64]	; 0x40
float k1_pll_sub=PLL_sub->k1_pll;                                       ///Local variable to pass k1 data
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	63fb      	str	r3, [r7, #60]	; 0x3c
float pll_theta_in_sub = PLL_sub->pll_theta_in;                         /// Loacal variable to pass PLL theta input
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	63bb      	str	r3, [r7, #56]	; 0x38
float pll_theta_out_sub = PLL_sub->pll_theta_out;                       ///Local variable to pass PLL theta output
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	637b      	str	r3, [r7, #52]	; 0x34
float Ts_pll_sub = PLL_sub->Ts_pll;                                     ///Local variable to pass Ts 
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
FlagStatus satPI_toggle_sub = PLL_sub->pi_pll.satPI_toggle;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800280a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
float PIsat_down_sub=PLL_sub->pi_pll.PIsat_down;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
float PIsat_up_sub=PLL_sub->pi_pll.PIsat_up;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
//block!!

//Pass "VAC_qd_PLL" data 
float pll_d_sub=VAC_qd_PLL->Vph_d;      //Local variable to pass Vd
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	623b      	str	r3, [r7, #32]
float pll_q_sub=VAC_qd_PLL->Vph_q;      //Local variable to pass Vq
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	61fb      	str	r3, [r7, #28]
float pll_o_sub=VAC_qd_PLL->Vph_o;      //Local variable to pass Vo
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	61bb      	str	r3, [r7, #24]
//Local Data 
float omega_pi_pll_sub;  //omega_pi_pll_sub represent the output of the PI of PLL
float omega_pi_ff_pll_sub; //omega_pi_pll_sub will be added by feedforward terms
  
  // Set in actual angle (input) the previous value (output) 
  pll_theta_in_sub=pll_theta_out_sub;
 800282c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38
  //Save this new data in the "PLL_sub" struct
  PLL_sub->pll_theta_in=pll_theta_in_sub;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002834:	601a      	str	r2, [r3, #0]
  
  //Pass and save the input "Vdq0" in "PLL_sub" struct
  PLL_sub->pll_d=pll_d_sub;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a3a      	ldr	r2, [r7, #32]
 800283a:	611a      	str	r2, [r3, #16]
  PLL_sub->pll_q=pll_q_sub;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	615a      	str	r2, [r3, #20]
  PLL_sub->pll_o=pll_o_sub;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	619a      	str	r2, [r3, #24]
  
  //Configure the PI for PLL (k0, k1, SAT)
  // LOOP FILTER PI         
  PI_PLL.k0=k0_pll_sub; //K0=Kp
 8002848:	4a69      	ldr	r2, [pc, #420]	; (80029f0 <DPC_PLL_pllqd_Run+0x224>)
 800284a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800284c:	6353      	str	r3, [r2, #52]	; 0x34
  PI_PLL.k1=k1_pll_sub; //K1=Ki*Ts
 800284e:	4a68      	ldr	r2, [pc, #416]	; (80029f0 <DPC_PLL_pllqd_Run+0x224>)
 8002850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002852:	6393      	str	r3, [r2, #56]	; 0x38
  
  PI_PLL.satPI_toggle=satPI_toggle_sub;
 8002854:	4a66      	ldr	r2, [pc, #408]	; (80029f0 <DPC_PLL_pllqd_Run+0x224>)
 8002856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800285a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
  PI_PLL.PIsat_up=PIsat_up_sub;
 800285e:	4a64      	ldr	r2, [pc, #400]	; (80029f0 <DPC_PLL_pllqd_Run+0x224>)
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	6213      	str	r3, [r2, #32]
  PI_PLL.PIsat_down=PIsat_down_sub;
 8002864:	4a62      	ldr	r2, [pc, #392]	; (80029f0 <DPC_PLL_pllqd_Run+0x224>)
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	6253      	str	r3, [r2, #36]	; 0x24
  
  
  //Task PI    
  PI(0, -pll_q_sub , &PI_PLL);
 800286a:	edd7 7a07 	vldr	s15, [r7, #28]
 800286e:	eef1 7a67 	vneg.f32	s15, s15
 8002872:	485f      	ldr	r0, [pc, #380]	; (80029f0 <DPC_PLL_pllqd_Run+0x224>)
 8002874:	eef0 0a67 	vmov.f32	s1, s15
 8002878:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80029f4 <DPC_PLL_pllqd_Run+0x228>
 800287c:	f000 fc3a 	bl	80030f4 <PI>
  
  //Pass the internal PI (PI_PLL) data in the "PLL_sub"
  PLL_sub->pi_pll=PI_PLL;          
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a5b      	ldr	r2, [pc, #364]	; (80029f0 <DPC_PLL_pllqd_Run+0x224>)
 8002884:	3338      	adds	r3, #56	; 0x38
 8002886:	4611      	mov	r1, r2
 8002888:	2248      	movs	r2, #72	; 0x48
 800288a:	4618      	mov	r0, r3
 800288c:	f00a fdf2 	bl	800d474 <memcpy>
  
  omega_pi_pll_sub=PI_PLL.PIout_sat;
 8002890:	4b57      	ldr	r3, [pc, #348]	; (80029f0 <DPC_PLL_pllqd_Run+0x224>)
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	617b      	str	r3, [r7, #20]
  
  PLL_sub->omega_piout=omega_pi_pll_sub;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
  
  // FEEDFORWARD
  omega_pi_ff_pll_sub=omega_pi_pll_sub+PLL_sub->uFreqFeedforwardHz;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80028ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b2:	edc7 7a04 	vstr	s15, [r7, #16]
  
  //  VTO - SATURATED INTEGRATOR    //Substitude with Integrator() of "integrator.h" 
  
  INTEGRATOR_PLL.Ts=Ts_pll_sub;  //Pass Ts(LocalVariable) to Integrator_PLL(struct)
 80028b6:	4a50      	ldr	r2, [pc, #320]	; (80029f8 <DPC_PLL_pllqd_Run+0x22c>)
 80028b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ba:	6013      	str	r3, [r2, #0]
  Integral(&INTEGRATOR_PLL,omega_pi_ff_pll_sub);   //Task Integrator    
 80028bc:	ed97 0a04 	vldr	s0, [r7, #16]
 80028c0:	484d      	ldr	r0, [pc, #308]	; (80029f8 <DPC_PLL_pllqd_Run+0x22c>)
 80028c2:	f7ff fab9 	bl	8001e38 <Integral>
  
  // SATURATE INTEGRATOR
  if (INTEGRATOR_PLL.Integralout>1)
 80028c6:	4b4c      	ldr	r3, [pc, #304]	; (80029f8 <DPC_PLL_pllqd_Run+0x22c>)
 80028c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80028cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	dd04      	ble.n	80028e4 <DPC_PLL_pllqd_Run+0x118>
  {
    INTEGRATOR_PLL.Integralout=0;
 80028da:	4b47      	ldr	r3, [pc, #284]	; (80029f8 <DPC_PLL_pllqd_Run+0x22c>)
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	e010      	b.n	8002906 <DPC_PLL_pllqd_Run+0x13a>
  }
  else if (INTEGRATOR_PLL.Integralout<0)
 80028e4:	4b44      	ldr	r3, [pc, #272]	; (80029f8 <DPC_PLL_pllqd_Run+0x22c>)
 80028e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80028ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f2:	d504      	bpl.n	80028fe <DPC_PLL_pllqd_Run+0x132>
  {
    INTEGRATOR_PLL.Integralout=1;
 80028f4:	4b40      	ldr	r3, [pc, #256]	; (80029f8 <DPC_PLL_pllqd_Run+0x22c>)
 80028f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	e003      	b.n	8002906 <DPC_PLL_pllqd_Run+0x13a>
  }
  else 
  {
    INTEGRATOR_PLL.Integralout=INTEGRATOR_PLL.Integralout;
 80028fe:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <DPC_PLL_pllqd_Run+0x22c>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	4a3d      	ldr	r2, [pc, #244]	; (80029f8 <DPC_PLL_pllqd_Run+0x22c>)
 8002904:	60d3      	str	r3, [r2, #12]
  }
  
  //Pass INTEGRATOR_PLL(struct) to local PLL_sub(struct)
  PLL_sub->integrator_pll=INTEGRATOR_PLL;    
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a3b      	ldr	r2, [pc, #236]	; (80029f8 <DPC_PLL_pllqd_Run+0x22c>)
 800290a:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800290e:	4615      	mov	r5, r2
 8002910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	6023      	str	r3, [r4, #0]
  
  pll_theta_out_sub=INTEGRATOR_PLL.Integralout;
 8002918:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <DPC_PLL_pllqd_Run+0x22c>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
  
  *theta_out=pll_theta_out_sub;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002922:	601a      	str	r2, [r3, #0]
  *omega_pi_out=omega_pi_ff_pll_sub;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	601a      	str	r2, [r3, #0]
  
  PLL_sub->pll_theta_out=pll_theta_out_sub;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800292e:	605a      	str	r2, [r3, #4]
  
  PLL_sub->pll_theta_out_2pi= PLL_sub->pll_theta_out*DOUBLE_PI; //Scale normalized theta to (0-2pi)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	edd3 7a01 	vldr	s15, [r3, #4]
 8002936:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80029fc <DPC_PLL_pllqd_Run+0x230>
 800293a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	edc3 7a02 	vstr	s15, [r3, #8]
  
  PLL_sub->omega_ff_pll=omega_pi_ff_pll_sub;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	635a      	str	r2, [r3, #52]	; 0x34
  
if((PLL_sub->omega_ff_pll-PLL_sub->uFreqFeedforwardHz)<PLL_sub->delta_freq&&(PLL_sub->omega_ff_pll-PLL_sub->uFreqFeedforwardHz)>-PLL_sub->delta_freq) ///CHECK
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002970:	d51d      	bpl.n	80029ae <DPC_PLL_pllqd_Run+0x1e2>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002986:	ee37 7a67 	vsub.f32	s14, s14, s15
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002990:	eef1 7a67 	vneg.f32	s15, s15
 8002994:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299c:	dd07      	ble.n	80029ae <DPC_PLL_pllqd_Run+0x1e2>
{
  PLL_sub->Status_PLL=PLL_SYNC;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  STATUS_PLL=PLL_SYNC;
 80029a6:	2301      	movs	r3, #1
 80029a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80029ac:	e01a      	b.n	80029e4 <DPC_PLL_pllqd_Run+0x218>
}
else
{
  PLL_sub->Status_PLL=PLL_OUTRANGE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  STATUS_PLL=PLL_OUTRANGE;
 80029b6:	2302      	movs	r3, #2
 80029b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  DPC_FLT_Faulterror_Set(ERROR_PLL_OR);
 80029bc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80029c0:	f7fe fb1c 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 80029c4:	e00e      	b.n	80029e4 <DPC_PLL_pllqd_Run+0x218>
}

  }
  else{
    PLL_sub->omega_ff_pll=0;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34
    PLL_sub->pll_theta_out=0;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	605a      	str	r2, [r3, #4]
    PLL_sub->pll_theta_out_2pi=0;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
    STATUS_PLL=PLL_DISABLED;
 80029de:	2305      	movs	r3, #5
 80029e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
return STATUS_PLL;
 80029e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3748      	adds	r7, #72	; 0x48
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bdb0      	pop	{r4, r5, r7, pc}
 80029f0:	200000ec 	.word	0x200000ec
 80029f4:	00000000 	.word	0x00000000
 80029f8:	200000d4 	.word	0x200000d4
 80029fc:	40c90fdb 	.word	0x40c90fdb

08002a00 <DPC_PWM_Send_Burst_PWM>:
  *
  * @retval Null 
  *
  * @note Function valid for STM32G4xx microconroller family   
  */
void DPC_PWM_Send_Burst_PWM(DPC_PWM_TypeDef *tDPC_PWM_loc,float BURST_A,float BURST_B,float BURST_C,DMA_PWMDUTY_STRUCT* DMA_SRC ){
 8002a00:	b480      	push	{r7}
 8002a02:	b08b      	sub	sp, #44	; 0x2c
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6178      	str	r0, [r7, #20]
 8002a08:	ed87 0a04 	vstr	s0, [r7, #16]
 8002a0c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002a10:	ed87 1a02 	vstr	s2, [r7, #8]
 8002a14:	6079      	str	r1, [r7, #4]
  uint32_t dutyVCpos;
  uint32_t dutyVCneg;

  uint16_t PWM_PERIOD_COUNTER_INT;

  PWM_PERIOD_COUNTER_INT=__HAL_HRTIM_GETPERIOD(&PWM_Tim1, HRTIM_TIMERINDEX_TIMER_A);
 8002a16:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <DPC_PWM_Send_Burst_PWM+0xb8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1e:	84fb      	strh	r3, [r7, #38]	; 0x26
  dutyVApos = BURST_A*PWM_PERIOD_COUNTER_INT;
 8002a20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a36:	ee17 3a90 	vmov	r3, s15
 8002a3a:	623b      	str	r3, [r7, #32]
  dutyVBpos = BURST_B*PWM_PERIOD_COUNTER_INT;
 8002a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a46:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a52:	ee17 3a90 	vmov	r3, s15
 8002a56:	61fb      	str	r3, [r7, #28]
  dutyVCpos = BURST_C*PWM_PERIOD_COUNTER_INT;
 8002a58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a62:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a6e:	ee17 3a90 	vmov	r3, s15
 8002a72:	61bb      	str	r3, [r7, #24]


	DMA_SRC->phAA=dutyVApos;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a3a      	ldr	r2, [r7, #32]
 8002a78:	601a      	str	r2, [r3, #0]
	DMA_SRC->phAB=dutyVApos;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	605a      	str	r2, [r3, #4]
	DMA_SRC->phBA=dutyVBpos;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	609a      	str	r2, [r3, #8]
	DMA_SRC->phBB=dutyVBpos;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	60da      	str	r2, [r3, #12]
	DMA_SRC->phCA=dutyVCpos;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	611a      	str	r2, [r3, #16]
	DMA_SRC->phCB=dutyVCpos;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	615a      	str	r2, [r3, #20]
	DMA_SRC->phA=dutyVApos;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a3a      	ldr	r2, [r7, #32]
 8002a9c:	619a      	str	r2, [r3, #24]
	DMA_SRC->phB=dutyVBpos;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	61da      	str	r2, [r3, #28]
	DMA_SRC->phC=dutyVCpos;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	621a      	str	r2, [r3, #32]
//  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0x2,HRTIM_COMPAREUNIT_1,ValueH);
//  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0x3,HRTIM_COMPAREUNIT_1,ValueL);
//  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0x4,HRTIM_COMPAREUNIT_1,ValueH);
//  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0x5,HRTIM_COMPAREUNIT_1,ValueL);
  
}
 8002aaa:	bf00      	nop
 8002aac:	372c      	adds	r7, #44	; 0x2c
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	2000035c 	.word	0x2000035c

08002abc <DPC_PWM_Send_Duty_SPWM>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_Send_Duty_SPWM(DPC_PWM_TypeDef *tDPC_PWM_loc,float VA,float VB,float VC, DMA_PWMDUTY_STRUCT* DMA_SRC)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b095      	sub	sp, #84	; 0x54
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6178      	str	r0, [r7, #20]
 8002ac4:	ed87 0a04 	vstr	s0, [r7, #16]
 8002ac8:	edc7 0a03 	vstr	s1, [r7, #12]
 8002acc:	ed87 1a02 	vstr	s2, [r7, #8]
 8002ad0:	6079      	str	r1, [r7, #4]
  
  if(VA>1){VA=1;}
 8002ad2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae2:	dd03      	ble.n	8002aec <DPC_PWM_Send_Duty_SPWM+0x30>
 8002ae4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	e00a      	b.n	8002b02 <DPC_PWM_Send_Duty_SPWM+0x46>
  else if(VA<-1){VA=-1;}
 8002aec:	edd7 7a04 	vldr	s15, [r7, #16]
 8002af0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	d501      	bpl.n	8002b02 <DPC_PWM_Send_Duty_SPWM+0x46>
 8002afe:	4ba9      	ldr	r3, [pc, #676]	; (8002da4 <DPC_PWM_Send_Duty_SPWM+0x2e8>)
 8002b00:	613b      	str	r3, [r7, #16]
  if(VB>=1){VB=1;}
 8002b02:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	db03      	blt.n	8002b1c <DPC_PWM_Send_Duty_SPWM+0x60>
 8002b14:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e00a      	b.n	8002b32 <DPC_PWM_Send_Duty_SPWM+0x76>
  else if(VB<-1){VB=-1;}
 8002b1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b20:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2c:	d501      	bpl.n	8002b32 <DPC_PWM_Send_Duty_SPWM+0x76>
 8002b2e:	4b9d      	ldr	r3, [pc, #628]	; (8002da4 <DPC_PWM_Send_Duty_SPWM+0x2e8>)
 8002b30:	60fb      	str	r3, [r7, #12]
  if(VC>=1){VC=1;}
 8002b32:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b42:	db03      	blt.n	8002b4c <DPC_PWM_Send_Duty_SPWM+0x90>
 8002b44:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	e00a      	b.n	8002b62 <DPC_PWM_Send_Duty_SPWM+0xa6>
  else if(VC<-1){VC=-1;}  
 8002b4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b50:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5c:	d501      	bpl.n	8002b62 <DPC_PWM_Send_Duty_SPWM+0xa6>
 8002b5e:	4b91      	ldr	r3, [pc, #580]	; (8002da4 <DPC_PWM_Send_Duty_SPWM+0x2e8>)
 8002b60:	60bb      	str	r3, [r7, #8]

  uint16_t PWM_PERIOD_COUNTER_INT;
  PWM_PERIOD_COUNTER_INT=__HAL_HRTIM_GETPERIOD(&PWM_Tim1, HRTIM_TIMERINDEX_TIMER_A);
 8002b62:	4b91      	ldr	r3, [pc, #580]	; (8002da8 <DPC_PWM_Send_Duty_SPWM+0x2ec>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6a:	83fb      	strh	r3, [r7, #30]
  uint32_t dutyVBpos;
  uint32_t dutyVBneg;
  uint32_t dutyVCpos;
  uint32_t dutyVCneg;  
  
  if(VA>=0.0f){VApos=VA;VAneg=0;}else if(VA<0.0f){VApos=0.0f;VAneg=-1*VA;}  
 8002b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b78:	db05      	blt.n	8002b86 <DPC_PWM_Send_Duty_SPWM+0xca>
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b84:	e00f      	b.n	8002ba6 <DPC_PWM_Send_Duty_SPWM+0xea>
 8002b86:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	d508      	bpl.n	8002ba6 <DPC_PWM_Send_Duty_SPWM+0xea>
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b9e:	eef1 7a67 	vneg.f32	s15, s15
 8002ba2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  if(VB>=0.0f){VBpos=VB;VBneg=0;}else if(VB<0.0f){VBpos=0.0f;VBneg=-1*VB;}
 8002ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb2:	db05      	blt.n	8002bc0 <DPC_PWM_Send_Duty_SPWM+0x104>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8002bbe:	e00f      	b.n	8002be0 <DPC_PWM_Send_Duty_SPWM+0x124>
 8002bc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bcc:	d508      	bpl.n	8002be0 <DPC_PWM_Send_Duty_SPWM+0x124>
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd8:	eef1 7a67 	vneg.f32	s15, s15
 8002bdc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  if(VC>=0.0f){VCpos=VC;VCneg=0;}else if(VC<0.0f){VCpos=0.0f;VCneg=-1*VC;}
 8002be0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002be4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bec:	db05      	blt.n	8002bfa <DPC_PWM_Send_Duty_SPWM+0x13e>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bf8:	e00f      	b.n	8002c1a <DPC_PWM_Send_Duty_SPWM+0x15e>
 8002bfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c06:	d508      	bpl.n	8002c1a <DPC_PWM_Send_Duty_SPWM+0x15e>
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c12:	eef1 7a67 	vneg.f32	s15, s15
 8002c16:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
     dutyVAneg=(uint32_t)(VAneg*PWM_PERIOD_COUNTER_INT);
 8002c1a:	8bfb      	ldrh	r3, [r7, #30]
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c24:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c30:	ee17 3a90 	vmov	r3, s15
 8002c34:	633b      	str	r3, [r7, #48]	; 0x30

  tDPC_PWM_loc->VApos=VApos;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c3a:	605a      	str	r2, [r3, #4]
  tDPC_PWM_loc->VBpos=VBpos;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c40:	60da      	str	r2, [r3, #12]
  tDPC_PWM_loc->VCpos=VCpos;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c46:	615a      	str	r2, [r3, #20]
  tDPC_PWM_loc->VAneg=VAneg;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c4c:	609a      	str	r2, [r3, #8]
  tDPC_PWM_loc->VBneg=VBneg;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c52:	611a      	str	r2, [r3, #16]
  tDPC_PWM_loc->VCneg=VCneg;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c58:	619a      	str	r2, [r3, #24]
  
  dutyVApos=(uint32_t)(VApos*PWM_PERIOD_COUNTER_INT);
 8002c5a:	8bfb      	ldrh	r3, [r7, #30]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c64:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c70:	ee17 3a90 	vmov	r3, s15
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
  
  dutyVBpos=(uint32_t)(VBpos*PWM_PERIOD_COUNTER_INT);
 8002c76:	8bfb      	ldrh	r3, [r7, #30]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c80:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c8c:	ee17 3a90 	vmov	r3, s15
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  dutyVBneg=(uint32_t)(VBneg*PWM_PERIOD_COUNTER_INT);
 8002c92:	8bfb      	ldrh	r3, [r7, #30]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c9c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca8:	ee17 3a90 	vmov	r3, s15
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
  
  dutyVCpos=(uint32_t)(VCpos*PWM_PERIOD_COUNTER_INT);
 8002cae:	8bfb      	ldrh	r3, [r7, #30]
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc4:	ee17 3a90 	vmov	r3, s15
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
  dutyVCneg=(uint32_t)(VCneg*PWM_PERIOD_COUNTER_INT); 
 8002cca:	8bfb      	ldrh	r3, [r7, #30]
 8002ccc:	ee07 3a90 	vmov	s15, r3
 8002cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cd4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce0:	ee17 3a90 	vmov	r3, s15
 8002ce4:	623b      	str	r3, [r7, #32]
  
  if(dutyVApos>=tDPC_PWM_loc->dutyMaxLim){dutyVApos=tDPC_PWM_loc->dutyMaxLim;}
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d303      	bcc.n	8002cf8 <DPC_PWM_Send_Duty_SPWM+0x23c>
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf6:	e007      	b.n	8002d08 <DPC_PWM_Send_Duty_SPWM+0x24c>
  else if(dutyVApos<tDPC_PWM_loc->dutyMinLim){dutyVApos=tDPC_PWM_loc->dutyMinLim;}
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d202      	bcs.n	8002d08 <DPC_PWM_Send_Duty_SPWM+0x24c>
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
  
  if(dutyVAneg>=tDPC_PWM_loc->dutyMaxLim){dutyVAneg=tDPC_PWM_loc->dutyMaxLim;}
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d303      	bcc.n	8002d1a <DPC_PWM_Send_Duty_SPWM+0x25e>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
 8002d18:	e007      	b.n	8002d2a <DPC_PWM_Send_Duty_SPWM+0x26e>
  else if(dutyVAneg<tDPC_PWM_loc->dutyMinLim){dutyVAneg=tDPC_PWM_loc->dutyMinLim;}
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d202      	bcs.n	8002d2a <DPC_PWM_Send_Duty_SPWM+0x26e>
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30
  
  if(dutyVBpos>=tDPC_PWM_loc->dutyMaxLim){dutyVBpos=tDPC_PWM_loc->dutyMaxLim;}
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d303      	bcc.n	8002d3c <DPC_PWM_Send_Duty_SPWM+0x280>
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3a:	e007      	b.n	8002d4c <DPC_PWM_Send_Duty_SPWM+0x290>
  else if(dutyVBpos<tDPC_PWM_loc->dutyMinLim){dutyVBpos=tDPC_PWM_loc->dutyMinLim;}
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d202      	bcs.n	8002d4c <DPC_PWM_Send_Duty_SPWM+0x290>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(dutyVBneg>tDPC_PWM_loc->dutyMaxLim){dutyVBneg=tDPC_PWM_loc->dutyMaxLim;}
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d903      	bls.n	8002d5e <DPC_PWM_Send_Duty_SPWM+0x2a2>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5c:	e007      	b.n	8002d6e <DPC_PWM_Send_Duty_SPWM+0x2b2>
  else if(dutyVBneg<tDPC_PWM_loc->dutyMinLim){dutyVBneg=tDPC_PWM_loc->dutyMinLim;}
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d202      	bcs.n	8002d6e <DPC_PWM_Send_Duty_SPWM+0x2b2>
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  
  if(dutyVCpos>=tDPC_PWM_loc->dutyMaxLim){dutyVCpos=tDPC_PWM_loc->dutyMaxLim;}
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d303      	bcc.n	8002d80 <DPC_PWM_Send_Duty_SPWM+0x2c4>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7e:	e007      	b.n	8002d90 <DPC_PWM_Send_Duty_SPWM+0x2d4>
  else if(dutyVCpos<tDPC_PWM_loc->dutyMinLim){dutyVCpos=tDPC_PWM_loc->dutyMinLim;}
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d202      	bcs.n	8002d90 <DPC_PWM_Send_Duty_SPWM+0x2d4>
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(dutyVCneg>=tDPC_PWM_loc->dutyMaxLim){dutyVCneg=tDPC_PWM_loc->dutyMaxLim;}
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	6a3a      	ldr	r2, [r7, #32]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d308      	bcc.n	8002dac <DPC_PWM_Send_Duty_SPWM+0x2f0>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	623b      	str	r3, [r7, #32]
 8002da0:	e00c      	b.n	8002dbc <DPC_PWM_Send_Duty_SPWM+0x300>
 8002da2:	bf00      	nop
 8002da4:	bf800000 	.word	0xbf800000
 8002da8:	2000035c 	.word	0x2000035c
  else if(dutyVCneg<tDPC_PWM_loc->dutyMinLim){dutyVCneg=tDPC_PWM_loc->dutyMinLim;}   
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	6a3a      	ldr	r2, [r7, #32]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d202      	bcs.n	8002dbc <DPC_PWM_Send_Duty_SPWM+0x300>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	623b      	str	r3, [r7, #32]
//  if (dutyVApos<=500){
//	  //HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA1);
//	  dutyVApos=0;
//  }
  //else HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA1);
  	DMA_SRC->phAA=dutyVApos;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dc0:	601a      	str	r2, [r3, #0]
  	DMA_SRC->phAB=dutyVAneg;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc6:	605a      	str	r2, [r3, #4]
  	DMA_SRC->phBA=dutyVBpos;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dcc:	609a      	str	r2, [r3, #8]
  	DMA_SRC->phBB=dutyVBneg;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dd2:	60da      	str	r2, [r3, #12]
  	DMA_SRC->phCA=dutyVCpos;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	611a      	str	r2, [r3, #16]
  	DMA_SRC->phCB=dutyVCneg;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a3a      	ldr	r2, [r7, #32]
 8002dde:	615a      	str	r2, [r3, #20]
  	DMA_SRC->phA=dutyVApos+dutyVAneg;
 8002de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	441a      	add	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	619a      	str	r2, [r3, #24]
  	DMA_SRC->phB=dutyVBpos+dutyVBneg;
 8002dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	441a      	add	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	61da      	str	r2, [r3, #28]
  	DMA_SRC->phC=dutyVCpos+dutyVCneg;
 8002df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	441a      	add	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	621a      	str	r2, [r3, #32]
//#endif
//#else
//  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
//    return;
}
 8002dfe:	bf00      	nop
 8002e00:	3754      	adds	r7, #84	; 0x54
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop

08002e0c <DPC_PWM_HRTIM_Start>:
*
* @note Function valid for STM32G4xx microconroller family   
*/

void DPC_PWM_HRTIM_Start(void)
{     
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
//                                 + HRTIM_TIMERID_TIMER_E + HRTIM_TIMERID_TIMER_F);
//  HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1 + HRTIM_OUTPUT_TA2 + HRTIM_OUTPUT_TB1 + HRTIM_OUTPUT_TB2 + HRTIM_OUTPUT_TC1 + HRTIM_OUTPUT_TC2 + + HRTIM_OUTPUT_TD1 + HRTIM_OUTPUT_TD2 + HRTIM_OUTPUT_TE1 + HRTIM_OUTPUT_TE2 + HRTIM_OUTPUT_TF1 + HRTIM_OUTPUT_TF2);

//	HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_A + HRTIM_TIMERID_TIMER_B + HRTIM_TIMERID_TIMER_C);

	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_A);
 8002e10:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002e14:	4814      	ldr	r0, [pc, #80]	; (8002e68 <DPC_PWM_HRTIM_Start+0x5c>)
 8002e16:	f006 ff8f 	bl	8009d38 <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
 8002e1a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002e1e:	4812      	ldr	r0, [pc, #72]	; (8002e68 <DPC_PWM_HRTIM_Start+0x5c>)
 8002e20:	f006 ff8a 	bl	8009d38 <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);
 8002e24:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002e28:	480f      	ldr	r0, [pc, #60]	; (8002e68 <DPC_PWM_HRTIM_Start+0x5c>)
 8002e2a:	f006 ff85 	bl	8009d38 <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCountStart_IT(&PWM_Tim1, HRTIM_TIMERID_TIMER_A);
 8002e2e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002e32:	480d      	ldr	r0, [pc, #52]	; (8002e68 <DPC_PWM_HRTIM_Start+0x5c>)
 8002e34:	f006 ff10 	bl	8009c58 <HAL_HRTIM_WaveformCountStart_IT>
	HAL_HRTIM_WaveformCountStart_IT(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
 8002e38:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002e3c:	480a      	ldr	r0, [pc, #40]	; (8002e68 <DPC_PWM_HRTIM_Start+0x5c>)
 8002e3e:	f006 ff0b 	bl	8009c58 <HAL_HRTIM_WaveformCountStart_IT>
	HAL_HRTIM_WaveformCountStart_IT(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);
 8002e42:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002e46:	4808      	ldr	r0, [pc, #32]	; (8002e68 <DPC_PWM_HRTIM_Start+0x5c>)
 8002e48:	f006 ff06 	bl	8009c58 <HAL_HRTIM_WaveformCountStart_IT>
	//HAL_HRTIM_WaveformCountStart_DMA(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A);
	//HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
	//HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);

	//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1);
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1);
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4806      	ldr	r0, [pc, #24]	; (8002e68 <DPC_PWM_HRTIM_Start+0x5c>)
 8002e50:	f006 fea7 	bl	8009ba2 <HAL_HRTIM_WaveformOutputStart>
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TB1);
 8002e54:	2104      	movs	r1, #4
 8002e56:	4804      	ldr	r0, [pc, #16]	; (8002e68 <DPC_PWM_HRTIM_Start+0x5c>)
 8002e58:	f006 fea3 	bl	8009ba2 <HAL_HRTIM_WaveformOutputStart>
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TC1);
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	4802      	ldr	r0, [pc, #8]	; (8002e68 <DPC_PWM_HRTIM_Start+0x5c>)
 8002e60:	f006 fe9f 	bl	8009ba2 <HAL_HRTIM_WaveformOutputStart>
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	2000035c 	.word	0x2000035c

08002e6c <DPC_PWM_HRTIM_OutDisable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_HRTIM_OutDisable(void)
{     
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
//#ifdef STDES_PFCBIDIR_REV2
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA1);
 8002e70:	2101      	movs	r1, #1
 8002e72:	4806      	ldr	r0, [pc, #24]	; (8002e8c <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002e74:	f006 fec2 	bl	8009bfc <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA2);
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB1);
 8002e78:	2104      	movs	r1, #4
 8002e7a:	4804      	ldr	r0, [pc, #16]	; (8002e8c <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002e7c:	f006 febe 	bl	8009bfc <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB2);
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TC1);
 8002e80:	2110      	movs	r1, #16
 8002e82:	4802      	ldr	r0, [pc, #8]	; (8002e8c <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002e84:	f006 feba 	bl	8009bfc <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA2);
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB2);
//#else
////  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	2000035c 	.word	0x2000035c

08002e90 <DPC_PWM_HRTIM_OutEnable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_HRTIM_OutEnable(void)
{     
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
//#ifdef STDES_PFCBIDIR_REV2
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA1);
 8002e94:	2101      	movs	r1, #1
 8002e96:	4806      	ldr	r0, [pc, #24]	; (8002eb0 <DPC_PWM_HRTIM_OutEnable+0x20>)
 8002e98:	f006 fe83 	bl	8009ba2 <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA2);
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB1);
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <DPC_PWM_HRTIM_OutEnable+0x20>)
 8002ea0:	f006 fe7f 	bl	8009ba2 <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB2);
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TC1);
 8002ea4:	2110      	movs	r1, #16
 8002ea6:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <DPC_PWM_HRTIM_OutEnable+0x20>)
 8002ea8:	f006 fe7b 	bl	8009ba2 <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA2);
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB2);
//#else
////  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	2000035c 	.word	0x2000035c

08002eb4 <DPC_PWM_OutDisable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_OutDisable(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
//#ifdef USE_ADVTIM
//    DPC_PWM_ADVTIM_OutDisable();                                                ///Safe: Disable ADVTIM outputs if enabled
//#elif USE_HRTIM
    DPC_PWM_HRTIM_OutDisable();                                                 ///Safe: Disable HRTIM outputs if enabled
 8002eb8:	f7ff ffd8 	bl	8002e6c <DPC_PWM_HRTIM_OutDisable>
//#else
//    SELECT DEFINE
//#endif
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <DPC_PWM_OutEnable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_OutEnable(DPC_PWM_TypeDef *tDPC_PWM_loc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if(tDPC_PWM_loc->DPC_PWM_Status==PWM_Armed){    
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d106      	bne.n	8002ede <DPC_PWM_OutEnable+0x1e>
//#ifdef USE_ADVTIM
//    DPC_PWM_ADVTIM_OutEnable();
//#elif USE_HRTIM
    DPC_PWM_HRTIM_OutEnable();
 8002ed0:	f7ff ffde 	bl	8002e90 <DPC_PWM_HRTIM_OutEnable>
    HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	2120      	movs	r1, #32
 8002ed8:	4803      	ldr	r0, [pc, #12]	; (8002ee8 <DPC_PWM_OutEnable+0x28>)
 8002eda:	f005 fe21 	bl	8008b20 <HAL_GPIO_WritePin>
//#else
//    SELECT DEFINE
//#endif
  }
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	48000800 	.word	0x48000800

08002eec <DPC_PWM_Start>:
*
* @note Function valid for STM32G4xx microconroller family   
*/

void DPC_PWM_Start(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
//#ifdef USE_ADVTIM
//  DPC_PWM_ADVTIM_PWMStart();                                                        ///
//  DPC_PWM_ADVTIM_OutDisable();                                                  ///Safe: Disable ADVTIM outputs if enabled
//#elif USE_HRTIM
  DPC_PWM_HRTIM_Start();                                                        ///
 8002ef0:	f7ff ff8c 	bl	8002e0c <DPC_PWM_HRTIM_Start>
  DPC_PWM_HRTIM_OutDisable();                                                   ///Safe: Disable HRTIM outputs if enabled
 8002ef4:	f7ff ffba 	bl	8002e6c <DPC_PWM_HRTIM_OutDisable>
//#else
//  SELECT DEFINE
//#endif
}
 8002ef8:	bf00      	nop
 8002efa:	bd80      	pop	{r7, pc}

08002efc <DPC_PWM_Init>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_Init(uint32_t  BURST_PWM_Freq_Desidered,uint32_t  PWM_Freq_Desidered,DPC_PWM_StatusTypeDef DPC_PWM_SET, DPC_PWM_TypeDef *tDPC_PWM_loc, DMA_PWMDUTY_STRUCT *DUTY_SRC)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b0a0      	sub	sp, #128	; 0x80
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	71fb      	strb	r3, [r7, #7]

  uint32_t PWM_Period;                                                          ///
  uint32_t BURST_PWM_Period;                                                    ///  
  uint32_t Timers_Clock;                                                        ///
  uint32_t f_tim_ket_ck;                                                        ///  
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	2260      	movs	r2, #96	; 0x60
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f00a fab8 	bl	800d48a <memset>
  
  
  Timers_Clock=HAL_RCC_GetPCLK2Freq();                                      ///
 8002f1a:	f009 f8eb 	bl	800c0f4 <HAL_RCC_GetPCLK2Freq>
 8002f1e:	67f8      	str	r0, [r7, #124]	; 0x7c
  f_tim_ket_ck=Timers_Clock;                                                /// Represent frequency Internal clock source (tim_ker_ck) expressed in Hz - see: pag-1063 RM0440 Rev1
 8002f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f22:	67bb      	str	r3, [r7, #120]	; 0x78
  PWM_Period=((f_tim_ket_ck/PWM_Freq_Desidered) - 1)*16;                       ///  uint32_t PWM_Period;
 8002f24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8002f30:	3b01      	subs	r3, #1
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	677b      	str	r3, [r7, #116]	; 0x74
  BURST_PWM_Period=((f_tim_ket_ck/BURST_PWM_Freq_Desidered) - 1);           ///  uint32_t PWM_Period;
 8002f36:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	673b      	str	r3, [r7, #112]	; 0x70
  tDPC_PWM_loc->dutyMaxLim=tempDEF_dutyMaxLim;                                  /// Adapt to PRESCALER
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f248 42cf 	movw	r2, #33999	; 0x84cf
 8002f48:	61da      	str	r2, [r3, #28]
  tDPC_PWM_loc->dutyMinLim=tempDEF_dutyMinLim;                                  /// Adapt to PRESCALER
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	621a      	str	r2, [r3, #32]
  
  tDPC_PWM_loc->PWM_Period=PWM_Period;                                          ///
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
  tDPC_PWM_loc->BURST_PWM_Period=BURST_PWM_Period;                              ///  
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
  tDPC_PWM_loc->DPC_PWM_Status=DPC_PWM_SET;                                     ///
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	79fa      	ldrb	r2, [r7, #7]
 8002f60:	701a      	strb	r2, [r3, #0]

  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST;
 8002f66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f6a:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMASize = 0x1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	623b      	str	r3, [r7, #32]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8002f74:	2300      	movs	r3, #0
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002f84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f88:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002f92:	2300      	movs	r3, #0
 8002f94:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002f96:	2300      	movs	r3, #0
 8002f98:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1|HRTIM_TIMFAULTENABLE_FAULT3;
 8002f9a:	2305      	movs	r3, #5
 8002f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8002fb2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fb6:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phA;
 8002fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fc0:	3318      	adds	r3, #24
 8002fc2:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[0].CMP1xR);
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <DPC_PWM_Init+0x14c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	339c      	adds	r3, #156	; 0x9c
 8002fca:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002fcc:	f107 0310 	add.w	r3, r7, #16
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	481c      	ldr	r0, [pc, #112]	; (8003048 <DPC_PWM_Init+0x14c>)
 8002fd6:	f006 fb9f 	bl	8009718 <HAL_HRTIM_WaveformTimerConfig>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <DPC_PWM_Init+0xe8>
  {
    Error_Handler();
 8002fe0:	f002 fe0a 	bl	8005bf8 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phB;
 8002fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fe8:	331c      	adds	r3, #28
 8002fea:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[1].CMP1xR);
 8002fec:	4b16      	ldr	r3, [pc, #88]	; (8003048 <DPC_PWM_Init+0x14c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8002ff4:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8002ff6:	f107 0310 	add.w	r3, r7, #16
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	4812      	ldr	r0, [pc, #72]	; (8003048 <DPC_PWM_Init+0x14c>)
 8003000:	f006 fb8a 	bl	8009718 <HAL_HRTIM_WaveformTimerConfig>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <DPC_PWM_Init+0x112>
  {
    Error_Handler();
 800300a:	f002 fdf5 	bl	8005bf8 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phC;
 800300e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003012:	3320      	adds	r3, #32
 8003014:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[2].CMP1xR);
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <DPC_PWM_Init+0x14c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800301e:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8003020:	f107 0310 	add.w	r3, r7, #16
 8003024:	461a      	mov	r2, r3
 8003026:	2102      	movs	r1, #2
 8003028:	4807      	ldr	r0, [pc, #28]	; (8003048 <DPC_PWM_Init+0x14c>)
 800302a:	f006 fb75 	bl	8009718 <HAL_HRTIM_WaveformTimerConfig>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <DPC_PWM_Init+0x13c>
  {
    Error_Handler();
 8003034:	f002 fde0 	bl	8005bf8 <Error_Handler>
  }


  DPC_PWM_Start();                                                              ///
 8003038:	f7ff ff58 	bl	8002eec <DPC_PWM_Start>
  DPC_PWM_OutDisable();                                                         ///Safe: Disable PWM outputs if enabled 
 800303c:	f7ff ff3a 	bl	8002eb4 <DPC_PWM_OutDisable>
}
 8003040:	bf00      	nop
 8003042:	3780      	adds	r7, #128	; 0x80
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	2000035c 	.word	0x2000035c

0800304c <DPC_PI_Init>:
* @retval None
*
* @note Function valid for STM32G4xx microconroller family  
*/  
void DPC_PI_Init(PI_STRUCT_t *pPI,float Init_Val_Kp,float Init_Val_Ki,float Init_Val_Ts,float Init_PIsat_up, float Init_PIsat_down,FlagStatus satPI_toggle_local,FlagStatus antiwindPI_toggle_local,float Antiwindup_Gain_local)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	; 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	61f8      	str	r0, [r7, #28]
 8003054:	ed87 0a06 	vstr	s0, [r7, #24]
 8003058:	edc7 0a05 	vstr	s1, [r7, #20]
 800305c:	ed87 1a04 	vstr	s2, [r7, #16]
 8003060:	edc7 1a03 	vstr	s3, [r7, #12]
 8003064:	ed87 2a02 	vstr	s4, [r7, #8]
 8003068:	460b      	mov	r3, r1
 800306a:	edc7 2a00 	vstr	s5, [r7]
 800306e:	71fb      	strb	r3, [r7, #7]
 8003070:	4613      	mov	r3, r2
 8003072:	71bb      	strb	r3, [r7, #6]
  pPI->Kp=Init_Val_Kp;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	609a      	str	r2, [r3, #8]
  pPI->Ki=Init_Val_Ki;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	60da      	str	r2, [r3, #12]
  pPI->Ts=Init_Val_Ts;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	611a      	str	r2, [r3, #16]
  pPI->Integral=0;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	615a      	str	r2, [r3, #20]
  pPI->PIout=0;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	619a      	str	r2, [r3, #24]
  pPI->PIsat_up=Init_PIsat_up;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	621a      	str	r2, [r3, #32]
  pPI->PIsat_down=Init_PIsat_down;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
  pPI->error=0;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28
  pPI->Integralout=0;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	62da      	str	r2, [r3, #44]	; 0x2c
  pPI->resetPI=RESET;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pPI->k0=Init_Val_Kp; //K0=Kp
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	635a      	str	r2, [r3, #52]	; 0x34
  pPI->k1=Init_Val_Ki*Init_Val_Ts; //K1=Ki*Ts
 80030c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80030c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80030c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  pPI->satPI_toggle=satPI_toggle_local;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	79fa      	ldrb	r2, [r7, #7]
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pPI->antiwindPI_toggle=antiwindPI_toggle_local;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	79ba      	ldrb	r2, [r7, #6]
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  pPI->Antiwindup_Gain=Antiwindup_Gain_local;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80030e8:	bf00      	nop
 80030ea:	3724      	adds	r7, #36	; 0x24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <PI>:
* @retval float Return output data of PI regulator
*
* @note Function valid for STM32G4xx microconroller family  
*/
float PI(float Ref, float Feed , PI_STRUCT_t *pPI)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80030fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8003102:	6078      	str	r0, [r7, #4]
pPI->Ref=Ref;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	601a      	str	r2, [r3, #0]
pPI->Feed=Feed;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	605a      	str	r2, [r3, #4]

  if(pPI->resetPI==SET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003116:	2b01      	cmp	r3, #1
 8003118:	d104      	bne.n	8003124 <PI+0x30>
  {
    pPI->Integral=0;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	615a      	str	r2, [r3, #20]
 8003122:	e031      	b.n	8003188 <PI+0x94>
  }
  else{
    pPI->error=(float)Ref-(float)Feed;
 8003124:	ed97 7a03 	vldr	s14, [r7, #12]
 8003128:	edd7 7a02 	vldr	s15, [r7, #8]
 800312c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pPI->Integral=pPI->Integral+(pPI->k1*pPI->error)+pPI->Antiwindup_Term;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	ed93 7a05 	vldr	s14, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800314c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	edc3 7a05 	vstr	s15, [r3, #20]
    pPI->Integralout=pPI->Integral;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
    pPI->PIout=(pPI->k0*pPI->error)+pPI->Integralout;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800317e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	edc3 7a06 	vstr	s15, [r3, #24]
  }

  //Start Check Saturation
  if (pPI->satPI_toggle==SET){
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800318e:	2b01      	cmp	r3, #1
 8003190:	d13e      	bne.n	8003210 <PI+0x11c>
    //Saturation
    if(    pPI->PIout>pPI->PIsat_up)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	ed93 7a06 	vldr	s14, [r3, #24]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	edd3 7a08 	vldr	s15, [r3, #32]
 800319e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a6:	dd04      	ble.n	80031b2 <PI+0xbe>
    {
      pPI->PIout_sat=pPI->PIsat_up;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1a      	ldr	r2, [r3, #32]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	61da      	str	r2, [r3, #28]
 80031b0:	e013      	b.n	80031da <PI+0xe6>
    }
    else if(    pPI->PIout<pPI->PIsat_down)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80031be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	d504      	bpl.n	80031d2 <PI+0xde>
    {
      pPI->PIout_sat=pPI->PIsat_down;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	61da      	str	r2, [r3, #28]
 80031d0:	e003      	b.n	80031da <PI+0xe6>
    }
    else {
      pPI->PIout_sat=pPI->PIout;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	61da      	str	r2, [r3, #28]
    }
     
    //Start Check Antiwindup
    if (pPI->antiwindPI_toggle==SET){
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d110      	bne.n	8003206 <PI+0x112>
      //Saturation
      pPI->Antiwindup_Term=(pPI->PIout_sat-pPI->PIout)*pPI->Antiwindup_Gain;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80031f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80031fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8003204:	e00c      	b.n	8003220 <PI+0x12c>
    }
    else {
      pPI->Antiwindup_Term=0;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c
 800320e:	e007      	b.n	8003220 <PI+0x12c>
    }
    //End Check Antiwindup    
  }
  else {
    pPI->PIout_sat=pPI->PIout;  
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	61da      	str	r2, [r3, #28]
    pPI->Antiwindup_Term=0;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  //End Check Saturation
  
  return pPI->PIout_sat;  
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	ee07 3a90 	vmov	s15, r3
}
 8003228:	eeb0 0a67 	vmov.f32	s0, s15
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <DPC_TO_Init>:
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	2300      	movs	r3, #0
 8003240:	71fb      	strb	r3, [r7, #7]
 8003242:	e00d      	b.n	8003260 <DPC_TO_Init+0x28>
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	4a0b      	ldr	r2, [pc, #44]	; (8003274 <DPC_TO_Init+0x3c>)
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	2200      	movs	r2, #0
 800324e:	711a      	strb	r2, [r3, #4]
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	4a08      	ldr	r2, [pc, #32]	; (8003274 <DPC_TO_Init+0x3c>)
 8003254:	2100      	movs	r1, #0
 8003256:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	3301      	adds	r3, #1
 800325e:	71fb      	strb	r3, [r7, #7]
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	2b05      	cmp	r3, #5
 8003264:	d9ee      	bls.n	8003244 <DPC_TO_Init+0xc>
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000134 	.word	0x20000134

08003278 <DPC_TO_Set>:
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	6039      	str	r1, [r7, #0]
 8003282:	71fb      	strb	r3, [r7, #7]
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <DPC_TO_Set+0x48>)
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	791b      	ldrb	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10c      	bne.n	80032b0 <DPC_TO_Set+0x38>
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <DPC_TO_Set+0x48>)
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	2201      	movs	r2, #1
 80032a0:	711a      	strb	r2, [r3, #4]
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	4906      	ldr	r1, [pc, #24]	; (80032c0 <DPC_TO_Set+0x48>)
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000134 	.word	0x20000134

080032c4 <DPC_TO_Check>:
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	4a0f      	ldr	r2, [pc, #60]	; (8003314 <DPC_TO_Check+0x50>)
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	791b      	ldrb	r3, [r3, #4]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d102      	bne.n	80032e6 <DPC_TO_Check+0x22>
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e00e      	b.n	8003304 <DPC_TO_Check+0x40>
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <DPC_TO_Check+0x50>)
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	791b      	ldrb	r3, [r3, #4]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d107      	bne.n	8003304 <DPC_TO_Check+0x40>
 80032f4:	2302      	movs	r3, #2
 80032f6:	73fb      	strb	r3, [r7, #15]
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	4a06      	ldr	r2, [pc, #24]	; (8003314 <DPC_TO_Check+0x50>)
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4413      	add	r3, r2
 8003300:	2200      	movs	r2, #0
 8003302:	711a      	strb	r2, [r3, #4]
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000134 	.word	0x20000134

08003318 <TimeoutMng>:
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	2300      	movs	r3, #0
 8003320:	71fb      	strb	r3, [r7, #7]
 8003322:	e01e      	b.n	8003362 <TimeoutMng+0x4a>
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	4a13      	ldr	r2, [pc, #76]	; (8003374 <TimeoutMng+0x5c>)
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	791b      	ldrb	r3, [r3, #4]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d114      	bne.n	800335c <TimeoutMng+0x44>
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	4a0f      	ldr	r2, [pc, #60]	; (8003374 <TimeoutMng+0x5c>)
 8003336:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <TimeoutMng+0x34>
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	4a0c      	ldr	r2, [pc, #48]	; (8003374 <TimeoutMng+0x5c>)
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	2202      	movs	r2, #2
 8003348:	711a      	strb	r2, [r3, #4]
 800334a:	e007      	b.n	800335c <TimeoutMng+0x44>
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <TimeoutMng+0x5c>)
 8003350:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003354:	3a01      	subs	r2, #1
 8003356:	4907      	ldr	r1, [pc, #28]	; (8003374 <TimeoutMng+0x5c>)
 8003358:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	3301      	adds	r3, #1
 8003360:	71fb      	strb	r3, [r7, #7]
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	2b05      	cmp	r3, #5
 8003366:	d9dd      	bls.n	8003324 <TimeoutMng+0xc>
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	20000134 	.word	0x20000134

08003378 <Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void Park(float alpha, float beta, float theta,float phi, float *d, float *q){
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	; 0x28
 800337c:	af00      	add	r7, sp, #0
 800337e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003382:	edc7 0a04 	vstr	s1, [r7, #16]
 8003386:	ed87 1a03 	vstr	s2, [r7, #12]
 800338a:	edc7 1a02 	vstr	s3, [r7, #8]
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
    float theta_act=theta+phi;
 8003392:	ed97 7a03 	vldr	s14, [r7, #12]
 8003396:	edd7 7a02 	vldr	s15, [r7, #8]
 800339a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosine = FastCos(theta_act);
 80033a2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80033a6:	f7fe fd2f 	bl	8001e08 <FastCos>
 80033aa:	ed87 0a08 	vstr	s0, [r7, #32]
    float sine = FastSin(theta_act);
 80033ae:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80033b2:	f7fe fcdd 	bl	8001d70 <FastSin>
 80033b6:	ed87 0a07 	vstr	s0, [r7, #28]
    *d = alpha*cosine + beta*sine;
 80033ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80033be:	edd7 7a08 	vldr	s15, [r7, #32]
 80033c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033c6:	edd7 6a04 	vldr	s13, [r7, #16]
 80033ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80033ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	edc3 7a00 	vstr	s15, [r3]
    *q = -alpha*sine + beta*cosine;
 80033dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80033e0:	eeb1 7a67 	vneg.f32	s14, s15
 80033e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80033e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033ec:	edd7 6a04 	vldr	s13, [r7, #16]
 80033f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80033f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	edc3 7a00 	vstr	s15, [r3]
}
 8003402:	bf00      	nop
 8003404:	3728      	adds	r7, #40	; 0x28
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <InvPark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void InvPark(float d, float q, float theta, float phi, float *alpha, float *beta){
 800340a:	b580      	push	{r7, lr}
 800340c:	b08a      	sub	sp, #40	; 0x28
 800340e:	af00      	add	r7, sp, #0
 8003410:	ed87 0a05 	vstr	s0, [r7, #20]
 8003414:	edc7 0a04 	vstr	s1, [r7, #16]
 8003418:	ed87 1a03 	vstr	s2, [r7, #12]
 800341c:	edc7 1a02 	vstr	s3, [r7, #8]
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
    float theta_act=theta+phi;
 8003424:	ed97 7a03 	vldr	s14, [r7, #12]
 8003428:	edd7 7a02 	vldr	s15, [r7, #8]
 800342c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003430:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosine = FastCos(theta_act);
 8003434:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003438:	f7fe fce6 	bl	8001e08 <FastCos>
 800343c:	ed87 0a08 	vstr	s0, [r7, #32]
    float sine = FastSin(theta_act);
 8003440:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003444:	f7fe fc94 	bl	8001d70 <FastSin>
 8003448:	ed87 0a07 	vstr	s0, [r7, #28]
    *alpha = d*cosine - q*sine;
 800344c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003450:	edd7 7a08 	vldr	s15, [r7, #32]
 8003454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003458:	edd7 6a04 	vldr	s13, [r7, #16]
 800345c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	edc3 7a00 	vstr	s15, [r3]
    *beta =  d*sine + q*cosine;
 800346e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003472:	edd7 7a07 	vldr	s15, [r7, #28]
 8003476:	ee27 7a27 	vmul.f32	s14, s14, s15
 800347a:	edd7 6a04 	vldr	s13, [r7, #16]
 800347e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	edc3 7a00 	vstr	s15, [r3]
    }
 8003490:	bf00      	nop
 8003492:	3728      	adds	r7, #40	; 0x28
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <Clarke>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void Clarke(float a, float b,float c, float *alpha, float *beta){
 8003498:	b5b0      	push	{r4, r5, r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	ed87 0a05 	vstr	s0, [r7, #20]
 80034a2:	edc7 0a04 	vstr	s1, [r7, #16]
 80034a6:	ed87 1a03 	vstr	s2, [r7, #12]
 80034aa:	60b8      	str	r0, [r7, #8]
 80034ac:	6079      	str	r1, [r7, #4]
    *alpha = 0.666f*(a-(0.5f*b)-(0.5f*c));
 80034ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80034b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80034be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80034c6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80034ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003550 <Clarke+0xb8>
 80034d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	edc3 7a00 	vstr	s15, [r3]
    *beta = 0.666666*(0.866025*b - 0.866025*c);
 80034e0:	6938      	ldr	r0, [r7, #16]
 80034e2:	f7fc fffd 	bl	80004e0 <__aeabi_f2d>
 80034e6:	a316      	add	r3, pc, #88	; (adr r3, 8003540 <Clarke+0xa8>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fd f850 	bl	8000590 <__aeabi_dmul>
 80034f0:	4603      	mov	r3, r0
 80034f2:	460c      	mov	r4, r1
 80034f4:	4625      	mov	r5, r4
 80034f6:	461c      	mov	r4, r3
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7fc fff1 	bl	80004e0 <__aeabi_f2d>
 80034fe:	a310      	add	r3, pc, #64	; (adr r3, 8003540 <Clarke+0xa8>)
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	f7fd f844 	bl	8000590 <__aeabi_dmul>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4620      	mov	r0, r4
 800350e:	4629      	mov	r1, r5
 8003510:	f7fc fe86 	bl	8000220 <__aeabi_dsub>
 8003514:	4603      	mov	r3, r0
 8003516:	460c      	mov	r4, r1
 8003518:	4618      	mov	r0, r3
 800351a:	4621      	mov	r1, r4
 800351c:	a30a      	add	r3, pc, #40	; (adr r3, 8003548 <Clarke+0xb0>)
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f7fd f835 	bl	8000590 <__aeabi_dmul>
 8003526:	4603      	mov	r3, r0
 8003528:	460c      	mov	r4, r1
 800352a:	4618      	mov	r0, r3
 800352c:	4621      	mov	r1, r4
 800352e:	f7fd fa61 	bl	80009f4 <__aeabi_d2f>
 8003532:	4602      	mov	r2, r0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	601a      	str	r2, [r3, #0]
    }
 8003538:	bf00      	nop
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bdb0      	pop	{r4, r5, r7, pc}
 8003540:	0f9096bc 	.word	0x0f9096bc
 8003544:	3febb67a 	.word	0x3febb67a
 8003548:	ef6b5d46 	.word	0xef6b5d46
 800354c:	3fe55553 	.word	0x3fe55553
 8003550:	3f2a7efa 	.word	0x3f2a7efa

08003554 <InvClarke>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void InvClarke(float alpha, float beta, float *a, float *b, float *c){
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	ed87 0a05 	vstr	s0, [r7, #20]
 800355e:	edc7 0a04 	vstr	s1, [r7, #16]
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
    *a = alpha;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	601a      	str	r2, [r3, #0]
    *b = 0.5f*(-alpha + 1.73205080757f*beta);
 800356e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003572:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80035c4 <InvClarke+0x70>
 8003576:	ee27 7a87 	vmul.f32	s14, s15, s14
 800357a:	edd7 7a05 	vldr	s15, [r7, #20]
 800357e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003582:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	edc3 7a00 	vstr	s15, [r3]
    *c = 0.5f*(-alpha - 1.73205080757f*beta);
 8003590:	edd7 7a05 	vldr	s15, [r7, #20]
 8003594:	eeb1 7a67 	vneg.f32	s14, s15
 8003598:	edd7 7a04 	vldr	s15, [r7, #16]
 800359c:	eddf 6a09 	vldr	s13, [pc, #36]	; 80035c4 <InvClarke+0x70>
 80035a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	edc3 7a00 	vstr	s15, [r3]
} 
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	3fddb3d7 	.word	0x3fddb3d7

080035c8 <Clarke_Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void Clarke_Park(float a, float b, float c, float theta,float phi, float *d, float *q,float *o){
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08c      	sub	sp, #48	; 0x30
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	ed87 0a07 	vstr	s0, [r7, #28]
 80035d2:	edc7 0a06 	vstr	s1, [r7, #24]
 80035d6:	ed87 1a05 	vstr	s2, [r7, #20]
 80035da:	edc7 1a04 	vstr	s3, [r7, #16]
 80035de:	ed87 2a03 	vstr	s4, [r7, #12]
 80035e2:	60b8      	str	r0, [r7, #8]
 80035e4:	6079      	str	r1, [r7, #4]
 80035e6:	603a      	str	r2, [r7, #0]
float beta_sub;
float d_sub;
float q_sub;
//float o_sub;  
  
Clarke(a, b, c, &alpha_sub, &beta_sub);
 80035e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	ed97 1a05 	vldr	s2, [r7, #20]
 80035f8:	edd7 0a06 	vldr	s1, [r7, #24]
 80035fc:	ed97 0a07 	vldr	s0, [r7, #28]
 8003600:	f7ff ff4a 	bl	8003498 <Clarke>
Park(alpha_sub, beta_sub, theta,phi, &d_sub, &q_sub);
 8003604:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003608:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800360c:	f107 0220 	add.w	r2, r7, #32
 8003610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	edd7 1a03 	vldr	s3, [r7, #12]
 800361c:	ed97 1a04 	vldr	s2, [r7, #16]
 8003620:	eef0 0a47 	vmov.f32	s1, s14
 8003624:	eeb0 0a67 	vmov.f32	s0, s15
 8003628:	f7ff fea6 	bl	8003378 <Park>


*d=d_sub;
 800362c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	601a      	str	r2, [r3, #0]
*q=q_sub;
 8003632:	6a3a      	ldr	r2, [r7, #32]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	601a      	str	r2, [r3, #0]
//*o=o_sub=0;

    
    
}
 8003638:	bf00      	nop
 800363a:	3730      	adds	r7, #48	; 0x30
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <Run_ClarkePark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void Run_ClarkePark(TRANSFORM_ABC_t* abc_sub,float theta_sub,float phi_sub,TRANSFORM_QDO_t* out_cl_pa_sub ){
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	ed87 0a02 	vstr	s0, [r7, #8]
 800364c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
 
float pll_d_sub;
float pll_q_sub;
float pll_o_sub;
 
  Clarke_Park(abc_sub->axA, abc_sub->axB, abc_sub->axC,theta_sub,phi_sub,&pll_d_sub,&pll_q_sub,&pll_o_sub);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	ed93 7a01 	vldr	s14, [r3, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	edd3 6a02 	vldr	s13, [r3, #8]
 8003664:	f107 0214 	add.w	r2, r7, #20
 8003668:	f107 0118 	add.w	r1, r7, #24
 800366c:	f107 031c 	add.w	r3, r7, #28
 8003670:	4618      	mov	r0, r3
 8003672:	ed97 2a01 	vldr	s4, [r7, #4]
 8003676:	edd7 1a02 	vldr	s3, [r7, #8]
 800367a:	eeb0 1a66 	vmov.f32	s2, s13
 800367e:	eef0 0a47 	vmov.f32	s1, s14
 8003682:	eeb0 0a67 	vmov.f32	s0, s15
 8003686:	f7ff ff9f 	bl	80035c8 <Clarke_Park>
  
  
  out_cl_pa_sub->axd=pll_d_sub;
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	601a      	str	r2, [r3, #0]
  out_cl_pa_sub->axq=pll_q_sub;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	605a      	str	r2, [r3, #4]
  out_cl_pa_sub->axo=pll_o_sub;
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	609a      	str	r2, [r3, #8]
}
 800369c:	bf00      	nop
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <inv_Clarke_Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void inv_Clarke_Park(float d, float q, float o, float theta,float phi, float *a, float *b,float *c){
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08e      	sub	sp, #56	; 0x38
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	ed87 0a07 	vstr	s0, [r7, #28]
 80036ae:	edc7 0a06 	vstr	s1, [r7, #24]
 80036b2:	ed87 1a05 	vstr	s2, [r7, #20]
 80036b6:	edc7 1a04 	vstr	s3, [r7, #16]
 80036ba:	ed87 2a03 	vstr	s4, [r7, #12]
 80036be:	60b8      	str	r0, [r7, #8]
 80036c0:	6079      	str	r1, [r7, #4]
 80036c2:	603a      	str	r2, [r7, #0]
float beta_sub;
float a_sub;
float b_sub;
float c_sub;

InvPark(d, q, theta,phi,&alpha_sub, &beta_sub);
 80036c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80036c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	edd7 1a03 	vldr	s3, [r7, #12]
 80036d4:	ed97 1a04 	vldr	s2, [r7, #16]
 80036d8:	edd7 0a06 	vldr	s1, [r7, #24]
 80036dc:	ed97 0a07 	vldr	s0, [r7, #28]
 80036e0:	f7ff fe93 	bl	800340a <InvPark>
InvClarke(alpha_sub, beta_sub, &a_sub, &b_sub, &c_sub);
 80036e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80036e8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80036ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80036f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80036f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036f8:	4618      	mov	r0, r3
 80036fa:	eef0 0a47 	vmov.f32	s1, s14
 80036fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003702:	f7ff ff27 	bl	8003554 <InvClarke>

*a=a_sub;
 8003706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	601a      	str	r2, [r3, #0]
*b=b_sub;
 800370c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	601a      	str	r2, [r3, #0]
*c=c_sub;
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	601a      	str	r2, [r3, #0]
} 
 8003718:	bf00      	nop
 800371a:	3738      	adds	r7, #56	; 0x38
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <Run_Inv_ClarkePark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void Run_Inv_ClarkePark(TRANSFORM_QDO_t* dqo_sub,float theta_sub,float phi_sub,TRANSFORM_ABC_t* out_inv_cl_pa_sub ){
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	ed87 0a02 	vstr	s0, [r7, #8]
 800372c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
 
float a_sub;
float b_sub;
float c_sub;
 
  inv_Clarke_Park(dqo_sub->axd, dqo_sub->axq, dqo_sub->axo,theta_sub,phi_sub,&a_sub,&b_sub,&c_sub);  
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	edd3 7a00 	vldr	s15, [r3]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	ed93 7a01 	vldr	s14, [r3, #4]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	edd3 6a02 	vldr	s13, [r3, #8]
 8003744:	f107 0214 	add.w	r2, r7, #20
 8003748:	f107 0118 	add.w	r1, r7, #24
 800374c:	f107 031c 	add.w	r3, r7, #28
 8003750:	4618      	mov	r0, r3
 8003752:	ed97 2a01 	vldr	s4, [r7, #4]
 8003756:	edd7 1a02 	vldr	s3, [r7, #8]
 800375a:	eeb0 1a66 	vmov.f32	s2, s13
 800375e:	eef0 0a47 	vmov.f32	s1, s14
 8003762:	eeb0 0a67 	vmov.f32	s0, s15
 8003766:	f7ff ff9d 	bl	80036a4 <inv_Clarke_Park>
  
  out_inv_cl_pa_sub->axA=a_sub;
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	601a      	str	r2, [r3, #0]
  out_inv_cl_pa_sub->axB=b_sub;
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	605a      	str	r2, [r3, #4]
  out_inv_cl_pa_sub->axC=c_sub;
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	609a      	str	r2, [r3, #8]
}
 800377c:	bf00      	nop
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <ADC_Voltage_AC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC_Voltage_AC_ProcessData(uint32_t* p_Data_Sub, VoltageAC_ADC_NORM_Struct* VOLTAGE_ADC_AC_IN_NORM_Sub){
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phA=((float)(p_Data_Sub[0])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800379a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003804 <ADC_Voltage_AC_ProcessData+0x80>
 800379e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phB=((float)(p_Data_Sub[1])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037be:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003804 <ADC_Voltage_AC_ProcessData+0x80>
 80037c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	edc3 7a01 	vstr	s15, [r3, #4]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phC=((float)(p_Data_Sub[2])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3308      	adds	r3, #8
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037e2:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003804 <ADC_Voltage_AC_ProcessData+0x80>
 80037e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	45000000 	.word	0x45000000

08003808 <ADC2Phy_Voltage_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_Voltage_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, VoltageAC_ADC_NORM_Struct* VOLTAGE_ADC_AC_IN_NORM_Sub){
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  
  float B_Vac=DPC_ADC_Conf->B_Vac;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	617b      	str	r3, [r7, #20]
//  float G_Vac=DPC_ADC_Conf->G_Vac;
  float invG_Vac=DPC_ADC_Conf->invG_Vac;  
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	613b      	str	r3, [r7, #16]
  
  VOLTAGE_ADC_AC_IN_NORM_Sub->phA=((float)((int16_t)p_Data_Sub[0]-B_Vac)*(float)(invG_Vac));    
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b21b      	sxth	r3, r3
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800382e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003832:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003836:	edd7 7a04 	vldr	s15, [r7, #16]
 800383a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phB=((float)((int16_t)p_Data_Sub[1]-B_Vac)*(float)(invG_Vac));    
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	3304      	adds	r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	b21b      	sxth	r3, r3
 800384c:	ee07 3a90 	vmov	s15, r3
 8003850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003854:	edd7 7a05 	vldr	s15, [r7, #20]
 8003858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800385c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	edc3 7a01 	vstr	s15, [r3, #4]
  VOLTAGE_ADC_AC_IN_NORM_Sub->phC=((float)((int16_t)p_Data_Sub[2]-B_Vac)*(float)(invG_Vac));    
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3308      	adds	r3, #8
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	b21b      	sxth	r3, r3
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800387a:	edd7 7a05 	vldr	s15, [r7, #20]
 800387e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003882:	edd7 7a04 	vldr	s15, [r7, #16]
 8003886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <ADC_Voltage_DC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC_Voltage_DC_ProcessData(uint32_t* p_Data_Sub, VoltageDC_ADC_NORM_Struct* VOLTAGE_ADC_DC_IN_NORM_Sub){
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_pos=((float)(p_Data_Sub[0])/(float)(1<<11));    //(float)(1<<11)==(2.44140625e-4*2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038b2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80038e8 <ADC_Voltage_DC_ProcessData+0x4c>
 80038b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_neg=((float)(p_Data_Sub[1])/(float)(1<<11));    //(float)(1<<11)==(2.44140625e-4*2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038ce:	eddf 6a06 	vldr	s13, [pc, #24]	; 80038e8 <ADC_Voltage_DC_ProcessData+0x4c>
 80038d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	edc3 7a01 	vstr	s15, [r3, #4]
}  
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	45000000 	.word	0x45000000

080038ec <ADC2Phy_DC_Voltage_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_DC_Voltage_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, VoltageDC_ADC_NORM_Struct* VOLTAGE_ADC_DC_IN_NORM_Sub){
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  
  float B_Vdc=DPC_ADC_Conf->B_Vdc;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	617b      	str	r3, [r7, #20]
//  float G_Vdc=DPC_ADC_Conf->G_Vdc;
  float invG_Vdc=DPC_ADC_Conf->invG_Vdc;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	613b      	str	r3, [r7, #16]
  
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_pos=((float)((int16_t)p_Data_Sub[0]-B_Vdc)*(float)(invG_Vdc)); 
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	b21b      	sxth	r3, r3
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003912:	edd7 7a05 	vldr	s15, [r7, #20]
 8003916:	ee37 7a67 	vsub.f32	s14, s14, s15
 800391a:	edd7 7a04 	vldr	s15, [r7, #16]
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	edc3 7a00 	vstr	s15, [r3]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_neg=((float)((int16_t)p_Data_Sub[1]-100)*(float)(invG_Vdc));
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	3304      	adds	r3, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	b21b      	sxth	r3, r3
 8003930:	3b64      	subs	r3, #100	; 0x64
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800393a:	edd7 7a04 	vldr	s15, [r7, #16]
 800393e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	edc3 7a01 	vstr	s15, [r3, #4]
  VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_tot=VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_pos+VOLTAGE_ADC_DC_IN_NORM_Sub->Vdc_neg;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	ed93 7a00 	vldr	s14, [r3]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	edd3 7a01 	vldr	s15, [r3, #4]
 8003954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	edc3 7a02 	vstr	s15, [r3, #8]
  
}  
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <ADC_Current_AC_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    
void ADC_Current_AC_ProcessData(uint32_t* p_Data_Sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub){
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  CURRENT_ADC_AC_IN_NORM_Sub->phA=((float)(p_Data_Sub[0])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003982:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80039ec <ADC_Current_AC_ProcessData+0x80>
 8003986:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800398a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800398e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	edc3 7a00 	vstr	s15, [r3]
  CURRENT_ADC_AC_IN_NORM_Sub->phB=((float)(p_Data_Sub[1])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039a6:	eddf 6a11 	vldr	s13, [pc, #68]	; 80039ec <ADC_Current_AC_ProcessData+0x80>
 80039aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	edc3 7a01 	vstr	s15, [r3, #4]
  CURRENT_ADC_AC_IN_NORM_Sub->phC=((float)(p_Data_Sub[2])/(float)(1<<11)-1);    //(float)(1<<11)==(2.44140625e-4*2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3308      	adds	r3, #8
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039ca:	eddf 6a08 	vldr	s13, [pc, #32]	; 80039ec <ADC_Current_AC_ProcessData+0x80>
 80039ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	45000000 	.word	0x45000000

080039f0 <ADC_Current_AC_RAW_ProcessData>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void ADC_Current_AC_RAW_ProcessData(uint32_t* p_Data_Sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub){
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  CURRENT_ADC_AC_IN_NORM_Sub->phA=((float)(p_Data_Sub[0]));    //
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	edc3 7a00 	vstr	s15, [r3]
  CURRENT_ADC_AC_IN_NORM_Sub->phB=((float)(p_Data_Sub[1]));    //
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	edc3 7a01 	vstr	s15, [r3, #4]
  CURRENT_ADC_AC_IN_NORM_Sub->phC=((float)(p_Data_Sub[2]));    //
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3308      	adds	r3, #8
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <ADC2Phy_Current_ProcessData>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */     
void ADC2Phy_Current_ProcessData(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,uint32_t* p_Data_Sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub){
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  
  float B_Iac=DPC_ADC_Conf->B_Iac;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	617b      	str	r3, [r7, #20]
//  float G_Iac=DPC_ADC_Conf->G_Iac;
  float invG_Iac=DPC_ADC_Conf->invG_Iac;  
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	613b      	str	r3, [r7, #16]
  
  CURRENT_ADC_AC_IN_NORM_Sub->phA=((float)((int16_t)p_Data_Sub[0]-B_Iac)*(float)(invG_Iac));    
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	b21b      	sxth	r3, r3
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a66:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	edc3 7a00 	vstr	s15, [r3]
  CURRENT_ADC_AC_IN_NORM_Sub->phB=((float)((int16_t)p_Data_Sub[1]-B_Iac)*(float)(invG_Iac));    
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	b21b      	sxth	r3, r3
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a94:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	edc3 7a01 	vstr	s15, [r3, #4]
  CURRENT_ADC_AC_IN_NORM_Sub->phC=((float)((int16_t)p_Data_Sub[2]-B_Iac)*(float)(invG_Iac));    
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	b21b      	sxth	r3, r3
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ab2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aba:	edd7 7a04 	vldr	s15, [r7, #16]
 8003abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <ADC2Phy_RMS_Current_ProcessData>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void ADC2Phy_RMS_Current_ProcessData(CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_PHY,CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_PHY_MIN, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_PHY_MAX, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_PHY_RMS, uint32_t* Period_ADR){
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]

	float SQRT_TWO;
	uint32_t Period;

	Period = *Period_ADR;
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	617b      	str	r3, [r7, #20]
	SQRT_TWO = 1.41;
 8003ae8:	4b79      	ldr	r3, [pc, #484]	; (8003cd0 <ADC2Phy_RMS_Current_ProcessData+0x1fc>)
 8003aea:	613b      	str	r3, [r7, #16]

	if (Period==0){
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d117      	bne.n	8003b22 <ADC2Phy_RMS_Current_ProcessData+0x4e>
		CURRENT_ADC_AC_IN_PHY_MAX->phA = 0;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
		CURRENT_ADC_AC_IN_PHY_MAX->phB = 0;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	605a      	str	r2, [r3, #4]
		CURRENT_ADC_AC_IN_PHY_MAX->phC = 0;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]

		CURRENT_ADC_AC_IN_PHY_MIN->phA = 0;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
		CURRENT_ADC_AC_IN_PHY_MIN->phB = 0;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	605a      	str	r2, [r3, #4]
		CURRENT_ADC_AC_IN_PHY_MIN->phC = 0;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	609a      	str	r2, [r3, #8]
	}

	if (CURRENT_ADC_AC_IN_PHY->phA >  CURRENT_ADC_AC_IN_PHY_MAX->phA){
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	ed93 7a00 	vldr	s14, [r3]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b36:	dd03      	ble.n	8003b40 <ADC2Phy_RMS_Current_ProcessData+0x6c>
	  CURRENT_ADC_AC_IN_PHY_MAX->phA = CURRENT_ADC_AC_IN_PHY->phA;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	601a      	str	r2, [r3, #0]
	}
	if (CURRENT_ADC_AC_IN_PHY->phA <  CURRENT_ADC_AC_IN_PHY_MIN->phA){
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	ed93 7a00 	vldr	s14, [r3]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b54:	d503      	bpl.n	8003b5e <ADC2Phy_RMS_Current_ProcessData+0x8a>
	  CURRENT_ADC_AC_IN_PHY_MIN->phA = CURRENT_ADC_AC_IN_PHY->phA;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	601a      	str	r2, [r3, #0]
	}

  	if (CURRENT_ADC_AC_IN_PHY->phB >  CURRENT_ADC_AC_IN_PHY_MAX->phB){
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b72:	dd03      	ble.n	8003b7c <ADC2Phy_RMS_Current_ProcessData+0xa8>
	  CURRENT_ADC_AC_IN_PHY_MAX->phB = CURRENT_ADC_AC_IN_PHY->phB;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	605a      	str	r2, [r3, #4]
	}
	if (CURRENT_ADC_AC_IN_PHY->phB <  CURRENT_ADC_AC_IN_PHY_MIN->phB){
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b90:	d503      	bpl.n	8003b9a <ADC2Phy_RMS_Current_ProcessData+0xc6>
	  CURRENT_ADC_AC_IN_PHY_MIN->phB = CURRENT_ADC_AC_IN_PHY->phB;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	605a      	str	r2, [r3, #4]
	}

    if (CURRENT_ADC_AC_IN_PHY->phC >  CURRENT_ADC_AC_IN_PHY_MAX->phC){
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bae:	dd03      	ble.n	8003bb8 <ADC2Phy_RMS_Current_ProcessData+0xe4>
	  CURRENT_ADC_AC_IN_PHY_MAX->phC = CURRENT_ADC_AC_IN_PHY->phC;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
	}
	if (CURRENT_ADC_AC_IN_PHY->phC <  CURRENT_ADC_AC_IN_PHY_MIN->phC){
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bcc:	d503      	bpl.n	8003bd6 <ADC2Phy_RMS_Current_ProcessData+0x102>
	  CURRENT_ADC_AC_IN_PHY_MIN->phC = CURRENT_ADC_AC_IN_PHY->phC;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	609a      	str	r2, [r3, #8]
	}

	Period++;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	617b      	str	r3, [r7, #20]
	if (Period>=200) {
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2bc7      	cmp	r3, #199	; 0xc7
 8003be0:	d96d      	bls.n	8003cbe <ADC2Phy_RMS_Current_ProcessData+0x1ea>
		Period=0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]

		if (CURRENT_ADC_AC_IN_PHY_MAX->phA > - CURRENT_ADC_AC_IN_PHY_MIN->phA ){
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	ed93 7a00 	vldr	s14, [r3]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	edd3 7a00 	vldr	s15, [r3]
 8003bf2:	eef1 7a67 	vneg.f32	s15, s15
 8003bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfe:	dd0a      	ble.n	8003c16 <ADC2Phy_RMS_Current_ProcessData+0x142>
			CURRENT_ADC_AC_IN_PHY_RMS->phA = (float) (CURRENT_ADC_AC_IN_PHY_MAX->phA / SQRT_TWO);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	edd3 6a00 	vldr	s13, [r3]
 8003c06:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	edc3 7a00 	vstr	s15, [r3]
 8003c14:	e00b      	b.n	8003c2e <ADC2Phy_RMS_Current_ProcessData+0x15a>
		}
		else {
			CURRENT_ADC_AC_IN_PHY_RMS->phA = (float) (-CURRENT_ADC_AC_IN_PHY_MIN->phA / SQRT_TWO);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	edd3 7a00 	vldr	s15, [r3]
 8003c1c:	eef1 6a67 	vneg.f32	s13, s15
 8003c20:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	edc3 7a00 	vstr	s15, [r3]
		}

		if (CURRENT_ADC_AC_IN_PHY_MAX->phB > - CURRENT_ADC_AC_IN_PHY_MIN->phB ){
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c3a:	eef1 7a67 	vneg.f32	s15, s15
 8003c3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c46:	dd0a      	ble.n	8003c5e <ADC2Phy_RMS_Current_ProcessData+0x18a>
			CURRENT_ADC_AC_IN_PHY_RMS->phB = (float) (CURRENT_ADC_AC_IN_PHY_MAX->phB / SQRT_TWO);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8003c4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	edc3 7a01 	vstr	s15, [r3, #4]
 8003c5c:	e00b      	b.n	8003c76 <ADC2Phy_RMS_Current_ProcessData+0x1a2>
		}
		else {
			CURRENT_ADC_AC_IN_PHY_RMS->phB = (float) (-CURRENT_ADC_AC_IN_PHY_MIN->phB / SQRT_TWO);
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c64:	eef1 6a67 	vneg.f32	s13, s15
 8003c68:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	edc3 7a01 	vstr	s15, [r3, #4]
		}

		if (CURRENT_ADC_AC_IN_PHY_MAX->phC > - CURRENT_ADC_AC_IN_PHY_MIN->phC ){
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c82:	eef1 7a67 	vneg.f32	s15, s15
 8003c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8e:	dd0a      	ble.n	8003ca6 <ADC2Phy_RMS_Current_ProcessData+0x1d2>
			CURRENT_ADC_AC_IN_PHY_RMS->phC = (float) (CURRENT_ADC_AC_IN_PHY_MAX->phC / SQRT_TWO);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	edd3 6a02 	vldr	s13, [r3, #8]
 8003c96:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	edc3 7a02 	vstr	s15, [r3, #8]
 8003ca4:	e00b      	b.n	8003cbe <ADC2Phy_RMS_Current_ProcessData+0x1ea>
		}
		else {
			CURRENT_ADC_AC_IN_PHY_RMS->phC = (float) (-CURRENT_ADC_AC_IN_PHY_MIN->phC / SQRT_TWO);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cac:	eef1 6a67 	vneg.f32	s13, s15
 8003cb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	edc3 7a02 	vstr	s15, [r3, #8]
		}

	}
	*Period_ADR=Period;
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	601a      	str	r2, [r3, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	3fb47ae1 	.word	0x3fb47ae1

08003cd4 <DPC_ADC_Init>:
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    

void DPC_ADC_Init(DPC_ADC_Conf_TypeDef *DPC_ADC_Conf,float G_Vac,float B_Vac,float G_Iac,float B_Iac,float G_Vdc,float B_Vdc,float G_Idc,float B_Idc){
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6278      	str	r0, [r7, #36]	; 0x24
 8003cdc:	ed87 0a08 	vstr	s0, [r7, #32]
 8003ce0:	edc7 0a07 	vstr	s1, [r7, #28]
 8003ce4:	ed87 1a06 	vstr	s2, [r7, #24]
 8003ce8:	edc7 1a05 	vstr	s3, [r7, #20]
 8003cec:	ed87 2a04 	vstr	s4, [r7, #16]
 8003cf0:	edc7 2a03 	vstr	s5, [r7, #12]
 8003cf4:	ed87 3a02 	vstr	s6, [r7, #8]
 8003cf8:	edc7 3a01 	vstr	s7, [r7, #4]
  
	DPC_ADC_Default_Init();
 8003cfc:	f000 f844 	bl	8003d88 <DPC_ADC_Default_Init>

	DPC_ADC_Conf->B_Vac=B_Vac;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	609a      	str	r2, [r3, #8]
	DPC_ADC_Conf->G_Vac=G_Vac;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	6a3a      	ldr	r2, [r7, #32]
 8003d0a:	601a      	str	r2, [r3, #0]
	DPC_ADC_Conf->invG_Vac=(float)(1.0/G_Vac);
 8003d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d10:	ed97 7a08 	vldr	s14, [r7, #32]
 8003d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	edc3 7a01 	vstr	s15, [r3, #4]

	DPC_ADC_Conf->B_Vdc=B_Vdc;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	621a      	str	r2, [r3, #32]
	DPC_ADC_Conf->G_Vdc=G_Vdc;
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	619a      	str	r2, [r3, #24]
	DPC_ADC_Conf->invG_Vdc=(float)(1.0/G_Vdc);
 8003d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	edc3 7a07 	vstr	s15, [r3, #28]

	DPC_ADC_Conf->B_Iac=B_Iac;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	615a      	str	r2, [r3, #20]
	DPC_ADC_Conf->G_Iac=G_Iac;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	60da      	str	r2, [r3, #12]
	DPC_ADC_Conf->invG_Iac=(float)(1.0/G_Iac);
 8003d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003d50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	edc3 7a04 	vstr	s15, [r3, #16]

	DPC_ADC_Conf->B_Idc=B_Idc;
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c
	DPC_ADC_Conf->G_Idc=G_Idc;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24
	DPC_ADC_Conf->invG_Idc=(float)(1.0/G_Idc);
 8003d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	DPC_ADC_Conf->DPC_ADC_Conf_Complete=SET;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
}
 8003d80:	bf00      	nop
 8003d82:	3728      	adds	r7, #40	; 0x28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <DPC_ADC_Default_Init>:
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family
  */

void DPC_ADC_Default_Init(){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b092      	sub	sp, #72	; 0x48
 8003d8c:	af00      	add	r7, sp, #0

	  ADC_MultiModeTypeDef multimode = {0};
 8003d8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	605a      	str	r2, [r3, #4]
 8003d98:	609a      	str	r2, [r3, #8]
	  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003d9a:	f107 0320 	add.w	r3, r7, #32
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	609a      	str	r2, [r3, #8]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	611a      	str	r2, [r3, #16]
 8003daa:	615a      	str	r2, [r3, #20]
 8003dac:	619a      	str	r2, [r3, #24]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8003dae:	463b      	mov	r3, r7
 8003db0:	2220      	movs	r2, #32
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f009 fb68 	bl	800d48a <memset>

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8003dba:	4b79      	ldr	r3, [pc, #484]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003dbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003dc0:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003dc2:	4b77      	ldr	r3, [pc, #476]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003dc4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003dc8:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003dca:	4b75      	ldr	r3, [pc, #468]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003dd0:	4b73      	ldr	r3, [pc, #460]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	60da      	str	r2, [r3, #12]
	  hadc1.Init.GainCompensation = 0;
 8003dd6:	4b72      	ldr	r3, [pc, #456]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003ddc:	4b70      	ldr	r3, [pc, #448]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	615a      	str	r2, [r3, #20]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003de2:	4b6f      	ldr	r3, [pc, #444]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003de4:	2204      	movs	r2, #4
 8003de6:	619a      	str	r2, [r3, #24]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003de8:	4b6d      	ldr	r3, [pc, #436]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	771a      	strb	r2, [r3, #28]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8003dee:	4b6c      	ldr	r3, [pc, #432]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	775a      	strb	r2, [r3, #29]
	  hadc1.Init.NbrOfConversion = 8;
 8003df4:	4b6a      	ldr	r3, [pc, #424]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003df6:	2208      	movs	r2, #8
 8003df8:	621a      	str	r2, [r3, #32]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003dfa:	4b69      	ldr	r3, [pc, #420]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e02:	4b67      	ldr	r3, [pc, #412]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e08:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003e0e:	4b64      	ldr	r3, [pc, #400]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003e16:	4b62      	ldr	r3, [pc, #392]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc1.Init.OversamplingMode = ENABLE;
 8003e1c:	4b60      	ldr	r3, [pc, #384]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8003e24:	4b5e      	ldr	r3, [pc, #376]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003e26:	2208      	movs	r2, #8
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8003e2a:	4b5d      	ldr	r3, [pc, #372]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003e2c:	2260      	movs	r2, #96	; 0x60
 8003e2e:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003e30:	4b5b      	ldr	r3, [pc, #364]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003e36:	4b5a      	ldr	r3, [pc, #360]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e3c:	4858      	ldr	r0, [pc, #352]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003e3e:	f002 fcff 	bl	8006840 <HAL_ADC_Init>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <DPC_ADC_Default_Init+0xc4>
	  {
	    Error_Handler();
 8003e48:	f001 fed6 	bl	8005bf8 <Error_Handler>
	  }
	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003e50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e54:	4619      	mov	r1, r3
 8003e56:	4852      	ldr	r0, [pc, #328]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003e58:	f003 feec 	bl	8007c34 <HAL_ADCEx_MultiModeConfigChannel>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <DPC_ADC_Default_Init+0xde>
	  {
	    Error_Handler();
 8003e62:	f001 fec9 	bl	8005bf8 <Error_Handler>
	  }
	  /** Configure Analog WatchDog 1
	  */
	  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003e66:	4b4f      	ldr	r3, [pc, #316]	; (8003fa4 <DPC_ADC_Default_Init+0x21c>)
 8003e68:	623b      	str	r3, [r7, #32]
	  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8003e6a:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
	  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 8003e70:	4b4d      	ldr	r3, [pc, #308]	; (8003fa8 <DPC_ADC_Default_Init+0x220>)
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
	  AnalogWDGConfig.ITMode = DISABLE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	  AnalogWDGConfig.HighThreshold = 0x0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	633b      	str	r3, [r7, #48]	; 0x30
	  AnalogWDGConfig.LowThreshold = 0x0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
	  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8003e86:	f107 0320 	add.w	r3, r7, #32
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4844      	ldr	r0, [pc, #272]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003e8e:	f003 fbc1 	bl	8007614 <HAL_ADC_AnalogWDGConfig>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <DPC_ADC_Default_Init+0x114>
	  {
	    Error_Handler();
 8003e98:	f001 feae 	bl	8005bf8 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8003e9c:	4b42      	ldr	r3, [pc, #264]	; (8003fa8 <DPC_ADC_Default_Init+0x220>)
 8003e9e:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ea0:	2306      	movs	r3, #6
 8003ea2:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ea8:	237f      	movs	r3, #127	; 0x7f
 8003eaa:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003eac:	2304      	movs	r3, #4
 8003eae:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003eb4:	463b      	mov	r3, r7
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4839      	ldr	r0, [pc, #228]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003eba:	f002 ff6d 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <DPC_ADC_Default_Init+0x140>
	  {
	    Error_Handler();
 8003ec4:	f001 fe98 	bl	8005bf8 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8003ec8:	4b38      	ldr	r3, [pc, #224]	; (8003fac <DPC_ADC_Default_Init+0x224>)
 8003eca:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003ecc:	230c      	movs	r3, #12
 8003ece:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ed0:	463b      	mov	r3, r7
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4832      	ldr	r0, [pc, #200]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003ed6:	f002 ff5f 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <DPC_ADC_Default_Init+0x15c>
	  {
	    Error_Handler();
 8003ee0:	f001 fe8a 	bl	8005bf8 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8003ee4:	4b32      	ldr	r3, [pc, #200]	; (8003fb0 <DPC_ADC_Default_Init+0x228>)
 8003ee6:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003ee8:	2312      	movs	r3, #18
 8003eea:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003eec:	463b      	mov	r3, r7
 8003eee:	4619      	mov	r1, r3
 8003ef0:	482b      	ldr	r0, [pc, #172]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003ef2:	f002 ff51 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <DPC_ADC_Default_Init+0x178>
	  {
	    Error_Handler();
 8003efc:	f001 fe7c 	bl	8005bf8 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8003f00:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <DPC_ADC_Default_Init+0x22c>)
 8003f02:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003f04:	2318      	movs	r3, #24
 8003f06:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f08:	463b      	mov	r3, r7
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4824      	ldr	r0, [pc, #144]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003f0e:	f002 ff43 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <DPC_ADC_Default_Init+0x194>
	  {
	    Error_Handler();
 8003f18:	f001 fe6e 	bl	8005bf8 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_5;
 8003f1c:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <DPC_ADC_Default_Init+0x230>)
 8003f1e:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f24:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f26:	463b      	mov	r3, r7
 8003f28:	4619      	mov	r1, r3
 8003f2a:	481d      	ldr	r0, [pc, #116]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003f2c:	f002 ff34 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <DPC_ADC_Default_Init+0x1b2>
	  {
	    Error_Handler();
 8003f36:	f001 fe5f 	bl	8005bf8 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8003f3a:	4b20      	ldr	r3, [pc, #128]	; (8003fbc <DPC_ADC_Default_Init+0x234>)
 8003f3c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_6;
 8003f3e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003f42:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f44:	463b      	mov	r3, r7
 8003f46:	4619      	mov	r1, r3
 8003f48:	4815      	ldr	r0, [pc, #84]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003f4a:	f002 ff25 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <DPC_ADC_Default_Init+0x1d0>
	  {
	    Error_Handler();
 8003f54:	f001 fe50 	bl	8005bf8 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 8003f58:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <DPC_ADC_Default_Init+0x238>)
 8003f5a:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_7;
 8003f5c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8003f60:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f62:	463b      	mov	r3, r7
 8003f64:	4619      	mov	r1, r3
 8003f66:	480e      	ldr	r0, [pc, #56]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003f68:	f002 ff16 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <DPC_ADC_Default_Init+0x1ee>
	  {
	    Error_Handler();
 8003f72:	f001 fe41 	bl	8005bf8 <Error_Handler>
	  }
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8003f76:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <DPC_ADC_Default_Init+0x23c>)
 8003f78:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_8;
 8003f7a:	f44f 7389 	mov.w	r3, #274	; 0x112
 8003f7e:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f84:	463b      	mov	r3, r7
 8003f86:	4619      	mov	r1, r3
 8003f88:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <DPC_ADC_Default_Init+0x218>)
 8003f8a:	f002 ff05 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <DPC_ADC_Default_Init+0x210>
	  {
	    Error_Handler();
 8003f94:	f001 fe30 	bl	8005bf8 <Error_Handler>
	  }
}
 8003f98:	bf00      	nop
 8003f9a:	3748      	adds	r7, #72	; 0x48
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	200001d0 	.word	0x200001d0
 8003fa4:	7dc00000 	.word	0x7dc00000
 8003fa8:	04300002 	.word	0x04300002
 8003fac:	08600004 	.word	0x08600004
 8003fb0:	0c900008 	.word	0x0c900008
 8003fb4:	10c00010 	.word	0x10c00010
 8003fb8:	14f00020 	.word	0x14f00020
 8003fbc:	19200040 	.word	0x19200040
 8003fc0:	1d500080 	.word	0x1d500080
 8003fc4:	c3210000 	.word	0xc3210000

08003fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc5;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b092      	sub	sp, #72	; 0x48
 8003fcc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8003fce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	605a      	str	r2, [r3, #4]
 8003fd8:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003fda:	f107 0320 	add.w	r3, r7, #32
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	609a      	str	r2, [r3, #8]
 8003fe6:	60da      	str	r2, [r3, #12]
 8003fe8:	611a      	str	r2, [r3, #16]
 8003fea:	615a      	str	r2, [r3, #20]
 8003fec:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003fee:	463b      	mov	r3, r7
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f009 fa48 	bl	800d48a <memset>

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003ffa:	4b7a      	ldr	r3, [pc, #488]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8003ffc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004000:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004002:	4b78      	ldr	r3, [pc, #480]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004004:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004008:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800400a:	4b76      	ldr	r3, [pc, #472]	; (80041e4 <MX_ADC1_Init+0x21c>)
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004010:	4b74      	ldr	r3, [pc, #464]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004012:	2200      	movs	r2, #0
 8004014:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004016:	4b73      	ldr	r3, [pc, #460]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004018:	2200      	movs	r2, #0
 800401a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800401c:	4b71      	ldr	r3, [pc, #452]	; (80041e4 <MX_ADC1_Init+0x21c>)
 800401e:	2201      	movs	r2, #1
 8004020:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004022:	4b70      	ldr	r3, [pc, #448]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004024:	2204      	movs	r2, #4
 8004026:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004028:	4b6e      	ldr	r3, [pc, #440]	; (80041e4 <MX_ADC1_Init+0x21c>)
 800402a:	2200      	movs	r2, #0
 800402c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800402e:	4b6d      	ldr	r3, [pc, #436]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004030:	2201      	movs	r2, #1
 8004032:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 8;
 8004034:	4b6b      	ldr	r3, [pc, #428]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004036:	2208      	movs	r2, #8
 8004038:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800403a:	4b6a      	ldr	r3, [pc, #424]	; (80041e4 <MX_ADC1_Init+0x21c>)
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004042:	4b68      	ldr	r3, [pc, #416]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004044:	2200      	movs	r2, #0
 8004046:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004048:	4b66      	ldr	r3, [pc, #408]	; (80041e4 <MX_ADC1_Init+0x21c>)
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800404e:	4b65      	ldr	r3, [pc, #404]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004056:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004058:	2200      	movs	r2, #0
 800405a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 800405c:	4b61      	ldr	r3, [pc, #388]	; (80041e4 <MX_ADC1_Init+0x21c>)
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8004064:	4b5f      	ldr	r3, [pc, #380]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004066:	2208      	movs	r2, #8
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 800406a:	4b5e      	ldr	r3, [pc, #376]	; (80041e4 <MX_ADC1_Init+0x21c>)
 800406c:	2260      	movs	r2, #96	; 0x60
 800406e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004070:	4b5c      	ldr	r3, [pc, #368]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004072:	2200      	movs	r2, #0
 8004074:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004076:	4b5b      	ldr	r3, [pc, #364]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004078:	2201      	movs	r2, #1
 800407a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800407c:	4859      	ldr	r0, [pc, #356]	; (80041e4 <MX_ADC1_Init+0x21c>)
 800407e:	f002 fbdf 	bl	8006840 <HAL_ADC_Init>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8004088:	f001 fdb6 	bl	8005bf8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800408c:	2300      	movs	r3, #0
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004090:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004094:	4619      	mov	r1, r3
 8004096:	4853      	ldr	r0, [pc, #332]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004098:	f003 fdcc 	bl	8007c34 <HAL_ADCEx_MultiModeConfigChannel>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80040a2:	f001 fda9 	bl	8005bf8 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80040a6:	4b50      	ldr	r3, [pc, #320]	; (80041e8 <MX_ADC1_Init+0x220>)
 80040a8:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80040aa:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 80040b0:	4b4e      	ldr	r3, [pc, #312]	; (80041ec <MX_ADC1_Init+0x224>)
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = DISABLE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 0x0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0x0;
 80040be:	2300      	movs	r3, #0
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80040c6:	f107 0320 	add.w	r3, r7, #32
 80040ca:	4619      	mov	r1, r3
 80040cc:	4845      	ldr	r0, [pc, #276]	; (80041e4 <MX_ADC1_Init+0x21c>)
 80040ce:	f003 faa1 	bl	8007614 <HAL_ADC_AnalogWDGConfig>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80040d8:	f001 fd8e 	bl	8005bf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80040dc:	4b43      	ldr	r3, [pc, #268]	; (80041ec <MX_ADC1_Init+0x224>)
 80040de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80040e0:	2306      	movs	r3, #6
 80040e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80040e4:	2301      	movs	r3, #1
 80040e6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80040e8:	237f      	movs	r3, #127	; 0x7f
 80040ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80040ec:	2304      	movs	r3, #4
 80040ee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040f4:	463b      	mov	r3, r7
 80040f6:	4619      	mov	r1, r3
 80040f8:	483a      	ldr	r0, [pc, #232]	; (80041e4 <MX_ADC1_Init+0x21c>)
 80040fa:	f002 fe4d 	bl	8006d98 <HAL_ADC_ConfigChannel>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8004104:	f001 fd78 	bl	8005bf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004108:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <MX_ADC1_Init+0x228>)
 800410a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800410c:	230c      	movs	r3, #12
 800410e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004110:	463b      	mov	r3, r7
 8004112:	4619      	mov	r1, r3
 8004114:	4833      	ldr	r0, [pc, #204]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004116:	f002 fe3f 	bl	8006d98 <HAL_ADC_ConfigChannel>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8004120:	f001 fd6a 	bl	8005bf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004124:	4b33      	ldr	r3, [pc, #204]	; (80041f4 <MX_ADC1_Init+0x22c>)
 8004126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004128:	2312      	movs	r3, #18
 800412a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800412c:	463b      	mov	r3, r7
 800412e:	4619      	mov	r1, r3
 8004130:	482c      	ldr	r0, [pc, #176]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004132:	f002 fe31 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 800413c:	f001 fd5c 	bl	8005bf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004140:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <MX_ADC1_Init+0x230>)
 8004142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004144:	2318      	movs	r3, #24
 8004146:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8004148:	2302      	movs	r3, #2
 800414a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800414c:	463b      	mov	r3, r7
 800414e:	4619      	mov	r1, r3
 8004150:	4824      	ldr	r0, [pc, #144]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004152:	f002 fe21 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 800415c:	f001 fd4c 	bl	8005bf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004160:	4b26      	ldr	r3, [pc, #152]	; (80041fc <MX_ADC1_Init+0x234>)
 8004162:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8004164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004168:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800416a:	463b      	mov	r3, r7
 800416c:	4619      	mov	r1, r3
 800416e:	481d      	ldr	r0, [pc, #116]	; (80041e4 <MX_ADC1_Init+0x21c>)
 8004170:	f002 fe12 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <MX_ADC1_Init+0x1b6>
  {
    Error_Handler();
 800417a:	f001 fd3d 	bl	8005bf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800417e:	4b20      	ldr	r3, [pc, #128]	; (8004200 <MX_ADC1_Init+0x238>)
 8004180:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8004182:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004186:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004188:	463b      	mov	r3, r7
 800418a:	4619      	mov	r1, r3
 800418c:	4815      	ldr	r0, [pc, #84]	; (80041e4 <MX_ADC1_Init+0x21c>)
 800418e:	f002 fe03 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_ADC1_Init+0x1d4>
  {
    Error_Handler();
 8004198:	f001 fd2e 	bl	8005bf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <MX_ADC1_Init+0x23c>)
 800419e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80041a0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80041a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041a6:	463b      	mov	r3, r7
 80041a8:	4619      	mov	r1, r3
 80041aa:	480e      	ldr	r0, [pc, #56]	; (80041e4 <MX_ADC1_Init+0x21c>)
 80041ac:	f002 fdf4 	bl	8006d98 <HAL_ADC_ConfigChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_ADC1_Init+0x1f2>
  {
    Error_Handler();
 80041b6:	f001 fd1f 	bl	8005bf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <MX_ADC1_Init+0x224>)
 80041bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80041be:	f44f 7389 	mov.w	r3, #274	; 0x112
 80041c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041c8:	463b      	mov	r3, r7
 80041ca:	4619      	mov	r1, r3
 80041cc:	4805      	ldr	r0, [pc, #20]	; (80041e4 <MX_ADC1_Init+0x21c>)
 80041ce:	f002 fde3 	bl	8006d98 <HAL_ADC_ConfigChannel>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <MX_ADC1_Init+0x214>
  {
    Error_Handler();
 80041d8:	f001 fd0e 	bl	8005bf8 <Error_Handler>
  }

}
 80041dc:	bf00      	nop
 80041de:	3748      	adds	r7, #72	; 0x48
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	200001d0 	.word	0x200001d0
 80041e8:	7dc00000 	.word	0x7dc00000
 80041ec:	04300002 	.word	0x04300002
 80041f0:	08600004 	.word	0x08600004
 80041f4:	0c900008 	.word	0x0c900008
 80041f8:	10c00010 	.word	0x10c00010
 80041fc:	19200040 	.word	0x19200040
 8004200:	1d500080 	.word	0x1d500080
 8004204:	c3210000 	.word	0xc3210000

08004208 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800420e:	463b      	mov	r3, r7
 8004210:	2220      	movs	r2, #32
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f009 f938 	bl	800d48a <memset>

  /** Common config
  */
  hadc5.Instance = ADC5;
 800421a:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <MX_ADC5_Init+0xc0>)
 800421c:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <MX_ADC5_Init+0xc4>)
 800421e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004220:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <MX_ADC5_Init+0xc0>)
 8004222:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004226:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8004228:	4b27      	ldr	r3, [pc, #156]	; (80042c8 <MX_ADC5_Init+0xc0>)
 800422a:	2200      	movs	r2, #0
 800422c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800422e:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <MX_ADC5_Init+0xc0>)
 8004230:	2200      	movs	r2, #0
 8004232:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8004234:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <MX_ADC5_Init+0xc0>)
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800423a:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <MX_ADC5_Init+0xc0>)
 800423c:	2200      	movs	r2, #0
 800423e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004240:	4b21      	ldr	r3, [pc, #132]	; (80042c8 <MX_ADC5_Init+0xc0>)
 8004242:	2204      	movs	r2, #4
 8004244:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <MX_ADC5_Init+0xc0>)
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 800424c:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <MX_ADC5_Init+0xc0>)
 800424e:	2200      	movs	r2, #0
 8004250:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8004252:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <MX_ADC5_Init+0xc0>)
 8004254:	2201      	movs	r2, #1
 8004256:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8004258:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <MX_ADC5_Init+0xc0>)
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <MX_ADC5_Init+0xc0>)
 8004262:	2200      	movs	r2, #0
 8004264:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004266:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <MX_ADC5_Init+0xc0>)
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 800426c:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <MX_ADC5_Init+0xc0>)
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004274:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <MX_ADC5_Init+0xc0>)
 8004276:	2200      	movs	r2, #0
 8004278:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800427a:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <MX_ADC5_Init+0xc0>)
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8004282:	4811      	ldr	r0, [pc, #68]	; (80042c8 <MX_ADC5_Init+0xc0>)
 8004284:	f002 fadc 	bl	8006840 <HAL_ADC_Init>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 800428e:	f001 fcb3 	bl	8005bf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <MX_ADC5_Init+0xc8>)
 8004294:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004296:	2306      	movs	r3, #6
 8004298:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800429e:	237f      	movs	r3, #127	; 0x7f
 80042a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80042a2:	2304      	movs	r3, #4
 80042a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80042aa:	463b      	mov	r3, r7
 80042ac:	4619      	mov	r1, r3
 80042ae:	4806      	ldr	r0, [pc, #24]	; (80042c8 <MX_ADC5_Init+0xc0>)
 80042b0:	f002 fd72 	bl	8006d98 <HAL_ADC_ConfigChannel>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80042ba:	f001 fc9d 	bl	8005bf8 <Error_Handler>
  }

}
 80042be:	bf00      	nop
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000164 	.word	0x20000164
 80042cc:	50000600 	.word	0x50000600
 80042d0:	90c00010 	.word	0x90c00010

080042d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08c      	sub	sp, #48	; 0x30
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042dc:	f107 031c 	add.w	r3, r7, #28
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042f4:	f040 8082 	bne.w	80043fc <HAL_ADC_MspInit+0x128>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80042f8:	4b4b      	ldr	r3, [pc, #300]	; (8004428 <HAL_ADC_MspInit+0x154>)
 80042fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fc:	4a4a      	ldr	r2, [pc, #296]	; (8004428 <HAL_ADC_MspInit+0x154>)
 80042fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004304:	4b48      	ldr	r3, [pc, #288]	; (8004428 <HAL_ADC_MspInit+0x154>)
 8004306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004310:	4b45      	ldr	r3, [pc, #276]	; (8004428 <HAL_ADC_MspInit+0x154>)
 8004312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004314:	4a44      	ldr	r2, [pc, #272]	; (8004428 <HAL_ADC_MspInit+0x154>)
 8004316:	f043 0304 	orr.w	r3, r3, #4
 800431a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800431c:	4b42      	ldr	r3, [pc, #264]	; (8004428 <HAL_ADC_MspInit+0x154>)
 800431e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004328:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_ADC_MspInit+0x154>)
 800432a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432c:	4a3e      	ldr	r2, [pc, #248]	; (8004428 <HAL_ADC_MspInit+0x154>)
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004334:	4b3c      	ldr	r3, [pc, #240]	; (8004428 <HAL_ADC_MspInit+0x154>)
 8004336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004340:	4b39      	ldr	r3, [pc, #228]	; (8004428 <HAL_ADC_MspInit+0x154>)
 8004342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004344:	4a38      	ldr	r2, [pc, #224]	; (8004428 <HAL_ADC_MspInit+0x154>)
 8004346:	f043 0302 	orr.w	r3, r3, #2
 800434a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800434c:	4b36      	ldr	r3, [pc, #216]	; (8004428 <HAL_ADC_MspInit+0x154>)
 800434e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_VDC__Pin|ADC_VDC_C1_Pin;
 8004358:	2303      	movs	r3, #3
 800435a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800435c:	2303      	movs	r3, #3
 800435e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004360:	2300      	movs	r3, #0
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004364:	f107 031c 	add.w	r3, r7, #28
 8004368:	4619      	mov	r1, r3
 800436a:	4830      	ldr	r0, [pc, #192]	; (800442c <HAL_ADC_MspInit+0x158>)
 800436c:	f004 fa56 	bl	800881c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IA_Pin|ADC_IB_Pin|ADC_VA_Pin|ADC_VB_Pin;
 8004370:	230f      	movs	r3, #15
 8004372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004374:	2303      	movs	r3, #3
 8004376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437c:	f107 031c 	add.w	r3, r7, #28
 8004380:	4619      	mov	r1, r3
 8004382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004386:	f004 fa49 	bl	800881c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VC_Pin;
 800438a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800438e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004390:	2303      	movs	r3, #3
 8004392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004394:	2300      	movs	r3, #0
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VC_GPIO_Port, &GPIO_InitStruct);
 8004398:	f107 031c 	add.w	r3, r7, #28
 800439c:	4619      	mov	r1, r3
 800439e:	4824      	ldr	r0, [pc, #144]	; (8004430 <HAL_ADC_MspInit+0x15c>)
 80043a0:	f004 fa3c 	bl	800881c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 80043a4:	4b23      	ldr	r3, [pc, #140]	; (8004434 <HAL_ADC_MspInit+0x160>)
 80043a6:	4a24      	ldr	r2, [pc, #144]	; (8004438 <HAL_ADC_MspInit+0x164>)
 80043a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80043aa:	4b22      	ldr	r3, [pc, #136]	; (8004434 <HAL_ADC_MspInit+0x160>)
 80043ac:	2205      	movs	r2, #5
 80043ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043b0:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_ADC_MspInit+0x160>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80043b6:	4b1f      	ldr	r3, [pc, #124]	; (8004434 <HAL_ADC_MspInit+0x160>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80043bc:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <HAL_ADC_MspInit+0x160>)
 80043be:	2280      	movs	r2, #128	; 0x80
 80043c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80043c2:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <HAL_ADC_MspInit+0x160>)
 80043c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80043ca:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <HAL_ADC_MspInit+0x160>)
 80043cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80043d2:	4b18      	ldr	r3, [pc, #96]	; (8004434 <HAL_ADC_MspInit+0x160>)
 80043d4:	2220      	movs	r2, #32
 80043d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80043d8:	4b16      	ldr	r3, [pc, #88]	; (8004434 <HAL_ADC_MspInit+0x160>)
 80043da:	2200      	movs	r2, #0
 80043dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80043de:	4815      	ldr	r0, [pc, #84]	; (8004434 <HAL_ADC_MspInit+0x160>)
 80043e0:	f003 fe6e 	bl	80080c0 <HAL_DMA_Init>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 80043ea:	f001 fc05 	bl	8005bf8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a10      	ldr	r2, [pc, #64]	; (8004434 <HAL_ADC_MspInit+0x160>)
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
 80043f4:	4a0f      	ldr	r2, [pc, #60]	; (8004434 <HAL_ADC_MspInit+0x160>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_RCC_ADC345_CLK_ENABLE();
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80043fa:	e010      	b.n	800441e <HAL_ADC_MspInit+0x14a>
  else if(adcHandle->Instance==ADC5)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a0e      	ldr	r2, [pc, #56]	; (800443c <HAL_ADC_MspInit+0x168>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10b      	bne.n	800441e <HAL_ADC_MspInit+0x14a>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <HAL_ADC_MspInit+0x154>)
 8004408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440a:	4a07      	ldr	r2, [pc, #28]	; (8004428 <HAL_ADC_MspInit+0x154>)
 800440c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_ADC_MspInit+0x154>)
 8004414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441a:	60bb      	str	r3, [r7, #8]
 800441c:	68bb      	ldr	r3, [r7, #8]
}
 800441e:	bf00      	nop
 8004420:	3730      	adds	r7, #48	; 0x30
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	48000800 	.word	0x48000800
 8004430:	48000400 	.word	0x48000400
 8004434:	2000023c 	.word	0x2000023c
 8004438:	40020044 	.word	0x40020044
 800443c:	50000600 	.word	0x50000600

08004440 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0

  hcordic.Instance = CORDIC;
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <MX_CORDIC_Init+0x20>)
 8004446:	4a07      	ldr	r2, [pc, #28]	; (8004464 <MX_CORDIC_Init+0x24>)
 8004448:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800444a:	4805      	ldr	r0, [pc, #20]	; (8004460 <MX_CORDIC_Init+0x20>)
 800444c:	f003 fcf6 	bl	8007e3c <HAL_CORDIC_Init>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8004456:	f001 fbcf 	bl	8005bf8 <Error_Handler>
  }

}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	2000029c 	.word	0x2000029c
 8004464:	40020c00 	.word	0x40020c00

08004468 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <HAL_CORDIC_MspInit+0x38>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d10b      	bne.n	8004492 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <HAL_CORDIC_MspInit+0x3c>)
 800447c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <HAL_CORDIC_MspInit+0x3c>)
 8004480:	f043 0308 	orr.w	r3, r3, #8
 8004484:	6493      	str	r3, [r2, #72]	; 0x48
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <HAL_CORDIC_MspInit+0x3c>)
 8004488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40020c00 	.word	0x40020c00
 80044a4:	40021000 	.word	0x40021000

080044a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80044ae:	4b22      	ldr	r3, [pc, #136]	; (8004538 <MX_DMA_Init+0x90>)
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	4a21      	ldr	r2, [pc, #132]	; (8004538 <MX_DMA_Init+0x90>)
 80044b4:	f043 0304 	orr.w	r3, r3, #4
 80044b8:	6493      	str	r3, [r2, #72]	; 0x48
 80044ba:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <MX_DMA_Init+0x90>)
 80044bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044c6:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <MX_DMA_Init+0x90>)
 80044c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ca:	4a1b      	ldr	r2, [pc, #108]	; (8004538 <MX_DMA_Init+0x90>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	6493      	str	r3, [r2, #72]	; 0x48
 80044d2:	4b19      	ldr	r3, [pc, #100]	; (8004538 <MX_DMA_Init+0x90>)
 80044d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80044de:	2200      	movs	r2, #0
 80044e0:	2100      	movs	r1, #0
 80044e2:	200b      	movs	r0, #11
 80044e4:	f003 fdb7 	bl	8008056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80044e8:	200b      	movs	r0, #11
 80044ea:	f003 fdce 	bl	800808a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80044ee:	2200      	movs	r2, #0
 80044f0:	2100      	movs	r1, #0
 80044f2:	200c      	movs	r0, #12
 80044f4:	f003 fdaf 	bl	8008056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80044f8:	200c      	movs	r0, #12
 80044fa:	f003 fdc6 	bl	800808a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80044fe:	2200      	movs	r2, #0
 8004500:	2100      	movs	r1, #0
 8004502:	200d      	movs	r0, #13
 8004504:	f003 fda7 	bl	8008056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004508:	200d      	movs	r0, #13
 800450a:	f003 fdbe 	bl	800808a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800450e:	2200      	movs	r2, #0
 8004510:	2100      	movs	r1, #0
 8004512:	200e      	movs	r0, #14
 8004514:	f003 fd9f 	bl	8008056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004518:	200e      	movs	r0, #14
 800451a:	f003 fdb6 	bl	800808a <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 800451e:	2200      	movs	r2, #0
 8004520:	2100      	movs	r1, #0
 8004522:	205e      	movs	r0, #94	; 0x5e
 8004524:	f003 fd97 	bl	8008056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8004528:	205e      	movs	r0, #94	; 0x5e
 800452a:	f003 fdae 	bl	800808a <HAL_NVIC_EnableIRQ>

}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000

0800453c <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0

  hfmac.Instance = FMAC;
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <MX_FMAC_Init+0x20>)
 8004542:	4a07      	ldr	r2, [pc, #28]	; (8004560 <MX_FMAC_Init+0x24>)
 8004544:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8004546:	4805      	ldr	r0, [pc, #20]	; (800455c <MX_FMAC_Init+0x20>)
 8004548:	f004 f8bc 	bl	80086c4 <HAL_FMAC_Init>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8004552:	f001 fb51 	bl	8005bf8 <Error_Handler>
  }

}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	200002c4 	.word	0x200002c4
 8004560:	40021400 	.word	0x40021400

08004564 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a0a      	ldr	r2, [pc, #40]	; (800459c <HAL_FMAC_MspInit+0x38>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d10b      	bne.n	800458e <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <HAL_FMAC_MspInit+0x3c>)
 8004578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457a:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <HAL_FMAC_MspInit+0x3c>)
 800457c:	f043 0310 	orr.w	r3, r3, #16
 8004580:	6493      	str	r3, [r2, #72]	; 0x48
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <HAL_FMAC_MspInit+0x3c>)
 8004584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40021400 	.word	0x40021400
 80045a0:	40021000 	.word	0x40021000

080045a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045aa:	f107 030c 	add.w	r3, r7, #12
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	605a      	str	r2, [r3, #4]
 80045b4:	609a      	str	r2, [r3, #8]
 80045b6:	60da      	str	r2, [r3, #12]
 80045b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ba:	4b28      	ldr	r3, [pc, #160]	; (800465c <MX_GPIO_Init+0xb8>)
 80045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045be:	4a27      	ldr	r2, [pc, #156]	; (800465c <MX_GPIO_Init+0xb8>)
 80045c0:	f043 0304 	orr.w	r3, r3, #4
 80045c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045c6:	4b25      	ldr	r3, [pc, #148]	; (800465c <MX_GPIO_Init+0xb8>)
 80045c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d2:	4b22      	ldr	r3, [pc, #136]	; (800465c <MX_GPIO_Init+0xb8>)
 80045d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d6:	4a21      	ldr	r2, [pc, #132]	; (800465c <MX_GPIO_Init+0xb8>)
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045de:	4b1f      	ldr	r3, [pc, #124]	; (800465c <MX_GPIO_Init+0xb8>)
 80045e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ea:	4b1c      	ldr	r3, [pc, #112]	; (800465c <MX_GPIO_Init+0xb8>)
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	4a1b      	ldr	r2, [pc, #108]	; (800465c <MX_GPIO_Init+0xb8>)
 80045f0:	f043 0302 	orr.w	r3, r3, #2
 80045f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045f6:	4b19      	ldr	r3, [pc, #100]	; (800465c <MX_GPIO_Init+0xb8>)
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin|LED_HL1_Pin|Relay_Pin, GPIO_PIN_RESET);
 8004602:	2200      	movs	r2, #0
 8004604:	21d0      	movs	r1, #208	; 0xd0
 8004606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800460a:	f004 fa89 	bl	8008b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_RESET);
 800460e:	2200      	movs	r2, #0
 8004610:	2120      	movs	r1, #32
 8004612:	4813      	ldr	r0, [pc, #76]	; (8004660 <MX_GPIO_Init+0xbc>)
 8004614:	f004 fa84 	bl	8008b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_HL2_Pin|LED_HL1_Pin|Relay_Pin;
 8004618:	23d0      	movs	r3, #208	; 0xd0
 800461a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800461c:	2301      	movs	r3, #1
 800461e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004628:	f107 030c 	add.w	r3, r7, #12
 800462c:	4619      	mov	r1, r3
 800462e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004632:	f004 f8f3 	bl	800881c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PFC_SW_SRC_Pin;
 8004636:	2320      	movs	r3, #32
 8004638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800463a:	2301      	movs	r3, #1
 800463c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PFC_SW_SRC_GPIO_Port, &GPIO_InitStruct);
 8004646:	f107 030c 	add.w	r3, r7, #12
 800464a:	4619      	mov	r1, r3
 800464c:	4804      	ldr	r0, [pc, #16]	; (8004660 <MX_GPIO_Init+0xbc>)
 800464e:	f004 f8e5 	bl	800881c <HAL_GPIO_Init>

}
 8004652:	bf00      	nop
 8004654:	3720      	adds	r7, #32
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40021000 	.word	0x40021000
 8004660:	48000800 	.word	0x48000800

08004664 <MX_HRTIM1_Init>:
DMA_HandleTypeDef hdma_hrtim1_b;
DMA_HandleTypeDef hdma_hrtim1_c;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b0b6      	sub	sp, #216	; 0xd8
 8004668:	af00      	add	r7, sp, #0
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 800466a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	609a      	str	r2, [r3, #8]
 8004676:	60da      	str	r2, [r3, #12]
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 8004678:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	609a      	str	r2, [r3, #8]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8004684:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8004692:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	609a      	str	r2, [r3, #8]
 800469e:	60da      	str	r2, [r3, #12]
 80046a0:	611a      	str	r2, [r3, #16]
 80046a2:	615a      	str	r2, [r3, #20]
 80046a4:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80046a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046aa:	2260      	movs	r2, #96	; 0x60
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f008 feeb 	bl	800d48a <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80046b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80046c0:	1d3b      	adds	r3, r7, #4
 80046c2:	2220      	movs	r2, #32
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f008 fedf 	bl	800d48a <memset>

  hhrtim1.Instance = HRTIM1;
 80046cc:	4bd0      	ldr	r3, [pc, #832]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80046ce:	4ad1      	ldr	r2, [pc, #836]	; (8004a14 <MX_HRTIM1_Init+0x3b0>)
 80046d0:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_FLT1|HRTIM_IT_FLT3;
 80046d2:	4bcf      	ldr	r3, [pc, #828]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80046d4:	2205      	movs	r2, #5
 80046d6:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80046d8:	4bcd      	ldr	r3, [pc, #820]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80046da:	2200      	movs	r2, #0
 80046dc:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80046de:	48cc      	ldr	r0, [pc, #816]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80046e0:	f004 fa36 	bl	8008b50 <HAL_HRTIM_Init>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <MX_HRTIM1_Init+0x8a>
  {
    Error_Handler();
 80046ea:	f001 fa85 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80046ee:	210c      	movs	r1, #12
 80046f0:	48c7      	ldr	r0, [pc, #796]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80046f2:	f004 fafd 	bl	8008cf0 <HAL_HRTIM_DLLCalibrationStart>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <MX_HRTIM1_Init+0x9c>
  {
    Error_Handler();
 80046fc:	f001 fa7c 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8004700:	210a      	movs	r1, #10
 8004702:	48c3      	ldr	r0, [pc, #780]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 8004704:	f004 fb4c 	bl	8008da0 <HAL_HRTIM_PollForDLLCalibration>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <MX_HRTIM1_Init+0xae>
  {
    Error_Handler();
 800470e:	f001 fa73 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 8004712:	2100      	movs	r1, #0
 8004714:	48be      	ldr	r0, [pc, #760]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 8004716:	f004 fd5f 	bl	80091d8 <HAL_HRTIM_FaultPrescalerConfig>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_HRTIM1_Init+0xc0>
  {
    Error_Handler();
 8004720:	f001 fa6a 	bl	8005bf8 <Error_Handler>
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 800472a:	2302      	movs	r3, #2
 800472c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 8004730:	2300      	movs	r3, #0
 8004732:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 8004736:	2300      	movs	r3, #0
 8004738:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultCfg) != HAL_OK)
 800473c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004740:	461a      	mov	r2, r3
 8004742:	2101      	movs	r1, #1
 8004744:	48b2      	ldr	r0, [pc, #712]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 8004746:	f004 fb87 	bl	8008e58 <HAL_HRTIM_FaultConfig>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <MX_HRTIM1_Init+0xf0>
  {
    Error_Handler();
 8004750:	f001 fa52 	bl	8005bf8 <Error_Handler>
//  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
//  {
//    Error_Handler();
//  }

  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_1, HRTIM_FAULTMODECTL_ENABLED);
 8004754:	2201      	movs	r2, #1
 8004756:	2101      	movs	r1, #1
 8004758:	48ad      	ldr	r0, [pc, #692]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 800475a:	f004 ff5b 	bl	8009614 <HAL_HRTIM_FaultModeCtl>
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 800475e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004762:	461a      	mov	r2, r3
 8004764:	2104      	movs	r1, #4
 8004766:	48aa      	ldr	r0, [pc, #680]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 8004768:	f004 fe5c 	bl	8009424 <HAL_HRTIM_FaultCounterConfig>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <MX_HRTIM1_Init+0x112>
  {
    Error_Handler();
 8004772:	f001 fa41 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 8004776:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800477a:	461a      	mov	r2, r3
 800477c:	2104      	movs	r1, #4
 800477e:	48a4      	ldr	r0, [pc, #656]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 8004780:	f004 fd64 	bl	800924c <HAL_HRTIM_FaultBlankingConfigAndEnable>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <MX_HRTIM1_Init+0x12a>
  {
    Error_Handler();
 800478a:	f001 fa35 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 800478e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004792:	461a      	mov	r2, r3
 8004794:	2104      	movs	r1, #4
 8004796:	489e      	ldr	r0, [pc, #632]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 8004798:	f004 fd58 	bl	800924c <HAL_HRTIM_FaultBlankingConfigAndEnable>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <MX_HRTIM1_Init+0x142>
  {
    Error_Handler();
 80047a2:	f001 fa29 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_3, &pFaultCfg) != HAL_OK)
 80047a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80047aa:	461a      	mov	r2, r3
 80047ac:	2104      	movs	r1, #4
 80047ae:	4898      	ldr	r0, [pc, #608]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80047b0:	f004 fb52 	bl	8008e58 <HAL_HRTIM_FaultConfig>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <MX_HRTIM1_Init+0x15a>
  {
    Error_Handler();
 80047ba:	f001 fa1d 	bl	8005bf8 <Error_Handler>
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_3, HRTIM_FAULTMODECTL_ENABLED);
 80047be:	2201      	movs	r2, #1
 80047c0:	2104      	movs	r1, #4
 80047c2:	4893      	ldr	r0, [pc, #588]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80047c4:	f004 ff26 	bl	8009614 <HAL_HRTIM_FaultModeCtl>
  pTimeBaseCfg.Period = 34000;
 80047c8:	f248 43d0 	movw	r3, #34000	; 0x84d0
 80047cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 80047d6:	2302      	movs	r3, #2
 80047d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80047dc:	2308      	movs	r3, #8
 80047de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80047e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80047e6:	461a      	mov	r2, r3
 80047e8:	2100      	movs	r1, #0
 80047ea:	4889      	ldr	r0, [pc, #548]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80047ec:	f004 fb0c 	bl	8008e08 <HAL_HRTIM_TimeBaseConfig>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <MX_HRTIM1_Init+0x196>
  {
    Error_Handler();
 80047f6:	f001 f9ff 	bl	8005bf8 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 8004800:	2300      	movs	r3, #0
 8004802:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8004812:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004816:	461a      	mov	r2, r3
 8004818:	2100      	movs	r1, #0
 800481a:	487d      	ldr	r0, [pc, #500]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 800481c:	f004 ffee 	bl	80097fc <HAL_HRTIM_WaveformTimerControl>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <MX_HRTIM1_Init+0x1c6>
  {
    Error_Handler();
 8004826:	f001 f9e7 	bl	8005bf8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800482a:	2300      	movs	r3, #0
 800482c:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST;
 800482e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMASrcAddress = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMADstAddress = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.DMASize = 0x1;
 800483c:	2301      	movs	r3, #1
 800483e:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8004840:	2300      	movs	r3, #0
 8004842:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8004844:	2300      	movs	r3, #0
 8004846:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8004848:	2300      	movs	r3, #0
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800484c:	2300      	movs	r3, #0
 800484e:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8004850:	2300      	movs	r3, #0
 8004852:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8004854:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004858:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800485a:	2300      	movs	r3, #0
 800485c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800485e:	2300      	movs	r3, #0
 8004860:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8004862:	2300      	movs	r3, #0
 8004864:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8004866:	2300      	movs	r3, #0
 8004868:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1|HRTIM_TIMFAULTENABLE_FAULT3;
 800486a:	2305      	movs	r3, #5
 800486c:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800486e:	2300      	movs	r3, #0
 8004870:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8004872:	2300      	movs	r3, #0
 8004874:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8004876:	2300      	movs	r3, #0
 8004878:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800487a:	2300      	movs	r3, #0
 800487c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8004886:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800488a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800488e:	2300      	movs	r3, #0
 8004890:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8004894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004898:	461a      	mov	r2, r3
 800489a:	2100      	movs	r1, #0
 800489c:	485c      	ldr	r0, [pc, #368]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 800489e:	f004 ff3b 	bl	8009718 <HAL_HRTIM_WaveformTimerConfig>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <MX_HRTIM1_Init+0x248>
  {
    Error_Handler();
 80048a8:	f001 f9a6 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80048ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048b0:	461a      	mov	r2, r3
 80048b2:	2101      	movs	r1, #1
 80048b4:	4856      	ldr	r0, [pc, #344]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80048b6:	f004 ff2f 	bl	8009718 <HAL_HRTIM_WaveformTimerConfig>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <MX_HRTIM1_Init+0x260>
  {
    Error_Handler();
 80048c0:	f001 f99a 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 80048c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048c8:	461a      	mov	r2, r3
 80048ca:	2102      	movs	r1, #2
 80048cc:	4850      	ldr	r0, [pc, #320]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80048ce:	f004 ff23 	bl	8009718 <HAL_HRTIM_WaveformTimerConfig>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <MX_HRTIM1_Init+0x278>
  {
    Error_Handler();
 80048d8:	f001 f98e 	bl	8005bf8 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x5000;
 80048dc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80048e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048e6:	2201      	movs	r2, #1
 80048e8:	2100      	movs	r1, #0
 80048ea:	4849      	ldr	r0, [pc, #292]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80048ec:	f004 ffba 	bl	8009864 <HAL_HRTIM_WaveformCompareConfig>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <MX_HRTIM1_Init+0x296>
  {
    Error_Handler();
 80048f6:	f001 f97f 	bl	8005bf8 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 80048fa:	2305      	movs	r3, #5
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80048fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004902:	2204      	movs	r2, #4
 8004904:	2100      	movs	r1, #0
 8004906:	4842      	ldr	r0, [pc, #264]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 8004908:	f004 ffac 	bl	8009864 <HAL_HRTIM_WaveformCompareConfig>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <MX_HRTIM1_Init+0x2b2>
  {
    Error_Handler();
 8004912:	f001 f971 	bl	8005bf8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 800491a:	2304      	movs	r3, #4
 800491c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 800491e:	2308      	movs	r3, #8
 8004920:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_INACTIVE;
 800492a:	2320      	movs	r3, #32
 800492c:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8004932:	2300      	movs	r3, #0
 8004934:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8004936:	1d3b      	adds	r3, r7, #4
 8004938:	2201      	movs	r2, #1
 800493a:	2100      	movs	r1, #0
 800493c:	4834      	ldr	r0, [pc, #208]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 800493e:	f005 f8ff 	bl	8009b40 <HAL_HRTIM_WaveformOutputConfig>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <MX_HRTIM1_Init+0x2e8>
  {
    Error_Handler();
 8004948:	f001 f956 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 800494c:	1d3b      	adds	r3, r7, #4
 800494e:	2204      	movs	r2, #4
 8004950:	2101      	movs	r1, #1
 8004952:	482f      	ldr	r0, [pc, #188]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 8004954:	f005 f8f4 	bl	8009b40 <HAL_HRTIM_WaveformOutputConfig>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <MX_HRTIM1_Init+0x2fe>
  {
    Error_Handler();
 800495e:	f001 f94b 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8004962:	1d3b      	adds	r3, r7, #4
 8004964:	2210      	movs	r2, #16
 8004966:	2102      	movs	r1, #2
 8004968:	4829      	ldr	r0, [pc, #164]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 800496a:	f005 f8e9 	bl	8009b40 <HAL_HRTIM_WaveformOutputConfig>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <MX_HRTIM1_Init+0x314>
  {
    Error_Handler();
 8004974:	f001 f940 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8004978:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800497c:	461a      	mov	r2, r3
 800497e:	2101      	movs	r1, #1
 8004980:	4823      	ldr	r0, [pc, #140]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 8004982:	f004 fa41 	bl	8008e08 <HAL_HRTIM_TimeBaseConfig>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <MX_HRTIM1_Init+0x32c>
  {
    Error_Handler();
 800498c:	f001 f934 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 8004990:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004994:	461a      	mov	r2, r3
 8004996:	2101      	movs	r1, #1
 8004998:	481d      	ldr	r0, [pc, #116]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 800499a:	f004 ff2f 	bl	80097fc <HAL_HRTIM_WaveformTimerControl>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <MX_HRTIM1_Init+0x344>
  {
    Error_Handler();
 80049a4:	f001 f928 	bl	8005bf8 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x2000;
 80049a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80049ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049b2:	2201      	movs	r2, #1
 80049b4:	2101      	movs	r1, #1
 80049b6:	4816      	ldr	r0, [pc, #88]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80049b8:	f004 ff54 	bl	8009864 <HAL_HRTIM_WaveformCompareConfig>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <MX_HRTIM1_Init+0x362>
  {
    Error_Handler();
 80049c2:	f001 f919 	bl	8005bf8 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 80049c6:	2305      	movs	r3, #5
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80049ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ce:	2204      	movs	r2, #4
 80049d0:	2101      	movs	r1, #1
 80049d2:	480f      	ldr	r0, [pc, #60]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80049d4:	f004 ff46 	bl	8009864 <HAL_HRTIM_WaveformCompareConfig>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <MX_HRTIM1_Init+0x37e>
  {
    Error_Handler();
 80049de:	f001 f90b 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 80049e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80049e6:	461a      	mov	r2, r3
 80049e8:	2102      	movs	r1, #2
 80049ea:	4809      	ldr	r0, [pc, #36]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 80049ec:	f004 fa0c 	bl	8008e08 <HAL_HRTIM_TimeBaseConfig>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <MX_HRTIM1_Init+0x396>
  {
    Error_Handler();
 80049f6:	f001 f8ff 	bl	8005bf8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 80049fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80049fe:	461a      	mov	r2, r3
 8004a00:	2102      	movs	r1, #2
 8004a02:	4803      	ldr	r0, [pc, #12]	; (8004a10 <MX_HRTIM1_Init+0x3ac>)
 8004a04:	f004 fefa 	bl	80097fc <HAL_HRTIM_WaveformTimerControl>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d006      	beq.n	8004a1c <MX_HRTIM1_Init+0x3b8>
 8004a0e:	e003      	b.n	8004a18 <MX_HRTIM1_Init+0x3b4>
 8004a10:	2000035c 	.word	0x2000035c
 8004a14:	40016800 	.word	0x40016800
  {
    Error_Handler();
 8004a18:	f001 f8ee 	bl	8005bf8 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x8000;
 8004a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8004a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a26:	2201      	movs	r2, #1
 8004a28:	2102      	movs	r1, #2
 8004a2a:	480e      	ldr	r0, [pc, #56]	; (8004a64 <MX_HRTIM1_Init+0x400>)
 8004a2c:	f004 ff1a 	bl	8009864 <HAL_HRTIM_WaveformCompareConfig>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <MX_HRTIM1_Init+0x3d6>
  {
    Error_Handler();
 8004a36:	f001 f8df 	bl	8005bf8 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 8004a3a:	2305      	movs	r3, #5
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8004a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a42:	2204      	movs	r2, #4
 8004a44:	2102      	movs	r1, #2
 8004a46:	4807      	ldr	r0, [pc, #28]	; (8004a64 <MX_HRTIM1_Init+0x400>)
 8004a48:	f004 ff0c 	bl	8009864 <HAL_HRTIM_WaveformCompareConfig>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <MX_HRTIM1_Init+0x3f2>
  {
    Error_Handler();
 8004a52:	f001 f8d1 	bl	8005bf8 <Error_Handler>
  }
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8004a56:	4803      	ldr	r0, [pc, #12]	; (8004a64 <MX_HRTIM1_Init+0x400>)
 8004a58:	f000 f94a 	bl	8004cf0 <HAL_HRTIM_MspPostInit>

}
 8004a5c:	bf00      	nop
 8004a5e:	37d8      	adds	r7, #216	; 0xd8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	2000035c 	.word	0x2000035c

08004a68 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08e      	sub	sp, #56	; 0x38
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
 8004a8c:	60da      	str	r2, [r3, #12]
  if(hrtimHandle->Instance==HRTIM1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a8e      	ldr	r2, [pc, #568]	; (8004ccc <HAL_HRTIM_MspInit+0x264>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	f040 8115 	bne.w	8004cc4 <HAL_HRTIM_MspInit+0x25c>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004a9a:	4b8d      	ldr	r3, [pc, #564]	; (8004cd0 <HAL_HRTIM_MspInit+0x268>)
 8004a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a9e:	4a8c      	ldr	r2, [pc, #560]	; (8004cd0 <HAL_HRTIM_MspInit+0x268>)
 8004aa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8004aa6:	4b8a      	ldr	r3, [pc, #552]	; (8004cd0 <HAL_HRTIM_MspInit+0x268>)
 8004aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ab2:	4b87      	ldr	r3, [pc, #540]	; (8004cd0 <HAL_HRTIM_MspInit+0x268>)
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	4a86      	ldr	r2, [pc, #536]	; (8004cd0 <HAL_HRTIM_MspInit+0x268>)
 8004ab8:	f043 0302 	orr.w	r3, r3, #2
 8004abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004abe:	4b84      	ldr	r3, [pc, #528]	; (8004cd0 <HAL_HRTIM_MspInit+0x268>)
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aca:	4b81      	ldr	r3, [pc, #516]	; (8004cd0 <HAL_HRTIM_MspInit+0x268>)
 8004acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ace:	4a80      	ldr	r2, [pc, #512]	; (8004cd0 <HAL_HRTIM_MspInit+0x268>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ad6:	4b7e      	ldr	r3, [pc, #504]	; (8004cd0 <HAL_HRTIM_MspInit+0x268>)
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB10     ------> HRTIM1_FLT3
    PA12     ------> HRTIM1_FLT1
    */
    GPIO_InitStruct.Pin = OCP_A_Pin;
 8004ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af0:	2300      	movs	r3, #0
 8004af2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8004af4:	230d      	movs	r3, #13
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCP_A_GPIO_Port, &GPIO_InitStruct);
 8004af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004afc:	4619      	mov	r1, r3
 8004afe:	4875      	ldr	r0, [pc, #468]	; (8004cd4 <HAL_HRTIM_MspInit+0x26c>)
 8004b00:	f003 fe8c 	bl	800881c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AC_FAULT_Pin;
 8004b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b12:	2300      	movs	r3, #0
 8004b14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8004b16:	230d      	movs	r3, #13
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AC_FAULT_GPIO_Port, &GPIO_InitStruct);
 8004b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b24:	f003 fe7a 	bl	800881c <HAL_GPIO_Init>

    /* HRTIM1 DMA Init */
    /* HRTIM1_A Init */
    hdma_hrtim1_a.Instance = DMA1_Channel1;
 8004b28:	4b6b      	ldr	r3, [pc, #428]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004b2a:	4a6c      	ldr	r2, [pc, #432]	; (8004cdc <HAL_HRTIM_MspInit+0x274>)
 8004b2c:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_a.Init.Request = DMA_REQUEST_HRTIM1_A;
 8004b2e:	4b6a      	ldr	r3, [pc, #424]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004b30:	2260      	movs	r2, #96	; 0x60
 8004b32:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b34:	4b68      	ldr	r3, [pc, #416]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004b36:	2210      	movs	r2, #16
 8004b38:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b3a:	4b67      	ldr	r3, [pc, #412]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_a.Init.MemInc = DMA_MINC_ENABLE;
 8004b40:	4b65      	ldr	r3, [pc, #404]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004b42:	2280      	movs	r2, #128	; 0x80
 8004b44:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b46:	4b64      	ldr	r3, [pc, #400]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b4c:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004b4e:	4b62      	ldr	r3, [pc, #392]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b54:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_a.Init.Mode = DMA_CIRCULAR;
 8004b56:	4b60      	ldr	r3, [pc, #384]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004b58:	2220      	movs	r2, #32
 8004b5a:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8004b5c:	4b5e      	ldr	r3, [pc, #376]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_a) != HAL_OK)
 8004b64:	485c      	ldr	r0, [pc, #368]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004b66:	f003 faab 	bl	80080c0 <HAL_DMA_Init>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_HRTIM_MspInit+0x10c>
    {
      Error_Handler();
 8004b70:	f001 f842 	bl	8005bf8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8004b80:	2301      	movs	r3, #1
 8004b82:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8004b84:	2301      	movs	r3, #1
 8004b86:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_a, &pSyncConfig) != HAL_OK)
 8004b88:	f107 0314 	add.w	r3, r7, #20
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4852      	ldr	r0, [pc, #328]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004b90:	f003 fd08 	bl	80085a4 <HAL_DMAEx_ConfigMuxSync>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_HRTIM_MspInit+0x136>
    {
      Error_Handler();
 8004b9a:	f001 f82d 	bl	8005bf8 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerA,hdma_hrtim1_a);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a4d      	ldr	r2, [pc, #308]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004ba2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8004ba6:	4a4c      	ldr	r2, [pc, #304]	; (8004cd8 <HAL_HRTIM_MspInit+0x270>)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1_B Init */
    hdma_hrtim1_b.Instance = DMA1_Channel2;
 8004bac:	4b4c      	ldr	r3, [pc, #304]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004bae:	4a4d      	ldr	r2, [pc, #308]	; (8004ce4 <HAL_HRTIM_MspInit+0x27c>)
 8004bb0:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_b.Init.Request = DMA_REQUEST_HRTIM1_B;
 8004bb2:	4b4b      	ldr	r3, [pc, #300]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004bb4:	2261      	movs	r2, #97	; 0x61
 8004bb6:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bb8:	4b49      	ldr	r3, [pc, #292]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004bba:	2210      	movs	r2, #16
 8004bbc:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bbe:	4b48      	ldr	r3, [pc, #288]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_b.Init.MemInc = DMA_MINC_ENABLE;
 8004bc4:	4b46      	ldr	r3, [pc, #280]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004bc6:	2280      	movs	r2, #128	; 0x80
 8004bc8:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004bca:	4b45      	ldr	r3, [pc, #276]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bd0:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004bd2:	4b43      	ldr	r3, [pc, #268]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bd8:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_b.Init.Mode = DMA_CIRCULAR;
 8004bda:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004bdc:	2220      	movs	r2, #32
 8004bde:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8004be0:	4b3f      	ldr	r3, [pc, #252]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004be6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_b) != HAL_OK)
 8004be8:	483d      	ldr	r0, [pc, #244]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004bea:	f003 fa69 	bl	80080c0 <HAL_DMA_Init>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_HRTIM_MspInit+0x190>
    {
      Error_Handler();
 8004bf4:	f001 f800 	bl	8005bf8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8004c04:	2301      	movs	r3, #1
 8004c06:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_b, &pSyncConfig) != HAL_OK)
 8004c0c:	f107 0314 	add.w	r3, r7, #20
 8004c10:	4619      	mov	r1, r3
 8004c12:	4833      	ldr	r0, [pc, #204]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004c14:	f003 fcc6 	bl	80085a4 <HAL_DMAEx_ConfigMuxSync>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_HRTIM_MspInit+0x1ba>
    {
      Error_Handler();
 8004c1e:	f000 ffeb 	bl	8005bf8 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerB,hdma_hrtim1_b);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a2e      	ldr	r2, [pc, #184]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004c26:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8004c2a:	4a2d      	ldr	r2, [pc, #180]	; (8004ce0 <HAL_HRTIM_MspInit+0x278>)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1_C Init */
    hdma_hrtim1_c.Instance = DMA1_Channel3;
 8004c30:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004c32:	4a2e      	ldr	r2, [pc, #184]	; (8004cec <HAL_HRTIM_MspInit+0x284>)
 8004c34:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_c.Init.Request = DMA_REQUEST_HRTIM1_C;
 8004c36:	4b2c      	ldr	r3, [pc, #176]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004c38:	2262      	movs	r2, #98	; 0x62
 8004c3a:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_c.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004c3e:	2210      	movs	r2, #16
 8004c40:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_c.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c42:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_c.Init.MemInc = DMA_MINC_ENABLE;
 8004c48:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004c4a:	2280      	movs	r2, #128	; 0x80
 8004c4c:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_c.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c4e:	4b26      	ldr	r3, [pc, #152]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c54:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_c.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004c56:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c5c:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_c.Init.Mode = DMA_CIRCULAR;
 8004c5e:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004c60:	2220      	movs	r2, #32
 8004c62:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_c.Init.Priority = DMA_PRIORITY_HIGH;
 8004c64:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_c) != HAL_OK)
 8004c6c:	481e      	ldr	r0, [pc, #120]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004c6e:	f003 fa27 	bl	80080c0 <HAL_DMA_Init>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_HRTIM_MspInit+0x214>
    {
      Error_Handler();
 8004c78:	f000 ffbe 	bl	8005bf8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_c, &pSyncConfig) != HAL_OK)
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	4619      	mov	r1, r3
 8004c96:	4814      	ldr	r0, [pc, #80]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004c98:	f003 fc84 	bl	80085a4 <HAL_DMAEx_ConfigMuxSync>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_HRTIM_MspInit+0x23e>
    {
      Error_Handler();
 8004ca2:	f000 ffa9 	bl	8005bf8 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerC,hdma_hrtim1_c);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a0f      	ldr	r2, [pc, #60]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004caa:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8004cae:	4a0e      	ldr	r2, [pc, #56]	; (8004ce8 <HAL_HRTIM_MspInit+0x280>)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_FLT_IRQn, 0, 0);
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	2049      	movs	r0, #73	; 0x49
 8004cba:	f003 f9cc 	bl	8008056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_FLT_IRQn);
 8004cbe:	2049      	movs	r0, #73	; 0x49
 8004cc0:	f003 f9e3 	bl	800808a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3738      	adds	r7, #56	; 0x38
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40016800 	.word	0x40016800
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	48000400 	.word	0x48000400
 8004cd8:	200002fc 	.word	0x200002fc
 8004cdc:	40020008 	.word	0x40020008
 8004ce0:	20000458 	.word	0x20000458
 8004ce4:	4002001c 	.word	0x4002001c
 8004ce8:	200004b8 	.word	0x200004b8
 8004cec:	40020030 	.word	0x40020030

08004cf0 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf8:	f107 0314 	add.w	r3, r7, #20
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	60da      	str	r2, [r3, #12]
 8004d06:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a20      	ldr	r2, [pc, #128]	; (8004d90 <HAL_HRTIM_MspPostInit+0xa0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d13a      	bne.n	8004d88 <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_HRTIM_MspPostInit+0xa4>)
 8004d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d16:	4a1f      	ldr	r2, [pc, #124]	; (8004d94 <HAL_HRTIM_MspPostInit+0xa4>)
 8004d18:	f043 0302 	orr.w	r3, r3, #2
 8004d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d1e:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <HAL_HRTIM_MspPostInit+0xa4>)
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2a:	4b1a      	ldr	r3, [pc, #104]	; (8004d94 <HAL_HRTIM_MspPostInit+0xa4>)
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2e:	4a19      	ldr	r2, [pc, #100]	; (8004d94 <HAL_HRTIM_MspPostInit+0xa4>)
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d36:	4b17      	ldr	r3, [pc, #92]	; (8004d94 <HAL_HRTIM_MspPostInit+0xa4>)
 8004d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM1 GPIO Configuration
    PB12     ------> HRTIM1_CHC1
    PA8     ------> HRTIM1_CHA1
    PA10     ------> HRTIM1_CHB1
    */
    GPIO_InitStruct.Pin = TC_HS_Pin;
 8004d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d50:	2303      	movs	r3, #3
 8004d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8004d54:	230d      	movs	r3, #13
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TC_HS_GPIO_Port, &GPIO_InitStruct);
 8004d58:	f107 0314 	add.w	r3, r7, #20
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	480e      	ldr	r0, [pc, #56]	; (8004d98 <HAL_HRTIM_MspPostInit+0xa8>)
 8004d60:	f003 fd5c 	bl	800881c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TA_HS_Pin|TB_HS_Pin;
 8004d64:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d72:	2303      	movs	r3, #3
 8004d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8004d76:	230d      	movs	r3, #13
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7a:	f107 0314 	add.w	r3, r7, #20
 8004d7e:	4619      	mov	r1, r3
 8004d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d84:	f003 fd4a 	bl	800881c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8004d88:	bf00      	nop
 8004d8a:	3728      	adds	r7, #40	; 0x28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40016800 	.word	0x40016800
 8004d94:	40021000 	.word	0x40021000
 8004d98:	48000400 	.word	0x48000400

08004d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d9e:	b091      	sub	sp, #68	; 0x44
 8004da0:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004da2:	f001 f9e6 	bl	8006172 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004da6:	f000 f983 	bl	80050b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004daa:	f7ff fbfb 	bl	80045a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004dae:	f7ff fb7b 	bl	80044a8 <MX_DMA_Init>
  MX_TIM2_Init();
 8004db2:	f001 f823 	bl	8005dfc <MX_TIM2_Init>
  MX_TIM3_Init();
 8004db6:	f001 f86d 	bl	8005e94 <MX_TIM3_Init>
  MX_CORDIC_Init();
 8004dba:	f7ff fb41 	bl	8004440 <MX_CORDIC_Init>
  MX_ADC1_Init();
 8004dbe:	f7ff f903 	bl	8003fc8 <MX_ADC1_Init>
  MX_ADC5_Init();
 8004dc2:	f7ff fa21 	bl	8004208 <MX_ADC5_Init>
  MX_RNG_Init();
 8004dc6:	f000 ff1b 	bl	8005c00 <MX_RNG_Init>
  MX_TIM6_Init();
 8004dca:	f001 f8b1 	bl	8005f30 <MX_TIM6_Init>
  MX_HRTIM1_Init();
 8004dce:	f7ff fc49 	bl	8004664 <MX_HRTIM1_Init>
  MX_TIM15_Init();
 8004dd2:	f001 f8e3 	bl	8005f9c <MX_TIM15_Init>
  MX_FMAC_Init();
 8004dd6:	f7ff fbb1 	bl	800453c <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  PWM_PERIOD_COUNTER = 10000;
 8004dda:	4b86      	ldr	r3, [pc, #536]	; (8004ff4 <main+0x258>)
 8004ddc:	f242 7210 	movw	r2, #10000	; 0x2710
 8004de0:	601a      	str	r2, [r3, #0]

  DPC_ADC_Init(&DPC_ADC_Conf,G_VAC,B_VAC,G_IAC,B_IAC,G_VDC,B_VDC,G_IDC,B_IDC);
 8004de2:	eddf 3a85 	vldr	s7, [pc, #532]	; 8004ff8 <main+0x25c>
 8004de6:	ed9f 3a85 	vldr	s6, [pc, #532]	; 8004ffc <main+0x260>
 8004dea:	eddf 2a85 	vldr	s5, [pc, #532]	; 8005000 <main+0x264>
 8004dee:	ed9f 2a85 	vldr	s4, [pc, #532]	; 8005004 <main+0x268>
 8004df2:	eddf 1a85 	vldr	s3, [pc, #532]	; 8005008 <main+0x26c>
 8004df6:	ed9f 1a85 	vldr	s2, [pc, #532]	; 800500c <main+0x270>
 8004dfa:	eddf 0a85 	vldr	s1, [pc, #532]	; 8005010 <main+0x274>
 8004dfe:	eeb1 0a01 	vmov.f32	s0, #17	; 0x40880000  4.250
 8004e02:	4884      	ldr	r0, [pc, #528]	; (8005014 <main+0x278>)
 8004e04:	f7fe ff66 	bl	8003cd4 <DPC_ADC_Init>

  DPC_MISC_APPL_Timer_Init(APPL_Tim1, RefreshTime_DESIDERED);   //timer setting                                                                                                                                        /// Function used to Init the timers APP_TIM1 (htim2) used in the power application
 8004e08:	4e83      	ldr	r6, [pc, #524]	; (8005018 <main+0x27c>)
 8004e0a:	f242 7310 	movw	r3, #10000	; 0x2710
 8004e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e10:	466d      	mov	r5, sp
 8004e12:	f106 0410 	add.w	r4, r6, #16
 8004e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e22:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004e26:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004e2a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004e2e:	f7fd facd 	bl	80023cc <DPC_MISC_APPL_Timer_Init>
  DPC_MISC_APPL_Timer_Init(APPL_Tim2, RefreshTime_TO_DESIDERED);                                                                                                                                        /// Function used to Init the timers APP_TIM1 (htim3) used in the power application
 8004e32:	4e7a      	ldr	r6, [pc, #488]	; (800501c <main+0x280>)
 8004e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e38:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e3a:	466d      	mov	r5, sp
 8004e3c:	f106 0410 	add.w	r4, r6, #16
 8004e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e4c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004e50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004e54:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004e58:	f7fd fab8 	bl	80023cc <DPC_MISC_APPL_Timer_Init>
  DPC_MISC_APPL_Timer_Init(APPL_Tim3, RefreshTime2_DESIDERED);
 8004e5c:	4e70      	ldr	r6, [pc, #448]	; (8005020 <main+0x284>)
 8004e5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e62:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e64:	466d      	mov	r5, sp
 8004e66:	f106 0410 	add.w	r4, r6, #16
 8004e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e76:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004e7a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004e7e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004e82:	f7fd faa3 	bl	80023cc <DPC_MISC_APPL_Timer_Init>


  DPC_MISC_Analog_Start();
 8004e86:	f000 fc1d 	bl	80056c4 <DPC_MISC_Analog_Start>

  DPC_PLL_Init(&PLL_CONVERTER,PLL_KP, PLL_KI, DPC_PLL_TS,PLL_PHI_2pi,PLL_DELTA_F,PLL_FF_Hz,DPC_PLL_SAT_EN,DPC_PLL_PIsat_up,DPC_PLL_PIsat_down);                                                         /// INIT PLL
 8004e8a:	ed9f 3a66 	vldr	s6, [pc, #408]	; 8005024 <main+0x288>
 8004e8e:	eddf 2a66 	vldr	s5, [pc, #408]	; 8005028 <main+0x28c>
 8004e92:	2201      	movs	r2, #1
 8004e94:	2132      	movs	r1, #50	; 0x32
 8004e96:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8004e9a:	eddf 1a64 	vldr	s3, [pc, #400]	; 800502c <main+0x290>
 8004e9e:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8005030 <main+0x294>
 8004ea2:	eddf 0a64 	vldr	s1, [pc, #400]	; 8005034 <main+0x298>
 8004ea6:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8004eaa:	4863      	ldr	r0, [pc, #396]	; (8005038 <main+0x29c>)
 8004eac:	f7fd fc30 	bl	8002710 <DPC_PLL_Init>
  DPC_PI_Init(&CDC.pPI_ID_CURR_CTRL,DPC_ID_KP,DPC_ID_KI,DPC_PI_ID_TS,DPC_PI_ID_sat_up,DPC_PI_ID_sat_down,DPC_PI_ID_SAT_EN,DPC_PI_ID_AW_EN,DPC_PI_ID_AWTG);                                              /// INIT PI CURRENT CTRL D
 8004eb0:	eddf 2a62 	vldr	s5, [pc, #392]	; 800503c <main+0x2a0>
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	ed9f 2a61 	vldr	s4, [pc, #388]	; 8005040 <main+0x2a4>
 8004ebc:	eddf 1a61 	vldr	s3, [pc, #388]	; 8005044 <main+0x2a8>
 8004ec0:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8005048 <main+0x2ac>
 8004ec4:	eddf 0a61 	vldr	s1, [pc, #388]	; 800504c <main+0x2b0>
 8004ec8:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8005050 <main+0x2b4>
 8004ecc:	4861      	ldr	r0, [pc, #388]	; (8005054 <main+0x2b8>)
 8004ece:	f7fe f8bd 	bl	800304c <DPC_PI_Init>
  DPC_PI_Init(&CDC.pPI_IQ_CURR_CTRL,DPC_IQ_KP,DPC_IQ_KI,DPC_PI_IQ_TS,DPC_PI_IQ_sat_up,DPC_PI_IQ_sat_down,DPC_PI_IQ_SAT_EN,DPC_PI_IQ_AW_EN,DPC_PI_IQ_AWTG);                                              /// INIT PI CURRENT CTRL Q
 8004ed2:	eddf 2a5a 	vldr	s5, [pc, #360]	; 800503c <main+0x2a0>
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	2101      	movs	r1, #1
 8004eda:	ed9f 2a5f 	vldr	s4, [pc, #380]	; 8005058 <main+0x2bc>
 8004ede:	eddf 1a5f 	vldr	s3, [pc, #380]	; 800505c <main+0x2c0>
 8004ee2:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8005048 <main+0x2ac>
 8004ee6:	eddf 0a59 	vldr	s1, [pc, #356]	; 800504c <main+0x2b0>
 8004eea:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8005050 <main+0x2b4>
 8004eee:	485c      	ldr	r0, [pc, #368]	; (8005060 <main+0x2c4>)
 8004ef0:	f7fe f8ac 	bl	800304c <DPC_PI_Init>
  DPC_PI_Init(&pPI_VDC_CTRL,DPC_VCTRL_KP,DPC_VCTRL_KI,DPC_PI_VDC_TS,DPC_VCTRL_PI_sat_up,DPC_VCTRL_PI_sat_down,DPC_VCTRL_PI_SAT_EN,DPC_VCTRL_PI_AW_EN,DPC_VCTRL_PI_AWTG);                                /// INIT PI VOLTAGE CTRL
 8004ef4:	eddf 2a5b 	vldr	s5, [pc, #364]	; 8005064 <main+0x2c8>
 8004ef8:	2201      	movs	r2, #1
 8004efa:	2101      	movs	r1, #1
 8004efc:	ed9f 2a40 	vldr	s4, [pc, #256]	; 8005000 <main+0x264>
 8004f00:	eddf 1a59 	vldr	s3, [pc, #356]	; 8005068 <main+0x2cc>
 8004f04:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8005048 <main+0x2ac>
 8004f08:	eddf 0a58 	vldr	s1, [pc, #352]	; 800506c <main+0x2d0>
 8004f0c:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8005070 <main+0x2d4>
 8004f10:	4858      	ldr	r0, [pc, #352]	; (8005074 <main+0x2d8>)
 8004f12:	f7fe f89b 	bl	800304c <DPC_PI_Init>
  DPC_LPCNTRL_CDC_Init(&CDC,DPC_PLL_OMEGAGRID,DPC_INDUCTOR,CDC_FF_Init,CDC_DEC_INIT,CDC_VDC_FF_INIT);
 8004f16:	2300      	movs	r3, #0
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	eddf 0a56 	vldr	s1, [pc, #344]	; 8005078 <main+0x2dc>
 8004f20:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800507c <main+0x2e0>
 8004f24:	4856      	ldr	r0, [pc, #344]	; (8005080 <main+0x2e4>)
 8004f26:	f7fc fec8 	bl	8001cba <DPC_LPCNTRL_CDC_Init>
  DPC_LPCNTRL_BURST_Init(&BURST_CTRL,DPC_BURST_EN,RUN_BURST_VREF_V,RUN_BURST_VHIST,DPC_NO_LOAD_CURR,DPC_LOW_LOAD_CURR,DPC_BURST_DUTY_NL,DPC_BURST_DUTY_LL,&DPC_ADC_Conf);                               /// INIT BURST CONTROL
 8004f2a:	4b3a      	ldr	r3, [pc, #232]	; (8005014 <main+0x278>)
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	eef5 1a00 	vmov.f32	s3, #80	; 0x3e800000  0.250
 8004f32:	ed9f 1a54 	vldr	s2, [pc, #336]	; 8005084 <main+0x2e8>
 8004f36:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8004f3a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004f3e:	230a      	movs	r3, #10
 8004f40:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004f44:	2101      	movs	r1, #1
 8004f46:	4850      	ldr	r0, [pc, #320]	; (8005088 <main+0x2ec>)
 8004f48:	f7fc fb69 	bl	800161e <DPC_LPCNTRL_BURST_Init>
  DPC_LPCNTRL_BURST_Init(&STARTBURST_CTRL,DPC_STARTBURST_EN,STARTBURST_VREF_V,START_BURST_VHIST,DPC_START_NO_LOAD_CURR,DPC_START_LOW_LOAD_CURR,DPC_STARTBURST_DUTY,0,&DPC_ADC_Conf);                    /// INIT STARTBURST CONTROL
 8004f4c:	4b31      	ldr	r3, [pc, #196]	; (8005014 <main+0x278>)
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	eddf 1a2b 	vldr	s3, [pc, #172]	; 8005000 <main+0x264>
 8004f54:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 800508c <main+0x2f0>
 8004f58:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8004f5c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8004f60:	2305      	movs	r3, #5
 8004f62:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004f66:	2101      	movs	r1, #1
 8004f68:	4849      	ldr	r0, [pc, #292]	; (8005090 <main+0x2f4>)
 8004f6a:	f7fc fb58 	bl	800161e <DPC_LPCNTRL_BURST_Init>
  DPC_LPCNTRL_Inrush_Init(&INRUSH_CTRL,INRUSH_VREF_V,INRUSH_VLIM,DPC_NO_LOAD_CURR,DPC_INRS_EN,&DPC_ADC_Conf);
 8004f6e:	4b29      	ldr	r3, [pc, #164]	; (8005014 <main+0x278>)
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	2300      	movs	r3, #0
 8004f74:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004f78:	221e      	movs	r2, #30
 8004f7a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004f7e:	4845      	ldr	r0, [pc, #276]	; (8005094 <main+0x2f8>)
 8004f80:	f7fc fe3d 	bl	8001bfe <DPC_LPCNTRL_Inrush_Init>

  DPC_MISC_ACSource_Init(&AC_Source_Limit,DPC_VAC_PK_OV,DPC_VAC_PK_UV,DPC_VAC_PK_UVLO,DPC_VAC_MIN,DPC_IAC_MAX,&DPC_ADC_Conf);                                                                           /// INIT AC_Source
 8004f84:	4b23      	ldr	r3, [pc, #140]	; (8005014 <main+0x278>)
 8004f86:	9302      	str	r3, [sp, #8]
 8004f88:	231e      	movs	r3, #30
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	2314      	movs	r3, #20
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	238d      	movs	r3, #141	; 0x8d
 8004f92:	2246      	movs	r2, #70	; 0x46
 8004f94:	f240 2135 	movw	r1, #565	; 0x235
 8004f98:	483f      	ldr	r0, [pc, #252]	; (8005098 <main+0x2fc>)
 8004f9a:	f7fd f919 	bl	80021d0 <DPC_MISC_ACSource_Init>
  DPC_MISC_DCLoad_Init(&DC_Load_Limit,DPC_VDC_OV,DPC_VCAP_LIM,DPC_NO_LOAD_CURR,DPC_LOW_LOAD_CURR,DPC_OVER_LOAD_CURR,&DPC_ADC_Conf);
 8004f9e:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <main+0x278>)
 8004fa0:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8004fa4:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8004fa8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004fac:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8004fb0:	f240 21ee 	movw	r1, #750	; 0x2ee
 8004fb4:	4839      	ldr	r0, [pc, #228]	; (800509c <main+0x300>)
 8004fb6:	f7fd f853 	bl	8002060 <DPC_MISC_DCLoad_Init>

  DPC_LPCNTRL_PFC_Init(&pPFC_CTRL,DPC_CTRL_INIT,DPC_PFC_VDC,&DPC_ADC_Conf);
 8004fba:	4b16      	ldr	r3, [pc, #88]	; (8005014 <main+0x278>)
 8004fbc:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004fc0:	2102      	movs	r1, #2
 8004fc2:	4837      	ldr	r0, [pc, #220]	; (80050a0 <main+0x304>)
 8004fc4:	f7fc fea2 	bl	8001d0c <DPC_LPCNTRL_PFC_Init>
  DPC_PWM_Init(DPC_BURST_PWM_FREQ,PWM_FREQ,DPC_PWM_INIT,&tDPC_PWM, &DMA_HRTIM_SRC);
 8004fc8:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <main+0x308>)
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	4b36      	ldr	r3, [pc, #216]	; (80050a8 <main+0x30c>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f649 4140 	movw	r1, #40000	; 0x9c40
 8004fd4:	f644 6020 	movw	r0, #20000	; 0x4e20
 8004fd8:	f7fd ff90 	bl	8002efc <DPC_PWM_Init>
//  DPC_FSM_State_Set(DPC_FSM_WAIT);
//
  DPC_MISC_Appl_Timer_Start();
 8004fdc:	f7fd fa20 	bl	8002420 <DPC_MISC_Appl_Timer_Start>
  DPC_TO_Init();
 8004fe0:	f7fe f92a 	bl	8003238 <DPC_TO_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	2120      	movs	r1, #32
 8004fe8:	4830      	ldr	r0, [pc, #192]	; (80050ac <main+0x310>)
 8004fea:	f003 fd99 	bl	8008b20 <HAL_GPIO_WritePin>
	  DPC_FSM_Application();
 8004fee:	f7fb fe0f 	bl	8000c10 <DPC_FSM_Application>
	  HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 8004ff2:	e7f7      	b.n	8004fe4 <main+0x248>
 8004ff4:	2000c0a4 	.word	0x2000c0a4
 8004ff8:	45000000 	.word	0x45000000
 8004ffc:	42cccccd 	.word	0x42cccccd
 8005000:	00000000 	.word	0x00000000
 8005004:	40fbd70a 	.word	0x40fbd70a
 8005008:	44f4c000 	.word	0x44f4c000
 800500c:	42020000 	.word	0x42020000
 8005010:	44f6e000 	.word	0x44f6e000
 8005014:	20001884 	.word	0x20001884
 8005018:	2000c34c 	.word	0x2000c34c
 800501c:	2000c2b4 	.word	0x2000c2b4
 8005020:	2000c300 	.word	0x2000c300
 8005024:	c2480000 	.word	0xc2480000
 8005028:	42480000 	.word	0x42480000
 800502c:	bfc90fd8 	.word	0xbfc90fd8
 8005030:	3951b717 	.word	0x3951b717
 8005034:	43fa0000 	.word	0x43fa0000
 8005038:	2000bff8 	.word	0x2000bff8
 800503c:	3c23d70a 	.word	0x3c23d70a
 8005040:	bf666666 	.word	0xbf666666
 8005044:	3f666666 	.word	0x3f666666
 8005048:	38d1b717 	.word	0x38d1b717
 800504c:	4410d99a 	.word	0x4410d99a
 8005050:	3e2eb1c4 	.word	0x3e2eb1c4
 8005054:	200005ec 	.word	0x200005ec
 8005058:	bdcccccd 	.word	0xbdcccccd
 800505c:	3dcccccd 	.word	0x3dcccccd
 8005060:	20000634 	.word	0x20000634
 8005064:	3ca3d70a 	.word	0x3ca3d70a
 8005068:	3e9d89d9 	.word	0x3e9d89d9
 800506c:	3e99999a 	.word	0x3e99999a
 8005070:	39d1b717 	.word	0x39d1b717
 8005074:	2000b5a0 	.word	0x2000b5a0
 8005078:	3a6bedfa 	.word	0x3a6bedfa
 800507c:	439d0000 	.word	0x439d0000
 8005080:	200005a4 	.word	0x200005a4
 8005084:	3e19999a 	.word	0x3e19999a
 8005088:	2000b504 	.word	0x2000b504
 800508c:	3d4ccccd 	.word	0x3d4ccccd
 8005090:	2000054c 	.word	0x2000054c
 8005094:	2000b568 	.word	0x2000b568
 8005098:	200006c0 	.word	0x200006c0
 800509c:	2000b538 	.word	0x2000b538
 80050a0:	2000c15c 	.word	0x2000c15c
 80050a4:	2000004c 	.word	0x2000004c
 80050a8:	20001834 	.word	0x20001834
 80050ac:	48000800 	.word	0x48000800

080050b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b0a8      	sub	sp, #160	; 0xa0
 80050b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80050ba:	2238      	movs	r2, #56	; 0x38
 80050bc:	2100      	movs	r1, #0
 80050be:	4618      	mov	r0, r3
 80050c0:	f008 f9e3 	bl	800d48a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	605a      	str	r2, [r3, #4]
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050d4:	463b      	mov	r3, r7
 80050d6:	2254      	movs	r2, #84	; 0x54
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f008 f9d5 	bl	800d48a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80050e0:	2000      	movs	r0, #0
 80050e2:	f006 fa91 	bl	800b608 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80050e6:	2322      	movs	r3, #34	; 0x22
 80050e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80050ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80050f0:	2340      	movs	r3, #64	; 0x40
 80050f2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050fa:	2302      	movs	r3, #2
 80050fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005100:	2302      	movs	r3, #2
 8005102:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8005106:	2304      	movs	r3, #4
 8005108:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800510c:	2355      	movs	r3, #85	; 0x55
 800510e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005112:	2302      	movs	r3, #2
 8005114:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005118:	2302      	movs	r3, #2
 800511a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800511e:	2302      	movs	r3, #2
 8005120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005124:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005128:	4618      	mov	r0, r3
 800512a:	f006 fb21 	bl	800b770 <HAL_RCC_OscConfig>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8005134:	f000 fd60 	bl	8005bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005138:	230f      	movs	r3, #15
 800513a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800513c:	2303      	movs	r3, #3
 800513e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005140:	2300      	movs	r3, #0
 8005142:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005144:	2300      	movs	r3, #0
 8005146:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005148:	2300      	movs	r3, #0
 800514a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800514c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005150:	2104      	movs	r1, #4
 8005152:	4618      	mov	r0, r3
 8005154:	f006 fe24 	bl	800bda0 <HAL_RCC_ClockConfig>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800515e:	f000 fd4b 	bl	8005bf8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12
 8005162:	f44f 33e0 	mov.w	r3, #114688	; 0x1c000
 8005166:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8005168:	2300      	movs	r3, #0
 800516a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800516c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005170:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8005172:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005176:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005178:	463b      	mov	r3, r7
 800517a:	4618      	mov	r0, r3
 800517c:	f007 f816 	bl	800c1ac <HAL_RCCEx_PeriphCLKConfig>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8005186:	f000 fd37 	bl	8005bf8 <Error_Handler>
  }
}
 800518a:	bf00      	nop
 800518c:	37a0      	adds	r7, #160	; 0xa0
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <DPC_FSM_WAIT_Func>:
* @brief  Executes converter's state machine WAIT STate Function
* @param  None
* @retval true/false
*/
bool DPC_FSM_WAIT_Func(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
  bool RetVal = false;
 800519a:	2300      	movs	r3, #0
 800519c:	71fb      	strb	r3, [r7, #7]

  DPC_Status_Plug_ACSource_TypeDef Status_Plug_ACSource;

  DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_Wait);
 800519e:	2208      	movs	r2, #8
 80051a0:	2100      	movs	r1, #0
 80051a2:	4813      	ldr	r0, [pc, #76]	; (80051f0 <DPC_FSM_WAIT_Func+0x5c>)
 80051a4:	f7fd f956 	bl	8002454 <DPC_MISC_BLED_Set>
  //Status_Plug_ACSource=DPC_MISC_AC_SOURCE_Plugged(AC_Source_Limit);
  Status_Plug_ACSource=OK_Plug_ACSource;///Check AC SOURCE state reading AC Voltage and curent
 80051a8:	2301      	movs	r3, #1
 80051aa:	71bb      	strb	r3, [r7, #6]
  if(Status_Plug_ACSource==OK_Plug_ACSource){
 80051ac:	79bb      	ldrb	r3, [r7, #6]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d113      	bne.n	80051da <DPC_FSM_WAIT_Func+0x46>
    if(DPC_TO_Set(TO_IDLE,TO_IDLE_Tick)==TO_OUT_OK){                                       ///TimeOut of Idle State of the Finite State Machine
 80051b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80051b6:	2004      	movs	r0, #4
 80051b8:	f7fe f85e 	bl	8003278 <DPC_TO_Set>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d105      	bne.n	80051ce <DPC_FSM_WAIT_Func+0x3a>
      RetVal = true;
 80051c2:	2301      	movs	r3, #1
 80051c4:	71fb      	strb	r3, [r7, #7]
      DPC_FSM_State_Set(DPC_FSM_IDLE);
 80051c6:	2001      	movs	r0, #1
 80051c8:	f7fb fdc0 	bl	8000d4c <DPC_FSM_State_Set>
 80051cc:	e00a      	b.n	80051e4 <DPC_FSM_WAIT_Func+0x50>
    }
    else{
      RetVal = false;
 80051ce:	2300      	movs	r3, #0
 80051d0:	71fb      	strb	r3, [r7, #7]
      DPC_FSM_State_Set(DPC_FSM_STOP);
 80051d2:	2005      	movs	r0, #5
 80051d4:	f7fb fdba 	bl	8000d4c <DPC_FSM_State_Set>
 80051d8:	e004      	b.n	80051e4 <DPC_FSM_WAIT_Func+0x50>
    }
  }
  else{
      RetVal = true;
 80051da:	2301      	movs	r3, #1
 80051dc:	71fb      	strb	r3, [r7, #7]
      DPC_FSM_State_Set(DPC_FSM_WAIT);
 80051de:	2000      	movs	r0, #0
 80051e0:	f7fb fdb4 	bl	8000d4c <DPC_FSM_State_Set>
  }
  return RetVal;
 80051e4:	79fb      	ldrb	r3, [r7, #7]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	2000c268 	.word	0x2000c268

080051f4 <DPC_FSM_IDLE_Func>:
* @brief  Executes converter's state machine IDLE STate Function
* @param  None
* @retval true/false
*/
bool DPC_FSM_IDLE_Func(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
  bool RetVal = true;
 80051fa:	2301      	movs	r3, #1
 80051fc:	71fb      	strb	r3, [r7, #7]

  DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_Idle);                           ///DPC Bicolor LED SET to FSM_Idle
 80051fe:	2200      	movs	r2, #0
 8005200:	2100      	movs	r1, #0
 8005202:	481a      	ldr	r0, [pc, #104]	; (800526c <DPC_FSM_IDLE_Func+0x78>)
 8005204:	f7fd f926 	bl	8002454 <DPC_MISC_BLED_Set>

  if(DPC_TO_Check(TO_IDLE)==TO_OUT_TOOK || DPC_TO_Check(TO_IDLE)==TO_OUT_ERR){
 8005208:	2004      	movs	r0, #4
 800520a:	f7fe f85b 	bl	80032c4 <DPC_TO_Check>
 800520e:	4603      	mov	r3, r0
 8005210:	2b02      	cmp	r3, #2
 8005212:	d005      	beq.n	8005220 <DPC_FSM_IDLE_Func+0x2c>
 8005214:	2004      	movs	r0, #4
 8005216:	f7fe f855 	bl	80032c4 <DPC_TO_Check>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d120      	bne.n	8005262 <DPC_FSM_IDLE_Func+0x6e>

//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);
    if(Status_Source==OK_SOURCE){
 8005220:	4b13      	ldr	r3, [pc, #76]	; (8005270 <DPC_FSM_IDLE_Func+0x7c>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b04      	cmp	r3, #4
 8005226:	d11c      	bne.n	8005262 <DPC_FSM_IDLE_Func+0x6e>
      if(Status_Load==NO_LOAD){
 8005228:	4b12      	ldr	r3, [pc, #72]	; (8005274 <DPC_FSM_IDLE_Func+0x80>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10f      	bne.n	8005250 <DPC_FSM_IDLE_Func+0x5c>
        DPC_PWM_OutDisable();
 8005230:	f7fd fe40 	bl	8002eb4 <DPC_PWM_OutDisable>
        //      if(HAL_GPIO_ReadPin(USR_BTN_GPIO_Port, USR_BTN_Pin)){
        if (VOLTAGE_ADC_DC_IN_PHY.Vdc_tot > DPC_VDC){
 8005234:	4b10      	ldr	r3, [pc, #64]	; (8005278 <DPC_FSM_IDLE_Func+0x84>)
 8005236:	edd3 7a02 	vldr	s15, [r3, #8]
 800523a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800527c <DPC_FSM_IDLE_Func+0x88>
 800523e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005246:	dd0c      	ble.n	8005262 <DPC_FSM_IDLE_Func+0x6e>
        	DPC_FSM_State_Set(DPC_FSM_INIT);
 8005248:	2002      	movs	r0, #2
 800524a:	f7fb fd7f 	bl	8000d4c <DPC_FSM_State_Set>
 800524e:	e008      	b.n	8005262 <DPC_FSM_IDLE_Func+0x6e>
        }
        //      }
      }

      else{
        RetVal = false;
 8005250:	2300      	movs	r3, #0
 8005252:	71fb      	strb	r3, [r7, #7]
        DPC_FLT_Faulterror_Set(ERROR_IDLE);
 8005254:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005258:	f7fb fed0 	bl	8000ffc <DPC_FLT_Faulterror_Set>
        DPC_FSM_State_Set(DPC_FSM_STOP);
 800525c:	2005      	movs	r0, #5
 800525e:	f7fb fd75 	bl	8000d4c <DPC_FSM_State_Set>
      }
    }
  }

  return RetVal;
 8005262:	79fb      	ldrb	r3, [r7, #7]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	2000c268 	.word	0x2000c268
 8005270:	20000680 	.word	0x20000680
 8005274:	2000c144 	.word	0x2000c144
 8005278:	20000530 	.word	0x20000530
 800527c:	43960000 	.word	0x43960000

08005280 <DPC_FSM_INIT_Func>:
* @brief  Executes converter's state machine INIT STate Function
* @param  None
* @retval true/false
*/
bool DPC_FSM_INIT_Func(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
  bool RetVal = true;
 8005286:	2301      	movs	r3, #1
 8005288:	71fb      	strb	r3, [r7, #7]

  //DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_StartUp_inrush);                                                             ///DPC Bicolor LED SET to FSM_StartUp_inrush
  DPC_PWM_OutDisable();
 800528a:	f7fd fe13 	bl	8002eb4 <DPC_PWM_OutDisable>
  if (!Relay_State && Status_Source==OK_SOURCE ){
 800528e:	4b44      	ldr	r3, [pc, #272]	; (80053a0 <DPC_FSM_INIT_Func+0x120>)
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d122      	bne.n	80052dc <DPC_FSM_INIT_Func+0x5c>
 8005296:	4b43      	ldr	r3, [pc, #268]	; (80053a4 <DPC_FSM_INIT_Func+0x124>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b04      	cmp	r3, #4
 800529c:	d11e      	bne.n	80052dc <DPC_FSM_INIT_Func+0x5c>
	  TO_State=DPC_TO_Check(RELAY_TO_CH);
 800529e:	2001      	movs	r0, #1
 80052a0:	f7fe f810 	bl	80032c4 <DPC_TO_Check>
 80052a4:	4603      	mov	r3, r0
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b3f      	ldr	r3, [pc, #252]	; (80053a8 <DPC_FSM_INIT_Func+0x128>)
 80052aa:	701a      	strb	r2, [r3, #0]
	  if (TO_State==TO_OUT_TOOK){
 80052ac:	4b3e      	ldr	r3, [pc, #248]	; (80053a8 <DPC_FSM_INIT_Func+0x128>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d109      	bne.n	80052c8 <DPC_FSM_INIT_Func+0x48>
		  Relay_State = 1;
 80052b4:	4b3a      	ldr	r3, [pc, #232]	; (80053a0 <DPC_FSM_INIT_Func+0x120>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_SET);
 80052ba:	2201      	movs	r2, #1
 80052bc:	2180      	movs	r1, #128	; 0x80
 80052be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052c2:	f003 fc2d 	bl	8008b20 <HAL_GPIO_WritePin>
	  if (TO_State==TO_OUT_TOOK){
 80052c6:	e064      	b.n	8005392 <DPC_FSM_INIT_Func+0x112>
	  }
	  else if (TO_State==TO_OUT_OK){
 80052c8:	4b37      	ldr	r3, [pc, #220]	; (80053a8 <DPC_FSM_INIT_Func+0x128>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d060      	beq.n	8005392 <DPC_FSM_INIT_Func+0x112>

	  }
	  else{
		  DPC_TO_Set(RELAY_TO_CH, RELAY_TIMEOUT);
 80052d0:	f241 3188 	movw	r1, #5000	; 0x1388
 80052d4:	2001      	movs	r0, #1
 80052d6:	f7fd ffcf 	bl	8003278 <DPC_TO_Set>
	  if (TO_State==TO_OUT_TOOK){
 80052da:	e05a      	b.n	8005392 <DPC_FSM_INIT_Func+0x112>
	  }
  }
  else if(Status_Source==OK_SOURCE && Relay_State){
 80052dc:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <DPC_FSM_INIT_Func+0x124>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d157      	bne.n	8005394 <DPC_FSM_INIT_Func+0x114>
 80052e4:	4b2e      	ldr	r3, [pc, #184]	; (80053a0 <DPC_FSM_INIT_Func+0x120>)
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d053      	beq.n	8005394 <DPC_FSM_INIT_Func+0x114>


//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_ON);
//    DPC_MISC_RELAY_Cntl(RELAY_SER_1, RELAY_OFF);                                                                            ///Insert Inrush current resistor opening the Inrush relays

    if (INRUSH_State==INRUSH_Disable){
 80052ec:	4b2f      	ldr	r3, [pc, #188]	; (80053ac <DPC_FSM_INIT_Func+0x12c>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b05      	cmp	r3, #5
 80052f2:	d106      	bne.n	8005302 <DPC_FSM_INIT_Func+0x82>
		PC_State=FSM_StartUp_burst;
 80052f4:	4b2e      	ldr	r3, [pc, #184]	; (80053b0 <DPC_FSM_INIT_Func+0x130>)
 80052f6:	2202      	movs	r2, #2
 80052f8:	701a      	strb	r2, [r3, #0]
		DPC_FSM_State_Set(DPC_FSM_START);
 80052fa:	2003      	movs	r0, #3
 80052fc:	f7fb fd26 	bl	8000d4c <DPC_FSM_State_Set>
 8005300:	e048      	b.n	8005394 <DPC_FSM_INIT_Func+0x114>

//      DPC_MISC_RELAY_Cntl(RELAY_SER_1, RELAY_ON);                                                                           /// Bypass Resistors of the inrush current limiter
    }
    else {
      if(INRUSH_State==INRUSH_Start){
 8005302:	4b2a      	ldr	r3, [pc, #168]	; (80053ac <DPC_FSM_INIT_Func+0x12c>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d107      	bne.n	800531a <DPC_FSM_INIT_Func+0x9a>
        //future check here
        INRUSH_State=INRUSH_Progress;
 800530a:	4b28      	ldr	r3, [pc, #160]	; (80053ac <DPC_FSM_INIT_Func+0x12c>)
 800530c:	2203      	movs	r2, #3
 800530e:	701a      	strb	r2, [r3, #0]
        DPC_FLT_Error_Reset(ERROR_PFC_UVLO);
 8005310:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005314:	f7fb fe84 	bl	8001020 <DPC_FLT_Error_Reset>
 8005318:	e03c      	b.n	8005394 <DPC_FSM_INIT_Func+0x114>
      }
      else if(INRUSH_State==INRUSH_Progress){
 800531a:	4b24      	ldr	r3, [pc, #144]	; (80053ac <DPC_FSM_INIT_Func+0x12c>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d110      	bne.n	8005344 <DPC_FSM_INIT_Func+0xc4>
        //!!!
    	//INRUSH_State=DPC_LPCNTRL_Inrush_Check((uint32_t*)Read_Volt_DC(),(uint32_t*)Read_Curr_DC(),&INRUSH_CTRL);            ///Inrush Check for the FSM
    	INRUSH_State=DPC_LPCNTRL_Inrush_Check((uint32_t*)Read_Volt_DC(),&CURRENT_ADC_AC_IN_PHY,&INRUSH_CTRL);
 8005322:	f7fb fc6b 	bl	8000bfc <Read_Volt_DC>
 8005326:	4603      	mov	r3, r0
 8005328:	4a22      	ldr	r2, [pc, #136]	; (80053b4 <DPC_FSM_INIT_Func+0x134>)
 800532a:	4923      	ldr	r1, [pc, #140]	; (80053b8 <DPC_FSM_INIT_Func+0x138>)
 800532c:	4618      	mov	r0, r3
 800532e:	f7fc fba8 	bl	8001a82 <DPC_LPCNTRL_Inrush_Check>
 8005332:	4603      	mov	r3, r0
 8005334:	461a      	mov	r2, r3
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <DPC_FSM_INIT_Func+0x12c>)
 8005338:	701a      	strb	r2, [r3, #0]
    	DPC_FLT_Error_Reset(ERROR_PFC_UVLO);
 800533a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800533e:	f7fb fe6f 	bl	8001020 <DPC_FLT_Error_Reset>
 8005342:	e027      	b.n	8005394 <DPC_FSM_INIT_Func+0x114>
      }
      else if(INRUSH_State==INRUSH_Complete){
 8005344:	4b19      	ldr	r3, [pc, #100]	; (80053ac <DPC_FSM_INIT_Func+0x12c>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d10d      	bne.n	8005368 <DPC_FSM_INIT_Func+0xe8>



        PC_State=FSM_StartUp_burst;
 800534c:	4b18      	ldr	r3, [pc, #96]	; (80053b0 <DPC_FSM_INIT_Func+0x130>)
 800534e:	2202      	movs	r2, #2
 8005350:	701a      	strb	r2, [r3, #0]
        //DPC_MISC_RELAY_Cntl(RELAY_SER_1, RELAY_ON);                                                                         /// Bypass Resistors of the inrush current limiter
        DPC_FLT_Error_Reset(ERROR_PFC_UVLO);
 8005352:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005356:	f7fb fe63 	bl	8001020 <DPC_FLT_Error_Reset>
        DPC_FLT_Error_Reset(FAULT_PLL_OR);
 800535a:	2080      	movs	r0, #128	; 0x80
 800535c:	f7fb fe60 	bl	8001020 <DPC_FLT_Error_Reset>
        DPC_FSM_State_Set(DPC_FSM_START);
 8005360:	2003      	movs	r0, #3
 8005362:	f7fb fcf3 	bl	8000d4c <DPC_FSM_State_Set>
 8005366:	e015      	b.n	8005394 <DPC_FSM_INIT_Func+0x114>
      }
      else if(INRUSH_State==INRUSH_Error){
 8005368:	4b10      	ldr	r3, [pc, #64]	; (80053ac <DPC_FSM_INIT_Func+0x12c>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d105      	bne.n	800537c <DPC_FSM_INIT_Func+0xfc>

        RetVal = false;
 8005370:	2300      	movs	r3, #0
 8005372:	71fb      	strb	r3, [r7, #7]
        //      DPC_FLT_Faulterror_Set(ERROR_START_INRS);
        DPC_FLT_Faulterror_Set(FAULT_INR);
 8005374:	2020      	movs	r0, #32
 8005376:	f7fb fe41 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 800537a:	e00b      	b.n	8005394 <DPC_FSM_INIT_Func+0x114>
      }
      else if(INRUSH_State==INRUSH_Disable){
 800537c:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <DPC_FSM_INIT_Func+0x12c>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b05      	cmp	r3, #5
 8005382:	d107      	bne.n	8005394 <DPC_FSM_INIT_Func+0x114>
        PC_State=FSM_StartUp_burst;
 8005384:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <DPC_FSM_INIT_Func+0x130>)
 8005386:	2202      	movs	r2, #2
 8005388:	701a      	strb	r2, [r3, #0]
        DPC_FSM_State_Set(DPC_FSM_START);
 800538a:	2003      	movs	r0, #3
 800538c:	f7fb fcde 	bl	8000d4c <DPC_FSM_State_Set>
 8005390:	e000      	b.n	8005394 <DPC_FSM_INIT_Func+0x114>
	  if (TO_State==TO_OUT_TOOK){
 8005392:	bf00      	nop
        //DPC_MISC_RELAY_Cntl(RELAY_SER_1, RELAY_ON);                                                                         /// Bypass Resistors of the inrush current limiter
      }
    }
  }
return RetVal;
 8005394:	79fb      	ldrb	r3, [r7, #7]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	2000b624 	.word	0x2000b624
 80053a4:	20000680 	.word	0x20000680
 80053a8:	2000b58c 	.word	0x2000b58c
 80053ac:	2000b54a 	.word	0x2000b54a
 80053b0:	20000580 	.word	0x20000580
 80053b4:	2000b568 	.word	0x2000b568
 80053b8:	20000518 	.word	0x20000518

080053bc <DPC_FSM_START_Func>:
* @brief  Executes converter's state machine START STate Function
* @param  None
* @retval true/false
*/
bool DPC_FSM_START_Func(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
  bool RetVal = true;
 80053c2:	2301      	movs	r3, #1
 80053c4:	71fb      	strb	r3, [r7, #7]

  TO_State=DPC_TO_Check(FSM_START_TO_CH);
 80053c6:	2001      	movs	r0, #1
 80053c8:	f7fd ff7c 	bl	80032c4 <DPC_TO_Check>
 80053cc:	4603      	mov	r3, r0
 80053ce:	461a      	mov	r2, r3
 80053d0:	4b35      	ldr	r3, [pc, #212]	; (80054a8 <DPC_FSM_START_Func+0xec>)
 80053d2:	701a      	strb	r2, [r3, #0]
  if (TO_State==TO_OUT_TOOK){
 80053d4:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <DPC_FSM_START_Func+0xec>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d156      	bne.n	800548a <DPC_FSM_START_Func+0xce>
	  DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_StartUp_burst);                                                      ///DPC Bicolor LED SET to FSM_StartUp_burst
 80053dc:	2205      	movs	r2, #5
 80053de:	2100      	movs	r1, #0
 80053e0:	4832      	ldr	r0, [pc, #200]	; (80054ac <DPC_FSM_START_Func+0xf0>)
 80053e2:	f7fd f837 	bl	8002454 <DPC_MISC_BLED_Set>
	//  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET);                                                              ///

	  if(Status_Source==NO_SOURCE){
 80053e6:	4b32      	ldr	r3, [pc, #200]	; (80054b0 <DPC_FSM_START_Func+0xf4>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d106      	bne.n	80053fc <DPC_FSM_START_Func+0x40>
		  DPC_FLT_Faulterror_Set(ERROR_AC_OFF);
 80053ee:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80053f2:	f7fb fe03 	bl	8000ffc <DPC_FLT_Faulterror_Set>
		  DPC_FSM_State_Set(DPC_FSM_ERROR);
 80053f6:	2006      	movs	r0, #6
 80053f8:	f7fb fca8 	bl	8000d4c <DPC_FSM_State_Set>
	  }
	  if(BURST_State==BURST_Start){
 80053fc:	4b2d      	ldr	r3, [pc, #180]	; (80054b4 <DPC_FSM_START_Func+0xf8>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d107      	bne.n	8005414 <DPC_FSM_START_Func+0x58>
	    //future check here
	    BURST_State=BURST_Progress;
 8005404:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <DPC_FSM_START_Func+0xf8>)
 8005406:	2203      	movs	r2, #3
 8005408:	701a      	strb	r2, [r3, #0]
	    DPC_FLT_Error_Reset(ERROR_PFC_UVLO);
 800540a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800540e:	f7fb fe07 	bl	8001020 <DPC_FLT_Error_Reset>
 8005412:	e043      	b.n	800549c <DPC_FSM_START_Func+0xe0>
	  }
	  else if(BURST_State==BURST_Progress){
 8005414:	4b27      	ldr	r3, [pc, #156]	; (80054b4 <DPC_FSM_START_Func+0xf8>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b03      	cmp	r3, #3
 800541a:	d110      	bne.n	800543e <DPC_FSM_START_Func+0x82>
	    //BURST_State=DPC_LPCNTRL_Burst_Check((uint32_t*)Read_Volt_DC(),(uint32_t*)Read_Curr_DC(),&STARTBURST_CTRL);        ///Burst Check for the FSM
		  BURST_State=DPC_LPCNTRL_Burst_Check((uint32_t*)Read_Volt_DC(),&CURRENT_ADC_AC_IN_PHY_RMS,&STARTBURST_CTRL);
 800541c:	f7fb fbee 	bl	8000bfc <Read_Volt_DC>
 8005420:	4603      	mov	r3, r0
 8005422:	4a25      	ldr	r2, [pc, #148]	; (80054b8 <DPC_FSM_START_Func+0xfc>)
 8005424:	4925      	ldr	r1, [pc, #148]	; (80054bc <DPC_FSM_START_Func+0x100>)
 8005426:	4618      	mov	r0, r3
 8005428:	f7fc f971 	bl	800170e <DPC_LPCNTRL_Burst_Check>
 800542c:	4603      	mov	r3, r0
 800542e:	461a      	mov	r2, r3
 8005430:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <DPC_FSM_START_Func+0xf8>)
 8005432:	701a      	strb	r2, [r3, #0]

		  DPC_FLT_Error_Reset(ERROR_PFC_UVLO);
 8005434:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005438:	f7fb fdf2 	bl	8001020 <DPC_FLT_Error_Reset>
 800543c:	e02e      	b.n	800549c <DPC_FSM_START_Func+0xe0>
	  }
	  else if(BURST_State==BURST_Complete){
 800543e:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <DPC_FSM_START_Func+0xf8>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d10c      	bne.n	8005460 <DPC_FSM_START_Func+0xa4>
	    DPC_FLT_Error_Reset(ERROR_PFC_UVLO);
 8005446:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800544a:	f7fb fde9 	bl	8001020 <DPC_FLT_Error_Reset>
	    PC_State=FSM_Run;
 800544e:	4b1c      	ldr	r3, [pc, #112]	; (80054c0 <DPC_FSM_START_Func+0x104>)
 8005450:	2203      	movs	r2, #3
 8005452:	701a      	strb	r2, [r3, #0]
	    DPC_FSM_State_Set(DPC_FSM_RUN);
 8005454:	2004      	movs	r0, #4
 8005456:	f7fb fc79 	bl	8000d4c <DPC_FSM_State_Set>
	    DPC_PWM_OutDisable();
 800545a:	f7fd fd2b 	bl	8002eb4 <DPC_PWM_OutDisable>
 800545e:	e01d      	b.n	800549c <DPC_FSM_START_Func+0xe0>
	  }
	  else if(BURST_State==BURST_Error){
 8005460:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <DPC_FSM_START_Func+0xf8>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d108      	bne.n	800547a <DPC_FSM_START_Func+0xbe>
	    RetVal = false;
 8005468:	2300      	movs	r3, #0
 800546a:	71fb      	strb	r3, [r7, #7]
	    DPC_FSM_State_Set(DPC_FSM_STOP);
 800546c:	2005      	movs	r0, #5
 800546e:	f7fb fc6d 	bl	8000d4c <DPC_FSM_State_Set>
	    //      DPC_FLT_Faulterror_Set(ERROR_BRS);
	    DPC_FLT_Faulterror_Set(FAULT_BRS);
 8005472:	2040      	movs	r0, #64	; 0x40
 8005474:	f7fb fdc2 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 8005478:	e010      	b.n	800549c <DPC_FSM_START_Func+0xe0>
	  }
	  else if(BURST_State==BURST_Disable){
 800547a:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <DPC_FSM_START_Func+0xf8>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b05      	cmp	r3, #5
 8005480:	d10c      	bne.n	800549c <DPC_FSM_START_Func+0xe0>
	    DPC_FSM_State_Set(DPC_FSM_RUN);
 8005482:	2004      	movs	r0, #4
 8005484:	f7fb fc62 	bl	8000d4c <DPC_FSM_State_Set>
 8005488:	e008      	b.n	800549c <DPC_FSM_START_Func+0xe0>
	  }
  }
  else if (TO_State==TO_OUT_OK){
 800548a:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <DPC_FSM_START_Func+0xec>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d004      	beq.n	800549c <DPC_FSM_START_Func+0xe0>

  }
  else{
	  DPC_TO_Set(FSM_START_TO_CH, FSM_START_TIMEOUT);
 8005492:	f241 3188 	movw	r1, #5000	; 0x1388
 8005496:	2001      	movs	r0, #1
 8005498:	f7fd feee 	bl	8003278 <DPC_TO_Set>
  }


  return RetVal;
 800549c:	79fb      	ldrb	r3, [r7, #7]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	2000b58c 	.word	0x2000b58c
 80054ac:	2000c268 	.word	0x2000c268
 80054b0:	20000680 	.word	0x20000680
 80054b4:	20001810 	.word	0x20001810
 80054b8:	2000054c 	.word	0x2000054c
 80054bc:	2000b590 	.word	0x2000b590
 80054c0:	20000580 	.word	0x20000580

080054c4 <DPC_FSM_RUN_Func>:
* @brief  Executes converter's state machine RUN STate Function
* @param  None
* @retval true/false
*/
bool DPC_FSM_RUN_Func(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
  bool RetVal = true;
 80054ca:	2301      	movs	r3, #1
 80054cc:	71fb      	strb	r3, [r7, #7]

  if(DPC_FLT_Faulterror_Check()){
 80054ce:	f7fb fc4d 	bl	8000d6c <DPC_FLT_Faulterror_Check>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <DPC_FSM_RUN_Func+0x20>
      RetVal = false;
 80054d8:	2300      	movs	r3, #0
 80054da:	71fb      	strb	r3, [r7, #7]
      DPC_FSM_State_Set(DPC_FSM_STOP);
 80054dc:	2005      	movs	r0, #5
 80054de:	f7fb fc35 	bl	8000d4c <DPC_FSM_State_Set>
 80054e2:	e032      	b.n	800554a <DPC_FSM_RUN_Func+0x86>
  }
  else{

  //WIP - Insert Check Grid (PLL MUST BE SYNCHRONIZED)
  DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_Run);                                  ///DPC Bicolor LED SET to FSM_Run
 80054e4:	2204      	movs	r2, #4
 80054e6:	2100      	movs	r1, #0
 80054e8:	481a      	ldr	r0, [pc, #104]	; (8005554 <DPC_FSM_RUN_Func+0x90>)
 80054ea:	f7fc ffb3 	bl	8002454 <DPC_MISC_BLED_Set>
  if(Status_Source==OK_SOURCE  && PLL_Status==PLL_SYNC){
 80054ee:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <DPC_FSM_RUN_Func+0x94>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d121      	bne.n	800553a <DPC_FSM_RUN_Func+0x76>
 80054f6:	4b19      	ldr	r3, [pc, #100]	; (800555c <DPC_FSM_RUN_Func+0x98>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d11d      	bne.n	800553a <DPC_FSM_RUN_Func+0x76>
    if(Status_Load==NO_LOAD){
 80054fe:	4b18      	ldr	r3, [pc, #96]	; (8005560 <DPC_FSM_RUN_Func+0x9c>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <DPC_FSM_RUN_Func+0x50>
      BURST_CTRL.BURST_Status=BURST_Run;
 8005506:	4b17      	ldr	r3, [pc, #92]	; (8005564 <DPC_FSM_RUN_Func+0xa0>)
 8005508:	2206      	movs	r2, #6
 800550a:	779a      	strb	r2, [r3, #30]
      FSM_Run_State=Run_Burst_Mode;
 800550c:	4b16      	ldr	r3, [pc, #88]	; (8005568 <DPC_FSM_RUN_Func+0xa4>)
 800550e:	2201      	movs	r2, #1
 8005510:	701a      	strb	r2, [r3, #0]
    if(Status_Load==NO_LOAD){
 8005512:	e019      	b.n	8005548 <DPC_FSM_RUN_Func+0x84>
    }
    else if(Status_Load==LOW_LOAD){
 8005514:	4b12      	ldr	r3, [pc, #72]	; (8005560 <DPC_FSM_RUN_Func+0x9c>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d106      	bne.n	800552a <DPC_FSM_RUN_Func+0x66>
      BURST_CTRL.BURST_Status=BURST_Run;
 800551c:	4b11      	ldr	r3, [pc, #68]	; (8005564 <DPC_FSM_RUN_Func+0xa0>)
 800551e:	2206      	movs	r2, #6
 8005520:	779a      	strb	r2, [r3, #30]
      FSM_Run_State=Run_Burst_Mode;
 8005522:	4b11      	ldr	r3, [pc, #68]	; (8005568 <DPC_FSM_RUN_Func+0xa4>)
 8005524:	2201      	movs	r2, #1
 8005526:	701a      	strb	r2, [r3, #0]
    if(Status_Load==NO_LOAD){
 8005528:	e00e      	b.n	8005548 <DPC_FSM_RUN_Func+0x84>
    }
    else if(Status_Load==ON_LOAD){
 800552a:	4b0d      	ldr	r3, [pc, #52]	; (8005560 <DPC_FSM_RUN_Func+0x9c>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d10a      	bne.n	8005548 <DPC_FSM_RUN_Func+0x84>
      FSM_Run_State=Run_PFC_Mode;
 8005532:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <DPC_FSM_RUN_Func+0xa4>)
 8005534:	2202      	movs	r2, #2
 8005536:	701a      	strb	r2, [r3, #0]
    if(Status_Load==NO_LOAD){
 8005538:	e006      	b.n	8005548 <DPC_FSM_RUN_Func+0x84>
//      DPC_FLT_Faulterror_Set(ERROR_PFC_RUN);
//      DPC_FSM_State_Set(DPC_FSM_STOP);
//    }
  }
  else{
    RetVal = false;
 800553a:	2300      	movs	r3, #0
 800553c:	71fb      	strb	r3, [r7, #7]
    DPC_FLT_Faulterror_Set(ERROR_PFC);
 800553e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005542:	f7fb fd5b 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 8005546:	e000      	b.n	800554a <DPC_FSM_RUN_Func+0x86>
    if(Status_Load==NO_LOAD){
 8005548:	bf00      	nop
  }
  }
  return RetVal;
 800554a:	79fb      	ldrb	r3, [r7, #7]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	2000c268 	.word	0x2000c268
 8005558:	20000680 	.word	0x20000680
 800555c:	200006bc 	.word	0x200006bc
 8005560:	2000c144 	.word	0x2000c144
 8005564:	2000b504 	.word	0x2000b504
 8005568:	2000b610 	.word	0x2000b610

0800556c <DPC_FSM_STOP_Func>:
  * @brief  Executes converter's state machine STOP STate Function
  * @param  None
  * @retval true/false
  */
bool DPC_FSM_STOP_Func(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
bool RetVal = true;
 8005572:	2301      	movs	r3, #1
 8005574:	71fb      	strb	r3, [r7, #7]

  //DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_Stop);                                 ///DPC Bicolor LED SET to FSM_Stop
  DPC_FSM_State_Set(DPC_FSM_ERROR);
 8005576:	2006      	movs	r0, #6
 8005578:	f7fb fbe8 	bl	8000d4c <DPC_FSM_State_Set>

 return RetVal;
 800557c:	79fb      	ldrb	r3, [r7, #7]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <DPC_FSM_ERROR_Func>:
* @brief  Executes converter's state machine ERR/FAUL STate Function
* @param  None
* @retval true/false
*/
bool DPC_FSM_ERROR_Func(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
  bool RetVal = true;
 800558e:	2301      	movs	r3, #1
 8005590:	71fb      	strb	r3, [r7, #7]
  DPC_FAULTERROR_LIST_TypeDef eError;

  DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_Error);                                ///DPC Bicolor LED SET to FSM_Error
 8005592:	2203      	movs	r2, #3
 8005594:	2100      	movs	r1, #0
 8005596:	483e      	ldr	r0, [pc, #248]	; (8005690 <DPC_FSM_ERROR_Func+0x108>)
 8005598:	f7fc ff5c 	bl	8002454 <DPC_MISC_BLED_Set>
  eError = DPC_FLT_Faulterror_Check();
 800559c:	f7fb fbe6 	bl	8000d6c <DPC_FLT_Faulterror_Check>
 80055a0:	6038      	str	r0, [r7, #0]

  if(eError & FAULT_MASK){
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00d      	beq.n	80055c6 <DPC_FSM_ERROR_Func+0x3e>
    DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 80055aa:	f7fd fc83 	bl	8002eb4 <DPC_PWM_OutDisable>
    //DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
    HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 80055ae:	2200      	movs	r2, #0
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055b6:	f003 fab3 	bl	8008b20 <HAL_GPIO_WritePin>
    //Fault detected
    RetVal = false;
 80055ba:	2300      	movs	r3, #0
 80055bc:	71fb      	strb	r3, [r7, #7]
    DPC_FSM_State_Set(DPC_FSM_FAULT);
 80055be:	2007      	movs	r0, #7
 80055c0:	f7fb fbc4 	bl	8000d4c <DPC_FSM_State_Set>
 80055c4:	e05e      	b.n	8005684 <DPC_FSM_ERROR_Func+0xfc>
  }
  else if(eError & ERROR_MASK){
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	0c1b      	lsrs	r3, r3, #16
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d059      	beq.n	8005684 <DPC_FSM_ERROR_Func+0xfc>
    //put here the error recovery
    if(DPC_FLT_Faulterror_Check()==ERROR_PFC_UVLO)
 80055d0:	f7fb fbcc 	bl	8000d6c <DPC_FLT_Faulterror_Check>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055da:	d110      	bne.n	80055fe <DPC_FSM_ERROR_Func+0x76>
    {
      if(PC_State==FSM_Run){
 80055dc:	4b2d      	ldr	r3, [pc, #180]	; (8005694 <DPC_FSM_ERROR_Func+0x10c>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d14f      	bne.n	8005684 <DPC_FSM_ERROR_Func+0xfc>
        DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 80055e4:	f7fd fc66 	bl	8002eb4 <DPC_PWM_OutDisable>
//        DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
        HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 80055e8:	2200      	movs	r2, #0
 80055ea:	2180      	movs	r1, #128	; 0x80
 80055ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055f0:	f003 fa96 	bl	8008b20 <HAL_GPIO_WritePin>
        DPC_FLT_Faulterror_Set(FAULT_PFC_UVLO);
 80055f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80055f8:	f7fb fd00 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 80055fc:	e042      	b.n	8005684 <DPC_FSM_ERROR_Func+0xfc>
      }
    }
    else if(DPC_FLT_Faulterror_Check()==ERROR_PLL_OR)
 80055fe:	f7fb fbb5 	bl	8000d6c <DPC_FLT_Faulterror_Check>
 8005602:	4603      	mov	r3, r0
 8005604:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005608:	d10f      	bne.n	800562a <DPC_FSM_ERROR_Func+0xa2>
    {
      if(PC_State==FSM_Run){
 800560a:	4b22      	ldr	r3, [pc, #136]	; (8005694 <DPC_FSM_ERROR_Func+0x10c>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b03      	cmp	r3, #3
 8005610:	d138      	bne.n	8005684 <DPC_FSM_ERROR_Func+0xfc>
        DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 8005612:	f7fd fc4f 	bl	8002eb4 <DPC_PWM_OutDisable>
//        DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
        HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 8005616:	2200      	movs	r2, #0
 8005618:	2180      	movs	r1, #128	; 0x80
 800561a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800561e:	f003 fa7f 	bl	8008b20 <HAL_GPIO_WritePin>
        DPC_FLT_Faulterror_Set(FAULT_PLL_OR);
 8005622:	2080      	movs	r0, #128	; 0x80
 8005624:	f7fb fcea 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 8005628:	e02c      	b.n	8005684 <DPC_FSM_ERROR_Func+0xfc>
      }
    }
    else if(DPC_FLT_Faulterror_Check()==ERROR_AC_OFF)
 800562a:	f7fb fb9f 	bl	8000d6c <DPC_FLT_Faulterror_Check>
 800562e:	4603      	mov	r3, r0
 8005630:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005634:	d110      	bne.n	8005658 <DPC_FSM_ERROR_Func+0xd0>
    {
      if(PC_State==FSM_Run){
 8005636:	4b17      	ldr	r3, [pc, #92]	; (8005694 <DPC_FSM_ERROR_Func+0x10c>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b03      	cmp	r3, #3
 800563c:	d122      	bne.n	8005684 <DPC_FSM_ERROR_Func+0xfc>
        DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 800563e:	f7fd fc39 	bl	8002eb4 <DPC_PWM_OutDisable>
//        DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
        HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 8005642:	2200      	movs	r2, #0
 8005644:	2180      	movs	r1, #128	; 0x80
 8005646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800564a:	f003 fa69 	bl	8008b20 <HAL_GPIO_WritePin>
        DPC_FLT_Faulterror_Set(FAULT_GEN);
 800564e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005652:	f7fb fcd3 	bl	8000ffc <DPC_FLT_Faulterror_Set>
 8005656:	e015      	b.n	8005684 <DPC_FSM_ERROR_Func+0xfc>
      }
    }
    else if(DPC_FLT_Faulterror_Check()==ERROR_AC_UVLO)
 8005658:	f7fb fb88 	bl	8000d6c <DPC_FLT_Faulterror_Check>
 800565c:	4603      	mov	r3, r0
 800565e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005662:	d10f      	bne.n	8005684 <DPC_FSM_ERROR_Func+0xfc>
    {
      if(PC_State==FSM_Run){
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <DPC_FSM_ERROR_Func+0x10c>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b03      	cmp	r3, #3
 800566a:	d10b      	bne.n	8005684 <DPC_FSM_ERROR_Func+0xfc>
        DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 800566c:	f7fd fc22 	bl	8002eb4 <DPC_PWM_OutDisable>
//        DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
        HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 8005670:	2200      	movs	r2, #0
 8005672:	2180      	movs	r1, #128	; 0x80
 8005674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005678:	f003 fa52 	bl	8008b20 <HAL_GPIO_WritePin>
        DPC_FLT_Faulterror_Set(FAULT_GEN);
 800567c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005680:	f7fb fcbc 	bl	8000ffc <DPC_FLT_Faulterror_Set>
//        DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
//        DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
//        DPC_FLT_Faulterror_Set(FAULT_GEN);
//    }
  }
  return RetVal;
 8005684:	79fb      	ldrb	r3, [r7, #7]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	2000c268 	.word	0x2000c268
 8005694:	20000580 	.word	0x20000580

08005698 <DPC_FSM_FAULT_Func>:
  * @brief  Executes converter's state machine FAULT STate Function
  * @param  None
  * @retval true/false
  */
bool DPC_FSM_FAULT_Func(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
bool RetVal = true;
 800569e:	2301      	movs	r3, #1
 80056a0:	71fb      	strb	r3, [r7, #7]
  DPC_MISC_BLED_Set(&DPC_BLED_TIM,DPC_BLED_CH,BLED_Fault);                                ///DPC Bicolor LED SET to FSM_Fault
 80056a2:	2202      	movs	r2, #2
 80056a4:	2100      	movs	r1, #0
 80056a6:	4806      	ldr	r0, [pc, #24]	; (80056c0 <DPC_FSM_FAULT_Func+0x28>)
 80056a8:	f7fc fed4 	bl	8002454 <DPC_MISC_BLED_Set>
  DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 80056ac:	f7fd fc02 	bl	8002eb4 <DPC_PWM_OutDisable>
  HAL_GPIO_WritePin(GPIOA, Relay_Pin, GPIO_PIN_RESET);
 80056b0:	2200      	movs	r2, #0
 80056b2:	2180      	movs	r1, #128	; 0x80
 80056b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056b8:	f003 fa32 	bl	8008b20 <HAL_GPIO_WritePin>
  //  DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
  while(1)
 80056bc:	e7fe      	b.n	80056bc <DPC_FSM_FAULT_Func+0x24>
 80056be:	bf00      	nop
 80056c0:	2000c268 	.word	0x2000c268

080056c4 <DPC_MISC_Analog_Start>:

  return RetVal;
}


void  DPC_MISC_Analog_Start(void){
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  HAL_ADC_Start_DMA(&hadc1,p_ADC1_Data,ADC1_CHs);                              ///HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* p_ADC1_Data, uint32_t Length)
 80056c8:	2208      	movs	r2, #8
 80056ca:	4903      	ldr	r1, [pc, #12]	; (80056d8 <DPC_MISC_Analog_Start+0x14>)
 80056cc:	4803      	ldr	r0, [pc, #12]	; (80056dc <DPC_MISC_Analog_Start+0x18>)
 80056ce:	f001 fa77 	bl	8006bc0 <HAL_ADC_Start_DMA>
}
 80056d2:	bf00      	nop
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20001814 	.word	0x20001814
 80056dc:	200001d0 	.word	0x200001d0

080056e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af04      	add	r7, sp, #16
 80056e6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f0:	f040 811e 	bne.w	8005930 <HAL_TIM_PeriodElapsedCallback+0x250>
	{
		DATA_Acquisition_from_DMA(p_ADC1_Data,p_ADC2_Data); //Pass ADC DMA Data in DATA LAYER
 80056f4:	4992      	ldr	r1, [pc, #584]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80056f6:	4893      	ldr	r0, [pc, #588]	; (8005944 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80056f8:	f7fb fa2a 	bl	8000b50 <DATA_Acquisition_from_DMA>


		//start READ variable from DATA LAYER
		ADC_Current_AC_ProcessData((uint32_t*)Read_Curr_GRID(),&CURRENT_ADC_AC_IN_NORM);                    /// Read Current AC from DATA Layer and pass it at CURRENT_ADC_AC_IN_NORM
 80056fc:	f7fb fa74 	bl	8000be8 <Read_Curr_GRID>
 8005700:	4603      	mov	r3, r0
 8005702:	4991      	ldr	r1, [pc, #580]	; (8005948 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8005704:	4618      	mov	r0, r3
 8005706:	f7fe f931 	bl	800396c <ADC_Current_AC_ProcessData>
		ADC_Current_AC_RAW_ProcessData((uint32_t*)Read_Curr_GRID(), &CURRENT_ADC_AC_IN_BITS);
 800570a:	f7fb fa6d 	bl	8000be8 <Read_Curr_GRID>
 800570e:	4603      	mov	r3, r0
 8005710:	498e      	ldr	r1, [pc, #568]	; (800594c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe f96c 	bl	80039f0 <ADC_Current_AC_RAW_ProcessData>

		ADC2Phy_Current_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Curr_GRID(),&CURRENT_ADC_AC_IN_PHY);      /// Read Current AC from DATA Layer and pass it at CURRENT_ADC_AC_IN_PHY
 8005718:	f7fb fa66 	bl	8000be8 <Read_Curr_GRID>
 800571c:	4603      	mov	r3, r0
 800571e:	4a8c      	ldr	r2, [pc, #560]	; (8005950 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005720:	4619      	mov	r1, r3
 8005722:	488c      	ldr	r0, [pc, #560]	; (8005954 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8005724:	f7fe f98c 	bl	8003a40 <ADC2Phy_Current_ProcessData>
		ADC2Phy_RMS_Current_ProcessData(&CURRENT_ADC_AC_IN_PHY, &CURRENT_ADC_AC_IN_PHY_MIN, &CURRENT_ADC_AC_IN_PHY_MAX, &CURRENT_ADC_AC_IN_PHY_RMS, &Period_Counter);
 8005728:	4b8b      	ldr	r3, [pc, #556]	; (8005958 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	4b8b      	ldr	r3, [pc, #556]	; (800595c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800572e:	4a8c      	ldr	r2, [pc, #560]	; (8005960 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8005730:	498c      	ldr	r1, [pc, #560]	; (8005964 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005732:	4887      	ldr	r0, [pc, #540]	; (8005950 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005734:	f7fe f9ce 	bl	8003ad4 <ADC2Phy_RMS_Current_ProcessData>
		//ADC2Phy_MA_Current_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Curr_GRID(), &ADC_AC_Current_MA,&CURRENT_ADC_AC_MA_IN_PHY);

		//end READ variable from DATA LAYER

		Status_Load=DPC_MISC_Check_DCLoad(&DPC_Load,DC_Load_Limit,&CURRENT_ADC_AC_IN_PHY_RMS);
 8005738:	4b8b      	ldr	r3, [pc, #556]	; (8005968 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800573a:	4a88      	ldr	r2, [pc, #544]	; (800595c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800573c:	9202      	str	r2, [sp, #8]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	2100      	movs	r1, #0
 8005742:	4611      	mov	r1, r2
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	2500      	movs	r5, #0
 8005748:	4615      	mov	r5, r2
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	2400      	movs	r4, #0
 800574e:	4614      	mov	r4, r2
 8005750:	466a      	mov	r2, sp
 8005752:	330c      	adds	r3, #12
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	6010      	str	r0, [r2, #0]
 8005758:	889b      	ldrh	r3, [r3, #4]
 800575a:	8093      	strh	r3, [r2, #4]
 800575c:	462a      	mov	r2, r5
 800575e:	4623      	mov	r3, r4
 8005760:	4882      	ldr	r0, [pc, #520]	; (800596c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8005762:	f7fc fb91 	bl	8001e88 <DPC_MISC_Check_DCLoad>
 8005766:	4603      	mov	r3, r0
 8005768:	461a      	mov	r2, r3
 800576a:	4b81      	ldr	r3, [pc, #516]	; (8005970 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800576c:	701a      	strb	r2, [r3, #0]
		Status_Source=DPC_MISC_CHECK_AC_SOURCE(&AC_SOURCE,AC_Source_Limit,PLL_CONVERTER.pll_theta_out_2pi);  ///Check AC SOURCE state reading AC Voltage and curent
 800576e:	4b81      	ldr	r3, [pc, #516]	; (8005974 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8005770:	edd3 7a02 	vldr	s15, [r3, #8]
 8005774:	4b80      	ldr	r3, [pc, #512]	; (8005978 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	2600      	movs	r6, #0
 800577a:	4616      	mov	r6, r2
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	2500      	movs	r5, #0
 8005780:	4615      	mov	r5, r2
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	2400      	movs	r4, #0
 8005786:	4614      	mov	r4, r2
 8005788:	466a      	mov	r2, sp
 800578a:	330c      	adds	r3, #12
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	6859      	ldr	r1, [r3, #4]
 8005790:	c203      	stmia	r2!, {r0, r1}
 8005792:	eeb0 0a67 	vmov.f32	s0, s15
 8005796:	4631      	mov	r1, r6
 8005798:	462a      	mov	r2, r5
 800579a:	4623      	mov	r3, r4
 800579c:	4877      	ldr	r0, [pc, #476]	; (800597c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800579e:	f7fc fead 	bl	80024fc <DPC_MISC_CHECK_AC_SOURCE>
 80057a2:	4603      	mov	r3, r0
 80057a4:	461a      	mov	r2, r3
 80057a6:	4b76      	ldr	r3, [pc, #472]	; (8005980 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80057a8:	701a      	strb	r2, [r3, #0]

		Iabc_temp=*((TRANSFORM_ABC_t*)&CURRENT_ADC_AC_IN_NORM);                                             /// Sensing Current
 80057aa:	4a67      	ldr	r2, [pc, #412]	; (8005948 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80057ac:	4b75      	ldr	r3, [pc, #468]	; (8005984 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80057ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80057b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Iabc_Phy=*((TRANSFORM_ABC_t*)&CURRENT_ADC_AC_IN_PHY);                                               /// Sensing Current in Physical dimension
 80057b4:	4a66      	ldr	r2, [pc, #408]	; (8005950 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80057b6:	4b74      	ldr	r3, [pc, #464]	; (8005988 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80057b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80057ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		Run_ClarkePark(&Iabc_temp, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Current_qdo);
 80057be:	f7fb f979 	bl	8000ab4 <DATA_Read_Theta_PLL>
 80057c2:	eeb0 7a40 	vmov.f32	s14, s0
 80057c6:	4b6b      	ldr	r3, [pc, #428]	; (8005974 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80057c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80057cc:	496f      	ldr	r1, [pc, #444]	; (800598c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80057ce:	eef0 0a67 	vmov.f32	s1, s15
 80057d2:	eeb0 0a47 	vmov.f32	s0, s14
 80057d6:	486b      	ldr	r0, [pc, #428]	; (8005984 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80057d8:	f7fd ff32 	bl	8003640 <Run_ClarkePark>
		//Run_ClarkePark(&Iabc_Phy, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Current_qdo_Phy);

		DATA_CURR_Write_ClarkePark(Current_qdo);  // Current qdo in DATA layer
 80057dc:	4b6b      	ldr	r3, [pc, #428]	; (800598c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80057de:	edd3 6a00 	vldr	s13, [r3]
 80057e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80057e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80057ea:	eeb0 0a66 	vmov.f32	s0, s13
 80057ee:	eef0 0a47 	vmov.f32	s1, s14
 80057f2:	eeb0 1a67 	vmov.f32	s2, s15
 80057f6:	f7fb f96b 	bl	8000ad0 <DATA_CURR_Write_ClarkePark>
//			HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_RESET);
//		}
//
		//FSM_Run_State = Run_Idle;

		if (PC_State==FSM_Run)                                      ///__________FSM_Run________
 80057fa:	4b65      	ldr	r3, [pc, #404]	; (8005990 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d156      	bne.n	80058b0 <HAL_TIM_PeriodElapsedCallback+0x1d0>
		{
		  switch(FSM_Run_State){
 8005802:	4b64      	ldr	r3, [pc, #400]	; (8005994 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d03c      	beq.n	8005884 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 800580a:	2b02      	cmp	r3, #2
 800580c:	d002      	beq.n	8005814 <HAL_TIM_PeriodElapsedCallback+0x134>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d046      	beq.n	80058a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8005812:	e077      	b.n	8005904 <HAL_TIM_PeriodElapsedCallback+0x224>
		  case Run_PFC_Mode:
			DPC_LPCNTRL_PFC_Mode(&pPFC_CTRL,&pPI_VDC_CTRL,&VOLTAGECTRL,&CDC,&V_DQO_CTRL,&Current_qdo,&Voltage_qdo,&VOLTAGE_ADC_DC_IN_PHY); ///PFC CONTROL______
 8005814:	4b60      	ldr	r3, [pc, #384]	; (8005998 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8005816:	9303      	str	r3, [sp, #12]
 8005818:	4b60      	ldr	r3, [pc, #384]	; (800599c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800581a:	9302      	str	r3, [sp, #8]
 800581c:	4b5b      	ldr	r3, [pc, #364]	; (800598c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	4b5f      	ldr	r3, [pc, #380]	; (80059a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	4b5f      	ldr	r3, [pc, #380]	; (80059a4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005826:	4a60      	ldr	r2, [pc, #384]	; (80059a8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005828:	4960      	ldr	r1, [pc, #384]	; (80059ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800582a:	4861      	ldr	r0, [pc, #388]	; (80059b0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800582c:	f7fb fde5 	bl	80013fa <DPC_LPCNTRL_PFC_Mode>
			Run_Inv_ClarkePark(&V_DQO_CTRL,PLL_CONVERTER.pll_theta_out_2pi,PLL_CONVERTER.pll_phi_2pi,&V_ABC_CTRL);                                  /// DQO to ABC Voltag to provide to modulator
 8005830:	4b50      	ldr	r3, [pc, #320]	; (8005974 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8005832:	edd3 7a02 	vldr	s15, [r3, #8]
 8005836:	4b4f      	ldr	r3, [pc, #316]	; (8005974 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8005838:	ed93 7a03 	vldr	s14, [r3, #12]
 800583c:	495d      	ldr	r1, [pc, #372]	; (80059b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800583e:	eef0 0a47 	vmov.f32	s1, s14
 8005842:	eeb0 0a67 	vmov.f32	s0, s15
 8005846:	4856      	ldr	r0, [pc, #344]	; (80059a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005848:	f7fd ff6a 	bl	8003720 <Run_Inv_ClarkePark>
			DPC_PWM_OutEnable(&tDPC_PWM);                                                                                                           ///PWM output will be enabled in PFC_Mode
 800584c:	485a      	ldr	r0, [pc, #360]	; (80059b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800584e:	f7fd fb37 	bl	8002ec0 <DPC_PWM_OutEnable>
			HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 8005852:	2201      	movs	r2, #1
 8005854:	2120      	movs	r1, #32
 8005856:	4859      	ldr	r0, [pc, #356]	; (80059bc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005858:	f003 f962 	bl	8008b20 <HAL_GPIO_WritePin>
			DPC_PWM_Send_Duty_SPWM(&tDPC_PWM,V_ABC_CTRL.axA,V_ABC_CTRL.axB,V_ABC_CTRL.axC,&DMA_HRTIM_SRC);                                                         ///MODULATOR
 800585c:	4b55      	ldr	r3, [pc, #340]	; (80059b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800585e:	edd3 7a00 	vldr	s15, [r3]
 8005862:	4b54      	ldr	r3, [pc, #336]	; (80059b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005864:	ed93 7a01 	vldr	s14, [r3, #4]
 8005868:	4b52      	ldr	r3, [pc, #328]	; (80059b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800586a:	edd3 6a02 	vldr	s13, [r3, #8]
 800586e:	4954      	ldr	r1, [pc, #336]	; (80059c0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005870:	eeb0 1a66 	vmov.f32	s2, s13
 8005874:	eef0 0a47 	vmov.f32	s1, s14
 8005878:	eeb0 0a67 	vmov.f32	s0, s15
 800587c:	484e      	ldr	r0, [pc, #312]	; (80059b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800587e:	f7fd f91d 	bl	8002abc <DPC_PWM_Send_Duty_SPWM>
			  break;
 8005882:	e03f      	b.n	8005904 <HAL_TIM_PeriodElapsedCallback+0x224>
		  case Run_Burst_Mode:
			//DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&BURST_CTRL,(uint32_t*)Read_Curr_DC(),&tDPC_PWM);
			DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&BURST_CTRL,&CURRENT_ADC_AC_IN_PHY_RMS,&tDPC_PWM, &DMA_HRTIM_SRC);
 8005884:	f7fb f9ba 	bl	8000bfc <Read_Volt_DC>
 8005888:	4b4d      	ldr	r3, [pc, #308]	; (80059c0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	4b4a      	ldr	r3, [pc, #296]	; (80059b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800588e:	4a33      	ldr	r2, [pc, #204]	; (800595c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005890:	494c      	ldr	r1, [pc, #304]	; (80059c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005892:	f7fb fff0 	bl	8001876 <DPC_LPCNTRL_Burst_Mode>
			DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 8005896:	4943      	ldr	r1, [pc, #268]	; (80059a4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005898:	4844      	ldr	r0, [pc, #272]	; (80059ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800589a:	f7fb fd97 	bl	80013cc <DPC_LPCNTRL_PFC_Mode_Reset>
			break;
 800589e:	e031      	b.n	8005904 <HAL_TIM_PeriodElapsedCallback+0x224>
		  case Run_Idle:
			//Idle_Mode();
			DPC_PWM_OutDisable();
 80058a0:	f7fd fb08 	bl	8002eb4 <DPC_PWM_OutDisable>
			DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 80058a4:	493f      	ldr	r1, [pc, #252]	; (80059a4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80058a6:	4841      	ldr	r0, [pc, #260]	; (80059ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80058a8:	f7fb fd90 	bl	80013cc <DPC_LPCNTRL_PFC_Mode_Reset>
			break;
 80058ac:	bf00      	nop
 80058ae:	e029      	b.n	8005904 <HAL_TIM_PeriodElapsedCallback+0x224>
		  }
		}
		else if (PC_State==FSM_StartUp_burst)                        ///__________FSM_StartUp_burst__________
 80058b0:	4b37      	ldr	r3, [pc, #220]	; (8005990 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d110      	bne.n	80058da <HAL_TIM_PeriodElapsedCallback+0x1fa>
		{
		  //DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&STARTBURST_CTRL,(uint32_t*)Read_Curr_DC(),&tDPC_PWM);
		  DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&STARTBURST_CTRL,&CURRENT_ADC_AC_IN_PHY_RMS,&tDPC_PWM, &DMA_HRTIM_SRC);
 80058b8:	f7fb f9a0 	bl	8000bfc <Read_Volt_DC>
 80058bc:	4b40      	ldr	r3, [pc, #256]	; (80059c0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	4b3d      	ldr	r3, [pc, #244]	; (80059b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80058c2:	4a26      	ldr	r2, [pc, #152]	; (800595c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80058c4:	4940      	ldr	r1, [pc, #256]	; (80059c8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80058c6:	f7fb ffd6 	bl	8001876 <DPC_LPCNTRL_Burst_Mode>
		  DPC_PWM_OutEnable(&tDPC_PWM);
 80058ca:	483b      	ldr	r0, [pc, #236]	; (80059b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80058cc:	f7fd faf8 	bl	8002ec0 <DPC_PWM_OutEnable>
		  DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 80058d0:	4934      	ldr	r1, [pc, #208]	; (80059a4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80058d2:	4836      	ldr	r0, [pc, #216]	; (80059ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80058d4:	f7fb fd7a 	bl	80013cc <DPC_LPCNTRL_PFC_Mode_Reset>
 80058d8:	e014      	b.n	8005904 <HAL_TIM_PeriodElapsedCallback+0x224>
		}
		else if(PC_State==FSM_Fault)                                ///FSM_Fault
 80058da:	4b2d      	ldr	r3, [pc, #180]	; (8005990 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d110      	bne.n	8005904 <HAL_TIM_PeriodElapsedCallback+0x224>
		{
		  DPC_PWM_OutDisable();
 80058e2:	f7fd fae7 	bl	8002eb4 <DPC_PWM_OutDisable>
		  if(Trigger_Timestamp==SET){
 80058e6:	4b39      	ldr	r3, [pc, #228]	; (80059cc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d10a      	bne.n	8005904 <HAL_TIM_PeriodElapsedCallback+0x224>
		  Timestamp_PLL_CONVERTER=PLL_CONVERTER;
 80058ee:	4a38      	ldr	r2, [pc, #224]	; (80059d0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80058f0:	4b20      	ldr	r3, [pc, #128]	; (8005974 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80058f2:	4610      	mov	r0, r2
 80058f4:	4619      	mov	r1, r3
 80058f6:	239c      	movs	r3, #156	; 0x9c
 80058f8:	461a      	mov	r2, r3
 80058fa:	f007 fdbb 	bl	800d474 <memcpy>
		  Trigger_Timestamp=RESET;
 80058fe:	4b33      	ldr	r3, [pc, #204]	; (80059cc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]
		  }
		}
		if (Status_Source==OK_SOURCE){
 8005904:	4b1e      	ldr	r3, [pc, #120]	; (8005980 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b04      	cmp	r3, #4
 800590a:	d102      	bne.n	8005912 <HAL_TIM_PeriodElapsedCallback+0x232>
			Flag2=1;
 800590c:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800590e:	2201      	movs	r2, #1
 8005910:	601a      	str	r2, [r3, #0]
//			DMA_HRTIM_DST[2]=1;
//		}


//		Prev_Saturation = DMA_HRTIM_SRC[0];
		Flag = __HAL_HRTIM_GET_FLAG(&hhrtim1,HRTIM_FLAG_FLT1);
 8005912:	4b31      	ldr	r3, [pc, #196]	; (80059d8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b01      	cmp	r3, #1
 8005920:	bf0c      	ite	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	2300      	movne	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	4b2c      	ldr	r3, [pc, #176]	; (80059dc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800592c:	601a      	str	r2, [r3, #0]
	DATA_Write_Theta_PLL(PLL_CONVERTER.pll_theta_out_2pi);                                              ///Pass Theta to DATA LAYER

	Service_step++;
	}

}
 800592e:	e123      	b.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x498>
	else if(htim->Instance == TIM3){
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a2a      	ldr	r2, [pc, #168]	; (80059e0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d154      	bne.n	80059e4 <HAL_TIM_PeriodElapsedCallback+0x304>
		TimeoutMng();
 800593a:	f7fd fced 	bl	8003318 <TimeoutMng>
}
 800593e:	e11b      	b.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x498>
 8005940:	2000b550 	.word	0x2000b550
 8005944:	20001814 	.word	0x20001814
 8005948:	2000b52c 	.word	0x2000b52c
 800594c:	2000b5e8 	.word	0x2000b5e8
 8005950:	20000518 	.word	0x20000518
 8005954:	20001884 	.word	0x20001884
 8005958:	200006a4 	.word	0x200006a4
 800595c:	2000b590 	.word	0x2000b590
 8005960:	20000590 	.word	0x20000590
 8005964:	20001804 	.word	0x20001804
 8005968:	2000b538 	.word	0x2000b538
 800596c:	2000b64c 	.word	0x2000b64c
 8005970:	2000c144 	.word	0x2000c144
 8005974:	2000bff8 	.word	0x2000bff8
 8005978:	200006c0 	.word	0x200006c0
 800597c:	200006ac 	.word	0x200006ac
 8005980:	20000680 	.word	0x20000680
 8005984:	20000574 	.word	0x20000574
 8005988:	2000b640 	.word	0x2000b640
 800598c:	20000688 	.word	0x20000688
 8005990:	20000580 	.word	0x20000580
 8005994:	2000b610 	.word	0x2000b610
 8005998:	20000530 	.word	0x20000530
 800599c:	2000b4f8 	.word	0x2000b4f8
 80059a0:	20000524 	.word	0x20000524
 80059a4:	200005a4 	.word	0x200005a4
 80059a8:	2000bfbc 	.word	0x2000bfbc
 80059ac:	2000b5a0 	.word	0x2000b5a0
 80059b0:	2000c15c 	.word	0x2000c15c
 80059b4:	20000584 	.word	0x20000584
 80059b8:	20001834 	.word	0x20001834
 80059bc:	48000800 	.word	0x48000800
 80059c0:	2000004c 	.word	0x2000004c
 80059c4:	2000b504 	.word	0x2000b504
 80059c8:	2000054c 	.word	0x2000054c
 80059cc:	20000000 	.word	0x20000000
 80059d0:	2000c0a8 	.word	0x2000c0a8
 80059d4:	2000bff0 	.word	0x2000bff0
 80059d8:	2000035c 	.word	0x2000035c
 80059dc:	2000c158 	.word	0x2000c158
 80059e0:	40000400 	.word	0x40000400
	else if(htim->Instance == TIM6){
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a65      	ldr	r2, [pc, #404]	; (8005b80 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	f040 80c4 	bne.w	8005b78 <HAL_TIM_PeriodElapsedCallback+0x498>
	ADC_Voltage_AC_ProcessData((uint32_t*)Read_GRID(),&VOLTAGE_ADC_AC_IN_NORM);                         /// Read Voltage AC from DATA Layer and pass it at VOLTAGE_ADC_AC_IN_NORM
 80059f0:	f7fb f8f0 	bl	8000bd4 <Read_GRID>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4963      	ldr	r1, [pc, #396]	; (8005b84 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fd fec3 	bl	8003784 <ADC_Voltage_AC_ProcessData>
	ADC_Voltage_DC_ProcessData((uint32_t*)Read_Volt_DC(),&VOLTAGE_ADC_DC_IN_NORM);                      /// Read Voltage DC from DATA Layer and pass it at VOLTAGE_ADC_DC_IN_NORM
 80059fe:	f7fb f8fd 	bl	8000bfc <Read_Volt_DC>
 8005a02:	4603      	mov	r3, r0
 8005a04:	4960      	ldr	r1, [pc, #384]	; (8005b88 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fd ff48 	bl	800389c <ADC_Voltage_DC_ProcessData>
	ADC2Phy_DC_Voltage_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Volt_DC(),&VOLTAGE_ADC_DC_IN_PHY);     /// Read Voltage AC from DATA Layer and pass it at VOLTAGE_ADC_AC_IN_PHY
 8005a0c:	f7fb f8f6 	bl	8000bfc <Read_Volt_DC>
 8005a10:	4603      	mov	r3, r0
 8005a12:	4a5e      	ldr	r2, [pc, #376]	; (8005b8c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8005a14:	4619      	mov	r1, r3
 8005a16:	485e      	ldr	r0, [pc, #376]	; (8005b90 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8005a18:	f7fd ff68 	bl	80038ec <ADC2Phy_DC_Voltage_ProcessData>
	ADC2Phy_Voltage_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_GRID(),&VOLTAGE_ADC_AC_IN_PHY);           /// Read Voltage DC from DATA Layer and pass it at VOLTAGE_ADC_DC_IN_PHY
 8005a1c:	f7fb f8da 	bl	8000bd4 <Read_GRID>
 8005a20:	4603      	mov	r3, r0
 8005a22:	4a5c      	ldr	r2, [pc, #368]	; (8005b94 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8005a24:	4619      	mov	r1, r3
 8005a26:	485a      	ldr	r0, [pc, #360]	; (8005b90 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8005a28:	f7fd feee 	bl	8003808 <ADC2Phy_Voltage_ProcessData>
	if (Service_step>=500){
 8005a2c:	4b5a      	ldr	r3, [pc, #360]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a34:	d302      	bcc.n	8005a3c <HAL_TIM_PeriodElapsedCallback+0x35c>
		Service_step=0;
 8005a36:	4b58      	ldr	r3, [pc, #352]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	801a      	strh	r2, [r3, #0]
		Service_data[0][Service_step]=VOLTAGE_ADC_DC_IN_PHY.Vdc_tot;
 8005a3c:	4b56      	ldr	r3, [pc, #344]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	4b52      	ldr	r3, [pc, #328]	; (8005b8c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	4955      	ldr	r1, [pc, #340]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8005a48:	0083      	lsls	r3, r0, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	601a      	str	r2, [r3, #0]
		Service_data[1][Service_step]=CURRENT_ADC_AC_IN_PHY_RMS.phA;
 8005a4e:	4b52      	ldr	r3, [pc, #328]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	4b52      	ldr	r3, [pc, #328]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	4950      	ldr	r1, [pc, #320]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8005a5a:	f500 73fa 	add.w	r3, r0, #500	; 0x1f4
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	601a      	str	r2, [r3, #0]
		Service_data[2][Service_step]=CURRENT_ADC_AC_IN_PHY_RMS.phB;
 8005a64:	4b4c      	ldr	r3, [pc, #304]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	4b4d      	ldr	r3, [pc, #308]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	494b      	ldr	r1, [pc, #300]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8005a70:	f500 737a 	add.w	r3, r0, #1000	; 0x3e8
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	601a      	str	r2, [r3, #0]
		Service_data[3][Service_step]=CURRENT_ADC_AC_IN_PHY_RMS.phC;
 8005a7a:	4b47      	ldr	r3, [pc, #284]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	4b47      	ldr	r3, [pc, #284]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	4945      	ldr	r1, [pc, #276]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8005a86:	f200 53dc 	addw	r3, r0, #1500	; 0x5dc
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	601a      	str	r2, [r3, #0]
		Service_data[4][Service_step]=CURRENT_ADC_AC_IN_PHY.phA;
 8005a90:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	4b43      	ldr	r3, [pc, #268]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4940      	ldr	r1, [pc, #256]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8005a9c:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	440b      	add	r3, r1
 8005aa4:	601a      	str	r2, [r3, #0]
		Service_data[5][Service_step]=CURRENT_ADC_AC_IN_PHY.phB;
 8005aa6:	4b3c      	ldr	r3, [pc, #240]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	4b3d      	ldr	r3, [pc, #244]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	493a      	ldr	r1, [pc, #232]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8005ab2:	f600 13c4 	addw	r3, r0, #2500	; 0x9c4
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	601a      	str	r2, [r3, #0]
		Service_data[6][Service_step]=CURRENT_ADC_AC_IN_PHY.phC;
 8005abc:	4b36      	ldr	r3, [pc, #216]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	4b38      	ldr	r3, [pc, #224]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	4935      	ldr	r1, [pc, #212]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8005ac8:	f600 33b8 	addw	r3, r0, #3000	; 0xbb8
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	601a      	str	r2, [r3, #0]
	Vabc_temp=*((TRANSFORM_ABC_t*)&VOLTAGE_ADC_AC_IN_NORM);                                             /// Sensing Voltage
 8005ad2:	4a2c      	ldr	r2, [pc, #176]	; (8005b84 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8005ad4:	4b34      	ldr	r3, [pc, #208]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8005ad6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ad8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Vabc_Phy=*((TRANSFORM_ABC_t*)&VOLTAGE_ADC_AC_IN_PHY);                                               /// Sensing Voltage in Physical dimension
 8005adc:	4a2d      	ldr	r2, [pc, #180]	; (8005b94 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8005ade:	4b33      	ldr	r3, [pc, #204]	; (8005bac <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8005ae0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Run_ClarkePark(&Vabc_temp, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Voltage_qdo);
 8005ae6:	f7fa ffe5 	bl	8000ab4 <DATA_Read_Theta_PLL>
 8005aea:	eeb0 7a40 	vmov.f32	s14, s0
 8005aee:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8005af0:	edd3 7a03 	vldr	s15, [r3, #12]
 8005af4:	492f      	ldr	r1, [pc, #188]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8005af6:	eef0 0a67 	vmov.f32	s1, s15
 8005afa:	eeb0 0a47 	vmov.f32	s0, s14
 8005afe:	482a      	ldr	r0, [pc, #168]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8005b00:	f7fd fd9e 	bl	8003640 <Run_ClarkePark>
	Run_ClarkePark(&Vabc_Phy, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Voltage_qdo_Phy);        ///
 8005b04:	f7fa ffd6 	bl	8000ab4 <DATA_Read_Theta_PLL>
 8005b08:	eeb0 7a40 	vmov.f32	s14, s0
 8005b0c:	4b28      	ldr	r3, [pc, #160]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8005b0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b12:	4929      	ldr	r1, [pc, #164]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8005b14:	eef0 0a67 	vmov.f32	s1, s15
 8005b18:	eeb0 0a47 	vmov.f32	s0, s14
 8005b1c:	4823      	ldr	r0, [pc, #140]	; (8005bac <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8005b1e:	f7fd fd8f 	bl	8003640 <Run_ClarkePark>
	DATA_VOLT_Write_ClarkePark(Voltage_qdo);                                                            /// Voltage qdo in DATA layer
 8005b22:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8005b24:	edd3 6a00 	vldr	s13, [r3]
 8005b28:	ed93 7a01 	vldr	s14, [r3, #4]
 8005b2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b30:	eeb0 0a66 	vmov.f32	s0, s13
 8005b34:	eef0 0a47 	vmov.f32	s1, s14
 8005b38:	eeb0 1a67 	vmov.f32	s2, s15
 8005b3c:	f7fa ffe8 	bl	8000b10 <DATA_VOLT_Write_ClarkePark>
	VOLTAGE_AC_qd_IN_NORM=*((VoltageAC_qd_PLL_Struct*)&Voltage_qdo);                                    ///Auxiliary Data for PLL
 8005b40:	4a1c      	ldr	r2, [pc, #112]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8005b42:	4b1e      	ldr	r3, [pc, #120]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8005b44:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PLL_Status=DPC_PLL_pllqd_Run(&PLL_CONVERTER,&VOLTAGE_AC_qd_IN_NORM,&theta_out_pll,&omega_out_pll);  ///PLL Phase Extimation
 8005b4a:	4b1d      	ldr	r3, [pc, #116]	; (8005bc0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8005b4c:	4a1d      	ldr	r2, [pc, #116]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8005b4e:	491b      	ldr	r1, [pc, #108]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8005b50:	4817      	ldr	r0, [pc, #92]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8005b52:	f7fc fe3b 	bl	80027cc <DPC_PLL_pllqd_Run>
 8005b56:	4603      	mov	r3, r0
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4b1b      	ldr	r3, [pc, #108]	; (8005bc8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8005b5c:	701a      	strb	r2, [r3, #0]
	DATA_Write_Theta_PLL(PLL_CONVERTER.pll_theta_out_2pi);                                              ///Pass Theta to DATA LAYER
 8005b5e:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8005b60:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b64:	eeb0 0a67 	vmov.f32	s0, s15
 8005b68:	f7fa ff94 	bl	8000a94 <DATA_Write_Theta_PLL>
	Service_step++;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8005b76:	801a      	strh	r2, [r3, #0]
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b80:	40001000 	.word	0x40001000
 8005b84:	2000b55c 	.word	0x2000b55c
 8005b88:	2000c148 	.word	0x2000c148
 8005b8c:	20000530 	.word	0x20000530
 8005b90:	20001884 	.word	0x20001884
 8005b94:	2000b5f4 	.word	0x2000b5f4
 8005b98:	2000067e 	.word	0x2000067e
 8005b9c:	200018b8 	.word	0x200018b8
 8005ba0:	2000b590 	.word	0x2000b590
 8005ba4:	20000518 	.word	0x20000518
 8005ba8:	2000bfc8 	.word	0x2000bfc8
 8005bac:	2000b57c 	.word	0x2000b57c
 8005bb0:	2000bff8 	.word	0x2000bff8
 8005bb4:	2000b4f8 	.word	0x2000b4f8
 8005bb8:	20001878 	.word	0x20001878
 8005bbc:	20001864 	.word	0x20001864
 8005bc0:	2000059c 	.word	0x2000059c
 8005bc4:	2000b54c 	.word	0x2000b54c
 8005bc8:	200006bc 	.word	0x200006bc

08005bcc <HAL_HRTIM_Fault1Callback>:

void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim){
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
	DPC_FLT_Faulterror_Set(FAULT_OCS);
 8005bd4:	2008      	movs	r0, #8
 8005bd6:	f7fb fa11 	bl	8000ffc <DPC_FLT_Faulterror_Set>

}
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <HAL_HRTIM_Fault3Callback>:
void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim){
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
	DPC_FLT_Faulterror_Set(FAULT_OCS);
 8005bea:	2008      	movs	r0, #8
 8005bec:	f7fb fa06 	bl	8000ffc <DPC_FLT_Faulterror_Set>
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005bfc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005bfe:	e7fe      	b.n	8005bfe <Error_Handler+0x6>

08005c00 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8005c04:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <MX_RNG_Init+0x24>)
 8005c06:	4a08      	ldr	r2, [pc, #32]	; (8005c28 <MX_RNG_Init+0x28>)
 8005c08:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8005c0a:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <MX_RNG_Init+0x24>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8005c10:	4804      	ldr	r0, [pc, #16]	; (8005c24 <MX_RNG_Init+0x24>)
 8005c12:	f006 fd17 	bl	800c644 <HAL_RNG_Init>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8005c1c:	f7ff ffec 	bl	8005bf8 <Error_Handler>
  }

}
 8005c20:	bf00      	nop
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	2000c254 	.word	0x2000c254
 8005c28:	50060800 	.word	0x50060800

08005c2c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a0a      	ldr	r2, [pc, #40]	; (8005c64 <HAL_RNG_MspInit+0x38>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d10b      	bne.n	8005c56 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <HAL_RNG_MspInit+0x3c>)
 8005c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c42:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <HAL_RNG_MspInit+0x3c>)
 8005c44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c4a:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <HAL_RNG_MspInit+0x3c>)
 8005c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8005c56:	bf00      	nop
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	50060800 	.word	0x50060800
 8005c68:	40021000 	.word	0x40021000

08005c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c72:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <HAL_MspInit+0x44>)
 8005c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c76:	4a0e      	ldr	r2, [pc, #56]	; (8005cb0 <HAL_MspInit+0x44>)
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <HAL_MspInit+0x44>)
 8005c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_MspInit+0x44>)
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8e:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <HAL_MspInit+0x44>)
 8005c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c94:	6593      	str	r3, [r2, #88]	; 0x58
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <HAL_MspInit+0x44>)
 8005c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005ca2:	f005 fd55 	bl	800b750 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ca6:	bf00      	nop
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40021000 	.word	0x40021000

08005cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005cb8:	e7fe      	b.n	8005cb8 <NMI_Handler+0x4>

08005cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cbe:	e7fe      	b.n	8005cbe <HardFault_Handler+0x4>

08005cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005cc4:	e7fe      	b.n	8005cc4 <MemManage_Handler+0x4>

08005cc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cca:	e7fe      	b.n	8005cca <BusFault_Handler+0x4>

08005ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cd0:	e7fe      	b.n	8005cd0 <UsageFault_Handler+0x4>

08005cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cd6:	bf00      	nop
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cf2:	bf00      	nop
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d00:	f000 fa8a 	bl	8006218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d04:	bf00      	nop
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_a);
 8005d0c:	4802      	ldr	r0, [pc, #8]	; (8005d18 <DMA1_Channel1_IRQHandler+0x10>)
 8005d0e:	f002 fafa 	bl	8008306 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005d12:	bf00      	nop
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200002fc 	.word	0x200002fc

08005d1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_b);
 8005d20:	4802      	ldr	r0, [pc, #8]	; (8005d2c <DMA1_Channel2_IRQHandler+0x10>)
 8005d22:	f002 faf0 	bl	8008306 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005d26:	bf00      	nop
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000458 	.word	0x20000458

08005d30 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_c);
 8005d34:	4802      	ldr	r0, [pc, #8]	; (8005d40 <DMA1_Channel3_IRQHandler+0x10>)
 8005d36:	f002 fae6 	bl	8008306 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005d3a:	bf00      	nop
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	200004b8 	.word	0x200004b8

08005d44 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005d48:	4802      	ldr	r0, [pc, #8]	; (8005d54 <DMA1_Channel4_IRQHandler+0x10>)
 8005d4a:	f002 fadc 	bl	8008306 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005d4e:	bf00      	nop
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	2000023c 	.word	0x2000023c

08005d58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005d5c:	4802      	ldr	r0, [pc, #8]	; (8005d68 <TIM2_IRQHandler+0x10>)
 8005d5e:	f006 fe87 	bl	800ca70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005d62:	bf00      	nop
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	2000c34c 	.word	0x2000c34c

08005d6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005d70:	4802      	ldr	r0, [pc, #8]	; (8005d7c <TIM3_IRQHandler+0x10>)
 8005d72:	f006 fe7d 	bl	800ca70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005d76:	bf00      	nop
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	2000c2b4 	.word	0x2000c2b4

08005d80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005d84:	4802      	ldr	r0, [pc, #8]	; (8005d90 <TIM6_DAC_IRQHandler+0x10>)
 8005d86:	f006 fe73 	bl	800ca70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005d8a:	bf00      	nop
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	2000c300 	.word	0x2000c300

08005d94 <HRTIM1_FLT_IRQHandler>:

/**
  * @brief This function handles HRTIM fault global interrupt.
  */
void HRTIM1_FLT_IRQHandler(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_FLT_IRQn 0 */

  /* USER CODE END HRTIM1_FLT_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_COMMON);
 8005d98:	21ff      	movs	r1, #255	; 0xff
 8005d9a:	4802      	ldr	r0, [pc, #8]	; (8005da4 <HRTIM1_FLT_IRQHandler+0x10>)
 8005d9c:	f004 f8b8 	bl	8009f10 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_FLT_IRQn 1 */

  /* USER CODE END HRTIM1_FLT_IRQn 1 */
}
 8005da0:	bf00      	nop
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	2000035c 	.word	0x2000035c

08005da8 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_hrtim1_a);
 8005dac:	4805      	ldr	r0, [pc, #20]	; (8005dc4 <DMAMUX_OVR_IRQHandler+0x1c>)
 8005dae:	f002 fc37 	bl	8008620 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_hrtim1_b);
 8005db2:	4805      	ldr	r0, [pc, #20]	; (8005dc8 <DMAMUX_OVR_IRQHandler+0x20>)
 8005db4:	f002 fc34 	bl	8008620 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel3
  HAL_DMAEx_MUX_IRQHandler(&hdma_hrtim1_c);
 8005db8:	4804      	ldr	r0, [pc, #16]	; (8005dcc <DMAMUX_OVR_IRQHandler+0x24>)
 8005dba:	f002 fc31 	bl	8008620 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8005dbe:	bf00      	nop
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	200002fc 	.word	0x200002fc
 8005dc8:	20000458 	.word	0x20000458
 8005dcc:	200004b8 	.word	0x200004b8

08005dd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005dd4:	4b08      	ldr	r3, [pc, #32]	; (8005df8 <SystemInit+0x28>)
 8005dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dda:	4a07      	ldr	r2, [pc, #28]	; (8005df8 <SystemInit+0x28>)
 8005ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005de4:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <SystemInit+0x28>)
 8005de6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005dea:	609a      	str	r2, [r3, #8]
#endif
}
 8005dec:	bf00      	nop
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	e000ed00 	.word	0xe000ed00

08005dfc <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e02:	f107 0310 	add.w	r3, r7, #16
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	605a      	str	r2, [r3, #4]
 8005e0c:	609a      	str	r2, [r3, #8]
 8005e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e10:	1d3b      	adds	r3, r7, #4
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	605a      	str	r2, [r3, #4]
 8005e18:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8005e1a:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <MX_TIM2_Init+0x94>)
 8005e1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005e22:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <MX_TIM2_Init+0x94>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e28:	4b19      	ldr	r3, [pc, #100]	; (8005e90 <MX_TIM2_Init+0x94>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8005e2e:	4b18      	ldr	r3, [pc, #96]	; (8005e90 <MX_TIM2_Init+0x94>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e34:	4b16      	ldr	r3, [pc, #88]	; (8005e90 <MX_TIM2_Init+0x94>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e3a:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <MX_TIM2_Init+0x94>)
 8005e3c:	2280      	movs	r2, #128	; 0x80
 8005e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e40:	4813      	ldr	r0, [pc, #76]	; (8005e90 <MX_TIM2_Init+0x94>)
 8005e42:	f006 fc34 	bl	800c6ae <HAL_TIM_Base_Init>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005e4c:	f7ff fed4 	bl	8005bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e56:	f107 0310 	add.w	r3, r7, #16
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	480c      	ldr	r0, [pc, #48]	; (8005e90 <MX_TIM2_Init+0x94>)
 8005e5e:	f006 ff87 	bl	800cd70 <HAL_TIM_ConfigClockSource>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005e68:	f7ff fec6 	bl	8005bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8005e6c:	2330      	movs	r3, #48	; 0x30
 8005e6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	4619      	mov	r1, r3
 8005e78:	4805      	ldr	r0, [pc, #20]	; (8005e90 <MX_TIM2_Init+0x94>)
 8005e7a:	f007 f9fb 	bl	800d274 <HAL_TIMEx_MasterConfigSynchronization>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005e84:	f7ff feb8 	bl	8005bf8 <Error_Handler>
  }

}
 8005e88:	bf00      	nop
 8005e8a:	3720      	adds	r7, #32
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	2000c34c 	.word	0x2000c34c

08005e94 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e9a:	f107 0310 	add.w	r3, r7, #16
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	605a      	str	r2, [r3, #4]
 8005ea4:	609a      	str	r2, [r3, #8]
 8005ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ea8:	1d3b      	adds	r3, r7, #4
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	605a      	str	r2, [r3, #4]
 8005eb0:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8005eb2:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <MX_TIM3_Init+0x94>)
 8005eb4:	4a1d      	ldr	r2, [pc, #116]	; (8005f2c <MX_TIM3_Init+0x98>)
 8005eb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <MX_TIM3_Init+0x94>)
 8005eba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ebe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ec0:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <MX_TIM3_Init+0x94>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8005ec6:	4b18      	ldr	r3, [pc, #96]	; (8005f28 <MX_TIM3_Init+0x94>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ecc:	4b16      	ldr	r3, [pc, #88]	; (8005f28 <MX_TIM3_Init+0x94>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ed2:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <MX_TIM3_Init+0x94>)
 8005ed4:	2280      	movs	r2, #128	; 0x80
 8005ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005ed8:	4813      	ldr	r0, [pc, #76]	; (8005f28 <MX_TIM3_Init+0x94>)
 8005eda:	f006 fbe8 	bl	800c6ae <HAL_TIM_Base_Init>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005ee4:	f7ff fe88 	bl	8005bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005eee:	f107 0310 	add.w	r3, r7, #16
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	480c      	ldr	r0, [pc, #48]	; (8005f28 <MX_TIM3_Init+0x94>)
 8005ef6:	f006 ff3b 	bl	800cd70 <HAL_TIM_ConfigClockSource>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005f00:	f7ff fe7a 	bl	8005bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f04:	2300      	movs	r3, #0
 8005f06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005f0c:	1d3b      	adds	r3, r7, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4805      	ldr	r0, [pc, #20]	; (8005f28 <MX_TIM3_Init+0x94>)
 8005f12:	f007 f9af 	bl	800d274 <HAL_TIMEx_MasterConfigSynchronization>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005f1c:	f7ff fe6c 	bl	8005bf8 <Error_Handler>
  }

}
 8005f20:	bf00      	nop
 8005f22:	3720      	adds	r7, #32
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	2000c2b4 	.word	0x2000c2b4
 8005f2c:	40000400 	.word	0x40000400

08005f30 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f36:	1d3b      	adds	r3, r7, #4
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	605a      	str	r2, [r3, #4]
 8005f3e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8005f40:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <MX_TIM6_Init+0x64>)
 8005f42:	4a15      	ldr	r2, [pc, #84]	; (8005f98 <MX_TIM6_Init+0x68>)
 8005f44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <MX_TIM6_Init+0x64>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f4c:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <MX_TIM6_Init+0x64>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 32000;
 8005f52:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <MX_TIM6_Init+0x64>)
 8005f54:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8005f58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f5a:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <MX_TIM6_Init+0x64>)
 8005f5c:	2280      	movs	r2, #128	; 0x80
 8005f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005f60:	480c      	ldr	r0, [pc, #48]	; (8005f94 <MX_TIM6_Init+0x64>)
 8005f62:	f006 fba4 	bl	800c6ae <HAL_TIM_Base_Init>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005f6c:	f7ff fe44 	bl	8005bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005f70:	2320      	movs	r3, #32
 8005f72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005f78:	1d3b      	adds	r3, r7, #4
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4805      	ldr	r0, [pc, #20]	; (8005f94 <MX_TIM6_Init+0x64>)
 8005f7e:	f007 f979 	bl	800d274 <HAL_TIMEx_MasterConfigSynchronization>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005f88:	f7ff fe36 	bl	8005bf8 <Error_Handler>
  }

}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	2000c300 	.word	0x2000c300
 8005f98:	40001000 	.word	0x40001000

08005f9c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005fa2:	f107 0310 	add.w	r3, r7, #16
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	605a      	str	r2, [r3, #4]
 8005fac:	609a      	str	r2, [r3, #8]
 8005fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fb0:	1d3b      	adds	r3, r7, #4
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	605a      	str	r2, [r3, #4]
 8005fb8:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8005fba:	4b1f      	ldr	r3, [pc, #124]	; (8006038 <MX_TIM15_Init+0x9c>)
 8005fbc:	4a1f      	ldr	r2, [pc, #124]	; (800603c <MX_TIM15_Init+0xa0>)
 8005fbe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8005fc0:	4b1d      	ldr	r3, [pc, #116]	; (8006038 <MX_TIM15_Init+0x9c>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fc6:	4b1c      	ldr	r3, [pc, #112]	; (8006038 <MX_TIM15_Init+0x9c>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8005fcc:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <MX_TIM15_Init+0x9c>)
 8005fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fd2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fd4:	4b18      	ldr	r3, [pc, #96]	; (8006038 <MX_TIM15_Init+0x9c>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005fda:	4b17      	ldr	r3, [pc, #92]	; (8006038 <MX_TIM15_Init+0x9c>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fe0:	4b15      	ldr	r3, [pc, #84]	; (8006038 <MX_TIM15_Init+0x9c>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005fe6:	4814      	ldr	r0, [pc, #80]	; (8006038 <MX_TIM15_Init+0x9c>)
 8005fe8:	f006 fb61 	bl	800c6ae <HAL_TIM_Base_Init>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8005ff2:	f7ff fe01 	bl	8005bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ffa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005ffc:	f107 0310 	add.w	r3, r7, #16
 8006000:	4619      	mov	r1, r3
 8006002:	480d      	ldr	r0, [pc, #52]	; (8006038 <MX_TIM15_Init+0x9c>)
 8006004:	f006 feb4 	bl	800cd70 <HAL_TIM_ConfigClockSource>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800600e:	f7ff fdf3 	bl	8005bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006012:	2300      	movs	r3, #0
 8006014:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800601a:	1d3b      	adds	r3, r7, #4
 800601c:	4619      	mov	r1, r3
 800601e:	4806      	ldr	r0, [pc, #24]	; (8006038 <MX_TIM15_Init+0x9c>)
 8006020:	f007 f928 	bl	800d274 <HAL_TIMEx_MasterConfigSynchronization>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800602a:	f7ff fde5 	bl	8005bf8 <Error_Handler>
  }

}
 800602e:	bf00      	nop
 8006030:	3720      	adds	r7, #32
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	2000c268 	.word	0x2000c268
 800603c:	40014000 	.word	0x40014000

08006040 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006050:	d114      	bne.n	800607c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006052:	4b2f      	ldr	r3, [pc, #188]	; (8006110 <HAL_TIM_Base_MspInit+0xd0>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006056:	4a2e      	ldr	r2, [pc, #184]	; (8006110 <HAL_TIM_Base_MspInit+0xd0>)
 8006058:	f043 0301 	orr.w	r3, r3, #1
 800605c:	6593      	str	r3, [r2, #88]	; 0x58
 800605e:	4b2c      	ldr	r3, [pc, #176]	; (8006110 <HAL_TIM_Base_MspInit+0xd0>)
 8006060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800606a:	2202      	movs	r2, #2
 800606c:	2100      	movs	r1, #0
 800606e:	201c      	movs	r0, #28
 8006070:	f001 fff1 	bl	8008056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006074:	201c      	movs	r0, #28
 8006076:	f002 f808 	bl	800808a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800607a:	e044      	b.n	8006106 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a24      	ldr	r2, [pc, #144]	; (8006114 <HAL_TIM_Base_MspInit+0xd4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d114      	bne.n	80060b0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006086:	4b22      	ldr	r3, [pc, #136]	; (8006110 <HAL_TIM_Base_MspInit+0xd0>)
 8006088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608a:	4a21      	ldr	r2, [pc, #132]	; (8006110 <HAL_TIM_Base_MspInit+0xd0>)
 800608c:	f043 0302 	orr.w	r3, r3, #2
 8006090:	6593      	str	r3, [r2, #88]	; 0x58
 8006092:	4b1f      	ldr	r3, [pc, #124]	; (8006110 <HAL_TIM_Base_MspInit+0xd0>)
 8006094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 4);
 800609e:	2204      	movs	r2, #4
 80060a0:	2100      	movs	r1, #0
 80060a2:	201d      	movs	r0, #29
 80060a4:	f001 ffd7 	bl	8008056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80060a8:	201d      	movs	r0, #29
 80060aa:	f001 ffee 	bl	800808a <HAL_NVIC_EnableIRQ>
}
 80060ae:	e02a      	b.n	8006106 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a18      	ldr	r2, [pc, #96]	; (8006118 <HAL_TIM_Base_MspInit+0xd8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d114      	bne.n	80060e4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80060ba:	4b15      	ldr	r3, [pc, #84]	; (8006110 <HAL_TIM_Base_MspInit+0xd0>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	4a14      	ldr	r2, [pc, #80]	; (8006110 <HAL_TIM_Base_MspInit+0xd0>)
 80060c0:	f043 0310 	orr.w	r3, r3, #16
 80060c4:	6593      	str	r3, [r2, #88]	; 0x58
 80060c6:	4b12      	ldr	r3, [pc, #72]	; (8006110 <HAL_TIM_Base_MspInit+0xd0>)
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 3);
 80060d2:	2203      	movs	r2, #3
 80060d4:	2100      	movs	r1, #0
 80060d6:	2036      	movs	r0, #54	; 0x36
 80060d8:	f001 ffbd 	bl	8008056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80060dc:	2036      	movs	r0, #54	; 0x36
 80060de:	f001 ffd4 	bl	800808a <HAL_NVIC_EnableIRQ>
}
 80060e2:	e010      	b.n	8006106 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM15)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a0c      	ldr	r2, [pc, #48]	; (800611c <HAL_TIM_Base_MspInit+0xdc>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d10b      	bne.n	8006106 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80060ee:	4b08      	ldr	r3, [pc, #32]	; (8006110 <HAL_TIM_Base_MspInit+0xd0>)
 80060f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f2:	4a07      	ldr	r2, [pc, #28]	; (8006110 <HAL_TIM_Base_MspInit+0xd0>)
 80060f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f8:	6613      	str	r3, [r2, #96]	; 0x60
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <HAL_TIM_Base_MspInit+0xd0>)
 80060fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006102:	60bb      	str	r3, [r7, #8]
 8006104:	68bb      	ldr	r3, [r7, #8]
}
 8006106:	bf00      	nop
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40021000 	.word	0x40021000
 8006114:	40000400 	.word	0x40000400
 8006118:	40001000 	.word	0x40001000
 800611c:	40014000 	.word	0x40014000

08006120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006120:	480d      	ldr	r0, [pc, #52]	; (8006158 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006122:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006124:	480d      	ldr	r0, [pc, #52]	; (800615c <LoopForever+0x6>)
  ldr r1, =_edata
 8006126:	490e      	ldr	r1, [pc, #56]	; (8006160 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006128:	4a0e      	ldr	r2, [pc, #56]	; (8006164 <LoopForever+0xe>)
  movs r3, #0
 800612a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800612c:	e002      	b.n	8006134 <LoopCopyDataInit>

0800612e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800612e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006132:	3304      	adds	r3, #4

08006134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006138:	d3f9      	bcc.n	800612e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800613a:	4a0b      	ldr	r2, [pc, #44]	; (8006168 <LoopForever+0x12>)
  ldr r4, =_ebss
 800613c:	4c0b      	ldr	r4, [pc, #44]	; (800616c <LoopForever+0x16>)
  movs r3, #0
 800613e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006140:	e001      	b.n	8006146 <LoopFillZerobss>

08006142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006144:	3204      	adds	r2, #4

08006146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006148:	d3fb      	bcc.n	8006142 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800614a:	f7ff fe41 	bl	8005dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800614e:	f007 f96d 	bl	800d42c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006152:	f7fe fe23 	bl	8004d9c <main>

08006156 <LoopForever>:

LoopForever:
    b LoopForever
 8006156:	e7fe      	b.n	8006156 <LoopForever>
  ldr   r0, =_estack
 8006158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800615c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006160:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8006164:	0800dcd4 	.word	0x0800dcd4
  ldr r2, =_sbss
 8006168:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800616c:	2000c39c 	.word	0x2000c39c

08006170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006170:	e7fe      	b.n	8006170 <ADC1_2_IRQHandler>

08006172 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800617c:	2003      	movs	r0, #3
 800617e:	f001 ff5f 	bl	8008040 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006182:	2000      	movs	r0, #0
 8006184:	f000 f80e 	bl	80061a4 <HAL_InitTick>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	71fb      	strb	r3, [r7, #7]
 8006192:	e001      	b.n	8006198 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006194:	f7ff fd6a 	bl	8005c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006198:	79fb      	ldrb	r3, [r7, #7]

}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80061b0:	4b16      	ldr	r3, [pc, #88]	; (800620c <HAL_InitTick+0x68>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d022      	beq.n	80061fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80061b8:	4b15      	ldr	r3, [pc, #84]	; (8006210 <HAL_InitTick+0x6c>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4b13      	ldr	r3, [pc, #76]	; (800620c <HAL_InitTick+0x68>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80061c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 ff6a 	bl	80080a6 <HAL_SYSTICK_Config>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10f      	bne.n	80061f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b0f      	cmp	r3, #15
 80061dc:	d809      	bhi.n	80061f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061de:	2200      	movs	r2, #0
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	f04f 30ff 	mov.w	r0, #4294967295
 80061e6:	f001 ff36 	bl	8008056 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80061ea:	4a0a      	ldr	r2, [pc, #40]	; (8006214 <HAL_InitTick+0x70>)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	e007      	b.n	8006202 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	73fb      	strb	r3, [r7, #15]
 80061f6:	e004      	b.n	8006202 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
 80061fc:	e001      	b.n	8006202 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006202:	7bfb      	ldrb	r3, [r7, #15]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	2000000c 	.word	0x2000000c
 8006210:	20000004 	.word	0x20000004
 8006214:	20000008 	.word	0x20000008

08006218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800621c:	4b05      	ldr	r3, [pc, #20]	; (8006234 <HAL_IncTick+0x1c>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	4b05      	ldr	r3, [pc, #20]	; (8006238 <HAL_IncTick+0x20>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4413      	add	r3, r2
 8006226:	4a03      	ldr	r2, [pc, #12]	; (8006234 <HAL_IncTick+0x1c>)
 8006228:	6013      	str	r3, [r2, #0]
}
 800622a:	bf00      	nop
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	2000c398 	.word	0x2000c398
 8006238:	2000000c 	.word	0x2000000c

0800623c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  return uwTick;
 8006240:	4b03      	ldr	r3, [pc, #12]	; (8006250 <HAL_GetTick+0x14>)
 8006242:	681b      	ldr	r3, [r3, #0]
}
 8006244:	4618      	mov	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	2000c398 	.word	0x2000c398

08006254 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	609a      	str	r2, [r3, #8]
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800627a:	b480      	push	{r7}
 800627c:	b083      	sub	sp, #12
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	609a      	str	r2, [r3, #8]
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3360      	adds	r3, #96	; 0x60
 80062ce:	461a      	mov	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4b08      	ldr	r3, [pc, #32]	; (8006300 <LL_ADC_SetOffset+0x44>)
 80062de:	4013      	ands	r3, r2
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80062f4:	bf00      	nop
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	03fff000 	.word	0x03fff000

08006304 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3360      	adds	r3, #96	; 0x60
 8006312:	461a      	mov	r2, r3
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3360      	adds	r3, #96	; 0x60
 8006340:	461a      	mov	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	431a      	orrs	r2, r3
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006366:	b480      	push	{r7}
 8006368:	b087      	sub	sp, #28
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3360      	adds	r3, #96	; 0x60
 8006376:	461a      	mov	r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	431a      	orrs	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006390:	bf00      	nop
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3360      	adds	r3, #96	; 0x60
 80063ac:	461a      	mov	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	431a      	orrs	r2, r3
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	615a      	str	r2, [r3, #20]
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800640c:	2301      	movs	r3, #1
 800640e:	e000      	b.n	8006412 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800641e:	b480      	push	{r7}
 8006420:	b087      	sub	sp, #28
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3330      	adds	r3, #48	; 0x30
 800642e:	461a      	mov	r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	0a1b      	lsrs	r3, r3, #8
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	f003 030c 	and.w	r3, r3, #12
 800643a:	4413      	add	r3, r2
 800643c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	211f      	movs	r1, #31
 800644a:	fa01 f303 	lsl.w	r3, r1, r3
 800644e:	43db      	mvns	r3, r3
 8006450:	401a      	ands	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	0e9b      	lsrs	r3, r3, #26
 8006456:	f003 011f 	and.w	r1, r3, #31
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	fa01 f303 	lsl.w	r3, r1, r3
 8006464:	431a      	orrs	r2, r3
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800646a:	bf00      	nop
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006476:	b480      	push	{r7}
 8006478:	b087      	sub	sp, #28
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3314      	adds	r3, #20
 8006486:	461a      	mov	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	0e5b      	lsrs	r3, r3, #25
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	4413      	add	r3, r2
 8006494:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	0d1b      	lsrs	r3, r3, #20
 800649e:	f003 031f 	and.w	r3, r3, #31
 80064a2:	2107      	movs	r1, #7
 80064a4:	fa01 f303 	lsl.w	r3, r1, r3
 80064a8:	43db      	mvns	r3, r3
 80064aa:	401a      	ands	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	0d1b      	lsrs	r3, r3, #20
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ba:	431a      	orrs	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e4:	43db      	mvns	r3, r3
 80064e6:	401a      	ands	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f003 0318 	and.w	r3, r3, #24
 80064ee:	4908      	ldr	r1, [pc, #32]	; (8006510 <LL_ADC_SetChannelSingleDiff+0x44>)
 80064f0:	40d9      	lsrs	r1, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	400b      	ands	r3, r1
 80064f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064fa:	431a      	orrs	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006502:	bf00      	nop
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	0007ffff 	.word	0x0007ffff

08006514 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
  *          -  On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	330c      	adds	r3, #12
 8006524:	4618      	mov	r0, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	0d1b      	lsrs	r3, r3, #20
 800652a:	f003 0103 	and.w	r1, r3, #3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f003 0201 	and.w	r2, r3, #1
 8006534:	4613      	mov	r3, r2
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4403      	add	r3, r0
 8006542:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 800654e:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8006552:	43db      	mvns	r3, r3
 8006554:	401a      	ands	r2, r3
 8006556:	6879      	ldr	r1, [r7, #4]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	400b      	ands	r3, r1
 800655c:	431a      	orrs	r2, r3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8006562:	bf00      	nop
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 800656e:	b480      	push	{r7}
 8006570:	b087      	sub	sp, #28
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
 800657a:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3320      	adds	r3, #32
 8006580:	461a      	mov	r2, r3
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	0d1b      	lsrs	r3, r3, #20
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	f003 030c 	and.w	r3, r3, #12
 800658c:	4413      	add	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	0419      	lsls	r1, r3, #16
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	430b      	orrs	r3, r1
 80065a0:	431a      	orrs	r2, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 031f 	and.w	r3, r3, #31
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80065de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6093      	str	r3, [r2, #8]
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006606:	d101      	bne.n	800660c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800662a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800662e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006656:	d101      	bne.n	800665c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800667a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800667e:	f043 0201 	orr.w	r2, r3, #1
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d101      	bne.n	80066aa <LL_ADC_IsEnabled+0x18>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <LL_ADC_IsEnabled+0x1a>
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066cc:	f043 0204 	orr.w	r2, r3, #4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d101      	bne.n	80066f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 0308 	and.w	r3, r3, #8
 8006716:	2b08      	cmp	r3, #8
 8006718:	d101      	bne.n	800671e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2280      	movs	r2, #128	; 0x80
 8006738:	601a      	str	r2, [r3, #0]
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006754:	601a      	str	r2, [r3, #0]
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006770:	601a      	str	r2, [r3, #0]
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	605a      	str	r2, [r3, #4]
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	605a      	str	r2, [r3, #4]
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	605a      	str	r2, [r3, #4]
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	605a      	str	r2, [r3, #4]
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	605a      	str	r2, [r3, #4]
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	605a      	str	r2, [r3, #4]
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
	...

08006840 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006840:	b590      	push	{r4, r7, lr}
 8006842:	b089      	sub	sp, #36	; 0x24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800684c:	2300      	movs	r3, #0
 800684e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e1ad      	b.n	8006bb6 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fd fd33 	bl	80042d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff feb6 	bl	80065f2 <LL_ADC_IsDeepPowerDownEnabled>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d004      	beq.n	8006896 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fe9c 	bl	80065ce <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff fed1 	bl	8006642 <LL_ADC_IsInternalRegulatorEnabled>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d113      	bne.n	80068ce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff feb5 	bl	800661a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80068b0:	4b9e      	ldr	r3, [pc, #632]	; (8006b2c <HAL_ADC_Init+0x2ec>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	099b      	lsrs	r3, r3, #6
 80068b6:	4a9e      	ldr	r2, [pc, #632]	; (8006b30 <HAL_ADC_Init+0x2f0>)
 80068b8:	fba2 2303 	umull	r2, r3, r2, r3
 80068bc:	099b      	lsrs	r3, r3, #6
 80068be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80068c0:	e002      	b.n	80068c8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f9      	bne.n	80068c2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff feb5 	bl	8006642 <LL_ADC_IsInternalRegulatorEnabled>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10d      	bne.n	80068fa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e2:	f043 0210 	orr.w	r2, r3, #16
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ee:	f043 0201 	orr.w	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff feee 	bl	80066e0 <LL_ADC_REG_IsConversionOngoing>
 8006904:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690a:	f003 0310 	and.w	r3, r3, #16
 800690e:	2b00      	cmp	r3, #0
 8006910:	f040 8148 	bne.w	8006ba4 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f040 8144 	bne.w	8006ba4 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006920:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006924:	f043 0202 	orr.w	r2, r3, #2
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff feae 	bl	8006692 <LL_ADC_IsEnabled>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d141      	bne.n	80069c0 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006944:	d004      	beq.n	8006950 <HAL_ADC_Init+0x110>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a7a      	ldr	r2, [pc, #488]	; (8006b34 <HAL_ADC_Init+0x2f4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d10f      	bne.n	8006970 <HAL_ADC_Init+0x130>
 8006950:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006954:	f7ff fe9d 	bl	8006692 <LL_ADC_IsEnabled>
 8006958:	4604      	mov	r4, r0
 800695a:	4876      	ldr	r0, [pc, #472]	; (8006b34 <HAL_ADC_Init+0x2f4>)
 800695c:	f7ff fe99 	bl	8006692 <LL_ADC_IsEnabled>
 8006960:	4603      	mov	r3, r0
 8006962:	4323      	orrs	r3, r4
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf0c      	ite	eq
 8006968:	2301      	moveq	r3, #1
 800696a:	2300      	movne	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	e012      	b.n	8006996 <HAL_ADC_Init+0x156>
 8006970:	4871      	ldr	r0, [pc, #452]	; (8006b38 <HAL_ADC_Init+0x2f8>)
 8006972:	f7ff fe8e 	bl	8006692 <LL_ADC_IsEnabled>
 8006976:	4604      	mov	r4, r0
 8006978:	4870      	ldr	r0, [pc, #448]	; (8006b3c <HAL_ADC_Init+0x2fc>)
 800697a:	f7ff fe8a 	bl	8006692 <LL_ADC_IsEnabled>
 800697e:	4603      	mov	r3, r0
 8006980:	431c      	orrs	r4, r3
 8006982:	486f      	ldr	r0, [pc, #444]	; (8006b40 <HAL_ADC_Init+0x300>)
 8006984:	f7ff fe85 	bl	8006692 <LL_ADC_IsEnabled>
 8006988:	4603      	mov	r3, r0
 800698a:	4323      	orrs	r3, r4
 800698c:	2b00      	cmp	r3, #0
 800698e:	bf0c      	ite	eq
 8006990:	2301      	moveq	r3, #1
 8006992:	2300      	movne	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d012      	beq.n	80069c0 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069a2:	d004      	beq.n	80069ae <HAL_ADC_Init+0x16e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a62      	ldr	r2, [pc, #392]	; (8006b34 <HAL_ADC_Init+0x2f4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d101      	bne.n	80069b2 <HAL_ADC_Init+0x172>
 80069ae:	4a65      	ldr	r2, [pc, #404]	; (8006b44 <HAL_ADC_Init+0x304>)
 80069b0:	e000      	b.n	80069b4 <HAL_ADC_Init+0x174>
 80069b2:	4a65      	ldr	r2, [pc, #404]	; (8006b48 <HAL_ADC_Init+0x308>)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f7ff fc4a 	bl	8006254 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	7f5b      	ldrb	r3, [r3, #29]
 80069c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80069d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80069d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069e0:	4313      	orrs	r3, r2
 80069e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d106      	bne.n	80069fc <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f2:	3b01      	subs	r3, #1
 80069f4:	045b      	lsls	r3, r3, #17
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d009      	beq.n	8006a18 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	4b4b      	ldr	r3, [pc, #300]	; (8006b4c <HAL_ADC_Init+0x30c>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	69b9      	ldr	r1, [r7, #24]
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fe4a 	bl	80066e0 <LL_ADC_REG_IsConversionOngoing>
 8006a4c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff fe57 	bl	8006706 <LL_ADC_INJ_IsConversionOngoing>
 8006a58:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d17f      	bne.n	8006b60 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d17c      	bne.n	8006b60 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a6a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a72:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a74:	4313      	orrs	r3, r2
 8006a76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a82:	f023 0302 	bic.w	r3, r3, #2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	69b9      	ldr	r1, [r7, #24]
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d017      	beq.n	8006ac8 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006aa6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ab0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6911      	ldr	r1, [r2, #16]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6812      	ldr	r2, [r2, #0]
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006ac6:	e013      	b.n	8006af0 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ad6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006ae8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006aec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d12a      	bne.n	8006b50 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006b04:	f023 0304 	bic.w	r3, r3, #4
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b10:	4311      	orrs	r1, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006b16:	4311      	orrs	r1, r2
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0201 	orr.w	r2, r2, #1
 8006b28:	611a      	str	r2, [r3, #16]
 8006b2a:	e019      	b.n	8006b60 <HAL_ADC_Init+0x320>
 8006b2c:	20000004 	.word	0x20000004
 8006b30:	053e2d63 	.word	0x053e2d63
 8006b34:	50000100 	.word	0x50000100
 8006b38:	50000400 	.word	0x50000400
 8006b3c:	50000500 	.word	0x50000500
 8006b40:	50000600 	.word	0x50000600
 8006b44:	50000300 	.word	0x50000300
 8006b48:	50000700 	.word	0x50000700
 8006b4c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691a      	ldr	r2, [r3, #16]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0201 	bic.w	r2, r2, #1
 8006b5e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d10c      	bne.n	8006b82 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	f023 010f 	bic.w	r1, r3, #15
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	1e5a      	subs	r2, r3, #1
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b80:	e007      	b.n	8006b92 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 020f 	bic.w	r2, r2, #15
 8006b90:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b96:	f023 0303 	bic.w	r3, r3, #3
 8006b9a:	f043 0201 	orr.w	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ba2:	e007      	b.n	8006bb4 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba8:	f043 0210 	orr.w	r2, r3, #16
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006bb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3724      	adds	r7, #36	; 0x24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd90      	pop	{r4, r7, pc}
 8006bbe:	bf00      	nop

08006bc0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bd4:	d004      	beq.n	8006be0 <HAL_ADC_Start_DMA+0x20>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a58      	ldr	r2, [pc, #352]	; (8006d3c <HAL_ADC_Start_DMA+0x17c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d101      	bne.n	8006be4 <HAL_ADC_Start_DMA+0x24>
 8006be0:	4b57      	ldr	r3, [pc, #348]	; (8006d40 <HAL_ADC_Start_DMA+0x180>)
 8006be2:	e000      	b.n	8006be6 <HAL_ADC_Start_DMA+0x26>
 8006be4:	4b57      	ldr	r3, [pc, #348]	; (8006d44 <HAL_ADC_Start_DMA+0x184>)
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff fce3 	bl	80065b2 <LL_ADC_GetMultimode>
 8006bec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff fd74 	bl	80066e0 <LL_ADC_REG_IsConversionOngoing>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 8096 	bne.w	8006d2c <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d101      	bne.n	8006c0e <HAL_ADC_Start_DMA+0x4e>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e091      	b.n	8006d32 <HAL_ADC_Start_DMA+0x172>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2b05      	cmp	r3, #5
 8006c20:	d002      	beq.n	8006c28 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b09      	cmp	r3, #9
 8006c26:	d17a      	bne.n	8006d1e <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 feef 	bl	8007a0c <ADC_Enable>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d16d      	bne.n	8006d14 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a3a      	ldr	r2, [pc, #232]	; (8006d3c <HAL_ADC_Start_DMA+0x17c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d009      	beq.n	8006c6a <HAL_ADC_Start_DMA+0xaa>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a3b      	ldr	r2, [pc, #236]	; (8006d48 <HAL_ADC_Start_DMA+0x188>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d002      	beq.n	8006c66 <HAL_ADC_Start_DMA+0xa6>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	e003      	b.n	8006c6e <HAL_ADC_Start_DMA+0xae>
 8006c66:	4b39      	ldr	r3, [pc, #228]	; (8006d4c <HAL_ADC_Start_DMA+0x18c>)
 8006c68:	e001      	b.n	8006c6e <HAL_ADC_Start_DMA+0xae>
 8006c6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	6812      	ldr	r2, [r2, #0]
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d002      	beq.n	8006c7c <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d105      	bne.n	8006c88 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d006      	beq.n	8006ca2 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c98:	f023 0206 	bic.w	r2, r3, #6
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	661a      	str	r2, [r3, #96]	; 0x60
 8006ca0:	e002      	b.n	8006ca8 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cac:	4a28      	ldr	r2, [pc, #160]	; (8006d50 <HAL_ADC_Start_DMA+0x190>)
 8006cae:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb4:	4a27      	ldr	r2, [pc, #156]	; (8006d54 <HAL_ADC_Start_DMA+0x194>)
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbc:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <HAL_ADC_Start_DMA+0x198>)
 8006cbe:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	221c      	movs	r2, #28
 8006cc6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0210 	orr.w	r2, r2, #16
 8006cde:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3340      	adds	r3, #64	; 0x40
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f001 fa86 	bl	8008210 <HAL_DMA_Start_IT>
 8006d04:	4603      	mov	r3, r0
 8006d06:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fcd3 	bl	80066b8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006d12:	e00d      	b.n	8006d30 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006d1c:	e008      	b.n	8006d30 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006d2a:	e001      	b.n	8006d30 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	50000100 	.word	0x50000100
 8006d40:	50000300 	.word	0x50000300
 8006d44:	50000700 	.word	0x50000700
 8006d48:	50000500 	.word	0x50000500
 8006d4c:	50000400 	.word	0x50000400
 8006d50:	08007ac1 	.word	0x08007ac1
 8006d54:	08007b99 	.word	0x08007b99
 8006d58:	08007bb5 	.word	0x08007bb5

08006d5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b0b6      	sub	sp, #216	; 0xd8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d102      	bne.n	8006dbc <HAL_ADC_ConfigChannel+0x24>
 8006db6:	2302      	movs	r3, #2
 8006db8:	f000 bc12 	b.w	80075e0 <HAL_ADC_ConfigChannel+0x848>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff fc89 	bl	80066e0 <LL_ADC_REG_IsConversionOngoing>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f040 83f2 	bne.w	80075ba <HAL_ADC_ConfigChannel+0x822>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	6859      	ldr	r1, [r3, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	f7ff fb1b 	bl	800641e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fc77 	bl	80066e0 <LL_ADC_REG_IsConversionOngoing>
 8006df2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff fc83 	bl	8006706 <LL_ADC_INJ_IsConversionOngoing>
 8006e00:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f040 81d9 	bne.w	80071c0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f040 81d4 	bne.w	80071c0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e20:	d10f      	bne.n	8006e42 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	f7ff fb22 	bl	8006476 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff fac9 	bl	80063d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8006e40:	e00e      	b.n	8006e60 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	6819      	ldr	r1, [r3, #0]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f7ff fb11 	bl	8006476 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff fab9 	bl	80063d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	695a      	ldr	r2, [r3, #20]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	08db      	lsrs	r3, r3, #3
 8006e6c:	f003 0303 	and.w	r3, r3, #3
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	fa02 f303 	lsl.w	r3, r2, r3
 8006e76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d022      	beq.n	8006ec8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6818      	ldr	r0, [r3, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6919      	ldr	r1, [r3, #16]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e92:	f7ff fa13 	bl	80062bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	6919      	ldr	r1, [r3, #16]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f7ff fa5f 	bl	8006366 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	6919      	ldr	r1, [r3, #16]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	7f1b      	ldrb	r3, [r3, #28]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d102      	bne.n	8006ebe <HAL_ADC_ConfigChannel+0x126>
 8006eb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ebc:	e000      	b.n	8006ec0 <HAL_ADC_ConfigChannel+0x128>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f7ff fa6b 	bl	800639c <LL_ADC_SetOffsetSaturation>
 8006ec6:	e17b      	b.n	80071c0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7ff fa18 	bl	8006304 <LL_ADC_GetOffsetChannel>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <HAL_ADC_ConfigChannel+0x15c>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff fa0d 	bl	8006304 <LL_ADC_GetOffsetChannel>
 8006eea:	4603      	mov	r3, r0
 8006eec:	0e9b      	lsrs	r3, r3, #26
 8006eee:	f003 021f 	and.w	r2, r3, #31
 8006ef2:	e01e      	b.n	8006f32 <HAL_ADC_ConfigChannel+0x19a>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fa02 	bl	8006304 <LL_ADC_GetOffsetChannel>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f0a:	fa93 f3a3 	rbit	r3, r3
 8006f0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006f12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006f1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006f22:	2320      	movs	r3, #32
 8006f24:	e004      	b.n	8006f30 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006f26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f2a:	fab3 f383 	clz	r3, r3
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d105      	bne.n	8006f4a <HAL_ADC_ConfigChannel+0x1b2>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	0e9b      	lsrs	r3, r3, #26
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	e018      	b.n	8006f7c <HAL_ADC_ConfigChannel+0x1e4>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f56:	fa93 f3a3 	rbit	r3, r3
 8006f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006f6e:	2320      	movs	r3, #32
 8006f70:	e004      	b.n	8006f7c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006f72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f76:	fab3 f383 	clz	r3, r3
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d106      	bne.n	8006f8e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2200      	movs	r2, #0
 8006f86:	2100      	movs	r1, #0
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff f9d1 	bl	8006330 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2101      	movs	r1, #1
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff f9b5 	bl	8006304 <LL_ADC_GetOffsetChannel>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <HAL_ADC_ConfigChannel+0x222>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2101      	movs	r1, #1
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7ff f9aa 	bl	8006304 <LL_ADC_GetOffsetChannel>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	0e9b      	lsrs	r3, r3, #26
 8006fb4:	f003 021f 	and.w	r2, r3, #31
 8006fb8:	e01e      	b.n	8006ff8 <HAL_ADC_ConfigChannel+0x260>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff f99f 	bl	8006304 <LL_ADC_GetOffsetChannel>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fd0:	fa93 f3a3 	rbit	r3, r3
 8006fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006fd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006fe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006fe8:	2320      	movs	r3, #32
 8006fea:	e004      	b.n	8006ff6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006fec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ff0:	fab3 f383 	clz	r3, r3
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007000:	2b00      	cmp	r3, #0
 8007002:	d105      	bne.n	8007010 <HAL_ADC_ConfigChannel+0x278>
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	0e9b      	lsrs	r3, r3, #26
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	e018      	b.n	8007042 <HAL_ADC_ConfigChannel+0x2aa>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007018:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800701c:	fa93 f3a3 	rbit	r3, r3
 8007020:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007024:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800702c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8007034:	2320      	movs	r3, #32
 8007036:	e004      	b.n	8007042 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8007038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800703c:	fab3 f383 	clz	r3, r3
 8007040:	b2db      	uxtb	r3, r3
 8007042:	429a      	cmp	r2, r3
 8007044:	d106      	bne.n	8007054 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2200      	movs	r2, #0
 800704c:	2101      	movs	r1, #1
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff f96e 	bl	8006330 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2102      	movs	r1, #2
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff f952 	bl	8006304 <LL_ADC_GetOffsetChannel>
 8007060:	4603      	mov	r3, r0
 8007062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <HAL_ADC_ConfigChannel+0x2e8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2102      	movs	r1, #2
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff f947 	bl	8006304 <LL_ADC_GetOffsetChannel>
 8007076:	4603      	mov	r3, r0
 8007078:	0e9b      	lsrs	r3, r3, #26
 800707a:	f003 021f 	and.w	r2, r3, #31
 800707e:	e01e      	b.n	80070be <HAL_ADC_ConfigChannel+0x326>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2102      	movs	r1, #2
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff f93c 	bl	8006304 <LL_ADC_GetOffsetChannel>
 800708c:	4603      	mov	r3, r0
 800708e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007096:	fa93 f3a3 	rbit	r3, r3
 800709a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800709e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80070a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80070ae:	2320      	movs	r3, #32
 80070b0:	e004      	b.n	80070bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80070b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070b6:	fab3 f383 	clz	r3, r3
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <HAL_ADC_ConfigChannel+0x33e>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	0e9b      	lsrs	r3, r3, #26
 80070d0:	f003 031f 	and.w	r3, r3, #31
 80070d4:	e016      	b.n	8007104 <HAL_ADC_ConfigChannel+0x36c>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070e2:	fa93 f3a3 	rbit	r3, r3
 80070e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80070e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80070ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80070f6:	2320      	movs	r3, #32
 80070f8:	e004      	b.n	8007104 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80070fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070fe:	fab3 f383 	clz	r3, r3
 8007102:	b2db      	uxtb	r3, r3
 8007104:	429a      	cmp	r2, r3
 8007106:	d106      	bne.n	8007116 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2200      	movs	r2, #0
 800710e:	2102      	movs	r1, #2
 8007110:	4618      	mov	r0, r3
 8007112:	f7ff f90d 	bl	8006330 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2103      	movs	r1, #3
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff f8f1 	bl	8006304 <LL_ADC_GetOffsetChannel>
 8007122:	4603      	mov	r3, r0
 8007124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <HAL_ADC_ConfigChannel+0x3aa>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2103      	movs	r1, #3
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff f8e6 	bl	8006304 <LL_ADC_GetOffsetChannel>
 8007138:	4603      	mov	r3, r0
 800713a:	0e9b      	lsrs	r3, r3, #26
 800713c:	f003 021f 	and.w	r2, r3, #31
 8007140:	e017      	b.n	8007172 <HAL_ADC_ConfigChannel+0x3da>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2103      	movs	r1, #3
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff f8db 	bl	8006304 <LL_ADC_GetOffsetChannel>
 800714e:	4603      	mov	r3, r0
 8007150:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007154:	fa93 f3a3 	rbit	r3, r3
 8007158:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800715a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800715c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800715e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8007164:	2320      	movs	r3, #32
 8007166:	e003      	b.n	8007170 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8007168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800716a:	fab3 f383 	clz	r3, r3
 800716e:	b2db      	uxtb	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800717a:	2b00      	cmp	r3, #0
 800717c:	d105      	bne.n	800718a <HAL_ADC_ConfigChannel+0x3f2>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	0e9b      	lsrs	r3, r3, #26
 8007184:	f003 031f 	and.w	r3, r3, #31
 8007188:	e011      	b.n	80071ae <HAL_ADC_ConfigChannel+0x416>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007192:	fa93 f3a3 	rbit	r3, r3
 8007196:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800719a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800719c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80071a2:	2320      	movs	r3, #32
 80071a4:	e003      	b.n	80071ae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80071a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a8:	fab3 f383 	clz	r3, r3
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d106      	bne.n	80071c0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2200      	movs	r2, #0
 80071b8:	2103      	movs	r1, #3
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff f8b8 	bl	8006330 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff fa64 	bl	8006692 <LL_ADC_IsEnabled>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 813d 	bne.w	800744c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6819      	ldr	r1, [r3, #0]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	461a      	mov	r2, r3
 80071e0:	f7ff f974 	bl	80064cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	4aa2      	ldr	r2, [pc, #648]	; (8007474 <HAL_ADC_ConfigChannel+0x6dc>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	f040 812e 	bne.w	800744c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10b      	bne.n	8007218 <HAL_ADC_ConfigChannel+0x480>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	0e9b      	lsrs	r3, r3, #26
 8007206:	3301      	adds	r3, #1
 8007208:	f003 031f 	and.w	r3, r3, #31
 800720c:	2b09      	cmp	r3, #9
 800720e:	bf94      	ite	ls
 8007210:	2301      	movls	r3, #1
 8007212:	2300      	movhi	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	e019      	b.n	800724c <HAL_ADC_ConfigChannel+0x4b4>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800721e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007220:	fa93 f3a3 	rbit	r3, r3
 8007224:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007228:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800722a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007230:	2320      	movs	r3, #32
 8007232:	e003      	b.n	800723c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007236:	fab3 f383 	clz	r3, r3
 800723a:	b2db      	uxtb	r3, r3
 800723c:	3301      	adds	r3, #1
 800723e:	f003 031f 	and.w	r3, r3, #31
 8007242:	2b09      	cmp	r3, #9
 8007244:	bf94      	ite	ls
 8007246:	2301      	movls	r3, #1
 8007248:	2300      	movhi	r3, #0
 800724a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800724c:	2b00      	cmp	r3, #0
 800724e:	d079      	beq.n	8007344 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007258:	2b00      	cmp	r3, #0
 800725a:	d107      	bne.n	800726c <HAL_ADC_ConfigChannel+0x4d4>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	0e9b      	lsrs	r3, r3, #26
 8007262:	3301      	adds	r3, #1
 8007264:	069b      	lsls	r3, r3, #26
 8007266:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800726a:	e015      	b.n	8007298 <HAL_ADC_ConfigChannel+0x500>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007274:	fa93 f3a3 	rbit	r3, r3
 8007278:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800727a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800727e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007284:	2320      	movs	r3, #32
 8007286:	e003      	b.n	8007290 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800728a:	fab3 f383 	clz	r3, r3
 800728e:	b2db      	uxtb	r3, r3
 8007290:	3301      	adds	r3, #1
 8007292:	069b      	lsls	r3, r3, #26
 8007294:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d109      	bne.n	80072b8 <HAL_ADC_ConfigChannel+0x520>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	0e9b      	lsrs	r3, r3, #26
 80072aa:	3301      	adds	r3, #1
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2101      	movs	r1, #1
 80072b2:	fa01 f303 	lsl.w	r3, r1, r3
 80072b6:	e017      	b.n	80072e8 <HAL_ADC_ConfigChannel+0x550>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072c0:	fa93 f3a3 	rbit	r3, r3
 80072c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80072c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80072ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80072d0:	2320      	movs	r3, #32
 80072d2:	e003      	b.n	80072dc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80072d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072d6:	fab3 f383 	clz	r3, r3
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	3301      	adds	r3, #1
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2101      	movs	r1, #1
 80072e4:	fa01 f303 	lsl.w	r3, r1, r3
 80072e8:	ea42 0103 	orr.w	r1, r2, r3
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10a      	bne.n	800730e <HAL_ADC_ConfigChannel+0x576>
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	0e9b      	lsrs	r3, r3, #26
 80072fe:	3301      	adds	r3, #1
 8007300:	f003 021f 	and.w	r2, r3, #31
 8007304:	4613      	mov	r3, r2
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	4413      	add	r3, r2
 800730a:	051b      	lsls	r3, r3, #20
 800730c:	e018      	b.n	8007340 <HAL_ADC_ConfigChannel+0x5a8>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	fa93 f3a3 	rbit	r3, r3
 800731a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800731c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007326:	2320      	movs	r3, #32
 8007328:	e003      	b.n	8007332 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800732a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732c:	fab3 f383 	clz	r3, r3
 8007330:	b2db      	uxtb	r3, r3
 8007332:	3301      	adds	r3, #1
 8007334:	f003 021f 	and.w	r2, r3, #31
 8007338:	4613      	mov	r3, r2
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	4413      	add	r3, r2
 800733e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007340:	430b      	orrs	r3, r1
 8007342:	e07e      	b.n	8007442 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800734c:	2b00      	cmp	r3, #0
 800734e:	d107      	bne.n	8007360 <HAL_ADC_ConfigChannel+0x5c8>
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	0e9b      	lsrs	r3, r3, #26
 8007356:	3301      	adds	r3, #1
 8007358:	069b      	lsls	r3, r3, #26
 800735a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800735e:	e015      	b.n	800738c <HAL_ADC_ConfigChannel+0x5f4>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	fa93 f3a3 	rbit	r3, r3
 800736c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007378:	2320      	movs	r3, #32
 800737a:	e003      	b.n	8007384 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	fab3 f383 	clz	r3, r3
 8007382:	b2db      	uxtb	r3, r3
 8007384:	3301      	adds	r3, #1
 8007386:	069b      	lsls	r3, r3, #26
 8007388:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007394:	2b00      	cmp	r3, #0
 8007396:	d109      	bne.n	80073ac <HAL_ADC_ConfigChannel+0x614>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	0e9b      	lsrs	r3, r3, #26
 800739e:	3301      	adds	r3, #1
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	2101      	movs	r1, #1
 80073a6:	fa01 f303 	lsl.w	r3, r1, r3
 80073aa:	e017      	b.n	80073dc <HAL_ADC_ConfigChannel+0x644>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	fa93 f3a3 	rbit	r3, r3
 80073b8:	61fb      	str	r3, [r7, #28]
  return result;
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80073c4:	2320      	movs	r3, #32
 80073c6:	e003      	b.n	80073d0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	fab3 f383 	clz	r3, r3
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	3301      	adds	r3, #1
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	2101      	movs	r1, #1
 80073d8:	fa01 f303 	lsl.w	r3, r1, r3
 80073dc:	ea42 0103 	orr.w	r1, r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10d      	bne.n	8007408 <HAL_ADC_ConfigChannel+0x670>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	0e9b      	lsrs	r3, r3, #26
 80073f2:	3301      	adds	r3, #1
 80073f4:	f003 021f 	and.w	r2, r3, #31
 80073f8:	4613      	mov	r3, r2
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	4413      	add	r3, r2
 80073fe:	3b1e      	subs	r3, #30
 8007400:	051b      	lsls	r3, r3, #20
 8007402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007406:	e01b      	b.n	8007440 <HAL_ADC_ConfigChannel+0x6a8>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	fa93 f3a3 	rbit	r3, r3
 8007414:	613b      	str	r3, [r7, #16]
  return result;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007420:	2320      	movs	r3, #32
 8007422:	e003      	b.n	800742c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	fab3 f383 	clz	r3, r3
 800742a:	b2db      	uxtb	r3, r3
 800742c:	3301      	adds	r3, #1
 800742e:	f003 021f 	and.w	r2, r3, #31
 8007432:	4613      	mov	r3, r2
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	4413      	add	r3, r2
 8007438:	3b1e      	subs	r3, #30
 800743a:	051b      	lsls	r3, r3, #20
 800743c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007440:	430b      	orrs	r3, r1
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	6892      	ldr	r2, [r2, #8]
 8007446:	4619      	mov	r1, r3
 8007448:	f7ff f815 	bl	8006476 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	4b09      	ldr	r3, [pc, #36]	; (8007478 <HAL_ADC_ConfigChannel+0x6e0>)
 8007452:	4013      	ands	r3, r2
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 80bd 	beq.w	80075d4 <HAL_ADC_ConfigChannel+0x83c>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007462:	d004      	beq.n	800746e <HAL_ADC_ConfigChannel+0x6d6>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a04      	ldr	r2, [pc, #16]	; (800747c <HAL_ADC_ConfigChannel+0x6e4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d10a      	bne.n	8007484 <HAL_ADC_ConfigChannel+0x6ec>
 800746e:	4b04      	ldr	r3, [pc, #16]	; (8007480 <HAL_ADC_ConfigChannel+0x6e8>)
 8007470:	e009      	b.n	8007486 <HAL_ADC_ConfigChannel+0x6ee>
 8007472:	bf00      	nop
 8007474:	407f0000 	.word	0x407f0000
 8007478:	80080000 	.word	0x80080000
 800747c:	50000100 	.word	0x50000100
 8007480:	50000300 	.word	0x50000300
 8007484:	4b58      	ldr	r3, [pc, #352]	; (80075e8 <HAL_ADC_ConfigChannel+0x850>)
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe ff0a 	bl	80062a0 <LL_ADC_GetCommonPathInternalCh>
 800748c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a55      	ldr	r2, [pc, #340]	; (80075ec <HAL_ADC_ConfigChannel+0x854>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d004      	beq.n	80074a4 <HAL_ADC_ConfigChannel+0x70c>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a54      	ldr	r2, [pc, #336]	; (80075f0 <HAL_ADC_ConfigChannel+0x858>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d139      	bne.n	8007518 <HAL_ADC_ConfigChannel+0x780>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80074a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d133      	bne.n	8007518 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074b8:	d005      	beq.n	80074c6 <HAL_ADC_ConfigChannel+0x72e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a4d      	ldr	r2, [pc, #308]	; (80075f4 <HAL_ADC_ConfigChannel+0x85c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	f040 8084 	bne.w	80075ce <HAL_ADC_ConfigChannel+0x836>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074ce:	d004      	beq.n	80074da <HAL_ADC_ConfigChannel+0x742>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a48      	ldr	r2, [pc, #288]	; (80075f8 <HAL_ADC_ConfigChannel+0x860>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d101      	bne.n	80074de <HAL_ADC_ConfigChannel+0x746>
 80074da:	4a48      	ldr	r2, [pc, #288]	; (80075fc <HAL_ADC_ConfigChannel+0x864>)
 80074dc:	e000      	b.n	80074e0 <HAL_ADC_ConfigChannel+0x748>
 80074de:	4a42      	ldr	r2, [pc, #264]	; (80075e8 <HAL_ADC_ConfigChannel+0x850>)
 80074e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80074e8:	4619      	mov	r1, r3
 80074ea:	4610      	mov	r0, r2
 80074ec:	f7fe fec5 	bl	800627a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80074f0:	4b43      	ldr	r3, [pc, #268]	; (8007600 <HAL_ADC_ConfigChannel+0x868>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	099b      	lsrs	r3, r3, #6
 80074f6:	4a43      	ldr	r2, [pc, #268]	; (8007604 <HAL_ADC_ConfigChannel+0x86c>)
 80074f8:	fba2 2303 	umull	r2, r3, r2, r3
 80074fc:	099a      	lsrs	r2, r3, #6
 80074fe:	4613      	mov	r3, r2
 8007500:	005b      	lsls	r3, r3, #1
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007508:	e002      	b.n	8007510 <HAL_ADC_ConfigChannel+0x778>
          {
            wait_loop_index--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3b01      	subs	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1f9      	bne.n	800750a <HAL_ADC_ConfigChannel+0x772>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007516:	e05a      	b.n	80075ce <HAL_ADC_ConfigChannel+0x836>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a3a      	ldr	r2, [pc, #232]	; (8007608 <HAL_ADC_ConfigChannel+0x870>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d125      	bne.n	800756e <HAL_ADC_ConfigChannel+0x7d6>
 8007522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d11f      	bne.n	800756e <HAL_ADC_ConfigChannel+0x7d6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a31      	ldr	r2, [pc, #196]	; (80075f8 <HAL_ADC_ConfigChannel+0x860>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d104      	bne.n	8007542 <HAL_ADC_ConfigChannel+0x7aa>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a33      	ldr	r2, [pc, #204]	; (800760c <HAL_ADC_ConfigChannel+0x874>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d047      	beq.n	80075d2 <HAL_ADC_ConfigChannel+0x83a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800754a:	d004      	beq.n	8007556 <HAL_ADC_ConfigChannel+0x7be>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a29      	ldr	r2, [pc, #164]	; (80075f8 <HAL_ADC_ConfigChannel+0x860>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d101      	bne.n	800755a <HAL_ADC_ConfigChannel+0x7c2>
 8007556:	4a29      	ldr	r2, [pc, #164]	; (80075fc <HAL_ADC_ConfigChannel+0x864>)
 8007558:	e000      	b.n	800755c <HAL_ADC_ConfigChannel+0x7c4>
 800755a:	4a23      	ldr	r2, [pc, #140]	; (80075e8 <HAL_ADC_ConfigChannel+0x850>)
 800755c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007564:	4619      	mov	r1, r3
 8007566:	4610      	mov	r0, r2
 8007568:	f7fe fe87 	bl	800627a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800756c:	e031      	b.n	80075d2 <HAL_ADC_ConfigChannel+0x83a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a27      	ldr	r2, [pc, #156]	; (8007610 <HAL_ADC_ConfigChannel+0x878>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d12d      	bne.n	80075d4 <HAL_ADC_ConfigChannel+0x83c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800757c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d127      	bne.n	80075d4 <HAL_ADC_ConfigChannel+0x83c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1b      	ldr	r2, [pc, #108]	; (80075f8 <HAL_ADC_ConfigChannel+0x860>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d022      	beq.n	80075d4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007596:	d004      	beq.n	80075a2 <HAL_ADC_ConfigChannel+0x80a>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a16      	ldr	r2, [pc, #88]	; (80075f8 <HAL_ADC_ConfigChannel+0x860>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d101      	bne.n	80075a6 <HAL_ADC_ConfigChannel+0x80e>
 80075a2:	4a16      	ldr	r2, [pc, #88]	; (80075fc <HAL_ADC_ConfigChannel+0x864>)
 80075a4:	e000      	b.n	80075a8 <HAL_ADC_ConfigChannel+0x810>
 80075a6:	4a10      	ldr	r2, [pc, #64]	; (80075e8 <HAL_ADC_ConfigChannel+0x850>)
 80075a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f7fe fe61 	bl	800627a <LL_ADC_SetCommonPathInternalCh>
 80075b8:	e00c      	b.n	80075d4 <HAL_ADC_ConfigChannel+0x83c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075be:	f043 0220 	orr.w	r2, r3, #32
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80075cc:	e002      	b.n	80075d4 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80075ce:	bf00      	nop
 80075d0:	e000      	b.n	80075d4 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80075d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80075dc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	37d8      	adds	r7, #216	; 0xd8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	50000700 	.word	0x50000700
 80075ec:	c3210000 	.word	0xc3210000
 80075f0:	90c00010 	.word	0x90c00010
 80075f4:	50000600 	.word	0x50000600
 80075f8:	50000100 	.word	0x50000100
 80075fc:	50000300 	.word	0x50000300
 8007600:	20000004 	.word	0x20000004
 8007604:	053e2d63 	.word	0x053e2d63
 8007608:	c7520000 	.word	0xc7520000
 800760c:	50000500 	.word	0x50000500
 8007610:	cb840000 	.word	0xcb840000

08007614 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08e      	sub	sp, #56	; 0x38
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800762c:	d003      	beq.n	8007636 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007632:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_ADC_AnalogWDGConfig+0x30>
 8007640:	2302      	movs	r3, #2
 8007642:	e1dc      	b.n	80079fe <HAL_ADC_AnalogWDGConfig+0x3ea>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff f845 	bl	80066e0 <LL_ADC_REG_IsConversionOngoing>
 8007656:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff f852 	bl	8006706 <LL_ADC_INJ_IsConversionOngoing>
 8007662:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	2b00      	cmp	r3, #0
 8007668:	f040 8163 	bne.w	8007932 <HAL_ADC_AnalogWDGConfig+0x31e>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	2b00      	cmp	r3, #0
 8007670:	f040 815f 	bne.w	8007932 <HAL_ADC_AnalogWDGConfig+0x31e>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4aa6      	ldr	r2, [pc, #664]	; (8007914 <HAL_ADC_AnalogWDGConfig+0x300>)
 800767a:	4293      	cmp	r3, r2
 800767c:	f040 8086 	bne.w	800778c <HAL_ADC_AnalogWDGConfig+0x178>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007688:	d042      	beq.n	8007710 <HAL_ADC_AnalogWDGConfig+0xfc>
 800768a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800768e:	d806      	bhi.n	800769e <HAL_ADC_AnalogWDGConfig+0x8a>
 8007690:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007694:	d034      	beq.n	8007700 <HAL_ADC_AnalogWDGConfig+0xec>
 8007696:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800769a:	d00a      	beq.n	80076b2 <HAL_ADC_AnalogWDGConfig+0x9e>
 800769c:	e048      	b.n	8007730 <HAL_ADC_AnalogWDGConfig+0x11c>
 800769e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076a2:	d03d      	beq.n	8007720 <HAL_ADC_AnalogWDGConfig+0x10c>
 80076a4:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80076a8:	d01d      	beq.n	80076e6 <HAL_ADC_AnalogWDGConfig+0xd2>
 80076aa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80076ae:	d00d      	beq.n	80076cc <HAL_ADC_AnalogWDGConfig+0xb8>
 80076b0:	e03e      	b.n	8007730 <HAL_ADC_AnalogWDGConfig+0x11c>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80076be:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80076c2:	461a      	mov	r2, r3
 80076c4:	4993      	ldr	r1, [pc, #588]	; (8007914 <HAL_ADC_AnalogWDGConfig+0x300>)
 80076c6:	f7fe ff25 	bl	8006514 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 80076ca:	e039      	b.n	8007740 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6818      	ldr	r0, [r3, #0]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80076d8:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 80076dc:	461a      	mov	r2, r3
 80076de:	498d      	ldr	r1, [pc, #564]	; (8007914 <HAL_ADC_AnalogWDGConfig+0x300>)
 80076e0:	f7fe ff18 	bl	8006514 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 80076e4:	e02c      	b.n	8007740 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80076f2:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 80076f6:	461a      	mov	r2, r3
 80076f8:	4986      	ldr	r1, [pc, #536]	; (8007914 <HAL_ADC_AnalogWDGConfig+0x300>)
 80076fa:	f7fe ff0b 	bl	8006514 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80076fe:	e01f      	b.n	8007740 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a84      	ldr	r2, [pc, #528]	; (8007918 <HAL_ADC_AnalogWDGConfig+0x304>)
 8007706:	4983      	ldr	r1, [pc, #524]	; (8007914 <HAL_ADC_AnalogWDGConfig+0x300>)
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe ff03 	bl	8006514 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800770e:	e017      	b.n	8007740 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a81      	ldr	r2, [pc, #516]	; (800791c <HAL_ADC_AnalogWDGConfig+0x308>)
 8007716:	497f      	ldr	r1, [pc, #508]	; (8007914 <HAL_ADC_AnalogWDGConfig+0x300>)
 8007718:	4618      	mov	r0, r3
 800771a:	f7fe fefb 	bl	8006514 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800771e:	e00f      	b.n	8007740 <HAL_ADC_AnalogWDGConfig+0x12c>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a7e      	ldr	r2, [pc, #504]	; (8007920 <HAL_ADC_AnalogWDGConfig+0x30c>)
 8007726:	497b      	ldr	r1, [pc, #492]	; (8007914 <HAL_ADC_AnalogWDGConfig+0x300>)
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fef3 	bl	8006514 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800772e:	e007      	b.n	8007740 <HAL_ADC_AnalogWDGConfig+0x12c>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2200      	movs	r2, #0
 8007736:	4977      	ldr	r1, [pc, #476]	; (8007914 <HAL_ADC_AnalogWDGConfig+0x300>)
 8007738:	4618      	mov	r0, r3
 800773a:	f7fe feeb 	bl	8006514 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800773e:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe ffe0 	bl	800672c <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	7b1b      	ldrb	r3, [r3, #12]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d105      	bne.n	8007780 <HAL_ADC_AnalogWDGConfig+0x16c>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff f800 	bl	800677e <LL_ADC_EnableIT_AWD1>
 800777e:	e0d8      	b.n	8007932 <HAL_ADC_AnalogWDGConfig+0x31e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff f82a 	bl	80067de <LL_ADC_DisableIT_AWD1>
 800778a:	e0d2      	b.n	8007932 <HAL_ADC_AnalogWDGConfig+0x31e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007794:	d077      	beq.n	8007886 <HAL_ADC_AnalogWDGConfig+0x272>
 8007796:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800779a:	d806      	bhi.n	80077aa <HAL_ADC_AnalogWDGConfig+0x196>
 800779c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077a0:	d071      	beq.n	8007886 <HAL_ADC_AnalogWDGConfig+0x272>
 80077a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80077a6:	d009      	beq.n	80077bc <HAL_ADC_AnalogWDGConfig+0x1a8>
 80077a8:	e076      	b.n	8007898 <HAL_ADC_AnalogWDGConfig+0x284>
 80077aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077ae:	d06a      	beq.n	8007886 <HAL_ADC_AnalogWDGConfig+0x272>
 80077b0:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80077b4:	d002      	beq.n	80077bc <HAL_ADC_AnalogWDGConfig+0x1a8>
 80077b6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80077ba:	d16d      	bne.n	8007898 <HAL_ADC_AnalogWDGConfig+0x284>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a58      	ldr	r2, [pc, #352]	; (8007924 <HAL_ADC_AnalogWDGConfig+0x310>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d12f      	bne.n	8007826 <HAL_ADC_AnalogWDGConfig+0x212>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d108      	bne.n	80077e4 <HAL_ADC_AnalogWDGConfig+0x1d0>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	0e9b      	lsrs	r3, r3, #26
 80077d8:	f003 031f 	and.w	r3, r3, #31
 80077dc:	2201      	movs	r2, #1
 80077de:	fa02 f303 	lsl.w	r3, r2, r3
 80077e2:	e016      	b.n	8007812 <HAL_ADC_AnalogWDGConfig+0x1fe>
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	fa93 f3a3 	rbit	r3, r3
 80077f0:	61bb      	str	r3, [r7, #24]
  return result;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_ADC_AnalogWDGConfig+0x1ec>
    return 32U;
 80077fc:	2320      	movs	r3, #32
 80077fe:	e003      	b.n	8007808 <HAL_ADC_AnalogWDGConfig+0x1f4>
  return __builtin_clz(value);
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	fab3 f383 	clz	r3, r3
 8007806:	b2db      	uxtb	r3, r3
 8007808:	f003 031f 	and.w	r3, r3, #31
 800780c:	2201      	movs	r2, #1
 800780e:	fa02 f303 	lsl.w	r3, r2, r3
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	6812      	ldr	r2, [r2, #0]
 8007816:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	6812      	ldr	r2, [r2, #0]
 800781e:	430b      	orrs	r3, r1
 8007820:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8007824:	e041      	b.n	80078aa <HAL_ADC_AnalogWDGConfig+0x296>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800782e:	2b00      	cmp	r3, #0
 8007830:	d108      	bne.n	8007844 <HAL_ADC_AnalogWDGConfig+0x230>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	0e9b      	lsrs	r3, r3, #26
 8007838:	f003 031f 	and.w	r3, r3, #31
 800783c:	2201      	movs	r2, #1
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	e016      	b.n	8007872 <HAL_ADC_AnalogWDGConfig+0x25e>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	fa93 f3a3 	rbit	r3, r3
 8007850:	60fb      	str	r3, [r7, #12]
  return result;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <HAL_ADC_AnalogWDGConfig+0x24c>
    return 32U;
 800785c:	2320      	movs	r3, #32
 800785e:	e003      	b.n	8007868 <HAL_ADC_AnalogWDGConfig+0x254>
  return __builtin_clz(value);
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	fab3 f383 	clz	r3, r3
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 031f 	and.w	r3, r3, #31
 800786c:	2201      	movs	r2, #1
 800786e:	fa02 f303 	lsl.w	r3, r2, r3
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	6812      	ldr	r2, [r2, #0]
 8007876:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6812      	ldr	r2, [r2, #0]
 800787e:	430b      	orrs	r3, r1
 8007880:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8007884:	e011      	b.n	80078aa <HAL_ADC_AnalogWDGConfig+0x296>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a24      	ldr	r2, [pc, #144]	; (8007920 <HAL_ADC_AnalogWDGConfig+0x30c>)
 8007890:	4619      	mov	r1, r3
 8007892:	f7fe fe3f 	bl	8006514 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007896:	e008      	b.n	80078aa <HAL_ADC_AnalogWDGConfig+0x296>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6818      	ldr	r0, [r3, #0]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2200      	movs	r2, #0
 80078a2:	4619      	mov	r1, r3
 80078a4:	f7fe fe36 	bl	8006514 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80078a8:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <HAL_ADC_AnalogWDGConfig+0x310>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d11a      	bne.n	80078ea <HAL_ADC_AnalogWDGConfig+0x2d6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe ff3e 	bl	8006746 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	7b1b      	ldrb	r3, [r3, #12]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d105      	bne.n	80078de <HAL_ADC_AnalogWDGConfig+0x2ca>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe ff61 	bl	800679e <LL_ADC_EnableIT_AWD2>
 80078dc:	e029      	b.n	8007932 <HAL_ADC_AnalogWDGConfig+0x31e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe ff8b 	bl	80067fe <LL_ADC_DisableIT_AWD2>
 80078e8:	e023      	b.n	8007932 <HAL_ADC_AnalogWDGConfig+0x31e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe ff31 	bl	8006762 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	7b1b      	ldrb	r3, [r3, #12]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d10f      	bne.n	8007928 <HAL_ADC_AnalogWDGConfig+0x314>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4618      	mov	r0, r3
 800790e:	f7fe ff56 	bl	80067be <LL_ADC_EnableIT_AWD3>
 8007912:	e00e      	b.n	8007932 <HAL_ADC_AnalogWDGConfig+0x31e>
 8007914:	7dc00000 	.word	0x7dc00000
 8007918:	0087ffff 	.word	0x0087ffff
 800791c:	0107ffff 	.word	0x0107ffff
 8007920:	0187ffff 	.word	0x0187ffff
 8007924:	0017ffff 	.word	0x0017ffff
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4618      	mov	r0, r3
 800792e:	f7fe ff76 	bl	800681e <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a34      	ldr	r2, [pc, #208]	; (8007a08 <HAL_ADC_AnalogWDGConfig+0x3f4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d118      	bne.n	800796e <HAL_ADC_AnalogWDGConfig+0x35a>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	691a      	ldr	r2, [r3, #16]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	08db      	lsrs	r3, r3, #3
 8007948:	f003 0303 	and.w	r3, r3, #3
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	fa02 f303 	lsl.w	r3, r2, r3
 8007952:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	695a      	ldr	r2, [r3, #20]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	08db      	lsrs	r3, r3, #3
 8007960:	f003 0303 	and.w	r3, r3, #3
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	fa02 f303 	lsl.w	r3, r2, r3
 800796a:	633b      	str	r3, [r7, #48]	; 0x30
 800796c:	e039      	b.n	80079e2 <HAL_ADC_AnalogWDGConfig+0x3ce>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f003 0318 	and.w	r3, r3, #24
 8007978:	2b18      	cmp	r3, #24
 800797a:	d011      	beq.n	80079a0 <HAL_ADC_AnalogWDGConfig+0x38c>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	6919      	ldr	r1, [r3, #16]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	08db      	lsrs	r3, r3, #3
 8007988:	f003 0203 	and.w	r2, r3, #3
 800798c:	4613      	mov	r3, r2
 800798e:	07db      	lsls	r3, r3, #31
 8007990:	1a9b      	subs	r3, r3, r2
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	3304      	adds	r3, #4
 8007996:	f003 031f 	and.w	r3, r3, #31
 800799a:	fa21 f303 	lsr.w	r3, r1, r3
 800799e:	e002      	b.n	80079a6 <HAL_ADC_AnalogWDGConfig+0x392>
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f003 0318 	and.w	r3, r3, #24
 80079b2:	2b18      	cmp	r3, #24
 80079b4:	d011      	beq.n	80079da <HAL_ADC_AnalogWDGConfig+0x3c6>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	6959      	ldr	r1, [r3, #20]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	08db      	lsrs	r3, r3, #3
 80079c2:	f003 0203 	and.w	r2, r3, #3
 80079c6:	4613      	mov	r3, r2
 80079c8:	07db      	lsls	r3, r3, #31
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	3304      	adds	r3, #4
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	fa21 f303 	lsr.w	r3, r1, r3
 80079d8:	e002      	b.n	80079e0 <HAL_ADC_AnalogWDGConfig+0x3cc>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	6819      	ldr	r1, [r3, #0]
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079ee:	f7fe fdbe 	bl	800656e <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80079fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3738      	adds	r7, #56	; 0x38
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	7dc00000 	.word	0x7dc00000

08007a0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fe fe3a 	bl	8006692 <LL_ADC_IsEnabled>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d146      	bne.n	8007ab2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	4b24      	ldr	r3, [pc, #144]	; (8007abc <ADC_Enable+0xb0>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00d      	beq.n	8007a4e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a36:	f043 0210 	orr.w	r2, r3, #16
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a42:	f043 0201 	orr.w	r2, r3, #1
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e032      	b.n	8007ab4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fe09 	bl	800666a <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007a58:	f7fe fbf0 	bl	800623c <HAL_GetTick>
 8007a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a5e:	e021      	b.n	8007aa4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fe fe14 	bl	8006692 <LL_ADC_IsEnabled>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d104      	bne.n	8007a7a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe fdf8 	bl	800666a <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007a7a:	f7fe fbdf 	bl	800623c <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d90d      	bls.n	8007aa4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a8c:	f043 0210 	orr.w	r2, r3, #16
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a98:	f043 0201 	orr.w	r2, r3, #1
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e007      	b.n	8007ab4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d1d6      	bne.n	8007a60 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	8000003f 	.word	0x8000003f

08007ac0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d14b      	bne.n	8007b72 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ade:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0308 	and.w	r3, r3, #8
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d021      	beq.n	8007b38 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe fc7d 	bl	80063f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d032      	beq.n	8007b6a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d12b      	bne.n	8007b6a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d11f      	bne.n	8007b6a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b2e:	f043 0201 	orr.w	r2, r3, #1
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b36:	e018      	b.n	8007b6a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d111      	bne.n	8007b6a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d105      	bne.n	8007b6a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b62:	f043 0201 	orr.w	r2, r3, #1
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f7ff f8f6 	bl	8006d5c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007b70:	e00e      	b.n	8007b90 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b76:	f003 0310 	and.w	r3, r3, #16
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7ff f900 	bl	8006d84 <HAL_ADC_ErrorCallback>
}
 8007b84:	e004      	b.n	8007b90 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	4798      	blx	r3
}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f7ff f8e2 	bl	8006d70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007bac:	bf00      	nop
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd2:	f043 0204 	orr.w	r2, r3, #4
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff f8d2 	bl	8006d84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <LL_ADC_IsEnabled>:
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <LL_ADC_IsEnabled+0x18>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <LL_ADC_IsEnabled+0x1a>
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <LL_ADC_REG_IsConversionOngoing>:
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d101      	bne.n	8007c26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e000      	b.n	8007c28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007c34:	b590      	push	{r4, r7, lr}
 8007c36:	b0a1      	sub	sp, #132	; 0x84
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d101      	bne.n	8007c52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e0e3      	b.n	8007e1a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c62:	d102      	bne.n	8007c6a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8007c64:	4b6f      	ldr	r3, [pc, #444]	; (8007e24 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007c66:	60bb      	str	r3, [r7, #8]
 8007c68:	e009      	b.n	8007c7e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a6e      	ldr	r2, [pc, #440]	; (8007e28 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d102      	bne.n	8007c7a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8007c74:	4b6d      	ldr	r3, [pc, #436]	; (8007e2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007c76:	60bb      	str	r3, [r7, #8]
 8007c78:	e001      	b.n	8007c7e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10b      	bne.n	8007c9c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c88:	f043 0220 	orr.w	r2, r3, #32
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e0be      	b.n	8007e1a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff ffb5 	bl	8007c0e <LL_ADC_REG_IsConversionOngoing>
 8007ca4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff ffaf 	bl	8007c0e <LL_ADC_REG_IsConversionOngoing>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f040 80a0 	bne.w	8007df8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f040 809c 	bne.w	8007df8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cc8:	d004      	beq.n	8007cd4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a55      	ldr	r2, [pc, #340]	; (8007e24 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d101      	bne.n	8007cd8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8007cd4:	4b56      	ldr	r3, [pc, #344]	; (8007e30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007cd6:	e000      	b.n	8007cda <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8007cd8:	4b56      	ldr	r3, [pc, #344]	; (8007e34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007cda:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d04b      	beq.n	8007d7c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	6859      	ldr	r1, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007cf6:	035b      	lsls	r3, r3, #13
 8007cf8:	430b      	orrs	r3, r1
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cfe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d08:	d004      	beq.n	8007d14 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a45      	ldr	r2, [pc, #276]	; (8007e24 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d10f      	bne.n	8007d34 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8007d14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007d18:	f7ff ff66 	bl	8007be8 <LL_ADC_IsEnabled>
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	4841      	ldr	r0, [pc, #260]	; (8007e24 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007d20:	f7ff ff62 	bl	8007be8 <LL_ADC_IsEnabled>
 8007d24:	4603      	mov	r3, r0
 8007d26:	4323      	orrs	r3, r4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bf0c      	ite	eq
 8007d2c:	2301      	moveq	r3, #1
 8007d2e:	2300      	movne	r3, #0
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	e012      	b.n	8007d5a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8007d34:	483c      	ldr	r0, [pc, #240]	; (8007e28 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8007d36:	f7ff ff57 	bl	8007be8 <LL_ADC_IsEnabled>
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	483b      	ldr	r0, [pc, #236]	; (8007e2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007d3e:	f7ff ff53 	bl	8007be8 <LL_ADC_IsEnabled>
 8007d42:	4603      	mov	r3, r0
 8007d44:	431c      	orrs	r4, r3
 8007d46:	483c      	ldr	r0, [pc, #240]	; (8007e38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007d48:	f7ff ff4e 	bl	8007be8 <LL_ADC_IsEnabled>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	4323      	orrs	r3, r4
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bf0c      	ite	eq
 8007d54:	2301      	moveq	r3, #1
 8007d56:	2300      	movne	r3, #0
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d056      	beq.n	8007e0c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007d66:	f023 030f 	bic.w	r3, r3, #15
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	6811      	ldr	r1, [r2, #0]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	6892      	ldr	r2, [r2, #8]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	431a      	orrs	r2, r3
 8007d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d78:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007d7a:	e047      	b.n	8007e0c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d90:	d004      	beq.n	8007d9c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a23      	ldr	r2, [pc, #140]	; (8007e24 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d10f      	bne.n	8007dbc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8007d9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007da0:	f7ff ff22 	bl	8007be8 <LL_ADC_IsEnabled>
 8007da4:	4604      	mov	r4, r0
 8007da6:	481f      	ldr	r0, [pc, #124]	; (8007e24 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007da8:	f7ff ff1e 	bl	8007be8 <LL_ADC_IsEnabled>
 8007dac:	4603      	mov	r3, r0
 8007dae:	4323      	orrs	r3, r4
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bf0c      	ite	eq
 8007db4:	2301      	moveq	r3, #1
 8007db6:	2300      	movne	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	e012      	b.n	8007de2 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8007dbc:	481a      	ldr	r0, [pc, #104]	; (8007e28 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8007dbe:	f7ff ff13 	bl	8007be8 <LL_ADC_IsEnabled>
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	4819      	ldr	r0, [pc, #100]	; (8007e2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007dc6:	f7ff ff0f 	bl	8007be8 <LL_ADC_IsEnabled>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	431c      	orrs	r4, r3
 8007dce:	481a      	ldr	r0, [pc, #104]	; (8007e38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007dd0:	f7ff ff0a 	bl	8007be8 <LL_ADC_IsEnabled>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	4323      	orrs	r3, r4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	bf0c      	ite	eq
 8007ddc:	2301      	moveq	r3, #1
 8007dde:	2300      	movne	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d012      	beq.n	8007e0c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007dee:	f023 030f 	bic.w	r3, r3, #15
 8007df2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007df4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007df6:	e009      	b.n	8007e0c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfc:	f043 0220 	orr.w	r2, r3, #32
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007e0a:	e000      	b.n	8007e0e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007e0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007e16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3784      	adds	r7, #132	; 0x84
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd90      	pop	{r4, r7, pc}
 8007e22:	bf00      	nop
 8007e24:	50000100 	.word	0x50000100
 8007e28:	50000400 	.word	0x50000400
 8007e2c:	50000500 	.word	0x50000500
 8007e30:	50000300 	.word	0x50000300
 8007e34:	50000700 	.word	0x50000700
 8007e38:	50000600 	.word	0x50000600

08007e3c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e023      	b.n	8007e96 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d106      	bne.n	8007e68 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7fc fb00 	bl	8004468 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007eb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ed2:	4a04      	ldr	r2, [pc, #16]	; (8007ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	60d3      	str	r3, [r2, #12]
}
 8007ed8:	bf00      	nop
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	e000ed00 	.word	0xe000ed00

08007ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007eec:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <__NVIC_GetPriorityGrouping+0x18>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	0a1b      	lsrs	r3, r3, #8
 8007ef2:	f003 0307 	and.w	r3, r3, #7
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	e000ed00 	.word	0xe000ed00

08007f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	db0b      	blt.n	8007f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	f003 021f 	and.w	r2, r3, #31
 8007f1c:	4907      	ldr	r1, [pc, #28]	; (8007f3c <__NVIC_EnableIRQ+0x38>)
 8007f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	2001      	movs	r0, #1
 8007f26:	fa00 f202 	lsl.w	r2, r0, r2
 8007f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	e000e100 	.word	0xe000e100

08007f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	db0a      	blt.n	8007f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	490c      	ldr	r1, [pc, #48]	; (8007f8c <__NVIC_SetPriority+0x4c>)
 8007f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f5e:	0112      	lsls	r2, r2, #4
 8007f60:	b2d2      	uxtb	r2, r2
 8007f62:	440b      	add	r3, r1
 8007f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f68:	e00a      	b.n	8007f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	4908      	ldr	r1, [pc, #32]	; (8007f90 <__NVIC_SetPriority+0x50>)
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	f003 030f 	and.w	r3, r3, #15
 8007f76:	3b04      	subs	r3, #4
 8007f78:	0112      	lsls	r2, r2, #4
 8007f7a:	b2d2      	uxtb	r2, r2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	761a      	strb	r2, [r3, #24]
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	e000e100 	.word	0xe000e100
 8007f90:	e000ed00 	.word	0xe000ed00

08007f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b089      	sub	sp, #36	; 0x24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f1c3 0307 	rsb	r3, r3, #7
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	bf28      	it	cs
 8007fb2:	2304      	movcs	r3, #4
 8007fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	2b06      	cmp	r3, #6
 8007fbc:	d902      	bls.n	8007fc4 <NVIC_EncodePriority+0x30>
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	3b03      	subs	r3, #3
 8007fc2:	e000      	b.n	8007fc6 <NVIC_EncodePriority+0x32>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	43da      	mvns	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	401a      	ands	r2, r3
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe6:	43d9      	mvns	r1, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fec:	4313      	orrs	r3, r2
         );
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3724      	adds	r7, #36	; 0x24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3b01      	subs	r3, #1
 8008008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800800c:	d301      	bcc.n	8008012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800800e:	2301      	movs	r3, #1
 8008010:	e00f      	b.n	8008032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008012:	4a0a      	ldr	r2, [pc, #40]	; (800803c <SysTick_Config+0x40>)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3b01      	subs	r3, #1
 8008018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800801a:	210f      	movs	r1, #15
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	f7ff ff8e 	bl	8007f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008024:	4b05      	ldr	r3, [pc, #20]	; (800803c <SysTick_Config+0x40>)
 8008026:	2200      	movs	r2, #0
 8008028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800802a:	4b04      	ldr	r3, [pc, #16]	; (800803c <SysTick_Config+0x40>)
 800802c:	2207      	movs	r2, #7
 800802e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	e000e010 	.word	0xe000e010

08008040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff ff29 	bl	8007ea0 <__NVIC_SetPriorityGrouping>
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af00      	add	r7, sp, #0
 800805c:	4603      	mov	r3, r0
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008064:	f7ff ff40 	bl	8007ee8 <__NVIC_GetPriorityGrouping>
 8008068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	68b9      	ldr	r1, [r7, #8]
 800806e:	6978      	ldr	r0, [r7, #20]
 8008070:	f7ff ff90 	bl	8007f94 <NVIC_EncodePriority>
 8008074:	4602      	mov	r2, r0
 8008076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800807a:	4611      	mov	r1, r2
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff ff5f 	bl	8007f40 <__NVIC_SetPriority>
}
 8008082:	bf00      	nop
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	4603      	mov	r3, r0
 8008092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008098:	4618      	mov	r0, r3
 800809a:	f7ff ff33 	bl	8007f04 <__NVIC_EnableIRQ>
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff ffa4 	bl	8007ffc <SysTick_Config>
 80080b4:	4603      	mov	r3, r0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e08d      	b.n	80081ee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	4b47      	ldr	r3, [pc, #284]	; (80081f8 <HAL_DMA_Init+0x138>)
 80080da:	429a      	cmp	r2, r3
 80080dc:	d80f      	bhi.n	80080fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	4b45      	ldr	r3, [pc, #276]	; (80081fc <HAL_DMA_Init+0x13c>)
 80080e6:	4413      	add	r3, r2
 80080e8:	4a45      	ldr	r2, [pc, #276]	; (8008200 <HAL_DMA_Init+0x140>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	091b      	lsrs	r3, r3, #4
 80080f0:	009a      	lsls	r2, r3, #2
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a42      	ldr	r2, [pc, #264]	; (8008204 <HAL_DMA_Init+0x144>)
 80080fa:	641a      	str	r2, [r3, #64]	; 0x40
 80080fc:	e00e      	b.n	800811c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	4b40      	ldr	r3, [pc, #256]	; (8008208 <HAL_DMA_Init+0x148>)
 8008106:	4413      	add	r3, r2
 8008108:	4a3d      	ldr	r2, [pc, #244]	; (8008200 <HAL_DMA_Init+0x140>)
 800810a:	fba2 2303 	umull	r2, r3, r2, r3
 800810e:	091b      	lsrs	r3, r3, #4
 8008110:	009a      	lsls	r2, r3, #2
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a3c      	ldr	r2, [pc, #240]	; (800820c <HAL_DMA_Init+0x14c>)
 800811a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008136:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800814c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	4313      	orrs	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f9b6 	bl	80084e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800817c:	d102      	bne.n	8008184 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800818c:	b2d2      	uxtb	r2, r2
 800818e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008198:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d010      	beq.n	80081c4 <HAL_DMA_Init+0x104>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d80c      	bhi.n	80081c4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f9d6 	bl	800855c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80081c0:	605a      	str	r2, [r3, #4]
 80081c2:	e008      	b.n	80081d6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	40020407 	.word	0x40020407
 80081fc:	bffdfff8 	.word	0xbffdfff8
 8008200:	cccccccd 	.word	0xcccccccd
 8008204:	40020000 	.word	0x40020000
 8008208:	bffdfbf8 	.word	0xbffdfbf8
 800820c:	40020400 	.word	0x40020400

08008210 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_DMA_Start_IT+0x20>
 800822c:	2302      	movs	r3, #2
 800822e:	e066      	b.n	80082fe <HAL_DMA_Start_IT+0xee>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b01      	cmp	r3, #1
 8008242:	d155      	bne.n	80082f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0201 	bic.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 f8fb 	bl	8008464 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008272:	2b00      	cmp	r3, #0
 8008274:	d008      	beq.n	8008288 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 020e 	orr.w	r2, r2, #14
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	e00f      	b.n	80082a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0204 	bic.w	r2, r2, #4
 8008296:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 020a 	orr.w	r2, r2, #10
 80082a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d007      	beq.n	80082c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0201 	orr.w	r2, r2, #1
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	e005      	b.n	80082fc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80082f8:	2302      	movs	r3, #2
 80082fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008322:	f003 031f 	and.w	r3, r3, #31
 8008326:	2204      	movs	r2, #4
 8008328:	409a      	lsls	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	4013      	ands	r3, r2
 800832e:	2b00      	cmp	r3, #0
 8008330:	d026      	beq.n	8008380 <HAL_DMA_IRQHandler+0x7a>
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f003 0304 	and.w	r3, r3, #4
 8008338:	2b00      	cmp	r3, #0
 800833a:	d021      	beq.n	8008380 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0320 	and.w	r3, r3, #32
 8008346:	2b00      	cmp	r3, #0
 8008348:	d107      	bne.n	800835a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0204 	bic.w	r2, r2, #4
 8008358:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835e:	f003 021f 	and.w	r2, r3, #31
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	2104      	movs	r1, #4
 8008368:	fa01 f202 	lsl.w	r2, r1, r2
 800836c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008372:	2b00      	cmp	r3, #0
 8008374:	d071      	beq.n	800845a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800837e:	e06c      	b.n	800845a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008384:	f003 031f 	and.w	r3, r3, #31
 8008388:	2202      	movs	r2, #2
 800838a:	409a      	lsls	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4013      	ands	r3, r2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d02e      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d029      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0320 	and.w	r3, r3, #32
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10b      	bne.n	80083c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 020a 	bic.w	r2, r2, #10
 80083ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c8:	f003 021f 	and.w	r2, r3, #31
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	2102      	movs	r1, #2
 80083d2:	fa01 f202 	lsl.w	r2, r1, r2
 80083d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d038      	beq.n	800845a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80083f0:	e033      	b.n	800845a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f6:	f003 031f 	and.w	r3, r3, #31
 80083fa:	2208      	movs	r2, #8
 80083fc:	409a      	lsls	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4013      	ands	r3, r2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d02a      	beq.n	800845c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f003 0308 	and.w	r3, r3, #8
 800840c:	2b00      	cmp	r3, #0
 800840e:	d025      	beq.n	800845c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f022 020e 	bic.w	r2, r2, #14
 800841e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008424:	f003 021f 	and.w	r2, r3, #31
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842c:	2101      	movs	r1, #1
 800842e:	fa01 f202 	lsl.w	r2, r1, r2
 8008432:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844e:	2b00      	cmp	r3, #0
 8008450:	d004      	beq.n	800845c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800845a:	bf00      	nop
 800845c:	bf00      	nop
}
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800847a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800848c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008492:	f003 021f 	and.w	r2, r3, #31
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	2101      	movs	r1, #1
 800849c:	fa01 f202 	lsl.w	r2, r1, r2
 80084a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	2b10      	cmp	r3, #16
 80084b0:	d108      	bne.n	80084c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80084c2:	e007      	b.n	80084d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	60da      	str	r2, [r3, #12]
}
 80084d4:	bf00      	nop
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	4b16      	ldr	r3, [pc, #88]	; (8008548 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d802      	bhi.n	80084fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80084f4:	4b15      	ldr	r3, [pc, #84]	; (800854c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80084f6:	617b      	str	r3, [r7, #20]
 80084f8:	e001      	b.n	80084fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80084fa:	4b15      	ldr	r3, [pc, #84]	; (8008550 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80084fc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	b2db      	uxtb	r3, r3
 8008508:	3b08      	subs	r3, #8
 800850a:	4a12      	ldr	r2, [pc, #72]	; (8008554 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800850c:	fba2 2303 	umull	r2, r3, r2, r3
 8008510:	091b      	lsrs	r3, r3, #4
 8008512:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008518:	089b      	lsrs	r3, r3, #2
 800851a:	009a      	lsls	r2, r3, #2
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	4413      	add	r3, r2
 8008520:	461a      	mov	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a0b      	ldr	r2, [pc, #44]	; (8008558 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800852a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f003 031f 	and.w	r3, r3, #31
 8008532:	2201      	movs	r2, #1
 8008534:	409a      	lsls	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	651a      	str	r2, [r3, #80]	; 0x50
}
 800853a:	bf00      	nop
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	40020407 	.word	0x40020407
 800854c:	40020800 	.word	0x40020800
 8008550:	40020820 	.word	0x40020820
 8008554:	cccccccd 	.word	0xcccccccd
 8008558:	40020880 	.word	0x40020880

0800855c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	b2db      	uxtb	r3, r3
 800856a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	4b0b      	ldr	r3, [pc, #44]	; (800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	461a      	mov	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a08      	ldr	r2, [pc, #32]	; (80085a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800857e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3b01      	subs	r3, #1
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	2201      	movs	r2, #1
 800858a:	409a      	lsls	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008590:	bf00      	nop
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	1000823f 	.word	0x1000823f
 80085a0:	40020940 	.word	0x40020940

080085a4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d12b      	bne.n	8008612 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_DMAEx_ConfigMuxSync+0x24>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e025      	b.n	8008614 <HAL_DMAEx_ConfigMuxSync+0x70>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	b2d9      	uxtb	r1, r3
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	061a      	lsls	r2, r3, #24
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	04db      	lsls	r3, r3, #19
 80085e6:	431a      	orrs	r2, r3
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	431a      	orrs	r2, r3
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	7a1b      	ldrb	r3, [r3, #8]
 80085f2:	041b      	lsls	r3, r3, #16
 80085f4:	431a      	orrs	r2, r3
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	7a5b      	ldrb	r3, [r3, #9]
 80085fa:	025b      	lsls	r3, r3, #9
 80085fc:	431a      	orrs	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008602:	430a      	orrs	r2, r1
 8008604:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	e000      	b.n	8008614 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
  }
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008632:	4013      	ands	r3, r2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01a      	beq.n	800866e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008646:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008650:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008656:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008672:	2b00      	cmp	r3, #0
 8008674:	d022      	beq.n	80086bc <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008680:	4013      	ands	r3, r2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01a      	beq.n	80086bc <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008694:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800869e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d003      	beq.n	80086bc <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	4798      	blx	r3
      }
    }
  }
}
 80086bc:	bf00      	nop
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e033      	b.n	800873e <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7fb ff3a 	bl	8004564 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f854 	bl	80087a4 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_TIMEOUT)
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f822 	bl	8008746 <FMAC_Reset>
 8008702:	4603      	mov	r3, r0
 8008704:	2b03      	cmp	r3, #3
 8008706:	d10c      	bne.n	8008722 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870c:	f043 0210 	orr.w	r2, r3, #16
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	22a0      	movs	r2, #160	; 0xa0
 8008718:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	73fb      	strb	r3, [r7, #15]
 8008720:	e008      	b.n	8008734 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2220      	movs	r2, #32
 800872c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800873c:	7bfb      	ldrb	r3, [r7, #15]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800874e:	f7fd fd75 	bl	800623c <HAL_GetTick>
 8008752:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	691a      	ldr	r2, [r3, #16]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008762:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8008764:	e00f      	b.n	8008786 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8008766:	f7fd fd69 	bl	800623c <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008774:	d907      	bls.n	8008786 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e00a      	b.n	800879c <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e8      	bne.n	8008766 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f807 	bl	80087c0 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f81b 	bl	80087ee <FMAC_ResetOutputStateAndDataPointers>
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2220      	movs	r2, #32
 80087de:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800882a:	e15a      	b.n	8008ae2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	2101      	movs	r1, #1
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	fa01 f303 	lsl.w	r3, r1, r3
 8008838:	4013      	ands	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 814c 	beq.w	8008adc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d00b      	beq.n	8008864 <HAL_GPIO_Init+0x48>
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	2b02      	cmp	r3, #2
 8008852:	d007      	beq.n	8008864 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008858:	2b11      	cmp	r3, #17
 800885a:	d003      	beq.n	8008864 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	2b12      	cmp	r3, #18
 8008862:	d130      	bne.n	80088c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	2203      	movs	r2, #3
 8008870:	fa02 f303 	lsl.w	r3, r2, r3
 8008874:	43db      	mvns	r3, r3
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	4013      	ands	r3, r2
 800887a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	fa02 f303 	lsl.w	r3, r2, r3
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4313      	orrs	r3, r2
 800888c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800889a:	2201      	movs	r2, #1
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	fa02 f303 	lsl.w	r3, r2, r3
 80088a2:	43db      	mvns	r3, r3
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4013      	ands	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	091b      	lsrs	r3, r3, #4
 80088b0:	f003 0201 	and.w	r2, r3, #1
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	4313      	orrs	r3, r2
 80088be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	2203      	movs	r2, #3
 80088d2:	fa02 f303 	lsl.w	r3, r2, r3
 80088d6:	43db      	mvns	r3, r3
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4013      	ands	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	689a      	ldr	r2, [r3, #8]
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d003      	beq.n	8008906 <HAL_GPIO_Init+0xea>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2b12      	cmp	r3, #18
 8008904:	d123      	bne.n	800894e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	08da      	lsrs	r2, r3, #3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3208      	adds	r2, #8
 800890e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f003 0307 	and.w	r3, r3, #7
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	220f      	movs	r2, #15
 800891e:	fa02 f303 	lsl.w	r3, r2, r3
 8008922:	43db      	mvns	r3, r3
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	4013      	ands	r3, r2
 8008928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	691a      	ldr	r2, [r3, #16]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	fa02 f303 	lsl.w	r3, r2, r3
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	4313      	orrs	r3, r2
 800893e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	08da      	lsrs	r2, r3, #3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3208      	adds	r2, #8
 8008948:	6939      	ldr	r1, [r7, #16]
 800894a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	2203      	movs	r2, #3
 800895a:	fa02 f303 	lsl.w	r3, r2, r3
 800895e:	43db      	mvns	r3, r3
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	4013      	ands	r3, r2
 8008964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f003 0203 	and.w	r2, r3, #3
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	fa02 f303 	lsl.w	r3, r2, r3
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	4313      	orrs	r3, r2
 800897a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 80a6 	beq.w	8008adc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008990:	4b5b      	ldr	r3, [pc, #364]	; (8008b00 <HAL_GPIO_Init+0x2e4>)
 8008992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008994:	4a5a      	ldr	r2, [pc, #360]	; (8008b00 <HAL_GPIO_Init+0x2e4>)
 8008996:	f043 0301 	orr.w	r3, r3, #1
 800899a:	6613      	str	r3, [r2, #96]	; 0x60
 800899c:	4b58      	ldr	r3, [pc, #352]	; (8008b00 <HAL_GPIO_Init+0x2e4>)
 800899e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	60bb      	str	r3, [r7, #8]
 80089a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089a8:	4a56      	ldr	r2, [pc, #344]	; (8008b04 <HAL_GPIO_Init+0x2e8>)
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	089b      	lsrs	r3, r3, #2
 80089ae:	3302      	adds	r3, #2
 80089b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f003 0303 	and.w	r3, r3, #3
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	220f      	movs	r2, #15
 80089c0:	fa02 f303 	lsl.w	r3, r2, r3
 80089c4:	43db      	mvns	r3, r3
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	4013      	ands	r3, r2
 80089ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80089d2:	d01f      	beq.n	8008a14 <HAL_GPIO_Init+0x1f8>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a4c      	ldr	r2, [pc, #304]	; (8008b08 <HAL_GPIO_Init+0x2ec>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d019      	beq.n	8008a10 <HAL_GPIO_Init+0x1f4>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a4b      	ldr	r2, [pc, #300]	; (8008b0c <HAL_GPIO_Init+0x2f0>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d013      	beq.n	8008a0c <HAL_GPIO_Init+0x1f0>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a4a      	ldr	r2, [pc, #296]	; (8008b10 <HAL_GPIO_Init+0x2f4>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00d      	beq.n	8008a08 <HAL_GPIO_Init+0x1ec>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a49      	ldr	r2, [pc, #292]	; (8008b14 <HAL_GPIO_Init+0x2f8>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d007      	beq.n	8008a04 <HAL_GPIO_Init+0x1e8>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a48      	ldr	r2, [pc, #288]	; (8008b18 <HAL_GPIO_Init+0x2fc>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d101      	bne.n	8008a00 <HAL_GPIO_Init+0x1e4>
 80089fc:	2305      	movs	r3, #5
 80089fe:	e00a      	b.n	8008a16 <HAL_GPIO_Init+0x1fa>
 8008a00:	2306      	movs	r3, #6
 8008a02:	e008      	b.n	8008a16 <HAL_GPIO_Init+0x1fa>
 8008a04:	2304      	movs	r3, #4
 8008a06:	e006      	b.n	8008a16 <HAL_GPIO_Init+0x1fa>
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e004      	b.n	8008a16 <HAL_GPIO_Init+0x1fa>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e002      	b.n	8008a16 <HAL_GPIO_Init+0x1fa>
 8008a10:	2301      	movs	r3, #1
 8008a12:	e000      	b.n	8008a16 <HAL_GPIO_Init+0x1fa>
 8008a14:	2300      	movs	r3, #0
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	f002 0203 	and.w	r2, r2, #3
 8008a1c:	0092      	lsls	r2, r2, #2
 8008a1e:	4093      	lsls	r3, r2
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a26:	4937      	ldr	r1, [pc, #220]	; (8008b04 <HAL_GPIO_Init+0x2e8>)
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	089b      	lsrs	r3, r3, #2
 8008a2c:	3302      	adds	r3, #2
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008a34:	4b39      	ldr	r3, [pc, #228]	; (8008b1c <HAL_GPIO_Init+0x300>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	4013      	ands	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008a58:	4a30      	ldr	r2, [pc, #192]	; (8008b1c <HAL_GPIO_Init+0x300>)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008a5e:	4b2f      	ldr	r3, [pc, #188]	; (8008b1c <HAL_GPIO_Init+0x300>)
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	43db      	mvns	r3, r3
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008a82:	4a26      	ldr	r2, [pc, #152]	; (8008b1c <HAL_GPIO_Init+0x300>)
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008a88:	4b24      	ldr	r3, [pc, #144]	; (8008b1c <HAL_GPIO_Init+0x300>)
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	43db      	mvns	r3, r3
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	4013      	ands	r3, r2
 8008a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008aac:	4a1b      	ldr	r2, [pc, #108]	; (8008b1c <HAL_GPIO_Init+0x300>)
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008ab2:	4b1a      	ldr	r3, [pc, #104]	; (8008b1c <HAL_GPIO_Init+0x300>)
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	43db      	mvns	r3, r3
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	4013      	ands	r3, r2
 8008ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008ad6:	4a11      	ldr	r2, [pc, #68]	; (8008b1c <HAL_GPIO_Init+0x300>)
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f47f ae9d 	bne.w	800882c <HAL_GPIO_Init+0x10>
  }
}
 8008af2:	bf00      	nop
 8008af4:	371c      	adds	r7, #28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	40021000 	.word	0x40021000
 8008b04:	40010000 	.word	0x40010000
 8008b08:	48000400 	.word	0x48000400
 8008b0c:	48000800 	.word	0x48000800
 8008b10:	48000c00 	.word	0x48000c00
 8008b14:	48001000 	.word	0x48001000
 8008b18:	48001400 	.word	0x48001400
 8008b1c:	40010400 	.word	0x40010400

08008b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	807b      	strh	r3, [r7, #2]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b30:	787b      	ldrb	r3, [r7, #1]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008b36:	887a      	ldrh	r2, [r7, #2]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008b3c:	e002      	b.n	8008b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008b3e:	887a      	ldrh	r2, [r7, #2]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e0be      	b.n	8008ce0 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2202      	movs	r2, #2
 8008b66:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d02e      	beq.n	8008c0c <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a4d      	ldr	r2, [pc, #308]	; (8008ce8 <HAL_HRTIM_Init+0x198>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d10b      	bne.n	8008bd0 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8008bb8:	4b4c      	ldr	r3, [pc, #304]	; (8008cec <HAL_HRTIM_Init+0x19c>)
 8008bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bbc:	4a4b      	ldr	r2, [pc, #300]	; (8008cec <HAL_HRTIM_Init+0x19c>)
 8008bbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bc2:	6613      	str	r3, [r2, #96]	; 0x60
 8008bc4:	4b49      	ldr	r3, [pc, #292]	; (8008cec <HAL_HRTIM_Init+0x19c>)
 8008bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bcc:	60fb      	str	r3, [r7, #12]
 8008bce:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008bde:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008bf4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7fb ff2b 	bl	8004a68 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d012      	beq.n	8008c44 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c2c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008c54:	2300      	movs	r3, #0
 8008c56:	75fb      	strb	r3, [r7, #23]
 8008c58:	e03e      	b.n	8008cd8 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8008c5a:	7dfa      	ldrb	r2, [r7, #23]
 8008c5c:	6879      	ldr	r1, [r7, #4]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	1a9b      	subs	r3, r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	440b      	add	r3, r1
 8008c68:	3318      	adds	r3, #24
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8008c6e:	7dfa      	ldrb	r2, [r7, #23]
 8008c70:	6879      	ldr	r1, [r7, #4]
 8008c72:	4613      	mov	r3, r2
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	1a9b      	subs	r3, r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	440b      	add	r3, r1
 8008c7c:	331c      	adds	r3, #28
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8008c82:	7dfa      	ldrb	r2, [r7, #23]
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	4613      	mov	r3, r2
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	440b      	add	r3, r1
 8008c90:	3320      	adds	r3, #32
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8008c96:	7dfa      	ldrb	r2, [r7, #23]
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	1a9b      	subs	r3, r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	3324      	adds	r3, #36	; 0x24
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8008caa:	7dfa      	ldrb	r2, [r7, #23]
 8008cac:	6879      	ldr	r1, [r7, #4]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	1a9b      	subs	r3, r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3328      	adds	r3, #40	; 0x28
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8008cbe:	7dfa      	ldrb	r2, [r7, #23]
 8008cc0:	6879      	ldr	r1, [r7, #4]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	1a9b      	subs	r3, r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	440b      	add	r3, r1
 8008ccc:	3330      	adds	r3, #48	; 0x30
 8008cce:	2200      	movs	r2, #0
 8008cd0:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	2b06      	cmp	r3, #6
 8008cdc:	d9bd      	bls.n	8008c5a <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	40016800 	.word	0x40016800
 8008cec:	40021000 	.word	0x40021000

08008cf0 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d101      	bne.n	8008d08 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8008d04:	2302      	movs	r3, #2
 8008d06:	e045      	b.n	8008d94 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1e:	d114      	bne.n	8008d4a <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0202 	bic.w	r2, r2, #2
 8008d30:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f042 0201 	orr.w	r2, r2, #1
 8008d44:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8008d48:	e01f      	b.n	8008d8a <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 0202 	orr.w	r2, r2, #2
 8008d5a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008d66:	f023 010c 	bic.w	r1, r3, #12
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0201 	orr.w	r2, r2, #1
 8008d86:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8008daa:	f7fd fa47 	bl	800623c <HAL_GetTick>
 8008dae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8008db0:	e014      	b.n	8008ddc <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db8:	d010      	beq.n	8008ddc <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8008dba:	f7fd fa3f 	bl	800623c <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d302      	bcc.n	8008dd0 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d105      	bne.n	8008ddc <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2207      	movs	r2, #7
 8008dd4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e011      	b.n	8008e00 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dec:	d1e1      	bne.n	8008db2 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d101      	bne.n	8008e24 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8008e20:	2302      	movs	r3, #2
 8008e22:	e015      	b.n	8008e50 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b06      	cmp	r3, #6
 8008e30:	d104      	bne.n	8008e3c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f001 f97a 	bl	800a12e <HRTIM_MasterBase_Config>
 8008e3a:	e004      	b.n	8008e46 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f001 f9a3 	bl	800a18c <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_HRTIM_FaultConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Fault,
                                        HRTIM_FaultCfgTypeDef* pFaultCfg)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b089      	sub	sp, #36	; 0x24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_FAULTSOURCE(pFaultCfg->Source));
  assert_param(IS_HRTIM_FAULTPOLARITY(pFaultCfg->Polarity));
  assert_param(IS_HRTIM_FAULTFILTER(pFaultCfg->Filter));
  assert_param(IS_HRTIM_FAULTLOCK(pFaultCfg->Lock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d101      	bne.n	8008e74 <HAL_HRTIM_FaultConfig+0x1c>
  {
     return HAL_BUSY;
 8008e70:	2302      	movs	r3, #2
 8008e72:	e1aa      	b.n	80091ca <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d101      	bne.n	8008e82 <HAL_HRTIM_FaultConfig+0x2a>
 8008e7e:	2302      	movs	r3, #2
 8008e80:	e1a3      	b.n	80091ca <HAL_HRTIM_FaultConfig+0x372>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure fault channel */
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e9a:	61fb      	str	r3, [r7, #28]
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ea4:	61bb      	str	r3, [r7, #24]

  source0 =  (pFaultCfg->Source & 1U);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	617b      	str	r3, [r7, #20]
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	085b      	lsrs	r3, r3, #1
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	613b      	str	r3, [r7, #16]

  switch (Fault)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	2b1f      	cmp	r3, #31
 8008ec2:	f200 813f 	bhi.w	8009144 <HAL_HRTIM_FaultConfig+0x2ec>
 8008ec6:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <HAL_HRTIM_FaultConfig+0x74>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008f4d 	.word	0x08008f4d
 8008ed0:	08008f9d 	.word	0x08008f9d
 8008ed4:	08009145 	.word	0x08009145
 8008ed8:	08008ff3 	.word	0x08008ff3
 8008edc:	08009145 	.word	0x08009145
 8008ee0:	08009145 	.word	0x08009145
 8008ee4:	08009145 	.word	0x08009145
 8008ee8:	08009049 	.word	0x08009049
 8008eec:	08009145 	.word	0x08009145
 8008ef0:	08009145 	.word	0x08009145
 8008ef4:	08009145 	.word	0x08009145
 8008ef8:	08009145 	.word	0x08009145
 8008efc:	08009145 	.word	0x08009145
 8008f00:	08009145 	.word	0x08009145
 8008f04:	08009145 	.word	0x08009145
 8008f08:	0800909f 	.word	0x0800909f
 8008f0c:	08009145 	.word	0x08009145
 8008f10:	08009145 	.word	0x08009145
 8008f14:	08009145 	.word	0x08009145
 8008f18:	08009145 	.word	0x08009145
 8008f1c:	08009145 	.word	0x08009145
 8008f20:	08009145 	.word	0x08009145
 8008f24:	08009145 	.word	0x08009145
 8008f28:	08009145 	.word	0x08009145
 8008f2c:	08009145 	.word	0x08009145
 8008f30:	08009145 	.word	0x08009145
 8008f34:	08009145 	.word	0x08009145
 8008f38:	08009145 	.word	0x08009145
 8008f3c:	08009145 	.word	0x08009145
 8008f40:	08009145 	.word	0x08009145
 8008f44:	08009145 	.word	0x08009145
 8008f48:	080090ef 	.word	0x080090ef
  {
  case HRTIM_FAULT_1:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8008f52:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	69fa      	ldr	r2, [r7, #28]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT1SRC_0_Pos);
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT1SRC_1);
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f72:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	041b      	lsls	r3, r3, #16
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008f86:	69fa      	ldr	r2, [r7, #28]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f94:	69fa      	ldr	r2, [r7, #28]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	61fb      	str	r3, [r7, #28]
      break;
 8008f9a:	e0dc      	b.n	8009156 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_2:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8008fa2:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	021b      	lsls	r3, r3, #8
 8008faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fae:	69fa      	ldr	r2, [r7, #28]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT2SRC_0_Pos);
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	029b      	lsls	r3, r3, #10
 8008fb8:	69fa      	ldr	r2, [r7, #28]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT2SRC_1);
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008fc4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	045b      	lsls	r3, r3, #17
 8008fca:	69ba      	ldr	r2, [r7, #24]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	021b      	lsls	r3, r3, #8
 8008fd6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8008fda:	69fa      	ldr	r2, [r7, #28]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	021b      	lsls	r3, r3, #8
 8008fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fea:	69fa      	ldr	r2, [r7, #28]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	61fb      	str	r3, [r7, #28]
      break;
 8008ff0:	e0b1      	b.n	8009156 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_3:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
 8008ff8:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	041b      	lsls	r3, r3, #16
 8009000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009004:	69fa      	ldr	r2, [r7, #28]
 8009006:	4313      	orrs	r3, r2
 8009008:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT3SRC_0_Pos);
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	049b      	lsls	r3, r3, #18
 800900e:	69fa      	ldr	r2, [r7, #28]
 8009010:	4313      	orrs	r3, r2
 8009012:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT3SRC_1);
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800901a:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	049b      	lsls	r3, r3, #18
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	4313      	orrs	r3, r2
 8009024:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	041b      	lsls	r3, r3, #16
 800902c:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8009030:	69fa      	ldr	r2, [r7, #28]
 8009032:	4313      	orrs	r3, r2
 8009034:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	041b      	lsls	r3, r3, #16
 800903c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009040:	69fa      	ldr	r2, [r7, #28]
 8009042:	4313      	orrs	r3, r2
 8009044:	61fb      	str	r3, [r7, #28]
      break;
 8009046:	e086      	b.n	8009156 <HAL_HRTIM_FaultConfig+0x2fe>
     }

  case HRTIM_FAULT_4:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800904e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	061b      	lsls	r3, r3, #24
 8009056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800905a:	69fa      	ldr	r2, [r7, #28]
 800905c:	4313      	orrs	r3, r2
 800905e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT4SRC_0_Pos);
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	069b      	lsls	r3, r3, #26
 8009064:	69fa      	ldr	r2, [r7, #28]
 8009066:	4313      	orrs	r3, r2
 8009068:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT4SRC_1);
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009070:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	04db      	lsls	r3, r3, #19
 8009076:	69ba      	ldr	r2, [r7, #24]
 8009078:	4313      	orrs	r3, r2
 800907a:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	061b      	lsls	r3, r3, #24
 8009082:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	4313      	orrs	r3, r2
 800908a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	061b      	lsls	r3, r3, #24
 8009092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	4313      	orrs	r3, r2
 800909a:	61fb      	str	r3, [r7, #28]
      break;
 800909c:	e05b      	b.n	8009156 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_5:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC_0 | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80090a4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	69ba      	ldr	r2, [r7, #24]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80090c4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT5SRC_1_Pos);
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	051b      	lsls	r3, r3, #20
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	4313      	orrs	r3, r2
 80090dc:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	61bb      	str	r3, [r7, #24]
      break;
 80090ec:	e033      	b.n	8009156 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_6:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6P | HRTIM_FLTINR2_FLT6SRC_0 | HRTIM_FLTINR2_FLT6F | HRTIM_FLTINR2_FLT6LCK);
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 80090f4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	021b      	lsls	r3, r3, #8
 80090fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	4313      	orrs	r3, r2
 8009104:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	029b      	lsls	r3, r3, #10
 800910a:	69ba      	ldr	r2, [r7, #24]
 800910c:	4313      	orrs	r3, r2
 800910e:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009116:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT6SRC_1_Pos);
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	055b      	lsls	r3, r3, #21
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	4313      	orrs	r3, r2
 8009120:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	021b      	lsls	r3, r3, #8
 8009128:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	4313      	orrs	r3, r2
 8009130:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	021b      	lsls	r3, r3, #8
 8009138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	4313      	orrs	r3, r2
 8009140:	61bb      	str	r3, [r7, #24]
      break;
 8009142:	e008      	b.n	8009156 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2207      	movs	r2, #7
 8009148:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8009154:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b07      	cmp	r3, #7
 8009160:	d101      	bne.n	8009166 <HAL_HRTIM_FaultConfig+0x30e>
  {
     return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e031      	b.n	80091ca <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Update the HRTIM registers except LOCK bit */
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	69fa      	ldr	r2, [r7, #28]
 800916c:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8009170:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800917e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009182:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  /* Update the HRTIM registers LOCK bit */
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	f248 0380 	movw	r3, #32896	; 0x8080
 80091ac:	4013      	ands	r3, r2
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	6812      	ldr	r2, [r2, #0]
 80091b2:	430b      	orrs	r3, r1
 80091b4:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3724      	adds	r7, #36	; 0x24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop

080091d8 <HAL_HRTIM_FaultPrescalerConfig>:
  * @note This function must be called before starting the timer and before
  *       enabling faults inputs
  */
HAL_StatusTypeDef HAL_HRTIM_FaultPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d101      	bne.n	80091f2 <HAL_HRTIM_FaultPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 80091ee:	2302      	movs	r3, #2
 80091f0:	e025      	b.n	800923e <HAL_HRTIM_FaultPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d101      	bne.n	8009200 <HAL_HRTIM_FaultPrescalerConfig+0x28>
 80091fc:	2302      	movs	r3, #2
 80091fe:	e01e      	b.n	800923e <HAL_HRTIM_FaultPrescalerConfig+0x66>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2202      	movs	r2, #2
 800920c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009218:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
	...

0800924c <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultBlankingConfigAndEnable(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t Fault,
                                                HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTBLANKNGMODE(pFaultBlkCfg->BlankingSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b02      	cmp	r3, #2
 8009262:	d101      	bne.n	8009268 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1c>
  {
     return HAL_BUSY;
 8009264:	2302      	movs	r3, #2
 8009266:	e0d7      	b.n	8009418 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800926e:	2b01      	cmp	r3, #1
 8009270:	d101      	bne.n	8009276 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x2a>
 8009272:	2302      	movs	r3, #2
 8009274:	e0d0      	b.n	8009418 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2202      	movs	r2, #2
 8009282:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	3b01      	subs	r3, #1
 800928a:	2b1f      	cmp	r3, #31
 800928c:	f200 80aa 	bhi.w	80093e4 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x198>
 8009290:	a201      	add	r2, pc, #4	; (adr r2, 8009298 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x4c>)
 8009292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009296:	bf00      	nop
 8009298:	08009319 	.word	0x08009319
 800929c:	0800933b 	.word	0x0800933b
 80092a0:	080093e5 	.word	0x080093e5
 80092a4:	0800935d 	.word	0x0800935d
 80092a8:	080093e5 	.word	0x080093e5
 80092ac:	080093e5 	.word	0x080093e5
 80092b0:	080093e5 	.word	0x080093e5
 80092b4:	0800937f 	.word	0x0800937f
 80092b8:	080093e5 	.word	0x080093e5
 80092bc:	080093e5 	.word	0x080093e5
 80092c0:	080093e5 	.word	0x080093e5
 80092c4:	080093e5 	.word	0x080093e5
 80092c8:	080093e5 	.word	0x080093e5
 80092cc:	080093e5 	.word	0x080093e5
 80092d0:	080093e5 	.word	0x080093e5
 80092d4:	080093a1 	.word	0x080093a1
 80092d8:	080093e5 	.word	0x080093e5
 80092dc:	080093e5 	.word	0x080093e5
 80092e0:	080093e5 	.word	0x080093e5
 80092e4:	080093e5 	.word	0x080093e5
 80092e8:	080093e5 	.word	0x080093e5
 80092ec:	080093e5 	.word	0x080093e5
 80092f0:	080093e5 	.word	0x080093e5
 80092f4:	080093e5 	.word	0x080093e5
 80092f8:	080093e5 	.word	0x080093e5
 80092fc:	080093e5 	.word	0x080093e5
 8009300:	080093e5 	.word	0x080093e5
 8009304:	080093e5 	.word	0x080093e5
 8009308:	080093e5 	.word	0x080093e5
 800930c:	080093e5 	.word	0x080093e5
 8009310:	080093e5 	.word	0x080093e5
 8009314:	080093c3 	.word	0x080093c3
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009320:	f023 0203 	bic.w	r2, r3, #3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	431a      	orrs	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f042 0201 	orr.w	r2, r2, #1
 8009334:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1BLKS | HRTIM_FLTINR3_FLT1BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT1BLKS_Pos) |
                  HRTIM_FLTINR3_FLT1BLKE));
       break;
 8009338:	e05d      	b.n	80093f6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009342:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	025b      	lsls	r3, r3, #9
 800934c:	431a      	orrs	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009356:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2BLKS | HRTIM_FLTINR3_FLT2BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT2BLKS_Pos) |
                  HRTIM_FLTINR3_FLT2BLKE));
       break;
 800935a:	e04c      	b.n	80093f6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	045b      	lsls	r3, r3, #17
 800936e:	431a      	orrs	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009378:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3BLKS | HRTIM_FLTINR3_FLT3BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT3BLKS_Pos) |
                  HRTIM_FLTINR3_FLT3BLKE));
       break;
 800937c:	e03b      	b.n	80093f6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009386:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	065b      	lsls	r3, r3, #25
 8009390:	431a      	orrs	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800939a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4BLKS | HRTIM_FLTINR3_FLT4BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT4BLKS_Pos) |
                  HRTIM_FLTINR3_FLT4BLKE));
       break;
 800939e:	e02a      	b.n	80093f6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80093a8:	f023 0203 	bic.w	r2, r3, #3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	431a      	orrs	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f042 0201 	orr.w	r2, r2, #1
 80093bc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5BLKS | HRTIM_FLTINR4_FLT5BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT5BLKS_Pos) |
                  HRTIM_FLTINR4_FLT5BLKE));
      break;
 80093c0:	e019      	b.n	80093f6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80093ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	025b      	lsls	r3, r3, #9
 80093d4:	431a      	orrs	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093de:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6BLKS | HRTIM_FLTINR4_FLT6BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT6BLKS_Pos) |
                  HRTIM_FLTINR4_FLT6BLKE));
      break;
 80093e2:	e008      	b.n	80093f6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2207      	movs	r2, #7
 80093e8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80093f4:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b07      	cmp	r3, #7
 8009400:	d101      	bne.n	8009406 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1ba>
  {
     return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e008      	b.n	8009418 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_HRTIM_FaultCounterConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultCounterConfig(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t Fault,
                                               HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTCOUNTER(pFaultBlkCfg->Threshold));
  assert_param(IS_HRTIM_FAULTCOUNTERRST(pFaultBlkCfg->ResetMode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b02      	cmp	r3, #2
 800943a:	d101      	bne.n	8009440 <HAL_HRTIM_FaultCounterConfig+0x1c>
  {
     return HAL_BUSY;
 800943c:	2302      	movs	r3, #2
 800943e:	e0e3      	b.n	8009608 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8009446:	2b01      	cmp	r3, #1
 8009448:	d101      	bne.n	800944e <HAL_HRTIM_FaultCounterConfig+0x2a>
 800944a:	2302      	movs	r3, #2
 800944c:	e0dc      	b.n	8009608 <HAL_HRTIM_FaultCounterConfig+0x1e4>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2202      	movs	r2, #2
 800945a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	3b01      	subs	r3, #1
 8009462:	2b1f      	cmp	r3, #31
 8009464:	f200 80b6 	bhi.w	80095d4 <HAL_HRTIM_FaultCounterConfig+0x1b0>
 8009468:	a201      	add	r2, pc, #4	; (adr r2, 8009470 <HAL_HRTIM_FaultCounterConfig+0x4c>)
 800946a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946e:	bf00      	nop
 8009470:	080094f1 	.word	0x080094f1
 8009474:	08009517 	.word	0x08009517
 8009478:	080095d5 	.word	0x080095d5
 800947c:	0800953d 	.word	0x0800953d
 8009480:	080095d5 	.word	0x080095d5
 8009484:	080095d5 	.word	0x080095d5
 8009488:	080095d5 	.word	0x080095d5
 800948c:	08009563 	.word	0x08009563
 8009490:	080095d5 	.word	0x080095d5
 8009494:	080095d5 	.word	0x080095d5
 8009498:	080095d5 	.word	0x080095d5
 800949c:	080095d5 	.word	0x080095d5
 80094a0:	080095d5 	.word	0x080095d5
 80094a4:	080095d5 	.word	0x080095d5
 80094a8:	080095d5 	.word	0x080095d5
 80094ac:	08009589 	.word	0x08009589
 80094b0:	080095d5 	.word	0x080095d5
 80094b4:	080095d5 	.word	0x080095d5
 80094b8:	080095d5 	.word	0x080095d5
 80094bc:	080095d5 	.word	0x080095d5
 80094c0:	080095d5 	.word	0x080095d5
 80094c4:	080095d5 	.word	0x080095d5
 80094c8:	080095d5 	.word	0x080095d5
 80094cc:	080095d5 	.word	0x080095d5
 80094d0:	080095d5 	.word	0x080095d5
 80094d4:	080095d5 	.word	0x080095d5
 80094d8:	080095d5 	.word	0x080095d5
 80094dc:	080095d5 	.word	0x080095d5
 80094e0:	080095d5 	.word	0x080095d5
 80094e4:	080095d5 	.word	0x080095d5
 80094e8:	080095d5 	.word	0x080095d5
 80094ec:	080095af 	.word	0x080095af
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80094f8:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	009a      	lsls	r2, r3, #2
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	01db      	lsls	r3, r3, #7
 8009508:	431a      	orrs	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1RSTM | HRTIM_FLTINR3_FLT1CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT1CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT1RSTM_Pos));
       break;
 8009514:	e067      	b.n	80095e6 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800951e:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	029a      	lsls	r2, r3, #10
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	03db      	lsls	r3, r3, #15
 800952e:	431a      	orrs	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	430a      	orrs	r2, r1
 8009536:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2RSTM | HRTIM_FLTINR3_FLT2CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT2CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT2RSTM_Pos));
       break;
 800953a:	e054      	b.n	80095e6 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009544:	f423 013c 	bic.w	r1, r3, #12320768	; 0xbc0000
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	049a      	lsls	r2, r3, #18
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	05db      	lsls	r3, r3, #23
 8009554:	431a      	orrs	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	430a      	orrs	r2, r1
 800955c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3RSTM | HRTIM_FLTINR3_FLT3CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT3CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT3RSTM_Pos));
       break;
 8009560:	e041      	b.n	80095e6 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800956a:	f023 413c 	bic.w	r1, r3, #3154116608	; 0xbc000000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	069a      	lsls	r2, r3, #26
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	07db      	lsls	r3, r3, #31
 800957a:	431a      	orrs	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4RSTM | HRTIM_FLTINR3_FLT4CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT4CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT4RSTM_Pos));
       break;
 8009586:	e02e      	b.n	80095e6 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_5:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009590:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	009a      	lsls	r2, r3, #2
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	01db      	lsls	r3, r3, #7
 80095a0:	431a      	orrs	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5RSTM | HRTIM_FLTINR4_FLT5CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT5CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT5RSTM_Pos));
       break;
 80095ac:	e01b      	b.n	80095e6 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_6:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80095b6:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	029a      	lsls	r2, r3, #10
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	03db      	lsls	r3, r3, #15
 80095c6:	431a      	orrs	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6RSTM | HRTIM_FLTINR4_FLT6CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT6CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT6RSTM_Pos));
       break;
 80095d2:	e008      	b.n	80095e6 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2207      	movs	r2, #7
 80095d8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80095e4:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b07      	cmp	r3, #7
 80095f0:	d101      	bne.n	80095f6 <HAL_HRTIM_FaultCounterConfig+0x1d2>
  {
     return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e008      	b.n	8009608 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_HRTIM_FaultModeCtl>:
  * @retval None
  */
void HAL_HRTIM_FaultModeCtl(HRTIM_HandleTypeDef * hhrtim,
                        uint32_t Faults,
                        uint32_t Enable)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Faults));
  assert_param(IS_HRTIM_FAULTMODECTL(Enable));

  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00d      	beq.n	8009646 <HAL_HRTIM_FaultModeCtl+0x32>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009632:	f023 0101 	bic.w	r1, r3, #1
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f003 0201 	and.w	r2, r3, #1
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	430a      	orrs	r2, r1
 8009642:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	f003 0302 	and.w	r3, r3, #2
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00e      	beq.n	800966e <HAL_HRTIM_FaultModeCtl+0x5a>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009658:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	021b      	lsls	r3, r3, #8
 8009660:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	430a      	orrs	r2, r1
 800966a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00e      	beq.n	8009696 <HAL_HRTIM_FaultModeCtl+0x82>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009680:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	041b      	lsls	r3, r3, #16
 8009688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	f003 0308 	and.w	r3, r3, #8
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00e      	beq.n	80096be <HAL_HRTIM_FaultModeCtl+0xaa>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096a8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	061b      	lsls	r3, r3, #24
 80096b0:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	f003 0310 	and.w	r3, r3, #16
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00d      	beq.n	80096e4 <HAL_HRTIM_FaultModeCtl+0xd0>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096d0:	f023 0101 	bic.w	r1, r3, #1
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f003 0201 	and.w	r2, r3, #1
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f003 0320 	and.w	r3, r3, #32
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00e      	beq.n	800970c <HAL_HRTIM_FaultModeCtl+0xf8>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096f6:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
}
 800970c:	bf00      	nop
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b02      	cmp	r3, #2
 800972e:	d101      	bne.n	8009734 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8009730:	2302      	movs	r3, #2
 8009732:	e05f      	b.n	80097f4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800973a:	2b01      	cmp	r3, #1
 800973c:	d101      	bne.n	8009742 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800973e:	2302      	movs	r3, #2
 8009740:	e058      	b.n	80097f4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2202      	movs	r2, #2
 800974e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2b06      	cmp	r3, #6
 8009756:	d104      	bne.n	8009762 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8009758:	6879      	ldr	r1, [r7, #4]
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 fd56 	bl	800a20c <HRTIM_MasterWaveform_Config>
 8009760:	e004      	b.n	800976c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	68b9      	ldr	r1, [r7, #8]
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 fdee 	bl	800a348 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6819      	ldr	r1, [r3, #0]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	4613      	mov	r3, r2
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	1a9b      	subs	r3, r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4403      	add	r3, r0
 800977e:	3320      	adds	r3, #32
 8009780:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6859      	ldr	r1, [r3, #4]
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	00db      	lsls	r3, r3, #3
 800978e:	1a9b      	subs	r3, r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4403      	add	r3, r0
 8009794:	3324      	adds	r3, #36	; 0x24
 8009796:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6899      	ldr	r1, [r3, #8]
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	4613      	mov	r3, r2
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	1a9b      	subs	r3, r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4403      	add	r3, r0
 80097aa:	3328      	adds	r3, #40	; 0x28
 80097ac:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68d9      	ldr	r1, [r3, #12]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	4613      	mov	r3, r2
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	1a9b      	subs	r3, r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4403      	add	r3, r0
 80097c0:	332c      	adds	r3, #44	; 0x2c
 80097c2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6919      	ldr	r1, [r3, #16]
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	4613      	mov	r3, r2
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	1a9b      	subs	r3, r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	4403      	add	r3, r0
 80097d6:	3330      	adds	r3, #48	; 0x30
 80097d8:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80097da:	68b9      	ldr	r1, [r7, #8]
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f001 f8fb 	bl	800a9d8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b02      	cmp	r3, #2
 8009812:	d101      	bne.n	8009818 <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 8009814:	2302      	movs	r3, #2
 8009816:	e020      	b.n	800985a <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800981e:	2b01      	cmp	r3, #1
 8009820:	d101      	bne.n	8009826 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8009822:	2302      	movs	r3, #2
 8009824:	e019      	b.n	800985a <HAL_HRTIM_WaveformTimerControl+0x5e>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2202      	movs	r2, #2
 8009832:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	68b9      	ldr	r1, [r7, #8]
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f000 ff18 	bl	800a670 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8009840:	68b9      	ldr	r1, [r7, #8]
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f001 f8c8 	bl	800a9d8 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
	...

08009864 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
 8009870:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b02      	cmp	r3, #2
 800987c:	d101      	bne.n	8009882 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800987e:	2302      	movs	r3, #2
 8009880:	e157      	b.n	8009b32 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8009888:	2b01      	cmp	r3, #1
 800988a:	d101      	bne.n	8009890 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 800988c:	2302      	movs	r3, #2
 800988e:	e150      	b.n	8009b32 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2202      	movs	r2, #2
 800989c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2b06      	cmp	r3, #6
 80098a4:	d140      	bne.n	8009928 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	2b07      	cmp	r3, #7
 80098ac:	d82a      	bhi.n	8009904 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80098ae:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80098b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b4:	080098d5 	.word	0x080098d5
 80098b8:	080098e1 	.word	0x080098e1
 80098bc:	08009905 	.word	0x08009905
 80098c0:	080098ed 	.word	0x080098ed
 80098c4:	08009905 	.word	0x08009905
 80098c8:	08009905 	.word	0x08009905
 80098cc:	08009905 	.word	0x08009905
 80098d0:	080098f9 	.word	0x080098f9
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	6812      	ldr	r2, [r2, #0]
 80098dc:	61da      	str	r2, [r3, #28]
        break;
 80098de:	e01a      	b.n	8009916 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	6812      	ldr	r2, [r2, #0]
 80098e8:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80098ea:	e014      	b.n	8009916 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	6812      	ldr	r2, [r2, #0]
 80098f4:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80098f6:	e00e      	b.n	8009916 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	6812      	ldr	r2, [r2, #0]
 8009900:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8009902:	e008      	b.n	8009916 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2207      	movs	r2, #7
 8009908:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2200      	movs	r2, #0
 8009910:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8009914:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b07      	cmp	r3, #7
 8009920:	f040 80fe 	bne.w	8009b20 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e104      	b.n	8009b32 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3b01      	subs	r3, #1
 800992c:	2b07      	cmp	r3, #7
 800992e:	f200 80e3 	bhi.w	8009af8 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8009932:	a201      	add	r2, pc, #4	; (adr r2, 8009938 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8009934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009938:	08009959 	.word	0x08009959
 800993c:	0800996d 	.word	0x0800996d
 8009940:	08009af9 	.word	0x08009af9
 8009944:	08009a29 	.word	0x08009a29
 8009948:	08009af9 	.word	0x08009af9
 800994c:	08009af9 	.word	0x08009af9
 8009950:	08009af9 	.word	0x08009af9
 8009954:	08009a3d 	.word	0x08009a3d
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6819      	ldr	r1, [r3, #0]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	01db      	lsls	r3, r3, #7
 8009964:	440b      	add	r3, r1
 8009966:	339c      	adds	r3, #156	; 0x9c
 8009968:	601a      	str	r2, [r3, #0]
        break;
 800996a:	e0d1      	b.n	8009b10 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6819      	ldr	r1, [r3, #0]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	01db      	lsls	r3, r3, #7
 8009978:	440b      	add	r3, r1
 800997a:	33a4      	adds	r3, #164	; 0xa4
 800997c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d03f      	beq.n	8009a06 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	3301      	adds	r3, #1
 800998e:	01db      	lsls	r3, r3, #7
 8009990:	4413      	add	r3, r2
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	6811      	ldr	r1, [r2, #0]
 8009998:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	3301      	adds	r3, #1
 80099a0:	01db      	lsls	r3, r3, #7
 80099a2:	440b      	add	r3, r1
 80099a4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	3301      	adds	r3, #1
 80099ae:	01db      	lsls	r3, r3, #7
 80099b0:	4413      	add	r3, r2
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	68f9      	ldr	r1, [r7, #12]
 80099ba:	6809      	ldr	r1, [r1, #0]
 80099bc:	431a      	orrs	r2, r3
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	3301      	adds	r3, #1
 80099c2:	01db      	lsls	r3, r3, #7
 80099c4:	440b      	add	r3, r1
 80099c6:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099d0:	d109      	bne.n	80099e6 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6819      	ldr	r1, [r3, #0]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	689a      	ldr	r2, [r3, #8]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	01db      	lsls	r3, r3, #7
 80099de:	440b      	add	r3, r1
 80099e0:	339c      	adds	r3, #156	; 0x9c
 80099e2:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80099e4:	e091      	b.n	8009b0a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099ee:	f040 808c 	bne.w	8009b0a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6819      	ldr	r1, [r3, #0]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	689a      	ldr	r2, [r3, #8]
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	01db      	lsls	r3, r3, #7
 80099fe:	440b      	add	r3, r1
 8009a00:	33a8      	adds	r3, #168	; 0xa8
 8009a02:	601a      	str	r2, [r3, #0]
         break;
 8009a04:	e081      	b.n	8009b0a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	01db      	lsls	r3, r3, #7
 8009a10:	4413      	add	r3, r2
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	6811      	ldr	r1, [r2, #0]
 8009a18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	01db      	lsls	r3, r3, #7
 8009a22:	440b      	add	r3, r1
 8009a24:	601a      	str	r2, [r3, #0]
         break;
 8009a26:	e070      	b.n	8009b0a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6819      	ldr	r1, [r3, #0]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	01db      	lsls	r3, r3, #7
 8009a34:	440b      	add	r3, r1
 8009a36:	33a8      	adds	r3, #168	; 0xa8
 8009a38:	601a      	str	r2, [r3, #0]
        break;
 8009a3a:	e069      	b.n	8009b10 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6819      	ldr	r1, [r3, #0]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	01db      	lsls	r3, r3, #7
 8009a48:	440b      	add	r3, r1
 8009a4a:	33ac      	adds	r3, #172	; 0xac
 8009a4c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d03f      	beq.n	8009ad6 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	01db      	lsls	r3, r3, #7
 8009a60:	4413      	add	r3, r2
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	6811      	ldr	r1, [r2, #0]
 8009a68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	01db      	lsls	r3, r3, #7
 8009a72:	440b      	add	r3, r1
 8009a74:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	01db      	lsls	r3, r3, #7
 8009a80:	4413      	add	r3, r2
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	68f9      	ldr	r1, [r7, #12]
 8009a8c:	6809      	ldr	r1, [r1, #0]
 8009a8e:	431a      	orrs	r2, r3
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	3301      	adds	r3, #1
 8009a94:	01db      	lsls	r3, r3, #7
 8009a96:	440b      	add	r3, r1
 8009a98:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aa2:	d109      	bne.n	8009ab8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6819      	ldr	r1, [r3, #0]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	01db      	lsls	r3, r3, #7
 8009ab0:	440b      	add	r3, r1
 8009ab2:	339c      	adds	r3, #156	; 0x9c
 8009ab4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8009ab6:	e02a      	b.n	8009b0e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ac0:	d125      	bne.n	8009b0e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6819      	ldr	r1, [r3, #0]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	689a      	ldr	r2, [r3, #8]
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	01db      	lsls	r3, r3, #7
 8009ace:	440b      	add	r3, r1
 8009ad0:	33a8      	adds	r3, #168	; 0xa8
 8009ad2:	601a      	str	r2, [r3, #0]
         break;
 8009ad4:	e01b      	b.n	8009b0e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	3301      	adds	r3, #1
 8009ade:	01db      	lsls	r3, r3, #7
 8009ae0:	4413      	add	r3, r2
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	6811      	ldr	r1, [r2, #0]
 8009ae8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	3301      	adds	r3, #1
 8009af0:	01db      	lsls	r3, r3, #7
 8009af2:	440b      	add	r3, r1
 8009af4:	601a      	str	r2, [r3, #0]
         break;
 8009af6:	e00a      	b.n	8009b0e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2207      	movs	r2, #7
 8009afc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8009b08:	e002      	b.n	8009b10 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8009b0a:	bf00      	nop
 8009b0c:	e000      	b.n	8009b10 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8009b0e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b07      	cmp	r3, #7
 8009b1a:	d101      	bne.n	8009b20 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e008      	b.n	8009b32 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop

08009b40 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d101      	bne.n	8009b5e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	e01d      	b.n	8009b9a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d101      	bne.n	8009b6c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8009b68:	2302      	movs	r3, #2
 8009b6a:	e016      	b.n	8009b9a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2202      	movs	r2, #2
 8009b78:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f000 fdd4 	bl	800a730 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b083      	sub	sp, #12
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d101      	bne.n	8009bba <HAL_HRTIM_WaveformOutputStart+0x18>
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	e01a      	b.n	8009bf0 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d101      	bne.n	8009c14 <HAL_HRTIM_WaveformOutputStop+0x18>
 8009c10:	2302      	movs	r3, #2
 8009c12:	e01a      	b.n	8009c4a <HAL_HRTIM_WaveformOutputStop+0x4e>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	683a      	ldr	r2, [r7, #0]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
	...

08009c58 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d101      	bne.n	8009c70 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e05b      	b.n	8009d28 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	430a      	orrs	r2, r1
 8009c92:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d009      	beq.n	8009cb4 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68d9      	ldr	r1, [r3, #12]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73fb      	strb	r3, [r7, #15]
 8009cb8:	e022      	b.n	8009d00 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
 8009cbc:	4a1d      	ldr	r2, [pc, #116]	; (8009d34 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8009cbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d017      	beq.n	8009cfa <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	01db      	lsls	r3, r3, #7
 8009cd2:	4413      	add	r3, r2
 8009cd4:	338c      	adds	r3, #140	; 0x8c
 8009cd6:	6818      	ldr	r0, [r3, #0]
 8009cd8:	7bfa      	ldrb	r2, [r7, #15]
 8009cda:	6879      	ldr	r1, [r7, #4]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	00db      	lsls	r3, r3, #3
 8009ce0:	1a9b      	subs	r3, r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	440b      	add	r3, r1
 8009ce6:	3320      	adds	r3, #32
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6819      	ldr	r1, [r3, #0]
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	4302      	orrs	r2, r0
 8009cf2:	01db      	lsls	r3, r3, #7
 8009cf4:	440b      	add	r3, r1
 8009cf6:	338c      	adds	r3, #140	; 0x8c
 8009cf8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	2b05      	cmp	r3, #5
 8009d04:	d9d9      	bls.n	8009cba <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	6819      	ldr	r1, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;}
 8009d26:	2300      	movs	r3, #0
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	20000010 	.word	0x20000010

08009d38 <HAL_HRTIM_WaveformCountStart_DMA>:
  *       size of each DMA transfer are specified at timer configuration time
  *       (see HAL_HRTIM_WaveformTimerConfig)
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_DMA(HRTIM_HandleTypeDef * hhrtim,
                                                     uint32_t Timers)
{
 8009d38:	b590      	push	{r4, r7, lr}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  DMA_HandleTypeDef * hdma;

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  if((hhrtim->State == HAL_HRTIM_STATE_BUSY))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d101      	bne.n	8009d52 <HAL_HRTIM_WaveformCountStart_DMA+0x1a>
  {
     return HAL_BUSY;
 8009d4e:	2302      	movs	r3, #2
 8009d50:	e0d2      	b.n	8009ef8 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
  }

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2202      	movs	r2, #2
 8009d56:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d101      	bne.n	8009d68 <HAL_HRTIM_WaveformCountStart_DMA+0x30>
 8009d64:	2302      	movs	r3, #2
 8009d66:	e0c7      	b.n	8009ef8 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d033      	beq.n	8009de2 <HAL_HRTIM_WaveformCountStart_DMA+0xaa>
      (hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMARequests != 0U))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d02e      	beq.n	8009de2 <HAL_HRTIM_WaveformCountStart_DMA+0xaa>
  {
      /* Set the DMA error callback */
      hhrtim->hdmaMaster->XferErrorCallback = HRTIM_DMAError ;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d8a:	4a5d      	ldr	r2, [pc, #372]	; (8009f00 <HAL_HRTIM_WaveformCountStart_DMA+0x1c8>)
 8009d8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA transfer completed callback */
      hhrtim->hdmaMaster->XferCpltCallback = HRTIM_DMAMasterCplt;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d94:	4a5b      	ldr	r2, [pc, #364]	; (8009f04 <HAL_HRTIM_WaveformCountStart_DMA+0x1cc>)
 8009d96:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(hhrtim->hdmaMaster,
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009db0:	f7fe fa2e 	bl	8008210 <HAL_DMA_Start_IT>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d009      	beq.n	8009dce <HAL_HRTIM_WaveformCountStart_DMA+0x96>
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMASrcAddress,
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMADstAddress,
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMASize) != HAL_OK)
    {
            hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2207      	movs	r2, #7
 8009dbe:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

            /* Process Unlocked */
            __HAL_UNLOCK(hhrtim);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

            return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e094      	b.n	8009ef8 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
        }

      /* Enable the timer DMA request */
      __HAL_HRTIM_MASTER_ENABLE_DMA(hhrtim,
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68d9      	ldr	r1, [r3, #12]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	430a      	orrs	r2, r1
 8009de0:	60da      	str	r2, [r3, #12]
                                   hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMARequests);
  }

  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]
 8009de6:	e073      	b.n	8009ed0 <HAL_HRTIM_WaveformCountStart_DMA+0x198>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	4a47      	ldr	r2, [pc, #284]	; (8009f08 <HAL_HRTIM_WaveformCountStart_DMA+0x1d0>)
 8009dec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	4013      	ands	r3, r2
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d068      	beq.n	8009eca <HAL_HRTIM_WaveformCountStart_DMA+0x192>
         (hhrtim->TimerParam[timer_idx].DMARequests != 0U))
 8009df8:	7bfa      	ldrb	r2, [r7, #15]
 8009dfa:	6879      	ldr	r1, [r7, #4]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	00db      	lsls	r3, r3, #3
 8009e00:	1a9b      	subs	r3, r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	440b      	add	r3, r1
 8009e06:	3324      	adds	r3, #36	; 0x24
 8009e08:	681b      	ldr	r3, [r3, #0]
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d05d      	beq.n	8009eca <HAL_HRTIM_WaveformCountStart_DMA+0x192>
    {
      /* Get the timer DMA handler */
      hdma = HRTIM_GetDMAHandleFromTimerIdx(hhrtim, timer_idx);
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fd4a 	bl	800a8ac <HRTIM_GetDMAHandleFromTimerIdx>
 8009e18:	60b8      	str	r0, [r7, #8]

      if (hdma == NULL)
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d109      	bne.n	8009e34 <HAL_HRTIM_WaveformCountStart_DMA+0xfc>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2207      	movs	r2, #7
 8009e24:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e061      	b.n	8009ef8 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
      }

       /* Set the DMA error callback */
      hdma->XferErrorCallback = HRTIM_DMAError ;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	4a32      	ldr	r2, [pc, #200]	; (8009f00 <HAL_HRTIM_WaveformCountStart_DMA+0x1c8>)
 8009e38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA transfer completed callback */
      hdma->XferCpltCallback = HRTIM_DMATimerxCplt;
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	4a33      	ldr	r2, [pc, #204]	; (8009f0c <HAL_HRTIM_WaveformCountStart_DMA+0x1d4>)
 8009e3e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(hdma,
 8009e40:	7bfa      	ldrb	r2, [r7, #15]
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	4613      	mov	r3, r2
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	1a9b      	subs	r3, r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	440b      	add	r3, r1
 8009e4e:	3328      	adds	r3, #40	; 0x28
 8009e50:	6818      	ldr	r0, [r3, #0]
 8009e52:	7bfa      	ldrb	r2, [r7, #15]
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	4613      	mov	r3, r2
 8009e58:	00db      	lsls	r3, r3, #3
 8009e5a:	1a9b      	subs	r3, r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	440b      	add	r3, r1
 8009e60:	332c      	adds	r3, #44	; 0x2c
 8009e62:	681c      	ldr	r4, [r3, #0]
 8009e64:	7bfa      	ldrb	r2, [r7, #15]
 8009e66:	6879      	ldr	r1, [r7, #4]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	1a9b      	subs	r3, r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	440b      	add	r3, r1
 8009e72:	3330      	adds	r3, #48	; 0x30
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4622      	mov	r2, r4
 8009e78:	4601      	mov	r1, r0
 8009e7a:	68b8      	ldr	r0, [r7, #8]
 8009e7c:	f7fe f9c8 	bl	8008210 <HAL_DMA_Start_IT>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d009      	beq.n	8009e9a <HAL_HRTIM_WaveformCountStart_DMA+0x162>
                       hhrtim->TimerParam[timer_idx].DMASrcAddress,
                       hhrtim->TimerParam[timer_idx].DMADstAddress,
                       hhrtim->TimerParam[timer_idx].DMASize) != HAL_OK)
    {
              hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2207      	movs	r2, #7
 8009e8a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

              /* Process Unlocked */
              __HAL_UNLOCK(hhrtim);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

              return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e02e      	b.n	8009ef8 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
        }

      /* Enable the timer DMA request */
      __HAL_HRTIM_TIMER_ENABLE_DMA(hhrtim,
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	01db      	lsls	r3, r3, #7
 8009ea2:	4413      	add	r3, r2
 8009ea4:	338c      	adds	r3, #140	; 0x8c
 8009ea6:	6818      	ldr	r0, [r3, #0]
 8009ea8:	7bfa      	ldrb	r2, [r7, #15]
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	4613      	mov	r3, r2
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	1a9b      	subs	r3, r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	3324      	adds	r3, #36	; 0x24
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6819      	ldr	r1, [r3, #0]
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
 8009ec0:	4302      	orrs	r2, r0
 8009ec2:	01db      	lsls	r3, r3, #7
 8009ec4:	440b      	add	r3, r1
 8009ec6:	338c      	adds	r3, #140	; 0x8c
 8009ec8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
 8009ed2:	2b05      	cmp	r3, #5
 8009ed4:	d988      	bls.n	8009de8 <HAL_HRTIM_WaveformCountStart_DMA+0xb0>
                                   hhrtim->TimerParam[timer_idx].DMARequests);
    }
  }

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, Timers);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6819      	ldr	r1, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd90      	pop	{r4, r7, pc}
 8009f00:	0800b5ed 	.word	0x0800b5ed
 8009f04:	0800b30f 	.word	0x0800b30f
 8009f08:	20000010 	.word	0x20000010
 8009f0c:	0800b3c9 	.word	0x0800b3c9

08009f10 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	2bff      	cmp	r3, #255	; 0xff
 8009f1e:	d103      	bne.n	8009f28 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fdc7 	bl	800aab4 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8009f26:	e00a      	b.n	8009f3e <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2b06      	cmp	r3, #6
 8009f2c:	d103      	bne.n	8009f36 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fe93 	bl	800ac5a <HRTIM_Master_ISR>
}
 8009f34:	e003      	b.n	8009f3e <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 ff9a 	bl	800ae72 <HRTIM_Timer_ISR>
}
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b083      	sub	sp, #12
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8009f4e:	bf00      	nop
 8009f50:	370c      	adds	r7, #12
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b083      	sub	sp, #12
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8009f62:	bf00      	nop
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b083      	sub	sp, #12
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 8009f8a:	bf00      	nop
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8009f9e:	bf00      	nop
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b083      	sub	sp, #12
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 8009fb2:	bf00      	nop
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8009fbe:	b480      	push	{r7}
 8009fc0:	b083      	sub	sp, #12
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8009fc6:	bf00      	nop
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b083      	sub	sp, #12
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8009fda:	bf00      	nop
 8009fdc:	370c      	adds	r7, #12
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b083      	sub	sp, #12
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 800a006:	bf00      	nop
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800a012:	b480      	push	{r7}
 800a014:	b083      	sub	sp, #12
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 800a032:	bf00      	nop
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800a03e:	b480      	push	{r7}
 800a040:	b083      	sub	sp, #12
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 800a05e:	bf00      	nop
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b083      	sub	sp, #12
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 800a08a:	bf00      	nop
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800a096:	b480      	push	{r7}
 800a098:	b083      	sub	sp, #12
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 800a0b6:	bf00      	nop
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 800a0e2:	bf00      	nop
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 800a10e:	bf00      	nop
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <HAL_HRTIM_ErrorCallback>:
  * @brief  Callback function invoked when a DMA error occurs
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_ErrorCallback(HRTIM_HandleTypeDef *hhrtim)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b083      	sub	sp, #12
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_ErrorCallback could be implemented in the user file
   */
}
 800a122:	bf00      	nop
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800a12e:	b480      	push	{r7}
 800a130:	b085      	sub	sp, #20
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f023 0307 	bic.w	r3, r3, #7
 800a146:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	4313      	orrs	r3, r2
 800a150:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f023 0318 	bic.w	r3, r3, #24
 800a158:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	4313      	orrs	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	6812      	ldr	r2, [r2, #0]
 800a174:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	6852      	ldr	r2, [r2, #4]
 800a17e:	619a      	str	r2, [r3, #24]
}
 800a180:	bf00      	nop
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	01db      	lsls	r3, r3, #7
 800a1a2:	4413      	add	r3, r2
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f023 0307 	bic.w	r3, r3, #7
 800a1ae:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f023 0318 	bic.w	r3, r3, #24
 800a1c0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	01db      	lsls	r3, r3, #7
 800a1d6:	4413      	add	r3, r2
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6819      	ldr	r1, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	01db      	lsls	r3, r3, #7
 800a1e8:	440b      	add	r3, r1
 800a1ea:	3394      	adds	r3, #148	; 0x94
 800a1ec:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6819      	ldr	r1, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	01db      	lsls	r3, r3, #7
 800a1fa:	440b      	add	r3, r1
 800a1fc:	3398      	adds	r3, #152	; 0x98
 800a1fe:	601a      	str	r2, [r3, #0]
}
 800a200:	bf00      	nop
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800a226:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f023 0320 	bic.w	r3, r3, #32
 800a22e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	4313      	orrs	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a240:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	2b20      	cmp	r3, #32
 800a248:	d003      	beq.n	800a252 <HRTIM_MasterWaveform_Config+0x46>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d108      	bne.n	800a264 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a258:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f043 0320 	orr.w	r3, r3, #32
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	e021      	b.n	800a2a8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	2b03      	cmp	r3, #3
 800a26a:	d108      	bne.n	800a27e <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a272:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	e014      	b.n	800a2a8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	2b04      	cmp	r3, #4
 800a284:	d108      	bne.n	800a298 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a28c:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	e007      	b.n	800a2a8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f023 0320 	bic.w	r3, r3, #32
 800a29e:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a2a6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2ae:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	69db      	ldr	r3, [r3, #28]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2c0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a2d2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800a2e4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a2f6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	4313      	orrs	r3, r2
 800a302:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a30a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	4313      	orrs	r3, r2
 800a314:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a31c:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	4313      	orrs	r3, r2
 800a326:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800a33a:	bf00      	nop
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800a348:	b480      	push	{r7}
 800a34a:	b08b      	sub	sp, #44	; 0x2c
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	3301      	adds	r3, #1
 800a35c:	01db      	lsls	r3, r3, #7
 800a35e:	4413      	add	r3, r2
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	6811      	ldr	r1, [r2, #0]
 800a366:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	3301      	adds	r3, #1
 800a36e:	01db      	lsls	r3, r3, #7
 800a370:	440b      	add	r3, r1
 800a372:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	3301      	adds	r3, #1
 800a37c:	01db      	lsls	r3, r3, #7
 800a37e:	4413      	add	r3, r2
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	01db      	lsls	r3, r3, #7
 800a38c:	4413      	add	r3, r2
 800a38e:	33e8      	adds	r3, #232	; 0xe8
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	01db      	lsls	r3, r3, #7
 800a39c:	4413      	add	r3, r2
 800a39e:	33e4      	adds	r3, #228	; 0xe4
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800a3ac:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800a3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b0:	f023 0320 	bic.w	r3, r3, #32
 800a3b4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	695b      	ldr	r3, [r3, #20]
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	d003      	beq.n	800a3d0 <HRTIM_TimingUnitWaveform_Config+0x88>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d108      	bne.n	800a3e2 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800a3d6:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	f043 0320 	orr.w	r3, r3, #32
 800a3de:	627b      	str	r3, [r7, #36]	; 0x24
 800a3e0:	e021      	b.n	800a426 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	d108      	bne.n	800a3fc <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f0:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3fa:	e014      	b.n	800a426 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	2b04      	cmp	r3, #4
 800a402:	d108      	bne.n	800a416 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a40a:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a412:	627b      	str	r3, [r7, #36]	; 0x24
 800a414:	e007      	b.n	800a426 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a418:	f023 0320 	bic.w	r3, r3, #32
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a434:	4313      	orrs	r3, r2
 800a436:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a446:	4313      	orrs	r3, r2
 800a448:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a450:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a458:	4313      	orrs	r3, r2
 800a45a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800a45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a46a:	4313      	orrs	r3, r2
 800a46c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a470:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a474:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a47c:	4313      	orrs	r3, r2
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a484:	2b00      	cmp	r3, #0
 800a486:	d109      	bne.n	800a49c <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a48e:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a494:	025b      	lsls	r3, r3, #9
 800a496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a498:	4313      	orrs	r3, r2
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a4a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ac:	d103      	bne.n	800a4b6 <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4bc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4ce:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 800a4e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4e4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a4f6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a500:	69ba      	ldr	r2, [r7, #24]
 800a502:	4313      	orrs	r3, r2
 800a504:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a50c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a512:	69ba      	ldr	r2, [r7, #24]
 800a514:	4313      	orrs	r3, r2
 800a516:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800a518:	6a3b      	ldr	r3, [r7, #32]
 800a51a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a51e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a524:	6a3a      	ldr	r2, [r7, #32]
 800a526:	4313      	orrs	r3, r2
 800a528:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a52e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800a532:	d004      	beq.n	800a53e <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a538:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800a53c:	d103      	bne.n	800a546 <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a542:	2b40      	cmp	r3, #64	; 0x40
 800a544:	d108      	bne.n	800a558 <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800a54c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a552:	6a3a      	ldr	r2, [r7, #32]
 800a554:	4313      	orrs	r3, r2
 800a556:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 800a558:	6a3b      	ldr	r3, [r7, #32]
 800a55a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a55e:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a564:	6a3a      	ldr	r2, [r7, #32]
 800a566:	4313      	orrs	r3, r2
 800a568:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a56e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	2b05      	cmp	r3, #5
 800a574:	d850      	bhi.n	800a618 <HRTIM_TimingUnitWaveform_Config+0x2d0>
 800a576:	a201      	add	r2, pc, #4	; (adr r2, 800a57c <HRTIM_TimingUnitWaveform_Config+0x234>)
 800a578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57c:	0800a595 	.word	0x0800a595
 800a580:	0800a5ab 	.word	0x0800a5ab
 800a584:	0800a5c1 	.word	0x0800a5c1
 800a588:	0800a5d7 	.word	0x0800a5d7
 800a58c:	0800a5ed 	.word	0x0800a5ed
 800a590:	0800a603 	.word	0x0800a603
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a59a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a0:	005b      	lsls	r3, r3, #1
 800a5a2:	69fa      	ldr	r2, [r7, #28]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	61fb      	str	r3, [r7, #28]
      break;
 800a5a8:	e037      	b.n	800a61a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5b0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	69fa      	ldr	r2, [r7, #28]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	61fb      	str	r3, [r7, #28]
      break;
 800a5be:	e02c      	b.n	800a61a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a5c6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	69fa      	ldr	r2, [r7, #28]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	61fb      	str	r3, [r7, #28]
      break;
 800a5d4:	e021      	b.n	800a61a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5dc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e2:	011b      	lsls	r3, r3, #4
 800a5e4:	69fa      	ldr	r2, [r7, #28]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	61fb      	str	r3, [r7, #28]
      break;
 800a5ea:	e016      	b.n	800a61a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5f2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f8:	015b      	lsls	r3, r3, #5
 800a5fa:	69fa      	ldr	r2, [r7, #28]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	61fb      	str	r3, [r7, #28]
      break;
 800a600:	e00b      	b.n	800a61a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a608:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60e:	019b      	lsls	r3, r3, #6
 800a610:	69fa      	ldr	r2, [r7, #28]
 800a612:	4313      	orrs	r3, r2
 800a614:	61fb      	str	r3, [r7, #28]
      break;
 800a616:	e000      	b.n	800a61a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 800a618:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	3301      	adds	r3, #1
 800a622:	01db      	lsls	r3, r3, #7
 800a624:	4413      	add	r3, r2
 800a626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a628:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	01db      	lsls	r3, r3, #7
 800a632:	4413      	add	r3, r2
 800a634:	33e8      	adds	r3, #232	; 0xe8
 800a636:	69ba      	ldr	r2, [r7, #24]
 800a638:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	01db      	lsls	r3, r3, #7
 800a642:	4413      	add	r3, r2
 800a644:	33e4      	adds	r3, #228	; 0xe4
 800a646:	6a3a      	ldr	r2, [r7, #32]
 800a648:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	01db      	lsls	r3, r3, #7
 800a652:	4413      	add	r3, r2
 800a654:	33d4      	adds	r3, #212	; 0xd4
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800a664:	bf00      	nop
 800a666:	372c      	adds	r7, #44	; 0x2c
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800a670:	b480      	push	{r7}
 800a672:	b087      	sub	sp, #28
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	01db      	lsls	r3, r3, #7
 800a684:	4413      	add	r3, r2
 800a686:	33ec      	adds	r3, #236	; 0xec
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	f023 0310 	bic.w	r3, r3, #16
 800a692:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	011b      	lsls	r3, r3, #4
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a6a6:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6b8:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a6ca:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d11a      	bne.n	800a714 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f023 0304 	bic.w	r3, r3, #4
 800a6e4:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f023 0302 	bic.w	r3, r3, #2
 800a6f6:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f023 0301 	bic.w	r3, r3, #1
 800a708:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	4313      	orrs	r3, r2
 800a712:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	01db      	lsls	r3, r3, #7
 800a71c:	4413      	add	r3, r2
 800a71e:	33ec      	adds	r3, #236	; 0xec
 800a720:	697a      	ldr	r2, [r7, #20]
 800a722:	601a      	str	r2, [r3, #0]

}
 800a724:	bf00      	nop
 800a726:	371c      	adds	r7, #28
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800a730:	b480      	push	{r7}
 800a732:	b089      	sub	sp, #36	; 0x24
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800a73e:	2300      	movs	r3, #0
 800a740:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	01db      	lsls	r3, r3, #7
 800a74a:	4413      	add	r3, r2
 800a74c:	33e4      	adds	r3, #228	; 0xe4
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	01db      	lsls	r3, r3, #7
 800a75a:	4413      	add	r3, r2
 800a75c:	33b8      	adds	r3, #184	; 0xb8
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	617b      	str	r3, [r7, #20]

  switch (Output)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b20      	cmp	r3, #32
 800a766:	d037      	beq.n	800a7d8 <HRTIM_OutputConfig+0xa8>
 800a768:	2b20      	cmp	r3, #32
 800a76a:	d80d      	bhi.n	800a788 <HRTIM_OutputConfig+0x58>
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d020      	beq.n	800a7b2 <HRTIM_OutputConfig+0x82>
 800a770:	2b04      	cmp	r3, #4
 800a772:	d804      	bhi.n	800a77e <HRTIM_OutputConfig+0x4e>
 800a774:	2b01      	cmp	r3, #1
 800a776:	d01c      	beq.n	800a7b2 <HRTIM_OutputConfig+0x82>
 800a778:	2b02      	cmp	r3, #2
 800a77a:	d02d      	beq.n	800a7d8 <HRTIM_OutputConfig+0xa8>
      shift = 16U;
      break;
    }

  default:
    break;
 800a77c:	e041      	b.n	800a802 <HRTIM_OutputConfig+0xd2>
  switch (Output)
 800a77e:	2b08      	cmp	r3, #8
 800a780:	d02a      	beq.n	800a7d8 <HRTIM_OutputConfig+0xa8>
 800a782:	2b10      	cmp	r3, #16
 800a784:	d015      	beq.n	800a7b2 <HRTIM_OutputConfig+0x82>
    break;
 800a786:	e03c      	b.n	800a802 <HRTIM_OutputConfig+0xd2>
  switch (Output)
 800a788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a78c:	d011      	beq.n	800a7b2 <HRTIM_OutputConfig+0x82>
 800a78e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a792:	d804      	bhi.n	800a79e <HRTIM_OutputConfig+0x6e>
 800a794:	2b40      	cmp	r3, #64	; 0x40
 800a796:	d00c      	beq.n	800a7b2 <HRTIM_OutputConfig+0x82>
 800a798:	2b80      	cmp	r3, #128	; 0x80
 800a79a:	d01d      	beq.n	800a7d8 <HRTIM_OutputConfig+0xa8>
    break;
 800a79c:	e031      	b.n	800a802 <HRTIM_OutputConfig+0xd2>
  switch (Output)
 800a79e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7a2:	d006      	beq.n	800a7b2 <HRTIM_OutputConfig+0x82>
 800a7a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7a8:	d016      	beq.n	800a7d8 <HRTIM_OutputConfig+0xa8>
 800a7aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7ae:	d013      	beq.n	800a7d8 <HRTIM_OutputConfig+0xa8>
    break;
 800a7b0:	e027      	b.n	800a802 <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6819      	ldr	r1, [r3, #0]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	685a      	ldr	r2, [r3, #4]
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	01db      	lsls	r3, r3, #7
 800a7be:	440b      	add	r3, r1
 800a7c0:	33bc      	adds	r3, #188	; 0xbc
 800a7c2:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6819      	ldr	r1, [r3, #0]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	01db      	lsls	r3, r3, #7
 800a7d0:	440b      	add	r3, r1
 800a7d2:	33c0      	adds	r3, #192	; 0xc0
 800a7d4:	601a      	str	r2, [r3, #0]
      break;
 800a7d6:	e014      	b.n	800a802 <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6819      	ldr	r1, [r3, #0]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	01db      	lsls	r3, r3, #7
 800a7e4:	440b      	add	r3, r1
 800a7e6:	33c4      	adds	r3, #196	; 0xc4
 800a7e8:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6819      	ldr	r1, [r3, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	01db      	lsls	r3, r3, #7
 800a7f6:	440b      	add	r3, r1
 800a7f8:	33c8      	adds	r3, #200	; 0xc8
 800a7fa:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800a7fc:	2310      	movs	r3, #16
 800a7fe:	61bb      	str	r3, [r7, #24]
      break;
 800a800:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800a802:	22fe      	movs	r2, #254	; 0xfe
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800a80a:	43db      	mvns	r3, r3
 800a80c:	69fa      	ldr	r2, [r7, #28]
 800a80e:	4013      	ands	r3, r2
 800a810:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	fa02 f303 	lsl.w	r3, r2, r3
 800a81c:	69fa      	ldr	r2, [r7, #28]
 800a81e:	4313      	orrs	r3, r2
 800a820:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	68da      	ldr	r2, [r3, #12]
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	fa02 f303 	lsl.w	r3, r2, r3
 800a82c:	69fa      	ldr	r2, [r7, #28]
 800a82e:	4313      	orrs	r3, r2
 800a830:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	691a      	ldr	r2, [r3, #16]
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	fa02 f303 	lsl.w	r3, r2, r3
 800a83c:	69fa      	ldr	r2, [r7, #28]
 800a83e:	4313      	orrs	r3, r2
 800a840:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	695a      	ldr	r2, [r3, #20]
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	fa02 f303 	lsl.w	r3, r2, r3
 800a84c:	69fa      	ldr	r2, [r7, #28]
 800a84e:	4313      	orrs	r3, r2
 800a850:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	699a      	ldr	r2, [r3, #24]
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	fa02 f303 	lsl.w	r3, r2, r3
 800a85c:	69fa      	ldr	r2, [r7, #28]
 800a85e:	4313      	orrs	r3, r2
 800a860:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	2b08      	cmp	r3, #8
 800a868:	d111      	bne.n	800a88e <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10c      	bne.n	800a88e <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d107      	bne.n	800a88e <HRTIM_OutputConfig+0x15e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	69da      	ldr	r2, [r3, #28]
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	fa02 f303 	lsl.w	r3, r2, r3
 800a888:	69fa      	ldr	r2, [r7, #28]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	01db      	lsls	r3, r3, #7
 800a896:	4413      	add	r3, r2
 800a898:	33e4      	adds	r3, #228	; 0xe4
 800a89a:	69fa      	ldr	r2, [r7, #28]
 800a89c:	601a      	str	r2, [r3, #0]
}
 800a89e:	bf00      	nop
 800a8a0:	3724      	adds	r7, #36	; 0x24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
	...

0800a8ac <HRTIM_GetDMAHandleFromTimerIdx>:
  return dma_request;
}

static DMA_HandleTypeDef * HRTIM_GetDMAHandleFromTimerIdx(HRTIM_HandleTypeDef * hhrtim,
                                                          uint32_t TimerIdx)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  DMA_HandleTypeDef * hdma = (DMA_HandleTypeDef *)NULL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]

  switch (TimerIdx)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b06      	cmp	r3, #6
 800a8be:	d834      	bhi.n	800a92a <HRTIM_GetDMAHandleFromTimerIdx+0x7e>
 800a8c0:	a201      	add	r2, pc, #4	; (adr r2, 800a8c8 <HRTIM_GetDMAHandleFromTimerIdx+0x1c>)
 800a8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c6:	bf00      	nop
 800a8c8:	0800a8ef 	.word	0x0800a8ef
 800a8cc:	0800a8f9 	.word	0x0800a8f9
 800a8d0:	0800a903 	.word	0x0800a903
 800a8d4:	0800a90d 	.word	0x0800a90d
 800a8d8:	0800a917 	.word	0x0800a917
 800a8dc:	0800a921 	.word	0x0800a921
 800a8e0:	0800a8e5 	.word	0x0800a8e5
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hdma = hhrtim->hdmaMaster;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8ea:	60fb      	str	r3, [r7, #12]
      break;
 800a8ec:	e01e      	b.n	800a92c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hdma = hhrtim->hdmaTimerA;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a8f4:	60fb      	str	r3, [r7, #12]
      break;
 800a8f6:	e019      	b.n	800a92c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hdma = hhrtim->hdmaTimerB;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a8fe:	60fb      	str	r3, [r7, #12]
      break;
 800a900:	e014      	b.n	800a92c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hdma = hhrtim->hdmaTimerC;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a908:	60fb      	str	r3, [r7, #12]
      break;
 800a90a:	e00f      	b.n	800a92c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hdma = hhrtim->hdmaTimerD;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a912:	60fb      	str	r3, [r7, #12]
      break;
 800a914:	e00a      	b.n	800a92c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hdma = hhrtim->hdmaTimerE;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a91c:	60fb      	str	r3, [r7, #12]
      break;
 800a91e:	e005      	b.n	800a92c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hdma = hhrtim->hdmaTimerF;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800a926:	60fb      	str	r3, [r7, #12]
      break;
 800a928:	e000      	b.n	800a92c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  default:
    break;
 800a92a:	bf00      	nop
  }

  return hdma;
 800a92c:	68fb      	ldr	r3, [r7, #12]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop

0800a93c <GetTimerIdxFromDMAHandle>:

static uint32_t GetTimerIdxFromDMAHandle(HRTIM_HandleTypeDef * hhrtim,
                                         DMA_HandleTypeDef * hdma)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  uint32_t timed_idx = 0xFFFFFFFFU;
 800a946:	f04f 33ff 	mov.w	r3, #4294967295
 800a94a:	60fb      	str	r3, [r7, #12]

  if (hdma == hhrtim->hdmaMaster)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	429a      	cmp	r2, r3
 800a956:	d102      	bne.n	800a95e <GetTimerIdxFromDMAHandle+0x22>
  {
    timed_idx = HRTIM_TIMERINDEX_MASTER;
 800a958:	2306      	movs	r3, #6
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	e034      	b.n	800a9c8 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerA)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	429a      	cmp	r2, r3
 800a968:	d102      	bne.n	800a970 <GetTimerIdxFromDMAHandle+0x34>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_A;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	e02b      	b.n	800a9c8 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerB)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d102      	bne.n	800a982 <GetTimerIdxFromDMAHandle+0x46>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_B;
 800a97c:	2301      	movs	r3, #1
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	e022      	b.n	800a9c8 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerC)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d102      	bne.n	800a994 <GetTimerIdxFromDMAHandle+0x58>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_C;
 800a98e:	2302      	movs	r3, #2
 800a990:	60fb      	str	r3, [r7, #12]
 800a992:	e019      	b.n	800a9c8 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerD)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a99a:	683a      	ldr	r2, [r7, #0]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d102      	bne.n	800a9a6 <GetTimerIdxFromDMAHandle+0x6a>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_D;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	e010      	b.n	800a9c8 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerE)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d102      	bne.n	800a9b8 <GetTimerIdxFromDMAHandle+0x7c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_E;
 800a9b2:	2304      	movs	r3, #4
 800a9b4:	60fb      	str	r3, [r7, #12]
 800a9b6:	e007      	b.n	800a9c8 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerF)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d101      	bne.n	800a9c8 <GetTimerIdxFromDMAHandle+0x8c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_F;
 800a9c4:	2305      	movs	r3, #5
 800a9c6:	60fb      	str	r3, [r7, #12]
  }
  else
  {
    /* nothing to do */
  }
  return timed_idx;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
	...

0800a9d8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b06      	cmp	r3, #6
 800a9e6:	d85e      	bhi.n	800aaa6 <HRTIM_ForceRegistersUpdate+0xce>
 800a9e8:	a201      	add	r2, pc, #4	; (adr r2, 800a9f0 <HRTIM_ForceRegistersUpdate+0x18>)
 800a9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ee:	bf00      	nop
 800a9f0:	0800aa23 	.word	0x0800aa23
 800a9f4:	0800aa39 	.word	0x0800aa39
 800a9f8:	0800aa4f 	.word	0x0800aa4f
 800a9fc:	0800aa65 	.word	0x0800aa65
 800aa00:	0800aa7b 	.word	0x0800aa7b
 800aa04:	0800aa91 	.word	0x0800aa91
 800aa08:	0800aa0d 	.word	0x0800aa0d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f042 0201 	orr.w	r2, r2, #1
 800aa1c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800aa20:	e042      	b.n	800aaa8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f042 0202 	orr.w	r2, r2, #2
 800aa32:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800aa36:	e037      	b.n	800aaa8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f042 0204 	orr.w	r2, r2, #4
 800aa48:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800aa4c:	e02c      	b.n	800aaa8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f042 0208 	orr.w	r2, r2, #8
 800aa5e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800aa62:	e021      	b.n	800aaa8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f042 0210 	orr.w	r2, r2, #16
 800aa74:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800aa78:	e016      	b.n	800aaa8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f042 0220 	orr.w	r2, r2, #32
 800aa8a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800aa8e:	e00b      	b.n	800aaa8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaa0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800aaa4:	e000      	b.n	800aaa8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800aaa6:	bf00      	nop
  }
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  /* Fault 1 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800aac4:	f003 0301 	and.w	r3, r3, #1
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d101      	bne.n	800aad0 <HRTIM_HRTIM_ISR+0x1c>
 800aacc:	2301      	movs	r3, #1
 800aace:	e000      	b.n	800aad2 <HRTIM_HRTIM_ISR+0x1e>
 800aad0:	2300      	movs	r3, #0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00f      	beq.n	800aaf6 <HRTIM_HRTIM_ISR+0x42>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT1) != RESET)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800aade:	f003 0301 	and.w	r3, r3, #1
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d107      	bne.n	800aaf6 <HRTIM_HRTIM_ISR+0x42>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7fb f86b 	bl	8005bcc <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800aafe:	f003 0302 	and.w	r3, r3, #2
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d101      	bne.n	800ab0a <HRTIM_HRTIM_ISR+0x56>
 800ab06:	2301      	movs	r3, #1
 800ab08:	e000      	b.n	800ab0c <HRTIM_HRTIM_ISR+0x58>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00f      	beq.n	800ab30 <HRTIM_HRTIM_ISR+0x7c>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT2) != RESET)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800ab18:	f003 0302 	and.w	r3, r3, #2
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d107      	bne.n	800ab30 <HRTIM_HRTIM_ISR+0x7c>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2202      	movs	r2, #2
 800ab26:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff fa0b 	bl	8009f46 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800ab38:	f003 0304 	and.w	r3, r3, #4
 800ab3c:	2b04      	cmp	r3, #4
 800ab3e:	d101      	bne.n	800ab44 <HRTIM_HRTIM_ISR+0x90>
 800ab40:	2301      	movs	r3, #1
 800ab42:	e000      	b.n	800ab46 <HRTIM_HRTIM_ISR+0x92>
 800ab44:	2300      	movs	r3, #0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00f      	beq.n	800ab6a <HRTIM_HRTIM_ISR+0xb6>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT3) != RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800ab52:	f003 0304 	and.w	r3, r3, #4
 800ab56:	2b04      	cmp	r3, #4
 800ab58:	d107      	bne.n	800ab6a <HRTIM_HRTIM_ISR+0xb6>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2204      	movs	r2, #4
 800ab60:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7fb f83c 	bl	8005be2 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800ab72:	f003 0308 	and.w	r3, r3, #8
 800ab76:	2b08      	cmp	r3, #8
 800ab78:	d101      	bne.n	800ab7e <HRTIM_HRTIM_ISR+0xca>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e000      	b.n	800ab80 <HRTIM_HRTIM_ISR+0xcc>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00f      	beq.n	800aba4 <HRTIM_HRTIM_ISR+0xf0>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT4) != RESET)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800ab8c:	f003 0308 	and.w	r3, r3, #8
 800ab90:	2b08      	cmp	r3, #8
 800ab92:	d107      	bne.n	800aba4 <HRTIM_HRTIM_ISR+0xf0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2208      	movs	r2, #8
 800ab9a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7ff f9db 	bl	8009f5a <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800abac:	f003 0310 	and.w	r3, r3, #16
 800abb0:	2b10      	cmp	r3, #16
 800abb2:	d101      	bne.n	800abb8 <HRTIM_HRTIM_ISR+0x104>
 800abb4:	2301      	movs	r3, #1
 800abb6:	e000      	b.n	800abba <HRTIM_HRTIM_ISR+0x106>
 800abb8:	2300      	movs	r3, #0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00f      	beq.n	800abde <HRTIM_HRTIM_ISR+0x12a>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT5) != RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800abc6:	f003 0310 	and.w	r3, r3, #16
 800abca:	2b10      	cmp	r3, #16
 800abcc:	d107      	bne.n	800abde <HRTIM_HRTIM_ISR+0x12a>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2210      	movs	r2, #16
 800abd4:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7ff f9c8 	bl	8009f6e <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800abe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abea:	2b40      	cmp	r3, #64	; 0x40
 800abec:	d101      	bne.n	800abf2 <HRTIM_HRTIM_ISR+0x13e>
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <HRTIM_HRTIM_ISR+0x140>
 800abf2:	2300      	movs	r3, #0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00f      	beq.n	800ac18 <HRTIM_HRTIM_ISR+0x164>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT6) != RESET)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800ac00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac04:	2b40      	cmp	r3, #64	; 0x40
 800ac06:	d107      	bne.n	800ac18 <HRTIM_HRTIM_ISR+0x164>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2240      	movs	r2, #64	; 0x40
 800ac0e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7ff f9b5 	bl	8009f82 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800ac20:	f003 0320 	and.w	r3, r3, #32
 800ac24:	2b20      	cmp	r3, #32
 800ac26:	d101      	bne.n	800ac2c <HRTIM_HRTIM_ISR+0x178>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e000      	b.n	800ac2e <HRTIM_HRTIM_ISR+0x17a>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00f      	beq.n	800ac52 <HRTIM_HRTIM_ISR+0x19e>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_SYSFLT) != RESET)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800ac3a:	f003 0320 	and.w	r3, r3, #32
 800ac3e:	2b20      	cmp	r3, #32
 800ac40:	d107      	bne.n	800ac52 <HRTIM_HRTIM_ISR+0x19e>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2220      	movs	r2, #32
 800ac48:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff f9a2 	bl	8009f96 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac52:	bf00      	nop
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  /* DLL calibration ready event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800ac6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac72:	d101      	bne.n	800ac78 <HRTIM_Master_ISR+0x1e>
 800ac74:	2301      	movs	r3, #1
 800ac76:	e000      	b.n	800ac7a <HRTIM_Master_ISR+0x20>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d019      	beq.n	800acb2 <HRTIM_Master_ISR+0x58>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_DLLRDY) != RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800ac86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac8e:	d110      	bne.n	800acb2 <HRTIM_Master_ISR+0x58>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ac98:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7ff f97c 	bl	8009faa <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800acba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acc2:	d101      	bne.n	800acc8 <HRTIM_Master_ISR+0x6e>
 800acc4:	2301      	movs	r3, #1
 800acc6:	e000      	b.n	800acca <HRTIM_Master_ISR+0x70>
 800acc8:	2300      	movs	r3, #0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d011      	beq.n	800acf2 <HRTIM_Master_ISR+0x98>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_BMPER) != RESET)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800acd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acde:	d108      	bne.n	800acf2 <HRTIM_Master_ISR+0x98>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ace8:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff f966 	bl	8009fbe <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	f003 0301 	and.w	r3, r3, #1
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d101      	bne.n	800ad04 <HRTIM_Master_ISR+0xaa>
 800ad00:	2301      	movs	r3, #1
 800ad02:	e000      	b.n	800ad06 <HRTIM_Master_ISR+0xac>
 800ad04:	2300      	movs	r3, #0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00e      	beq.n	800ad28 <HRTIM_Master_ISR+0xce>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP1) != RESET)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	f003 0301 	and.w	r3, r3, #1
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d107      	bne.n	800ad28 <HRTIM_Master_ISR+0xce>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800ad20:	2106      	movs	r1, #6
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7ff f975 	bl	800a012 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	f003 0302 	and.w	r3, r3, #2
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d101      	bne.n	800ad3a <HRTIM_Master_ISR+0xe0>
 800ad36:	2301      	movs	r3, #1
 800ad38:	e000      	b.n	800ad3c <HRTIM_Master_ISR+0xe2>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00e      	beq.n	800ad5e <HRTIM_Master_ISR+0x104>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP2) != RESET)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	f003 0302 	and.w	r3, r3, #2
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d107      	bne.n	800ad5e <HRTIM_Master_ISR+0x104>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2202      	movs	r2, #2
 800ad54:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800ad56:	2106      	movs	r1, #6
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff f965 	bl	800a028 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	f003 0304 	and.w	r3, r3, #4
 800ad68:	2b04      	cmp	r3, #4
 800ad6a:	d101      	bne.n	800ad70 <HRTIM_Master_ISR+0x116>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e000      	b.n	800ad72 <HRTIM_Master_ISR+0x118>
 800ad70:	2300      	movs	r3, #0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00e      	beq.n	800ad94 <HRTIM_Master_ISR+0x13a>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP3) != RESET)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	f003 0304 	and.w	r3, r3, #4
 800ad80:	2b04      	cmp	r3, #4
 800ad82:	d107      	bne.n	800ad94 <HRTIM_Master_ISR+0x13a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2204      	movs	r2, #4
 800ad8a:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800ad8c:	2106      	movs	r1, #6
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7ff f955 	bl	800a03e <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	f003 0308 	and.w	r3, r3, #8
 800ad9e:	2b08      	cmp	r3, #8
 800ada0:	d101      	bne.n	800ada6 <HRTIM_Master_ISR+0x14c>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e000      	b.n	800ada8 <HRTIM_Master_ISR+0x14e>
 800ada6:	2300      	movs	r3, #0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00e      	beq.n	800adca <HRTIM_Master_ISR+0x170>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP4) != RESET)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	f003 0308 	and.w	r3, r3, #8
 800adb6:	2b08      	cmp	r3, #8
 800adb8:	d107      	bne.n	800adca <HRTIM_Master_ISR+0x170>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2208      	movs	r2, #8
 800adc0:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800adc2:	2106      	movs	r1, #6
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f7ff f945 	bl	800a054 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	f003 0310 	and.w	r3, r3, #16
 800add4:	2b10      	cmp	r3, #16
 800add6:	d101      	bne.n	800addc <HRTIM_Master_ISR+0x182>
 800add8:	2301      	movs	r3, #1
 800adda:	e000      	b.n	800adde <HRTIM_Master_ISR+0x184>
 800addc:	2300      	movs	r3, #0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00e      	beq.n	800ae00 <HRTIM_Master_ISR+0x1a6>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MREP) != RESET)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	f003 0310 	and.w	r3, r3, #16
 800adec:	2b10      	cmp	r3, #16
 800adee:	d107      	bne.n	800ae00 <HRTIM_Master_ISR+0x1a6>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2210      	movs	r2, #16
 800adf6:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800adf8:	2106      	movs	r1, #6
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7ff f8fe 	bl	8009ffc <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	f003 0320 	and.w	r3, r3, #32
 800ae0a:	2b20      	cmp	r3, #32
 800ae0c:	d101      	bne.n	800ae12 <HRTIM_Master_ISR+0x1b8>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <HRTIM_Master_ISR+0x1ba>
 800ae12:	2300      	movs	r3, #0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00d      	beq.n	800ae34 <HRTIM_Master_ISR+0x1da>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_SYNC) != RESET)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	f003 0320 	and.w	r3, r3, #32
 800ae22:	2b20      	cmp	r3, #32
 800ae24:	d106      	bne.n	800ae34 <HRTIM_Master_ISR+0x1da>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2220      	movs	r2, #32
 800ae2c:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff f8cf 	bl	8009fd2 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae3e:	2b40      	cmp	r3, #64	; 0x40
 800ae40:	d101      	bne.n	800ae46 <HRTIM_Master_ISR+0x1ec>
 800ae42:	2301      	movs	r3, #1
 800ae44:	e000      	b.n	800ae48 <HRTIM_Master_ISR+0x1ee>
 800ae46:	2300      	movs	r3, #0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00e      	beq.n	800ae6a <HRTIM_Master_ISR+0x210>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MUPD) != RESET)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae56:	2b40      	cmp	r3, #64	; 0x40
 800ae58:	d107      	bne.n	800ae6a <HRTIM_Master_ISR+0x210>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2240      	movs	r2, #64	; 0x40
 800ae60:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800ae62:	2106      	movs	r1, #6
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7ff f8be 	bl	8009fe6 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae6a:	bf00      	nop
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	6039      	str	r1, [r7, #0]
  /* Timer compare 1 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	3301      	adds	r3, #1
 800ae84:	01db      	lsls	r3, r3, #7
 800ae86:	4413      	add	r3, r2
 800ae88:	3304      	adds	r3, #4
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 0301 	and.w	r3, r3, #1
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d101      	bne.n	800ae98 <HRTIM_Timer_ISR+0x26>
 800ae94:	2301      	movs	r3, #1
 800ae96:	e000      	b.n	800ae9a <HRTIM_Timer_ISR+0x28>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d016      	beq.n	800aecc <HRTIM_Timer_ISR+0x5a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1) != RESET)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	01db      	lsls	r3, r3, #7
 800aea6:	4413      	add	r3, r2
 800aea8:	338c      	adds	r3, #140	; 0x8c
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d10b      	bne.n	800aecc <HRTIM_Timer_ISR+0x5a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	01db      	lsls	r3, r3, #7
 800aebc:	4413      	add	r3, r2
 800aebe:	3388      	adds	r3, #136	; 0x88
 800aec0:	2201      	movs	r2, #1
 800aec2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff f8a3 	bl	800a012 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	3301      	adds	r3, #1
 800aed4:	01db      	lsls	r3, r3, #7
 800aed6:	4413      	add	r3, r2
 800aed8:	3304      	adds	r3, #4
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d101      	bne.n	800aee8 <HRTIM_Timer_ISR+0x76>
 800aee4:	2301      	movs	r3, #1
 800aee6:	e000      	b.n	800aeea <HRTIM_Timer_ISR+0x78>
 800aee8:	2300      	movs	r3, #0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d016      	beq.n	800af1c <HRTIM_Timer_ISR+0xaa>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2) != RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	01db      	lsls	r3, r3, #7
 800aef6:	4413      	add	r3, r2
 800aef8:	338c      	adds	r3, #140	; 0x8c
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0302 	and.w	r3, r3, #2
 800af00:	2b02      	cmp	r3, #2
 800af02:	d10b      	bne.n	800af1c <HRTIM_Timer_ISR+0xaa>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	01db      	lsls	r3, r3, #7
 800af0c:	4413      	add	r3, r2
 800af0e:	3388      	adds	r3, #136	; 0x88
 800af10:	2202      	movs	r2, #2
 800af12:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7ff f886 	bl	800a028 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	3301      	adds	r3, #1
 800af24:	01db      	lsls	r3, r3, #7
 800af26:	4413      	add	r3, r2
 800af28:	3304      	adds	r3, #4
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f003 0304 	and.w	r3, r3, #4
 800af30:	2b04      	cmp	r3, #4
 800af32:	d101      	bne.n	800af38 <HRTIM_Timer_ISR+0xc6>
 800af34:	2301      	movs	r3, #1
 800af36:	e000      	b.n	800af3a <HRTIM_Timer_ISR+0xc8>
 800af38:	2300      	movs	r3, #0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d016      	beq.n	800af6c <HRTIM_Timer_ISR+0xfa>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3) != RESET)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	01db      	lsls	r3, r3, #7
 800af46:	4413      	add	r3, r2
 800af48:	338c      	adds	r3, #140	; 0x8c
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 0304 	and.w	r3, r3, #4
 800af50:	2b04      	cmp	r3, #4
 800af52:	d10b      	bne.n	800af6c <HRTIM_Timer_ISR+0xfa>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	01db      	lsls	r3, r3, #7
 800af5c:	4413      	add	r3, r2
 800af5e:	3388      	adds	r3, #136	; 0x88
 800af60:	2204      	movs	r2, #4
 800af62:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7ff f869 	bl	800a03e <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	3301      	adds	r3, #1
 800af74:	01db      	lsls	r3, r3, #7
 800af76:	4413      	add	r3, r2
 800af78:	3304      	adds	r3, #4
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 0308 	and.w	r3, r3, #8
 800af80:	2b08      	cmp	r3, #8
 800af82:	d101      	bne.n	800af88 <HRTIM_Timer_ISR+0x116>
 800af84:	2301      	movs	r3, #1
 800af86:	e000      	b.n	800af8a <HRTIM_Timer_ISR+0x118>
 800af88:	2300      	movs	r3, #0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d016      	beq.n	800afbc <HRTIM_Timer_ISR+0x14a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4) != RESET)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	01db      	lsls	r3, r3, #7
 800af96:	4413      	add	r3, r2
 800af98:	338c      	adds	r3, #140	; 0x8c
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 0308 	and.w	r3, r3, #8
 800afa0:	2b08      	cmp	r3, #8
 800afa2:	d10b      	bne.n	800afbc <HRTIM_Timer_ISR+0x14a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	01db      	lsls	r3, r3, #7
 800afac:	4413      	add	r3, r2
 800afae:	3388      	adds	r3, #136	; 0x88
 800afb0:	2208      	movs	r2, #8
 800afb2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff f84c 	bl	800a054 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	3301      	adds	r3, #1
 800afc4:	01db      	lsls	r3, r3, #7
 800afc6:	4413      	add	r3, r2
 800afc8:	3304      	adds	r3, #4
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f003 0310 	and.w	r3, r3, #16
 800afd0:	2b10      	cmp	r3, #16
 800afd2:	d101      	bne.n	800afd8 <HRTIM_Timer_ISR+0x166>
 800afd4:	2301      	movs	r3, #1
 800afd6:	e000      	b.n	800afda <HRTIM_Timer_ISR+0x168>
 800afd8:	2300      	movs	r3, #0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d016      	beq.n	800b00c <HRTIM_Timer_ISR+0x19a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_REP) != RESET)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	01db      	lsls	r3, r3, #7
 800afe6:	4413      	add	r3, r2
 800afe8:	338c      	adds	r3, #140	; 0x8c
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 0310 	and.w	r3, r3, #16
 800aff0:	2b10      	cmp	r3, #16
 800aff2:	d10b      	bne.n	800b00c <HRTIM_Timer_ISR+0x19a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	01db      	lsls	r3, r3, #7
 800affc:	4413      	add	r3, r2
 800affe:	3388      	adds	r3, #136	; 0x88
 800b000:	2210      	movs	r2, #16
 800b002:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 800b004:	6839      	ldr	r1, [r7, #0]
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7fe fff8 	bl	8009ffc <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	3301      	adds	r3, #1
 800b014:	01db      	lsls	r3, r3, #7
 800b016:	4413      	add	r3, r2
 800b018:	3304      	adds	r3, #4
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b020:	2b40      	cmp	r3, #64	; 0x40
 800b022:	d101      	bne.n	800b028 <HRTIM_Timer_ISR+0x1b6>
 800b024:	2301      	movs	r3, #1
 800b026:	e000      	b.n	800b02a <HRTIM_Timer_ISR+0x1b8>
 800b028:	2300      	movs	r3, #0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d016      	beq.n	800b05c <HRTIM_Timer_ISR+0x1ea>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD) != RESET)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	01db      	lsls	r3, r3, #7
 800b036:	4413      	add	r3, r2
 800b038:	338c      	adds	r3, #140	; 0x8c
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b040:	2b40      	cmp	r3, #64	; 0x40
 800b042:	d10b      	bne.n	800b05c <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	01db      	lsls	r3, r3, #7
 800b04c:	4413      	add	r3, r2
 800b04e:	3388      	adds	r3, #136	; 0x88
 800b050:	2240      	movs	r2, #64	; 0x40
 800b052:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7fe ffc5 	bl	8009fe6 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	3301      	adds	r3, #1
 800b064:	01db      	lsls	r3, r3, #7
 800b066:	4413      	add	r3, r2
 800b068:	3304      	adds	r3, #4
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b070:	2b80      	cmp	r3, #128	; 0x80
 800b072:	d101      	bne.n	800b078 <HRTIM_Timer_ISR+0x206>
 800b074:	2301      	movs	r3, #1
 800b076:	e000      	b.n	800b07a <HRTIM_Timer_ISR+0x208>
 800b078:	2300      	movs	r3, #0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d016      	beq.n	800b0ac <HRTIM_Timer_ISR+0x23a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1) != RESET)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	01db      	lsls	r3, r3, #7
 800b086:	4413      	add	r3, r2
 800b088:	338c      	adds	r3, #140	; 0x8c
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b090:	2b80      	cmp	r3, #128	; 0x80
 800b092:	d10b      	bne.n	800b0ac <HRTIM_Timer_ISR+0x23a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	01db      	lsls	r3, r3, #7
 800b09c:	4413      	add	r3, r2
 800b09e:	3388      	adds	r3, #136	; 0x88
 800b0a0:	2280      	movs	r2, #128	; 0x80
 800b0a2:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7fe ffdf 	bl	800a06a <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	01db      	lsls	r3, r3, #7
 800b0b6:	4413      	add	r3, r2
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0c4:	d101      	bne.n	800b0ca <HRTIM_Timer_ISR+0x258>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e000      	b.n	800b0cc <HRTIM_Timer_ISR+0x25a>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d018      	beq.n	800b102 <HRTIM_Timer_ISR+0x290>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2) != RESET)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	01db      	lsls	r3, r3, #7
 800b0d8:	4413      	add	r3, r2
 800b0da:	338c      	adds	r3, #140	; 0x8c
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0e6:	d10c      	bne.n	800b102 <HRTIM_Timer_ISR+0x290>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	01db      	lsls	r3, r3, #7
 800b0f0:	4413      	add	r3, r2
 800b0f2:	3388      	adds	r3, #136	; 0x88
 800b0f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0f8:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7fe ffbf 	bl	800a080 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	3301      	adds	r3, #1
 800b10a:	01db      	lsls	r3, r3, #7
 800b10c:	4413      	add	r3, r2
 800b10e:	3304      	adds	r3, #4
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b11a:	d101      	bne.n	800b120 <HRTIM_Timer_ISR+0x2ae>
 800b11c:	2301      	movs	r3, #1
 800b11e:	e000      	b.n	800b122 <HRTIM_Timer_ISR+0x2b0>
 800b120:	2300      	movs	r3, #0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d018      	beq.n	800b158 <HRTIM_Timer_ISR+0x2e6>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1) != RESET)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	01db      	lsls	r3, r3, #7
 800b12e:	4413      	add	r3, r2
 800b130:	338c      	adds	r3, #140	; 0x8c
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b13c:	d10c      	bne.n	800b158 <HRTIM_Timer_ISR+0x2e6>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	01db      	lsls	r3, r3, #7
 800b146:	4413      	add	r3, r2
 800b148:	3388      	adds	r3, #136	; 0x88
 800b14a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b14e:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7fe ffb5 	bl	800a0c2 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	3301      	adds	r3, #1
 800b160:	01db      	lsls	r3, r3, #7
 800b162:	4413      	add	r3, r2
 800b164:	3304      	adds	r3, #4
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b16c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b170:	d101      	bne.n	800b176 <HRTIM_Timer_ISR+0x304>
 800b172:	2301      	movs	r3, #1
 800b174:	e000      	b.n	800b178 <HRTIM_Timer_ISR+0x306>
 800b176:	2300      	movs	r3, #0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d018      	beq.n	800b1ae <HRTIM_Timer_ISR+0x33c>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1) != RESET)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	01db      	lsls	r3, r3, #7
 800b184:	4413      	add	r3, r2
 800b186:	338c      	adds	r3, #140	; 0x8c
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b18e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b192:	d10c      	bne.n	800b1ae <HRTIM_Timer_ISR+0x33c>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	01db      	lsls	r3, r3, #7
 800b19c:	4413      	add	r3, r2
 800b19e:	3388      	adds	r3, #136	; 0x88
 800b1a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b1a4:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f7fe ff95 	bl	800a0d8 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	01db      	lsls	r3, r3, #7
 800b1b8:	4413      	add	r3, r2
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1c6:	d101      	bne.n	800b1cc <HRTIM_Timer_ISR+0x35a>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e000      	b.n	800b1ce <HRTIM_Timer_ISR+0x35c>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d018      	beq.n	800b204 <HRTIM_Timer_ISR+0x392>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2) != RESET)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	01db      	lsls	r3, r3, #7
 800b1da:	4413      	add	r3, r2
 800b1dc:	338c      	adds	r3, #140	; 0x8c
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1e8:	d10c      	bne.n	800b204 <HRTIM_Timer_ISR+0x392>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	01db      	lsls	r3, r3, #7
 800b1f2:	4413      	add	r3, r2
 800b1f4:	3388      	adds	r3, #136	; 0x88
 800b1f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1fa:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 800b1fc:	6839      	ldr	r1, [r7, #0]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7fe ff75 	bl	800a0ee <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	3301      	adds	r3, #1
 800b20c:	01db      	lsls	r3, r3, #7
 800b20e:	4413      	add	r3, r2
 800b210:	3304      	adds	r3, #4
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b21c:	d101      	bne.n	800b222 <HRTIM_Timer_ISR+0x3b0>
 800b21e:	2301      	movs	r3, #1
 800b220:	e000      	b.n	800b224 <HRTIM_Timer_ISR+0x3b2>
 800b222:	2300      	movs	r3, #0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d018      	beq.n	800b25a <HRTIM_Timer_ISR+0x3e8>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2) != RESET)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	01db      	lsls	r3, r3, #7
 800b230:	4413      	add	r3, r2
 800b232:	338c      	adds	r3, #140	; 0x8c
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b23a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b23e:	d10c      	bne.n	800b25a <HRTIM_Timer_ISR+0x3e8>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	01db      	lsls	r3, r3, #7
 800b248:	4413      	add	r3, r2
 800b24a:	3388      	adds	r3, #136	; 0x88
 800b24c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b250:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7fe ff55 	bl	800a104 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	3301      	adds	r3, #1
 800b262:	01db      	lsls	r3, r3, #7
 800b264:	4413      	add	r3, r2
 800b266:	3304      	adds	r3, #4
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b26e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b272:	d101      	bne.n	800b278 <HRTIM_Timer_ISR+0x406>
 800b274:	2301      	movs	r3, #1
 800b276:	e000      	b.n	800b27a <HRTIM_Timer_ISR+0x408>
 800b278:	2300      	movs	r3, #0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d018      	beq.n	800b2b0 <HRTIM_Timer_ISR+0x43e>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST) != RESET)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	01db      	lsls	r3, r3, #7
 800b286:	4413      	add	r3, r2
 800b288:	338c      	adds	r3, #140	; 0x8c
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b294:	d10c      	bne.n	800b2b0 <HRTIM_Timer_ISR+0x43e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	01db      	lsls	r3, r3, #7
 800b29e:	4413      	add	r3, r2
 800b2a0:	3388      	adds	r3, #136	; 0x88
 800b2a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b2a6:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7fe fefe 	bl	800a0ac <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	01db      	lsls	r3, r3, #7
 800b2ba:	4413      	add	r3, r2
 800b2bc:	3304      	adds	r3, #4
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2c8:	d101      	bne.n	800b2ce <HRTIM_Timer_ISR+0x45c>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e000      	b.n	800b2d0 <HRTIM_Timer_ISR+0x45e>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d018      	beq.n	800b306 <HRTIM_Timer_ISR+0x494>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT) != RESET)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	01db      	lsls	r3, r3, #7
 800b2dc:	4413      	add	r3, r2
 800b2de:	338c      	adds	r3, #140	; 0x8c
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2ea:	d10c      	bne.n	800b306 <HRTIM_Timer_ISR+0x494>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	01db      	lsls	r3, r3, #7
 800b2f4:	4413      	add	r3, r2
 800b2f6:	3388      	adds	r3, #136	; 0x88
 800b2f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b2fc:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800b2fe:	6839      	ldr	r1, [r7, #0]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7fe fec8 	bl	800a096 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800b306:	bf00      	nop
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <HRTIM_DMAMasterCplt>:
  * @brief  DMA callback invoked upon master timer related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMAMasterCplt(DMA_HandleTypeDef *hdma)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b084      	sub	sp, #16
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31a:	60fb      	str	r3, [r7, #12]

  if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP1) != (uint32_t)RESET)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d004      	beq.n	800b334 <HRTIM_DMAMasterCplt+0x26>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800b32a:	2106      	movs	r1, #6
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f7fe fe70 	bl	800a012 <HAL_HRTIM_Compare1EventCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 800b332:	e045      	b.n	800b3c0 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP2) != (uint32_t)RESET)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d004      	beq.n	800b34c <HRTIM_DMAMasterCplt+0x3e>
    HAL_HRTIM_Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800b342:	2106      	movs	r1, #6
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f7fe fe6f 	bl	800a028 <HAL_HRTIM_Compare2EventCallback>
}
 800b34a:	e039      	b.n	800b3c0 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP3) != (uint32_t)RESET)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d004      	beq.n	800b364 <HRTIM_DMAMasterCplt+0x56>
    HAL_HRTIM_Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800b35a:	2106      	movs	r1, #6
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f7fe fe6e 	bl	800a03e <HAL_HRTIM_Compare3EventCallback>
}
 800b362:	e02d      	b.n	800b3c0 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP4) != (uint32_t)RESET)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d004      	beq.n	800b37c <HRTIM_DMAMasterCplt+0x6e>
    HAL_HRTIM_Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800b372:	2106      	movs	r1, #6
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f7fe fe6d 	bl	800a054 <HAL_HRTIM_Compare4EventCallback>
}
 800b37a:	e021      	b.n	800b3c0 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_SYNC) != (uint32_t)RESET)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <HRTIM_DMAMasterCplt+0x84>
    HAL_HRTIM_SynchronizationEventCallback(hrtim);
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f7fe fe21 	bl	8009fd2 <HAL_HRTIM_SynchronizationEventCallback>
}
 800b390:	e016      	b.n	800b3c0 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MUPD) != (uint32_t)RESET)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d004      	beq.n	800b3aa <HRTIM_DMAMasterCplt+0x9c>
    HAL_HRTIM_RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800b3a0:	2106      	movs	r1, #6
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f7fe fe1f 	bl	8009fe6 <HAL_HRTIM_RegistersUpdateCallback>
}
 800b3a8:	e00a      	b.n	800b3c0 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MREP) != (uint32_t)RESET)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d003      	beq.n	800b3c0 <HRTIM_DMAMasterCplt+0xb2>
    HAL_HRTIM_RepetitionEventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800b3b8:	2106      	movs	r1, #6
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f7fe fe1e 	bl	8009ffc <HAL_HRTIM_RepetitionEventCallback>
}
 800b3c0:	bf00      	nop
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <HRTIM_DMATimerxCplt>:
  * @brief  DMA callback invoked upon timer A..F related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMATimerxCplt(DMA_HandleTypeDef *hdma)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;

  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d4:	60fb      	str	r3, [r7, #12]

  timer_idx = (uint8_t)GetTimerIdxFromDMAHandle(hrtim, hdma);
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f7ff faaf 	bl	800a93c <GetTimerIdxFromDMAHandle>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	72fb      	strb	r3, [r7, #11]

  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 800b3e2:	7afb      	ldrb	r3, [r7, #11]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00f      	beq.n	800b408 <HRTIM_DMATimerxCplt+0x40>
 800b3e8:	7afb      	ldrb	r3, [r7, #11]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d00c      	beq.n	800b408 <HRTIM_DMATimerxCplt+0x40>
 800b3ee:	7afb      	ldrb	r3, [r7, #11]
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d009      	beq.n	800b408 <HRTIM_DMATimerxCplt+0x40>
 800b3f4:	7afb      	ldrb	r3, [r7, #11]
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	d006      	beq.n	800b408 <HRTIM_DMATimerxCplt+0x40>
 800b3fa:	7afb      	ldrb	r3, [r7, #11]
 800b3fc:	2b04      	cmp	r3, #4
 800b3fe:	d003      	beq.n	800b408 <HRTIM_DMATimerxCplt+0x40>
 800b400:	7afb      	ldrb	r3, [r7, #11]
 800b402:	2b05      	cmp	r3, #5
 800b404:	f040 80ee 	bne.w	800b5e4 <HRTIM_DMATimerxCplt+0x21c>

  if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP1) != (uint32_t)RESET)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	7afb      	ldrb	r3, [r7, #11]
 800b40e:	01db      	lsls	r3, r3, #7
 800b410:	4413      	add	r3, r2
 800b412:	338c      	adds	r3, #140	; 0x8c
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d005      	beq.n	800b42a <HRTIM_DMATimerxCplt+0x62>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, timer_idx);
 800b41e:	7afb      	ldrb	r3, [r7, #11]
 800b420:	4619      	mov	r1, r3
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f7fe fdf5 	bl	800a012 <HAL_HRTIM_Compare1EventCallback>
 800b428:	e0dd      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP2) != (uint32_t)RESET)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	7afb      	ldrb	r3, [r7, #11]
 800b430:	01db      	lsls	r3, r3, #7
 800b432:	4413      	add	r3, r2
 800b434:	338c      	adds	r3, #140	; 0x8c
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d005      	beq.n	800b44c <HRTIM_DMATimerxCplt+0x84>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare2EventCallback(hrtim, timer_idx);
 800b440:	7afb      	ldrb	r3, [r7, #11]
 800b442:	4619      	mov	r1, r3
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f7fe fdef 	bl	800a028 <HAL_HRTIM_Compare2EventCallback>
 800b44a:	e0cc      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP3) != (uint32_t)RESET)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	7afb      	ldrb	r3, [r7, #11]
 800b452:	01db      	lsls	r3, r3, #7
 800b454:	4413      	add	r3, r2
 800b456:	338c      	adds	r3, #140	; 0x8c
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d005      	beq.n	800b46e <HRTIM_DMATimerxCplt+0xa6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare3EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare3EventCallback(hrtim, timer_idx);
 800b462:	7afb      	ldrb	r3, [r7, #11]
 800b464:	4619      	mov	r1, r3
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f7fe fde9 	bl	800a03e <HAL_HRTIM_Compare3EventCallback>
 800b46c:	e0bb      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP4) != (uint32_t)RESET)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	7afb      	ldrb	r3, [r7, #11]
 800b474:	01db      	lsls	r3, r3, #7
 800b476:	4413      	add	r3, r2
 800b478:	338c      	adds	r3, #140	; 0x8c
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d005      	beq.n	800b490 <HRTIM_DMATimerxCplt+0xc8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare4EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare4EventCallback(hrtim, timer_idx);
 800b484:	7afb      	ldrb	r3, [r7, #11]
 800b486:	4619      	mov	r1, r3
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f7fe fde3 	bl	800a054 <HAL_HRTIM_Compare4EventCallback>
 800b48e:	e0aa      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_UPD) != (uint32_t)RESET)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	7afb      	ldrb	r3, [r7, #11]
 800b496:	01db      	lsls	r3, r3, #7
 800b498:	4413      	add	r3, r2
 800b49a:	338c      	adds	r3, #140	; 0x8c
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d005      	beq.n	800b4b2 <HRTIM_DMATimerxCplt+0xea>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RegistersUpdateCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RegistersUpdateCallback(hrtim, timer_idx);
 800b4a6:	7afb      	ldrb	r3, [r7, #11]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f7fe fd9b 	bl	8009fe6 <HAL_HRTIM_RegistersUpdateCallback>
 800b4b0:	e099      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT1) != (uint32_t)RESET)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	7afb      	ldrb	r3, [r7, #11]
 800b4b8:	01db      	lsls	r3, r3, #7
 800b4ba:	4413      	add	r3, r2
 800b4bc:	338c      	adds	r3, #140	; 0x8c
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d005      	beq.n	800b4d4 <HRTIM_DMATimerxCplt+0x10c>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture1EventCallback(hrtim, timer_idx);
 800b4c8:	7afb      	ldrb	r3, [r7, #11]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f7fe fdcc 	bl	800a06a <HAL_HRTIM_Capture1EventCallback>
 800b4d2:	e088      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT2) != (uint32_t)RESET)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	7afb      	ldrb	r3, [r7, #11]
 800b4da:	01db      	lsls	r3, r3, #7
 800b4dc:	4413      	add	r3, r2
 800b4de:	338c      	adds	r3, #140	; 0x8c
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d005      	beq.n	800b4f6 <HRTIM_DMATimerxCplt+0x12e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture2EventCallback(hrtim, timer_idx);
 800b4ea:	7afb      	ldrb	r3, [r7, #11]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f7fe fdc6 	bl	800a080 <HAL_HRTIM_Capture2EventCallback>
 800b4f4:	e077      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET1) != (uint32_t)RESET)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	7afb      	ldrb	r3, [r7, #11]
 800b4fc:	01db      	lsls	r3, r3, #7
 800b4fe:	4413      	add	r3, r2
 800b500:	338c      	adds	r3, #140	; 0x8c
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d005      	beq.n	800b518 <HRTIM_DMATimerxCplt+0x150>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1SetCallback(hrtim, timer_idx);
 800b50c:	7afb      	ldrb	r3, [r7, #11]
 800b50e:	4619      	mov	r1, r3
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f7fe fdd6 	bl	800a0c2 <HAL_HRTIM_Output1SetCallback>
 800b516:	e066      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST1) != (uint32_t)RESET)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	7afb      	ldrb	r3, [r7, #11]
 800b51e:	01db      	lsls	r3, r3, #7
 800b520:	4413      	add	r3, r2
 800b522:	338c      	adds	r3, #140	; 0x8c
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d005      	beq.n	800b53a <HRTIM_DMATimerxCplt+0x172>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1ResetCallback(hrtim, timer_idx);
 800b52e:	7afb      	ldrb	r3, [r7, #11]
 800b530:	4619      	mov	r1, r3
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f7fe fdd0 	bl	800a0d8 <HAL_HRTIM_Output1ResetCallback>
 800b538:	e055      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET2) != (uint32_t)RESET)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	7afb      	ldrb	r3, [r7, #11]
 800b540:	01db      	lsls	r3, r3, #7
 800b542:	4413      	add	r3, r2
 800b544:	338c      	adds	r3, #140	; 0x8c
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d005      	beq.n	800b55c <HRTIM_DMATimerxCplt+0x194>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2SetCallback(hrtim, timer_idx);
 800b550:	7afb      	ldrb	r3, [r7, #11]
 800b552:	4619      	mov	r1, r3
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f7fe fdca 	bl	800a0ee <HAL_HRTIM_Output2SetCallback>
 800b55a:	e044      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST2) != (uint32_t)RESET)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	7afb      	ldrb	r3, [r7, #11]
 800b562:	01db      	lsls	r3, r3, #7
 800b564:	4413      	add	r3, r2
 800b566:	338c      	adds	r3, #140	; 0x8c
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d005      	beq.n	800b57e <HRTIM_DMATimerxCplt+0x1b6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2ResetCallback(hrtim, timer_idx);
 800b572:	7afb      	ldrb	r3, [r7, #11]
 800b574:	4619      	mov	r1, r3
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f7fe fdc4 	bl	800a104 <HAL_HRTIM_Output2ResetCallback>
 800b57c:	e033      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST) != (uint32_t)RESET)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	7afb      	ldrb	r3, [r7, #11]
 800b584:	01db      	lsls	r3, r3, #7
 800b586:	4413      	add	r3, r2
 800b588:	338c      	adds	r3, #140	; 0x8c
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d005      	beq.n	800b5a0 <HRTIM_DMATimerxCplt+0x1d8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->CounterResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_CounterResetCallback(hrtim, timer_idx);
 800b594:	7afb      	ldrb	r3, [r7, #11]
 800b596:	4619      	mov	r1, r3
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f7fe fd87 	bl	800a0ac <HAL_HRTIM_CounterResetCallback>
 800b59e:	e022      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_DLYPRT) != (uint32_t)RESET)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	7afb      	ldrb	r3, [r7, #11]
 800b5a6:	01db      	lsls	r3, r3, #7
 800b5a8:	4413      	add	r3, r2
 800b5aa:	338c      	adds	r3, #140	; 0x8c
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d005      	beq.n	800b5c2 <HRTIM_DMATimerxCplt+0x1fa>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->DelayedProtectionCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_DelayedProtectionCallback(hrtim, timer_idx);
 800b5b6:	7afb      	ldrb	r3, [r7, #11]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f7fe fd6b 	bl	800a096 <HAL_HRTIM_DelayedProtectionCallback>
 800b5c0:	e011      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_REP) != (uint32_t)RESET)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	7afb      	ldrb	r3, [r7, #11]
 800b5c8:	01db      	lsls	r3, r3, #7
 800b5ca:	4413      	add	r3, r2
 800b5cc:	338c      	adds	r3, #140	; 0x8c
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d006      	beq.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RepetitionEventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RepetitionEventCallback(hrtim, timer_idx);
 800b5d8:	7afb      	ldrb	r3, [r7, #11]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f7fe fd0d 	bl	8009ffc <HAL_HRTIM_RepetitionEventCallback>
 800b5e2:	e000      	b.n	800b5e6 <HRTIM_DMATimerxCplt+0x21e>
  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 800b5e4:	bf00      	nop
  }
  else
  {
    /* nothing to do */
  }
}
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <HRTIM_DMAError>:
* @brief  DMA error callback
* @param  hdma pointer to DMA handle.
* @retval None
*/
static void HRTIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->ErrorCallback(hrtim);
#else
  HAL_HRTIM_ErrorCallback(hrtim);
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f7fe fd8d 	bl	800a11a <HAL_HRTIM_ErrorCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
}
 800b600:	bf00      	nop
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d141      	bne.n	800b69a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b616:	4b4b      	ldr	r3, [pc, #300]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b61e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b622:	d131      	bne.n	800b688 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b624:	4b47      	ldr	r3, [pc, #284]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b62a:	4a46      	ldr	r2, [pc, #280]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b62c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b630:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b634:	4b43      	ldr	r3, [pc, #268]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b63c:	4a41      	ldr	r2, [pc, #260]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b63e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b642:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b644:	4b40      	ldr	r3, [pc, #256]	; (800b748 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2232      	movs	r2, #50	; 0x32
 800b64a:	fb02 f303 	mul.w	r3, r2, r3
 800b64e:	4a3f      	ldr	r2, [pc, #252]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b650:	fba2 2303 	umull	r2, r3, r2, r3
 800b654:	0c9b      	lsrs	r3, r3, #18
 800b656:	3301      	adds	r3, #1
 800b658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b65a:	e002      	b.n	800b662 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	3b01      	subs	r3, #1
 800b660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b662:	4b38      	ldr	r3, [pc, #224]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b66a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b66e:	d102      	bne.n	800b676 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1f2      	bne.n	800b65c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b676:	4b33      	ldr	r3, [pc, #204]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b678:	695b      	ldr	r3, [r3, #20]
 800b67a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b67e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b682:	d158      	bne.n	800b736 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b684:	2303      	movs	r3, #3
 800b686:	e057      	b.n	800b738 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b688:	4b2e      	ldr	r3, [pc, #184]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b68e:	4a2d      	ldr	r2, [pc, #180]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b698:	e04d      	b.n	800b736 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6a0:	d141      	bne.n	800b726 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b6a2:	4b28      	ldr	r3, [pc, #160]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b6aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6ae:	d131      	bne.n	800b714 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b6b0:	4b24      	ldr	r3, [pc, #144]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6b6:	4a23      	ldr	r2, [pc, #140]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b6c0:	4b20      	ldr	r3, [pc, #128]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b6c8:	4a1e      	ldr	r2, [pc, #120]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b6d0:	4b1d      	ldr	r3, [pc, #116]	; (800b748 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2232      	movs	r2, #50	; 0x32
 800b6d6:	fb02 f303 	mul.w	r3, r2, r3
 800b6da:	4a1c      	ldr	r2, [pc, #112]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b6dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b6e0:	0c9b      	lsrs	r3, r3, #18
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b6e6:	e002      	b.n	800b6ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b6ee:	4b15      	ldr	r3, [pc, #84]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6f0:	695b      	ldr	r3, [r3, #20]
 800b6f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6fa:	d102      	bne.n	800b702 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1f2      	bne.n	800b6e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b702:	4b10      	ldr	r3, [pc, #64]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b70a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b70e:	d112      	bne.n	800b736 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b710:	2303      	movs	r3, #3
 800b712:	e011      	b.n	800b738 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b714:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b71a:	4a0a      	ldr	r2, [pc, #40]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b71c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b724:	e007      	b.n	800b736 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b726:	4b07      	ldr	r3, [pc, #28]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b72e:	4a05      	ldr	r2, [pc, #20]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b730:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b734:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3714      	adds	r7, #20
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr
 800b744:	40007000 	.word	0x40007000
 800b748:	20000004 	.word	0x20000004
 800b74c:	431bde83 	.word	0x431bde83

0800b750 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b750:	b480      	push	{r7}
 800b752:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b754:	4b05      	ldr	r3, [pc, #20]	; (800b76c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	4a04      	ldr	r2, [pc, #16]	; (800b76c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b75a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b75e:	6093      	str	r3, [r2, #8]
}
 800b760:	bf00      	nop
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	40007000 	.word	0x40007000

0800b770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b088      	sub	sp, #32
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e308      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d075      	beq.n	800b87a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b78e:	4ba3      	ldr	r3, [pc, #652]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	f003 030c 	and.w	r3, r3, #12
 800b796:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b798:	4ba0      	ldr	r3, [pc, #640]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	f003 0303 	and.w	r3, r3, #3
 800b7a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	2b0c      	cmp	r3, #12
 800b7a6:	d102      	bne.n	800b7ae <HAL_RCC_OscConfig+0x3e>
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	d002      	beq.n	800b7b4 <HAL_RCC_OscConfig+0x44>
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	2b08      	cmp	r3, #8
 800b7b2:	d10b      	bne.n	800b7cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7b4:	4b99      	ldr	r3, [pc, #612]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d05b      	beq.n	800b878 <HAL_RCC_OscConfig+0x108>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d157      	bne.n	800b878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e2e3      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d4:	d106      	bne.n	800b7e4 <HAL_RCC_OscConfig+0x74>
 800b7d6:	4b91      	ldr	r3, [pc, #580]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a90      	ldr	r2, [pc, #576]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b7dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	e01d      	b.n	800b820 <HAL_RCC_OscConfig+0xb0>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7ec:	d10c      	bne.n	800b808 <HAL_RCC_OscConfig+0x98>
 800b7ee:	4b8b      	ldr	r3, [pc, #556]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a8a      	ldr	r2, [pc, #552]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b7f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7f8:	6013      	str	r3, [r2, #0]
 800b7fa:	4b88      	ldr	r3, [pc, #544]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a87      	ldr	r2, [pc, #540]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b804:	6013      	str	r3, [r2, #0]
 800b806:	e00b      	b.n	800b820 <HAL_RCC_OscConfig+0xb0>
 800b808:	4b84      	ldr	r3, [pc, #528]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a83      	ldr	r2, [pc, #524]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b80e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b812:	6013      	str	r3, [r2, #0]
 800b814:	4b81      	ldr	r3, [pc, #516]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a80      	ldr	r2, [pc, #512]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b81a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b81e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d013      	beq.n	800b850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b828:	f7fa fd08 	bl	800623c <HAL_GetTick>
 800b82c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b82e:	e008      	b.n	800b842 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b830:	f7fa fd04 	bl	800623c <HAL_GetTick>
 800b834:	4602      	mov	r2, r0
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	2b64      	cmp	r3, #100	; 0x64
 800b83c:	d901      	bls.n	800b842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b83e:	2303      	movs	r3, #3
 800b840:	e2a8      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b842:	4b76      	ldr	r3, [pc, #472]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d0f0      	beq.n	800b830 <HAL_RCC_OscConfig+0xc0>
 800b84e:	e014      	b.n	800b87a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b850:	f7fa fcf4 	bl	800623c <HAL_GetTick>
 800b854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b856:	e008      	b.n	800b86a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b858:	f7fa fcf0 	bl	800623c <HAL_GetTick>
 800b85c:	4602      	mov	r2, r0
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	2b64      	cmp	r3, #100	; 0x64
 800b864:	d901      	bls.n	800b86a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b866:	2303      	movs	r3, #3
 800b868:	e294      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b86a:	4b6c      	ldr	r3, [pc, #432]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1f0      	bne.n	800b858 <HAL_RCC_OscConfig+0xe8>
 800b876:	e000      	b.n	800b87a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f003 0302 	and.w	r3, r3, #2
 800b882:	2b00      	cmp	r3, #0
 800b884:	d075      	beq.n	800b972 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b886:	4b65      	ldr	r3, [pc, #404]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	f003 030c 	and.w	r3, r3, #12
 800b88e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b890:	4b62      	ldr	r3, [pc, #392]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	f003 0303 	and.w	r3, r3, #3
 800b898:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	2b0c      	cmp	r3, #12
 800b89e:	d102      	bne.n	800b8a6 <HAL_RCC_OscConfig+0x136>
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d002      	beq.n	800b8ac <HAL_RCC_OscConfig+0x13c>
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	2b04      	cmp	r3, #4
 800b8aa:	d11f      	bne.n	800b8ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b8ac:	4b5b      	ldr	r3, [pc, #364]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d005      	beq.n	800b8c4 <HAL_RCC_OscConfig+0x154>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d101      	bne.n	800b8c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e267      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8c4:	4b55      	ldr	r3, [pc, #340]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	061b      	lsls	r3, r3, #24
 800b8d2:	4952      	ldr	r1, [pc, #328]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b8d8:	4b51      	ldr	r3, [pc, #324]	; (800ba20 <HAL_RCC_OscConfig+0x2b0>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fa fc61 	bl	80061a4 <HAL_InitTick>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d043      	beq.n	800b970 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e253      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d023      	beq.n	800b93c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b8f4:	4b49      	ldr	r3, [pc, #292]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a48      	ldr	r2, [pc, #288]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b8fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b900:	f7fa fc9c 	bl	800623c <HAL_GetTick>
 800b904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b906:	e008      	b.n	800b91a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b908:	f7fa fc98 	bl	800623c <HAL_GetTick>
 800b90c:	4602      	mov	r2, r0
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	2b02      	cmp	r3, #2
 800b914:	d901      	bls.n	800b91a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b916:	2303      	movs	r3, #3
 800b918:	e23c      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b91a:	4b40      	ldr	r3, [pc, #256]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b922:	2b00      	cmp	r3, #0
 800b924:	d0f0      	beq.n	800b908 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b926:	4b3d      	ldr	r3, [pc, #244]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	061b      	lsls	r3, r3, #24
 800b934:	4939      	ldr	r1, [pc, #228]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b936:	4313      	orrs	r3, r2
 800b938:	604b      	str	r3, [r1, #4]
 800b93a:	e01a      	b.n	800b972 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b93c:	4b37      	ldr	r3, [pc, #220]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a36      	ldr	r2, [pc, #216]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b948:	f7fa fc78 	bl	800623c <HAL_GetTick>
 800b94c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b94e:	e008      	b.n	800b962 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b950:	f7fa fc74 	bl	800623c <HAL_GetTick>
 800b954:	4602      	mov	r2, r0
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d901      	bls.n	800b962 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b95e:	2303      	movs	r3, #3
 800b960:	e218      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b962:	4b2e      	ldr	r3, [pc, #184]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1f0      	bne.n	800b950 <HAL_RCC_OscConfig+0x1e0>
 800b96e:	e000      	b.n	800b972 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b970:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f003 0308 	and.w	r3, r3, #8
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d03c      	beq.n	800b9f8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	695b      	ldr	r3, [r3, #20]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d01c      	beq.n	800b9c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b986:	4b25      	ldr	r3, [pc, #148]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b98c:	4a23      	ldr	r2, [pc, #140]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b98e:	f043 0301 	orr.w	r3, r3, #1
 800b992:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b996:	f7fa fc51 	bl	800623c <HAL_GetTick>
 800b99a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b99c:	e008      	b.n	800b9b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b99e:	f7fa fc4d 	bl	800623c <HAL_GetTick>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	d901      	bls.n	800b9b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b9ac:	2303      	movs	r3, #3
 800b9ae:	e1f1      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b9b0:	4b1a      	ldr	r3, [pc, #104]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b9b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d0ef      	beq.n	800b99e <HAL_RCC_OscConfig+0x22e>
 800b9be:	e01b      	b.n	800b9f8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b9c0:	4b16      	ldr	r3, [pc, #88]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b9c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9c6:	4a15      	ldr	r2, [pc, #84]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b9c8:	f023 0301 	bic.w	r3, r3, #1
 800b9cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9d0:	f7fa fc34 	bl	800623c <HAL_GetTick>
 800b9d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b9d6:	e008      	b.n	800b9ea <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9d8:	f7fa fc30 	bl	800623c <HAL_GetTick>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d901      	bls.n	800b9ea <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	e1d4      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b9ea:	4b0c      	ldr	r3, [pc, #48]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800b9ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9f0:	f003 0302 	and.w	r3, r3, #2
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1ef      	bne.n	800b9d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f003 0304 	and.w	r3, r3, #4
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 80ab 	beq.w	800bb5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba06:	2300      	movs	r3, #0
 800ba08:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ba0a:	4b04      	ldr	r3, [pc, #16]	; (800ba1c <HAL_RCC_OscConfig+0x2ac>)
 800ba0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d106      	bne.n	800ba24 <HAL_RCC_OscConfig+0x2b4>
 800ba16:	2301      	movs	r3, #1
 800ba18:	e005      	b.n	800ba26 <HAL_RCC_OscConfig+0x2b6>
 800ba1a:	bf00      	nop
 800ba1c:	40021000 	.word	0x40021000
 800ba20:	20000008 	.word	0x20000008
 800ba24:	2300      	movs	r3, #0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00d      	beq.n	800ba46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba2a:	4baf      	ldr	r3, [pc, #700]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800ba2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba2e:	4aae      	ldr	r2, [pc, #696]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800ba30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba34:	6593      	str	r3, [r2, #88]	; 0x58
 800ba36:	4bac      	ldr	r3, [pc, #688]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800ba38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba3e:	60fb      	str	r3, [r7, #12]
 800ba40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ba42:	2301      	movs	r3, #1
 800ba44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba46:	4ba9      	ldr	r3, [pc, #676]	; (800bcec <HAL_RCC_OscConfig+0x57c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d118      	bne.n	800ba84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba52:	4ba6      	ldr	r3, [pc, #664]	; (800bcec <HAL_RCC_OscConfig+0x57c>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4aa5      	ldr	r2, [pc, #660]	; (800bcec <HAL_RCC_OscConfig+0x57c>)
 800ba58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba5e:	f7fa fbed 	bl	800623c <HAL_GetTick>
 800ba62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba64:	e008      	b.n	800ba78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba66:	f7fa fbe9 	bl	800623c <HAL_GetTick>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	d901      	bls.n	800ba78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ba74:	2303      	movs	r3, #3
 800ba76:	e18d      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba78:	4b9c      	ldr	r3, [pc, #624]	; (800bcec <HAL_RCC_OscConfig+0x57c>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d0f0      	beq.n	800ba66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d108      	bne.n	800ba9e <HAL_RCC_OscConfig+0x32e>
 800ba8c:	4b96      	ldr	r3, [pc, #600]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800ba8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba92:	4a95      	ldr	r2, [pc, #596]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800ba94:	f043 0301 	orr.w	r3, r3, #1
 800ba98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba9c:	e024      	b.n	800bae8 <HAL_RCC_OscConfig+0x378>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	2b05      	cmp	r3, #5
 800baa4:	d110      	bne.n	800bac8 <HAL_RCC_OscConfig+0x358>
 800baa6:	4b90      	ldr	r3, [pc, #576]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800baa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baac:	4a8e      	ldr	r2, [pc, #568]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800baae:	f043 0304 	orr.w	r3, r3, #4
 800bab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bab6:	4b8c      	ldr	r3, [pc, #560]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800babc:	4a8a      	ldr	r2, [pc, #552]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800babe:	f043 0301 	orr.w	r3, r3, #1
 800bac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bac6:	e00f      	b.n	800bae8 <HAL_RCC_OscConfig+0x378>
 800bac8:	4b87      	ldr	r3, [pc, #540]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800baca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bace:	4a86      	ldr	r2, [pc, #536]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bad0:	f023 0301 	bic.w	r3, r3, #1
 800bad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bad8:	4b83      	ldr	r3, [pc, #524]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bade:	4a82      	ldr	r2, [pc, #520]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bae0:	f023 0304 	bic.w	r3, r3, #4
 800bae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d016      	beq.n	800bb1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baf0:	f7fa fba4 	bl	800623c <HAL_GetTick>
 800baf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800baf6:	e00a      	b.n	800bb0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800baf8:	f7fa fba0 	bl	800623c <HAL_GetTick>
 800bafc:	4602      	mov	r2, r0
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d901      	bls.n	800bb0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800bb0a:	2303      	movs	r3, #3
 800bb0c:	e142      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb0e:	4b76      	ldr	r3, [pc, #472]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bb10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb14:	f003 0302 	and.w	r3, r3, #2
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d0ed      	beq.n	800baf8 <HAL_RCC_OscConfig+0x388>
 800bb1c:	e015      	b.n	800bb4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb1e:	f7fa fb8d 	bl	800623c <HAL_GetTick>
 800bb22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb24:	e00a      	b.n	800bb3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb26:	f7fa fb89 	bl	800623c <HAL_GetTick>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d901      	bls.n	800bb3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800bb38:	2303      	movs	r3, #3
 800bb3a:	e12b      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb3c:	4b6a      	ldr	r3, [pc, #424]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bb3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb42:	f003 0302 	and.w	r3, r3, #2
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1ed      	bne.n	800bb26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bb4a:	7ffb      	ldrb	r3, [r7, #31]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d105      	bne.n	800bb5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb50:	4b65      	ldr	r3, [pc, #404]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bb52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb54:	4a64      	ldr	r2, [pc, #400]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bb56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 0320 	and.w	r3, r3, #32
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d03c      	beq.n	800bbe2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d01c      	beq.n	800bbaa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bb70:	4b5d      	ldr	r3, [pc, #372]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bb72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb76:	4a5c      	ldr	r2, [pc, #368]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bb78:	f043 0301 	orr.w	r3, r3, #1
 800bb7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb80:	f7fa fb5c 	bl	800623c <HAL_GetTick>
 800bb84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bb86:	e008      	b.n	800bb9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb88:	f7fa fb58 	bl	800623c <HAL_GetTick>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	1ad3      	subs	r3, r2, r3
 800bb92:	2b02      	cmp	r3, #2
 800bb94:	d901      	bls.n	800bb9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800bb96:	2303      	movs	r3, #3
 800bb98:	e0fc      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bb9a:	4b53      	ldr	r3, [pc, #332]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bb9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bba0:	f003 0302 	and.w	r3, r3, #2
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d0ef      	beq.n	800bb88 <HAL_RCC_OscConfig+0x418>
 800bba8:	e01b      	b.n	800bbe2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bbaa:	4b4f      	ldr	r3, [pc, #316]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bbac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bbb0:	4a4d      	ldr	r2, [pc, #308]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bbb2:	f023 0301 	bic.w	r3, r3, #1
 800bbb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbba:	f7fa fb3f 	bl	800623c <HAL_GetTick>
 800bbbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bbc0:	e008      	b.n	800bbd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bbc2:	f7fa fb3b 	bl	800623c <HAL_GetTick>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	d901      	bls.n	800bbd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800bbd0:	2303      	movs	r3, #3
 800bbd2:	e0df      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bbd4:	4b44      	ldr	r3, [pc, #272]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bbd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bbda:	f003 0302 	and.w	r3, r3, #2
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1ef      	bne.n	800bbc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f000 80d3 	beq.w	800bd92 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bbec:	4b3e      	ldr	r3, [pc, #248]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	f003 030c 	and.w	r3, r3, #12
 800bbf4:	2b0c      	cmp	r3, #12
 800bbf6:	f000 808d 	beq.w	800bd14 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	69db      	ldr	r3, [r3, #28]
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d15a      	bne.n	800bcb8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc02:	4b39      	ldr	r3, [pc, #228]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a38      	ldr	r2, [pc, #224]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bc08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc0e:	f7fa fb15 	bl	800623c <HAL_GetTick>
 800bc12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc14:	e008      	b.n	800bc28 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc16:	f7fa fb11 	bl	800623c <HAL_GetTick>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d901      	bls.n	800bc28 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800bc24:	2303      	movs	r3, #3
 800bc26:	e0b5      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc28:	4b2f      	ldr	r3, [pc, #188]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1f0      	bne.n	800bc16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc34:	4b2c      	ldr	r3, [pc, #176]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bc36:	68da      	ldr	r2, [r3, #12]
 800bc38:	4b2d      	ldr	r3, [pc, #180]	; (800bcf0 <HAL_RCC_OscConfig+0x580>)
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	6a11      	ldr	r1, [r2, #32]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bc44:	3a01      	subs	r2, #1
 800bc46:	0112      	lsls	r2, r2, #4
 800bc48:	4311      	orrs	r1, r2
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800bc4e:	0212      	lsls	r2, r2, #8
 800bc50:	4311      	orrs	r1, r2
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc56:	0852      	lsrs	r2, r2, #1
 800bc58:	3a01      	subs	r2, #1
 800bc5a:	0552      	lsls	r2, r2, #21
 800bc5c:	4311      	orrs	r1, r2
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bc62:	0852      	lsrs	r2, r2, #1
 800bc64:	3a01      	subs	r2, #1
 800bc66:	0652      	lsls	r2, r2, #25
 800bc68:	4311      	orrs	r1, r2
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bc6e:	06d2      	lsls	r2, r2, #27
 800bc70:	430a      	orrs	r2, r1
 800bc72:	491d      	ldr	r1, [pc, #116]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bc74:	4313      	orrs	r3, r2
 800bc76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc78:	4b1b      	ldr	r3, [pc, #108]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a1a      	ldr	r2, [pc, #104]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bc7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bc84:	4b18      	ldr	r3, [pc, #96]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	4a17      	ldr	r2, [pc, #92]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bc8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc90:	f7fa fad4 	bl	800623c <HAL_GetTick>
 800bc94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc96:	e008      	b.n	800bcaa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc98:	f7fa fad0 	bl	800623c <HAL_GetTick>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d901      	bls.n	800bcaa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e074      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcaa:	4b0f      	ldr	r3, [pc, #60]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d0f0      	beq.n	800bc98 <HAL_RCC_OscConfig+0x528>
 800bcb6:	e06c      	b.n	800bd92 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcb8:	4b0b      	ldr	r3, [pc, #44]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a0a      	ldr	r2, [pc, #40]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bcbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bcc2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800bcc4:	4b08      	ldr	r3, [pc, #32]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	4a07      	ldr	r2, [pc, #28]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bcca:	f023 0303 	bic.w	r3, r3, #3
 800bcce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800bcd0:	4b05      	ldr	r3, [pc, #20]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	4a04      	ldr	r2, [pc, #16]	; (800bce8 <HAL_RCC_OscConfig+0x578>)
 800bcd6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800bcda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bce0:	f7fa faac 	bl	800623c <HAL_GetTick>
 800bce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bce6:	e00e      	b.n	800bd06 <HAL_RCC_OscConfig+0x596>
 800bce8:	40021000 	.word	0x40021000
 800bcec:	40007000 	.word	0x40007000
 800bcf0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcf4:	f7fa faa2 	bl	800623c <HAL_GetTick>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d901      	bls.n	800bd06 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e046      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd06:	4b25      	ldr	r3, [pc, #148]	; (800bd9c <HAL_RCC_OscConfig+0x62c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1f0      	bne.n	800bcf4 <HAL_RCC_OscConfig+0x584>
 800bd12:	e03e      	b.n	800bd92 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d101      	bne.n	800bd20 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e039      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800bd20:	4b1e      	ldr	r3, [pc, #120]	; (800bd9c <HAL_RCC_OscConfig+0x62c>)
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	f003 0203 	and.w	r2, r3, #3
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a1b      	ldr	r3, [r3, #32]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d12c      	bne.n	800bd8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d123      	bne.n	800bd8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d11b      	bne.n	800bd8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d113      	bne.n	800bd8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd70:	085b      	lsrs	r3, r3, #1
 800bd72:	3b01      	subs	r3, #1
 800bd74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d109      	bne.n	800bd8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd84:	085b      	lsrs	r3, r3, #1
 800bd86:	3b01      	subs	r3, #1
 800bd88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d001      	beq.n	800bd92 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e000      	b.n	800bd94 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3720      	adds	r7, #32
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	40021000 	.word	0x40021000

0800bda0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d101      	bne.n	800bdb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e11e      	b.n	800bff6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bdb8:	4b91      	ldr	r3, [pc, #580]	; (800c000 <HAL_RCC_ClockConfig+0x260>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 030f 	and.w	r3, r3, #15
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d910      	bls.n	800bde8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdc6:	4b8e      	ldr	r3, [pc, #568]	; (800c000 <HAL_RCC_ClockConfig+0x260>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f023 020f 	bic.w	r2, r3, #15
 800bdce:	498c      	ldr	r1, [pc, #560]	; (800c000 <HAL_RCC_ClockConfig+0x260>)
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdd6:	4b8a      	ldr	r3, [pc, #552]	; (800c000 <HAL_RCC_ClockConfig+0x260>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f003 030f 	and.w	r3, r3, #15
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d001      	beq.n	800bde8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e106      	b.n	800bff6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f003 0301 	and.w	r3, r3, #1
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d073      	beq.n	800bedc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	2b03      	cmp	r3, #3
 800bdfa:	d129      	bne.n	800be50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bdfc:	4b81      	ldr	r3, [pc, #516]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be04:	2b00      	cmp	r3, #0
 800be06:	d101      	bne.n	800be0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	e0f4      	b.n	800bff6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800be0c:	f000 f988 	bl	800c120 <RCC_GetSysClockFreqFromPLLSource>
 800be10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	4a7c      	ldr	r2, [pc, #496]	; (800c008 <HAL_RCC_ClockConfig+0x268>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d93f      	bls.n	800be9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800be1a:	4b7a      	ldr	r3, [pc, #488]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d009      	beq.n	800be3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d033      	beq.n	800be9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800be36:	2b00      	cmp	r3, #0
 800be38:	d12f      	bne.n	800be9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800be3a:	4b72      	ldr	r3, [pc, #456]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be42:	4a70      	ldr	r2, [pc, #448]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800be44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800be4a:	2380      	movs	r3, #128	; 0x80
 800be4c:	617b      	str	r3, [r7, #20]
 800be4e:	e024      	b.n	800be9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	2b02      	cmp	r3, #2
 800be56:	d107      	bne.n	800be68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be58:	4b6a      	ldr	r3, [pc, #424]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d109      	bne.n	800be78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	e0c6      	b.n	800bff6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800be68:	4b66      	ldr	r3, [pc, #408]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be70:	2b00      	cmp	r3, #0
 800be72:	d101      	bne.n	800be78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	e0be      	b.n	800bff6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800be78:	f000 f8ce 	bl	800c018 <HAL_RCC_GetSysClockFreq>
 800be7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	4a61      	ldr	r2, [pc, #388]	; (800c008 <HAL_RCC_ClockConfig+0x268>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d909      	bls.n	800be9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800be86:	4b5f      	ldr	r3, [pc, #380]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be8e:	4a5d      	ldr	r2, [pc, #372]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800be90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800be96:	2380      	movs	r3, #128	; 0x80
 800be98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800be9a:	4b5a      	ldr	r3, [pc, #360]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	f023 0203 	bic.w	r2, r3, #3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	4957      	ldr	r1, [pc, #348]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bea8:	4313      	orrs	r3, r2
 800beaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beac:	f7fa f9c6 	bl	800623c <HAL_GetTick>
 800beb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800beb2:	e00a      	b.n	800beca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800beb4:	f7fa f9c2 	bl	800623c <HAL_GetTick>
 800beb8:	4602      	mov	r2, r0
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	f241 3288 	movw	r2, #5000	; 0x1388
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d901      	bls.n	800beca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800bec6:	2303      	movs	r3, #3
 800bec8:	e095      	b.n	800bff6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800beca:	4b4e      	ldr	r3, [pc, #312]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	f003 020c 	and.w	r2, r3, #12
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	429a      	cmp	r2, r3
 800beda:	d1eb      	bne.n	800beb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d023      	beq.n	800bf30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 0304 	and.w	r3, r3, #4
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d005      	beq.n	800bf00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bef4:	4b43      	ldr	r3, [pc, #268]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	4a42      	ldr	r2, [pc, #264]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800befa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800befe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 0308 	and.w	r3, r3, #8
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d007      	beq.n	800bf1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bf0c:	4b3d      	ldr	r3, [pc, #244]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bf14:	4a3b      	ldr	r2, [pc, #236]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bf16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bf1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf1c:	4b39      	ldr	r3, [pc, #228]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	4936      	ldr	r1, [pc, #216]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	608b      	str	r3, [r1, #8]
 800bf2e:	e008      	b.n	800bf42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	2b80      	cmp	r3, #128	; 0x80
 800bf34:	d105      	bne.n	800bf42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bf36:	4b33      	ldr	r3, [pc, #204]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	4a32      	ldr	r2, [pc, #200]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bf3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bf42:	4b2f      	ldr	r3, [pc, #188]	; (800c000 <HAL_RCC_ClockConfig+0x260>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f003 030f 	and.w	r3, r3, #15
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d21d      	bcs.n	800bf8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf50:	4b2b      	ldr	r3, [pc, #172]	; (800c000 <HAL_RCC_ClockConfig+0x260>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f023 020f 	bic.w	r2, r3, #15
 800bf58:	4929      	ldr	r1, [pc, #164]	; (800c000 <HAL_RCC_ClockConfig+0x260>)
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bf60:	f7fa f96c 	bl	800623c <HAL_GetTick>
 800bf64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf66:	e00a      	b.n	800bf7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf68:	f7fa f968 	bl	800623c <HAL_GetTick>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d901      	bls.n	800bf7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	e03b      	b.n	800bff6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf7e:	4b20      	ldr	r3, [pc, #128]	; (800c000 <HAL_RCC_ClockConfig+0x260>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 030f 	and.w	r3, r3, #15
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d1ed      	bne.n	800bf68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 0304 	and.w	r3, r3, #4
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d008      	beq.n	800bfaa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bf98:	4b1a      	ldr	r3, [pc, #104]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	4917      	ldr	r1, [pc, #92]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f003 0308 	and.w	r3, r3, #8
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d009      	beq.n	800bfca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bfb6:	4b13      	ldr	r3, [pc, #76]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	490f      	ldr	r1, [pc, #60]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bfca:	f000 f825 	bl	800c018 <HAL_RCC_GetSysClockFreq>
 800bfce:	4601      	mov	r1, r0
 800bfd0:	4b0c      	ldr	r3, [pc, #48]	; (800c004 <HAL_RCC_ClockConfig+0x264>)
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	091b      	lsrs	r3, r3, #4
 800bfd6:	f003 030f 	and.w	r3, r3, #15
 800bfda:	4a0c      	ldr	r2, [pc, #48]	; (800c00c <HAL_RCC_ClockConfig+0x26c>)
 800bfdc:	5cd3      	ldrb	r3, [r2, r3]
 800bfde:	f003 031f 	and.w	r3, r3, #31
 800bfe2:	fa21 f303 	lsr.w	r3, r1, r3
 800bfe6:	4a0a      	ldr	r2, [pc, #40]	; (800c010 <HAL_RCC_ClockConfig+0x270>)
 800bfe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bfea:	4b0a      	ldr	r3, [pc, #40]	; (800c014 <HAL_RCC_ClockConfig+0x274>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fa f8d8 	bl	80061a4 <HAL_InitTick>
 800bff4:	4603      	mov	r3, r0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3718      	adds	r7, #24
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	40022000 	.word	0x40022000
 800c004:	40021000 	.word	0x40021000
 800c008:	04c4b400 	.word	0x04c4b400
 800c00c:	0800dcb4 	.word	0x0800dcb4
 800c010:	20000004 	.word	0x20000004
 800c014:	20000008 	.word	0x20000008

0800c018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c018:	b480      	push	{r7}
 800c01a:	b087      	sub	sp, #28
 800c01c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c01e:	4b2c      	ldr	r3, [pc, #176]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	f003 030c 	and.w	r3, r3, #12
 800c026:	2b04      	cmp	r3, #4
 800c028:	d102      	bne.n	800c030 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c02a:	4b2a      	ldr	r3, [pc, #168]	; (800c0d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c02c:	613b      	str	r3, [r7, #16]
 800c02e:	e047      	b.n	800c0c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c030:	4b27      	ldr	r3, [pc, #156]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	f003 030c 	and.w	r3, r3, #12
 800c038:	2b08      	cmp	r3, #8
 800c03a:	d102      	bne.n	800c042 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c03c:	4b26      	ldr	r3, [pc, #152]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c03e:	613b      	str	r3, [r7, #16]
 800c040:	e03e      	b.n	800c0c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c042:	4b23      	ldr	r3, [pc, #140]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	f003 030c 	and.w	r3, r3, #12
 800c04a:	2b0c      	cmp	r3, #12
 800c04c:	d136      	bne.n	800c0bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c04e:	4b20      	ldr	r3, [pc, #128]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	f003 0303 	and.w	r3, r3, #3
 800c056:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c058:	4b1d      	ldr	r3, [pc, #116]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	091b      	lsrs	r3, r3, #4
 800c05e:	f003 030f 	and.w	r3, r3, #15
 800c062:	3301      	adds	r3, #1
 800c064:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d10c      	bne.n	800c086 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c06c:	4a1a      	ldr	r2, [pc, #104]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	fbb2 f3f3 	udiv	r3, r2, r3
 800c074:	4a16      	ldr	r2, [pc, #88]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c076:	68d2      	ldr	r2, [r2, #12]
 800c078:	0a12      	lsrs	r2, r2, #8
 800c07a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c07e:	fb02 f303 	mul.w	r3, r2, r3
 800c082:	617b      	str	r3, [r7, #20]
      break;
 800c084:	e00c      	b.n	800c0a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c086:	4a13      	ldr	r2, [pc, #76]	; (800c0d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c08e:	4a10      	ldr	r2, [pc, #64]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c090:	68d2      	ldr	r2, [r2, #12]
 800c092:	0a12      	lsrs	r2, r2, #8
 800c094:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c098:	fb02 f303 	mul.w	r3, r2, r3
 800c09c:	617b      	str	r3, [r7, #20]
      break;
 800c09e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c0a0:	4b0b      	ldr	r3, [pc, #44]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	0e5b      	lsrs	r3, r3, #25
 800c0a6:	f003 0303 	and.w	r3, r3, #3
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	005b      	lsls	r3, r3, #1
 800c0ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800c0b0:	697a      	ldr	r2, [r7, #20]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0b8:	613b      	str	r3, [r7, #16]
 800c0ba:	e001      	b.n	800c0c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c0c0:	693b      	ldr	r3, [r7, #16]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	371c      	adds	r7, #28
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop
 800c0d0:	40021000 	.word	0x40021000
 800c0d4:	00f42400 	.word	0x00f42400
 800c0d8:	007a1200 	.word	0x007a1200

0800c0dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c0e0:	4b03      	ldr	r3, [pc, #12]	; (800c0f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	20000004 	.word	0x20000004

0800c0f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c0f8:	f7ff fff0 	bl	800c0dc <HAL_RCC_GetHCLKFreq>
 800c0fc:	4601      	mov	r1, r0
 800c0fe:	4b06      	ldr	r3, [pc, #24]	; (800c118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	0adb      	lsrs	r3, r3, #11
 800c104:	f003 0307 	and.w	r3, r3, #7
 800c108:	4a04      	ldr	r2, [pc, #16]	; (800c11c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c10a:	5cd3      	ldrb	r3, [r2, r3]
 800c10c:	f003 031f 	and.w	r3, r3, #31
 800c110:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c114:	4618      	mov	r0, r3
 800c116:	bd80      	pop	{r7, pc}
 800c118:	40021000 	.word	0x40021000
 800c11c:	0800dcc4 	.word	0x0800dcc4

0800c120 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c120:	b480      	push	{r7}
 800c122:	b087      	sub	sp, #28
 800c124:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c126:	4b1e      	ldr	r3, [pc, #120]	; (800c1a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	f003 0303 	and.w	r3, r3, #3
 800c12e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c130:	4b1b      	ldr	r3, [pc, #108]	; (800c1a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	091b      	lsrs	r3, r3, #4
 800c136:	f003 030f 	and.w	r3, r3, #15
 800c13a:	3301      	adds	r3, #1
 800c13c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	2b03      	cmp	r3, #3
 800c142:	d10c      	bne.n	800c15e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c144:	4a17      	ldr	r2, [pc, #92]	; (800c1a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	fbb2 f3f3 	udiv	r3, r2, r3
 800c14c:	4a14      	ldr	r2, [pc, #80]	; (800c1a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c14e:	68d2      	ldr	r2, [r2, #12]
 800c150:	0a12      	lsrs	r2, r2, #8
 800c152:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c156:	fb02 f303 	mul.w	r3, r2, r3
 800c15a:	617b      	str	r3, [r7, #20]
    break;
 800c15c:	e00c      	b.n	800c178 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c15e:	4a12      	ldr	r2, [pc, #72]	; (800c1a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	fbb2 f3f3 	udiv	r3, r2, r3
 800c166:	4a0e      	ldr	r2, [pc, #56]	; (800c1a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c168:	68d2      	ldr	r2, [r2, #12]
 800c16a:	0a12      	lsrs	r2, r2, #8
 800c16c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c170:	fb02 f303 	mul.w	r3, r2, r3
 800c174:	617b      	str	r3, [r7, #20]
    break;
 800c176:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c178:	4b09      	ldr	r3, [pc, #36]	; (800c1a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	0e5b      	lsrs	r3, r3, #25
 800c17e:	f003 0303 	and.w	r3, r3, #3
 800c182:	3301      	adds	r3, #1
 800c184:	005b      	lsls	r3, r3, #1
 800c186:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c188:	697a      	ldr	r2, [r7, #20]
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c190:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c192:	687b      	ldr	r3, [r7, #4]
}
 800c194:	4618      	mov	r0, r3
 800c196:	371c      	adds	r7, #28
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr
 800c1a0:	40021000 	.word	0x40021000
 800c1a4:	007a1200 	.word	0x007a1200
 800c1a8:	00f42400 	.word	0x00f42400

0800c1ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f000 8098 	beq.w	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c1ce:	4b43      	ldr	r3, [pc, #268]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10d      	bne.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c1da:	4b40      	ldr	r3, [pc, #256]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1de:	4a3f      	ldr	r2, [pc, #252]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1e4:	6593      	str	r3, [r2, #88]	; 0x58
 800c1e6:	4b3d      	ldr	r3, [pc, #244]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1ee:	60bb      	str	r3, [r7, #8]
 800c1f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c1f6:	4b3a      	ldr	r3, [pc, #232]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a39      	ldr	r2, [pc, #228]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c1fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c200:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c202:	f7fa f81b 	bl	800623c <HAL_GetTick>
 800c206:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c208:	e009      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c20a:	f7fa f817 	bl	800623c <HAL_GetTick>
 800c20e:	4602      	mov	r2, r0
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	2b02      	cmp	r3, #2
 800c216:	d902      	bls.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c218:	2303      	movs	r3, #3
 800c21a:	74fb      	strb	r3, [r7, #19]
        break;
 800c21c:	e005      	b.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c21e:	4b30      	ldr	r3, [pc, #192]	; (800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c226:	2b00      	cmp	r3, #0
 800c228:	d0ef      	beq.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c22a:	7cfb      	ldrb	r3, [r7, #19]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d159      	bne.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c230:	4b2a      	ldr	r3, [pc, #168]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c23a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d01e      	beq.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d019      	beq.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c24c:	4b23      	ldr	r3, [pc, #140]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c256:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c258:	4b20      	ldr	r3, [pc, #128]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c25e:	4a1f      	ldr	r2, [pc, #124]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c268:	4b1c      	ldr	r3, [pc, #112]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c26e:	4a1b      	ldr	r2, [pc, #108]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c278:	4a18      	ldr	r2, [pc, #96]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	f003 0301 	and.w	r3, r3, #1
 800c286:	2b00      	cmp	r3, #0
 800c288:	d016      	beq.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c28a:	f7f9 ffd7 	bl	800623c <HAL_GetTick>
 800c28e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c290:	e00b      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c292:	f7f9 ffd3 	bl	800623c <HAL_GetTick>
 800c296:	4602      	mov	r2, r0
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d902      	bls.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	74fb      	strb	r3, [r7, #19]
            break;
 800c2a8:	e006      	b.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c2aa:	4b0c      	ldr	r3, [pc, #48]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2b0:	f003 0302 	and.w	r3, r3, #2
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0ec      	beq.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c2b8:	7cfb      	ldrb	r3, [r7, #19]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10b      	bne.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c2be:	4b07      	ldr	r3, [pc, #28]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2cc:	4903      	ldr	r1, [pc, #12]	; (800c2dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c2d4:	e008      	b.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c2d6:	7cfb      	ldrb	r3, [r7, #19]
 800c2d8:	74bb      	strb	r3, [r7, #18]
 800c2da:	e005      	b.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c2dc:	40021000 	.word	0x40021000
 800c2e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2e4:	7cfb      	ldrb	r3, [r7, #19]
 800c2e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c2e8:	7c7b      	ldrb	r3, [r7, #17]
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d105      	bne.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2ee:	4baf      	ldr	r3, [pc, #700]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c2f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2f2:	4aae      	ldr	r2, [pc, #696]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c2f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00a      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c306:	4ba9      	ldr	r3, [pc, #676]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c30c:	f023 0203 	bic.w	r2, r3, #3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	49a5      	ldr	r1, [pc, #660]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c316:	4313      	orrs	r3, r2
 800c318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 0302 	and.w	r3, r3, #2
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00a      	beq.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c328:	4ba0      	ldr	r3, [pc, #640]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c32e:	f023 020c 	bic.w	r2, r3, #12
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	499d      	ldr	r1, [pc, #628]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c338:	4313      	orrs	r3, r2
 800c33a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 0304 	and.w	r3, r3, #4
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00a      	beq.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c34a:	4b98      	ldr	r3, [pc, #608]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c350:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	68db      	ldr	r3, [r3, #12]
 800c358:	4994      	ldr	r1, [pc, #592]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c35a:	4313      	orrs	r3, r2
 800c35c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 0308 	and.w	r3, r3, #8
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00a      	beq.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c36c:	4b8f      	ldr	r3, [pc, #572]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c36e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c372:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	498c      	ldr	r1, [pc, #560]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c37c:	4313      	orrs	r3, r2
 800c37e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 0310 	and.w	r3, r3, #16
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00a      	beq.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c38e:	4b87      	ldr	r3, [pc, #540]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	695b      	ldr	r3, [r3, #20]
 800c39c:	4983      	ldr	r1, [pc, #524]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0320 	and.w	r3, r3, #32
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00a      	beq.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c3b0:	4b7e      	ldr	r3, [pc, #504]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	497b      	ldr	r1, [pc, #492]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00a      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c3d2:	4b76      	ldr	r3, [pc, #472]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	69db      	ldr	r3, [r3, #28]
 800c3e0:	4972      	ldr	r1, [pc, #456]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00a      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c3f4:	4b6d      	ldr	r3, [pc, #436]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	496a      	ldr	r1, [pc, #424]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c404:	4313      	orrs	r3, r2
 800c406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00a      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c416:	4b65      	ldr	r3, [pc, #404]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c41c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c424:	4961      	ldr	r1, [pc, #388]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c426:	4313      	orrs	r3, r2
 800c428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00a      	beq.n	800c44e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c438:	4b5c      	ldr	r3, [pc, #368]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c43a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c43e:	f023 0203 	bic.w	r2, r3, #3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c446:	4959      	ldr	r1, [pc, #356]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c448:	4313      	orrs	r3, r2
 800c44a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00a      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c45a:	4b54      	ldr	r3, [pc, #336]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c468:	4950      	ldr	r1, [pc, #320]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d015      	beq.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c47c:	4b4b      	ldr	r3, [pc, #300]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48a:	4948      	ldr	r1, [pc, #288]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c48c:	4313      	orrs	r3, r2
 800c48e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c49a:	d105      	bne.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c49c:	4b43      	ldr	r3, [pc, #268]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	4a42      	ldr	r2, [pc, #264]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d015      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c4b4:	4b3d      	ldr	r3, [pc, #244]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c2:	493a      	ldr	r1, [pc, #232]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4d2:	d105      	bne.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c4d4:	4b35      	ldr	r3, [pc, #212]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	4a34      	ldr	r2, [pc, #208]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d015      	beq.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c4ec:	4b2f      	ldr	r3, [pc, #188]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4fa:	492c      	ldr	r1, [pc, #176]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c506:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c50a:	d105      	bne.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c50c:	4b27      	ldr	r3, [pc, #156]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	4a26      	ldr	r2, [pc, #152]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c516:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c520:	2b00      	cmp	r3, #0
 800c522:	d015      	beq.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c524:	4b21      	ldr	r3, [pc, #132]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c52a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c532:	491e      	ldr	r1, [pc, #120]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c534:	4313      	orrs	r3, r2
 800c536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c542:	d105      	bne.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c544:	4b19      	ldr	r3, [pc, #100]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	4a18      	ldr	r2, [pc, #96]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c54a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c54e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d015      	beq.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c55c:	4b13      	ldr	r3, [pc, #76]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56a:	4910      	ldr	r1, [pc, #64]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c56c:	4313      	orrs	r3, r2
 800c56e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c57a:	d105      	bne.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c57c:	4b0b      	ldr	r3, [pc, #44]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	4a0a      	ldr	r2, [pc, #40]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c586:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c590:	2b00      	cmp	r3, #0
 800c592:	d018      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c594:	4b05      	ldr	r3, [pc, #20]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c59a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5a2:	4902      	ldr	r1, [pc, #8]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c5aa:	e001      	b.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800c5ac:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5b8:	d105      	bne.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c5ba:	4b21      	ldr	r3, [pc, #132]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	4a20      	ldr	r2, [pc, #128]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5c4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d015      	beq.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c5d2:	4b1b      	ldr	r3, [pc, #108]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5d8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5e0:	4917      	ldr	r1, [pc, #92]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5f0:	d105      	bne.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c5f2:	4b13      	ldr	r3, [pc, #76]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	4a12      	ldr	r2, [pc, #72]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5fc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c606:	2b00      	cmp	r3, #0
 800c608:	d015      	beq.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c60a:	4b0d      	ldr	r3, [pc, #52]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c60c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c618:	4909      	ldr	r1, [pc, #36]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c61a:	4313      	orrs	r3, r2
 800c61c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c624:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c628:	d105      	bne.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c62a:	4b05      	ldr	r3, [pc, #20]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	4a04      	ldr	r2, [pc, #16]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c634:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c636:	7cbb      	ldrb	r3, [r7, #18]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3718      	adds	r7, #24
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	40021000 	.word	0x40021000

0800c644 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	e027      	b.n	800c6a6 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	7a5b      	ldrb	r3, [r3, #9]
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d105      	bne.n	800c66c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f7f9 fae0 	bl	8005c2c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2202      	movs	r2, #2
 800c670:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f023 0108 	bic.w	r1, r3, #8
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685a      	ldr	r2, [r3, #4]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	430a      	orrs	r2, r1
 800c686:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f042 0204 	orr.w	r2, r2, #4
 800c696:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b082      	sub	sp, #8
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e049      	b.n	800c754 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d106      	bne.n	800c6da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f7f9 fcb3 	bl	8006040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2202      	movs	r2, #2
 800c6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	4610      	mov	r0, r2
 800c6ee:	f000 fc57 	bl	800cfa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2201      	movs	r2, #1
 800c706:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2201      	movs	r2, #1
 800c70e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2201      	movs	r2, #1
 800c716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2201      	movs	r2, #1
 800c71e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2201      	movs	r2, #1
 800c726:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2201      	movs	r2, #1
 800c72e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2201      	movs	r2, #1
 800c73e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2201      	movs	r2, #1
 800c746:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2201      	movs	r2, #1
 800c74e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d001      	beq.n	800c774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c770:	2301      	movs	r3, #1
 800c772:	e054      	b.n	800c81e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2202      	movs	r2, #2
 800c778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68da      	ldr	r2, [r3, #12]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f042 0201 	orr.w	r2, r2, #1
 800c78a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a26      	ldr	r2, [pc, #152]	; (800c82c <HAL_TIM_Base_Start_IT+0xd0>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d022      	beq.n	800c7dc <HAL_TIM_Base_Start_IT+0x80>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c79e:	d01d      	beq.n	800c7dc <HAL_TIM_Base_Start_IT+0x80>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a22      	ldr	r2, [pc, #136]	; (800c830 <HAL_TIM_Base_Start_IT+0xd4>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d018      	beq.n	800c7dc <HAL_TIM_Base_Start_IT+0x80>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a21      	ldr	r2, [pc, #132]	; (800c834 <HAL_TIM_Base_Start_IT+0xd8>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d013      	beq.n	800c7dc <HAL_TIM_Base_Start_IT+0x80>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a1f      	ldr	r2, [pc, #124]	; (800c838 <HAL_TIM_Base_Start_IT+0xdc>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d00e      	beq.n	800c7dc <HAL_TIM_Base_Start_IT+0x80>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a1e      	ldr	r2, [pc, #120]	; (800c83c <HAL_TIM_Base_Start_IT+0xe0>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d009      	beq.n	800c7dc <HAL_TIM_Base_Start_IT+0x80>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a1c      	ldr	r2, [pc, #112]	; (800c840 <HAL_TIM_Base_Start_IT+0xe4>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d004      	beq.n	800c7dc <HAL_TIM_Base_Start_IT+0x80>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4a1b      	ldr	r2, [pc, #108]	; (800c844 <HAL_TIM_Base_Start_IT+0xe8>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d115      	bne.n	800c808 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	689a      	ldr	r2, [r3, #8]
 800c7e2:	4b19      	ldr	r3, [pc, #100]	; (800c848 <HAL_TIM_Base_Start_IT+0xec>)
 800c7e4:	4013      	ands	r3, r2
 800c7e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2b06      	cmp	r3, #6
 800c7ec:	d015      	beq.n	800c81a <HAL_TIM_Base_Start_IT+0xbe>
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7f4:	d011      	beq.n	800c81a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f042 0201 	orr.w	r2, r2, #1
 800c804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c806:	e008      	b.n	800c81a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f042 0201 	orr.w	r2, r2, #1
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	e000      	b.n	800c81c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c81a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3714      	adds	r7, #20
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	40012c00 	.word	0x40012c00
 800c830:	40000400 	.word	0x40000400
 800c834:	40000800 	.word	0x40000800
 800c838:	40000c00 	.word	0x40000c00
 800c83c:	40013400 	.word	0x40013400
 800c840:	40014000 	.word	0x40014000
 800c844:	40015000 	.word	0x40015000
 800c848:	00010007 	.word	0x00010007

0800c84c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d109      	bne.n	800c870 <HAL_TIM_PWM_Start+0x24>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2b01      	cmp	r3, #1
 800c866:	bf14      	ite	ne
 800c868:	2301      	movne	r3, #1
 800c86a:	2300      	moveq	r3, #0
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	e03c      	b.n	800c8ea <HAL_TIM_PWM_Start+0x9e>
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	2b04      	cmp	r3, #4
 800c874:	d109      	bne.n	800c88a <HAL_TIM_PWM_Start+0x3e>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b01      	cmp	r3, #1
 800c880:	bf14      	ite	ne
 800c882:	2301      	movne	r3, #1
 800c884:	2300      	moveq	r3, #0
 800c886:	b2db      	uxtb	r3, r3
 800c888:	e02f      	b.n	800c8ea <HAL_TIM_PWM_Start+0x9e>
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	2b08      	cmp	r3, #8
 800c88e:	d109      	bne.n	800c8a4 <HAL_TIM_PWM_Start+0x58>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b01      	cmp	r3, #1
 800c89a:	bf14      	ite	ne
 800c89c:	2301      	movne	r3, #1
 800c89e:	2300      	moveq	r3, #0
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	e022      	b.n	800c8ea <HAL_TIM_PWM_Start+0x9e>
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	2b0c      	cmp	r3, #12
 800c8a8:	d109      	bne.n	800c8be <HAL_TIM_PWM_Start+0x72>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	bf14      	ite	ne
 800c8b6:	2301      	movne	r3, #1
 800c8b8:	2300      	moveq	r3, #0
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	e015      	b.n	800c8ea <HAL_TIM_PWM_Start+0x9e>
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	2b10      	cmp	r3, #16
 800c8c2:	d109      	bne.n	800c8d8 <HAL_TIM_PWM_Start+0x8c>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	bf14      	ite	ne
 800c8d0:	2301      	movne	r3, #1
 800c8d2:	2300      	moveq	r3, #0
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	e008      	b.n	800c8ea <HAL_TIM_PWM_Start+0x9e>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	bf14      	ite	ne
 800c8e4:	2301      	movne	r3, #1
 800c8e6:	2300      	moveq	r3, #0
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d001      	beq.n	800c8f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e0a6      	b.n	800ca40 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d104      	bne.n	800c902 <HAL_TIM_PWM_Start+0xb6>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2202      	movs	r2, #2
 800c8fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c900:	e023      	b.n	800c94a <HAL_TIM_PWM_Start+0xfe>
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	2b04      	cmp	r3, #4
 800c906:	d104      	bne.n	800c912 <HAL_TIM_PWM_Start+0xc6>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2202      	movs	r2, #2
 800c90c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c910:	e01b      	b.n	800c94a <HAL_TIM_PWM_Start+0xfe>
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	2b08      	cmp	r3, #8
 800c916:	d104      	bne.n	800c922 <HAL_TIM_PWM_Start+0xd6>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2202      	movs	r2, #2
 800c91c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c920:	e013      	b.n	800c94a <HAL_TIM_PWM_Start+0xfe>
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	2b0c      	cmp	r3, #12
 800c926:	d104      	bne.n	800c932 <HAL_TIM_PWM_Start+0xe6>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2202      	movs	r2, #2
 800c92c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c930:	e00b      	b.n	800c94a <HAL_TIM_PWM_Start+0xfe>
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	2b10      	cmp	r3, #16
 800c936:	d104      	bne.n	800c942 <HAL_TIM_PWM_Start+0xf6>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2202      	movs	r2, #2
 800c93c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c940:	e003      	b.n	800c94a <HAL_TIM_PWM_Start+0xfe>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2202      	movs	r2, #2
 800c946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2201      	movs	r2, #1
 800c950:	6839      	ldr	r1, [r7, #0]
 800c952:	4618      	mov	r0, r3
 800c954:	f000 fc68 	bl	800d228 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a3a      	ldr	r2, [pc, #232]	; (800ca48 <HAL_TIM_PWM_Start+0x1fc>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d018      	beq.n	800c994 <HAL_TIM_PWM_Start+0x148>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a39      	ldr	r2, [pc, #228]	; (800ca4c <HAL_TIM_PWM_Start+0x200>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d013      	beq.n	800c994 <HAL_TIM_PWM_Start+0x148>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a37      	ldr	r2, [pc, #220]	; (800ca50 <HAL_TIM_PWM_Start+0x204>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d00e      	beq.n	800c994 <HAL_TIM_PWM_Start+0x148>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a36      	ldr	r2, [pc, #216]	; (800ca54 <HAL_TIM_PWM_Start+0x208>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d009      	beq.n	800c994 <HAL_TIM_PWM_Start+0x148>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a34      	ldr	r2, [pc, #208]	; (800ca58 <HAL_TIM_PWM_Start+0x20c>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d004      	beq.n	800c994 <HAL_TIM_PWM_Start+0x148>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a33      	ldr	r2, [pc, #204]	; (800ca5c <HAL_TIM_PWM_Start+0x210>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d101      	bne.n	800c998 <HAL_TIM_PWM_Start+0x14c>
 800c994:	2301      	movs	r3, #1
 800c996:	e000      	b.n	800c99a <HAL_TIM_PWM_Start+0x14e>
 800c998:	2300      	movs	r3, #0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d007      	beq.n	800c9ae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c9ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a25      	ldr	r2, [pc, #148]	; (800ca48 <HAL_TIM_PWM_Start+0x1fc>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d022      	beq.n	800c9fe <HAL_TIM_PWM_Start+0x1b2>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9c0:	d01d      	beq.n	800c9fe <HAL_TIM_PWM_Start+0x1b2>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a26      	ldr	r2, [pc, #152]	; (800ca60 <HAL_TIM_PWM_Start+0x214>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d018      	beq.n	800c9fe <HAL_TIM_PWM_Start+0x1b2>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a24      	ldr	r2, [pc, #144]	; (800ca64 <HAL_TIM_PWM_Start+0x218>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d013      	beq.n	800c9fe <HAL_TIM_PWM_Start+0x1b2>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a23      	ldr	r2, [pc, #140]	; (800ca68 <HAL_TIM_PWM_Start+0x21c>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d00e      	beq.n	800c9fe <HAL_TIM_PWM_Start+0x1b2>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a19      	ldr	r2, [pc, #100]	; (800ca4c <HAL_TIM_PWM_Start+0x200>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d009      	beq.n	800c9fe <HAL_TIM_PWM_Start+0x1b2>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a18      	ldr	r2, [pc, #96]	; (800ca50 <HAL_TIM_PWM_Start+0x204>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d004      	beq.n	800c9fe <HAL_TIM_PWM_Start+0x1b2>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a18      	ldr	r2, [pc, #96]	; (800ca5c <HAL_TIM_PWM_Start+0x210>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d115      	bne.n	800ca2a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	689a      	ldr	r2, [r3, #8]
 800ca04:	4b19      	ldr	r3, [pc, #100]	; (800ca6c <HAL_TIM_PWM_Start+0x220>)
 800ca06:	4013      	ands	r3, r2
 800ca08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2b06      	cmp	r3, #6
 800ca0e:	d015      	beq.n	800ca3c <HAL_TIM_PWM_Start+0x1f0>
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca16:	d011      	beq.n	800ca3c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f042 0201 	orr.w	r2, r2, #1
 800ca26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca28:	e008      	b.n	800ca3c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f042 0201 	orr.w	r2, r2, #1
 800ca38:	601a      	str	r2, [r3, #0]
 800ca3a:	e000      	b.n	800ca3e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	40012c00 	.word	0x40012c00
 800ca4c:	40013400 	.word	0x40013400
 800ca50:	40014000 	.word	0x40014000
 800ca54:	40014400 	.word	0x40014400
 800ca58:	40014800 	.word	0x40014800
 800ca5c:	40015000 	.word	0x40015000
 800ca60:	40000400 	.word	0x40000400
 800ca64:	40000800 	.word	0x40000800
 800ca68:	40000c00 	.word	0x40000c00
 800ca6c:	00010007 	.word	0x00010007

0800ca70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	691b      	ldr	r3, [r3, #16]
 800ca7e:	f003 0302 	and.w	r3, r3, #2
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d122      	bne.n	800cacc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	f003 0302 	and.w	r3, r3, #2
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d11b      	bne.n	800cacc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f06f 0202 	mvn.w	r2, #2
 800ca9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	699b      	ldr	r3, [r3, #24]
 800caaa:	f003 0303 	and.w	r3, r3, #3
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d003      	beq.n	800caba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fa56 	bl	800cf64 <HAL_TIM_IC_CaptureCallback>
 800cab8:	e005      	b.n	800cac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 fa48 	bl	800cf50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 fa59 	bl	800cf78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	f003 0304 	and.w	r3, r3, #4
 800cad6:	2b04      	cmp	r3, #4
 800cad8:	d122      	bne.n	800cb20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	f003 0304 	and.w	r3, r3, #4
 800cae4:	2b04      	cmp	r3, #4
 800cae6:	d11b      	bne.n	800cb20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f06f 0204 	mvn.w	r2, #4
 800caf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2202      	movs	r2, #2
 800caf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d003      	beq.n	800cb0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 fa2c 	bl	800cf64 <HAL_TIM_IC_CaptureCallback>
 800cb0c:	e005      	b.n	800cb1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 fa1e 	bl	800cf50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fa2f 	bl	800cf78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	691b      	ldr	r3, [r3, #16]
 800cb26:	f003 0308 	and.w	r3, r3, #8
 800cb2a:	2b08      	cmp	r3, #8
 800cb2c:	d122      	bne.n	800cb74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	68db      	ldr	r3, [r3, #12]
 800cb34:	f003 0308 	and.w	r3, r3, #8
 800cb38:	2b08      	cmp	r3, #8
 800cb3a:	d11b      	bne.n	800cb74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f06f 0208 	mvn.w	r2, #8
 800cb44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2204      	movs	r2, #4
 800cb4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	f003 0303 	and.w	r3, r3, #3
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d003      	beq.n	800cb62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 fa02 	bl	800cf64 <HAL_TIM_IC_CaptureCallback>
 800cb60:	e005      	b.n	800cb6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f9f4 	bl	800cf50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 fa05 	bl	800cf78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	f003 0310 	and.w	r3, r3, #16
 800cb7e:	2b10      	cmp	r3, #16
 800cb80:	d122      	bne.n	800cbc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	f003 0310 	and.w	r3, r3, #16
 800cb8c:	2b10      	cmp	r3, #16
 800cb8e:	d11b      	bne.n	800cbc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f06f 0210 	mvn.w	r2, #16
 800cb98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2208      	movs	r2, #8
 800cb9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	69db      	ldr	r3, [r3, #28]
 800cba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d003      	beq.n	800cbb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 f9d8 	bl	800cf64 <HAL_TIM_IC_CaptureCallback>
 800cbb4:	e005      	b.n	800cbc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 f9ca 	bl	800cf50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f9db 	bl	800cf78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	f003 0301 	and.w	r3, r3, #1
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d10e      	bne.n	800cbf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	f003 0301 	and.w	r3, r3, #1
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d107      	bne.n	800cbf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f06f 0201 	mvn.w	r2, #1
 800cbec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7f8 fd76 	bl	80056e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	691b      	ldr	r3, [r3, #16]
 800cbfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbfe:	2b80      	cmp	r3, #128	; 0x80
 800cc00:	d10e      	bne.n	800cc20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc0c:	2b80      	cmp	r3, #128	; 0x80
 800cc0e:	d107      	bne.n	800cc20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cc18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fbca 	bl	800d3b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	691b      	ldr	r3, [r3, #16]
 800cc26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc2e:	d10e      	bne.n	800cc4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc3a:	2b80      	cmp	r3, #128	; 0x80
 800cc3c:	d107      	bne.n	800cc4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cc46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 fbbd 	bl	800d3c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc58:	2b40      	cmp	r3, #64	; 0x40
 800cc5a:	d10e      	bne.n	800cc7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc66:	2b40      	cmp	r3, #64	; 0x40
 800cc68:	d107      	bne.n	800cc7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cc72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 f989 	bl	800cf8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	f003 0320 	and.w	r3, r3, #32
 800cc84:	2b20      	cmp	r3, #32
 800cc86:	d10e      	bne.n	800cca6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	f003 0320 	and.w	r3, r3, #32
 800cc92:	2b20      	cmp	r3, #32
 800cc94:	d107      	bne.n	800cca6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f06f 0220 	mvn.w	r2, #32
 800cc9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 fb7d 	bl	800d3a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ccb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccb4:	d10f      	bne.n	800ccd6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ccc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccc4:	d107      	bne.n	800ccd6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ccce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 fb83 	bl	800d3dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	691b      	ldr	r3, [r3, #16]
 800ccdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cce4:	d10f      	bne.n	800cd06 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ccf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ccf4:	d107      	bne.n	800cd06 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ccfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fb75 	bl	800d3f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	691b      	ldr	r3, [r3, #16]
 800cd0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd14:	d10f      	bne.n	800cd36 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd24:	d107      	bne.n	800cd36 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800cd2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 fb67 	bl	800d404 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	691b      	ldr	r3, [r3, #16]
 800cd3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd44:	d10f      	bne.n	800cd66 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd54:	d107      	bne.n	800cd66 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800cd5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 fb59 	bl	800d418 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd66:	bf00      	nop
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
	...

0800cd70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d101      	bne.n	800cd88 <HAL_TIM_ConfigClockSource+0x18>
 800cd84:	2302      	movs	r3, #2
 800cd86:	e0d2      	b.n	800cf2e <HAL_TIM_ConfigClockSource+0x1be>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2202      	movs	r2, #2
 800cd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800cda6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cdaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cdb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdc4:	f000 80a9 	beq.w	800cf1a <HAL_TIM_ConfigClockSource+0x1aa>
 800cdc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdcc:	d81a      	bhi.n	800ce04 <HAL_TIM_ConfigClockSource+0x94>
 800cdce:	2b30      	cmp	r3, #48	; 0x30
 800cdd0:	f000 809a 	beq.w	800cf08 <HAL_TIM_ConfigClockSource+0x198>
 800cdd4:	2b30      	cmp	r3, #48	; 0x30
 800cdd6:	d809      	bhi.n	800cdec <HAL_TIM_ConfigClockSource+0x7c>
 800cdd8:	2b10      	cmp	r3, #16
 800cdda:	f000 8095 	beq.w	800cf08 <HAL_TIM_ConfigClockSource+0x198>
 800cdde:	2b20      	cmp	r3, #32
 800cde0:	f000 8092 	beq.w	800cf08 <HAL_TIM_ConfigClockSource+0x198>
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f000 808f 	beq.w	800cf08 <HAL_TIM_ConfigClockSource+0x198>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800cdea:	e097      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cdec:	2b50      	cmp	r3, #80	; 0x50
 800cdee:	d05b      	beq.n	800cea8 <HAL_TIM_ConfigClockSource+0x138>
 800cdf0:	2b50      	cmp	r3, #80	; 0x50
 800cdf2:	d802      	bhi.n	800cdfa <HAL_TIM_ConfigClockSource+0x8a>
 800cdf4:	2b40      	cmp	r3, #64	; 0x40
 800cdf6:	d077      	beq.n	800cee8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800cdf8:	e090      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cdfa:	2b60      	cmp	r3, #96	; 0x60
 800cdfc:	d064      	beq.n	800cec8 <HAL_TIM_ConfigClockSource+0x158>
 800cdfe:	2b70      	cmp	r3, #112	; 0x70
 800ce00:	d028      	beq.n	800ce54 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800ce02:	e08b      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce04:	4a4c      	ldr	r2, [pc, #304]	; (800cf38 <HAL_TIM_ConfigClockSource+0x1c8>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d07e      	beq.n	800cf08 <HAL_TIM_ConfigClockSource+0x198>
 800ce0a:	4a4b      	ldr	r2, [pc, #300]	; (800cf38 <HAL_TIM_ConfigClockSource+0x1c8>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d810      	bhi.n	800ce32 <HAL_TIM_ConfigClockSource+0xc2>
 800ce10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce14:	d078      	beq.n	800cf08 <HAL_TIM_ConfigClockSource+0x198>
 800ce16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce1a:	d803      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0xb4>
 800ce1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce20:	d02f      	beq.n	800ce82 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800ce22:	e07b      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ce28:	d06e      	beq.n	800cf08 <HAL_TIM_ConfigClockSource+0x198>
 800ce2a:	4a44      	ldr	r2, [pc, #272]	; (800cf3c <HAL_TIM_ConfigClockSource+0x1cc>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d06b      	beq.n	800cf08 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ce30:	e074      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce32:	4a43      	ldr	r2, [pc, #268]	; (800cf40 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d067      	beq.n	800cf08 <HAL_TIM_ConfigClockSource+0x198>
 800ce38:	4a41      	ldr	r2, [pc, #260]	; (800cf40 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d803      	bhi.n	800ce46 <HAL_TIM_ConfigClockSource+0xd6>
 800ce3e:	4a41      	ldr	r2, [pc, #260]	; (800cf44 <HAL_TIM_ConfigClockSource+0x1d4>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d061      	beq.n	800cf08 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ce44:	e06a      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce46:	4a40      	ldr	r2, [pc, #256]	; (800cf48 <HAL_TIM_ConfigClockSource+0x1d8>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d05d      	beq.n	800cf08 <HAL_TIM_ConfigClockSource+0x198>
 800ce4c:	4a3f      	ldr	r2, [pc, #252]	; (800cf4c <HAL_TIM_ConfigClockSource+0x1dc>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d05a      	beq.n	800cf08 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ce52:	e063      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6818      	ldr	r0, [r3, #0]
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	6899      	ldr	r1, [r3, #8]
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	685a      	ldr	r2, [r3, #4]
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	f000 f9c0 	bl	800d1e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ce76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	609a      	str	r2, [r3, #8]
      break;
 800ce80:	e04c      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6818      	ldr	r0, [r3, #0]
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	6899      	ldr	r1, [r3, #8]
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	685a      	ldr	r2, [r3, #4]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	f000 f9a9 	bl	800d1e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	689a      	ldr	r2, [r3, #8]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cea4:	609a      	str	r2, [r3, #8]
      break;
 800cea6:	e039      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6818      	ldr	r0, [r3, #0]
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	6859      	ldr	r1, [r3, #4]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	f000 f91b 	bl	800d0f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2150      	movs	r1, #80	; 0x50
 800cec0:	4618      	mov	r0, r3
 800cec2:	f000 f974 	bl	800d1ae <TIM_ITRx_SetConfig>
      break;
 800cec6:	e029      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6818      	ldr	r0, [r3, #0]
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	6859      	ldr	r1, [r3, #4]
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	461a      	mov	r2, r3
 800ced6:	f000 f93a 	bl	800d14e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2160      	movs	r1, #96	; 0x60
 800cee0:	4618      	mov	r0, r3
 800cee2:	f000 f964 	bl	800d1ae <TIM_ITRx_SetConfig>
      break;
 800cee6:	e019      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6818      	ldr	r0, [r3, #0]
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	6859      	ldr	r1, [r3, #4]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	461a      	mov	r2, r3
 800cef6:	f000 f8fb 	bl	800d0f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2140      	movs	r1, #64	; 0x40
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 f954 	bl	800d1ae <TIM_ITRx_SetConfig>
      break;
 800cf06:	e009      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4619      	mov	r1, r3
 800cf12:	4610      	mov	r0, r2
 800cf14:	f000 f94b 	bl	800d1ae <TIM_ITRx_SetConfig>
        break;
 800cf18:	e000      	b.n	800cf1c <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800cf1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	00100030 	.word	0x00100030
 800cf3c:	00100020 	.word	0x00100020
 800cf40:	00100050 	.word	0x00100050
 800cf44:	00100040 	.word	0x00100040
 800cf48:	00100060 	.word	0x00100060
 800cf4c:	00100070 	.word	0x00100070

0800cf50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf58:	bf00      	nop
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cf6c:	bf00      	nop
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf94:	bf00      	nop
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4a46      	ldr	r2, [pc, #280]	; (800d0cc <TIM_Base_SetConfig+0x12c>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d017      	beq.n	800cfe8 <TIM_Base_SetConfig+0x48>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfbe:	d013      	beq.n	800cfe8 <TIM_Base_SetConfig+0x48>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	4a43      	ldr	r2, [pc, #268]	; (800d0d0 <TIM_Base_SetConfig+0x130>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d00f      	beq.n	800cfe8 <TIM_Base_SetConfig+0x48>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a42      	ldr	r2, [pc, #264]	; (800d0d4 <TIM_Base_SetConfig+0x134>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d00b      	beq.n	800cfe8 <TIM_Base_SetConfig+0x48>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a41      	ldr	r2, [pc, #260]	; (800d0d8 <TIM_Base_SetConfig+0x138>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d007      	beq.n	800cfe8 <TIM_Base_SetConfig+0x48>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4a40      	ldr	r2, [pc, #256]	; (800d0dc <TIM_Base_SetConfig+0x13c>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d003      	beq.n	800cfe8 <TIM_Base_SetConfig+0x48>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4a3f      	ldr	r2, [pc, #252]	; (800d0e0 <TIM_Base_SetConfig+0x140>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d108      	bne.n	800cffa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4a33      	ldr	r2, [pc, #204]	; (800d0cc <TIM_Base_SetConfig+0x12c>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d023      	beq.n	800d04a <TIM_Base_SetConfig+0xaa>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d008:	d01f      	beq.n	800d04a <TIM_Base_SetConfig+0xaa>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4a30      	ldr	r2, [pc, #192]	; (800d0d0 <TIM_Base_SetConfig+0x130>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d01b      	beq.n	800d04a <TIM_Base_SetConfig+0xaa>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4a2f      	ldr	r2, [pc, #188]	; (800d0d4 <TIM_Base_SetConfig+0x134>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d017      	beq.n	800d04a <TIM_Base_SetConfig+0xaa>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4a2e      	ldr	r2, [pc, #184]	; (800d0d8 <TIM_Base_SetConfig+0x138>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d013      	beq.n	800d04a <TIM_Base_SetConfig+0xaa>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	4a2d      	ldr	r2, [pc, #180]	; (800d0dc <TIM_Base_SetConfig+0x13c>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d00f      	beq.n	800d04a <TIM_Base_SetConfig+0xaa>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4a2d      	ldr	r2, [pc, #180]	; (800d0e4 <TIM_Base_SetConfig+0x144>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d00b      	beq.n	800d04a <TIM_Base_SetConfig+0xaa>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a2c      	ldr	r2, [pc, #176]	; (800d0e8 <TIM_Base_SetConfig+0x148>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d007      	beq.n	800d04a <TIM_Base_SetConfig+0xaa>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4a2b      	ldr	r2, [pc, #172]	; (800d0ec <TIM_Base_SetConfig+0x14c>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d003      	beq.n	800d04a <TIM_Base_SetConfig+0xaa>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4a26      	ldr	r2, [pc, #152]	; (800d0e0 <TIM_Base_SetConfig+0x140>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d108      	bne.n	800d05c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	4313      	orrs	r3, r2
 800d05a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	695b      	ldr	r3, [r3, #20]
 800d066:	4313      	orrs	r3, r2
 800d068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	689a      	ldr	r2, [r3, #8]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a12      	ldr	r2, [pc, #72]	; (800d0cc <TIM_Base_SetConfig+0x12c>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d013      	beq.n	800d0b0 <TIM_Base_SetConfig+0x110>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a14      	ldr	r2, [pc, #80]	; (800d0dc <TIM_Base_SetConfig+0x13c>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d00f      	beq.n	800d0b0 <TIM_Base_SetConfig+0x110>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a14      	ldr	r2, [pc, #80]	; (800d0e4 <TIM_Base_SetConfig+0x144>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d00b      	beq.n	800d0b0 <TIM_Base_SetConfig+0x110>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a13      	ldr	r2, [pc, #76]	; (800d0e8 <TIM_Base_SetConfig+0x148>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d007      	beq.n	800d0b0 <TIM_Base_SetConfig+0x110>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a12      	ldr	r2, [pc, #72]	; (800d0ec <TIM_Base_SetConfig+0x14c>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d003      	beq.n	800d0b0 <TIM_Base_SetConfig+0x110>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a0d      	ldr	r2, [pc, #52]	; (800d0e0 <TIM_Base_SetConfig+0x140>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d103      	bne.n	800d0b8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	691a      	ldr	r2, [r3, #16]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	615a      	str	r2, [r3, #20]
}
 800d0be:	bf00      	nop
 800d0c0:	3714      	adds	r7, #20
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop
 800d0cc:	40012c00 	.word	0x40012c00
 800d0d0:	40000400 	.word	0x40000400
 800d0d4:	40000800 	.word	0x40000800
 800d0d8:	40000c00 	.word	0x40000c00
 800d0dc:	40013400 	.word	0x40013400
 800d0e0:	40015000 	.word	0x40015000
 800d0e4:	40014000 	.word	0x40014000
 800d0e8:	40014400 	.word	0x40014400
 800d0ec:	40014800 	.word	0x40014800

0800d0f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b087      	sub	sp, #28
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6a1b      	ldr	r3, [r3, #32]
 800d100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	f023 0201 	bic.w	r2, r3, #1
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	699b      	ldr	r3, [r3, #24]
 800d112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d11a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	011b      	lsls	r3, r3, #4
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	4313      	orrs	r3, r2
 800d124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f023 030a 	bic.w	r3, r3, #10
 800d12c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d12e:	697a      	ldr	r2, [r7, #20]
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	4313      	orrs	r3, r2
 800d134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	693a      	ldr	r2, [r7, #16]
 800d13a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	621a      	str	r2, [r3, #32]
}
 800d142:	bf00      	nop
 800d144:	371c      	adds	r7, #28
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr

0800d14e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d14e:	b480      	push	{r7}
 800d150:	b087      	sub	sp, #28
 800d152:	af00      	add	r7, sp, #0
 800d154:	60f8      	str	r0, [r7, #12]
 800d156:	60b9      	str	r1, [r7, #8]
 800d158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	f023 0210 	bic.w	r2, r3, #16
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6a1b      	ldr	r3, [r3, #32]
 800d170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	031b      	lsls	r3, r3, #12
 800d17e:	697a      	ldr	r2, [r7, #20]
 800d180:	4313      	orrs	r3, r2
 800d182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d18a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	693a      	ldr	r2, [r7, #16]
 800d192:	4313      	orrs	r3, r2
 800d194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	621a      	str	r2, [r3, #32]
}
 800d1a2:	bf00      	nop
 800d1a4:	371c      	adds	r7, #28
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr

0800d1ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d1ae:	b480      	push	{r7}
 800d1b0:	b085      	sub	sp, #20
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
 800d1b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d1c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d1ca:	683a      	ldr	r2, [r7, #0]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	f043 0307 	orr.w	r3, r3, #7
 800d1d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	609a      	str	r2, [r3, #8]
}
 800d1dc:	bf00      	nop
 800d1de:	3714      	adds	r7, #20
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b087      	sub	sp, #28
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	60b9      	str	r1, [r7, #8]
 800d1f2:	607a      	str	r2, [r7, #4]
 800d1f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	021a      	lsls	r2, r3, #8
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	431a      	orrs	r2, r3
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	4313      	orrs	r3, r2
 800d210:	697a      	ldr	r2, [r7, #20]
 800d212:	4313      	orrs	r3, r2
 800d214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	697a      	ldr	r2, [r7, #20]
 800d21a:	609a      	str	r2, [r3, #8]
}
 800d21c:	bf00      	nop
 800d21e:	371c      	adds	r7, #28
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d228:	b480      	push	{r7}
 800d22a:	b087      	sub	sp, #28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	f003 031f 	and.w	r3, r3, #31
 800d23a:	2201      	movs	r2, #1
 800d23c:	fa02 f303 	lsl.w	r3, r2, r3
 800d240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6a1a      	ldr	r2, [r3, #32]
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	43db      	mvns	r3, r3
 800d24a:	401a      	ands	r2, r3
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	6a1a      	ldr	r2, [r3, #32]
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	f003 031f 	and.w	r3, r3, #31
 800d25a:	6879      	ldr	r1, [r7, #4]
 800d25c:	fa01 f303 	lsl.w	r3, r1, r3
 800d260:	431a      	orrs	r2, r3
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	621a      	str	r2, [r3, #32]
}
 800d266:	bf00      	nop
 800d268:	371c      	adds	r7, #28
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
	...

0800d274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d284:	2b01      	cmp	r3, #1
 800d286:	d101      	bne.n	800d28c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d288:	2302      	movs	r3, #2
 800d28a:	e074      	b.n	800d376 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2201      	movs	r2, #1
 800d290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2202      	movs	r2, #2
 800d298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	689b      	ldr	r3, [r3, #8]
 800d2aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a34      	ldr	r2, [pc, #208]	; (800d384 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d009      	beq.n	800d2ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a33      	ldr	r2, [pc, #204]	; (800d388 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d004      	beq.n	800d2ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a31      	ldr	r2, [pc, #196]	; (800d38c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d108      	bne.n	800d2dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d2d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a21      	ldr	r2, [pc, #132]	; (800d384 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d022      	beq.n	800d34a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d30c:	d01d      	beq.n	800d34a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a1f      	ldr	r2, [pc, #124]	; (800d390 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d018      	beq.n	800d34a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a1d      	ldr	r2, [pc, #116]	; (800d394 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d013      	beq.n	800d34a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a1c      	ldr	r2, [pc, #112]	; (800d398 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d00e      	beq.n	800d34a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a15      	ldr	r2, [pc, #84]	; (800d388 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d009      	beq.n	800d34a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a18      	ldr	r2, [pc, #96]	; (800d39c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d004      	beq.n	800d34a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a11      	ldr	r2, [pc, #68]	; (800d38c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d10c      	bne.n	800d364 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	68ba      	ldr	r2, [r7, #8]
 800d358:	4313      	orrs	r3, r2
 800d35a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	68ba      	ldr	r2, [r7, #8]
 800d362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2200      	movs	r2, #0
 800d370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	3714      	adds	r7, #20
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	40012c00 	.word	0x40012c00
 800d388:	40013400 	.word	0x40013400
 800d38c:	40015000 	.word	0x40015000
 800d390:	40000400 	.word	0x40000400
 800d394:	40000800 	.word	0x40000800
 800d398:	40000c00 	.word	0x40000c00
 800d39c:	40014000 	.word	0x40014000

0800d3a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d3a8:	bf00      	nop
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b083      	sub	sp, #12
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d3bc:	bf00      	nop
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d3d0:	bf00      	nop
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d3e4:	bf00      	nop
 800d3e6:	370c      	adds	r7, #12
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d3f8:	bf00      	nop
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d40c:	bf00      	nop
 800d40e:	370c      	adds	r7, #12
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d420:	bf00      	nop
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <__libc_init_array>:
 800d42c:	b570      	push	{r4, r5, r6, lr}
 800d42e:	4e0d      	ldr	r6, [pc, #52]	; (800d464 <__libc_init_array+0x38>)
 800d430:	4c0d      	ldr	r4, [pc, #52]	; (800d468 <__libc_init_array+0x3c>)
 800d432:	1ba4      	subs	r4, r4, r6
 800d434:	10a4      	asrs	r4, r4, #2
 800d436:	2500      	movs	r5, #0
 800d438:	42a5      	cmp	r5, r4
 800d43a:	d109      	bne.n	800d450 <__libc_init_array+0x24>
 800d43c:	4e0b      	ldr	r6, [pc, #44]	; (800d46c <__libc_init_array+0x40>)
 800d43e:	4c0c      	ldr	r4, [pc, #48]	; (800d470 <__libc_init_array+0x44>)
 800d440:	f000 f82c 	bl	800d49c <_init>
 800d444:	1ba4      	subs	r4, r4, r6
 800d446:	10a4      	asrs	r4, r4, #2
 800d448:	2500      	movs	r5, #0
 800d44a:	42a5      	cmp	r5, r4
 800d44c:	d105      	bne.n	800d45a <__libc_init_array+0x2e>
 800d44e:	bd70      	pop	{r4, r5, r6, pc}
 800d450:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d454:	4798      	blx	r3
 800d456:	3501      	adds	r5, #1
 800d458:	e7ee      	b.n	800d438 <__libc_init_array+0xc>
 800d45a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d45e:	4798      	blx	r3
 800d460:	3501      	adds	r5, #1
 800d462:	e7f2      	b.n	800d44a <__libc_init_array+0x1e>
 800d464:	0800dccc 	.word	0x0800dccc
 800d468:	0800dccc 	.word	0x0800dccc
 800d46c:	0800dccc 	.word	0x0800dccc
 800d470:	0800dcd0 	.word	0x0800dcd0

0800d474 <memcpy>:
 800d474:	b510      	push	{r4, lr}
 800d476:	1e43      	subs	r3, r0, #1
 800d478:	440a      	add	r2, r1
 800d47a:	4291      	cmp	r1, r2
 800d47c:	d100      	bne.n	800d480 <memcpy+0xc>
 800d47e:	bd10      	pop	{r4, pc}
 800d480:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d484:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d488:	e7f7      	b.n	800d47a <memcpy+0x6>

0800d48a <memset>:
 800d48a:	4402      	add	r2, r0
 800d48c:	4603      	mov	r3, r0
 800d48e:	4293      	cmp	r3, r2
 800d490:	d100      	bne.n	800d494 <memset+0xa>
 800d492:	4770      	bx	lr
 800d494:	f803 1b01 	strb.w	r1, [r3], #1
 800d498:	e7f9      	b.n	800d48e <memset+0x4>
	...

0800d49c <_init>:
 800d49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49e:	bf00      	nop
 800d4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4a2:	bc08      	pop	{r3}
 800d4a4:	469e      	mov	lr, r3
 800d4a6:	4770      	bx	lr

0800d4a8 <_fini>:
 800d4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4aa:	bf00      	nop
 800d4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ae:	bc08      	pop	{r3}
 800d4b0:	469e      	mov	lr, r3
 800d4b2:	4770      	bx	lr
