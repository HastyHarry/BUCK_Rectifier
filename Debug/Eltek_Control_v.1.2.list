
Eltek_Control_v.1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c60c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000818  0800c7e4  0800c7e4  0001c7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cffc  0800cffc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800cffc  0800cffc  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cffc  0800cffc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cffc  0800cffc  0001cffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d000  0800d000  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800d004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015fac  2000002c  0800d030  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015fd8  0800d030  00025fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000287f4  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049b8  00000000  00000000  00048850  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ec8  00000000  00000000  0004d208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c50  00000000  00000000  0004f0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c91a  00000000  00000000  00050d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cce6  00000000  00000000  0007d63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00130b7c  00000000  00000000  0009a320  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cae9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082e0  00000000  00000000  001caf18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c7cc 	.word	0x0800c7cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	0800c7cc 	.word	0x0800c7cc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <DATA_Write_Theta_PLL>:
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <DATA_Write_Theta_PLL+0x1c>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	200000a8 	.word	0x200000a8

08000ab4 <DATA_Read_Theta_PLL>:
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <DATA_Read_Theta_PLL+0x18>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	ee07 3a90 	vmov	s15, r3
 8000ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	200000a8 	.word	0x200000a8

08000ad0 <DATA_CURR_Write_ClarkePark>:
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	eef0 6a40 	vmov.f32	s13, s0
 8000ada:	eeb0 7a60 	vmov.f32	s14, s1
 8000ade:	eef0 7a41 	vmov.f32	s15, s2
 8000ae2:	edc7 6a01 	vstr	s13, [r7, #4]
 8000ae6:	ed87 7a02 	vstr	s14, [r7, #8]
 8000aea:	edc7 7a03 	vstr	s15, [r7, #12]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000af8:	6053      	str	r3, [r2, #4]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <DATA_CURR_Write_ClarkePark+0x3c>)
 8000afe:	6093      	str	r3, [r2, #8]
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	2000007c 	.word	0x2000007c

08000b10 <DATA_VOLT_Write_ClarkePark>:
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	eef0 6a40 	vmov.f32	s13, s0
 8000b1a:	eeb0 7a60 	vmov.f32	s14, s1
 8000b1e:	eef0 7a41 	vmov.f32	s15, s2
 8000b22:	edc7 6a01 	vstr	s13, [r7, #4]
 8000b26:	ed87 7a02 	vstr	s14, [r7, #8]
 8000b2a:	edc7 7a03 	vstr	s15, [r7, #12]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b38:	6053      	str	r3, [r2, #4]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <DATA_VOLT_Write_ClarkePark+0x3c>)
 8000b3e:	6093      	str	r3, [r2, #8]
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	20000090 	.word	0x20000090

08000b50 <DATA_Acquisition_from_DMA>:
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b087      	sub	sp, #28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	331c      	adds	r3, #28
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b61      	ldr	r3, [pc, #388]	; (8000ce8 <DATA_Acquisition_from_DMA+0x198>)
 8000b64:	801a      	strh	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	4a60      	ldr	r2, [pc, #384]	; (8000cec <DATA_Acquisition_from_DMA+0x19c>)
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	4a5e      	ldr	r2, [pc, #376]	; (8000cec <DATA_Acquisition_from_DMA+0x19c>)
 8000b74:	6053      	str	r3, [r2, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	4a5c      	ldr	r2, [pc, #368]	; (8000cec <DATA_Acquisition_from_DMA+0x19c>)
 8000b7c:	6093      	str	r3, [r2, #8]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3308      	adds	r3, #8
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f5b3 6ff7 	cmp.w	r3, #1976	; 0x7b8
 8000b88:	d326      	bcc.n	8000bd8 <DATA_Acquisition_from_DMA+0x88>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3308      	adds	r3, #8
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f2a3 73b7 	subw	r3, r3, #1975	; 0x7b7
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba0:	ee17 0a90 	vmov	r0, s15
 8000ba4:	f7ff fc9c 	bl	80004e0 <__aeabi_f2d>
 8000ba8:	a34b      	add	r3, pc, #300	; (adr r3, 8000cd8 <DATA_Acquisition_from_DMA+0x188>)
 8000baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bae:	f7ff fcef 	bl	8000590 <__aeabi_dmul>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460c      	mov	r4, r1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	4621      	mov	r1, r4
 8000bba:	f7ff ff1b 	bl	80009f4 <__aeabi_d2f>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bca:	ee17 3a90 	vmov	r3, s15
 8000bce:	f203 73a6 	addw	r3, r3, #1958	; 0x7a6
 8000bd2:	4a47      	ldr	r2, [pc, #284]	; (8000cf0 <DATA_Acquisition_from_DMA+0x1a0>)
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e027      	b.n	8000c28 <DATA_Acquisition_from_DMA+0xd8>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3308      	adds	r3, #8
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f5c3 63f6 	rsb	r3, r3, #1968	; 0x7b0
 8000be2:	3307      	adds	r3, #7
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bf0:	ee17 0a90 	vmov	r0, s15
 8000bf4:	f7ff fc74 	bl	80004e0 <__aeabi_f2d>
 8000bf8:	a339      	add	r3, pc, #228	; (adr r3, 8000ce0 <DATA_Acquisition_from_DMA+0x190>)
 8000bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfe:	f7ff fcc7 	bl	8000590 <__aeabi_dmul>
 8000c02:	4603      	mov	r3, r0
 8000c04:	460c      	mov	r4, r1
 8000c06:	4618      	mov	r0, r3
 8000c08:	4621      	mov	r1, r4
 8000c0a:	f7ff fef3 	bl	80009f4 <__aeabi_d2f>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c1a:	ee17 3a90 	vmov	r3, s15
 8000c1e:	f5c3 63f4 	rsb	r3, r3, #1952	; 0x7a0
 8000c22:	3306      	adds	r3, #6
 8000c24:	4a32      	ldr	r2, [pc, #200]	; (8000cf0 <DATA_Acquisition_from_DMA+0x1a0>)
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	330c      	adds	r3, #12
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f5b3 6ff7 	cmp.w	r3, #1976	; 0x7b8
 8000c32:	d31b      	bcc.n	8000c6c <DATA_Acquisition_from_DMA+0x11c>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	330c      	adds	r3, #12
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f2a3 73b7 	subw	r3, r3, #1975	; 0x7b7
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	ee07 3a90 	vmov	s15, r3
 8000c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c52:	edc7 7a02 	vstr	s15, [r7, #8]
 8000c56:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c5e:	ee17 3a90 	vmov	r3, s15
 8000c62:	f203 73a6 	addw	r3, r3, #1958	; 0x7a6
 8000c66:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <DATA_Acquisition_from_DMA+0x1a0>)
 8000c68:	6053      	str	r3, [r2, #4]
 8000c6a:	e01c      	b.n	8000ca6 <DATA_Acquisition_from_DMA+0x156>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	330c      	adds	r3, #12
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f5c3 63f6 	rsb	r3, r3, #1968	; 0x7b0
 8000c76:	3307      	adds	r3, #7
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	ee07 3a90 	vmov	s15, r3
 8000c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c8c:	edc7 7a02 	vstr	s15, [r7, #8]
 8000c90:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c98:	ee17 3a90 	vmov	r3, s15
 8000c9c:	f5c3 63f4 	rsb	r3, r3, #1952	; 0x7a0
 8000ca0:	3306      	adds	r3, #6
 8000ca2:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <DATA_Acquisition_from_DMA+0x1a0>)
 8000ca4:	6053      	str	r3, [r2, #4]
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <DATA_Acquisition_from_DMA+0x1a0>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <DATA_Acquisition_from_DMA+0x1a0>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	f5c3 53b7 	rsb	r3, r3, #5856	; 0x16e0
 8000cb4:	3312      	adds	r3, #18
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <DATA_Acquisition_from_DMA+0x1a0>)
 8000cb8:	6093      	str	r3, [r2, #8]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <DATA_Acquisition_from_DMA+0x1a4>)
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3318      	adds	r3, #24
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000ccc:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <DATA_Acquisition_from_DMA+0x1a4>)
 8000cce:	6053      	str	r3, [r2, #4]
 8000cd0:	bf00      	nop
 8000cd2:	371c      	adds	r7, #28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	33333333 	.word	0x33333333
 8000cdc:	3fd33333 	.word	0x3fd33333
 8000ce0:	9999999a 	.word	0x9999999a
 8000ce4:	3fc99999 	.word	0x3fc99999
 8000ce8:	200000bc 	.word	0x200000bc
 8000cec:	200000b0 	.word	0x200000b0
 8000cf0:	2000006c 	.word	0x2000006c
 8000cf4:	20000088 	.word	0x20000088

08000cf8 <Read_GRID>:
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <Read_GRID+0x10>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	200000b0 	.word	0x200000b0

08000d0c <Read_Curr_GRID>:
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <Read_Curr_GRID+0x10>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	2000006c 	.word	0x2000006c

08000d20 <Read_Volt_DC>:
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4b02      	ldr	r3, [pc, #8]	; (8000d30 <Read_Volt_DC+0x10>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	20000088 	.word	0x20000088

08000d34 <DPC_FLT_Faulterror_Set>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx and STM32F74x microconroller family   
  */
void DPC_FLT_Faulterror_Set(DPC_FAULTERROR_LIST_TypeDef eFaulterror){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uwFaultErrorVector |= eFaulterror;                                                    /*!< Set fault/error in the faulterror vector*/
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <DPC_FLT_Faulterror_Set+0x20>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	4a03      	ldr	r2, [pc, #12]	; (8000d54 <DPC_FLT_Faulterror_Set+0x20>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	200000c0 	.word	0x200000c0

08000d58 <Current_Decoupling_Control>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void Current_Decoupling_Control(CDC_Struct *pCDC_sub,PI_STRUCT_t *pPI_ID_CURR_CTRL_sub, PI_STRUCT_t *pPI_IQ_CURR_CTRL_sub ,float *pVd_ctrl_FF_sub, float *pVq_ctrl_FF_sub){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b090      	sub	sp, #64	; 0x40
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	603b      	str	r3, [r7, #0]

float fomegagrid_sub=pCDC_sub->omegagrid;                                                       ///Omega grid value expressed in Hz - Related to decoupled terms
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
float fInductor_sub=pCDC_sub->Inductor;                                                         ///Inductor value expressed in H - Related to decoupled terms
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
float fId_ref_sub=pCDC_sub->Id_ref;                                                             ///Local variable - d-axis current referance
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
float fIq_ref_sub=pCDC_sub->Iq_ref;                                                             ///Local variable - q-axis current referance
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
float fId_feed_sub=pCDC_sub->Id_feed;                                                           ///Local variable - d-axis current feedback
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
float fIq_feed_sub=pCDC_sub->Iq_feed;                                                           ///Local variable - q-axis current feedback
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
float fVq_Curr_Ctrl_sub;                                                                        ///Local variable - q-axis PI output
float fVd_Decoupling_sub;                                                                       ///Local variable - d-axis decoupling term
float fVq_Decoupling_sub;                                                                       ///Local variable - d-axis decoupling term
//float *pVd_ctrl_FF_sub;                                                                          ///Local variable - d-axis FeefForward term
//float *pVq_ctrl_FF_sub;                                                                          ///Local variable - d-axis FeefForward term
float fVdc_sub=pCDC_sub->Vdc_feed;                                                              ///Local variable - Vdc feedback
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24

  fVd_Curr_Ctrl_sub=PI(fId_ref_sub, fId_feed_sub , pPI_ID_CURR_CTRL_sub);                       ///d-axis PI regulator block
 8000d90:	68b8      	ldr	r0, [r7, #8]
 8000d92:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8000d96:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8000d9a:	f001 fe11 	bl	80029c0 <PI>
 8000d9e:	ed87 0a08 	vstr	s0, [r7, #32]
  fVq_Curr_Ctrl_sub=PI(fIq_ref_sub, fIq_feed_sub , pPI_IQ_CURR_CTRL_sub);                       ///q-axis PI regulator block
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8000da8:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8000dac:	f001 fe08 	bl	80029c0 <PI>
 8000db0:	ed87 0a07 	vstr	s0, [r7, #28]

  if(pCDC_sub->Decoupling_Enable==SET)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d130      	bne.n	8000e20 <Current_Decoupling_Control+0xc8>
  {
  pCDC_sub->Vd_Decoupling=fVd_Decoupling_sub=fIq_feed_sub*fomegagrid_sub*fInductor_sub;         ///d-axis decoupling term block
 8000dbe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000dc2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dca:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd2:	edc7 7a06 	vstr	s15, [r7, #24]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	631a      	str	r2, [r3, #48]	; 0x30
  pCDC_sub->Vq_Decoupling=fVq_Decoupling_sub=fId_feed_sub*fomegagrid_sub*fInductor_sub;         ///q-axis decoupling term block
 8000ddc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000de0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df0:	edc7 7a05 	vstr	s15, [r7, #20]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
  pCDC_sub->Vd_Curr_Ctrl=(fVd_Curr_Ctrl_sub-fVd_Decoupling_sub);                                ///d-axis decoupling term applied
 8000dfa:	ed97 7a08 	vldr	s14, [r7, #32]
 8000dfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	edc3 7a08 	vstr	s15, [r3, #32]
  pCDC_sub->Vq_Curr_Ctrl=(fVq_Curr_Ctrl_sub+fVq_Decoupling_sub);                                ///q-axis decoupling term applied
 8000e0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e10:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8000e1e:	e005      	b.n	8000e2c <Current_Decoupling_Control+0xd4>
  }
  else
  {
  pCDC_sub->Vd_Curr_Ctrl=fVd_Curr_Ctrl_sub;                                                    ///d-axis decoupling term bypassed
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6a3a      	ldr	r2, [r7, #32]
 8000e24:	621a      	str	r2, [r3, #32]
  pCDC_sub->Vq_Curr_Ctrl=fVq_Curr_Ctrl_sub;                                                    ///q-axis decoupling term bypassed
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	69fa      	ldr	r2, [r7, #28]
 8000e2a:	625a      	str	r2, [r3, #36]	; 0x24
  }



  if(pCDC_sub->FF_Enable==SET)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d105      	bne.n	8000e42 <Current_Decoupling_Control+0xea>
  {
  FeedForward_Control(pCDC_sub,pVd_ctrl_FF_sub,pVq_ctrl_FF_sub);                                ///dq-axis Feed_Forward applied
 8000e36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e38:	6839      	ldr	r1, [r7, #0]
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f000 f837 	bl	8000eae <FeedForward_Control>
 8000e40:	e007      	b.n	8000e52 <Current_Decoupling_Control+0xfa>
  }
  else
  {
    *pVd_ctrl_FF_sub=pCDC_sub->Vd_Curr_Ctrl;                                                    ///d-axis Feed_Forward bypassed
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a1a      	ldr	r2, [r3, #32]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	601a      	str	r2, [r3, #0]
    *pVq_ctrl_FF_sub=pCDC_sub->Vq_Curr_Ctrl;                                                    ///q-axis Feed_Forward bypassed
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e50:	601a      	str	r2, [r3, #0]
  }

  if(pCDC_sub->VDC_FF_Enable==SET)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d114      	bne.n	8000e86 <Current_Decoupling_Control+0x12e>
  {
    *pVd_ctrl_FF_sub=*pVq_ctrl_FF_sub/fVdc_sub;                                                 ///d-axis - Vdc Feed_Forward applied
 8000e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e5e:	edd3 6a00 	vldr	s13, [r3]
 8000e62:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	edc3 7a00 	vstr	s15, [r3]
    *pVq_ctrl_FF_sub=*pVq_ctrl_FF_sub/fVdc_sub;                                                 ///q-axis - Vdc Feed_Forward applied
 8000e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e72:	edd3 6a00 	vldr	s13, [r3]
 8000e76:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e80:	edc3 7a00 	vstr	s15, [r3]
 8000e84:	e007      	b.n	8000e96 <Current_Decoupling_Control+0x13e>
  }
  else
  {
    *pVd_ctrl_FF_sub=pCDC_sub->Vd_Curr_Ctrl;                                                    ///d-axis - Vdc Feed_Forward bypassed
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6a1a      	ldr	r2, [r3, #32]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	601a      	str	r2, [r3, #0]
    *pVq_ctrl_FF_sub=pCDC_sub->Vq_Curr_Ctrl;                                                    ///q-axis - Vdc Feed_Forward bypassed
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e94:	601a      	str	r2, [r3, #0]
  }


  *pVd_ctrl_FF_sub=*pVd_ctrl_FF_sub;                                                               ///d-axis Vcontrol CDC output term
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	601a      	str	r2, [r3, #0]
  *pVq_ctrl_FF_sub=*pVq_ctrl_FF_sub;                                                               ///q-axis Vcontrol CDC output term
 8000e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ea4:	601a      	str	r2, [r3, #0]

}
 8000ea6:	bf00      	nop
 8000ea8:	3740      	adds	r7, #64	; 0x40
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <FeedForward_Control>:
  *
  * @note Function valid for STM32G4xx microconroller family
  */

void FeedForward_Control(CDC_Struct *pCDC_sub,float *pVd_ctrl_FF_sub, float *pVq_ctrl_FF_sub)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b089      	sub	sp, #36	; 0x24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
float fVd_feed_sub=pCDC_sub->Vd_feed;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	61fb      	str	r3, [r7, #28]
float fVq_feed_sub=pCDC_sub->Vq_feed;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec4:	61bb      	str	r3, [r7, #24]
float fVd_ctrl_sub=pCDC_sub->Vd_Curr_Ctrl;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	617b      	str	r3, [r7, #20]
float fVq_ctrl_sub=pCDC_sub->Vq_Curr_Ctrl;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	613b      	str	r3, [r7, #16]


pCDC_sub->Vd_ctrl_FF=fVd_feed_sub-fVd_ctrl_sub;
 8000ed2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ed6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
pCDC_sub->Vq_ctrl_FF=fVq_feed_sub-fVq_ctrl_sub;
 8000ee4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ee8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

  *pVd_ctrl_FF_sub=pCDC_sub->Vd_ctrl_FF;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	601a      	str	r2, [r3, #0]
  *pVq_ctrl_FF_sub=pCDC_sub->Vq_ctrl_FF;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]
}
 8000f06:	bf00      	nop
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <Voltage_Control>:
  *
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void Voltage_Control(VOLTAGECTRL_Struct *VOLTAGECTRL_sub,PI_STRUCT_t *PI_VDC_CTRL_sub, float *Id_ctrl_sub){
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  float Vdc_ref_sub=VOLTAGECTRL_sub->Vdc_ref;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	617b      	str	r3, [r7, #20]
  float Vdc_feed_sub=VOLTAGECTRL_sub->Vdc_feed;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	613b      	str	r3, [r7, #16]

  PI(Vdc_ref_sub, Vdc_feed_sub , PI_VDC_CTRL_sub);
 8000f2a:	68b8      	ldr	r0, [r7, #8]
 8000f2c:	edd7 0a04 	vldr	s1, [r7, #16]
 8000f30:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f34:	f001 fd44 	bl	80029c0 <PI>
  VOLTAGECTRL_sub->Id_ctrl=PI_VDC_CTRL_sub->PIout_sat;
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	69da      	ldr	r2, [r3, #28]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	609a      	str	r2, [r3, #8]
  *Id_ctrl_sub=PI_VDC_CTRL_sub->PIout_sat;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	69da      	ldr	r2, [r3, #28]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	601a      	str	r2, [r3, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <DPC_LPCNTRL_PFC_Mode_Reset>:
  * @retval null
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void DPC_LPCNTRL_PFC_Mode_Reset(PI_STRUCT_t *PI_VDC_CTRL, CDC_Struct *CDC)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
        PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <DPC_LPCNTRL_PFC_Mode>:
  * @retval null
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void DPC_LPCNTRL_PFC_Mode(PFC_CTRL_t *pPFC_CTRL_loc, PI_STRUCT_t *PI_VDC_CTRL, VOLTAGECTRL_Struct *VOLTAGECTRL, CDC_Struct *CDC,TRANSFORM_QDO_t *V_DQO_CTRL,TRANSFORM_QDO_t *Current_qdo,TRANSFORM_QDO_t *Voltage_qdo,VoltageDC_ADC_NORM_Struct *VOLTAGE_ADC_DC_IN_PHY)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b08a      	sub	sp, #40	; 0x28
 8000f82:	af02      	add	r7, sp, #8
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	603b      	str	r3, [r7, #0]

  float Id_ctrl_sub=0;
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  float Vd_ctrl_FF=0;
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]
  float Vq_ctrl_FF=0;
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]



  pPFC_CTRL_loc->VOLTAGECTRL=*VOLTAGECTRL;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	33ec      	adds	r3, #236	; 0xec
 8000fa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  pPFC_CTRL_loc->CDC=*CDC;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	3314      	adds	r3, #20
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	22d8      	movs	r2, #216	; 0xd8
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f00b fbf5 	bl	800c7a4 <memcpy>

   if(pPFC_CTRL_loc->PFC_CTRL_State==VOLTAGE_LOOP) /// Voltage and Current control closed
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	789b      	ldrb	r3, [r3, #2]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d15c      	bne.n	800107c <DPC_LPCNTRL_PFC_Mode+0xfe>
  {
    PI_VDC_CTRL->resetPI=pPFC_CTRL_loc->VdcCTRL_Reset;          ///Release PI accumulator
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	785a      	ldrb	r2, [r3, #1]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    VOLTAGECTRL->Vdc_ref=pPFC_CTRL_loc->PFC_VDC_Ref;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	8a1b      	ldrh	r3, [r3, #16]
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edc3 7a00 	vstr	s15, [r3]
    VOLTAGECTRL->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;
 8000fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	605a      	str	r2, [r3, #4]
    CDC->pPI_ID_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	781a      	ldrb	r2, [r3, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	781a      	ldrb	r2, [r3, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    CDC->Id_feed=Current_qdo->axd;                              ///Pass dq current feedback to CDC struct (d-axis)
 8001004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	611a      	str	r2, [r3, #16]
    CDC->Iq_feed=Current_qdo->axq;                              ///Pass dq current feedback to CDC struct (q-axis)
 800100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	615a      	str	r2, [r3, #20]
    CDC->Vd_feed=Voltage_qdo->axd;                              ///Pass dq voltage feedback to CDC struct (d-axis)
 8001014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
    CDC->Vq_feed=Voltage_qdo->axq;                              ///Pass dq voltage feedback to CDC struct (q-axis)
 800101c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
    CDC->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;               ///Pass DC voltage feedback to CDC struct
 8001024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	639a      	str	r2, [r3, #56]	; 0x38

    Voltage_Control(VOLTAGECTRL, PI_VDC_CTRL,&Id_ctrl_sub);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	461a      	mov	r2, r3
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff6c 	bl	8000f12 <Voltage_Control>
    CDC->Id_ref=Id_ctrl_sub;
 800103a:	69fa      	ldr	r2, [r7, #28]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	609a      	str	r2, [r3, #8]
    CDC->Iq_ref=0;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
    Current_Decoupling_Control(CDC,&CDC->pPI_ID_CURR_CTRL,&CDC->pPI_IQ_CURR_CTRL, &Vd_ctrl_FF,&Vq_ctrl_FF);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8001054:	f107 0018 	add.w	r0, r7, #24
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4603      	mov	r3, r0
 8001060:	6838      	ldr	r0, [r7, #0]
 8001062:	f7ff fe79 	bl	8000d58 <Current_Decoupling_Control>

    V_DQO_CTRL->axd=Vd_ctrl_FF;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106a:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001070:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 8001072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
    V_DQO_CTRL->axd=0;
    V_DQO_CTRL->axq=0;
    V_DQO_CTRL->axo=0;
  }

}
 800107a:	e08e      	b.n	800119a <DPC_LPCNTRL_PFC_Mode+0x21c>
  else if(pPFC_CTRL_loc->PFC_CTRL_State==CURRENT_LOOP) /// Only Current control closed
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d13b      	bne.n	80010fc <DPC_LPCNTRL_PFC_Mode+0x17e>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=pPFC_CTRL_loc->CDC_Reset;     ///Release PI accumulator
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	781a      	ldrb	r2, [r3, #0]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->Id_feed=Current_qdo->axd;                              ///Pass dq current feedback to CDC struct (d-axis)
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	611a      	str	r2, [r3, #16]
    CDC->Iq_feed=Current_qdo->axq;                              ///Pass dq current feedback to CDC struct (q-axis)
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	615a      	str	r2, [r3, #20]
    CDC->Vd_feed=Voltage_qdo->axd;                              ///Pass dq voltage feedback to CDC struct (d-axis)
 80010b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
    CDC->Vq_feed=Voltage_qdo->axq;                              ///Pass dq voltage feedback to CDC struct (q-axis)
 80010b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
    CDC->Vdc_feed=VOLTAGE_ADC_DC_IN_PHY->Vdc_tot;               ///Pass DC voltage feedback to CDC struct
 80010c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
    Current_Decoupling_Control(CDC,&CDC->pPI_ID_CURR_CTRL,&CDC->pPI_IQ_CURR_CTRL, &Vd_ctrl_FF,&Vq_ctrl_FF);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80010d4:	f107 0018 	add.w	r0, r7, #24
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	4603      	mov	r3, r0
 80010e0:	6838      	ldr	r0, [r7, #0]
 80010e2:	f7ff fe39 	bl	8000d58 <Current_Decoupling_Control>
    V_DQO_CTRL->axd=Vd_ctrl_FF;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ea:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f0:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
}
 80010fa:	e04e      	b.n	800119a <DPC_LPCNTRL_PFC_Mode+0x21c>
  else if(pPFC_CTRL_loc->PFC_CTRL_State==OPEN_LOOP) /// Open LOOP
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	789b      	ldrb	r3, [r3, #2]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d132      	bne.n	800116a <DPC_LPCNTRL_PFC_Mode+0x1ec>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    CDC->Vd_Curr_Ctrl=pPFC_CTRL_loc->V_DQO_CTRL_MAN.axd;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	621a      	str	r2, [r3, #32]
    CDC->Vq_Curr_Ctrl=pPFC_CTRL_loc->V_DQO_CTRL_MAN.axq;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
    if(CDC->FF_Enable==SET)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001132:	2b01      	cmp	r3, #1
 8001134:	d108      	bne.n	8001148 <DPC_LPCNTRL_PFC_Mode+0x1ca>
    FeedForward_Control(CDC,&Vd_ctrl_FF,&Vq_ctrl_FF);                                ///dq-axis Feed_Forward applied
 8001136:	f107 0214 	add.w	r2, r7, #20
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	4619      	mov	r1, r3
 8001140:	6838      	ldr	r0, [r7, #0]
 8001142:	f7ff feb4 	bl	8000eae <FeedForward_Control>
 8001146:	e005      	b.n	8001154 <DPC_LPCNTRL_PFC_Mode+0x1d6>
    Vd_ctrl_FF=CDC->Vd_Curr_Ctrl;                                                    ///d-axis Feed_Forward bypassed
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	61bb      	str	r3, [r7, #24]
    Vq_ctrl_FF=CDC->Vq_Curr_Ctrl;                                                    ///q-axis Feed_Forward bypassed
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	617b      	str	r3, [r7, #20]
    V_DQO_CTRL->axd=Vd_ctrl_FF;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=Vq_ctrl_FF;
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 8001160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
}
 8001168:	e017      	b.n	800119a <DPC_LPCNTRL_PFC_Mode+0x21c>
    PI_VDC_CTRL->resetPI=SET;                                   ///Mantein Not used regulator in reset mode
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    CDC->pPI_ID_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    CDC->pPI_IQ_CURR_CTRL.resetPI=SET;                          ///Mantein Not used regulator in reset mode
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    V_DQO_CTRL->axd=0;
 8001182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
    V_DQO_CTRL->axq=0;
 800118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
    V_DQO_CTRL->axo=0;
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
}
 800119a:	bf00      	nop
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <DPC_LPCNTRL_BURST_Init>:
*
* @retval none
*
* @note Function valid for STM32G4xx microconroller family
*/
void DPC_LPCNTRL_BURST_Init(BURST_STRUCT *BURST_t_local,FlagStatus Burst_Enable_loc,uint16_t Vref_hist_VOLT,uint16_t delta_Vref_hist_VOLT,float I_dc_NO_LOAD_Limit_AMP_loc,float I_dc_LOW_LOAD_Limit_AMP_loc,float duty_no_load_local,float duty_low_load_local,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc){
 80011a2:	b480      	push	{r7}
 80011a4:	b08d      	sub	sp, #52	; 0x34
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	61f8      	str	r0, [r7, #28]
 80011aa:	4608      	mov	r0, r1
 80011ac:	4611      	mov	r1, r2
 80011ae:	461a      	mov	r2, r3
 80011b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80011b4:	edc7 0a03 	vstr	s1, [r7, #12]
 80011b8:	ed87 1a02 	vstr	s2, [r7, #8]
 80011bc:	edc7 1a01 	vstr	s3, [r7, #4]
 80011c0:	4603      	mov	r3, r0
 80011c2:	76fb      	strb	r3, [r7, #27]
 80011c4:	460b      	mov	r3, r1
 80011c6:	833b      	strh	r3, [r7, #24]
 80011c8:	4613      	mov	r3, r2
 80011ca:	82fb      	strh	r3, [r7, #22]
  uint16_t Vout_load_min;                                                                       /*!< Local histeresis lower ouput DC voltage Thrueshold expressed in Bits */
  uint16_t I_dc_NO_LOAD_Limit_loc;                                                              /// Local variable to pass Output current theshold (Expressed in AMPs) to determinate No Load Condition
  uint16_t I_dc_LOW_LOAD_Limit_loc;                                                             /// Local variable to pass Output current theshold (Expressed in AMPs) to determinate Low Load Condition


  Vref_hist_loc=(uint16_t)(((float)Vref_hist_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);
 80011cc:	8b3b      	ldrh	r3, [r7, #24]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80011dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80011e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ee:	ee17 3a90 	vmov	r3, s15
 80011f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  delta_Vref_hist_loc=(uint16_t)(((float)delta_Vref_hist_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);
 80011f4:	8afb      	ldrh	r3, [r7, #22]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001200:	edd3 7a06 	vldr	s15, [r3, #24]
 8001204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800120a:	edd3 7a08 	vldr	s15, [r3, #32]
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001216:	ee17 3a90 	vmov	r3, s15
 800121a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  Vout_load_max=Vref_hist_loc+delta_Vref_hist_loc;                                              /*!< Obtain and set higher output voltage term*/
 800121c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800121e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001220:	4413      	add	r3, r2
 8001222:	857b      	strh	r3, [r7, #42]	; 0x2a
  Vout_load_min=Vref_hist_loc-delta_Vref_hist_loc;                                              /*!< Obtain and set lower output voltage term*/
 8001224:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001226:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	853b      	strh	r3, [r7, #40]	; 0x28

  //I_dc_NO_LOAD_Limit_loc=(uint16_t)(((float)I_dc_NO_LOAD_Limit_AMP_loc*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);       /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
  //I_dc_LOW_LOAD_Limit_loc=(uint16_t)(((float)I_dc_LOW_LOAD_Limit_AMP_loc*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);     /// (IDC_Low_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
  I_dc_NO_LOAD_Limit_loc = (uint16_t)(float)I_dc_NO_LOAD_Limit_AMP_loc;
 800122c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001234:	ee17 3a90 	vmov	r3, s15
 8001238:	84fb      	strh	r3, [r7, #38]	; 0x26
  I_dc_LOW_LOAD_Limit_loc=(uint16_t)(float)I_dc_LOW_LOAD_Limit_AMP_loc;
 800123a:	edd7 7a03 	vldr	s15, [r7, #12]
 800123e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001242:	ee17 3a90 	vmov	r3, s15
 8001246:	84bb      	strh	r3, [r7, #36]	; 0x24


  BURST_t_local->Vref_hist=Vref_hist_loc;
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800124c:	805a      	strh	r2, [r3, #2]
  BURST_t_local->delta_Vref_hist=delta_Vref_hist_loc;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001252:	809a      	strh	r2, [r3, #4]
  BURST_t_local->Vout_max=Vout_load_max;
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001258:	80da      	strh	r2, [r3, #6]
  BURST_t_local->Vout_min=Vout_load_min;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800125e:	811a      	strh	r2, [r3, #8]
  BURST_t_local->Duty_Limit=0.5;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001266:	615a      	str	r2, [r3, #20]
  BURST_t_local->Duty_noload=duty_no_load_local;
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	60da      	str	r2, [r3, #12]
  BURST_t_local->Duty_lowload=duty_low_load_local;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	611a      	str	r2, [r3, #16]
  BURST_t_local->Burst_Enable=Burst_Enable_loc;
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	7efa      	ldrb	r2, [r7, #27]
 8001278:	761a      	strb	r2, [r3, #24]
  BURST_t_local->Iout_no_load_threshold=I_dc_NO_LOAD_Limit_loc;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800127e:	835a      	strh	r2, [r3, #26]
  BURST_t_local->Iout_low_load_threshold=I_dc_LOW_LOAD_Limit_loc;
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001284:	839a      	strh	r2, [r3, #28]

}
 8001286:	bf00      	nop
 8001288:	3734      	adds	r7, #52	; 0x34
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <DPC_LPCNTRL_Burst_Mode>:
* @retval none
*
* @note Working with DPC_LPCNTRL_Burst_Check
* @note Function valid for STM32G4xx microconroller family
*/
void DPC_LPCNTRL_Burst_Mode(uint32_t* p_Data_Sub,BURST_STRUCT *BURST_CTRL_f,CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub/*uint32_t* iDC_Data_Sub*/,DPC_PWM_TypeDef *tDPC_PWM_loc,DMA_PWMDUTY_STRUCT* DMA_SOURCE ){
 8001292:	b580      	push	{r7, lr}
 8001294:	b08a      	sub	sp, #40	; 0x28
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	603b      	str	r3, [r7, #0]
  int16_t I_max_int;
  int16_t I_min_int;
  float Burst_Duty;
  DMA_PWMDUTY_STRUCT* DMA_SOURCE1;

  I_max=0;
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24

  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phA){
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	d502      	bpl.n	80012c0 <DPC_LPCNTRL_Burst_Mode+0x2e>
	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d2:	d502      	bpl.n	80012da <DPC_LPCNTRL_Burst_Mode+0x48>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ec:	d502      	bpl.n	80012f4 <DPC_LPCNTRL_Burst_Mode+0x62>
  	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (I_min > CURRENT_ADC_AC_IN_NORM_Sub->phA){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ed97 7a08 	vldr	s14, [r7, #32]
 80012fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	dd02      	ble.n	800130e <DPC_LPCNTRL_Burst_Mode+0x7c>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	623b      	str	r3, [r7, #32]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	edd3 7a01 	vldr	s15, [r3, #4]
 8001314:	ed97 7a08 	vldr	s14, [r7, #32]
 8001318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	d502      	bpl.n	8001328 <DPC_LPCNTRL_Burst_Mode+0x96>
	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	623b      	str	r3, [r7, #32]
  }
  if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	edd3 7a02 	vldr	s15, [r3, #8]
 800132e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133a:	d502      	bpl.n	8001342 <DPC_LPCNTRL_Burst_Mode+0xb0>
	I_min = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	623b      	str	r3, [r7, #32]
  }

  I_min_int = (int16_t) (I_min*10);
 8001342:	edd7 7a08 	vldr	s15, [r7, #32]
 8001346:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800134a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001352:	ee17 3a90 	vmov	r3, s15
 8001356:	82fb      	strh	r3, [r7, #22]
  I_max_int = (int16_t) (I_max*10);
 8001358:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800135c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001368:	ee17 3a90 	vmov	r3, s15
 800136c:	83fb      	strh	r3, [r7, #30]

  if (-I_min_int > I_max_int){
 800136e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001372:	425a      	negs	r2, r3
 8001374:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001378:	429a      	cmp	r2, r3
 800137a:	dd03      	ble.n	8001384 <DPC_LPCNTRL_Burst_Mode+0xf2>
	  I_max_int= -I_min_int;
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	425b      	negs	r3, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	83fb      	strh	r3, [r7, #30]
  }

  if (BURST_CTRL_f->Burst_Enable==SET){                                                 /** If Burst_Enable is SET */
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	7e1b      	ldrb	r3, [r3, #24]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d178      	bne.n	800147e <DPC_LPCNTRL_Burst_Mode+0x1ec>

    Vout_load=p_Data_Sub[0]+p_Data_Sub[1];                                              /*!< Pass voltages data in local terms ([0]=VDC_upper  [1]=VDC_lower) */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	b29a      	uxth	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3304      	adds	r3, #4
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	4413      	add	r3, r2
 800139c:	82bb      	strh	r3, [r7, #20]
    Vout_load_max=BURST_CTRL_f->Vout_max;                                               /*!< Set higher output voltage term*/
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	88db      	ldrh	r3, [r3, #6]
 80013a2:	827b      	strh	r3, [r7, #18]
    Vout_load_min=BURST_CTRL_f->Vout_min;                                               /*!< Set lower output voltage term*/
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	891b      	ldrh	r3, [r3, #8]
 80013a8:	823b      	strh	r3, [r7, #16]
    BURST_CTRL_f->Vout_load=Vout_load;                                                  /*!< Store output voltage in "BURST_CTRL" struct */
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	8aba      	ldrh	r2, [r7, #20]
 80013ae:	801a      	strh	r2, [r3, #0]
    //I_load_Burst=iDC_Data_Sub[0];                                                       /// [0]=Iload


  if(BURST_CTRL_f->BURST_Status==BURST_Progress || BURST_CTRL_f->BURST_Status==BURST_Run){
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	7f9b      	ldrb	r3, [r3, #30]
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d003      	beq.n	80013c0 <DPC_LPCNTRL_Burst_Mode+0x12e>
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	7f9b      	ldrb	r3, [r3, #30]
 80013bc:	2b06      	cmp	r3, #6
 80013be:	d15e      	bne.n	800147e <DPC_LPCNTRL_Burst_Mode+0x1ec>

    if(BURST_CTRL_f->Duty_noload>BURST_CTRL_f->Duty_Limit){                              ///Start Check Duty LIMIT
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80013cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d4:	dd03      	ble.n	80013de <DPC_LPCNTRL_Burst_Mode+0x14c>
      BURST_CTRL_f->Duty_noload=BURST_CTRL_f->Duty_Limit;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	60da      	str	r2, [r3, #12]
    }//End Check Duty_noload LIMIT
    if(BURST_CTRL_f->Duty_lowload>BURST_CTRL_f->Duty_Limit){                             ///Start Check Duty LIMIT
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	ed93 7a04 	vldr	s14, [r3, #16]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80013ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	dd03      	ble.n	80013fc <DPC_LPCNTRL_Burst_Mode+0x16a>
      BURST_CTRL_f->Duty_lowload=BURST_CTRL_f->Duty_Limit;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	611a      	str	r2, [r3, #16]
    }//End Check Duty_lowload LIMIT


    if(I_max_int<=(BURST_CTRL_f->Iout_no_load_threshold)){                           ///NO_LOAD  Check
 80013fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	8b52      	ldrh	r2, [r2, #26]
 8001404:	4293      	cmp	r3, r2
 8001406:	dc03      	bgt.n	8001410 <DPC_LPCNTRL_Burst_Mode+0x17e>
    Burst_Duty=BURST_CTRL_f->Duty_noload;
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	e00e      	b.n	800142e <DPC_LPCNTRL_Burst_Mode+0x19c>
    }
    else if(I_max_int>(BURST_CTRL_f->Iout_no_load_threshold) || I_max_int<=(BURST_CTRL_f->Iout_low_load_threshold)){                     ///LOW_LOAD  Check
 8001410:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	8b52      	ldrh	r2, [r2, #26]
 8001418:	4293      	cmp	r3, r2
 800141a:	dc05      	bgt.n	8001428 <DPC_LPCNTRL_Burst_Mode+0x196>
 800141c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	8b92      	ldrh	r2, [r2, #28]
 8001424:	4293      	cmp	r3, r2
 8001426:	dc02      	bgt.n	800142e <DPC_LPCNTRL_Burst_Mode+0x19c>
    Burst_Duty=BURST_CTRL_f->Duty_lowload;
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	61bb      	str	r3, [r7, #24]
    }

    DPC_PWM_Send_Burst_PWM(tDPC_PWM_loc,Burst_Duty,Burst_Duty,Burst_Duty,DMA_SOURCE);  /*!< Refresh BURST Duty*/
 800142e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001430:	ed97 1a06 	vldr	s2, [r7, #24]
 8001434:	edd7 0a06 	vldr	s1, [r7, #24]
 8001438:	ed97 0a06 	vldr	s0, [r7, #24]
 800143c:	6838      	ldr	r0, [r7, #0]
 800143e:	f000 fedb 	bl	80021f8 <DPC_PWM_Send_Burst_PWM>
    //DMA_SOURCE=DMA_SOURCE1;

//      if (Vout_load>Vout_load_max && BURST_CTRL_f->BURST_PACKAGE==SET)                  /*!< Occured when Vout overcome higher trueshold and BURST_Flag is active*/
      if (Vout_load>Vout_load_max)                                                      /*!< Occured when Vout overcome higher trueshold and BURST_Flag is active*/
 8001442:	8aba      	ldrh	r2, [r7, #20]
 8001444:	8a7b      	ldrh	r3, [r7, #18]
 8001446:	429a      	cmp	r2, r3
 8001448:	d908      	bls.n	800145c <DPC_LPCNTRL_Burst_Mode+0x1ca>

      {
        DPC_PWM_OutDisable();                                                           /*!< DISABLE BURST PWM*/
 800144a:	f001 f999 	bl	8002780 <DPC_PWM_OutDisable>
        BURST_CTRL_f->BURST_PACKAGE=RESET;                                              /*!< BURST_Flag become RESET (Burst Inactive)*/
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2200      	movs	r2, #0
 8001452:	729a      	strb	r2, [r3, #10]
        BURST_CTRL_f->BURST_IN_RANGE=RESET;                                             /*!< BURST_IN_RANGE_Flag become RESET (Vout higher then limit)*/
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2200      	movs	r2, #0
 8001458:	72da      	strb	r2, [r3, #11]
 800145a:	e010      	b.n	800147e <DPC_LPCNTRL_Burst_Mode+0x1ec>
      }
//      else if (Vout_load<Vout_load_min && BURST_CTRL_f->BURST_PACKAGE==RESET)           /*!< Occured when Vout is lower then low-trueshold and BURST_Flag is stopped*/
      else if (Vout_load<Vout_load_min)                                                 /*!< Occured when Vout is lower then low-trueshold and BURST_Flag is stopped*/
 800145c:	8aba      	ldrh	r2, [r7, #20]
 800145e:	8a3b      	ldrh	r3, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d209      	bcs.n	8001478 <DPC_LPCNTRL_Burst_Mode+0x1e6>
      {
        DPC_PWM_OutEnable(tDPC_PWM_loc);                                               /*!< ENABLE BURST PWM*/
 8001464:	6838      	ldr	r0, [r7, #0]
 8001466:	f001 f991 	bl	800278c <DPC_PWM_OutEnable>
        BURST_CTRL_f->BURST_PACKAGE=SET;                                                /*!< BURST_Flag become SET (Burst Active)*/
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2201      	movs	r2, #1
 800146e:	729a      	strb	r2, [r3, #10]
        BURST_CTRL_f->BURST_IN_RANGE=RESET;                                             /*!< BURST_IN_RANGE_Flag become RESET (Vout lower then limit)*/
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2200      	movs	r2, #0
 8001474:	72da      	strb	r2, [r3, #11]
 8001476:	e002      	b.n	800147e <DPC_LPCNTRL_Burst_Mode+0x1ec>
      }
      else                                                                              /*!< Occured in inner hysteresis window*/
      {
        BURST_CTRL_f->BURST_IN_RANGE=SET;
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2201      	movs	r2, #1
 800147c:	72da      	strb	r2, [r3, #11]
      }
  }
  }
  BURST_CTRL_f->uI_load_Burst=I_max;
 800147e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001486:	ee17 3a90 	vmov	r3, s15
 800148a:	b29a      	uxth	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	841a      	strh	r2, [r3, #32]
  BURST_CTRL_f->Burst_Duty=Burst_Duty;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <DPC_LPCNTRL_Inrush_Init>:
  * @retval INRUSH_StatusTypeDef
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void DPC_LPCNTRL_Inrush_Init(INRUSH_STRUCT *INRUSH_CTRL_f,uint16_t Vref_hist_VOLT_loc,uint16_t delta_Vref_hist_VOLT_loc,float I_dc_NO_LOAD_Limit_AMP_loc,FlagStatus InrushEnable_loc,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 800149e:	b480      	push	{r7}
 80014a0:	b089      	sub	sp, #36	; 0x24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	4608      	mov	r0, r1
 80014a8:	4611      	mov	r1, r2
 80014aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4603      	mov	r3, r0
 80014b2:	817b      	strh	r3, [r7, #10]
 80014b4:	460b      	mov	r3, r1
 80014b6:	813b      	strh	r3, [r7, #8]
 80014b8:	4613      	mov	r3, r2
 80014ba:	70fb      	strb	r3, [r7, #3]
  uint16_t Vout_load_min;                                                                       /*!< Local histeresis lower ouput DC voltage Thrueshold expressed in Bits */
  uint16_t I_dc_NO_LOAD_Limit_loc;                                                              /// Local variable to pass Output current theshold (Expressed in AMPs) to determinate No Load Condition



  Vref_hist_loc=(uint16_t)(((float)Vref_hist_VOLT_loc*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);
 80014bc:	897b      	ldrh	r3, [r7, #10]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014de:	ee17 3a90 	vmov	r3, s15
 80014e2:	83fb      	strh	r3, [r7, #30]
  delta_Vref_hist_loc=(uint16_t)(((float)delta_Vref_hist_VOLT_loc*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);
 80014e4:	893b      	ldrh	r3, [r7, #8]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80014f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80014fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001506:	ee17 3a90 	vmov	r3, s15
 800150a:	83bb      	strh	r3, [r7, #28]

  Vout_load_max=Vref_hist_loc+delta_Vref_hist_loc;                                              /*!< Obtain and set higher output voltage term*/
 800150c:	8bfa      	ldrh	r2, [r7, #30]
 800150e:	8bbb      	ldrh	r3, [r7, #28]
 8001510:	4413      	add	r3, r2
 8001512:	837b      	strh	r3, [r7, #26]
  Vout_load_min=Vref_hist_loc-delta_Vref_hist_loc;                                              /*!< Obtain and set lower output voltage term*/
 8001514:	8bfa      	ldrh	r2, [r7, #30]
 8001516:	8bbb      	ldrh	r3, [r7, #28]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	833b      	strh	r3, [r7, #24]

  //I_dc_NO_LOAD_Limit_loc=(uint16_t)(((float)I_dc_NO_LOAD_Limit_AMP_loc*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);   /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
  I_dc_NO_LOAD_Limit_loc=(uint16_t)I_dc_NO_LOAD_Limit_AMP_loc;
 800151c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001524:	ee17 3a90 	vmov	r3, s15
 8001528:	82fb      	strh	r3, [r7, #22]



  INRUSH_CTRL_f->Vref_hist=Vref_hist_loc;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8bfa      	ldrh	r2, [r7, #30]
 800152e:	805a      	strh	r2, [r3, #2]
  INRUSH_CTRL_f->delta_Vref_hist=delta_Vref_hist_loc;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8bba      	ldrh	r2, [r7, #28]
 8001534:	809a      	strh	r2, [r3, #4]
  INRUSH_CTRL_f->InrushEnable=InrushEnable_loc;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	78fa      	ldrb	r2, [r7, #3]
 800153a:	729a      	strb	r2, [r3, #10]
  INRUSH_CTRL_f->Vout_max=Vout_load_max;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8b7a      	ldrh	r2, [r7, #26]
 8001540:	80da      	strh	r2, [r3, #6]
  INRUSH_CTRL_f->Vout_min=Vout_load_min;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8b3a      	ldrh	r2, [r7, #24]
 8001546:	811a      	strh	r2, [r3, #8]
  INRUSH_CTRL_f->Iout_load_threshold=I_dc_NO_LOAD_Limit_loc;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8afa      	ldrh	r2, [r7, #22]
 800154c:	819a      	strh	r2, [r3, #12]
}
 800154e:	bf00      	nop
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <DPC_LPCNTRL_CDC_Init>:
  * @retval none
  *
  * @note Function valid for STM32G4xx microconroller family
  */
void DPC_LPCNTRL_CDC_Init(CDC_Struct *CDC_local,float omegagrid_loc,float Inductor_loc,FlagStatus FF_Enable_SET,FlagStatus Decoupling_Enable_SET,FlagStatus VDC_FF_Enable_SET)
{
 800155a:	b480      	push	{r7}
 800155c:	b085      	sub	sp, #20
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	ed87 0a02 	vstr	s0, [r7, #8]
 8001566:	edc7 0a01 	vstr	s1, [r7, #4]
 800156a:	4608      	mov	r0, r1
 800156c:	4611      	mov	r1, r2
 800156e:	461a      	mov	r2, r3
 8001570:	4603      	mov	r3, r0
 8001572:	70fb      	strb	r3, [r7, #3]
 8001574:	460b      	mov	r3, r1
 8001576:	70bb      	strb	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  CDC_local->omegagrid=omegagrid_loc;                   /*!< Set omega in Current Decaupling Control*/
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	601a      	str	r2, [r3, #0]
  CDC_local->Inductor=Inductor_loc;                     /*!< Set Inductor value in Current Decaupling Control*/
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	605a      	str	r2, [r3, #4]
  CDC_local->FF_Enable=FF_Enable_SET;                   /*!< Set Initial state of AC FeedForward in Current Decoupling Control*/
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	78fa      	ldrb	r2, [r7, #3]
 800158c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  CDC_local->Decoupling_Enable=Decoupling_Enable_SET;   /*!< Set Initial state of Decoupling compensator in Current Decoupling Control*/
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	78ba      	ldrb	r2, [r7, #2]
 8001594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  CDC_local->VDC_FF_Enable=VDC_FF_Enable_SET;           /*!< Set Initial state of DC FeedForward in Current Decoupling Control*/
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	787a      	ldrb	r2, [r7, #1]
 800159c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <DPC_LPCNTRL_PFC_Init>:
*
* @note Function valid for STM32G4xx microconroller family
*/
//void DPC_LPCNTRL_PFC_Init(PFC_CTRL_t *pPFC_CTRL,PFC_CTRL_State_TypeDef PFC_CTRL_State,uint16_t PFC_VDC_Ref_loc,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc);
void DPC_LPCNTRL_PFC_Init(PFC_CTRL_t *pPFC_CTRL_loc,PFC_CTRL_State_TypeDef PFC_CTRL_State,uint16_t PFC_VDC_Ref_loc,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	72fb      	strb	r3, [r7, #11]
 80015ba:	4613      	mov	r3, r2
 80015bc:	813b      	strh	r3, [r7, #8]
  uint16_t PFC_VDC_Ref_BITs_loc;                                                                                /// Local variable to pass Output voltage reference  (Expressed in BITs)
  PFC_VDC_Ref_BITs_loc=(uint16_t)(((float)PFC_VDC_Ref_loc*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);   /// (V_dc_ref [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias
 80015be:	893b      	ldrh	r3, [r7, #8]
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80015ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e0:	ee17 3a90 	vmov	r3, s15
 80015e4:	82fb      	strh	r3, [r7, #22]

  pPFC_CTRL_loc->PFC_VDC_Ref=PFC_VDC_Ref_loc;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	893a      	ldrh	r2, [r7, #8]
 80015ea:	821a      	strh	r2, [r3, #16]
  pPFC_CTRL_loc->PFC_VDC_Ref_BITs=PFC_VDC_Ref_BITs_loc;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8afa      	ldrh	r2, [r7, #22]
 80015f0:	825a      	strh	r2, [r3, #18]
  pPFC_CTRL_loc->CDC_Reset=RESET;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
  pPFC_CTRL_loc->VdcCTRL_Reset=RESET;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	705a      	strb	r2, [r3, #1]
  pPFC_CTRL_loc->PFC_CTRL_State=PFC_CTRL_State;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	7afa      	ldrb	r2, [r7, #11]
 8001602:	709a      	strb	r2, [r3, #2]
}
 8001604:	bf00      	nop
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <FastSin>:
  * @retval SinTable: value of sin  
  *
  * @note Function valid for STM32G4xx microconroller family  
  */    

float FastSin(float theta){
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t tempAdj;
  
    if (theta < 0.0f) theta += DOUBLE_PI;
 800161a:	edd7 7a01 	vldr	s15, [r7, #4]
 800161e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	d507      	bpl.n	8001638 <FastSin+0x28>
 8001628:	edd7 7a01 	vldr	s15, [r7, #4]
 800162c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800169c <FastSin+0x8c>
 8001630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001634:	edc7 7a01 	vstr	s15, [r7, #4]
    if (theta > DOUBLE_PI) theta -= DOUBLE_PI; 
 8001638:	edd7 7a01 	vldr	s15, [r7, #4]
 800163c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800169c <FastSin+0x8c>
 8001640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001648:	dd07      	ble.n	800165a <FastSin+0x4a>
 800164a:	edd7 7a01 	vldr	s15, [r7, #4]
 800164e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800169c <FastSin+0x8c>
 8001652:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001656:	edc7 7a01 	vstr	s15, [r7, #4]
    
    tempAdj = (uint16_t) (Multiplier*theta);
 800165a:	edd7 7a01 	vldr	s15, [r7, #4]
 800165e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80016a0 <FastSin+0x90>
 8001662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166a:	ee17 3a90 	vmov	r3, s15
 800166e:	81fb      	strh	r3, [r7, #14]
    if(tempAdj >= LUT_SAMPLE ){
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001676:	d302      	bcc.n	800167e <FastSin+0x6e>
      tempAdj = LUT_SAMPLE-1;
 8001678:	f240 13ff 	movw	r3, #511	; 0x1ff
 800167c:	81fb      	strh	r3, [r7, #14]
    }
  return SinTable[tempAdj] ;
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <FastSin+0x94>)
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	ee07 3a90 	vmov	s15, r3
} 
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40c90fdb 	.word	0x40c90fdb
 80016a0:	42a2f983 	.word	0x42a2f983
 80016a4:	0800c7e4 	.word	0x0800c7e4

080016a8 <FastCos>:
  * 
  * @retval SinTable: value of Cos  
  *
  * @note Function valid for STM32G4xx microconroller family  
  */      
float FastCos(float theta){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	ed87 0a01 	vstr	s0, [r7, #4]
  
    return FastSin(HALF_PI - theta);
 80016b2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80016d4 <FastCos+0x2c>
 80016b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016be:	eeb0 0a67 	vmov.f32	s0, s15
 80016c2:	f7ff ffa5 	bl	8001610 <FastSin>
 80016c6:	eef0 7a40 	vmov.f32	s15, s0
    }
 80016ca:	eeb0 0a67 	vmov.f32	s0, s15
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	3fc90fdb 	.word	0x3fc90fdb

080016d8 <Integral>:
*
* @retval integrator output value.
*
* @note Function valid for STM32G4xx microconroller family  
*/
float Integral(INTEGRATOR_STRUCT *pInteg, float Input) {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	ed87 0a00 	vstr	s0, [r7]
  
  pInteg->Integral_in=Input;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	609a      	str	r2, [r3, #8]
  
  pInteg->Integral_prev=pInteg->Integralout;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	605a      	str	r2, [r3, #4]
  
  pInteg->Integralout=pInteg->Integral_prev+(pInteg->Integral_in*pInteg->Ts);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edc3 7a03 	vstr	s15, [r3, #12]
  return(pInteg->Integralout);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	ee07 3a90 	vmov	s15, r3
}
 800171a:	eeb0 0a67 	vmov.f32	s0, s15
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DPC_MISC_Check_DCLoad>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

DPC_Load_Status_TypeDef DPC_MISC_Check_DCLoad(DPC_Load_TypeDef *DPC_Load_loc,DPC_Load_Limit_TypeDef DC_Load_Limit_sub, CurrentAC_ADC_NORM_Struct* CURRENT_ADC_AC_IN_NORM_Sub)
{
 8001728:	b084      	sub	sp, #16
 800172a:	b580      	push	{r7, lr}
 800172c:	b088      	sub	sp, #32
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  float I_min;
  int16_t I_max_int;
  int16_t I_min_int;


  DATA_VDC =  Read_Volt_DC(); 
 800173a:	f7ff faf1 	bl	8000d20 <Read_Volt_DC>
 800173e:	6138      	str	r0, [r7, #16]
  //DATA_IDC = Read_Curr_DC();
  
  VDC=DATA_VDC->Vdc_pos+DATA_VDC->Vdc_neg;
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b29a      	uxth	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	b29b      	uxth	r3, r3
 800174c:	4413      	add	r3, r2
 800174e:	81fb      	strh	r3, [r7, #14]
  
  DPC_Load_Status_TypeDef Load_Status;
 


   if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phA){
 8001750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ed97 7a07 	vldr	s14, [r7, #28]
 800175a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	d502      	bpl.n	800176a <DPC_MISC_Check_DCLoad+0x42>
 	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 8001764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	61fb      	str	r3, [r7, #28]
   }
   if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 800176a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800176c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001770:	ed97 7a07 	vldr	s14, [r7, #28]
 8001774:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177c:	d502      	bpl.n	8001784 <DPC_MISC_Check_DCLoad+0x5c>
   	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 800177e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61fb      	str	r3, [r7, #28]
     }
   if (I_max < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 8001784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001786:	edd3 7a02 	vldr	s15, [r3, #8]
 800178a:	ed97 7a07 	vldr	s14, [r7, #28]
 800178e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001796:	d502      	bpl.n	800179e <DPC_MISC_Check_DCLoad+0x76>
   	  I_max = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 8001798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	61fb      	str	r3, [r7, #28]
   }

   if (I_min > CURRENT_ADC_AC_IN_NORM_Sub->phA){
 800179e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ed97 7a06 	vldr	s14, [r7, #24]
 80017a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	dd02      	ble.n	80017b8 <DPC_MISC_Check_DCLoad+0x90>
 	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phA;
 80017b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	61bb      	str	r3, [r7, #24]
   }
   if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phB){
 80017b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80017be:	ed97 7a06 	vldr	s14, [r7, #24]
 80017c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	d502      	bpl.n	80017d2 <DPC_MISC_Check_DCLoad+0xaa>
 	  I_min = CURRENT_ADC_AC_IN_NORM_Sub->phB;
 80017cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	61bb      	str	r3, [r7, #24]
   }
   if (I_min < CURRENT_ADC_AC_IN_NORM_Sub->phC){
 80017d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80017dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	d502      	bpl.n	80017ec <DPC_MISC_Check_DCLoad+0xc4>
 	I_min = CURRENT_ADC_AC_IN_NORM_Sub->phC;
 80017e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	61bb      	str	r3, [r7, #24]
   }

   I_min_int = (int16_t) (I_min*10);
 80017ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80017f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017fc:	ee17 3a90 	vmov	r3, s15
 8001800:	81bb      	strh	r3, [r7, #12]
   I_max_int = (int16_t) (I_max*10);
 8001802:	edd7 7a07 	vldr	s15, [r7, #28]
 8001806:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800180a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001812:	ee17 3a90 	vmov	r3, s15
 8001816:	82fb      	strh	r3, [r7, #22]

   if (-I_min_int > I_max_int){
 8001818:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800181c:	425a      	negs	r2, r3
 800181e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001822:	429a      	cmp	r2, r3
 8001824:	dd03      	ble.n	800182e <DPC_MISC_Check_DCLoad+0x106>
 	  I_max_int= -I_min_int;
 8001826:	89bb      	ldrh	r3, [r7, #12]
 8001828:	425b      	negs	r3, r3
 800182a:	b29b      	uxth	r3, r3
 800182c:	82fb      	strh	r3, [r7, #22]
   }

  
  if((DATA_VDC->Vdc_pos > DC_Load_Limit_sub.V_cap_Limit) || (DATA_VDC->Vdc_neg > DC_Load_Limit_sub.V_cap_Limit)){  
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001834:	4293      	cmp	r3, r2
 8001836:	d804      	bhi.n	8001842 <DPC_MISC_Check_DCLoad+0x11a>
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800183e:	4293      	cmp	r3, r2
 8001840:	d907      	bls.n	8001852 <DPC_MISC_Check_DCLoad+0x12a>
    DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 8001842:	f000 ff9d 	bl	8002780 <DPC_PWM_OutDisable>
//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
    Load_Status=OVERVOLTAGE_CAP;
 8001846:	2305      	movs	r3, #5
 8001848:	757b      	strb	r3, [r7, #21]
    DPC_FLT_Faulterror_Set(FAULT_OVC);    
 800184a:	2004      	movs	r0, #4
 800184c:	f7ff fa72 	bl	8000d34 <DPC_FLT_Faulterror_Set>
 8001850:	e049      	b.n	80018e6 <DPC_MISC_Check_DCLoad+0x1be>
  }
  else if (VDC>DC_Load_Limit_sub.V_dc_Limit){
 8001852:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001854:	89fa      	ldrh	r2, [r7, #14]
 8001856:	429a      	cmp	r2, r3
 8001858:	d907      	bls.n	800186a <DPC_MISC_Check_DCLoad+0x142>
    DPC_PWM_OutDisable();                                                                   ///Safe: Disable PWM outputs if enabled
 800185a:	f000 ff91 	bl	8002780 <DPC_PWM_OutDisable>
//    DPC_MISC_RELAY_Cntl(RELAY_GRID_ABC, RELAY_OFF);                                         ///Safe: Disconnect teh AC main
    Load_Status=OVERVOLTAGE_LOAD;
 800185e:	2303      	movs	r3, #3
 8001860:	757b      	strb	r3, [r7, #21]
    DPC_FLT_Faulterror_Set(FAULT_OVL);
 8001862:	2002      	movs	r0, #2
 8001864:	f7ff fa66 	bl	8000d34 <DPC_FLT_Faulterror_Set>
 8001868:	e03d      	b.n	80018e6 <DPC_MISC_Check_DCLoad+0x1be>
  }
  else {
    //if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_Over_load_Threshold)
    if(I_max_int>=DC_Load_Limit_sub.I_Over_load_Threshold)
 800186a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800186e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8001870:	4293      	cmp	r3, r2
 8001872:	db05      	blt.n	8001880 <DPC_MISC_Check_DCLoad+0x158>
    {
      Load_Status=OVERCURRENT_LOAD;
 8001874:	2304      	movs	r3, #4
 8001876:	757b      	strb	r3, [r7, #21]
      DPC_FLT_Faulterror_Set(FAULT_OCL);       
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff fa5b 	bl	8000d34 <DPC_FLT_Faulterror_Set>
 800187e:	e032      	b.n	80018e6 <DPC_MISC_Check_DCLoad+0x1be>
    }
    //else if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_Low_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==LOW_LOAD || DPC_Load_loc->DPC_Load_Status==NO_LOAD))
    else if(I_max_int>=DC_Load_Limit_sub.I_Low_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==LOW_LOAD || DPC_Load_loc->DPC_Load_Status==NO_LOAD))
 8001880:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001884:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001886:	4293      	cmp	r3, r2
 8001888:	db0a      	blt.n	80018a0 <DPC_MISC_Check_DCLoad+0x178>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d003      	beq.n	800189a <DPC_MISC_Check_DCLoad+0x172>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <DPC_MISC_Check_DCLoad+0x178>
    {
      Load_Status=ON_LOAD;
 800189a:	2302      	movs	r3, #2
 800189c:	757b      	strb	r3, [r7, #21]
 800189e:	e022      	b.n	80018e6 <DPC_MISC_Check_DCLoad+0x1be>
    }
    //else if(DATA_IDC->IDC_adc<=DC_Load_Limit_sub.I_Low_load_Min_Threshold && (DPC_Load_loc->DPC_Load_Status==ON_LOAD))
    else if(I_max_int<=DC_Load_Limit_sub.I_Low_load_Min_Threshold && (DPC_Load_loc->DPC_Load_Status==ON_LOAD))
 80018a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018a4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80018a6:	4293      	cmp	r3, r2
 80018a8:	dc06      	bgt.n	80018b8 <DPC_MISC_Check_DCLoad+0x190>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d102      	bne.n	80018b8 <DPC_MISC_Check_DCLoad+0x190>
    {
      Load_Status=LOW_LOAD;
 80018b2:	2301      	movs	r3, #1
 80018b4:	757b      	strb	r3, [r7, #21]
 80018b6:	e016      	b.n	80018e6 <DPC_MISC_Check_DCLoad+0x1be>
    }
    //else if(DATA_IDC->IDC_adc>=DC_Load_Limit_sub.I_No_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==NO_LOAD))
    else if(I_max_int>=DC_Load_Limit_sub.I_No_load_Max_Threshold && (DPC_Load_loc->DPC_Load_Status==NO_LOAD))
 80018b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018bc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80018be:	4293      	cmp	r3, r2
 80018c0:	db06      	blt.n	80018d0 <DPC_MISC_Check_DCLoad+0x1a8>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <DPC_MISC_Check_DCLoad+0x1a8>
    {
      Load_Status=LOW_LOAD;
 80018ca:	2301      	movs	r3, #1
 80018cc:	757b      	strb	r3, [r7, #21]
 80018ce:	e00a      	b.n	80018e6 <DPC_MISC_Check_DCLoad+0x1be>
    }
    //else if(DATA_IDC->IDC_adc<=DC_Load_Limit_sub.I_No_load_Min_Threshold)
    else if(I_max_int<=DC_Load_Limit_sub.I_No_load_Min_Threshold)
 80018d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018d4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80018d6:	4293      	cmp	r3, r2
 80018d8:	dc02      	bgt.n	80018e0 <DPC_MISC_Check_DCLoad+0x1b8>
    {
      Load_Status=NO_LOAD;
 80018da:	2300      	movs	r3, #0
 80018dc:	757b      	strb	r3, [r7, #21]
 80018de:	e002      	b.n	80018e6 <DPC_MISC_Check_DCLoad+0x1be>
    }
    else
    {
      Load_Status=DPC_Load_loc->DPC_Load_Status;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	757b      	strb	r3, [r7, #21]
    }
  }
  
  DPC_Load_loc->DPC_Load_Status=Load_Status;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7d7a      	ldrb	r2, [r7, #21]
 80018ea:	701a      	strb	r2, [r3, #0]
  return Load_Status;
 80018ec:	7d7b      	ldrb	r3, [r7, #21]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3720      	adds	r7, #32
 80018f2:	46bd      	mov	sp, r7
 80018f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018f8:	b004      	add	sp, #16
 80018fa:	4770      	bx	lr
 80018fc:	0000      	movs	r0, r0
	...

08001900 <DPC_MISC_DCLoad_Init>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

void DPC_MISC_DCLoad_Init(DPC_Load_Limit_TypeDef *DC_Load_Limit_sub,uint16_t V_dc_Limit_VOLT,uint16_t V_cap_Limit_VOLT,float I_dc_NO_LOAD_Limit_AMP,float I_dc_LOW_LOAD_Limit_AMP,float I_dc_OVER_LOAD_Limit_AMP,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b08d      	sub	sp, #52	; 0x34
 8001904:	af00      	add	r7, sp, #0
 8001906:	6178      	str	r0, [r7, #20]
 8001908:	ed87 0a03 	vstr	s0, [r7, #12]
 800190c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001910:	ed87 1a01 	vstr	s2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	460b      	mov	r3, r1
 8001918:	827b      	strh	r3, [r7, #18]
 800191a:	4613      	mov	r3, r2
 800191c:	823b      	strh	r3, [r7, #16]
  uint16_t I_dc_LOW_LOAD_Min_Limit_loc;                                                                 /// Local variable to pass Output current Min theshold (Expressed in AMPs) to determinate Light Load Condition  
  uint16_t I_dc_OVER_LOAD_Limit_loc;                                                                    /// Local variable to pass Output current theshold (Expressed in AMPs)to determinate Over Load Condition
  

  
  V_cap_Limit_loc=(uint16_t)(((float)V_cap_Limit_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);                                        /// (Vcap_limit_Threshold [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias 
 800191e:	8a3b      	ldrh	r3, [r7, #16]
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	edd3 7a06 	vldr	s15, [r3, #24]
 800192e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	edd3 7a08 	vldr	s15, [r3, #32]
 8001938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001940:	ee17 3a90 	vmov	r3, s15
 8001944:	85fb      	strh	r3, [r7, #46]	; 0x2e
  V_dc_Limit_loc=(uint16_t)(((float)V_dc_Limit_VOLT*DPC_ADC_Conf_loc->G_Vdc)+DPC_ADC_Conf_loc->B_Vdc);                                          /// (Vdc_limit_Threshold [Volt] * DC Voltage Sensing Gain) + DC Voltage Sensing Bias
 8001946:	8a7b      	ldrh	r3, [r7, #18]
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	edd3 7a06 	vldr	s15, [r3, #24]
 8001956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001968:	ee17 3a90 	vmov	r3, s15
 800196c:	85bb      	strh	r3, [r7, #44]	; 0x2c
//  I_dc_NO_LOAD_Limit_loc=(uint16_t)(((float)I_dc_NO_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                           /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
//  I_dc_NO_LOAD_Delta_Limit_loc=(uint16_t)((I_dc_NO_LOAD_Limit_loc - DPC_ADC_Conf_loc->B_Idc)*((float)DPC_NO_LOAD_DELTA_CURR*0.01));                     ///
//  I_dc_NO_LOAD_Max_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc + I_dc_NO_LOAD_Delta_Limit_loc);                                                 ///
//  I_dc_NO_LOAD_Min_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc - I_dc_NO_LOAD_Delta_Limit_loc);

  I_dc_NO_LOAD_Limit_loc=(uint16_t)(float)I_dc_NO_LOAD_Limit_AMP;                           /// (IDC_No_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
 800196e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001976:	ee17 3a90 	vmov	r3, s15
 800197a:	857b      	strh	r3, [r7, #42]	; 0x2a
  I_dc_NO_LOAD_Delta_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc)*((float)DPC_NO_LOAD_DELTA_CURR*0.01);                     ///
 800197c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fd9c 	bl	80004bc <__aeabi_i2d>
 8001984:	a336      	add	r3, pc, #216	; (adr r3, 8001a60 <DPC_MISC_DCLoad_Init+0x160>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fe01 	bl	8000590 <__aeabi_dmul>
 800198e:	4603      	mov	r3, r0
 8001990:	460c      	mov	r4, r1
 8001992:	4618      	mov	r0, r3
 8001994:	4621      	mov	r1, r4
 8001996:	f7ff f80d 	bl	80009b4 <__aeabi_d2uiz>
 800199a:	4603      	mov	r3, r0
 800199c:	853b      	strh	r3, [r7, #40]	; 0x28
  I_dc_NO_LOAD_Max_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc + I_dc_NO_LOAD_Delta_Limit_loc);                                                 /// 
 800199e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80019a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019a2:	4413      	add	r3, r2
 80019a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  I_dc_NO_LOAD_Min_Limit_loc=(uint16_t)(I_dc_NO_LOAD_Limit_loc - I_dc_NO_LOAD_Delta_Limit_loc);
 80019a6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80019a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	84bb      	strh	r3, [r7, #36]	; 0x24
//  I_dc_LOW_LOAD_Limit_loc=(uint16_t)(((float)I_dc_LOW_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                         /// (IDC_Light_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
//  I_dc_LOW_LOAD_Delta_Limit_loc=(uint16_t)((I_dc_LOW_LOAD_Limit_loc - DPC_ADC_Conf_loc->B_Idc)*((float)DPC_LOW_LOAD_DELTA_CURR*0.01));                   ///
//  I_dc_LOW_LOAD_Max_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc + I_dc_LOW_LOAD_Delta_Limit_loc);                                               ///
//  I_dc_LOW_LOAD_Min_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc - I_dc_LOW_LOAD_Delta_Limit_loc);

  I_dc_LOW_LOAD_Limit_loc=(uint16_t)((float)I_dc_LOW_LOAD_Limit_AMP);                         /// (IDC_Light_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias
 80019ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80019b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019b6:	ee17 3a90 	vmov	r3, s15
 80019ba:	847b      	strh	r3, [r7, #34]	; 0x22
  I_dc_LOW_LOAD_Delta_Limit_loc=(uint16_t)((I_dc_LOW_LOAD_Limit_loc)*(float)DPC_LOW_LOAD_DELTA_CURR*0.01);                   ///
 80019bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80019ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ce:	ee17 0a90 	vmov	r0, s15
 80019d2:	f7fe fd85 	bl	80004e0 <__aeabi_f2d>
 80019d6:	a324      	add	r3, pc, #144	; (adr r3, 8001a68 <DPC_MISC_DCLoad_Init+0x168>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe fdd8 	bl	8000590 <__aeabi_dmul>
 80019e0:	4603      	mov	r3, r0
 80019e2:	460c      	mov	r4, r1
 80019e4:	4618      	mov	r0, r3
 80019e6:	4621      	mov	r1, r4
 80019e8:	f7fe ffe4 	bl	80009b4 <__aeabi_d2uiz>
 80019ec:	4603      	mov	r3, r0
 80019ee:	843b      	strh	r3, [r7, #32]
  I_dc_LOW_LOAD_Max_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc + I_dc_LOW_LOAD_Delta_Limit_loc);                                               /// 
 80019f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80019f2:	8c3b      	ldrh	r3, [r7, #32]
 80019f4:	4413      	add	r3, r2
 80019f6:	83fb      	strh	r3, [r7, #30]
  I_dc_LOW_LOAD_Min_Limit_loc=(uint16_t)(I_dc_LOW_LOAD_Limit_loc - I_dc_LOW_LOAD_Delta_Limit_loc); ///
 80019f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80019fa:	8c3b      	ldrh	r3, [r7, #32]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	83bb      	strh	r3, [r7, #28]

  I_dc_OVER_LOAD_Limit_loc=(uint16_t)(((float)I_dc_OVER_LOAD_Limit_AMP*DPC_ADC_Conf_loc->G_Idc)+DPC_ADC_Conf_loc->B_Idc);                       /// (IDC_Over_LOAD_Threshold [Ampere] * DC Current Sensing Gain) + DC Current Sensing Bias   
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a1c:	ee17 3a90 	vmov	r3, s15
 8001a20:	837b      	strh	r3, [r7, #26]
  
  DC_Load_Limit_sub->V_cap_Limit=V_cap_Limit_loc;  
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001a26:	801a      	strh	r2, [r3, #0]
  DC_Load_Limit_sub->V_dc_Limit=V_dc_Limit_loc;  
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001a2c:	821a      	strh	r2, [r3, #16]
  DC_Load_Limit_sub->I_No_load_Threshold=I_dc_NO_LOAD_Limit_loc;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001a32:	805a      	strh	r2, [r3, #2]
  DC_Load_Limit_sub->I_No_load_Max_Threshold=I_dc_NO_LOAD_Max_Limit_loc;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a38:	809a      	strh	r2, [r3, #4]
  DC_Load_Limit_sub->I_No_load_Min_Threshold=I_dc_NO_LOAD_Min_Limit_loc;  
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a3e:	80da      	strh	r2, [r3, #6]
  DC_Load_Limit_sub->I_Low_load_Threshold=I_dc_LOW_LOAD_Limit_loc;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001a44:	811a      	strh	r2, [r3, #8]
  DC_Load_Limit_sub->I_Low_load_Max_Threshold=I_dc_LOW_LOAD_Max_Limit_loc;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	8bfa      	ldrh	r2, [r7, #30]
 8001a4a:	815a      	strh	r2, [r3, #10]
  DC_Load_Limit_sub->I_Low_load_Min_Threshold=I_dc_LOW_LOAD_Min_Limit_loc;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	8bba      	ldrh	r2, [r7, #28]
 8001a50:	819a      	strh	r2, [r3, #12]
  DC_Load_Limit_sub->I_Over_load_Threshold=I_dc_OVER_LOAD_Limit_loc;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	8b7a      	ldrh	r2, [r7, #26]
 8001a56:	81da      	strh	r2, [r3, #14]
  
  
}
 8001a58:	bf00      	nop
 8001a5a:	3734      	adds	r7, #52	; 0x34
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd90      	pop	{r4, r7, pc}
 8001a60:	9999999a 	.word	0x9999999a
 8001a64:	3fc99999 	.word	0x3fc99999
 8001a68:	47ae147b 	.word	0x47ae147b
 8001a6c:	3f847ae1 	.word	0x3f847ae1

08001a70 <DPC_MISC_ACSource_Init>:
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

void DPC_MISC_ACSource_Init(DPC_Source_Limit_TypeDef *AC_Source_Limit_sub,uint16_t V_ac_Limit_VOLT,uint16_t V_ac_UV_Limit_VOLT,uint16_t V_ac_UVLO_Limit_VOLT,uint16_t V_ac_Low_Limit_VOLT,uint16_t I_ac_Limit_AMP,DPC_ADC_Conf_TypeDef *DPC_ADC_Conf_loc)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b08b      	sub	sp, #44	; 0x2c
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	817b      	strh	r3, [r7, #10]
 8001a82:	460b      	mov	r3, r1
 8001a84:	813b      	strh	r3, [r7, #8]
 8001a86:	4613      	mov	r3, r2
 8001a88:	80fb      	strh	r3, [r7, #6]
  uint16_t V_ac_neg_Low_Limit_loc;                                                                                                      /*!< >*/
  
  uint16_t I_ac_pos_Limit_loc;                                                                                                          /*!< >*/
  uint16_t I_ac_neg_Limit_loc;                                                                                                          /*!< >*/
   
  V_ac_pos_Limit_loc=(uint16_t)(((float)V_ac_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                              /*!< >*/
 8001a8a:	897b      	ldrh	r3, [r7, #10]
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aac:	ee17 3a90 	vmov	r3, s15
 8001ab0:	84fb      	strh	r3, [r7, #38]	; 0x26
  V_ac_neg_Limit_loc=(uint16_t)(((float)-V_ac_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                             /*!< >*/
 8001ab2:	897b      	ldrh	r3, [r7, #10]
 8001ab4:	425b      	negs	r3, r3
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aca:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad6:	ee17 3a90 	vmov	r3, s15
 8001ada:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  V_ac_pos_UVLO_Limit_loc=(uint16_t)(((float)V_ac_UVLO_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                    /*!< >*/
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001afe:	ee17 3a90 	vmov	r3, s15
 8001b02:	847b      	strh	r3, [r7, #34]	; 0x22
  V_ac_neg_UVLO_Limit_loc=(uint16_t)(((float)-V_ac_UVLO_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                   /*!< >*/
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	425b      	negs	r3, r3
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b28:	ee17 3a90 	vmov	r3, s15
 8001b2c:	843b      	strh	r3, [r7, #32]
  
  V_ac_pos_UV_Limit_loc=(uint16_t)(((float)V_ac_UV_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                        /*!< >*/
 8001b2e:	893b      	ldrh	r3, [r7, #8]
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b44:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b50:	ee17 3a90 	vmov	r3, s15
 8001b54:	83fb      	strh	r3, [r7, #30]
  V_ac_neg_UV_Limit_loc=(uint16_t)(((float)-V_ac_UV_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                       /*!< >*/
 8001b56:	893b      	ldrh	r3, [r7, #8]
 8001b58:	425b      	negs	r3, r3
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b7a:	ee17 3a90 	vmov	r3, s15
 8001b7e:	83bb      	strh	r3, [r7, #28]
  
  V_ac_pos_Low_Limit_loc=(uint16_t)(((float)V_ac_Low_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                      /*!< >*/
 8001b80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b96:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba2:	ee17 3a90 	vmov	r3, s15
 8001ba6:	837b      	strh	r3, [r7, #26]
  V_ac_neg_Low_Limit_loc=(uint16_t)(((float)-V_ac_Low_Limit_VOLT*DPC_ADC_Conf_loc->G_Vac)+DPC_ADC_Conf_loc->B_Vac);                     /*!< >*/
 8001ba8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001baa:	425b      	negs	r3, r3
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bcc:	ee17 3a90 	vmov	r3, s15
 8001bd0:	833b      	strh	r3, [r7, #24]
  
  I_ac_pos_Limit_loc=(uint16_t)(((float)I_ac_Limit_AMP*DPC_ADC_Conf_loc->G_Iac)+DPC_ADC_Conf_loc->B_Iac);                               /*!< >*/
 8001bd2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bde:	edd3 7a03 	vldr	s15, [r3, #12]
 8001be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf4:	ee17 3a90 	vmov	r3, s15
 8001bf8:	82fb      	strh	r3, [r7, #22]
  I_ac_neg_Limit_loc=(uint16_t)(((float)-I_ac_Limit_AMP*DPC_ADC_Conf_loc->G_Iac)+DPC_ADC_Conf_loc->B_Iac);                              /*!< >*/
 8001bfa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c12:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c1e:	ee17 3a90 	vmov	r3, s15
 8001c22:	82bb      	strh	r3, [r7, #20]
  
  
  AC_Source_Limit_sub->V_ac_pos_Limit=V_ac_pos_Limit_loc;                                                                               /*!< >*/
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001c28:	801a      	strh	r2, [r3, #0]
  AC_Source_Limit_sub->V_ac_neg_Limit=V_ac_neg_Limit_loc;                                                                               /*!< >*/
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c2e:	805a      	strh	r2, [r3, #2]
  
  AC_Source_Limit_sub->V_ac_pos_UVLO_Limit=V_ac_pos_UVLO_Limit_loc;                                                                     /*!< >*/
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001c34:	809a      	strh	r2, [r3, #4]
  AC_Source_Limit_sub->V_ac_neg_UVLO_Limit=V_ac_neg_UVLO_Limit_loc;                                                                     /*!< >*/  
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8c3a      	ldrh	r2, [r7, #32]
 8001c3a:	80da      	strh	r2, [r3, #6]
    
  AC_Source_Limit_sub->V_ac_pos_UV_Limit=V_ac_pos_UV_Limit_loc;                                                                         /*!< >*/
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8bfa      	ldrh	r2, [r7, #30]
 8001c40:	811a      	strh	r2, [r3, #8]
  AC_Source_Limit_sub->V_ac_neg_UV_Limit=V_ac_neg_UV_Limit_loc;                                                                         /*!< >*/
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8bba      	ldrh	r2, [r7, #28]
 8001c46:	815a      	strh	r2, [r3, #10]
    
  AC_Source_Limit_sub->V_ac_pos_Low_Limit=V_ac_pos_Low_Limit_loc;                                                                       /*!< >*/
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8b7a      	ldrh	r2, [r7, #26]
 8001c4c:	819a      	strh	r2, [r3, #12]
  AC_Source_Limit_sub->V_ac_neg_Low_Limit=V_ac_neg_Low_Limit_loc;                                                                       /*!< >*/
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8b3a      	ldrh	r2, [r7, #24]
 8001c52:	81da      	strh	r2, [r3, #14]
  
  AC_Source_Limit_sub->I_ac_pos_Limit=I_ac_pos_Limit_loc;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8afa      	ldrh	r2, [r7, #22]
 8001c58:	821a      	strh	r2, [r3, #16]
  AC_Source_Limit_sub->I_ac_neg_Limit=I_ac_neg_Limit_loc;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8aba      	ldrh	r2, [r7, #20]
 8001c5e:	825a      	strh	r2, [r3, #18]
  
  
}
 8001c60:	bf00      	nop
 8001c62:	372c      	adds	r7, #44	; 0x2c
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <DPC_MISC_APPL_Timer_Init>:
* @retval None
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/
void DPC_MISC_APPL_Timer_Init(TIM_HandleTypeDef AppTIM, uint32_t  APPL_Freq_Desidered)
{
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	f107 0c18 	add.w	ip, r7, #24
 8001c78:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

  uint32_t Timers_Clock;                                                                ///
  uint32_t Timers_PSC;                                                                  ///
  uint32_t Timers_ClockPSCed;                                                           ///

  Timers_PSC=(uint32_t)(READ_REG(AppTIM.Instance->PSC));                                ///
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	60fb      	str	r3, [r7, #12]
  Timers_Clock=HAL_RCC_GetPCLK2Freq();                                                  ///  
 8001c82:	f009 fbcf 	bl	800b424 <HAL_RCC_GetPCLK2Freq>
 8001c86:	60b8      	str	r0, [r7, #8]
  
  Timers_ClockPSCed=(Timers_Clock/(Timers_PSC+1));                                      ///
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	607b      	str	r3, [r7, #4]
  
  AppTIM.Init.Period = ((Timers_ClockPSCed/APPL_Freq_Desidered) - 1);                   ///
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_TIM_Base_Init(&AppTIM) != HAL_OK){Error_Handler();}                           ///Init Task Timer  
 8001ca0:	f107 0018 	add.w	r0, r7, #24
 8001ca4:	f009 fe9b 	bl	800b9de <HAL_TIM_Base_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <DPC_MISC_APPL_Timer_Init+0x46>
 8001cae:	f003 f93b 	bl	8004f28 <Error_Handler>
 
} 
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cbc:	b004      	add	sp, #16
 8001cbe:	4770      	bx	lr

08001cc0 <DPC_MISC_Appl_Timer_Start>:




void DPC_MISC_Appl_Timer_Start(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&APPL_Tim1);  //Inizializza il Timer con IT che gestisce l'aggiornamento del duty
 8001cc4:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <DPC_MISC_Appl_Timer_Start+0x24>)
 8001cc6:	f009 fee1 	bl	800ba8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&APPL_Tim3);  //Inizializza il Timer con IT che gestisce l'aggiornamento del duty
 8001cca:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <DPC_MISC_Appl_Timer_Start+0x28>)
 8001ccc:	f009 fede 	bl	800ba8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&APPL_Tim2);  //Inizializza il Timer con IT che gestisce l'aggiornamento ddel display 
 8001cd0:	4806      	ldr	r0, [pc, #24]	; (8001cec <DPC_MISC_Appl_Timer_Start+0x2c>)
 8001cd2:	f009 fedb 	bl	800ba8c <HAL_TIM_Base_Start_IT>
    
  HAL_TIM_PWM_Start(&APPL_Tim4, TIM_CHANNEL_1);   
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <DPC_MISC_Appl_Timer_Start+0x30>)
 8001cda:	f009 ff4f 	bl	800bb7c <HAL_TIM_PWM_Start>
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20015f88 	.word	0x20015f88
 8001ce8:	20015f3c 	.word	0x20015f3c
 8001cec:	20015ef0 	.word	0x20015ef0
 8001cf0:	20015ea4 	.word	0x20015ea4

08001cf4 <DPC_MISC_CHECK_AC_SOURCE>:
* @retval void
*
* @note Function valid for STM32G4xx and STM32F74x microconroller family   
*/

DPC_Source_Status_TypeDef DPC_MISC_CHECK_AC_SOURCE(DPC_Source_TypeDef  *AC_Source_sub,DPC_Source_Limit_TypeDef AC_Source_Limit_sub,float Theta){
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b08c      	sub	sp, #48	; 0x30
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001d06:	ed87 0a00 	vstr	s0, [r7]
  
  DPC_Source_Status_TypeDef Status_Source = AC_Source_sub->Status_Source; 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7a1b      	ldrb	r3, [r3, #8]
 8001d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  float Theta_start = 0.08;                                                                             /*!< Approximation of 2Pi to define the SIN near to zero crossing>*/
 8001d12:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <DPC_MISC_CHECK_AC_SOURCE+0x20c>)
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
  float Theta_stop = 6.20;                                                                              /*!< Approximation of 2Pi to define the SIN near to zero crossing>*/
 8001d16:	4b7b      	ldr	r3, [pc, #492]	; (8001f04 <DPC_MISC_CHECK_AC_SOURCE+0x210>)
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint16_t I_ac_pos_Limit_local;                                                                        /*!< >*/
  uint16_t I_ac_neg_Limit_local;                                                                        /*!< >*/
  
  
  V_ac_pos_Limit_local=AC_Source_Limit_sub.V_ac_pos_Limit;                                              /*!< >*/
 8001d1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001d1c:	847b      	strh	r3, [r7, #34]	; 0x22
  V_ac_neg_Limit_local=AC_Source_Limit_sub.V_ac_neg_Limit;                                              /*!< >*/
 8001d1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001d20:	843b      	strh	r3, [r7, #32]
  
  V_ac_pos_UVLO_Limit_local=AC_Source_Limit_sub.V_ac_pos_UVLO_Limit;                                    /*!< >*/
 8001d22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d26:	83fb      	strh	r3, [r7, #30]
  V_ac_neg_UVLO_Limit_local=AC_Source_Limit_sub.V_ac_neg_UVLO_Limit;                                    /*!< >*/
 8001d28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d2c:	83bb      	strh	r3, [r7, #28]
  
  V_ac_pos_UV_Limit_local=AC_Source_Limit_sub.V_ac_pos_UV_Limit;                                        /*!< >*/
 8001d2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001d32:	837b      	strh	r3, [r7, #26]
  V_ac_neg_UV_Limit_local=AC_Source_Limit_sub.V_ac_neg_UV_Limit;                                        /*!< >*/
 8001d34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001d38:	833b      	strh	r3, [r7, #24]
  
  V_ac_pos_Low_Limit_local=AC_Source_Limit_sub.V_ac_pos_Low_Limit;                                      /*!< >*/
 8001d3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d3e:	82fb      	strh	r3, [r7, #22]
  V_ac_neg_Low_Limit_local=AC_Source_Limit_sub.V_ac_neg_Low_Limit;                                      /*!< >*/
 8001d40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d44:	82bb      	strh	r3, [r7, #20]
  
  I_ac_pos_Limit_local=AC_Source_Limit_sub.I_ac_pos_Limit;                                              /*!< >*/
 8001d46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001d4a:	827b      	strh	r3, [r7, #18]
  I_ac_neg_Limit_local=AC_Source_Limit_sub.I_ac_neg_Limit;                                              /*!< >*/
 8001d4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d50:	823b      	strh	r3, [r7, #16]
  
  
  
  DATA_VAC = Read_GRID();                                                                               /*!< >*/
 8001d52:	f7fe ffd1 	bl	8000cf8 <Read_GRID>
 8001d56:	60f8      	str	r0, [r7, #12]
  DATA_IAC = Read_Curr_GRID();                                                                          /*!< >*/
 8001d58:	f7fe ffd8 	bl	8000d0c <Read_Curr_GRID>
 8001d5c:	60b8      	str	r0, [r7, #8]
//    Status_Source=OVERVOLTAGE_SOURCE;
//    DPC_FLT_Faulterror_Set(FAULT_OVS);  
//  }
//  else{  
    
    if(Theta<=Theta_start){    
 8001d5e:	ed97 7a00 	vldr	s14, [r7]
 8001d62:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	d812      	bhi.n	8001d96 <DPC_MISC_CHECK_AC_SOURCE+0xa2>
      /// Reset pk max & pk min of AC Voltage    
      AC_Source_sub->V_ac_pk_pos_local=0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	801a      	strh	r2, [r3, #0]
      AC_Source_sub->V_ac_pk_neg_local=1<<12;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d7c:	805a      	strh	r2, [r3, #2]
      /// Reset pk max & pk min of AC Current  
      AC_Source_sub->I_ac_pk_pos_local=0;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	809a      	strh	r2, [r3, #4]
      AC_Source_sub->I_ac_pk_neg_local=1<<12;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d8a:	80da      	strh	r2, [r3, #6]
      Status_Source=AC_Source_sub->Status_Source;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7a1b      	ldrb	r3, [r3, #8]
 8001d90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d94:	e0a6      	b.n	8001ee4 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
    }
    else if(Theta>Theta_start && Theta<Theta_stop){
 8001d96:	ed97 7a00 	vldr	s14, [r7]
 8001d9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	dd39      	ble.n	8001e1c <DPC_MISC_CHECK_AC_SOURCE+0x128>
 8001da8:	ed97 7a00 	vldr	s14, [r7]
 8001dac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db8:	d530      	bpl.n	8001e1c <DPC_MISC_CHECK_AC_SOURCE+0x128>
      /// Determinate pk max & pk min of AC Voltage
      if(AC_Source_sub->V_ac_pk_pos_local<DATA_VAC->phA){
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d204      	bcs.n	8001dd2 <DPC_MISC_CHECK_AC_SOURCE+0xde>
        AC_Source_sub->V_ac_pk_pos_local=DATA_VAC->phA;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	801a      	strh	r2, [r3, #0]
      }
      if(AC_Source_sub->V_ac_pk_neg_local>DATA_VAC->phA){
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	885b      	ldrh	r3, [r3, #2]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d904      	bls.n	8001dea <DPC_MISC_CHECK_AC_SOURCE+0xf6>
        AC_Source_sub->V_ac_pk_neg_local=DATA_VAC->phA;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	805a      	strh	r2, [r3, #2]
      }
      /// Determinate pk max & pk min of AC Current
      
      if(AC_Source_sub->I_ac_pk_pos_local<DATA_IAC->phA){
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	889b      	ldrh	r3, [r3, #4]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d204      	bcs.n	8001e02 <DPC_MISC_CHECK_AC_SOURCE+0x10e>
        AC_Source_sub->I_ac_pk_pos_local=DATA_IAC->phA;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	809a      	strh	r2, [r3, #4]
      }
      if(AC_Source_sub->I_ac_pk_neg_local>DATA_IAC->phA){
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	88db      	ldrh	r3, [r3, #6]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d969      	bls.n	8001ee4 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        AC_Source_sub->I_ac_pk_neg_local=DATA_IAC->phA;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	80da      	strh	r2, [r3, #6]
      if(AC_Source_sub->I_ac_pk_neg_local>DATA_IAC->phA){
 8001e1a:	e063      	b.n	8001ee4 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
      }
      
    }
    else if(Theta>=Theta_stop){
 8001e1c:	ed97 7a00 	vldr	s14, [r7]
 8001e20:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	db5a      	blt.n	8001ee4 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
      
      if((AC_Source_sub->V_ac_pk_pos_local == 0) || (AC_Source_sub->V_ac_pk_neg_local == 1<<12)){ 
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d004      	beq.n	8001e40 <DPC_MISC_CHECK_AC_SOURCE+0x14c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	885b      	ldrh	r3, [r3, #2]
 8001e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3e:	d107      	bne.n	8001e50 <DPC_MISC_CHECK_AC_SOURCE+0x15c>
    	  if (Status_Source!=OVERCURRENT_SOURCE){
 8001e40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e44:	2b06      	cmp	r3, #6
 8001e46:	d04d      	beq.n	8001ee4 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
    		  Status_Source=WAIT_SOURCE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    	  if (Status_Source!=OVERCURRENT_SOURCE){
 8001e4e:	e049      	b.n	8001ee4 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
    	  }
      }
      else if (Status_Source!=OVERCURRENT_SOURCE){
 8001e50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e54:	2b06      	cmp	r3, #6
 8001e56:	d045      	beq.n	8001ee4 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
      //else{
        if((AC_Source_sub->V_ac_pk_pos_local > V_ac_pos_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local < V_ac_neg_Limit_local)){
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d20b      	bcs.n	8001e7a <DPC_MISC_CHECK_AC_SOURCE+0x186>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	885b      	ldrh	r3, [r3, #2]
 8001e66:	8c3a      	ldrh	r2, [r7, #32]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d906      	bls.n	8001e7a <DPC_MISC_CHECK_AC_SOURCE+0x186>
          Status_Source=OVERVOLTAGE_SOURCE;
 8001e6c:	2305      	movs	r3, #5
 8001e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(FAULT_OVS);
 8001e72:	2010      	movs	r0, #16
 8001e74:	f7fe ff5e 	bl	8000d34 <DPC_FLT_Faulterror_Set>
 8001e78:	e034      	b.n	8001ee4 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        } 
        else if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_Low_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_Low_Limit_local)){
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	8afa      	ldrh	r2, [r7, #22]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d90c      	bls.n	8001e9e <DPC_MISC_CHECK_AC_SOURCE+0x1aa>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	885b      	ldrh	r3, [r3, #2]
 8001e88:	8aba      	ldrh	r2, [r7, #20]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d207      	bcs.n	8001e9e <DPC_MISC_CHECK_AC_SOURCE+0x1aa>
          Status_Source=NO_SOURCE;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(ERROR_AC_OFF);
 8001e94:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001e98:	f7fe ff4c 	bl	8000d34 <DPC_FLT_Faulterror_Set>
 8001e9c:	e022      	b.n	8001ee4 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        }
        else if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_UV_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_UV_Limit_local)){
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	8b7a      	ldrh	r2, [r7, #26]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d90c      	bls.n	8001ec2 <DPC_MISC_CHECK_AC_SOURCE+0x1ce>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	885b      	ldrh	r3, [r3, #2]
 8001eac:	8b3a      	ldrh	r2, [r7, #24]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d207      	bcs.n	8001ec2 <DPC_MISC_CHECK_AC_SOURCE+0x1ce>
          Status_Source=UV_SOURCE;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          DPC_FLT_Faulterror_Set(ERROR_AC_UV); 
 8001eb8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001ebc:	f7fe ff3a 	bl	8000d34 <DPC_FLT_Faulterror_Set>
 8001ec0:	e010      	b.n	8001ee4 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
        }      
        else {
          Status_Source=OK_SOURCE;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if((AC_Source_sub->V_ac_pk_pos_local < V_ac_pos_UVLO_Limit_local) && (AC_Source_sub->V_ac_pk_neg_local > V_ac_neg_UVLO_Limit_local)){
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	8bfa      	ldrh	r2, [r7, #30]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d908      	bls.n	8001ee4 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	885b      	ldrh	r3, [r3, #2]
 8001ed6:	8bba      	ldrh	r2, [r7, #28]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d203      	bcs.n	8001ee4 <DPC_MISC_CHECK_AC_SOURCE+0x1f0>
            DPC_FLT_Faulterror_Set(ERROR_AC_UVLO);
 8001edc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001ee0:	f7fe ff28 	bl	8000d34 <DPC_FLT_Faulterror_Set>
  //    }
  //    Status_Source=OK_SOURCE;   
  //  }    
  //  }
  
  AC_Source_sub->Status_Source=Status_Source;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001eea:	721a      	strb	r2, [r3, #8]
  return Status_Source;
 8001eec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3730      	adds	r7, #48	; 0x30
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001efa:	b004      	add	sp, #16
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	3da3d70a 	.word	0x3da3d70a
 8001f04:	40c66666 	.word	0x40c66666

08001f08 <DPC_PLL_Init>:
 8001f08:	b480      	push	{r7}
 8001f0a:	b08b      	sub	sp, #44	; 0x2c
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6278      	str	r0, [r7, #36]	; 0x24
 8001f10:	ed87 0a08 	vstr	s0, [r7, #32]
 8001f14:	edc7 0a07 	vstr	s1, [r7, #28]
 8001f18:	ed87 1a06 	vstr	s2, [r7, #24]
 8001f1c:	edc7 1a05 	vstr	s3, [r7, #20]
 8001f20:	ed87 2a04 	vstr	s4, [r7, #16]
 8001f24:	460b      	mov	r3, r1
 8001f26:	edc7 2a02 	vstr	s5, [r7, #8]
 8001f2a:	ed87 3a01 	vstr	s6, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	4613      	mov	r3, r2
 8001f32:	73bb      	strb	r3, [r7, #14]
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	6a3a      	ldr	r2, [r7, #32]
 8001f40:	61da      	str	r2, [r3, #28]
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	621a      	str	r2, [r3, #32]
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	6a3a      	ldr	r2, [r7, #32]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
 8001f4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f52:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	7bba      	ldrb	r2, [r7, #14]
 8001f80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	659a      	str	r2, [r3, #88]	; 0x58
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d104      	bne.n	8001fa4 <DPC_PLL_Init+0x9c>
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001fa2:	e008      	b.n	8001fb6 <DPC_PLL_Init+0xae>
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <DPC_PLL_Init+0xae>
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	2205      	movs	r2, #5
 8001fb2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001fb6:	bf00      	nop
 8001fb8:	372c      	adds	r7, #44	; 0x2c
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <DPC_PLL_pllqd_Run>:
 8001fc4:	b5b0      	push	{r4, r5, r7, lr}
 8001fc6:	b092      	sub	sp, #72	; 0x48
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80f0 	beq.w	80021be <DPC_PLL_pllqd_Run+0x1fa>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	623b      	str	r3, [r7, #32]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a3a      	ldr	r2, [r7, #32]
 8002032:	611a      	str	r2, [r3, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	615a      	str	r2, [r3, #20]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	619a      	str	r2, [r3, #24]
 8002040:	4a69      	ldr	r2, [pc, #420]	; (80021e8 <DPC_PLL_pllqd_Run+0x224>)
 8002042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002044:	6353      	str	r3, [r2, #52]	; 0x34
 8002046:	4a68      	ldr	r2, [pc, #416]	; (80021e8 <DPC_PLL_pllqd_Run+0x224>)
 8002048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204a:	6393      	str	r3, [r2, #56]	; 0x38
 800204c:	4a66      	ldr	r2, [pc, #408]	; (80021e8 <DPC_PLL_pllqd_Run+0x224>)
 800204e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002052:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 8002056:	4a64      	ldr	r2, [pc, #400]	; (80021e8 <DPC_PLL_pllqd_Run+0x224>)
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	6213      	str	r3, [r2, #32]
 800205c:	4a62      	ldr	r2, [pc, #392]	; (80021e8 <DPC_PLL_pllqd_Run+0x224>)
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002060:	6253      	str	r3, [r2, #36]	; 0x24
 8002062:	edd7 7a07 	vldr	s15, [r7, #28]
 8002066:	eef1 7a67 	vneg.f32	s15, s15
 800206a:	485f      	ldr	r0, [pc, #380]	; (80021e8 <DPC_PLL_pllqd_Run+0x224>)
 800206c:	eef0 0a67 	vmov.f32	s1, s15
 8002070:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80021ec <DPC_PLL_pllqd_Run+0x228>
 8002074:	f000 fca4 	bl	80029c0 <PI>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4a5b      	ldr	r2, [pc, #364]	; (80021e8 <DPC_PLL_pllqd_Run+0x224>)
 800207c:	3338      	adds	r3, #56	; 0x38
 800207e:	4611      	mov	r1, r2
 8002080:	2248      	movs	r2, #72	; 0x48
 8002082:	4618      	mov	r0, r3
 8002084:	f00a fb8e 	bl	800c7a4 <memcpy>
 8002088:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <DPC_PLL_pllqd_Run+0x224>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80020a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020aa:	edc7 7a04 	vstr	s15, [r7, #16]
 80020ae:	4a50      	ldr	r2, [pc, #320]	; (80021f0 <DPC_PLL_pllqd_Run+0x22c>)
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	ed97 0a04 	vldr	s0, [r7, #16]
 80020b8:	484d      	ldr	r0, [pc, #308]	; (80021f0 <DPC_PLL_pllqd_Run+0x22c>)
 80020ba:	f7ff fb0d 	bl	80016d8 <Integral>
 80020be:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <DPC_PLL_pllqd_Run+0x22c>)
 80020c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80020c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d0:	dd04      	ble.n	80020dc <DPC_PLL_pllqd_Run+0x118>
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <DPC_PLL_pllqd_Run+0x22c>)
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	e010      	b.n	80020fe <DPC_PLL_pllqd_Run+0x13a>
 80020dc:	4b44      	ldr	r3, [pc, #272]	; (80021f0 <DPC_PLL_pllqd_Run+0x22c>)
 80020de:	edd3 7a03 	vldr	s15, [r3, #12]
 80020e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ea:	d504      	bpl.n	80020f6 <DPC_PLL_pllqd_Run+0x132>
 80020ec:	4b40      	ldr	r3, [pc, #256]	; (80021f0 <DPC_PLL_pllqd_Run+0x22c>)
 80020ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	e003      	b.n	80020fe <DPC_PLL_pllqd_Run+0x13a>
 80020f6:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <DPC_PLL_pllqd_Run+0x22c>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	4a3d      	ldr	r2, [pc, #244]	; (80021f0 <DPC_PLL_pllqd_Run+0x22c>)
 80020fc:	60d3      	str	r3, [r2, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4a3b      	ldr	r2, [pc, #236]	; (80021f0 <DPC_PLL_pllqd_Run+0x22c>)
 8002102:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8002106:	4615      	mov	r5, r2
 8002108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800210a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800210c:	682b      	ldr	r3, [r5, #0]
 800210e:	6023      	str	r3, [r4, #0]
 8002110:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <DPC_PLL_pllqd_Run+0x22c>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	edd3 7a01 	vldr	s15, [r3, #4]
 800212e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80021f4 <DPC_PLL_pllqd_Run+0x230>
 8002132:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	edc3 7a02 	vstr	s15, [r3, #8]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	635a      	str	r2, [r3, #52]	; 0x34
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002156:	ee37 7a67 	vsub.f32	s14, s14, s15
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002168:	d51d      	bpl.n	80021a6 <DPC_PLL_pllqd_Run+0x1e2>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002188:	eef1 7a67 	vneg.f32	s15, s15
 800218c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002194:	dd07      	ble.n	80021a6 <DPC_PLL_pllqd_Run+0x1e2>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80021a4:	e01a      	b.n	80021dc <DPC_PLL_pllqd_Run+0x218>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80021ae:	2302      	movs	r3, #2
 80021b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80021b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80021b8:	f7fe fdbc 	bl	8000d34 <DPC_FLT_Faulterror_Set>
 80021bc:	e00e      	b.n	80021dc <DPC_PLL_pllqd_Run+0x218>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	2305      	movs	r3, #5
 80021d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80021dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021e0:	4618      	mov	r0, r3
 80021e2:	3748      	adds	r7, #72	; 0x48
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bdb0      	pop	{r4, r5, r7, pc}
 80021e8:	200000e8 	.word	0x200000e8
 80021ec:	00000000 	.word	0x00000000
 80021f0:	200000d0 	.word	0x200000d0
 80021f4:	40c90fdb 	.word	0x40c90fdb

080021f8 <DPC_PWM_Send_Burst_PWM>:
  *
  * @retval Null 
  *
  * @note Function valid for STM32G4xx microconroller family   
  */
void DPC_PWM_Send_Burst_PWM(DPC_PWM_TypeDef *tDPC_PWM_loc,float BURST_A,float BURST_B,float BURST_C,DMA_PWMDUTY_STRUCT* DMA_SRC ){
 80021f8:	b480      	push	{r7}
 80021fa:	b08b      	sub	sp, #44	; 0x2c
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6178      	str	r0, [r7, #20]
 8002200:	ed87 0a04 	vstr	s0, [r7, #16]
 8002204:	edc7 0a03 	vstr	s1, [r7, #12]
 8002208:	ed87 1a02 	vstr	s2, [r7, #8]
 800220c:	6079      	str	r1, [r7, #4]
  uint32_t dutyVCpos;
  uint32_t dutyVCneg;

  uint16_t PWM_PERIOD_COUNTER_INT;

  PWM_PERIOD_COUNTER_INT=__HAL_HRTIM_GETPERIOD(&PWM_Tim1, HRTIM_TIMERINDEX_TIMER_A);
 800220e:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <DPC_PWM_Send_Burst_PWM+0xb8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002216:	84fb      	strh	r3, [r7, #38]	; 0x26
  dutyVApos = BURST_A*PWM_PERIOD_COUNTER_INT;
 8002218:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002222:	edd7 7a04 	vldr	s15, [r7, #16]
 8002226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800222e:	ee17 3a90 	vmov	r3, s15
 8002232:	623b      	str	r3, [r7, #32]
  dutyVBpos = BURST_B*PWM_PERIOD_COUNTER_INT;
 8002234:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800223e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800224a:	ee17 3a90 	vmov	r3, s15
 800224e:	61fb      	str	r3, [r7, #28]
  dutyVCpos = BURST_C*PWM_PERIOD_COUNTER_INT;
 8002250:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800225a:	edd7 7a02 	vldr	s15, [r7, #8]
 800225e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002266:	ee17 3a90 	vmov	r3, s15
 800226a:	61bb      	str	r3, [r7, #24]


	DMA_SRC->phAA=dutyVApos;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a3a      	ldr	r2, [r7, #32]
 8002270:	601a      	str	r2, [r3, #0]
	DMA_SRC->phAB=dutyVApos;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a3a      	ldr	r2, [r7, #32]
 8002276:	605a      	str	r2, [r3, #4]
	DMA_SRC->phBA=dutyVBpos;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	609a      	str	r2, [r3, #8]
	DMA_SRC->phBB=dutyVBpos;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69fa      	ldr	r2, [r7, #28]
 8002282:	60da      	str	r2, [r3, #12]
	DMA_SRC->phCA=dutyVCpos;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	611a      	str	r2, [r3, #16]
	DMA_SRC->phCB=dutyVCpos;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	615a      	str	r2, [r3, #20]
	DMA_SRC->phA=dutyVApos;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a3a      	ldr	r2, [r7, #32]
 8002294:	619a      	str	r2, [r3, #24]
	DMA_SRC->phB=dutyVBpos;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	61da      	str	r2, [r3, #28]
	DMA_SRC->phC=dutyVCpos;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	621a      	str	r2, [r3, #32]
//  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0x2,HRTIM_COMPAREUNIT_1,ValueH);
//  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0x3,HRTIM_COMPAREUNIT_1,ValueL);
//  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0x4,HRTIM_COMPAREUNIT_1,ValueH);
//  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0x5,HRTIM_COMPAREUNIT_1,ValueL);
  
}
 80022a2:	bf00      	nop
 80022a4:	372c      	adds	r7, #44	; 0x2c
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000358 	.word	0x20000358

080022b4 <DPC_PWM_Send_Duty_SPWM>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_Send_Duty_SPWM(DPC_PWM_TypeDef *tDPC_PWM_loc,float VA,float VB,float VC, DMA_PWMDUTY_STRUCT* DMA_SRC)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b095      	sub	sp, #84	; 0x54
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6178      	str	r0, [r7, #20]
 80022bc:	ed87 0a04 	vstr	s0, [r7, #16]
 80022c0:	edc7 0a03 	vstr	s1, [r7, #12]
 80022c4:	ed87 1a02 	vstr	s2, [r7, #8]
 80022c8:	6079      	str	r1, [r7, #4]
  
  if(VA>1){VA=1;}
 80022ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	dd03      	ble.n	80022e4 <DPC_PWM_Send_Duty_SPWM+0x30>
 80022dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	e00a      	b.n	80022fa <DPC_PWM_Send_Duty_SPWM+0x46>
  else if(VA<-1){VA=-1;}
 80022e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80022e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80022ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f4:	d501      	bpl.n	80022fa <DPC_PWM_Send_Duty_SPWM+0x46>
 80022f6:	4bbd      	ldr	r3, [pc, #756]	; (80025ec <DPC_PWM_Send_Duty_SPWM+0x338>)
 80022f8:	613b      	str	r3, [r7, #16]
  if(VB>=1){VB=1;}
 80022fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80022fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230a:	db03      	blt.n	8002314 <DPC_PWM_Send_Duty_SPWM+0x60>
 800230c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e00a      	b.n	800232a <DPC_PWM_Send_Duty_SPWM+0x76>
  else if(VB<-1){VB=-1;}
 8002314:	edd7 7a03 	vldr	s15, [r7, #12]
 8002318:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800231c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002324:	d501      	bpl.n	800232a <DPC_PWM_Send_Duty_SPWM+0x76>
 8002326:	4bb1      	ldr	r3, [pc, #708]	; (80025ec <DPC_PWM_Send_Duty_SPWM+0x338>)
 8002328:	60fb      	str	r3, [r7, #12]
  if(VC>=1){VC=1;}
 800232a:	edd7 7a02 	vldr	s15, [r7, #8]
 800232e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	db03      	blt.n	8002344 <DPC_PWM_Send_Duty_SPWM+0x90>
 800233c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	e00a      	b.n	800235a <DPC_PWM_Send_Duty_SPWM+0xa6>
  else if(VC<-1){VC=-1;}  
 8002344:	edd7 7a02 	vldr	s15, [r7, #8]
 8002348:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800234c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	d501      	bpl.n	800235a <DPC_PWM_Send_Duty_SPWM+0xa6>
 8002356:	4ba5      	ldr	r3, [pc, #660]	; (80025ec <DPC_PWM_Send_Duty_SPWM+0x338>)
 8002358:	60bb      	str	r3, [r7, #8]

  uint16_t PWM_PERIOD_COUNTER_INT;
  PWM_PERIOD_COUNTER_INT=__HAL_HRTIM_GETPERIOD(&PWM_Tim1, HRTIM_TIMERINDEX_TIMER_A);
 800235a:	4ba5      	ldr	r3, [pc, #660]	; (80025f0 <DPC_PWM_Send_Duty_SPWM+0x33c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002362:	83fb      	strh	r3, [r7, #30]
  uint32_t dutyVBpos;
  uint32_t dutyVBneg;
  uint32_t dutyVCpos;
  uint32_t dutyVCneg;  
  
  if(VA>=0.0f){VApos=VA;VAneg=0;}else if(VA<0.0f){VApos=0.0f;VAneg=-1*VA;}
 8002364:	edd7 7a04 	vldr	s15, [r7, #16]
 8002368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	db05      	blt.n	800237e <DPC_PWM_Send_Duty_SPWM+0xca>
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	64bb      	str	r3, [r7, #72]	; 0x48
 800237c:	e00f      	b.n	800239e <DPC_PWM_Send_Duty_SPWM+0xea>
 800237e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	d508      	bpl.n	800239e <DPC_PWM_Send_Duty_SPWM+0xea>
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002392:	edd7 7a04 	vldr	s15, [r7, #16]
 8002396:	eef1 7a67 	vneg.f32	s15, s15
 800239a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  if(VB>=0.0f){VBpos=VB;VBneg=0;}else if(VB<0.0f){VBpos=0.0f;VBneg=-1*VB;}
 800239e:	edd7 7a03 	vldr	s15, [r7, #12]
 80023a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023aa:	db05      	blt.n	80023b8 <DPC_PWM_Send_Duty_SPWM+0x104>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	643b      	str	r3, [r7, #64]	; 0x40
 80023b6:	e00f      	b.n	80023d8 <DPC_PWM_Send_Duty_SPWM+0x124>
 80023b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c4:	d508      	bpl.n	80023d8 <DPC_PWM_Send_Duty_SPWM+0x124>
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	647b      	str	r3, [r7, #68]	; 0x44
 80023cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80023d0:	eef1 7a67 	vneg.f32	s15, s15
 80023d4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  if(VC>=0.0f){VCpos=VC;VCneg=0;}else if(VC<0.0f){VCpos=0.0f;VCneg=-1*VC;}
 80023d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80023dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e4:	db05      	blt.n	80023f2 <DPC_PWM_Send_Duty_SPWM+0x13e>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80023f0:	e00f      	b.n	8002412 <DPC_PWM_Send_Duty_SPWM+0x15e>
 80023f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80023f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fe:	d508      	bpl.n	8002412 <DPC_PWM_Send_Duty_SPWM+0x15e>
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002406:	edd7 7a02 	vldr	s15, [r7, #8]
 800240a:	eef1 7a67 	vneg.f32	s15, s15
 800240e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

  if(VA>=0.0f){VApos=VA;VAneg=0;}else if(VA<0.0f){VApos=-1*VA;VAneg=-1*VA;}
 8002412:	edd7 7a04 	vldr	s15, [r7, #16]
 8002416:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	db05      	blt.n	800242c <DPC_PWM_Send_Duty_SPWM+0x178>
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	64bb      	str	r3, [r7, #72]	; 0x48
 800242a:	e012      	b.n	8002452 <DPC_PWM_Send_Duty_SPWM+0x19e>
 800242c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002430:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	d50b      	bpl.n	8002452 <DPC_PWM_Send_Duty_SPWM+0x19e>
 800243a:	edd7 7a04 	vldr	s15, [r7, #16]
 800243e:	eef1 7a67 	vneg.f32	s15, s15
 8002442:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8002446:	edd7 7a04 	vldr	s15, [r7, #16]
 800244a:	eef1 7a67 	vneg.f32	s15, s15
 800244e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  if(VB>=0.0f){VBpos=VB;VBneg=0;}else if(VB<0.0f){VBpos=-1*VB;VBneg=-1*VB;}
 8002452:	edd7 7a03 	vldr	s15, [r7, #12]
 8002456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245e:	db05      	blt.n	800246c <DPC_PWM_Send_Duty_SPWM+0x1b8>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	647b      	str	r3, [r7, #68]	; 0x44
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	643b      	str	r3, [r7, #64]	; 0x40
 800246a:	e012      	b.n	8002492 <DPC_PWM_Send_Duty_SPWM+0x1de>
 800246c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002470:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002478:	d50b      	bpl.n	8002492 <DPC_PWM_Send_Duty_SPWM+0x1de>
 800247a:	edd7 7a03 	vldr	s15, [r7, #12]
 800247e:	eef1 7a67 	vneg.f32	s15, s15
 8002482:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8002486:	edd7 7a03 	vldr	s15, [r7, #12]
 800248a:	eef1 7a67 	vneg.f32	s15, s15
 800248e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  if(VC>=0.0f){VCpos=VC;VCneg=0;}else if(VC<0.0f){VCpos=-1*VC;VCneg=-1*VC;}
 8002492:	edd7 7a02 	vldr	s15, [r7, #8]
 8002496:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249e:	db05      	blt.n	80024ac <DPC_PWM_Send_Duty_SPWM+0x1f8>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80024aa:	e012      	b.n	80024d2 <DPC_PWM_Send_Duty_SPWM+0x21e>
 80024ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80024b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b8:	d50b      	bpl.n	80024d2 <DPC_PWM_Send_Duty_SPWM+0x21e>
 80024ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80024be:	eef1 7a67 	vneg.f32	s15, s15
 80024c2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80024c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ca:	eef1 7a67 	vneg.f32	s15, s15
 80024ce:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38




  tDPC_PWM_loc->VApos=(float) (1.0f-VApos);
 80024d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024d6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80024da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	edc3 7a01 	vstr	s15, [r3, #4]
  tDPC_PWM_loc->VBpos=VBpos;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024e8:	60da      	str	r2, [r3, #12]
  tDPC_PWM_loc->VCpos=VCpos;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ee:	615a      	str	r2, [r3, #20]
  tDPC_PWM_loc->VAneg=VAneg;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024f4:	609a      	str	r2, [r3, #8]
  tDPC_PWM_loc->VBneg=VBneg;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024fa:	611a      	str	r2, [r3, #16]
  tDPC_PWM_loc->VCneg=VCneg;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002500:	619a      	str	r2, [r3, #24]
  
  dutyVApos=(uint32_t)(tDPC_PWM_loc->VApos*PWM_PERIOD_COUNTER_INT);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	ed93 7a01 	vldr	s14, [r3, #4]
 8002508:	8bfb      	ldrh	r3, [r7, #30]
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800251a:	ee17 3a90 	vmov	r3, s15
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
  dutyVAneg=(uint32_t)(tDPC_PWM_loc->VAneg*PWM_PERIOD_COUNTER_INT);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	ed93 7a02 	vldr	s14, [r3, #8]
 8002526:	8bfb      	ldrh	r3, [r7, #30]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002538:	ee17 3a90 	vmov	r3, s15
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
  
  dutyVBpos=(uint32_t)(tDPC_PWM_loc->VBpos*PWM_PERIOD_COUNTER_INT);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	ed93 7a03 	vldr	s14, [r3, #12]
 8002544:	8bfb      	ldrh	r3, [r7, #30]
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800254e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002556:	ee17 3a90 	vmov	r3, s15
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
  dutyVBneg=(uint32_t)(tDPC_PWM_loc->VBneg*PWM_PERIOD_COUNTER_INT);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002562:	8bfb      	ldrh	r3, [r7, #30]
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800256c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002574:	ee17 3a90 	vmov	r3, s15
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
  
  dutyVCpos=(uint32_t)(tDPC_PWM_loc->VCpos*PWM_PERIOD_COUNTER_INT);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002580:	8bfb      	ldrh	r3, [r7, #30]
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800258a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002592:	ee17 3a90 	vmov	r3, s15
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  dutyVCneg=(uint32_t)(tDPC_PWM_loc->VCneg*PWM_PERIOD_COUNTER_INT);
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	ed93 7a06 	vldr	s14, [r3, #24]
 800259e:	8bfb      	ldrh	r3, [r7, #30]
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b0:	ee17 3a90 	vmov	r3, s15
 80025b4:	623b      	str	r3, [r7, #32]
  
  if(dutyVApos>=tDPC_PWM_loc->dutyMaxLim){dutyVApos=tDPC_PWM_loc->dutyMaxLim;}
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025bc:	429a      	cmp	r2, r3
 80025be:	d303      	bcc.n	80025c8 <DPC_PWM_Send_Duty_SPWM+0x314>
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
 80025c6:	e007      	b.n	80025d8 <DPC_PWM_Send_Duty_SPWM+0x324>
  else if(dutyVApos<tDPC_PWM_loc->dutyMinLim){dutyVApos=tDPC_PWM_loc->dutyMinLim;}
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d202      	bcs.n	80025d8 <DPC_PWM_Send_Duty_SPWM+0x324>
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
  
  if(dutyVAneg>=tDPC_PWM_loc->dutyMaxLim){dutyVAneg=tDPC_PWM_loc->dutyMaxLim;}
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025de:	429a      	cmp	r2, r3
 80025e0:	d308      	bcc.n	80025f4 <DPC_PWM_Send_Duty_SPWM+0x340>
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	633b      	str	r3, [r7, #48]	; 0x30
 80025e8:	e00c      	b.n	8002604 <DPC_PWM_Send_Duty_SPWM+0x350>
 80025ea:	bf00      	nop
 80025ec:	bf800000 	.word	0xbf800000
 80025f0:	20000358 	.word	0x20000358
  else if(dutyVAneg<tDPC_PWM_loc->dutyMinLim){dutyVAneg=tDPC_PWM_loc->dutyMinLim;}
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d202      	bcs.n	8002604 <DPC_PWM_Send_Duty_SPWM+0x350>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
  
  if(dutyVBpos>=tDPC_PWM_loc->dutyMaxLim){dutyVBpos=tDPC_PWM_loc->dutyMaxLim;}
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260a:	429a      	cmp	r2, r3
 800260c:	d303      	bcc.n	8002616 <DPC_PWM_Send_Duty_SPWM+0x362>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002614:	e007      	b.n	8002626 <DPC_PWM_Send_Duty_SPWM+0x372>
  else if(dutyVBpos<tDPC_PWM_loc->dutyMinLim){dutyVBpos=tDPC_PWM_loc->dutyMinLim;}
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800261c:	429a      	cmp	r2, r3
 800261e:	d202      	bcs.n	8002626 <DPC_PWM_Send_Duty_SPWM+0x372>
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(dutyVBneg>tDPC_PWM_loc->dutyMaxLim){dutyVBneg=tDPC_PWM_loc->dutyMaxLim;}
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800262c:	429a      	cmp	r2, r3
 800262e:	d903      	bls.n	8002638 <DPC_PWM_Send_Duty_SPWM+0x384>
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
 8002636:	e007      	b.n	8002648 <DPC_PWM_Send_Duty_SPWM+0x394>
  else if(dutyVBneg<tDPC_PWM_loc->dutyMinLim){dutyVBneg=tDPC_PWM_loc->dutyMinLim;}
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800263e:	429a      	cmp	r2, r3
 8002640:	d202      	bcs.n	8002648 <DPC_PWM_Send_Duty_SPWM+0x394>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
  
  if(dutyVCpos>=tDPC_PWM_loc->dutyMaxLim){dutyVCpos=tDPC_PWM_loc->dutyMaxLim;}
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264e:	429a      	cmp	r2, r3
 8002650:	d303      	bcc.n	800265a <DPC_PWM_Send_Duty_SPWM+0x3a6>
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
 8002658:	e007      	b.n	800266a <DPC_PWM_Send_Duty_SPWM+0x3b6>
  else if(dutyVCpos<tDPC_PWM_loc->dutyMinLim){dutyVCpos=tDPC_PWM_loc->dutyMinLim;}
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	429a      	cmp	r2, r3
 8002662:	d202      	bcs.n	800266a <DPC_PWM_Send_Duty_SPWM+0x3b6>
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(dutyVCneg>=tDPC_PWM_loc->dutyMaxLim){dutyVCneg=tDPC_PWM_loc->dutyMaxLim;}
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	6a3a      	ldr	r2, [r7, #32]
 8002670:	429a      	cmp	r2, r3
 8002672:	d303      	bcc.n	800267c <DPC_PWM_Send_Duty_SPWM+0x3c8>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	623b      	str	r3, [r7, #32]
 800267a:	e007      	b.n	800268c <DPC_PWM_Send_Duty_SPWM+0x3d8>
  else if(dutyVCneg<tDPC_PWM_loc->dutyMinLim){dutyVCneg=tDPC_PWM_loc->dutyMinLim;}   
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	6a3a      	ldr	r2, [r7, #32]
 8002682:	429a      	cmp	r2, r3
 8002684:	d202      	bcs.n	800268c <DPC_PWM_Send_Duty_SPWM+0x3d8>
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	623b      	str	r3, [r7, #32]
//  if (dutyVApos<=500){
//	  //HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA1);
//	  dutyVApos=0;
//  }
  //else HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA1);
  	DMA_SRC->phAA=dutyVApos;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002690:	601a      	str	r2, [r3, #0]
  	DMA_SRC->phAB=dutyVAneg;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002696:	605a      	str	r2, [r3, #4]
  	DMA_SRC->phBA=dutyVBpos;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269c:	609a      	str	r2, [r3, #8]
  	DMA_SRC->phBB=dutyVBneg;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a2:	60da      	str	r2, [r3, #12]
  	DMA_SRC->phCA=dutyVCpos;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a8:	611a      	str	r2, [r3, #16]
  	DMA_SRC->phCB=dutyVCneg;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a3a      	ldr	r2, [r7, #32]
 80026ae:	615a      	str	r2, [r3, #20]
  	DMA_SRC->phA=dutyVApos;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026b4:	619a      	str	r2, [r3, #24]
  	DMA_SRC->phB=dutyVBpos+dutyVBneg;
 80026b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ba:	441a      	add	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	61da      	str	r2, [r3, #28]
  	DMA_SRC->phC=dutyVCpos+dutyVCneg;
 80026c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	441a      	add	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	621a      	str	r2, [r3, #32]
//#endif
//#else
//  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
//    return;
}
 80026ca:	bf00      	nop
 80026cc:	3754      	adds	r7, #84	; 0x54
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop

080026d8 <DPC_PWM_HRTIM_Start>:
*
* @note Function valid for STM32G4xx microconroller family   
*/

void DPC_PWM_HRTIM_Start(void)
{     
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
//                                 + HRTIM_TIMERID_TIMER_E + HRTIM_TIMERID_TIMER_F);
//  HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1 + HRTIM_OUTPUT_TA2 + HRTIM_OUTPUT_TB1 + HRTIM_OUTPUT_TB2 + HRTIM_OUTPUT_TC1 + HRTIM_OUTPUT_TC2 + + HRTIM_OUTPUT_TD1 + HRTIM_OUTPUT_TD2 + HRTIM_OUTPUT_TE1 + HRTIM_OUTPUT_TE2 + HRTIM_OUTPUT_TF1 + HRTIM_OUTPUT_TF2);

//	HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_A + HRTIM_TIMERID_TIMER_B + HRTIM_TIMERID_TIMER_C);

	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_A);
 80026dc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80026e0:	4814      	ldr	r0, [pc, #80]	; (8002734 <DPC_PWM_HRTIM_Start+0x5c>)
 80026e2:	f006 fcc1 	bl	8009068 <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
 80026e6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80026ea:	4812      	ldr	r0, [pc, #72]	; (8002734 <DPC_PWM_HRTIM_Start+0x5c>)
 80026ec:	f006 fcbc 	bl	8009068 <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCounterStart_DMA(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);
 80026f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80026f4:	480f      	ldr	r0, [pc, #60]	; (8002734 <DPC_PWM_HRTIM_Start+0x5c>)
 80026f6:	f006 fcb7 	bl	8009068 <HAL_HRTIM_WaveformCountStart_DMA>
	HAL_HRTIM_WaveformCountStart_IT(&PWM_Tim1, HRTIM_TIMERID_TIMER_A);
 80026fa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80026fe:	480d      	ldr	r0, [pc, #52]	; (8002734 <DPC_PWM_HRTIM_Start+0x5c>)
 8002700:	f006 fc42 	bl	8008f88 <HAL_HRTIM_WaveformCountStart_IT>
	HAL_HRTIM_WaveformCountStart_IT(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
 8002704:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002708:	480a      	ldr	r0, [pc, #40]	; (8002734 <DPC_PWM_HRTIM_Start+0x5c>)
 800270a:	f006 fc3d 	bl	8008f88 <HAL_HRTIM_WaveformCountStart_IT>
	HAL_HRTIM_WaveformCountStart_IT(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);
 800270e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002712:	4808      	ldr	r0, [pc, #32]	; (8002734 <DPC_PWM_HRTIM_Start+0x5c>)
 8002714:	f006 fc38 	bl	8008f88 <HAL_HRTIM_WaveformCountStart_IT>
	//HAL_HRTIM_WaveformCountStart_DMA(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A);
	//HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_B);
	//HAL_HRTIM_WaveformCounterStart(&PWM_Tim1, HRTIM_TIMERID_TIMER_C);

	//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1);
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TA1);
 8002718:	2101      	movs	r1, #1
 800271a:	4806      	ldr	r0, [pc, #24]	; (8002734 <DPC_PWM_HRTIM_Start+0x5c>)
 800271c:	f006 fbd9 	bl	8008ed2 <HAL_HRTIM_WaveformOutputStart>
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TB1);
 8002720:	2104      	movs	r1, #4
 8002722:	4804      	ldr	r0, [pc, #16]	; (8002734 <DPC_PWM_HRTIM_Start+0x5c>)
 8002724:	f006 fbd5 	bl	8008ed2 <HAL_HRTIM_WaveformOutputStart>
	HAL_HRTIM_WaveformOutputStart(&PWM_Tim1, HRTIM_OUTPUT_TC1);
 8002728:	2110      	movs	r1, #16
 800272a:	4802      	ldr	r0, [pc, #8]	; (8002734 <DPC_PWM_HRTIM_Start+0x5c>)
 800272c:	f006 fbd1 	bl	8008ed2 <HAL_HRTIM_WaveformOutputStart>
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000358 	.word	0x20000358

08002738 <DPC_PWM_HRTIM_OutDisable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_HRTIM_OutDisable(void)
{     
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
//#ifdef STDES_PFCBIDIR_REV2
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA1);
 800273c:	2101      	movs	r1, #1
 800273e:	4806      	ldr	r0, [pc, #24]	; (8002758 <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002740:	f006 fbf4 	bl	8008f2c <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA2);
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB1);
 8002744:	2104      	movs	r1, #4
 8002746:	4804      	ldr	r0, [pc, #16]	; (8002758 <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002748:	f006 fbf0 	bl	8008f2c <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB2);
HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TC1);
 800274c:	2110      	movs	r1, #16
 800274e:	4802      	ldr	r0, [pc, #8]	; (8002758 <DPC_PWM_HRTIM_OutDisable+0x20>)
 8002750:	f006 fbec 	bl	8008f2c <HAL_HRTIM_WaveformOutputStop>
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TA2);
//HAL_HRTIM_WaveformOutputStop(&PWM_Tim1,HRTIM_OUTPUT_TB2);
//#else
////  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000358 	.word	0x20000358

0800275c <DPC_PWM_HRTIM_OutEnable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_HRTIM_OutEnable(void)
{     
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
//#ifdef STDES_PFCBIDIR_REV2
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA1);
 8002760:	2101      	movs	r1, #1
 8002762:	4806      	ldr	r0, [pc, #24]	; (800277c <DPC_PWM_HRTIM_OutEnable+0x20>)
 8002764:	f006 fbb5 	bl	8008ed2 <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA2);
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB1);
 8002768:	2104      	movs	r1, #4
 800276a:	4804      	ldr	r0, [pc, #16]	; (800277c <DPC_PWM_HRTIM_OutEnable+0x20>)
 800276c:	f006 fbb1 	bl	8008ed2 <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB2);
HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TC1);
 8002770:	2110      	movs	r1, #16
 8002772:	4802      	ldr	r0, [pc, #8]	; (800277c <DPC_PWM_HRTIM_OutEnable+0x20>)
 8002774:	f006 fbad 	bl	8008ed2 <HAL_HRTIM_WaveformOutputStart>
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TA2);
//HAL_HRTIM_WaveformOutputStart(&PWM_Tim1,HRTIM_OUTPUT_TB2);
//#else
////  SELECT DEFINE  // ERROR TO PREVENT NO APPLICATION DEFINITION
//#endif
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000358 	.word	0x20000358

08002780 <DPC_PWM_OutDisable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_OutDisable(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
//#ifdef USE_ADVTIM
//    DPC_PWM_ADVTIM_OutDisable();                                                ///Safe: Disable ADVTIM outputs if enabled
//#elif USE_HRTIM
    DPC_PWM_HRTIM_OutDisable();                                                 ///Safe: Disable HRTIM outputs if enabled
 8002784:	f7ff ffd8 	bl	8002738 <DPC_PWM_HRTIM_OutDisable>
//#else
//    SELECT DEFINE
//#endif
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}

0800278c <DPC_PWM_OutEnable>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_OutEnable(DPC_PWM_TypeDef *tDPC_PWM_loc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if(tDPC_PWM_loc->DPC_PWM_Status==PWM_Armed){    
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <DPC_PWM_OutEnable+0x1e>
//#ifdef USE_ADVTIM
//    DPC_PWM_ADVTIM_OutEnable();
//#elif USE_HRTIM
    DPC_PWM_HRTIM_OutEnable();
 800279c:	f7ff ffde 	bl	800275c <DPC_PWM_HRTIM_OutEnable>
    HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 80027a0:	2201      	movs	r2, #1
 80027a2:	2120      	movs	r1, #32
 80027a4:	4803      	ldr	r0, [pc, #12]	; (80027b4 <DPC_PWM_OutEnable+0x28>)
 80027a6:	f005 fb53 	bl	8007e50 <HAL_GPIO_WritePin>
//#else
//    SELECT DEFINE
//#endif
  }
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	48000800 	.word	0x48000800

080027b8 <DPC_PWM_Start>:
*
* @note Function valid for STM32G4xx microconroller family   
*/

void DPC_PWM_Start(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
//#ifdef USE_ADVTIM
//  DPC_PWM_ADVTIM_PWMStart();                                                        ///
//  DPC_PWM_ADVTIM_OutDisable();                                                  ///Safe: Disable ADVTIM outputs if enabled
//#elif USE_HRTIM
  DPC_PWM_HRTIM_Start();                                                        ///
 80027bc:	f7ff ff8c 	bl	80026d8 <DPC_PWM_HRTIM_Start>
  DPC_PWM_HRTIM_OutDisable();                                                   ///Safe: Disable HRTIM outputs if enabled
 80027c0:	f7ff ffba 	bl	8002738 <DPC_PWM_HRTIM_OutDisable>
//#else
//  SELECT DEFINE
//#endif
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <DPC_PWM_Init>:
* @retval Null 
*
* @note Function valid for STM32G4xx microconroller family   
*/
void DPC_PWM_Init(uint32_t  BURST_PWM_Freq_Desidered,uint32_t  PWM_Freq_Desidered,DPC_PWM_StatusTypeDef DPC_PWM_SET, DPC_PWM_TypeDef *tDPC_PWM_loc, DMA_PWMDUTY_STRUCT *DUTY_SRC)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0a0      	sub	sp, #128	; 0x80
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71fb      	strb	r3, [r7, #7]

  uint32_t PWM_Period;                                                          ///
  uint32_t BURST_PWM_Period;                                                    ///  
  uint32_t Timers_Clock;                                                        ///
  uint32_t f_tim_ket_ck;                                                        ///  
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	2260      	movs	r2, #96	; 0x60
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f009 ffea 	bl	800c7ba <memset>
  
  
  Timers_Clock=HAL_RCC_GetPCLK2Freq();                                      ///
 80027e6:	f008 fe1d 	bl	800b424 <HAL_RCC_GetPCLK2Freq>
 80027ea:	67f8      	str	r0, [r7, #124]	; 0x7c
  f_tim_ket_ck=Timers_Clock;                                                /// Represent frequency Internal clock source (tim_ker_ck) expressed in Hz - see: pag-1063 RM0440 Rev1
 80027ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027ee:	67bb      	str	r3, [r7, #120]	; 0x78
  PWM_Period=((f_tim_ket_ck/PWM_Freq_Desidered) - 1)*16;                       ///  uint32_t PWM_Period;
 80027f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80027fc:	3b01      	subs	r3, #1
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	677b      	str	r3, [r7, #116]	; 0x74
  BURST_PWM_Period=((f_tim_ket_ck/BURST_PWM_Freq_Desidered) - 1);           ///  uint32_t PWM_Period;
 8002802:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	673b      	str	r3, [r7, #112]	; 0x70
  tDPC_PWM_loc->dutyMaxLim=tempDEF_dutyMaxLim;                                  /// Adapt to PRESCALER
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	f248 42cf 	movw	r2, #33999	; 0x84cf
 8002814:	61da      	str	r2, [r3, #28]
  tDPC_PWM_loc->dutyMinLim=tempDEF_dutyMinLim;                                  /// Adapt to PRESCALER
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	621a      	str	r2, [r3, #32]
  
  tDPC_PWM_loc->PWM_Period=PWM_Period;                                          ///
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
  tDPC_PWM_loc->BURST_PWM_Period=BURST_PWM_Period;                              ///  
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
  tDPC_PWM_loc->DPC_PWM_Status=DPC_PWM_SET;                                     ///
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	79fa      	ldrb	r2, [r7, #7]
 800282c:	701a      	strb	r2, [r3, #0]

  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST;
 8002832:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002836:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMASize = 0x1;
 8002838:	2301      	movs	r3, #1
 800283a:	623b      	str	r3, [r7, #32]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8002840:	2300      	movs	r3, #0
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002848:	2300      	movs	r3, #0
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800284c:	2300      	movs	r3, #0
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002850:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002854:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002856:	2300      	movs	r3, #0
 8002858:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800285a:	2300      	movs	r3, #0
 800285c:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800285e:	2300      	movs	r3, #0
 8002860:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002862:	2300      	movs	r3, #0
 8002864:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1|HRTIM_TIMFAULTENABLE_FAULT3;
 8002866:	2305      	movs	r3, #5
 8002868:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800286a:	2300      	movs	r3, #0
 800286c:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800286e:	2300      	movs	r3, #0
 8002870:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002872:	2300      	movs	r3, #0
 8002874:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002876:	2300      	movs	r3, #0
 8002878:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800287a:	2300      	movs	r3, #0
 800287c:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 800287e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002882:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8002884:	2300      	movs	r3, #0
 8002886:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phA;
 8002888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800288c:	3318      	adds	r3, #24
 800288e:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[0].CMP1xR);
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <DPC_PWM_Init+0x14c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	339c      	adds	r3, #156	; 0x9c
 8002896:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	461a      	mov	r2, r3
 800289e:	2100      	movs	r1, #0
 80028a0:	481c      	ldr	r0, [pc, #112]	; (8002914 <DPC_PWM_Init+0x14c>)
 80028a2:	f006 f8d1 	bl	8008a48 <HAL_HRTIM_WaveformTimerConfig>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <DPC_PWM_Init+0xe8>
  {
    Error_Handler();
 80028ac:	f002 fb3c 	bl	8004f28 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phB;
 80028b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028b4:	331c      	adds	r3, #28
 80028b6:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[1].CMP1xR);
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <DPC_PWM_Init+0x14c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80028c0:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80028c2:	f107 0310 	add.w	r3, r7, #16
 80028c6:	461a      	mov	r2, r3
 80028c8:	2101      	movs	r1, #1
 80028ca:	4812      	ldr	r0, [pc, #72]	; (8002914 <DPC_PWM_Init+0x14c>)
 80028cc:	f006 f8bc 	bl	8008a48 <HAL_HRTIM_WaveformTimerConfig>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <DPC_PWM_Init+0x112>
  {
    Error_Handler();
 80028d6:	f002 fb27 	bl	8004f28 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = (uint32_t)&DUTY_SRC->phC;
 80028da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028de:	3320      	adds	r3, #32
 80028e0:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = (uint32_t)&(hhrtim1.Instance->sTimerxRegs[2].CMP1xR);
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <DPC_PWM_Init+0x14c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80028ea:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	461a      	mov	r2, r3
 80028f2:	2102      	movs	r1, #2
 80028f4:	4807      	ldr	r0, [pc, #28]	; (8002914 <DPC_PWM_Init+0x14c>)
 80028f6:	f006 f8a7 	bl	8008a48 <HAL_HRTIM_WaveformTimerConfig>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <DPC_PWM_Init+0x13c>
  {
    Error_Handler();
 8002900:	f002 fb12 	bl	8004f28 <Error_Handler>
  }


  DPC_PWM_Start();                                                              ///
 8002904:	f7ff ff58 	bl	80027b8 <DPC_PWM_Start>
  DPC_PWM_OutDisable();                                                         ///Safe: Disable PWM outputs if enabled 
 8002908:	f7ff ff3a 	bl	8002780 <DPC_PWM_OutDisable>
}
 800290c:	bf00      	nop
 800290e:	3780      	adds	r7, #128	; 0x80
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000358 	.word	0x20000358

08002918 <DPC_PI_Init>:
* @retval None
*
* @note Function valid for STM32G4xx microconroller family  
*/  
void DPC_PI_Init(PI_STRUCT_t *pPI,float Init_Val_Kp,float Init_Val_Ki,float Init_Val_Ts,float Init_PIsat_up, float Init_PIsat_down,FlagStatus satPI_toggle_local,FlagStatus antiwindPI_toggle_local,float Antiwindup_Gain_local)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	61f8      	str	r0, [r7, #28]
 8002920:	ed87 0a06 	vstr	s0, [r7, #24]
 8002924:	edc7 0a05 	vstr	s1, [r7, #20]
 8002928:	ed87 1a04 	vstr	s2, [r7, #16]
 800292c:	edc7 1a03 	vstr	s3, [r7, #12]
 8002930:	ed87 2a02 	vstr	s4, [r7, #8]
 8002934:	460b      	mov	r3, r1
 8002936:	edc7 2a00 	vstr	s5, [r7]
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	4613      	mov	r3, r2
 800293e:	71bb      	strb	r3, [r7, #6]
  pPI->Kp=Init_Val_Kp;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	609a      	str	r2, [r3, #8]
  pPI->Ki=Init_Val_Ki;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	60da      	str	r2, [r3, #12]
  pPI->Ts=Init_Val_Ts;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	611a      	str	r2, [r3, #16]
  pPI->Integral=0;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	615a      	str	r2, [r3, #20]
  pPI->PIout=0;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	619a      	str	r2, [r3, #24]
  pPI->PIsat_up=Init_PIsat_up;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	621a      	str	r2, [r3, #32]
  pPI->PIsat_down=Init_PIsat_down;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	625a      	str	r2, [r3, #36]	; 0x24
  pPI->error=0;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	629a      	str	r2, [r3, #40]	; 0x28
  pPI->Integralout=0;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	62da      	str	r2, [r3, #44]	; 0x2c
  pPI->resetPI=RESET;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pPI->k0=Init_Val_Kp; //K0=Kp
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	635a      	str	r2, [r3, #52]	; 0x34
  pPI->k1=Init_Val_Ki*Init_Val_Ts; //K1=Ki*Ts
 800298c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002990:	edd7 7a04 	vldr	s15, [r7, #16]
 8002994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  pPI->satPI_toggle=satPI_toggle_local;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	79fa      	ldrb	r2, [r7, #7]
 80029a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pPI->antiwindPI_toggle=antiwindPI_toggle_local;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	79ba      	ldrb	r2, [r7, #6]
 80029aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  pPI->Antiwindup_Gain=Antiwindup_Gain_local;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80029b4:	bf00      	nop
 80029b6:	3724      	adds	r7, #36	; 0x24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <PI>:
* @retval float Return output data of PI regulator
*
* @note Function valid for STM32G4xx microconroller family  
*/
float PI(float Ref, float Feed , PI_STRUCT_t *pPI)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80029ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80029ce:	6078      	str	r0, [r7, #4]
pPI->Ref=Ref;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	601a      	str	r2, [r3, #0]
pPI->Feed=Feed;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	605a      	str	r2, [r3, #4]

  if(pPI->resetPI==SET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d104      	bne.n	80029f0 <PI+0x30>
  {
    pPI->Integral=0;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	615a      	str	r2, [r3, #20]
 80029ee:	e031      	b.n	8002a54 <PI+0x94>
  }
  else{
    pPI->error=(float)Ref-(float)Feed;
 80029f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80029f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pPI->Integral=pPI->Integral+(pPI->k1*pPI->error)+pPI->Antiwindup_Term;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	edc3 7a05 	vstr	s15, [r3, #20]
    pPI->Integralout=pPI->Integral;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	62da      	str	r2, [r3, #44]	; 0x2c
    pPI->PIout=(pPI->k0*pPI->error)+pPI->Integralout;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	edc3 7a06 	vstr	s15, [r3, #24]
  }

  //Start Check Saturation
  if (pPI->satPI_toggle==SET){
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d13e      	bne.n	8002adc <PI+0x11c>
    //Saturation
    if(    pPI->PIout>pPI->PIsat_up)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a72:	dd04      	ble.n	8002a7e <PI+0xbe>
    {
      pPI->PIout_sat=pPI->PIsat_up;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1a      	ldr	r2, [r3, #32]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	61da      	str	r2, [r3, #28]
 8002a7c:	e013      	b.n	8002aa6 <PI+0xe6>
    }
    else if(    pPI->PIout<pPI->PIsat_down)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a92:	d504      	bpl.n	8002a9e <PI+0xde>
    {
      pPI->PIout_sat=pPI->PIsat_down;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	61da      	str	r2, [r3, #28]
 8002a9c:	e003      	b.n	8002aa6 <PI+0xe6>
    }
    else {
      pPI->PIout_sat=pPI->PIout;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	61da      	str	r2, [r3, #28]
    }
     
    //Start Check Antiwindup
    if (pPI->antiwindPI_toggle==SET){
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d110      	bne.n	8002ad2 <PI+0x112>
      //Saturation
      pPI->Antiwindup_Term=(pPI->PIout_sat-pPI->PIout)*pPI->Antiwindup_Gain;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002abc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8002ad0:	e00c      	b.n	8002aec <PI+0x12c>
    }
    else {
      pPI->Antiwindup_Term=0;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ada:	e007      	b.n	8002aec <PI+0x12c>
    }
    //End Check Antiwindup    
  }
  else {
    pPI->PIout_sat=pPI->PIout;  
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	61da      	str	r2, [r3, #28]
    pPI->Antiwindup_Term=0;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  //End Check Saturation
  
  return pPI->PIout_sat;  
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	ee07 3a90 	vmov	s15, r3
}
 8002af4:	eeb0 0a67 	vmov.f32	s0, s15
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <DPC_TO_Init>:
/**
* @defgroup Private_function                                  Private Variables
  * @{
  */
void DPC_TO_Init(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
  for (  uint8_t Temp = 0; Temp < TO_MAX_NUMBER; Temp++){
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	71fb      	strb	r3, [r7, #7]
 8002b0e:	e00d      	b.n	8002b2c <DPC_TO_Init+0x28>
    Timeout_List[Temp].State = TO_OFF;
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <DPC_TO_Init+0x3c>)
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	2200      	movs	r2, #0
 8002b1a:	711a      	strb	r2, [r3, #4]
    Timeout_List[Temp].Count = 0;  
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <DPC_TO_Init+0x3c>)
 8002b20:	2100      	movs	r1, #0
 8002b22:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  for (  uint8_t Temp = 0; Temp < TO_MAX_NUMBER; Temp++){
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	71fb      	strb	r3, [r7, #7]
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d9ee      	bls.n	8002b10 <DPC_TO_Init+0xc>
  }
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000130 	.word	0x20000130

08002b44 <TimeoutMng>:
/**
* @defgroup Private_function                                  Private Variables
  * @{
  */
void TimeoutMng(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
for (  uint8_t Temp = 0; Temp < TO_MAX_NUMBER; Temp++){
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	71fb      	strb	r3, [r7, #7]
 8002b4e:	e01e      	b.n	8002b8e <TimeoutMng+0x4a>
    
  if(Timeout_List[Temp].State == TO_RUN){  
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <TimeoutMng+0x5c>)
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	791b      	ldrb	r3, [r3, #4]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d114      	bne.n	8002b88 <TimeoutMng+0x44>
    if(Timeout_List[Temp].Count == 0){
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	4a0f      	ldr	r2, [pc, #60]	; (8002ba0 <TimeoutMng+0x5c>)
 8002b62:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <TimeoutMng+0x34>
      Timeout_List[Temp].State = TO_TOOK;
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <TimeoutMng+0x5c>)
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	2202      	movs	r2, #2
 8002b74:	711a      	strb	r2, [r3, #4]
 8002b76:	e007      	b.n	8002b88 <TimeoutMng+0x44>
    }
    else{
      Timeout_List[Temp].Count--;
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <TimeoutMng+0x5c>)
 8002b7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002b80:	3a01      	subs	r2, #1
 8002b82:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <TimeoutMng+0x5c>)
 8002b84:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
for (  uint8_t Temp = 0; Temp < TO_MAX_NUMBER; Temp++){
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	71fb      	strb	r3, [r7, #7]
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d9dd      	bls.n	8002b50 <TimeoutMng+0xc>
    }
  }
 }
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	20000130 	.word	0x20000130

08002ba4 <Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void Park(float alpha, float beta, float theta,float phi, float *d, float *q){
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	ed87 0a05 	vstr	s0, [r7, #20]
 8002bae:	edc7 0a04 	vstr	s1, [r7, #16]
 8002bb2:	ed87 1a03 	vstr	s2, [r7, #12]
 8002bb6:	edc7 1a02 	vstr	s3, [r7, #8]
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
    float theta_act=theta+phi;
 8002bbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosine = FastCos(theta_act);
 8002bce:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002bd2:	f7fe fd69 	bl	80016a8 <FastCos>
 8002bd6:	ed87 0a08 	vstr	s0, [r7, #32]
    float sine = FastSin(theta_act);
 8002bda:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002bde:	f7fe fd17 	bl	8001610 <FastSin>
 8002be2:	ed87 0a07 	vstr	s0, [r7, #28]
    *d = alpha*cosine + beta*sine;
 8002be6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bea:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf2:	edd7 6a04 	vldr	s13, [r7, #16]
 8002bf6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	edc3 7a00 	vstr	s15, [r3]
    *q = -alpha*sine + beta*cosine;
 8002c08:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c0c:	eeb1 7a67 	vneg.f32	s14, s15
 8002c10:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c18:	edd7 6a04 	vldr	s13, [r7, #16]
 8002c1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	edc3 7a00 	vstr	s15, [r3]
}
 8002c2e:	bf00      	nop
 8002c30:	3728      	adds	r7, #40	; 0x28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <InvPark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void InvPark(float d, float q, float theta, float phi, float *alpha, float *beta){
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b08a      	sub	sp, #40	; 0x28
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c40:	edc7 0a04 	vstr	s1, [r7, #16]
 8002c44:	ed87 1a03 	vstr	s2, [r7, #12]
 8002c48:	edc7 1a02 	vstr	s3, [r7, #8]
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
    float theta_act=theta+phi;
 8002c50:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosine = FastCos(theta_act);
 8002c60:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c64:	f7fe fd20 	bl	80016a8 <FastCos>
 8002c68:	ed87 0a08 	vstr	s0, [r7, #32]
    float sine = FastSin(theta_act);
 8002c6c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c70:	f7fe fcce 	bl	8001610 <FastSin>
 8002c74:	ed87 0a07 	vstr	s0, [r7, #28]
    *alpha = d*cosine - q*sine;
 8002c78:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c84:	edd7 6a04 	vldr	s13, [r7, #16]
 8002c88:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	edc3 7a00 	vstr	s15, [r3]
    *beta =  d*sine + q*cosine;
 8002c9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ca6:	edd7 6a04 	vldr	s13, [r7, #16]
 8002caa:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	edc3 7a00 	vstr	s15, [r3]
    }
 8002cbc:	bf00      	nop
 8002cbe:	3728      	adds	r7, #40	; 0x28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	0000      	movs	r0, r0
	...

08002cc8 <Clarke>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void Clarke(float a, float b,float c, float *alpha, float *beta){
 8002cc8:	b5b0      	push	{r4, r5, r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	ed87 0a05 	vstr	s0, [r7, #20]
 8002cd2:	edc7 0a04 	vstr	s1, [r7, #16]
 8002cd6:	ed87 1a03 	vstr	s2, [r7, #12]
 8002cda:	60b8      	str	r0, [r7, #8]
 8002cdc:	6079      	str	r1, [r7, #4]
    *alpha = 0.666f*(a-(0.5f*b)-(0.5f*c));
 8002cde:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cea:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cf6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002cfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d02:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002d80 <Clarke+0xb8>
 8002d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	edc3 7a00 	vstr	s15, [r3]
    *beta = 0.666666*(0.866025*b - 0.866025*c);
 8002d10:	6938      	ldr	r0, [r7, #16]
 8002d12:	f7fd fbe5 	bl	80004e0 <__aeabi_f2d>
 8002d16:	a316      	add	r3, pc, #88	; (adr r3, 8002d70 <Clarke+0xa8>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f7fd fc38 	bl	8000590 <__aeabi_dmul>
 8002d20:	4603      	mov	r3, r0
 8002d22:	460c      	mov	r4, r1
 8002d24:	4625      	mov	r5, r4
 8002d26:	461c      	mov	r4, r3
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7fd fbd9 	bl	80004e0 <__aeabi_f2d>
 8002d2e:	a310      	add	r3, pc, #64	; (adr r3, 8002d70 <Clarke+0xa8>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fc2c 	bl	8000590 <__aeabi_dmul>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	4629      	mov	r1, r5
 8002d40:	f7fd fa6e 	bl	8000220 <__aeabi_dsub>
 8002d44:	4603      	mov	r3, r0
 8002d46:	460c      	mov	r4, r1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	a30a      	add	r3, pc, #40	; (adr r3, 8002d78 <Clarke+0xb0>)
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f7fd fc1d 	bl	8000590 <__aeabi_dmul>
 8002d56:	4603      	mov	r3, r0
 8002d58:	460c      	mov	r4, r1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	f7fd fe49 	bl	80009f4 <__aeabi_d2f>
 8002d62:	4602      	mov	r2, r0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	601a      	str	r2, [r3, #0]
    }
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d70:	0f9096bc 	.word	0x0f9096bc
 8002d74:	3febb67a 	.word	0x3febb67a
 8002d78:	ef6b5d46 	.word	0xef6b5d46
 8002d7c:	3fe55553 	.word	0x3fe55553
 8002d80:	3f2a7efa 	.word	0x3f2a7efa

08002d84 <InvClarke>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void InvClarke(float alpha, float beta, float *a, float *b, float *c){
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002d8e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
    *a = alpha;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	601a      	str	r2, [r3, #0]
    *b = 0.5f*(-alpha + 1.73205080757f*beta);
 8002d9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002da2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002df4 <InvClarke+0x70>
 8002da6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002daa:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	edc3 7a00 	vstr	s15, [r3]
    *c = 0.5f*(-alpha - 1.73205080757f*beta);
 8002dc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dc4:	eeb1 7a67 	vneg.f32	s14, s15
 8002dc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dcc:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002df4 <InvClarke+0x70>
 8002dd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	edc3 7a00 	vstr	s15, [r3]
} 
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	3fddb3d7 	.word	0x3fddb3d7

08002df8 <Clarke_Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void Clarke_Park(float a, float b, float c, float theta,float phi, float *d, float *q,float *o){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08c      	sub	sp, #48	; 0x30
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	ed87 0a07 	vstr	s0, [r7, #28]
 8002e02:	edc7 0a06 	vstr	s1, [r7, #24]
 8002e06:	ed87 1a05 	vstr	s2, [r7, #20]
 8002e0a:	edc7 1a04 	vstr	s3, [r7, #16]
 8002e0e:	ed87 2a03 	vstr	s4, [r7, #12]
 8002e12:	60b8      	str	r0, [r7, #8]
 8002e14:	6079      	str	r1, [r7, #4]
 8002e16:	603a      	str	r2, [r7, #0]
float beta_sub;
float d_sub;
float q_sub;
//float o_sub;  
  
Clarke(a, b, c, &alpha_sub, &beta_sub);
 8002e18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	ed97 1a05 	vldr	s2, [r7, #20]
 8002e28:	edd7 0a06 	vldr	s1, [r7, #24]
 8002e2c:	ed97 0a07 	vldr	s0, [r7, #28]
 8002e30:	f7ff ff4a 	bl	8002cc8 <Clarke>
Park(alpha_sub, beta_sub, theta,phi, &d_sub, &q_sub);
 8002e34:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e3c:	f107 0220 	add.w	r2, r7, #32
 8002e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	edd7 1a03 	vldr	s3, [r7, #12]
 8002e4c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002e50:	eef0 0a47 	vmov.f32	s1, s14
 8002e54:	eeb0 0a67 	vmov.f32	s0, s15
 8002e58:	f7ff fea4 	bl	8002ba4 <Park>


*d=d_sub;
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	601a      	str	r2, [r3, #0]
*q=q_sub;
 8002e62:	6a3a      	ldr	r2, [r7, #32]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	601a      	str	r2, [r3, #0]
//*o=o_sub=0;

    
    
}
 8002e68:	bf00      	nop
 8002e6a:	3730      	adds	r7, #48	; 0x30
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <Run_ClarkePark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */
void Run_ClarkePark(TRANSFORM_ABC_t* abc_sub,float theta_sub,float phi_sub,TRANSFORM_QDO_t* out_cl_pa_sub ){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e7c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
 
float pll_d_sub;
float pll_q_sub;
float pll_o_sub;
 
  Clarke_Park(abc_sub->axA, abc_sub->axB, abc_sub->axC,theta_sub,phi_sub,&pll_d_sub,&pll_q_sub,&pll_o_sub);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e94:	f107 0214 	add.w	r2, r7, #20
 8002e98:	f107 0118 	add.w	r1, r7, #24
 8002e9c:	f107 031c 	add.w	r3, r7, #28
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	ed97 2a01 	vldr	s4, [r7, #4]
 8002ea6:	edd7 1a02 	vldr	s3, [r7, #8]
 8002eaa:	eeb0 1a66 	vmov.f32	s2, s13
 8002eae:	eef0 0a47 	vmov.f32	s1, s14
 8002eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb6:	f7ff ff9f 	bl	8002df8 <Clarke_Park>
  
  
  out_cl_pa_sub->axd=pll_d_sub;
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	601a      	str	r2, [r3, #0]
  out_cl_pa_sub->axq=pll_q_sub;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
  out_cl_pa_sub->axo=pll_o_sub;
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	609a      	str	r2, [r3, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	3720      	adds	r7, #32
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <inv_Clarke_Park>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */  
void inv_Clarke_Park(float d, float q, float o, float theta,float phi, float *a, float *b,float *c){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08e      	sub	sp, #56	; 0x38
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	ed87 0a07 	vstr	s0, [r7, #28]
 8002ede:	edc7 0a06 	vstr	s1, [r7, #24]
 8002ee2:	ed87 1a05 	vstr	s2, [r7, #20]
 8002ee6:	edc7 1a04 	vstr	s3, [r7, #16]
 8002eea:	ed87 2a03 	vstr	s4, [r7, #12]
 8002eee:	60b8      	str	r0, [r7, #8]
 8002ef0:	6079      	str	r1, [r7, #4]
 8002ef2:	603a      	str	r2, [r7, #0]
float beta_sub;
float a_sub;
float b_sub;
float c_sub;

InvPark(d, q, theta,phi,&alpha_sub, &beta_sub);
 8002ef4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002ef8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	edd7 1a03 	vldr	s3, [r7, #12]
 8002f04:	ed97 1a04 	vldr	s2, [r7, #16]
 8002f08:	edd7 0a06 	vldr	s1, [r7, #24]
 8002f0c:	ed97 0a07 	vldr	s0, [r7, #28]
 8002f10:	f7ff fe91 	bl	8002c36 <InvPark>
InvClarke(alpha_sub, beta_sub, &a_sub, &b_sub, &c_sub);
 8002f14:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f18:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002f1c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002f20:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f28:	4618      	mov	r0, r3
 8002f2a:	eef0 0a47 	vmov.f32	s1, s14
 8002f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f32:	f7ff ff27 	bl	8002d84 <InvClarke>

*a=a_sub;
 8002f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	601a      	str	r2, [r3, #0]
*b=b_sub;
 8002f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	601a      	str	r2, [r3, #0]
*c=c_sub;
 8002f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	601a      	str	r2, [r3, #0]
} 
 8002f48:	bf00      	nop
 8002f4a:	3738      	adds	r7, #56	; 0x38
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <Run_Inv_ClarkePark>:
  * 
  * @retval None
  *
  * @note Function valid for STM32G4xx microconroller family  
  */ 
void Run_Inv_ClarkePark(TRANSFORM_QDO_t* dqo_sub,float theta_sub,float phi_sub,TRANSFORM_ABC_t* out_inv_cl_pa_sub ){
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f5c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
 
float a_sub;
float b_sub;
float c_sub;
 
  inv_Clarke_Park(dqo_sub->axd, dqo_sub->axq, dqo_sub->axo,theta_sub,phi_sub,&a_sub,&b_sub,&c_sub);  
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f74:	f107 0214 	add.w	r2, r7, #20
 8002f78:	f107 0118 	add.w	r1, r7, #24
 8002f7c:	f107 031c 	add.w	r3, r7, #28
 8002f80:	4618      	mov	r0, r3
 8002f82:	ed97 2a01 	vldr	s4, [r7, #4]
 8002f86:	edd7 1a02 	vldr	s3, [r7, #8]
 8002f8a:	eeb0 1a66 	vmov.f32	s2, s13
 8002f8e:	eef0 0a47 	vmov.f32	s1, s14
 8002f92:	eeb0 0a67 	vmov.f32	s0, s15
 8002f96:	f7ff ff9d 	bl	8002ed4 <inv_Clarke_Park>
  
  out_inv_cl_pa_sub->axA=a_sub;
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	601a      	str	r2, [r3, #0]
  out_inv_cl_pa_sub->axB=b_sub;
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
  out_inv_cl_pa_sub->axC=c_sub;
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	3720      	adds	r7, #32
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <ADC_Voltage_AC_ProcessData>:
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	ee07 3a90 	vmov	s15, r3
 8002fc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fca:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003034 <ADC_Voltage_AC_ProcessData+0x80>
 8002fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	edc3 7a00 	vstr	s15, [r3]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fee:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003034 <ADC_Voltage_AC_ProcessData+0x80>
 8002ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	edc3 7a01 	vstr	s15, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3308      	adds	r3, #8
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003012:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003034 <ADC_Voltage_AC_ProcessData+0x80>
 8003016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800301a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800301e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	edc3 7a02 	vstr	s15, [r3, #8]
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	45000000 	.word	0x45000000

08003038 <ADC2Phy_Voltage_ProcessData>:
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	b21b      	sxth	r3, r3
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800305e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003062:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003066:	edd7 7a04 	vldr	s15, [r7, #16]
 800306a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	edc3 7a00 	vstr	s15, [r3]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	3304      	adds	r3, #4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	b21b      	sxth	r3, r3
 800307c:	ee07 3a90 	vmov	s15, r3
 8003080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003084:	edd7 7a05 	vldr	s15, [r7, #20]
 8003088:	ee37 7a67 	vsub.f32	s14, s14, s15
 800308c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	edc3 7a01 	vstr	s15, [r3, #4]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3308      	adds	r3, #8
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	b21b      	sxth	r3, r3
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	edc3 7a02 	vstr	s15, [r3, #8]
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <ADC_Voltage_DC_ProcessData>:
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030e2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003118 <ADC_Voltage_DC_ProcessData+0x4c>
 80030e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	edc3 7a00 	vstr	s15, [r3]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030fe:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003118 <ADC_Voltage_DC_ProcessData+0x4c>
 8003102:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	edc3 7a01 	vstr	s15, [r3, #4]
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	45000000 	.word	0x45000000

0800311c <ADC2Phy_DC_Voltage_ProcessData>:
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	b21b      	sxth	r3, r3
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003142:	edd7 7a05 	vldr	s15, [r7, #20]
 8003146:	ee37 7a67 	vsub.f32	s14, s14, s15
 800314a:	edd7 7a04 	vldr	s15, [r7, #16]
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	edc3 7a00 	vstr	s15, [r3]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	3304      	adds	r3, #4
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	b21b      	sxth	r3, r3
 8003160:	3b64      	subs	r3, #100	; 0x64
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800316a:	edd7 7a04 	vldr	s15, [r7, #16]
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	edc3 7a01 	vstr	s15, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	ed93 7a00 	vldr	s14, [r3]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	edd3 7a01 	vldr	s15, [r3, #4]
 8003184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	edc3 7a02 	vstr	s15, [r3, #8]
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <ADC_Current_AC_ProcessData>:
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031b2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800321c <ADC_Current_AC_ProcessData+0x80>
 80031b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	edc3 7a00 	vstr	s15, [r3]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3304      	adds	r3, #4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031d6:	eddf 6a11 	vldr	s13, [pc, #68]	; 800321c <ADC_Current_AC_ProcessData+0x80>
 80031da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	edc3 7a01 	vstr	s15, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3308      	adds	r3, #8
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031fa:	eddf 6a08 	vldr	s13, [pc, #32]	; 800321c <ADC_Current_AC_ProcessData+0x80>
 80031fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	edc3 7a02 	vstr	s15, [r3, #8]
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	45000000 	.word	0x45000000

08003220 <ADC_Current_AC_RAW_ProcessData>:
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	edc3 7a00 	vstr	s15, [r3]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	edc3 7a01 	vstr	s15, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3308      	adds	r3, #8
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	edc3 7a02 	vstr	s15, [r3, #8]
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <ADC2Phy_Current_ProcessData>:
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	b21b      	sxth	r3, r3
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003296:	edd7 7a05 	vldr	s15, [r7, #20]
 800329a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800329e:	edd7 7a04 	vldr	s15, [r7, #16]
 80032a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	edc3 7a00 	vstr	s15, [r3]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	3304      	adds	r3, #4
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	b21b      	sxth	r3, r3
 80032b4:	ee07 3a90 	vmov	s15, r3
 80032b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80032c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80032c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	edc3 7a01 	vstr	s15, [r3, #4]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	3308      	adds	r3, #8
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	b21b      	sxth	r3, r3
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80032e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80032ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	edc3 7a02 	vstr	s15, [r3, #8]
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <ADC2Phy_RMS_Current_ProcessData>:
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	4b79      	ldr	r3, [pc, #484]	; (8003500 <ADC2Phy_RMS_Current_ProcessData+0x1fc>)
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d117      	bne.n	8003352 <ADC2Phy_RMS_Current_ProcessData+0x4e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	ed93 7a00 	vldr	s14, [r3]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	edd3 7a00 	vldr	s15, [r3]
 800335e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003366:	dd03      	ble.n	8003370 <ADC2Phy_RMS_Current_ProcessData+0x6c>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	ed93 7a00 	vldr	s14, [r3]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	edd3 7a00 	vldr	s15, [r3]
 800337c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	d503      	bpl.n	800338e <ADC2Phy_RMS_Current_ProcessData+0x8a>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	ed93 7a01 	vldr	s14, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	edd3 7a01 	vldr	s15, [r3, #4]
 800339a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a2:	dd03      	ble.n	80033ac <ADC2Phy_RMS_Current_ProcessData+0xa8>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80033b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	d503      	bpl.n	80033ca <ADC2Phy_RMS_Current_ProcessData+0xc6>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80033d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033de:	dd03      	ble.n	80033e8 <ADC2Phy_RMS_Current_ProcessData+0xe4>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80033f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fc:	d503      	bpl.n	8003406 <ADC2Phy_RMS_Current_ProcessData+0x102>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3301      	adds	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2bc7      	cmp	r3, #199	; 0xc7
 8003410:	d96d      	bls.n	80034ee <ADC2Phy_RMS_Current_ProcessData+0x1ea>
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	ed93 7a00 	vldr	s14, [r3]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	edd3 7a00 	vldr	s15, [r3]
 8003422:	eef1 7a67 	vneg.f32	s15, s15
 8003426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342e:	dd0a      	ble.n	8003446 <ADC2Phy_RMS_Current_ProcessData+0x142>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	edd3 6a00 	vldr	s13, [r3]
 8003436:	ed97 7a04 	vldr	s14, [r7, #16]
 800343a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	edc3 7a00 	vstr	s15, [r3]
 8003444:	e00b      	b.n	800345e <ADC2Phy_RMS_Current_ProcessData+0x15a>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	edd3 7a00 	vldr	s15, [r3]
 800344c:	eef1 6a67 	vneg.f32	s13, s15
 8003450:	ed97 7a04 	vldr	s14, [r7, #16]
 8003454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	edc3 7a00 	vstr	s15, [r3]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	ed93 7a01 	vldr	s14, [r3, #4]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	edd3 7a01 	vldr	s15, [r3, #4]
 800346a:	eef1 7a67 	vneg.f32	s15, s15
 800346e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003476:	dd0a      	ble.n	800348e <ADC2Phy_RMS_Current_ProcessData+0x18a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	edd3 6a01 	vldr	s13, [r3, #4]
 800347e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	edc3 7a01 	vstr	s15, [r3, #4]
 800348c:	e00b      	b.n	80034a6 <ADC2Phy_RMS_Current_ProcessData+0x1a2>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	edd3 7a01 	vldr	s15, [r3, #4]
 8003494:	eef1 6a67 	vneg.f32	s13, s15
 8003498:	ed97 7a04 	vldr	s14, [r7, #16]
 800349c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	edc3 7a01 	vstr	s15, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80034b2:	eef1 7a67 	vneg.f32	s15, s15
 80034b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	dd0a      	ble.n	80034d6 <ADC2Phy_RMS_Current_ProcessData+0x1d2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80034c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80034ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	edc3 7a02 	vstr	s15, [r3, #8]
 80034d4:	e00b      	b.n	80034ee <ADC2Phy_RMS_Current_ProcessData+0x1ea>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80034dc:	eef1 6a67 	vneg.f32	s13, s15
 80034e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80034e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	edc3 7a02 	vstr	s15, [r3, #8]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	3fb47ae1 	.word	0x3fb47ae1

08003504 <DPC_ADC_Init>:
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6278      	str	r0, [r7, #36]	; 0x24
 800350c:	ed87 0a08 	vstr	s0, [r7, #32]
 8003510:	edc7 0a07 	vstr	s1, [r7, #28]
 8003514:	ed87 1a06 	vstr	s2, [r7, #24]
 8003518:	edc7 1a05 	vstr	s3, [r7, #20]
 800351c:	ed87 2a04 	vstr	s4, [r7, #16]
 8003520:	edc7 2a03 	vstr	s5, [r7, #12]
 8003524:	ed87 3a02 	vstr	s6, [r7, #8]
 8003528:	edc7 3a01 	vstr	s7, [r7, #4]
 800352c:	f000 f844 	bl	80035b8 <DPC_ADC_Default_Init>
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	6a3a      	ldr	r2, [r7, #32]
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003540:	ed97 7a08 	vldr	s14, [r7, #32]
 8003544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	edc3 7a01 	vstr	s15, [r3, #4]
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	621a      	str	r2, [r3, #32]
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	619a      	str	r2, [r3, #24]
 800355a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800355e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	edc3 7a07 	vstr	s15, [r3, #28]
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	615a      	str	r2, [r3, #20]
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	60da      	str	r2, [r3, #12]
 8003578:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800357c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	edc3 7a04 	vstr	s15, [r3, #16]
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	625a      	str	r2, [r3, #36]	; 0x24
 8003596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800359a:	ed97 7a02 	vldr	s14, [r7, #8]
 800359e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80035b0:	bf00      	nop
 80035b2:	3728      	adds	r7, #40	; 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <DPC_ADC_Default_Init>:
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b092      	sub	sp, #72	; 0x48
 80035bc:	af00      	add	r7, sp, #0
 80035be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	609a      	str	r2, [r3, #8]
 80035ca:	f107 0320 	add.w	r3, r7, #32
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	60da      	str	r2, [r3, #12]
 80035d8:	611a      	str	r2, [r3, #16]
 80035da:	615a      	str	r2, [r3, #20]
 80035dc:	619a      	str	r2, [r3, #24]
 80035de:	463b      	mov	r3, r7
 80035e0:	2220      	movs	r2, #32
 80035e2:	2100      	movs	r1, #0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f009 f8e8 	bl	800c7ba <memset>
 80035ea:	4b79      	ldr	r3, [pc, #484]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 80035ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	4b77      	ldr	r3, [pc, #476]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 80035f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	4b75      	ldr	r3, [pc, #468]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	4b73      	ldr	r3, [pc, #460]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003602:	2200      	movs	r2, #0
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	4b72      	ldr	r3, [pc, #456]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
 800360c:	4b70      	ldr	r3, [pc, #448]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 800360e:	2201      	movs	r2, #1
 8003610:	615a      	str	r2, [r3, #20]
 8003612:	4b6f      	ldr	r3, [pc, #444]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003614:	2204      	movs	r2, #4
 8003616:	619a      	str	r2, [r3, #24]
 8003618:	4b6d      	ldr	r3, [pc, #436]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 800361a:	2200      	movs	r2, #0
 800361c:	771a      	strb	r2, [r3, #28]
 800361e:	4b6c      	ldr	r3, [pc, #432]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003620:	2201      	movs	r2, #1
 8003622:	775a      	strb	r2, [r3, #29]
 8003624:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003626:	2208      	movs	r2, #8
 8003628:	621a      	str	r2, [r3, #32]
 800362a:	4b69      	ldr	r3, [pc, #420]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003632:	4b67      	ldr	r3, [pc, #412]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003634:	2200      	movs	r2, #0
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c
 8003638:	4b65      	ldr	r3, [pc, #404]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 800363a:	2200      	movs	r2, #0
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
 800363e:	4b64      	ldr	r3, [pc, #400]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003646:	4b62      	ldr	r3, [pc, #392]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003648:	2200      	movs	r2, #0
 800364a:	63da      	str	r2, [r3, #60]	; 0x3c
 800364c:	4b60      	ldr	r3, [pc, #384]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003654:	4b5e      	ldr	r3, [pc, #376]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003656:	2208      	movs	r2, #8
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
 800365a:	4b5d      	ldr	r3, [pc, #372]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 800365c:	2260      	movs	r2, #96	; 0x60
 800365e:	649a      	str	r2, [r3, #72]	; 0x48
 8003660:	4b5b      	ldr	r3, [pc, #364]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003662:	2200      	movs	r2, #0
 8003664:	64da      	str	r2, [r3, #76]	; 0x4c
 8003666:	4b5a      	ldr	r3, [pc, #360]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003668:	2201      	movs	r2, #1
 800366a:	651a      	str	r2, [r3, #80]	; 0x50
 800366c:	4858      	ldr	r0, [pc, #352]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 800366e:	f002 fa7f 	bl	8005b70 <HAL_ADC_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <DPC_ADC_Default_Init+0xc4>
 8003678:	f001 fc56 	bl	8004f28 <Error_Handler>
 800367c:	2300      	movs	r3, #0
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003680:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003684:	4619      	mov	r1, r3
 8003686:	4852      	ldr	r0, [pc, #328]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003688:	f003 fc6c 	bl	8006f64 <HAL_ADCEx_MultiModeConfigChannel>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <DPC_ADC_Default_Init+0xde>
 8003692:	f001 fc49 	bl	8004f28 <Error_Handler>
 8003696:	4b4f      	ldr	r3, [pc, #316]	; (80037d4 <DPC_ADC_Default_Init+0x21c>)
 8003698:	623b      	str	r3, [r7, #32]
 800369a:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
 80036a0:	4b4d      	ldr	r3, [pc, #308]	; (80037d8 <DPC_ADC_Default_Init+0x220>)
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a4:	2300      	movs	r3, #0
 80036a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80036aa:	2300      	movs	r3, #0
 80036ac:	633b      	str	r3, [r7, #48]	; 0x30
 80036ae:	2300      	movs	r3, #0
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
 80036b2:	2300      	movs	r3, #0
 80036b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80036b6:	f107 0320 	add.w	r3, r7, #32
 80036ba:	4619      	mov	r1, r3
 80036bc:	4844      	ldr	r0, [pc, #272]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 80036be:	f003 f941 	bl	8006944 <HAL_ADC_AnalogWDGConfig>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <DPC_ADC_Default_Init+0x114>
 80036c8:	f001 fc2e 	bl	8004f28 <Error_Handler>
 80036cc:	4b42      	ldr	r3, [pc, #264]	; (80037d8 <DPC_ADC_Default_Init+0x220>)
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	2306      	movs	r3, #6
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	2301      	movs	r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	237f      	movs	r3, #127	; 0x7f
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	2304      	movs	r3, #4
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	463b      	mov	r3, r7
 80036e6:	4619      	mov	r1, r3
 80036e8:	4839      	ldr	r0, [pc, #228]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 80036ea:	f002 fced 	bl	80060c8 <HAL_ADC_ConfigChannel>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <DPC_ADC_Default_Init+0x140>
 80036f4:	f001 fc18 	bl	8004f28 <Error_Handler>
 80036f8:	4b38      	ldr	r3, [pc, #224]	; (80037dc <DPC_ADC_Default_Init+0x224>)
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	230c      	movs	r3, #12
 80036fe:	607b      	str	r3, [r7, #4]
 8003700:	463b      	mov	r3, r7
 8003702:	4619      	mov	r1, r3
 8003704:	4832      	ldr	r0, [pc, #200]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003706:	f002 fcdf 	bl	80060c8 <HAL_ADC_ConfigChannel>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <DPC_ADC_Default_Init+0x15c>
 8003710:	f001 fc0a 	bl	8004f28 <Error_Handler>
 8003714:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <DPC_ADC_Default_Init+0x228>)
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	2312      	movs	r3, #18
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	463b      	mov	r3, r7
 800371e:	4619      	mov	r1, r3
 8003720:	482b      	ldr	r0, [pc, #172]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003722:	f002 fcd1 	bl	80060c8 <HAL_ADC_ConfigChannel>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <DPC_ADC_Default_Init+0x178>
 800372c:	f001 fbfc 	bl	8004f28 <Error_Handler>
 8003730:	4b2c      	ldr	r3, [pc, #176]	; (80037e4 <DPC_ADC_Default_Init+0x22c>)
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	2318      	movs	r3, #24
 8003736:	607b      	str	r3, [r7, #4]
 8003738:	463b      	mov	r3, r7
 800373a:	4619      	mov	r1, r3
 800373c:	4824      	ldr	r0, [pc, #144]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 800373e:	f002 fcc3 	bl	80060c8 <HAL_ADC_ConfigChannel>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <DPC_ADC_Default_Init+0x194>
 8003748:	f001 fbee 	bl	8004f28 <Error_Handler>
 800374c:	4b26      	ldr	r3, [pc, #152]	; (80037e8 <DPC_ADC_Default_Init+0x230>)
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	463b      	mov	r3, r7
 8003758:	4619      	mov	r1, r3
 800375a:	481d      	ldr	r0, [pc, #116]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 800375c:	f002 fcb4 	bl	80060c8 <HAL_ADC_ConfigChannel>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <DPC_ADC_Default_Init+0x1b2>
 8003766:	f001 fbdf 	bl	8004f28 <Error_Handler>
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <DPC_ADC_Default_Init+0x234>)
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003772:	607b      	str	r3, [r7, #4]
 8003774:	463b      	mov	r3, r7
 8003776:	4619      	mov	r1, r3
 8003778:	4815      	ldr	r0, [pc, #84]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 800377a:	f002 fca5 	bl	80060c8 <HAL_ADC_ConfigChannel>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <DPC_ADC_Default_Init+0x1d0>
 8003784:	f001 fbd0 	bl	8004f28 <Error_Handler>
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <DPC_ADC_Default_Init+0x238>)
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	463b      	mov	r3, r7
 8003794:	4619      	mov	r1, r3
 8003796:	480e      	ldr	r0, [pc, #56]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 8003798:	f002 fc96 	bl	80060c8 <HAL_ADC_ConfigChannel>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <DPC_ADC_Default_Init+0x1ee>
 80037a2:	f001 fbc1 	bl	8004f28 <Error_Handler>
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <DPC_ADC_Default_Init+0x23c>)
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	f44f 7389 	mov.w	r3, #274	; 0x112
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	463b      	mov	r3, r7
 80037b6:	4619      	mov	r1, r3
 80037b8:	4805      	ldr	r0, [pc, #20]	; (80037d0 <DPC_ADC_Default_Init+0x218>)
 80037ba:	f002 fc85 	bl	80060c8 <HAL_ADC_ConfigChannel>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <DPC_ADC_Default_Init+0x210>
 80037c4:	f001 fbb0 	bl	8004f28 <Error_Handler>
 80037c8:	bf00      	nop
 80037ca:	3748      	adds	r7, #72	; 0x48
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200001cc 	.word	0x200001cc
 80037d4:	7dc00000 	.word	0x7dc00000
 80037d8:	04300002 	.word	0x04300002
 80037dc:	08600004 	.word	0x08600004
 80037e0:	0c900008 	.word	0x0c900008
 80037e4:	10c00010 	.word	0x10c00010
 80037e8:	14f00020 	.word	0x14f00020
 80037ec:	19200040 	.word	0x19200040
 80037f0:	1d500080 	.word	0x1d500080
 80037f4:	c3210000 	.word	0xc3210000

080037f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc5;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b092      	sub	sp, #72	; 0x48
 80037fc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80037fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800380a:	f107 0320 	add.w	r3, r7, #32
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	60da      	str	r2, [r3, #12]
 8003818:	611a      	str	r2, [r3, #16]
 800381a:	615a      	str	r2, [r3, #20]
 800381c:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800381e:	463b      	mov	r3, r7
 8003820:	2220      	movs	r2, #32
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f008 ffc8 	bl	800c7ba <memset>

  /** Common config
  */
  hadc1.Instance = ADC1;
 800382a:	4b7a      	ldr	r3, [pc, #488]	; (8003a14 <MX_ADC1_Init+0x21c>)
 800382c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003830:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003832:	4b78      	ldr	r3, [pc, #480]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003834:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003838:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800383a:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <MX_ADC1_Init+0x21c>)
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003840:	4b74      	ldr	r3, [pc, #464]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003846:	4b73      	ldr	r3, [pc, #460]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003848:	2200      	movs	r2, #0
 800384a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800384c:	4b71      	ldr	r3, [pc, #452]	; (8003a14 <MX_ADC1_Init+0x21c>)
 800384e:	2201      	movs	r2, #1
 8003850:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003852:	4b70      	ldr	r3, [pc, #448]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003854:	2204      	movs	r2, #4
 8003856:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003858:	4b6e      	ldr	r3, [pc, #440]	; (8003a14 <MX_ADC1_Init+0x21c>)
 800385a:	2200      	movs	r2, #0
 800385c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800385e:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003860:	2201      	movs	r2, #1
 8003862:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 8;
 8003864:	4b6b      	ldr	r3, [pc, #428]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003866:	2208      	movs	r2, #8
 8003868:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800386a:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <MX_ADC1_Init+0x21c>)
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003872:	4b68      	ldr	r3, [pc, #416]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003874:	2200      	movs	r2, #0
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003878:	4b66      	ldr	r3, [pc, #408]	; (8003a14 <MX_ADC1_Init+0x21c>)
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800387e:	4b65      	ldr	r3, [pc, #404]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003886:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003888:	2200      	movs	r2, #0
 800388a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 800388c:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <MX_ADC1_Init+0x21c>)
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8003894:	4b5f      	ldr	r3, [pc, #380]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003896:	2208      	movs	r2, #8
 8003898:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 800389a:	4b5e      	ldr	r3, [pc, #376]	; (8003a14 <MX_ADC1_Init+0x21c>)
 800389c:	2260      	movs	r2, #96	; 0x60
 800389e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80038a0:	4b5c      	ldr	r3, [pc, #368]	; (8003a14 <MX_ADC1_Init+0x21c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80038a6:	4b5b      	ldr	r3, [pc, #364]	; (8003a14 <MX_ADC1_Init+0x21c>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80038ac:	4859      	ldr	r0, [pc, #356]	; (8003a14 <MX_ADC1_Init+0x21c>)
 80038ae:	f002 f95f 	bl	8005b70 <HAL_ADC_Init>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80038b8:	f001 fb36 	bl	8004f28 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80038bc:	2300      	movs	r3, #0
 80038be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80038c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038c4:	4619      	mov	r1, r3
 80038c6:	4853      	ldr	r0, [pc, #332]	; (8003a14 <MX_ADC1_Init+0x21c>)
 80038c8:	f003 fb4c 	bl	8006f64 <HAL_ADCEx_MultiModeConfigChannel>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80038d2:	f001 fb29 	bl	8004f28 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80038d6:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <MX_ADC1_Init+0x220>)
 80038d8:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80038da:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 80038e0:	4b4e      	ldr	r3, [pc, #312]	; (8003a1c <MX_ADC1_Init+0x224>)
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = DISABLE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 0x0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0x0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80038f6:	f107 0320 	add.w	r3, r7, #32
 80038fa:	4619      	mov	r1, r3
 80038fc:	4845      	ldr	r0, [pc, #276]	; (8003a14 <MX_ADC1_Init+0x21c>)
 80038fe:	f003 f821 	bl	8006944 <HAL_ADC_AnalogWDGConfig>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8003908:	f001 fb0e 	bl	8004f28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800390c:	4b43      	ldr	r3, [pc, #268]	; (8003a1c <MX_ADC1_Init+0x224>)
 800390e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003910:	2306      	movs	r3, #6
 8003912:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8003914:	2301      	movs	r3, #1
 8003916:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003918:	237f      	movs	r3, #127	; 0x7f
 800391a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800391c:	2304      	movs	r3, #4
 800391e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003924:	463b      	mov	r3, r7
 8003926:	4619      	mov	r1, r3
 8003928:	483a      	ldr	r0, [pc, #232]	; (8003a14 <MX_ADC1_Init+0x21c>)
 800392a:	f002 fbcd 	bl	80060c8 <HAL_ADC_ConfigChannel>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8003934:	f001 faf8 	bl	8004f28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003938:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <MX_ADC1_Init+0x228>)
 800393a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800393c:	230c      	movs	r3, #12
 800393e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003940:	463b      	mov	r3, r7
 8003942:	4619      	mov	r1, r3
 8003944:	4833      	ldr	r0, [pc, #204]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003946:	f002 fbbf 	bl	80060c8 <HAL_ADC_ConfigChannel>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8003950:	f001 faea 	bl	8004f28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003954:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <MX_ADC1_Init+0x22c>)
 8003956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003958:	2312      	movs	r3, #18
 800395a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800395c:	463b      	mov	r3, r7
 800395e:	4619      	mov	r1, r3
 8003960:	482c      	ldr	r0, [pc, #176]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003962:	f002 fbb1 	bl	80060c8 <HAL_ADC_ConfigChannel>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 800396c:	f001 fadc 	bl	8004f28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003970:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <MX_ADC1_Init+0x230>)
 8003972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003974:	2318      	movs	r3, #24
 8003976:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8003978:	2302      	movs	r3, #2
 800397a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800397c:	463b      	mov	r3, r7
 800397e:	4619      	mov	r1, r3
 8003980:	4824      	ldr	r0, [pc, #144]	; (8003a14 <MX_ADC1_Init+0x21c>)
 8003982:	f002 fba1 	bl	80060c8 <HAL_ADC_ConfigChannel>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 800398c:	f001 facc 	bl	8004f28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003990:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <MX_ADC1_Init+0x234>)
 8003992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003998:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800399a:	463b      	mov	r3, r7
 800399c:	4619      	mov	r1, r3
 800399e:	481d      	ldr	r0, [pc, #116]	; (8003a14 <MX_ADC1_Init+0x21c>)
 80039a0:	f002 fb92 	bl	80060c8 <HAL_ADC_ConfigChannel>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_ADC1_Init+0x1b6>
  {
    Error_Handler();
 80039aa:	f001 fabd 	bl	8004f28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80039ae:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <MX_ADC1_Init+0x238>)
 80039b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80039b2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80039b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039b8:	463b      	mov	r3, r7
 80039ba:	4619      	mov	r1, r3
 80039bc:	4815      	ldr	r0, [pc, #84]	; (8003a14 <MX_ADC1_Init+0x21c>)
 80039be:	f002 fb83 	bl	80060c8 <HAL_ADC_ConfigChannel>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_ADC1_Init+0x1d4>
  {
    Error_Handler();
 80039c8:	f001 faae 	bl	8004f28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <MX_ADC1_Init+0x23c>)
 80039ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80039d0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80039d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039d6:	463b      	mov	r3, r7
 80039d8:	4619      	mov	r1, r3
 80039da:	480e      	ldr	r0, [pc, #56]	; (8003a14 <MX_ADC1_Init+0x21c>)
 80039dc:	f002 fb74 	bl	80060c8 <HAL_ADC_ConfigChannel>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <MX_ADC1_Init+0x1f2>
  {
    Error_Handler();
 80039e6:	f001 fa9f 	bl	8004f28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80039ea:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <MX_ADC1_Init+0x224>)
 80039ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80039ee:	f44f 7389 	mov.w	r3, #274	; 0x112
 80039f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039f8:	463b      	mov	r3, r7
 80039fa:	4619      	mov	r1, r3
 80039fc:	4805      	ldr	r0, [pc, #20]	; (8003a14 <MX_ADC1_Init+0x21c>)
 80039fe:	f002 fb63 	bl	80060c8 <HAL_ADC_ConfigChannel>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_ADC1_Init+0x214>
  {
    Error_Handler();
 8003a08:	f001 fa8e 	bl	8004f28 <Error_Handler>
  }

}
 8003a0c:	bf00      	nop
 8003a0e:	3748      	adds	r7, #72	; 0x48
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	200001cc 	.word	0x200001cc
 8003a18:	7dc00000 	.word	0x7dc00000
 8003a1c:	04300002 	.word	0x04300002
 8003a20:	08600004 	.word	0x08600004
 8003a24:	0c900008 	.word	0x0c900008
 8003a28:	10c00010 	.word	0x10c00010
 8003a2c:	19200040 	.word	0x19200040
 8003a30:	1d500080 	.word	0x1d500080
 8003a34:	c3210000 	.word	0xc3210000

08003a38 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8003a3e:	463b      	mov	r3, r7
 8003a40:	2220      	movs	r2, #32
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f008 feb8 	bl	800c7ba <memset>

  /** Common config
  */
  hadc5.Instance = ADC5;
 8003a4a:	4b2b      	ldr	r3, [pc, #172]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a4c:	4a2b      	ldr	r2, [pc, #172]	; (8003afc <MX_ADC5_Init+0xc4>)
 8003a4e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a50:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a52:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a56:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8003a58:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a5e:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8003a64:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003a6a:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a70:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a72:	2204      	movs	r2, #4
 8003a74:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a96:	4b18      	ldr	r3, [pc, #96]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8003a9c:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003aa4:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8003aaa:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8003ab2:	4811      	ldr	r0, [pc, #68]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003ab4:	f002 f85c 	bl	8005b70 <HAL_ADC_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8003abe:	f001 fa33 	bl	8004f28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <MX_ADC5_Init+0xc8>)
 8003ac4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ac6:	2306      	movs	r3, #6
 8003ac8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ace:	237f      	movs	r3, #127	; 0x7f
 8003ad0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8003ada:	463b      	mov	r3, r7
 8003adc:	4619      	mov	r1, r3
 8003ade:	4806      	ldr	r0, [pc, #24]	; (8003af8 <MX_ADC5_Init+0xc0>)
 8003ae0:	f002 faf2 	bl	80060c8 <HAL_ADC_ConfigChannel>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8003aea:	f001 fa1d 	bl	8004f28 <Error_Handler>
  }

}
 8003aee:	bf00      	nop
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000160 	.word	0x20000160
 8003afc:	50000600 	.word	0x50000600
 8003b00:	90c00010 	.word	0x90c00010

08003b04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08c      	sub	sp, #48	; 0x30
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0c:	f107 031c 	add.w	r3, r7, #28
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b24:	f040 8082 	bne.w	8003c2c <HAL_ADC_MspInit+0x128>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003b28:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2c:	4a4a      	ldr	r2, [pc, #296]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003b2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b34:	4b48      	ldr	r3, [pc, #288]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b40:	4b45      	ldr	r3, [pc, #276]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b44:	4a44      	ldr	r2, [pc, #272]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003b46:	f043 0304 	orr.w	r3, r3, #4
 8003b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b4c:	4b42      	ldr	r3, [pc, #264]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b58:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5c:	4a3e      	ldr	r2, [pc, #248]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b64:	4b3c      	ldr	r3, [pc, #240]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b70:	4b39      	ldr	r3, [pc, #228]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b74:	4a38      	ldr	r2, [pc, #224]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003b76:	f043 0302 	orr.w	r3, r3, #2
 8003b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b7c:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_VDC__Pin|ADC_VDC_C1_Pin;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b94:	f107 031c 	add.w	r3, r7, #28
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4830      	ldr	r0, [pc, #192]	; (8003c5c <HAL_ADC_MspInit+0x158>)
 8003b9c:	f003 ffd6 	bl	8007b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IA_Pin|ADC_IB_Pin|ADC_VA_Pin|ADC_VB_Pin;
 8003ba0:	230f      	movs	r3, #15
 8003ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bac:	f107 031c 	add.w	r3, r7, #28
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bb6:	f003 ffc9 	bl	8007b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VC_Pin;
 8003bba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VC_GPIO_Port, &GPIO_InitStruct);
 8003bc8:	f107 031c 	add.w	r3, r7, #28
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4824      	ldr	r0, [pc, #144]	; (8003c60 <HAL_ADC_MspInit+0x15c>)
 8003bd0:	f003 ffbc 	bl	8007b4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8003bd4:	4b23      	ldr	r3, [pc, #140]	; (8003c64 <HAL_ADC_MspInit+0x160>)
 8003bd6:	4a24      	ldr	r2, [pc, #144]	; (8003c68 <HAL_ADC_MspInit+0x164>)
 8003bd8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <HAL_ADC_MspInit+0x160>)
 8003bdc:	2205      	movs	r2, #5
 8003bde:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003be0:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <HAL_ADC_MspInit+0x160>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003be6:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <HAL_ADC_MspInit+0x160>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <HAL_ADC_MspInit+0x160>)
 8003bee:	2280      	movs	r2, #128	; 0x80
 8003bf0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bf2:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <HAL_ADC_MspInit+0x160>)
 8003bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003bfa:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <HAL_ADC_MspInit+0x160>)
 8003bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c02:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <HAL_ADC_MspInit+0x160>)
 8003c04:	2220      	movs	r2, #32
 8003c06:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c08:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <HAL_ADC_MspInit+0x160>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c0e:	4815      	ldr	r0, [pc, #84]	; (8003c64 <HAL_ADC_MspInit+0x160>)
 8003c10:	f003 fbee 	bl	80073f0 <HAL_DMA_Init>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8003c1a:	f001 f985 	bl	8004f28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a10      	ldr	r2, [pc, #64]	; (8003c64 <HAL_ADC_MspInit+0x160>)
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
 8003c24:	4a0f      	ldr	r2, [pc, #60]	; (8003c64 <HAL_ADC_MspInit+0x160>)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_RCC_ADC345_CLK_ENABLE();
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8003c2a:	e010      	b.n	8003c4e <HAL_ADC_MspInit+0x14a>
  else if(adcHandle->Instance==ADC5)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0e      	ldr	r2, [pc, #56]	; (8003c6c <HAL_ADC_MspInit+0x168>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d10b      	bne.n	8003c4e <HAL_ADC_MspInit+0x14a>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	4a07      	ldr	r2, [pc, #28]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_ADC_MspInit+0x154>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
}
 8003c4e:	bf00      	nop
 8003c50:	3730      	adds	r7, #48	; 0x30
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	48000800 	.word	0x48000800
 8003c60:	48000400 	.word	0x48000400
 8003c64:	20000238 	.word	0x20000238
 8003c68:	40020044 	.word	0x40020044
 8003c6c:	50000600 	.word	0x50000600

08003c70 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0

  hcordic.Instance = CORDIC;
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <MX_CORDIC_Init+0x20>)
 8003c76:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <MX_CORDIC_Init+0x24>)
 8003c78:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8003c7a:	4805      	ldr	r0, [pc, #20]	; (8003c90 <MX_CORDIC_Init+0x20>)
 8003c7c:	f003 fa76 	bl	800716c <HAL_CORDIC_Init>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8003c86:	f001 f94f 	bl	8004f28 <Error_Handler>
  }

}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000298 	.word	0x20000298
 8003c94:	40020c00 	.word	0x40020c00

08003c98 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <HAL_CORDIC_MspInit+0x38>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d10b      	bne.n	8003cc2 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <HAL_CORDIC_MspInit+0x3c>)
 8003cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <HAL_CORDIC_MspInit+0x3c>)
 8003cb0:	f043 0308 	orr.w	r3, r3, #8
 8003cb4:	6493      	str	r3, [r2, #72]	; 0x48
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <HAL_CORDIC_MspInit+0x3c>)
 8003cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40020c00 	.word	0x40020c00
 8003cd4:	40021000 	.word	0x40021000

08003cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <MX_DMA_Init+0x90>)
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce2:	4a21      	ldr	r2, [pc, #132]	; (8003d68 <MX_DMA_Init+0x90>)
 8003ce4:	f043 0304 	orr.w	r3, r3, #4
 8003ce8:	6493      	str	r3, [r2, #72]	; 0x48
 8003cea:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <MX_DMA_Init+0x90>)
 8003cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	607b      	str	r3, [r7, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003cf6:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <MX_DMA_Init+0x90>)
 8003cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfa:	4a1b      	ldr	r2, [pc, #108]	; (8003d68 <MX_DMA_Init+0x90>)
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	6493      	str	r3, [r2, #72]	; 0x48
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <MX_DMA_Init+0x90>)
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2100      	movs	r1, #0
 8003d12:	200b      	movs	r0, #11
 8003d14:	f003 fb37 	bl	8007386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003d18:	200b      	movs	r0, #11
 8003d1a:	f003 fb4e 	bl	80073ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2100      	movs	r1, #0
 8003d22:	200c      	movs	r0, #12
 8003d24:	f003 fb2f 	bl	8007386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003d28:	200c      	movs	r0, #12
 8003d2a:	f003 fb46 	bl	80073ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2100      	movs	r1, #0
 8003d32:	200d      	movs	r0, #13
 8003d34:	f003 fb27 	bl	8007386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003d38:	200d      	movs	r0, #13
 8003d3a:	f003 fb3e 	bl	80073ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2100      	movs	r1, #0
 8003d42:	200e      	movs	r0, #14
 8003d44:	f003 fb1f 	bl	8007386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003d48:	200e      	movs	r0, #14
 8003d4a:	f003 fb36 	bl	80073ba <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2100      	movs	r1, #0
 8003d52:	205e      	movs	r0, #94	; 0x5e
 8003d54:	f003 fb17 	bl	8007386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8003d58:	205e      	movs	r0, #94	; 0x5e
 8003d5a:	f003 fb2e 	bl	80073ba <HAL_NVIC_EnableIRQ>

}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000

08003d6c <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0

  hfmac.Instance = FMAC;
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <MX_FMAC_Init+0x20>)
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <MX_FMAC_Init+0x24>)
 8003d74:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8003d76:	4805      	ldr	r0, [pc, #20]	; (8003d8c <MX_FMAC_Init+0x20>)
 8003d78:	f003 fe3c 	bl	80079f4 <HAL_FMAC_Init>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8003d82:	f001 f8d1 	bl	8004f28 <Error_Handler>
  }

}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	200002c0 	.word	0x200002c0
 8003d90:	40021400 	.word	0x40021400

08003d94 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <HAL_FMAC_MspInit+0x38>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10b      	bne.n	8003dbe <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <HAL_FMAC_MspInit+0x3c>)
 8003da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003daa:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <HAL_FMAC_MspInit+0x3c>)
 8003dac:	f043 0310 	orr.w	r3, r3, #16
 8003db0:	6493      	str	r3, [r2, #72]	; 0x48
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <HAL_FMAC_MspInit+0x3c>)
 8003db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40021400 	.word	0x40021400
 8003dd0:	40021000 	.word	0x40021000

08003dd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dda:	f107 030c 	add.w	r3, r7, #12
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	609a      	str	r2, [r3, #8]
 8003de6:	60da      	str	r2, [r3, #12]
 8003de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dea:	4b28      	ldr	r3, [pc, #160]	; (8003e8c <MX_GPIO_Init+0xb8>)
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	4a27      	ldr	r2, [pc, #156]	; (8003e8c <MX_GPIO_Init+0xb8>)
 8003df0:	f043 0304 	orr.w	r3, r3, #4
 8003df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003df6:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <MX_GPIO_Init+0xb8>)
 8003df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e02:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <MX_GPIO_Init+0xb8>)
 8003e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e06:	4a21      	ldr	r2, [pc, #132]	; (8003e8c <MX_GPIO_Init+0xb8>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e0e:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <MX_GPIO_Init+0xb8>)
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	607b      	str	r3, [r7, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e1a:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <MX_GPIO_Init+0xb8>)
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1e:	4a1b      	ldr	r2, [pc, #108]	; (8003e8c <MX_GPIO_Init+0xb8>)
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e26:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <MX_GPIO_Init+0xb8>)
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_HL2_Pin|LED_HL1_Pin|Relay_Pin, GPIO_PIN_RESET);
 8003e32:	2200      	movs	r2, #0
 8003e34:	21d0      	movs	r1, #208	; 0xd0
 8003e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e3a:	f004 f809 	bl	8007e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_RESET);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2120      	movs	r1, #32
 8003e42:	4813      	ldr	r0, [pc, #76]	; (8003e90 <MX_GPIO_Init+0xbc>)
 8003e44:	f004 f804 	bl	8007e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_HL2_Pin|LED_HL1_Pin|Relay_Pin;
 8003e48:	23d0      	movs	r3, #208	; 0xd0
 8003e4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e58:	f107 030c 	add.w	r3, r7, #12
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e62:	f003 fe73 	bl	8007b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PFC_SW_SRC_Pin;
 8003e66:	2320      	movs	r3, #32
 8003e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PFC_SW_SRC_GPIO_Port, &GPIO_InitStruct);
 8003e76:	f107 030c 	add.w	r3, r7, #12
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4804      	ldr	r0, [pc, #16]	; (8003e90 <MX_GPIO_Init+0xbc>)
 8003e7e:	f003 fe65 	bl	8007b4c <HAL_GPIO_Init>

}
 8003e82:	bf00      	nop
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	48000800 	.word	0x48000800

08003e94 <MX_HRTIM1_Init>:
DMA_HandleTypeDef hdma_hrtim1_b;
DMA_HandleTypeDef hdma_hrtim1_c;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b0b6      	sub	sp, #216	; 0xd8
 8003e98:	af00      	add	r7, sp, #0
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 8003e9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
 8003ea6:	60da      	str	r2, [r3, #12]
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 8003ea8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8003eb4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8003ec2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	609a      	str	r2, [r3, #8]
 8003ece:	60da      	str	r2, [r3, #12]
 8003ed0:	611a      	str	r2, [r3, #16]
 8003ed2:	615a      	str	r2, [r3, #20]
 8003ed4:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8003ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003eda:	2260      	movs	r2, #96	; 0x60
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f008 fc6b 	bl	800c7ba <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8003ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8003ef0:	1d3b      	adds	r3, r7, #4
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f008 fc5f 	bl	800c7ba <memset>

  hhrtim1.Instance = HRTIM1;
 8003efc:	4bd0      	ldr	r3, [pc, #832]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003efe:	4ad1      	ldr	r2, [pc, #836]	; (8004244 <MX_HRTIM1_Init+0x3b0>)
 8003f00:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_FLT1|HRTIM_IT_FLT3;
 8003f02:	4bcf      	ldr	r3, [pc, #828]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003f04:	2205      	movs	r2, #5
 8003f06:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8003f08:	4bcd      	ldr	r3, [pc, #820]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8003f0e:	48cc      	ldr	r0, [pc, #816]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003f10:	f003 ffb6 	bl	8007e80 <HAL_HRTIM_Init>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_HRTIM1_Init+0x8a>
  {
    Error_Handler();
 8003f1a:	f001 f805 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8003f1e:	210c      	movs	r1, #12
 8003f20:	48c7      	ldr	r0, [pc, #796]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003f22:	f004 f87d 	bl	8008020 <HAL_HRTIM_DLLCalibrationStart>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_HRTIM1_Init+0x9c>
  {
    Error_Handler();
 8003f2c:	f000 fffc 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8003f30:	210a      	movs	r1, #10
 8003f32:	48c3      	ldr	r0, [pc, #780]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003f34:	f004 f8cc 	bl	80080d0 <HAL_HRTIM_PollForDLLCalibration>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <MX_HRTIM1_Init+0xae>
  {
    Error_Handler();
 8003f3e:	f000 fff3 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 8003f42:	2100      	movs	r1, #0
 8003f44:	48be      	ldr	r0, [pc, #760]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003f46:	f004 fadf 	bl	8008508 <HAL_HRTIM_FaultPrescalerConfig>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_HRTIM1_Init+0xc0>
  {
    Error_Handler();
 8003f50:	f000 ffea 	bl	8004f28 <Error_Handler>
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultCfg) != HAL_OK)
 8003f6c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003f70:	461a      	mov	r2, r3
 8003f72:	2101      	movs	r1, #1
 8003f74:	48b2      	ldr	r0, [pc, #712]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003f76:	f004 f907 	bl	8008188 <HAL_HRTIM_FaultConfig>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_HRTIM1_Init+0xf0>
  {
    Error_Handler();
 8003f80:	f000 ffd2 	bl	8004f28 <Error_Handler>
//  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
//  {
//    Error_Handler();
//  }

  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_1, HRTIM_FAULTMODECTL_ENABLED);
 8003f84:	2201      	movs	r2, #1
 8003f86:	2101      	movs	r1, #1
 8003f88:	48ad      	ldr	r0, [pc, #692]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003f8a:	f004 fcdb 	bl	8008944 <HAL_HRTIM_FaultModeCtl>
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 8003f8e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f92:	461a      	mov	r2, r3
 8003f94:	2104      	movs	r1, #4
 8003f96:	48aa      	ldr	r0, [pc, #680]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003f98:	f004 fbdc 	bl	8008754 <HAL_HRTIM_FaultCounterConfig>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <MX_HRTIM1_Init+0x112>
  {
    Error_Handler();
 8003fa2:	f000 ffc1 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 8003fa6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003faa:	461a      	mov	r2, r3
 8003fac:	2104      	movs	r1, #4
 8003fae:	48a4      	ldr	r0, [pc, #656]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003fb0:	f004 fae4 	bl	800857c <HAL_HRTIM_FaultBlankingConfigAndEnable>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_HRTIM1_Init+0x12a>
  {
    Error_Handler();
 8003fba:	f000 ffb5 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_3, &pFaultBlkCfg) != HAL_OK)
 8003fbe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2104      	movs	r1, #4
 8003fc6:	489e      	ldr	r0, [pc, #632]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003fc8:	f004 fad8 	bl	800857c <HAL_HRTIM_FaultBlankingConfigAndEnable>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_HRTIM1_Init+0x142>
  {
    Error_Handler();
 8003fd2:	f000 ffa9 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_3, &pFaultCfg) != HAL_OK)
 8003fd6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2104      	movs	r1, #4
 8003fde:	4898      	ldr	r0, [pc, #608]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003fe0:	f004 f8d2 	bl	8008188 <HAL_HRTIM_FaultConfig>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <MX_HRTIM1_Init+0x15a>
  {
    Error_Handler();
 8003fea:	f000 ff9d 	bl	8004f28 <Error_Handler>
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_3, HRTIM_FAULTMODECTL_ENABLED);
 8003fee:	2201      	movs	r2, #1
 8003ff0:	2104      	movs	r1, #4
 8003ff2:	4893      	ldr	r0, [pc, #588]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8003ff4:	f004 fca6 	bl	8008944 <HAL_HRTIM_FaultModeCtl>
  pTimeBaseCfg.Period = 34000;
 8003ff8:	f248 43d0 	movw	r3, #34000	; 0x84d0
 8003ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 8004006:	2302      	movs	r3, #2
 8004008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800400c:	2308      	movs	r3, #8
 800400e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8004012:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004016:	461a      	mov	r2, r3
 8004018:	2100      	movs	r1, #0
 800401a:	4889      	ldr	r0, [pc, #548]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 800401c:	f004 f88c 	bl	8008138 <HAL_HRTIM_TimeBaseConfig>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <MX_HRTIM1_Init+0x196>
  {
    Error_Handler();
 8004026:	f000 ff7f 	bl	8004f28 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8004042:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004046:	461a      	mov	r2, r3
 8004048:	2100      	movs	r1, #0
 800404a:	487d      	ldr	r0, [pc, #500]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 800404c:	f004 fd6e 	bl	8008b2c <HAL_HRTIM_WaveformTimerControl>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <MX_HRTIM1_Init+0x1c6>
  {
    Error_Handler();
 8004056:	f000 ff67 	bl	8004f28 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800405a:	2300      	movs	r3, #0
 800405c:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST;
 800405e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004062:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMASrcAddress = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMADstAddress = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.DMASize = 0x1;
 800406c:	2301      	movs	r3, #1
 800406e:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8004070:	2300      	movs	r3, #0
 8004072:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8004074:	2300      	movs	r3, #0
 8004076:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8004078:	2300      	movs	r3, #0
 800407a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800407c:	2300      	movs	r3, #0
 800407e:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8004080:	2300      	movs	r3, #0
 8004082:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8004084:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004088:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800408a:	2300      	movs	r3, #0
 800408c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800408e:	2300      	movs	r3, #0
 8004090:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8004092:	2300      	movs	r3, #0
 8004094:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8004096:	2300      	movs	r3, #0
 8004098:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1|HRTIM_TIMFAULTENABLE_FAULT3;
 800409a:	2305      	movs	r3, #5
 800409c:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800409e:	2300      	movs	r3, #0
 80040a0:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80040a2:	2300      	movs	r3, #0
 80040a4:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80040a6:	2300      	movs	r3, #0
 80040a8:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 80040b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80040ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80040be:	2300      	movs	r3, #0
 80040c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80040c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040c8:	461a      	mov	r2, r3
 80040ca:	2100      	movs	r1, #0
 80040cc:	485c      	ldr	r0, [pc, #368]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 80040ce:	f004 fcbb 	bl	8008a48 <HAL_HRTIM_WaveformTimerConfig>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_HRTIM1_Init+0x248>
  {
    Error_Handler();
 80040d8:	f000 ff26 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80040dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040e0:	461a      	mov	r2, r3
 80040e2:	2101      	movs	r1, #1
 80040e4:	4856      	ldr	r0, [pc, #344]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 80040e6:	f004 fcaf 	bl	8008a48 <HAL_HRTIM_WaveformTimerConfig>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <MX_HRTIM1_Init+0x260>
  {
    Error_Handler();
 80040f0:	f000 ff1a 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 80040f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040f8:	461a      	mov	r2, r3
 80040fa:	2102      	movs	r1, #2
 80040fc:	4850      	ldr	r0, [pc, #320]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 80040fe:	f004 fca3 	bl	8008a48 <HAL_HRTIM_WaveformTimerConfig>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_HRTIM1_Init+0x278>
  {
    Error_Handler();
 8004108:	f000 ff0e 	bl	8004f28 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x5000;
 800410c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8004112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004116:	2201      	movs	r2, #1
 8004118:	2100      	movs	r1, #0
 800411a:	4849      	ldr	r0, [pc, #292]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 800411c:	f004 fd3a 	bl	8008b94 <HAL_HRTIM_WaveformCompareConfig>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_HRTIM1_Init+0x296>
  {
    Error_Handler();
 8004126:	f000 feff 	bl	8004f28 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 800412a:	2305      	movs	r3, #5
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800412e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004132:	2204      	movs	r2, #4
 8004134:	2100      	movs	r1, #0
 8004136:	4842      	ldr	r0, [pc, #264]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8004138:	f004 fd2c 	bl	8008b94 <HAL_HRTIM_WaveformCompareConfig>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_HRTIM1_Init+0x2b2>
  {
    Error_Handler();
 8004142:	f000 fef1 	bl	8004f28 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8004146:	2300      	movs	r3, #0
 8004148:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 800414a:	2304      	movs	r3, #4
 800414c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 800414e:	2308      	movs	r3, #8
 8004150:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_INACTIVE;
 800415a:	2320      	movs	r3, #32
 800415c:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8004162:	2300      	movs	r3, #0
 8004164:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8004166:	1d3b      	adds	r3, r7, #4
 8004168:	2201      	movs	r2, #1
 800416a:	2100      	movs	r1, #0
 800416c:	4834      	ldr	r0, [pc, #208]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 800416e:	f004 fe7f 	bl	8008e70 <HAL_HRTIM_WaveformOutputConfig>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MX_HRTIM1_Init+0x2e8>
  {
    Error_Handler();
 8004178:	f000 fed6 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	2204      	movs	r2, #4
 8004180:	2101      	movs	r1, #1
 8004182:	482f      	ldr	r0, [pc, #188]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8004184:	f004 fe74 	bl	8008e70 <HAL_HRTIM_WaveformOutputConfig>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <MX_HRTIM1_Init+0x2fe>
  {
    Error_Handler();
 800418e:	f000 fecb 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	2210      	movs	r2, #16
 8004196:	2102      	movs	r1, #2
 8004198:	4829      	ldr	r0, [pc, #164]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 800419a:	f004 fe69 	bl	8008e70 <HAL_HRTIM_WaveformOutputConfig>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <MX_HRTIM1_Init+0x314>
  {
    Error_Handler();
 80041a4:	f000 fec0 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80041a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80041ac:	461a      	mov	r2, r3
 80041ae:	2101      	movs	r1, #1
 80041b0:	4823      	ldr	r0, [pc, #140]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 80041b2:	f003 ffc1 	bl	8008138 <HAL_HRTIM_TimeBaseConfig>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_HRTIM1_Init+0x32c>
  {
    Error_Handler();
 80041bc:	f000 feb4 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 80041c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80041c4:	461a      	mov	r2, r3
 80041c6:	2101      	movs	r1, #1
 80041c8:	481d      	ldr	r0, [pc, #116]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 80041ca:	f004 fcaf 	bl	8008b2c <HAL_HRTIM_WaveformTimerControl>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <MX_HRTIM1_Init+0x344>
  {
    Error_Handler();
 80041d4:	f000 fea8 	bl	8004f28 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x2000;
 80041d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80041de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041e2:	2201      	movs	r2, #1
 80041e4:	2101      	movs	r1, #1
 80041e6:	4816      	ldr	r0, [pc, #88]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 80041e8:	f004 fcd4 	bl	8008b94 <HAL_HRTIM_WaveformCompareConfig>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_HRTIM1_Init+0x362>
  {
    Error_Handler();
 80041f2:	f000 fe99 	bl	8004f28 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 80041f6:	2305      	movs	r3, #5
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80041fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041fe:	2204      	movs	r2, #4
 8004200:	2101      	movs	r1, #1
 8004202:	480f      	ldr	r0, [pc, #60]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8004204:	f004 fcc6 	bl	8008b94 <HAL_HRTIM_WaveformCompareConfig>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_HRTIM1_Init+0x37e>
  {
    Error_Handler();
 800420e:	f000 fe8b 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8004212:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004216:	461a      	mov	r2, r3
 8004218:	2102      	movs	r1, #2
 800421a:	4809      	ldr	r0, [pc, #36]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 800421c:	f003 ff8c 	bl	8008138 <HAL_HRTIM_TimeBaseConfig>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <MX_HRTIM1_Init+0x396>
  {
    Error_Handler();
 8004226:	f000 fe7f 	bl	8004f28 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 800422a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800422e:	461a      	mov	r2, r3
 8004230:	2102      	movs	r1, #2
 8004232:	4803      	ldr	r0, [pc, #12]	; (8004240 <MX_HRTIM1_Init+0x3ac>)
 8004234:	f004 fc7a 	bl	8008b2c <HAL_HRTIM_WaveformTimerControl>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d006      	beq.n	800424c <MX_HRTIM1_Init+0x3b8>
 800423e:	e003      	b.n	8004248 <MX_HRTIM1_Init+0x3b4>
 8004240:	20000358 	.word	0x20000358
 8004244:	40016800 	.word	0x40016800
  {
    Error_Handler();
 8004248:	f000 fe6e 	bl	8004f28 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x8000;
 800424c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8004252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004256:	2201      	movs	r2, #1
 8004258:	2102      	movs	r1, #2
 800425a:	480e      	ldr	r0, [pc, #56]	; (8004294 <MX_HRTIM1_Init+0x400>)
 800425c:	f004 fc9a 	bl	8008b94 <HAL_HRTIM_WaveformCompareConfig>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <MX_HRTIM1_Init+0x3d6>
  {
    Error_Handler();
 8004266:	f000 fe5f 	bl	8004f28 <Error_Handler>
  }
  pCompareCfg.CompareValue = 5;
 800426a:	2305      	movs	r3, #5
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800426e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004272:	2204      	movs	r2, #4
 8004274:	2102      	movs	r1, #2
 8004276:	4807      	ldr	r0, [pc, #28]	; (8004294 <MX_HRTIM1_Init+0x400>)
 8004278:	f004 fc8c 	bl	8008b94 <HAL_HRTIM_WaveformCompareConfig>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <MX_HRTIM1_Init+0x3f2>
  {
    Error_Handler();
 8004282:	f000 fe51 	bl	8004f28 <Error_Handler>
  }
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8004286:	4803      	ldr	r0, [pc, #12]	; (8004294 <MX_HRTIM1_Init+0x400>)
 8004288:	f000 f94a 	bl	8004520 <HAL_HRTIM_MspPostInit>

}
 800428c:	bf00      	nop
 800428e:	37d8      	adds	r7, #216	; 0xd8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000358 	.word	0x20000358

08004298 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08e      	sub	sp, #56	; 0x38
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	605a      	str	r2, [r3, #4]
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	60da      	str	r2, [r3, #12]
 80042ae:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	60da      	str	r2, [r3, #12]
  if(hrtimHandle->Instance==HRTIM1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a8e      	ldr	r2, [pc, #568]	; (80044fc <HAL_HRTIM_MspInit+0x264>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	f040 8115 	bne.w	80044f4 <HAL_HRTIM_MspInit+0x25c>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80042ca:	4b8d      	ldr	r3, [pc, #564]	; (8004500 <HAL_HRTIM_MspInit+0x268>)
 80042cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ce:	4a8c      	ldr	r2, [pc, #560]	; (8004500 <HAL_HRTIM_MspInit+0x268>)
 80042d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042d4:	6613      	str	r3, [r2, #96]	; 0x60
 80042d6:	4b8a      	ldr	r3, [pc, #552]	; (8004500 <HAL_HRTIM_MspInit+0x268>)
 80042d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042e2:	4b87      	ldr	r3, [pc, #540]	; (8004500 <HAL_HRTIM_MspInit+0x268>)
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	4a86      	ldr	r2, [pc, #536]	; (8004500 <HAL_HRTIM_MspInit+0x268>)
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042ee:	4b84      	ldr	r3, [pc, #528]	; (8004500 <HAL_HRTIM_MspInit+0x268>)
 80042f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fa:	4b81      	ldr	r3, [pc, #516]	; (8004500 <HAL_HRTIM_MspInit+0x268>)
 80042fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fe:	4a80      	ldr	r2, [pc, #512]	; (8004500 <HAL_HRTIM_MspInit+0x268>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004306:	4b7e      	ldr	r3, [pc, #504]	; (8004500 <HAL_HRTIM_MspInit+0x268>)
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB10     ------> HRTIM1_FLT3
    PA12     ------> HRTIM1_FLT1
    */
    GPIO_InitStruct.Pin = OCP_A_Pin;
 8004312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004318:	2302      	movs	r3, #2
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431c:	2300      	movs	r3, #0
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004320:	2300      	movs	r3, #0
 8004322:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8004324:	230d      	movs	r3, #13
 8004326:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OCP_A_GPIO_Port, &GPIO_InitStruct);
 8004328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800432c:	4619      	mov	r1, r3
 800432e:	4875      	ldr	r0, [pc, #468]	; (8004504 <HAL_HRTIM_MspInit+0x26c>)
 8004330:	f003 fc0c 	bl	8007b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AC_FAULT_Pin;
 8004334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433a:	2302      	movs	r3, #2
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433e:	2300      	movs	r3, #0
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004342:	2300      	movs	r3, #0
 8004344:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8004346:	230d      	movs	r3, #13
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AC_FAULT_GPIO_Port, &GPIO_InitStruct);
 800434a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800434e:	4619      	mov	r1, r3
 8004350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004354:	f003 fbfa 	bl	8007b4c <HAL_GPIO_Init>

    /* HRTIM1 DMA Init */
    /* HRTIM1_A Init */
    hdma_hrtim1_a.Instance = DMA1_Channel1;
 8004358:	4b6b      	ldr	r3, [pc, #428]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 800435a:	4a6c      	ldr	r2, [pc, #432]	; (800450c <HAL_HRTIM_MspInit+0x274>)
 800435c:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_a.Init.Request = DMA_REQUEST_HRTIM1_A;
 800435e:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 8004360:	2260      	movs	r2, #96	; 0x60
 8004362:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004364:	4b68      	ldr	r3, [pc, #416]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 8004366:	2210      	movs	r2, #16
 8004368:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800436a:	4b67      	ldr	r3, [pc, #412]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 800436c:	2200      	movs	r2, #0
 800436e:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_a.Init.MemInc = DMA_MINC_ENABLE;
 8004370:	4b65      	ldr	r3, [pc, #404]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 8004372:	2280      	movs	r2, #128	; 0x80
 8004374:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004376:	4b64      	ldr	r3, [pc, #400]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 8004378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800437c:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800437e:	4b62      	ldr	r3, [pc, #392]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 8004380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004384:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_a.Init.Mode = DMA_CIRCULAR;
 8004386:	4b60      	ldr	r3, [pc, #384]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 8004388:	2220      	movs	r2, #32
 800438a:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_a.Init.Priority = DMA_PRIORITY_HIGH;
 800438c:	4b5e      	ldr	r3, [pc, #376]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 800438e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004392:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_a) != HAL_OK)
 8004394:	485c      	ldr	r0, [pc, #368]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 8004396:	f003 f82b 	bl	80073f0 <HAL_DMA_Init>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_HRTIM_MspInit+0x10c>
    {
      Error_Handler();
 80043a0:	f000 fdc2 	bl	8004f28 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 80043ac:	2300      	movs	r3, #0
 80043ae:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 80043b0:	2301      	movs	r3, #1
 80043b2:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 80043b4:	2301      	movs	r3, #1
 80043b6:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_a, &pSyncConfig) != HAL_OK)
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	4619      	mov	r1, r3
 80043be:	4852      	ldr	r0, [pc, #328]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 80043c0:	f003 fa88 	bl	80078d4 <HAL_DMAEx_ConfigMuxSync>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_HRTIM_MspInit+0x136>
    {
      Error_Handler();
 80043ca:	f000 fdad 	bl	8004f28 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerA,hdma_hrtim1_a);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a4d      	ldr	r2, [pc, #308]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 80043d2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80043d6:	4a4c      	ldr	r2, [pc, #304]	; (8004508 <HAL_HRTIM_MspInit+0x270>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1_B Init */
    hdma_hrtim1_b.Instance = DMA1_Channel2;
 80043dc:	4b4c      	ldr	r3, [pc, #304]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 80043de:	4a4d      	ldr	r2, [pc, #308]	; (8004514 <HAL_HRTIM_MspInit+0x27c>)
 80043e0:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_b.Init.Request = DMA_REQUEST_HRTIM1_B;
 80043e2:	4b4b      	ldr	r3, [pc, #300]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 80043e4:	2261      	movs	r2, #97	; 0x61
 80043e6:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043e8:	4b49      	ldr	r3, [pc, #292]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 80043ea:	2210      	movs	r2, #16
 80043ec:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ee:	4b48      	ldr	r3, [pc, #288]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_b.Init.MemInc = DMA_MINC_ENABLE;
 80043f4:	4b46      	ldr	r3, [pc, #280]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 80043f6:	2280      	movs	r2, #128	; 0x80
 80043f8:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80043fa:	4b45      	ldr	r3, [pc, #276]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 80043fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004400:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004402:	4b43      	ldr	r3, [pc, #268]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 8004404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004408:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_b.Init.Mode = DMA_CIRCULAR;
 800440a:	4b41      	ldr	r3, [pc, #260]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 800440c:	2220      	movs	r2, #32
 800440e:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8004410:	4b3f      	ldr	r3, [pc, #252]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 8004412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004416:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_b) != HAL_OK)
 8004418:	483d      	ldr	r0, [pc, #244]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 800441a:	f002 ffe9 	bl	80073f0 <HAL_DMA_Init>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_HRTIM_MspInit+0x190>
    {
      Error_Handler();
 8004424:	f000 fd80 	bl	8004f28 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8004430:	2300      	movs	r3, #0
 8004432:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8004434:	2301      	movs	r3, #1
 8004436:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8004438:	2301      	movs	r3, #1
 800443a:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_b, &pSyncConfig) != HAL_OK)
 800443c:	f107 0314 	add.w	r3, r7, #20
 8004440:	4619      	mov	r1, r3
 8004442:	4833      	ldr	r0, [pc, #204]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 8004444:	f003 fa46 	bl	80078d4 <HAL_DMAEx_ConfigMuxSync>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_HRTIM_MspInit+0x1ba>
    {
      Error_Handler();
 800444e:	f000 fd6b 	bl	8004f28 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerB,hdma_hrtim1_b);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a2e      	ldr	r2, [pc, #184]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 8004456:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800445a:	4a2d      	ldr	r2, [pc, #180]	; (8004510 <HAL_HRTIM_MspInit+0x278>)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1_C Init */
    hdma_hrtim1_c.Instance = DMA1_Channel3;
 8004460:	4b2d      	ldr	r3, [pc, #180]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 8004462:	4a2e      	ldr	r2, [pc, #184]	; (800451c <HAL_HRTIM_MspInit+0x284>)
 8004464:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_c.Init.Request = DMA_REQUEST_HRTIM1_C;
 8004466:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 8004468:	2262      	movs	r2, #98	; 0x62
 800446a:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_c.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800446c:	4b2a      	ldr	r3, [pc, #168]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 800446e:	2210      	movs	r2, #16
 8004470:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_c.Init.PeriphInc = DMA_PINC_DISABLE;
 8004472:	4b29      	ldr	r3, [pc, #164]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 8004474:	2200      	movs	r2, #0
 8004476:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_c.Init.MemInc = DMA_MINC_ENABLE;
 8004478:	4b27      	ldr	r3, [pc, #156]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 800447a:	2280      	movs	r2, #128	; 0x80
 800447c:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_c.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800447e:	4b26      	ldr	r3, [pc, #152]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 8004480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004484:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_c.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004486:	4b24      	ldr	r3, [pc, #144]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 8004488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800448c:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_c.Init.Mode = DMA_CIRCULAR;
 800448e:	4b22      	ldr	r3, [pc, #136]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 8004490:	2220      	movs	r2, #32
 8004492:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_c.Init.Priority = DMA_PRIORITY_HIGH;
 8004494:	4b20      	ldr	r3, [pc, #128]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 8004496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800449a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_c) != HAL_OK)
 800449c:	481e      	ldr	r0, [pc, #120]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 800449e:	f002 ffa7 	bl	80073f0 <HAL_DMA_Init>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_HRTIM_MspInit+0x214>
    {
      Error_Handler();
 80044a8:	f000 fd3e 	bl	8004f28 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 80044b4:	2300      	movs	r3, #0
 80044b6:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 80044b8:	2301      	movs	r3, #1
 80044ba:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 80044bc:	2301      	movs	r3, #1
 80044be:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_hrtim1_c, &pSyncConfig) != HAL_OK)
 80044c0:	f107 0314 	add.w	r3, r7, #20
 80044c4:	4619      	mov	r1, r3
 80044c6:	4814      	ldr	r0, [pc, #80]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 80044c8:	f003 fa04 	bl	80078d4 <HAL_DMAEx_ConfigMuxSync>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_HRTIM_MspInit+0x23e>
    {
      Error_Handler();
 80044d2:	f000 fd29 	bl	8004f28 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerC,hdma_hrtim1_c);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a0f      	ldr	r2, [pc, #60]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 80044da:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 80044de:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <HAL_HRTIM_MspInit+0x280>)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_FLT_IRQn, 0, 0);
 80044e4:	2200      	movs	r2, #0
 80044e6:	2100      	movs	r1, #0
 80044e8:	2049      	movs	r0, #73	; 0x49
 80044ea:	f002 ff4c 	bl	8007386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_FLT_IRQn);
 80044ee:	2049      	movs	r0, #73	; 0x49
 80044f0:	f002 ff63 	bl	80073ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 80044f4:	bf00      	nop
 80044f6:	3738      	adds	r7, #56	; 0x38
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40016800 	.word	0x40016800
 8004500:	40021000 	.word	0x40021000
 8004504:	48000400 	.word	0x48000400
 8004508:	200002f8 	.word	0x200002f8
 800450c:	40020008 	.word	0x40020008
 8004510:	20000454 	.word	0x20000454
 8004514:	4002001c 	.word	0x4002001c
 8004518:	200004b4 	.word	0x200004b4
 800451c:	40020030 	.word	0x40020030

08004520 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	; 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004528:	f107 0314 	add.w	r3, r7, #20
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a20      	ldr	r2, [pc, #128]	; (80045c0 <HAL_HRTIM_MspPostInit+0xa0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d13a      	bne.n	80045b8 <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <HAL_HRTIM_MspPostInit+0xa4>)
 8004544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004546:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <HAL_HRTIM_MspPostInit+0xa4>)
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_HRTIM_MspPostInit+0xa4>)
 8004550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800455a:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <HAL_HRTIM_MspPostInit+0xa4>)
 800455c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455e:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <HAL_HRTIM_MspPostInit+0xa4>)
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004566:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <HAL_HRTIM_MspPostInit+0xa4>)
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM1 GPIO Configuration
    PB12     ------> HRTIM1_CHC1
    PA8     ------> HRTIM1_CHA1
    PA10     ------> HRTIM1_CHB1
    */
    GPIO_InitStruct.Pin = TC_HS_Pin;
 8004572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004578:	2302      	movs	r3, #2
 800457a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004580:	2303      	movs	r3, #3
 8004582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8004584:	230d      	movs	r3, #13
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TC_HS_GPIO_Port, &GPIO_InitStruct);
 8004588:	f107 0314 	add.w	r3, r7, #20
 800458c:	4619      	mov	r1, r3
 800458e:	480e      	ldr	r0, [pc, #56]	; (80045c8 <HAL_HRTIM_MspPostInit+0xa8>)
 8004590:	f003 fadc 	bl	8007b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TA_HS_Pin|TB_HS_Pin;
 8004594:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459a:	2302      	movs	r3, #2
 800459c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a2:	2303      	movs	r3, #3
 80045a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80045a6:	230d      	movs	r3, #13
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045aa:	f107 0314 	add.w	r3, r7, #20
 80045ae:	4619      	mov	r1, r3
 80045b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045b4:	f003 faca 	bl	8007b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80045b8:	bf00      	nop
 80045ba:	3728      	adds	r7, #40	; 0x28
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40016800 	.word	0x40016800
 80045c4:	40021000 	.word	0x40021000
 80045c8:	48000400 	.word	0x48000400

080045cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ce:	b091      	sub	sp, #68	; 0x44
 80045d0:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045d2:	f000 ff66 	bl	80054a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045d6:	f000 f981 	bl	80048dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045da:	f7ff fbfb 	bl	8003dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80045de:	f7ff fb7b 	bl	8003cd8 <MX_DMA_Init>
  MX_TIM2_Init();
 80045e2:	f000 fda3 	bl	800512c <MX_TIM2_Init>
  MX_TIM3_Init();
 80045e6:	f000 fded 	bl	80051c4 <MX_TIM3_Init>
  MX_CORDIC_Init();
 80045ea:	f7ff fb41 	bl	8003c70 <MX_CORDIC_Init>
  MX_ADC1_Init();
 80045ee:	f7ff f903 	bl	80037f8 <MX_ADC1_Init>
  MX_ADC5_Init();
 80045f2:	f7ff fa21 	bl	8003a38 <MX_ADC5_Init>
  MX_RNG_Init();
 80045f6:	f000 fc9b 	bl	8004f30 <MX_RNG_Init>
  MX_TIM6_Init();
 80045fa:	f000 fe31 	bl	8005260 <MX_TIM6_Init>
  MX_HRTIM1_Init();
 80045fe:	f7ff fc49 	bl	8003e94 <MX_HRTIM1_Init>
  MX_TIM15_Init();
 8004602:	f000 fe63 	bl	80052cc <MX_TIM15_Init>
  MX_FMAC_Init();
 8004606:	f7ff fbb1 	bl	8003d6c <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  PWM_PERIOD_COUNTER = 10000;
 800460a:	4b85      	ldr	r3, [pc, #532]	; (8004820 <main+0x254>)
 800460c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004610:	601a      	str	r2, [r3, #0]

  DPC_ADC_Init(&DPC_ADC_Conf,G_VAC,B_VAC,G_IAC,B_IAC,G_VDC,B_VDC,G_IDC,B_IDC);
 8004612:	eddf 3a84 	vldr	s7, [pc, #528]	; 8004824 <main+0x258>
 8004616:	ed9f 3a84 	vldr	s6, [pc, #528]	; 8004828 <main+0x25c>
 800461a:	eddf 2a84 	vldr	s5, [pc, #528]	; 800482c <main+0x260>
 800461e:	ed9f 2a84 	vldr	s4, [pc, #528]	; 8004830 <main+0x264>
 8004622:	eddf 1a84 	vldr	s3, [pc, #528]	; 8004834 <main+0x268>
 8004626:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8004838 <main+0x26c>
 800462a:	eddf 0a84 	vldr	s1, [pc, #528]	; 800483c <main+0x270>
 800462e:	eeb1 0a01 	vmov.f32	s0, #17	; 0x40880000  4.250
 8004632:	4883      	ldr	r0, [pc, #524]	; (8004840 <main+0x274>)
 8004634:	f7fe ff66 	bl	8003504 <DPC_ADC_Init>

  DPC_MISC_APPL_Timer_Init(APPL_Tim1, RefreshTime_DESIDERED);   //timer setting                                                                                                                                        /// Function used to Init the timers APP_TIM1 (htim2) used in the power application
 8004638:	4e82      	ldr	r6, [pc, #520]	; (8004844 <main+0x278>)
 800463a:	f242 7310 	movw	r3, #10000	; 0x2710
 800463e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004640:	466d      	mov	r5, sp
 8004642:	f106 0410 	add.w	r4, r6, #16
 8004646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800464a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800464c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800464e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004652:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004656:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800465a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800465e:	f7fd fb05 	bl	8001c6c <DPC_MISC_APPL_Timer_Init>
  DPC_MISC_APPL_Timer_Init(APPL_Tim2, RefreshTime_TO_DESIDERED);                                                                                                                                        /// Function used to Init the timers APP_TIM1 (htim3) used in the power application
 8004662:	4e79      	ldr	r6, [pc, #484]	; (8004848 <main+0x27c>)
 8004664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004668:	930f      	str	r3, [sp, #60]	; 0x3c
 800466a:	466d      	mov	r5, sp
 800466c:	f106 0410 	add.w	r4, r6, #16
 8004670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800467a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800467c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004680:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004684:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004688:	f7fd faf0 	bl	8001c6c <DPC_MISC_APPL_Timer_Init>
  DPC_MISC_APPL_Timer_Init(APPL_Tim3, RefreshTime2_DESIDERED);
 800468c:	4e6f      	ldr	r6, [pc, #444]	; (800484c <main+0x280>)
 800468e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004692:	930f      	str	r3, [sp, #60]	; 0x3c
 8004694:	466d      	mov	r5, sp
 8004696:	f106 0410 	add.w	r4, r6, #16
 800469a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800469c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800469e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046a6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80046aa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80046ae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80046b2:	f7fd fadb 	bl	8001c6c <DPC_MISC_APPL_Timer_Init>


  DPC_MISC_Analog_Start();
 80046b6:	f000 f983 	bl	80049c0 <DPC_MISC_Analog_Start>

  DPC_PLL_Init(&PLL_CONVERTER,PLL_KP, PLL_KI, DPC_PLL_TS,PLL_PHI_2pi,PLL_DELTA_F,PLL_FF_Hz,DPC_PLL_SAT_EN,DPC_PLL_PIsat_up,DPC_PLL_PIsat_down);                                                         /// INIT PLL
 80046ba:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8004850 <main+0x284>
 80046be:	eddf 2a65 	vldr	s5, [pc, #404]	; 8004854 <main+0x288>
 80046c2:	2201      	movs	r2, #1
 80046c4:	2132      	movs	r1, #50	; 0x32
 80046c6:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 80046ca:	eddf 1a63 	vldr	s3, [pc, #396]	; 8004858 <main+0x28c>
 80046ce:	ed9f 1a63 	vldr	s2, [pc, #396]	; 800485c <main+0x290>
 80046d2:	eddf 0a63 	vldr	s1, [pc, #396]	; 8004860 <main+0x294>
 80046d6:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80046da:	4862      	ldr	r0, [pc, #392]	; (8004864 <main+0x298>)
 80046dc:	f7fd fc14 	bl	8001f08 <DPC_PLL_Init>
  DPC_PI_Init(&CDC.pPI_ID_CURR_CTRL,DPC_ID_KP,DPC_ID_KI,DPC_PI_ID_TS,DPC_PI_ID_sat_up,DPC_PI_ID_sat_down,DPC_PI_ID_SAT_EN,DPC_PI_ID_AW_EN,DPC_PI_ID_AWTG);                                              /// INIT PI CURRENT CTRL D
 80046e0:	eddf 2a61 	vldr	s5, [pc, #388]	; 8004868 <main+0x29c>
 80046e4:	2201      	movs	r2, #1
 80046e6:	2101      	movs	r1, #1
 80046e8:	ed9f 2a60 	vldr	s4, [pc, #384]	; 800486c <main+0x2a0>
 80046ec:	eddf 1a60 	vldr	s3, [pc, #384]	; 8004870 <main+0x2a4>
 80046f0:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8004874 <main+0x2a8>
 80046f4:	eddf 0a60 	vldr	s1, [pc, #384]	; 8004878 <main+0x2ac>
 80046f8:	ed9f 0a60 	vldr	s0, [pc, #384]	; 800487c <main+0x2b0>
 80046fc:	4860      	ldr	r0, [pc, #384]	; (8004880 <main+0x2b4>)
 80046fe:	f7fe f90b 	bl	8002918 <DPC_PI_Init>
  DPC_PI_Init(&CDC.pPI_IQ_CURR_CTRL,DPC_IQ_KP,DPC_IQ_KI,DPC_PI_IQ_TS,DPC_PI_IQ_sat_up,DPC_PI_IQ_sat_down,DPC_PI_IQ_SAT_EN,DPC_PI_IQ_AW_EN,DPC_PI_IQ_AWTG);                                              /// INIT PI CURRENT CTRL Q
 8004702:	eddf 2a59 	vldr	s5, [pc, #356]	; 8004868 <main+0x29c>
 8004706:	2201      	movs	r2, #1
 8004708:	2101      	movs	r1, #1
 800470a:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8004884 <main+0x2b8>
 800470e:	eddf 1a5e 	vldr	s3, [pc, #376]	; 8004888 <main+0x2bc>
 8004712:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8004874 <main+0x2a8>
 8004716:	eddf 0a58 	vldr	s1, [pc, #352]	; 8004878 <main+0x2ac>
 800471a:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800487c <main+0x2b0>
 800471e:	485b      	ldr	r0, [pc, #364]	; (800488c <main+0x2c0>)
 8004720:	f7fe f8fa 	bl	8002918 <DPC_PI_Init>
  DPC_PI_Init(&pPI_VDC_CTRL,DPC_VCTRL_KP,DPC_VCTRL_KI,DPC_PI_VDC_TS,DPC_VCTRL_PI_sat_up,DPC_VCTRL_PI_sat_down,DPC_VCTRL_PI_SAT_EN,DPC_VCTRL_PI_AW_EN,DPC_VCTRL_PI_AWTG);                                /// INIT PI VOLTAGE CTRL
 8004724:	eddf 2a5a 	vldr	s5, [pc, #360]	; 8004890 <main+0x2c4>
 8004728:	2201      	movs	r2, #1
 800472a:	2101      	movs	r1, #1
 800472c:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 800482c <main+0x260>
 8004730:	eddf 1a58 	vldr	s3, [pc, #352]	; 8004894 <main+0x2c8>
 8004734:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8004874 <main+0x2a8>
 8004738:	eddf 0a57 	vldr	s1, [pc, #348]	; 8004898 <main+0x2cc>
 800473c:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800489c <main+0x2d0>
 8004740:	4857      	ldr	r0, [pc, #348]	; (80048a0 <main+0x2d4>)
 8004742:	f7fe f8e9 	bl	8002918 <DPC_PI_Init>
  DPC_LPCNTRL_CDC_Init(&CDC,DPC_PLL_OMEGAGRID,DPC_INDUCTOR,CDC_FF_Init,CDC_DEC_INIT,CDC_VDC_FF_INIT);
 8004746:	2300      	movs	r3, #0
 8004748:	2200      	movs	r2, #0
 800474a:	2100      	movs	r1, #0
 800474c:	eddf 0a55 	vldr	s1, [pc, #340]	; 80048a4 <main+0x2d8>
 8004750:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80048a8 <main+0x2dc>
 8004754:	4855      	ldr	r0, [pc, #340]	; (80048ac <main+0x2e0>)
 8004756:	f7fc ff00 	bl	800155a <DPC_LPCNTRL_CDC_Init>
  DPC_LPCNTRL_BURST_Init(&BURST_CTRL,DPC_BURST_EN,RUN_BURST_VREF_V,RUN_BURST_VHIST,DPC_NO_LOAD_CURR,DPC_LOW_LOAD_CURR,DPC_BURST_DUTY_NL,DPC_BURST_DUTY_LL,&DPC_ADC_Conf);                               /// INIT BURST CONTROL
 800475a:	4b39      	ldr	r3, [pc, #228]	; (8004840 <main+0x274>)
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	eef5 1a00 	vmov.f32	s3, #80	; 0x3e800000  0.250
 8004762:	ed9f 1a53 	vldr	s2, [pc, #332]	; 80048b0 <main+0x2e4>
 8004766:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 800476a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800476e:	230a      	movs	r3, #10
 8004770:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004774:	2101      	movs	r1, #1
 8004776:	484f      	ldr	r0, [pc, #316]	; (80048b4 <main+0x2e8>)
 8004778:	f7fc fd13 	bl	80011a2 <DPC_LPCNTRL_BURST_Init>
  DPC_LPCNTRL_BURST_Init(&STARTBURST_CTRL,DPC_STARTBURST_EN,STARTBURST_VREF_V,START_BURST_VHIST,DPC_START_NO_LOAD_CURR,DPC_START_LOW_LOAD_CURR,DPC_STARTBURST_DUTY,0,&DPC_ADC_Conf);                    /// INIT STARTBURST CONTROL
 800477c:	4b30      	ldr	r3, [pc, #192]	; (8004840 <main+0x274>)
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	eddf 1a2a 	vldr	s3, [pc, #168]	; 800482c <main+0x260>
 8004784:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 80048b8 <main+0x2ec>
 8004788:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 800478c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8004790:	2305      	movs	r3, #5
 8004792:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004796:	2101      	movs	r1, #1
 8004798:	4848      	ldr	r0, [pc, #288]	; (80048bc <main+0x2f0>)
 800479a:	f7fc fd02 	bl	80011a2 <DPC_LPCNTRL_BURST_Init>
  DPC_LPCNTRL_Inrush_Init(&INRUSH_CTRL,INRUSH_VREF_V,INRUSH_VLIM,DPC_NO_LOAD_CURR,DPC_INRS_EN,&DPC_ADC_Conf);
 800479e:	4b28      	ldr	r3, [pc, #160]	; (8004840 <main+0x274>)
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	2300      	movs	r3, #0
 80047a4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80047a8:	221e      	movs	r2, #30
 80047aa:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80047ae:	4844      	ldr	r0, [pc, #272]	; (80048c0 <main+0x2f4>)
 80047b0:	f7fc fe75 	bl	800149e <DPC_LPCNTRL_Inrush_Init>

  DPC_MISC_ACSource_Init(&AC_Source_Limit,DPC_VAC_PK_OV,DPC_VAC_PK_UV,DPC_VAC_PK_UVLO,DPC_VAC_MIN,DPC_IAC_MAX,&DPC_ADC_Conf);                                                                           /// INIT AC_Source
 80047b4:	4b22      	ldr	r3, [pc, #136]	; (8004840 <main+0x274>)
 80047b6:	9302      	str	r3, [sp, #8]
 80047b8:	231e      	movs	r3, #30
 80047ba:	9301      	str	r3, [sp, #4]
 80047bc:	2314      	movs	r3, #20
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	238d      	movs	r3, #141	; 0x8d
 80047c2:	2246      	movs	r2, #70	; 0x46
 80047c4:	f240 2135 	movw	r1, #565	; 0x235
 80047c8:	483e      	ldr	r0, [pc, #248]	; (80048c4 <main+0x2f8>)
 80047ca:	f7fd f951 	bl	8001a70 <DPC_MISC_ACSource_Init>
  DPC_MISC_DCLoad_Init(&DC_Load_Limit,DPC_VDC_OV,DPC_VCAP_LIM,DPC_NO_LOAD_CURR,DPC_LOW_LOAD_CURR,DPC_OVER_LOAD_CURR,&DPC_ADC_Conf);
 80047ce:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <main+0x274>)
 80047d0:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80047d4:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 80047d8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80047dc:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80047e0:	f240 21ee 	movw	r1, #750	; 0x2ee
 80047e4:	4838      	ldr	r0, [pc, #224]	; (80048c8 <main+0x2fc>)
 80047e6:	f7fd f88b 	bl	8001900 <DPC_MISC_DCLoad_Init>

  DPC_LPCNTRL_PFC_Init(&pPFC_CTRL,DPC_CTRL_INIT,DPC_PFC_VDC,&DPC_ADC_Conf);
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <main+0x274>)
 80047ec:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80047f0:	2102      	movs	r1, #2
 80047f2:	4836      	ldr	r0, [pc, #216]	; (80048cc <main+0x300>)
 80047f4:	f7fc feda 	bl	80015ac <DPC_LPCNTRL_PFC_Init>
  DPC_PWM_Init(DPC_BURST_PWM_FREQ,PWM_FREQ,DPC_PWM_INIT,&tDPC_PWM, &DMA_HRTIM_SRC);
 80047f8:	4b35      	ldr	r3, [pc, #212]	; (80048d0 <main+0x304>)
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <main+0x308>)
 80047fe:	2201      	movs	r2, #1
 8004800:	f649 4140 	movw	r1, #40000	; 0x9c40
 8004804:	f644 6020 	movw	r0, #20000	; 0x4e20
 8004808:	f7fd ffde 	bl	80027c8 <DPC_PWM_Init>
//  DPC_FSM_State_Set(DPC_FSM_WAIT);
//
  DPC_MISC_Appl_Timer_Start();
 800480c:	f7fd fa58 	bl	8001cc0 <DPC_MISC_Appl_Timer_Start>
  DPC_TO_Init();
 8004810:	f7fe f978 	bl	8002b04 <DPC_TO_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 8004814:	2201      	movs	r2, #1
 8004816:	2120      	movs	r1, #32
 8004818:	482f      	ldr	r0, [pc, #188]	; (80048d8 <main+0x30c>)
 800481a:	f003 fb19 	bl	8007e50 <HAL_GPIO_WritePin>
 800481e:	e7f9      	b.n	8004814 <main+0x248>
 8004820:	20015ce0 	.word	0x20015ce0
 8004824:	45000000 	.word	0x45000000
 8004828:	42cccccd 	.word	0x42cccccd
 800482c:	00000000 	.word	0x00000000
 8004830:	40fbd70a 	.word	0x40fbd70a
 8004834:	44f4c000 	.word	0x44f4c000
 8004838:	42020000 	.word	0x42020000
 800483c:	44f6e000 	.word	0x44f6e000
 8004840:	20001880 	.word	0x20001880
 8004844:	20015f88 	.word	0x20015f88
 8004848:	20015ef0 	.word	0x20015ef0
 800484c:	20015f3c 	.word	0x20015f3c
 8004850:	c2480000 	.word	0xc2480000
 8004854:	42480000 	.word	0x42480000
 8004858:	bfc90fd8 	.word	0xbfc90fd8
 800485c:	3951b717 	.word	0x3951b717
 8004860:	43fa0000 	.word	0x43fa0000
 8004864:	20015c34 	.word	0x20015c34
 8004868:	3c23d70a 	.word	0x3c23d70a
 800486c:	bf666666 	.word	0xbf666666
 8004870:	3f666666 	.word	0x3f666666
 8004874:	38d1b717 	.word	0x38d1b717
 8004878:	4410d99a 	.word	0x4410d99a
 800487c:	3e2eb1c4 	.word	0x3e2eb1c4
 8004880:	200005e8 	.word	0x200005e8
 8004884:	bdcccccd 	.word	0xbdcccccd
 8004888:	3dcccccd 	.word	0x3dcccccd
 800488c:	20000630 	.word	0x20000630
 8004890:	3ca3d70a 	.word	0x3ca3d70a
 8004894:	3e9d89d9 	.word	0x3e9d89d9
 8004898:	3e99999a 	.word	0x3e99999a
 800489c:	39d1b717 	.word	0x39d1b717
 80048a0:	200151dc 	.word	0x200151dc
 80048a4:	3a6bedfa 	.word	0x3a6bedfa
 80048a8:	439d0000 	.word	0x439d0000
 80048ac:	200005a0 	.word	0x200005a0
 80048b0:	3e19999a 	.word	0x3e19999a
 80048b4:	20015140 	.word	0x20015140
 80048b8:	3d4ccccd 	.word	0x3d4ccccd
 80048bc:	20000548 	.word	0x20000548
 80048c0:	200151a4 	.word	0x200151a4
 80048c4:	200006bc 	.word	0x200006bc
 80048c8:	20015174 	.word	0x20015174
 80048cc:	20015d98 	.word	0x20015d98
 80048d0:	20000048 	.word	0x20000048
 80048d4:	20001830 	.word	0x20001830
 80048d8:	48000800 	.word	0x48000800

080048dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b0a8      	sub	sp, #160	; 0xa0
 80048e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048e6:	2238      	movs	r2, #56	; 0x38
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f007 ff65 	bl	800c7ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	605a      	str	r2, [r3, #4]
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004900:	463b      	mov	r3, r7
 8004902:	2254      	movs	r2, #84	; 0x54
 8004904:	2100      	movs	r1, #0
 8004906:	4618      	mov	r0, r3
 8004908:	f007 ff57 	bl	800c7ba <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800490c:	2000      	movs	r0, #0
 800490e:	f006 f813 	bl	800a938 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8004912:	2322      	movs	r3, #34	; 0x22
 8004914:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800491a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800491c:	2340      	movs	r3, #64	; 0x40
 800491e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004920:	2301      	movs	r3, #1
 8004922:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004926:	2302      	movs	r3, #2
 8004928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800492c:	2302      	movs	r3, #2
 800492e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004932:	2304      	movs	r3, #4
 8004934:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004938:	2355      	movs	r3, #85	; 0x55
 800493a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800493e:	2302      	movs	r3, #2
 8004940:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004944:	2302      	movs	r3, #2
 8004946:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800494a:	2302      	movs	r3, #2
 800494c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004950:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004954:	4618      	mov	r0, r3
 8004956:	f006 f8a3 	bl	800aaa0 <HAL_RCC_OscConfig>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004960:	f000 fae2 	bl	8004f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004964:	230f      	movs	r3, #15
 8004966:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004968:	2303      	movs	r3, #3
 800496a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800496c:	2300      	movs	r3, #0
 800496e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004970:	2300      	movs	r3, #0
 8004972:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004974:	2300      	movs	r3, #0
 8004976:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004978:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800497c:	2104      	movs	r1, #4
 800497e:	4618      	mov	r0, r3
 8004980:	f006 fba6 	bl	800b0d0 <HAL_RCC_ClockConfig>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800498a:	f000 facd 	bl	8004f28 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12
 800498e:	f44f 33e0 	mov.w	r3, #114688	; 0x1c000
 8004992:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8004994:	2300      	movs	r3, #0
 8004996:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004998:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800499c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800499e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049a4:	463b      	mov	r3, r7
 80049a6:	4618      	mov	r0, r3
 80049a8:	f006 fd98 	bl	800b4dc <HAL_RCCEx_PeriphCLKConfig>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80049b2:	f000 fab9 	bl	8004f28 <Error_Handler>
  }
}
 80049b6:	bf00      	nop
 80049b8:	37a0      	adds	r7, #160	; 0xa0
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <DPC_MISC_Analog_Start>:

  return RetVal;
}


void  DPC_MISC_Analog_Start(void){
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  HAL_ADC_Start_DMA(&hadc1,p_ADC1_Data,ADC1_CHs);                              ///HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* p_ADC1_Data, uint32_t Length)
 80049c4:	2208      	movs	r2, #8
 80049c6:	4903      	ldr	r1, [pc, #12]	; (80049d4 <DPC_MISC_Analog_Start+0x14>)
 80049c8:	4803      	ldr	r0, [pc, #12]	; (80049d8 <DPC_MISC_Analog_Start+0x18>)
 80049ca:	f001 fa91 	bl	8005ef0 <HAL_ADC_Start_DMA>
}
 80049ce:	bf00      	nop
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20001810 	.word	0x20001810
 80049d8:	200001cc 	.word	0x200001cc

080049dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049de:	b087      	sub	sp, #28
 80049e0:	af04      	add	r7, sp, #16
 80049e2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ec:	f040 8124 	bne.w	8004c38 <HAL_TIM_PeriodElapsedCallback+0x25c>
	{
		DATA_Acquisition_from_DMA(p_ADC1_Data,p_ADC2_Data); //Pass ADC DMA Data in DATA LAYER
 80049f0:	4995      	ldr	r1, [pc, #596]	; (8004c48 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80049f2:	4896      	ldr	r0, [pc, #600]	; (8004c4c <HAL_TIM_PeriodElapsedCallback+0x270>)
 80049f4:	f7fc f8ac 	bl	8000b50 <DATA_Acquisition_from_DMA>


		//start READ variable from DATA LAYER
		ADC_Current_AC_ProcessData((uint32_t*)Read_Curr_GRID(),&CURRENT_ADC_AC_IN_NORM);                    /// Read Current AC from DATA Layer and pass it at CURRENT_ADC_AC_IN_NORM
 80049f8:	f7fc f988 	bl	8000d0c <Read_Curr_GRID>
 80049fc:	4603      	mov	r3, r0
 80049fe:	4994      	ldr	r1, [pc, #592]	; (8004c50 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fe fbcb 	bl	800319c <ADC_Current_AC_ProcessData>
		ADC_Current_AC_RAW_ProcessData((uint32_t*)Read_Curr_GRID(), &CURRENT_ADC_AC_IN_BITS);
 8004a06:	f7fc f981 	bl	8000d0c <Read_Curr_GRID>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4991      	ldr	r1, [pc, #580]	; (8004c54 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe fc06 	bl	8003220 <ADC_Current_AC_RAW_ProcessData>

		ADC2Phy_Current_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Curr_GRID(),&CURRENT_ADC_AC_IN_PHY);      /// Read Current AC from DATA Layer and pass it at CURRENT_ADC_AC_IN_PHY
 8004a14:	f7fc f97a 	bl	8000d0c <Read_Curr_GRID>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	4a8f      	ldr	r2, [pc, #572]	; (8004c58 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	488f      	ldr	r0, [pc, #572]	; (8004c5c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004a20:	f7fe fc26 	bl	8003270 <ADC2Phy_Current_ProcessData>
		ADC2Phy_RMS_Current_ProcessData(&CURRENT_ADC_AC_IN_PHY, &CURRENT_ADC_AC_IN_PHY_MIN, &CURRENT_ADC_AC_IN_PHY_MAX, &CURRENT_ADC_AC_IN_PHY_RMS, &Period_Counter);
 8004a24:	4b8e      	ldr	r3, [pc, #568]	; (8004c60 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	4b8e      	ldr	r3, [pc, #568]	; (8004c64 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004a2a:	4a8f      	ldr	r2, [pc, #572]	; (8004c68 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004a2c:	498f      	ldr	r1, [pc, #572]	; (8004c6c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004a2e:	488a      	ldr	r0, [pc, #552]	; (8004c58 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004a30:	f7fe fc68 	bl	8003304 <ADC2Phy_RMS_Current_ProcessData>
		//ADC2Phy_MA_Current_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Curr_GRID(), &ADC_AC_Current_MA,&CURRENT_ADC_AC_MA_IN_PHY);

		//end READ variable from DATA LAYER

		Status_Load=DPC_MISC_Check_DCLoad(&DPC_Load,DC_Load_Limit,&CURRENT_ADC_AC_IN_PHY_RMS);
 8004a34:	4b8e      	ldr	r3, [pc, #568]	; (8004c70 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004a36:	4a8b      	ldr	r2, [pc, #556]	; (8004c64 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004a38:	9202      	str	r2, [sp, #8]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4611      	mov	r1, r2
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	2500      	movs	r5, #0
 8004a44:	4615      	mov	r5, r2
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	2400      	movs	r4, #0
 8004a4a:	4614      	mov	r4, r2
 8004a4c:	466a      	mov	r2, sp
 8004a4e:	330c      	adds	r3, #12
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	6010      	str	r0, [r2, #0]
 8004a54:	889b      	ldrh	r3, [r3, #4]
 8004a56:	8093      	strh	r3, [r2, #4]
 8004a58:	462a      	mov	r2, r5
 8004a5a:	4623      	mov	r3, r4
 8004a5c:	4885      	ldr	r0, [pc, #532]	; (8004c74 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004a5e:	f7fc fe63 	bl	8001728 <DPC_MISC_Check_DCLoad>
 8004a62:	4603      	mov	r3, r0
 8004a64:	461a      	mov	r2, r3
 8004a66:	4b84      	ldr	r3, [pc, #528]	; (8004c78 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004a68:	701a      	strb	r2, [r3, #0]
		Status_Source=DPC_MISC_CHECK_AC_SOURCE(&AC_SOURCE,AC_Source_Limit,PLL_CONVERTER.pll_theta_out_2pi);  ///Check AC SOURCE state reading AC Voltage and curent
 8004a6a:	4b84      	ldr	r3, [pc, #528]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004a6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a70:	4b83      	ldr	r3, [pc, #524]	; (8004c80 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	2600      	movs	r6, #0
 8004a76:	4616      	mov	r6, r2
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	2500      	movs	r5, #0
 8004a7c:	4615      	mov	r5, r2
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	2400      	movs	r4, #0
 8004a82:	4614      	mov	r4, r2
 8004a84:	466a      	mov	r2, sp
 8004a86:	330c      	adds	r3, #12
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	c203      	stmia	r2!, {r0, r1}
 8004a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a92:	4631      	mov	r1, r6
 8004a94:	462a      	mov	r2, r5
 8004a96:	4623      	mov	r3, r4
 8004a98:	487a      	ldr	r0, [pc, #488]	; (8004c84 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004a9a:	f7fd f92b 	bl	8001cf4 <DPC_MISC_CHECK_AC_SOURCE>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4b79      	ldr	r3, [pc, #484]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004aa4:	701a      	strb	r2, [r3, #0]

		Iabc_temp=*((TRANSFORM_ABC_t*)&CURRENT_ADC_AC_IN_NORM);                                             /// Sensing Current
 8004aa6:	4a6a      	ldr	r2, [pc, #424]	; (8004c50 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004aa8:	4b78      	ldr	r3, [pc, #480]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004aaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8004aac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Iabc_Phy=*((TRANSFORM_ABC_t*)&CURRENT_ADC_AC_IN_PHY);                                               /// Sensing Current in Physical dimension
 8004ab0:	4a69      	ldr	r2, [pc, #420]	; (8004c58 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004ab2:	4b77      	ldr	r3, [pc, #476]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004ab4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ab6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		Run_ClarkePark(&Iabc_temp, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Current_qdo);
 8004aba:	f7fb fffb 	bl	8000ab4 <DATA_Read_Theta_PLL>
 8004abe:	eeb0 7a40 	vmov.f32	s14, s0
 8004ac2:	4b6e      	ldr	r3, [pc, #440]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004ac4:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ac8:	4972      	ldr	r1, [pc, #456]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004aca:	eef0 0a67 	vmov.f32	s1, s15
 8004ace:	eeb0 0a47 	vmov.f32	s0, s14
 8004ad2:	486e      	ldr	r0, [pc, #440]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004ad4:	f7fe f9cc 	bl	8002e70 <Run_ClarkePark>
		//Run_ClarkePark(&Iabc_Phy, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Current_qdo_Phy);

		DATA_CURR_Write_ClarkePark(Current_qdo);  // Current qdo in DATA layer
 8004ad8:	4b6e      	ldr	r3, [pc, #440]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004ada:	edd3 6a00 	vldr	s13, [r3]
 8004ade:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ae2:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ae6:	eeb0 0a66 	vmov.f32	s0, s13
 8004aea:	eef0 0a47 	vmov.f32	s1, s14
 8004aee:	eeb0 1a67 	vmov.f32	s2, s15
 8004af2:	f7fb ffed 	bl	8000ad0 <DATA_CURR_Write_ClarkePark>
//		else {
//			FSM_Run_State = Run_Idle;
//			HAL_GPIO_WritePin(GPIOA, LED_HL1_Pin, GPIO_PIN_RESET);
//		}
//
		PC_State = FSM_Run;
 8004af6:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004af8:	2203      	movs	r2, #3
 8004afa:	701a      	strb	r2, [r3, #0]
		FSM_Run_State = Run_PFC_Mode;
 8004afc:	4b67      	ldr	r3, [pc, #412]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004afe:	2202      	movs	r2, #2
 8004b00:	701a      	strb	r2, [r3, #0]

		if (PC_State==FSM_Run)                                      ///__________FSM_Run________
 8004b02:	4b65      	ldr	r3, [pc, #404]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d156      	bne.n	8004bb8 <HAL_TIM_PeriodElapsedCallback+0x1dc>
		{
		  switch(FSM_Run_State){
 8004b0a:	4b64      	ldr	r3, [pc, #400]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d03c      	beq.n	8004b8c <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d002      	beq.n	8004b1c <HAL_TIM_PeriodElapsedCallback+0x140>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d046      	beq.n	8004ba8 <HAL_TIM_PeriodElapsedCallback+0x1cc>
 8004b1a:	e077      	b.n	8004c0c <HAL_TIM_PeriodElapsedCallback+0x230>
		  case Run_PFC_Mode:
			DPC_LPCNTRL_PFC_Mode(&pPFC_CTRL,&pPI_VDC_CTRL,&VOLTAGECTRL,&CDC,&V_DQO_CTRL,&Current_qdo,&Voltage_qdo,&VOLTAGE_ADC_DC_IN_PHY); ///PFC CONTROL______
 8004b1c:	4b60      	ldr	r3, [pc, #384]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004b1e:	9303      	str	r3, [sp, #12]
 8004b20:	4b60      	ldr	r3, [pc, #384]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004b22:	9302      	str	r3, [sp, #8]
 8004b24:	4b5b      	ldr	r3, [pc, #364]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	4b5f      	ldr	r3, [pc, #380]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	4b5f      	ldr	r3, [pc, #380]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004b2e:	4a60      	ldr	r2, [pc, #384]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004b30:	4960      	ldr	r1, [pc, #384]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004b32:	4861      	ldr	r0, [pc, #388]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004b34:	f7fc fa23 	bl	8000f7e <DPC_LPCNTRL_PFC_Mode>
			Run_Inv_ClarkePark(&V_DQO_CTRL,PLL_CONVERTER.pll_theta_out_2pi,PLL_CONVERTER.pll_phi_2pi,&V_ABC_CTRL);                                  /// DQO to ABC Voltag to provide to modulator
 8004b38:	4b50      	ldr	r3, [pc, #320]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004b3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b3e:	4b4f      	ldr	r3, [pc, #316]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004b40:	ed93 7a03 	vldr	s14, [r3, #12]
 8004b44:	495d      	ldr	r1, [pc, #372]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004b46:	eef0 0a47 	vmov.f32	s1, s14
 8004b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b4e:	4856      	ldr	r0, [pc, #344]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004b50:	f7fe f9fe 	bl	8002f50 <Run_Inv_ClarkePark>
			DPC_PWM_OutEnable(&tDPC_PWM);                                                                                                           ///PWM output will be enabled in PFC_Mode
 8004b54:	485a      	ldr	r0, [pc, #360]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004b56:	f7fd fe19 	bl	800278c <DPC_PWM_OutEnable>
			HAL_GPIO_WritePin(PFC_SW_SRC_GPIO_Port, PFC_SW_SRC_Pin, GPIO_PIN_SET);
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	2120      	movs	r1, #32
 8004b5e:	4859      	ldr	r0, [pc, #356]	; (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004b60:	f003 f976 	bl	8007e50 <HAL_GPIO_WritePin>
			DPC_PWM_Send_Duty_SPWM(&tDPC_PWM,V_ABC_CTRL.axA,V_ABC_CTRL.axB,V_ABC_CTRL.axC,&DMA_HRTIM_SRC);                                                         ///MODULATOR
 8004b64:	4b55      	ldr	r3, [pc, #340]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004b66:	edd3 7a00 	vldr	s15, [r3]
 8004b6a:	4b54      	ldr	r3, [pc, #336]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004b6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b70:	4b52      	ldr	r3, [pc, #328]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004b72:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b76:	4954      	ldr	r1, [pc, #336]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004b78:	eeb0 1a66 	vmov.f32	s2, s13
 8004b7c:	eef0 0a47 	vmov.f32	s1, s14
 8004b80:	eeb0 0a67 	vmov.f32	s0, s15
 8004b84:	484e      	ldr	r0, [pc, #312]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004b86:	f7fd fb95 	bl	80022b4 <DPC_PWM_Send_Duty_SPWM>
			  break;
 8004b8a:	e03f      	b.n	8004c0c <HAL_TIM_PeriodElapsedCallback+0x230>
		  case Run_Burst_Mode:
			//DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&BURST_CTRL,(uint32_t*)Read_Curr_DC(),&tDPC_PWM);
			DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&BURST_CTRL,&CURRENT_ADC_AC_IN_PHY_RMS,&tDPC_PWM, &DMA_HRTIM_SRC);
 8004b8c:	f7fc f8c8 	bl	8000d20 <Read_Volt_DC>
 8004b90:	4b4d      	ldr	r3, [pc, #308]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	4b4a      	ldr	r3, [pc, #296]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004b96:	4a33      	ldr	r2, [pc, #204]	; (8004c64 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004b98:	494c      	ldr	r1, [pc, #304]	; (8004ccc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004b9a:	f7fc fb7a 	bl	8001292 <DPC_LPCNTRL_Burst_Mode>
			DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 8004b9e:	4943      	ldr	r1, [pc, #268]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004ba0:	4844      	ldr	r0, [pc, #272]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004ba2:	f7fc f9d5 	bl	8000f50 <DPC_LPCNTRL_PFC_Mode_Reset>
			break;
 8004ba6:	e031      	b.n	8004c0c <HAL_TIM_PeriodElapsedCallback+0x230>
		  case Run_Idle:
			//Idle_Mode();
			DPC_PWM_OutDisable();
 8004ba8:	f7fd fdea 	bl	8002780 <DPC_PWM_OutDisable>
			DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 8004bac:	493f      	ldr	r1, [pc, #252]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004bae:	4841      	ldr	r0, [pc, #260]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004bb0:	f7fc f9ce 	bl	8000f50 <DPC_LPCNTRL_PFC_Mode_Reset>
			break;
 8004bb4:	bf00      	nop
 8004bb6:	e029      	b.n	8004c0c <HAL_TIM_PeriodElapsedCallback+0x230>
		  }
		}
		else if (PC_State==FSM_StartUp_burst)                        ///__________FSM_StartUp_burst__________
 8004bb8:	4b37      	ldr	r3, [pc, #220]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d110      	bne.n	8004be2 <HAL_TIM_PeriodElapsedCallback+0x206>
		{
		  //DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&STARTBURST_CTRL,(uint32_t*)Read_Curr_DC(),&tDPC_PWM);
		  DPC_LPCNTRL_Burst_Mode((uint32_t*)Read_Volt_DC(),&STARTBURST_CTRL,&CURRENT_ADC_AC_IN_PHY_RMS,&tDPC_PWM, &DMA_HRTIM_SRC);
 8004bc0:	f7fc f8ae 	bl	8000d20 <Read_Volt_DC>
 8004bc4:	4b40      	ldr	r3, [pc, #256]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	4b3d      	ldr	r3, [pc, #244]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004bca:	4a26      	ldr	r2, [pc, #152]	; (8004c64 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004bcc:	4940      	ldr	r1, [pc, #256]	; (8004cd0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004bce:	f7fc fb60 	bl	8001292 <DPC_LPCNTRL_Burst_Mode>
		  DPC_PWM_OutEnable(&tDPC_PWM);
 8004bd2:	483b      	ldr	r0, [pc, #236]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004bd4:	f7fd fdda 	bl	800278c <DPC_PWM_OutEnable>
		  DPC_LPCNTRL_PFC_Mode_Reset(&pPI_VDC_CTRL,&CDC);
 8004bd8:	4934      	ldr	r1, [pc, #208]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004bda:	4836      	ldr	r0, [pc, #216]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004bdc:	f7fc f9b8 	bl	8000f50 <DPC_LPCNTRL_PFC_Mode_Reset>
 8004be0:	e014      	b.n	8004c0c <HAL_TIM_PeriodElapsedCallback+0x230>
		}
		else if(PC_State==FSM_Fault)                                ///FSM_Fault
 8004be2:	4b2d      	ldr	r3, [pc, #180]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d110      	bne.n	8004c0c <HAL_TIM_PeriodElapsedCallback+0x230>
		{
		  DPC_PWM_OutDisable();
 8004bea:	f7fd fdc9 	bl	8002780 <DPC_PWM_OutDisable>
		  if(Trigger_Timestamp==SET){
 8004bee:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d10a      	bne.n	8004c0c <HAL_TIM_PeriodElapsedCallback+0x230>
		  Timestamp_PLL_CONVERTER=PLL_CONVERTER;
 8004bf6:	4a38      	ldr	r2, [pc, #224]	; (8004cd8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004bf8:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	239c      	movs	r3, #156	; 0x9c
 8004c00:	461a      	mov	r2, r3
 8004c02:	f007 fdcf 	bl	800c7a4 <memcpy>
		  Trigger_Timestamp=RESET;
 8004c06:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
		  }
		}
		if (Status_Source==OK_SOURCE){
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d102      	bne.n	8004c1a <HAL_TIM_PeriodElapsedCallback+0x23e>
			Flag2=1;
 8004c14:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
//			DMA_HRTIM_DST[2]=1;
//		}


//		Prev_Saturation = DMA_HRTIM_SRC[0];
		Flag = __HAL_HRTIM_GET_FLAG(&hhrtim1,HRTIM_FLAG_FLT1);
 8004c1a:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	bf0c      	ite	eq
 8004c2a:	2301      	moveq	r3, #1
 8004c2c:	2300      	movne	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b2c      	ldr	r3, [pc, #176]	; (8004ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8004c34:	601a      	str	r2, [r3, #0]
	DATA_Write_Theta_PLL(PLL_CONVERTER.pll_theta_out_2pi);                                              ///Pass Theta to DATA LAYER

	Service_step++;
	}

}
 8004c36:	e132      	b.n	8004e9e <HAL_TIM_PeriodElapsedCallback+0x4c2>
	else if(htim->Instance == TIM3){
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ce8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d154      	bne.n	8004cec <HAL_TIM_PeriodElapsedCallback+0x310>
		TimeoutMng();
 8004c42:	f7fd ff7f 	bl	8002b44 <TimeoutMng>
}
 8004c46:	e12a      	b.n	8004e9e <HAL_TIM_PeriodElapsedCallback+0x4c2>
 8004c48:	2001518c 	.word	0x2001518c
 8004c4c:	20001810 	.word	0x20001810
 8004c50:	20015168 	.word	0x20015168
 8004c54:	20015224 	.word	0x20015224
 8004c58:	20000514 	.word	0x20000514
 8004c5c:	20001880 	.word	0x20001880
 8004c60:	200006a0 	.word	0x200006a0
 8004c64:	200151cc 	.word	0x200151cc
 8004c68:	2000058c 	.word	0x2000058c
 8004c6c:	20001800 	.word	0x20001800
 8004c70:	20015174 	.word	0x20015174
 8004c74:	20015288 	.word	0x20015288
 8004c78:	20015d80 	.word	0x20015d80
 8004c7c:	20015c34 	.word	0x20015c34
 8004c80:	200006bc 	.word	0x200006bc
 8004c84:	200006a8 	.word	0x200006a8
 8004c88:	2000067c 	.word	0x2000067c
 8004c8c:	20000570 	.word	0x20000570
 8004c90:	2001527c 	.word	0x2001527c
 8004c94:	20000684 	.word	0x20000684
 8004c98:	2000057c 	.word	0x2000057c
 8004c9c:	2001524c 	.word	0x2001524c
 8004ca0:	2000052c 	.word	0x2000052c
 8004ca4:	20015134 	.word	0x20015134
 8004ca8:	20000520 	.word	0x20000520
 8004cac:	200005a0 	.word	0x200005a0
 8004cb0:	20015bf8 	.word	0x20015bf8
 8004cb4:	200151dc 	.word	0x200151dc
 8004cb8:	20015d98 	.word	0x20015d98
 8004cbc:	20000580 	.word	0x20000580
 8004cc0:	20001830 	.word	0x20001830
 8004cc4:	48000800 	.word	0x48000800
 8004cc8:	20000048 	.word	0x20000048
 8004ccc:	20015140 	.word	0x20015140
 8004cd0:	20000548 	.word	0x20000548
 8004cd4:	20000000 	.word	0x20000000
 8004cd8:	20015ce4 	.word	0x20015ce4
 8004cdc:	20015c2c 	.word	0x20015c2c
 8004ce0:	20000358 	.word	0x20000358
 8004ce4:	20015d94 	.word	0x20015d94
 8004ce8:	40000400 	.word	0x40000400
	else if(htim->Instance == TIM6){
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6d      	ldr	r2, [pc, #436]	; (8004ea8 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	f040 80d3 	bne.w	8004e9e <HAL_TIM_PeriodElapsedCallback+0x4c2>
	ADC_Voltage_AC_ProcessData((uint32_t*)Read_GRID(),&VOLTAGE_ADC_AC_IN_NORM);                         /// Read Voltage AC from DATA Layer and pass it at VOLTAGE_ADC_AC_IN_NORM
 8004cf8:	f7fb fffe 	bl	8000cf8 <Read_GRID>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	496b      	ldr	r1, [pc, #428]	; (8004eac <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fe f957 	bl	8002fb4 <ADC_Voltage_AC_ProcessData>
	ADC_Voltage_DC_ProcessData((uint32_t*)Read_Volt_DC(),&VOLTAGE_ADC_DC_IN_NORM);                      /// Read Voltage DC from DATA Layer and pass it at VOLTAGE_ADC_DC_IN_NORM
 8004d06:	f7fc f80b 	bl	8000d20 <Read_Volt_DC>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4968      	ldr	r1, [pc, #416]	; (8004eb0 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe f9dc 	bl	80030cc <ADC_Voltage_DC_ProcessData>
	ADC2Phy_DC_Voltage_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_Volt_DC(),&VOLTAGE_ADC_DC_IN_PHY);     /// Read Voltage AC from DATA Layer and pass it at VOLTAGE_ADC_AC_IN_PHY
 8004d14:	f7fc f804 	bl	8000d20 <Read_Volt_DC>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4a66      	ldr	r2, [pc, #408]	; (8004eb4 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4866      	ldr	r0, [pc, #408]	; (8004eb8 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8004d20:	f7fe f9fc 	bl	800311c <ADC2Phy_DC_Voltage_ProcessData>
	ADC2Phy_Voltage_ProcessData(&DPC_ADC_Conf,(uint32_t*)Read_GRID(),&VOLTAGE_ADC_AC_IN_PHY);           /// Read Voltage DC from DATA Layer and pass it at VOLTAGE_ADC_DC_IN_PHY
 8004d24:	f7fb ffe8 	bl	8000cf8 <Read_GRID>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4a64      	ldr	r2, [pc, #400]	; (8004ebc <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4862      	ldr	r0, [pc, #392]	; (8004eb8 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8004d30:	f7fe f982 	bl	8003038 <ADC2Phy_Voltage_ProcessData>
	if (Service_step>=1000){
 8004d34:	4b62      	ldr	r3, [pc, #392]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d3c:	d30f      	bcc.n	8004d5e <HAL_TIM_PeriodElapsedCallback+0x382>
		Service_step=0;
 8004d3e:	4b60      	ldr	r3, [pc, #384]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	801a      	strh	r2, [r3, #0]
		Service_counter++;
 8004d44:	4b5f      	ldr	r3, [pc, #380]	; (8004ec4 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	4b5d      	ldr	r3, [pc, #372]	; (8004ec4 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8004d4e:	801a      	strh	r2, [r3, #0]
		if (Service_counter>=10){
 8004d50:	4b5c      	ldr	r3, [pc, #368]	; (8004ec4 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	2b09      	cmp	r3, #9
 8004d56:	d902      	bls.n	8004d5e <HAL_TIM_PeriodElapsedCallback+0x382>
			Service_counter=0;
 8004d58:	4b5a      	ldr	r3, [pc, #360]	; (8004ec4 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	801a      	strh	r2, [r3, #0]
		Service_data[0][Service_step]=VOLTAGE_ADC_AC_IN_PHY.phA;
 8004d5e:	4b58      	ldr	r3, [pc, #352]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	4b55      	ldr	r3, [pc, #340]	; (8004ebc <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4957      	ldr	r1, [pc, #348]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8004d6a:	0083      	lsls	r3, r0, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	601a      	str	r2, [r3, #0]
		Service_data[1][Service_step]=CURRENT_ADC_AC_IN_PHY.phA;
 8004d70:	4b53      	ldr	r3, [pc, #332]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	4b55      	ldr	r3, [pc, #340]	; (8004ecc <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4953      	ldr	r1, [pc, #332]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8004d7c:	f500 737a 	add.w	r3, r0, #1000	; 0x3e8
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	601a      	str	r2, [r3, #0]
		Service_data[2][Service_step]=V_ABC_CTRL.axA;
 8004d86:	4b4e      	ldr	r3, [pc, #312]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	4b50      	ldr	r3, [pc, #320]	; (8004ed0 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	494d      	ldr	r1, [pc, #308]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8004d92:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	601a      	str	r2, [r3, #0]
		Service_data[3][Service_step]=CURRENT_ADC_AC_IN_PHY_RMS.phC;
 8004d9c:	4b48      	ldr	r3, [pc, #288]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	4b4c      	ldr	r3, [pc, #304]	; (8004ed4 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	4948      	ldr	r1, [pc, #288]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8004da8:	f600 33b8 	addw	r3, r0, #3000	; 0xbb8
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	601a      	str	r2, [r3, #0]
		Service_data[4][Service_step]=CURRENT_ADC_AC_IN_PHY.phA;
 8004db2:	4b43      	ldr	r3, [pc, #268]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	4b44      	ldr	r3, [pc, #272]	; (8004ecc <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4942      	ldr	r1, [pc, #264]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8004dbe:	f500 637a 	add.w	r3, r0, #4000	; 0xfa0
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	601a      	str	r2, [r3, #0]
		Service_data[5][Service_step]=CURRENT_ADC_AC_IN_PHY.phB;
 8004dc8:	4b3d      	ldr	r3, [pc, #244]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	4b3f      	ldr	r3, [pc, #252]	; (8004ecc <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	493d      	ldr	r1, [pc, #244]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8004dd4:	f500 539c 	add.w	r3, r0, #4992	; 0x1380
 8004dd8:	3308      	adds	r3, #8
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	601a      	str	r2, [r3, #0]
		Service_data[6][Service_step]=CURRENT_ADC_AC_IN_PHY.phC;
 8004de0:	4b37      	ldr	r3, [pc, #220]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	4b39      	ldr	r3, [pc, #228]	; (8004ecc <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	4937      	ldr	r1, [pc, #220]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8004dec:	f500 53bb 	add.w	r3, r0, #5984	; 0x1760
 8004df0:	3310      	adds	r3, #16
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	601a      	str	r2, [r3, #0]
	Vabc_temp=*((TRANSFORM_ABC_t*)&VOLTAGE_ADC_AC_IN_NORM);                                             /// Sensing Voltage
 8004df8:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8004dfa:	4b37      	ldr	r3, [pc, #220]	; (8004ed8 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8004dfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Vabc_Phy=*((TRANSFORM_ABC_t*)&VOLTAGE_ADC_AC_IN_PHY);                                               /// Sensing Voltage in Physical dimension
 8004e02:	4a2e      	ldr	r2, [pc, #184]	; (8004ebc <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8004e04:	4b35      	ldr	r3, [pc, #212]	; (8004edc <HAL_TIM_PeriodElapsedCallback+0x500>)
 8004e06:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Run_ClarkePark(&Vabc_temp, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Voltage_qdo);
 8004e0c:	f7fb fe52 	bl	8000ab4 <DATA_Read_Theta_PLL>
 8004e10:	eeb0 7a40 	vmov.f32	s14, s0
 8004e14:	4b32      	ldr	r3, [pc, #200]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8004e16:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e1a:	4932      	ldr	r1, [pc, #200]	; (8004ee4 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8004e1c:	eef0 0a67 	vmov.f32	s1, s15
 8004e20:	eeb0 0a47 	vmov.f32	s0, s14
 8004e24:	482c      	ldr	r0, [pc, #176]	; (8004ed8 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8004e26:	f7fe f823 	bl	8002e70 <Run_ClarkePark>
	Run_ClarkePark(&Vabc_Phy, DATA_Read_Theta_PLL(),PLL_CONVERTER.pll_phi_2pi,&Voltage_qdo_Phy);        ///
 8004e2a:	f7fb fe43 	bl	8000ab4 <DATA_Read_Theta_PLL>
 8004e2e:	eeb0 7a40 	vmov.f32	s14, s0
 8004e32:	4b2b      	ldr	r3, [pc, #172]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8004e34:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e38:	492b      	ldr	r1, [pc, #172]	; (8004ee8 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8004e3a:	eef0 0a67 	vmov.f32	s1, s15
 8004e3e:	eeb0 0a47 	vmov.f32	s0, s14
 8004e42:	4826      	ldr	r0, [pc, #152]	; (8004edc <HAL_TIM_PeriodElapsedCallback+0x500>)
 8004e44:	f7fe f814 	bl	8002e70 <Run_ClarkePark>
	DATA_VOLT_Write_ClarkePark(Voltage_qdo);                                                            /// Voltage qdo in DATA layer
 8004e48:	4b26      	ldr	r3, [pc, #152]	; (8004ee4 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8004e4a:	edd3 6a00 	vldr	s13, [r3]
 8004e4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e52:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e56:	eeb0 0a66 	vmov.f32	s0, s13
 8004e5a:	eef0 0a47 	vmov.f32	s1, s14
 8004e5e:	eeb0 1a67 	vmov.f32	s2, s15
 8004e62:	f7fb fe55 	bl	8000b10 <DATA_VOLT_Write_ClarkePark>
	VOLTAGE_AC_qd_IN_NORM=*((VoltageAC_qd_PLL_Struct*)&Voltage_qdo);                                    ///Auxiliary Data for PLL
 8004e66:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8004e68:	4b20      	ldr	r3, [pc, #128]	; (8004eec <HAL_TIM_PeriodElapsedCallback+0x510>)
 8004e6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PLL_Status=DPC_PLL_pllqd_Run(&PLL_CONVERTER,&VOLTAGE_AC_qd_IN_NORM,&theta_out_pll,&omega_out_pll);  ///PLL Phase Extimation
 8004e70:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8004e72:	4a20      	ldr	r2, [pc, #128]	; (8004ef4 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8004e74:	491d      	ldr	r1, [pc, #116]	; (8004eec <HAL_TIM_PeriodElapsedCallback+0x510>)
 8004e76:	481a      	ldr	r0, [pc, #104]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8004e78:	f7fd f8a4 	bl	8001fc4 <DPC_PLL_pllqd_Run>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	461a      	mov	r2, r3
 8004e80:	4b1d      	ldr	r3, [pc, #116]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8004e82:	701a      	strb	r2, [r3, #0]
	DATA_Write_Theta_PLL(PLL_CONVERTER.pll_theta_out_2pi);                                              ///Pass Theta to DATA LAYER
 8004e84:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8004e86:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e8e:	f7fb fe01 	bl	8000a94 <DATA_Write_Theta_PLL>
	Service_step++;
 8004e92:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004e9c:	801a      	strh	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40001000 	.word	0x40001000
 8004eac:	20015198 	.word	0x20015198
 8004eb0:	20015d84 	.word	0x20015d84
 8004eb4:	2000052c 	.word	0x2000052c
 8004eb8:	20001880 	.word	0x20001880
 8004ebc:	20015230 	.word	0x20015230
 8004ec0:	2000067a 	.word	0x2000067a
 8004ec4:	2000067e 	.word	0x2000067e
 8004ec8:	200018b4 	.word	0x200018b4
 8004ecc:	20000514 	.word	0x20000514
 8004ed0:	20000580 	.word	0x20000580
 8004ed4:	200151cc 	.word	0x200151cc
 8004ed8:	20015c04 	.word	0x20015c04
 8004edc:	200151b8 	.word	0x200151b8
 8004ee0:	20015c34 	.word	0x20015c34
 8004ee4:	20015134 	.word	0x20015134
 8004ee8:	20001874 	.word	0x20001874
 8004eec:	20001860 	.word	0x20001860
 8004ef0:	20000598 	.word	0x20000598
 8004ef4:	20015188 	.word	0x20015188
 8004ef8:	200006b8 	.word	0x200006b8

08004efc <HAL_HRTIM_Fault1Callback>:

void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim){
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	DPC_FLT_Faulterror_Set(FAULT_OCS);
 8004f04:	2008      	movs	r0, #8
 8004f06:	f7fb ff15 	bl	8000d34 <DPC_FLT_Faulterror_Set>

}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_HRTIM_Fault3Callback>:
void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim){
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
	DPC_FLT_Faulterror_Set(FAULT_OCS);
 8004f1a:	2008      	movs	r0, #8
 8004f1c:	f7fb ff0a 	bl	8000d34 <DPC_FLT_Faulterror_Set>
}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f2e:	e7fe      	b.n	8004f2e <Error_Handler+0x6>

08004f30 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8004f34:	4b07      	ldr	r3, [pc, #28]	; (8004f54 <MX_RNG_Init+0x24>)
 8004f36:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <MX_RNG_Init+0x28>)
 8004f38:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8004f3a:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <MX_RNG_Init+0x24>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004f40:	4804      	ldr	r0, [pc, #16]	; (8004f54 <MX_RNG_Init+0x24>)
 8004f42:	f006 fd17 	bl	800b974 <HAL_RNG_Init>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8004f4c:	f7ff ffec 	bl	8004f28 <Error_Handler>
  }

}
 8004f50:	bf00      	nop
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20015e90 	.word	0x20015e90
 8004f58:	50060800 	.word	0x50060800

08004f5c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a0a      	ldr	r2, [pc, #40]	; (8004f94 <HAL_RNG_MspInit+0x38>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d10b      	bne.n	8004f86 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <HAL_RNG_MspInit+0x3c>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f72:	4a09      	ldr	r2, [pc, #36]	; (8004f98 <HAL_RNG_MspInit+0x3c>)
 8004f74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f7a:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <HAL_RNG_MspInit+0x3c>)
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	50060800 	.word	0x50060800
 8004f98:	40021000 	.word	0x40021000

08004f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <HAL_MspInit+0x44>)
 8004fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa6:	4a0e      	ldr	r2, [pc, #56]	; (8004fe0 <HAL_MspInit+0x44>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	6613      	str	r3, [r2, #96]	; 0x60
 8004fae:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <HAL_MspInit+0x44>)
 8004fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <HAL_MspInit+0x44>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	4a08      	ldr	r2, [pc, #32]	; (8004fe0 <HAL_MspInit+0x44>)
 8004fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc6:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <HAL_MspInit+0x44>)
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004fd2:	f005 fd55 	bl	800aa80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000

08004fe4 <NMI_Handler>:
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	e7fe      	b.n	8004fe8 <NMI_Handler+0x4>

08004fea <HardFault_Handler>:
 8004fea:	b480      	push	{r7}
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	e7fe      	b.n	8004fee <HardFault_Handler+0x4>

08004ff0 <MemManage_Handler>:
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	e7fe      	b.n	8004ff4 <MemManage_Handler+0x4>

08004ff6 <BusFault_Handler>:
 8004ff6:	b480      	push	{r7}
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	e7fe      	b.n	8004ffa <BusFault_Handler+0x4>

08004ffc <UsageFault_Handler>:
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	e7fe      	b.n	8005000 <UsageFault_Handler+0x4>

08005002 <SVC_Handler>:
 8005002:	b480      	push	{r7}
 8005004:	af00      	add	r7, sp, #0
 8005006:	bf00      	nop
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <DebugMon_Handler>:
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
 8005014:	bf00      	nop
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <PendSV_Handler>:
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0
 8005022:	bf00      	nop
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <SysTick_Handler>:
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
 8005030:	f000 fa8a 	bl	8005548 <HAL_IncTick>
 8005034:	bf00      	nop
 8005036:	bd80      	pop	{r7, pc}

08005038 <DMA1_Channel1_IRQHandler>:
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
 800503c:	4802      	ldr	r0, [pc, #8]	; (8005048 <DMA1_Channel1_IRQHandler+0x10>)
 800503e:	f002 fafa 	bl	8007636 <HAL_DMA_IRQHandler>
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	200002f8 	.word	0x200002f8

0800504c <DMA1_Channel2_IRQHandler>:
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
 8005050:	4802      	ldr	r0, [pc, #8]	; (800505c <DMA1_Channel2_IRQHandler+0x10>)
 8005052:	f002 faf0 	bl	8007636 <HAL_DMA_IRQHandler>
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000454 	.word	0x20000454

08005060 <DMA1_Channel3_IRQHandler>:
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
 8005064:	4802      	ldr	r0, [pc, #8]	; (8005070 <DMA1_Channel3_IRQHandler+0x10>)
 8005066:	f002 fae6 	bl	8007636 <HAL_DMA_IRQHandler>
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	200004b4 	.word	0x200004b4

08005074 <DMA1_Channel4_IRQHandler>:
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
 8005078:	4802      	ldr	r0, [pc, #8]	; (8005084 <DMA1_Channel4_IRQHandler+0x10>)
 800507a:	f002 fadc 	bl	8007636 <HAL_DMA_IRQHandler>
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000238 	.word	0x20000238

08005088 <TIM2_IRQHandler>:
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
 800508c:	4802      	ldr	r0, [pc, #8]	; (8005098 <TIM2_IRQHandler+0x10>)
 800508e:	f006 fe87 	bl	800bda0 <HAL_TIM_IRQHandler>
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20015f88 	.word	0x20015f88

0800509c <TIM3_IRQHandler>:
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
 80050a0:	4802      	ldr	r0, [pc, #8]	; (80050ac <TIM3_IRQHandler+0x10>)
 80050a2:	f006 fe7d 	bl	800bda0 <HAL_TIM_IRQHandler>
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20015ef0 	.word	0x20015ef0

080050b0 <TIM6_DAC_IRQHandler>:
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	4802      	ldr	r0, [pc, #8]	; (80050c0 <TIM6_DAC_IRQHandler+0x10>)
 80050b6:	f006 fe73 	bl	800bda0 <HAL_TIM_IRQHandler>
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20015f3c 	.word	0x20015f3c

080050c4 <HRTIM1_FLT_IRQHandler>:
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	21ff      	movs	r1, #255	; 0xff
 80050ca:	4802      	ldr	r0, [pc, #8]	; (80050d4 <HRTIM1_FLT_IRQHandler+0x10>)
 80050cc:	f004 f8b8 	bl	8009240 <HAL_HRTIM_IRQHandler>
 80050d0:	bf00      	nop
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000358 	.word	0x20000358

080050d8 <DMAMUX_OVR_IRQHandler>:
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
 80050dc:	4805      	ldr	r0, [pc, #20]	; (80050f4 <DMAMUX_OVR_IRQHandler+0x1c>)
 80050de:	f002 fc37 	bl	8007950 <HAL_DMAEx_MUX_IRQHandler>
 80050e2:	4805      	ldr	r0, [pc, #20]	; (80050f8 <DMAMUX_OVR_IRQHandler+0x20>)
 80050e4:	f002 fc34 	bl	8007950 <HAL_DMAEx_MUX_IRQHandler>
 80050e8:	4804      	ldr	r0, [pc, #16]	; (80050fc <DMAMUX_OVR_IRQHandler+0x24>)
 80050ea:	f002 fc31 	bl	8007950 <HAL_DMAEx_MUX_IRQHandler>
 80050ee:	bf00      	nop
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	200002f8 	.word	0x200002f8
 80050f8:	20000454 	.word	0x20000454
 80050fc:	200004b4 	.word	0x200004b4

08005100 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005104:	4b08      	ldr	r3, [pc, #32]	; (8005128 <SystemInit+0x28>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	4a07      	ldr	r2, [pc, #28]	; (8005128 <SystemInit+0x28>)
 800510c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <SystemInit+0x28>)
 8005116:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800511a:	609a      	str	r2, [r3, #8]
#endif
}
 800511c:	bf00      	nop
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	e000ed00 	.word	0xe000ed00

0800512c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005132:	f107 0310 	add.w	r3, r7, #16
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	605a      	str	r2, [r3, #4]
 800513c:	609a      	str	r2, [r3, #8]
 800513e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005140:	1d3b      	adds	r3, r7, #4
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	605a      	str	r2, [r3, #4]
 8005148:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <MX_TIM2_Init+0x94>)
 800514c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005150:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005152:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <MX_TIM2_Init+0x94>)
 8005154:	2200      	movs	r2, #0
 8005156:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005158:	4b19      	ldr	r3, [pc, #100]	; (80051c0 <MX_TIM2_Init+0x94>)
 800515a:	2200      	movs	r2, #0
 800515c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800515e:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <MX_TIM2_Init+0x94>)
 8005160:	2200      	movs	r2, #0
 8005162:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005164:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <MX_TIM2_Init+0x94>)
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800516a:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <MX_TIM2_Init+0x94>)
 800516c:	2280      	movs	r2, #128	; 0x80
 800516e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005170:	4813      	ldr	r0, [pc, #76]	; (80051c0 <MX_TIM2_Init+0x94>)
 8005172:	f006 fc34 	bl	800b9de <HAL_TIM_Base_Init>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800517c:	f7ff fed4 	bl	8004f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005184:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005186:	f107 0310 	add.w	r3, r7, #16
 800518a:	4619      	mov	r1, r3
 800518c:	480c      	ldr	r0, [pc, #48]	; (80051c0 <MX_TIM2_Init+0x94>)
 800518e:	f006 ff87 	bl	800c0a0 <HAL_TIM_ConfigClockSource>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005198:	f7ff fec6 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800519c:	2330      	movs	r3, #48	; 0x30
 800519e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80051a4:	1d3b      	adds	r3, r7, #4
 80051a6:	4619      	mov	r1, r3
 80051a8:	4805      	ldr	r0, [pc, #20]	; (80051c0 <MX_TIM2_Init+0x94>)
 80051aa:	f007 f9fb 	bl	800c5a4 <HAL_TIMEx_MasterConfigSynchronization>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80051b4:	f7ff feb8 	bl	8004f28 <Error_Handler>
  }

}
 80051b8:	bf00      	nop
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20015f88 	.word	0x20015f88

080051c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051ca:	f107 0310 	add.w	r3, r7, #16
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	605a      	str	r2, [r3, #4]
 80051d4:	609a      	str	r2, [r3, #8]
 80051d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051d8:	1d3b      	adds	r3, r7, #4
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80051e2:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <MX_TIM3_Init+0x94>)
 80051e4:	4a1d      	ldr	r2, [pc, #116]	; (800525c <MX_TIM3_Init+0x98>)
 80051e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80051e8:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <MX_TIM3_Init+0x94>)
 80051ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051f0:	4b19      	ldr	r3, [pc, #100]	; (8005258 <MX_TIM3_Init+0x94>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80051f6:	4b18      	ldr	r3, [pc, #96]	; (8005258 <MX_TIM3_Init+0x94>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051fc:	4b16      	ldr	r3, [pc, #88]	; (8005258 <MX_TIM3_Init+0x94>)
 80051fe:	2200      	movs	r2, #0
 8005200:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005202:	4b15      	ldr	r3, [pc, #84]	; (8005258 <MX_TIM3_Init+0x94>)
 8005204:	2280      	movs	r2, #128	; 0x80
 8005206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005208:	4813      	ldr	r0, [pc, #76]	; (8005258 <MX_TIM3_Init+0x94>)
 800520a:	f006 fbe8 	bl	800b9de <HAL_TIM_Base_Init>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005214:	f7ff fe88 	bl	8004f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800521c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800521e:	f107 0310 	add.w	r3, r7, #16
 8005222:	4619      	mov	r1, r3
 8005224:	480c      	ldr	r0, [pc, #48]	; (8005258 <MX_TIM3_Init+0x94>)
 8005226:	f006 ff3b 	bl	800c0a0 <HAL_TIM_ConfigClockSource>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005230:	f7ff fe7a 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005234:	2300      	movs	r3, #0
 8005236:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800523c:	1d3b      	adds	r3, r7, #4
 800523e:	4619      	mov	r1, r3
 8005240:	4805      	ldr	r0, [pc, #20]	; (8005258 <MX_TIM3_Init+0x94>)
 8005242:	f007 f9af 	bl	800c5a4 <HAL_TIMEx_MasterConfigSynchronization>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800524c:	f7ff fe6c 	bl	8004f28 <Error_Handler>
  }

}
 8005250:	bf00      	nop
 8005252:	3720      	adds	r7, #32
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20015ef0 	.word	0x20015ef0
 800525c:	40000400 	.word	0x40000400

08005260 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	605a      	str	r2, [r3, #4]
 800526e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8005270:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <MX_TIM6_Init+0x64>)
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <MX_TIM6_Init+0x68>)
 8005274:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8005276:	4b13      	ldr	r3, [pc, #76]	; (80052c4 <MX_TIM6_Init+0x64>)
 8005278:	2200      	movs	r2, #0
 800527a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800527c:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <MX_TIM6_Init+0x64>)
 800527e:	2200      	movs	r2, #0
 8005280:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 32000;
 8005282:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <MX_TIM6_Init+0x64>)
 8005284:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8005288:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800528a:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <MX_TIM6_Init+0x64>)
 800528c:	2280      	movs	r2, #128	; 0x80
 800528e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005290:	480c      	ldr	r0, [pc, #48]	; (80052c4 <MX_TIM6_Init+0x64>)
 8005292:	f006 fba4 	bl	800b9de <HAL_TIM_Base_Init>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800529c:	f7ff fe44 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80052a0:	2320      	movs	r3, #32
 80052a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80052a8:	1d3b      	adds	r3, r7, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4805      	ldr	r0, [pc, #20]	; (80052c4 <MX_TIM6_Init+0x64>)
 80052ae:	f007 f979 	bl	800c5a4 <HAL_TIMEx_MasterConfigSynchronization>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80052b8:	f7ff fe36 	bl	8004f28 <Error_Handler>
  }

}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20015f3c 	.word	0x20015f3c
 80052c8:	40001000 	.word	0x40001000

080052cc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052d2:	f107 0310 	add.w	r3, r7, #16
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	609a      	str	r2, [r3, #8]
 80052de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	605a      	str	r2, [r3, #4]
 80052e8:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80052ea:	4b1f      	ldr	r3, [pc, #124]	; (8005368 <MX_TIM15_Init+0x9c>)
 80052ec:	4a1f      	ldr	r2, [pc, #124]	; (800536c <MX_TIM15_Init+0xa0>)
 80052ee:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80052f0:	4b1d      	ldr	r3, [pc, #116]	; (8005368 <MX_TIM15_Init+0x9c>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052f6:	4b1c      	ldr	r3, [pc, #112]	; (8005368 <MX_TIM15_Init+0x9c>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80052fc:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <MX_TIM15_Init+0x9c>)
 80052fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005302:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005304:	4b18      	ldr	r3, [pc, #96]	; (8005368 <MX_TIM15_Init+0x9c>)
 8005306:	2200      	movs	r2, #0
 8005308:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <MX_TIM15_Init+0x9c>)
 800530c:	2200      	movs	r2, #0
 800530e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005310:	4b15      	ldr	r3, [pc, #84]	; (8005368 <MX_TIM15_Init+0x9c>)
 8005312:	2200      	movs	r2, #0
 8005314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005316:	4814      	ldr	r0, [pc, #80]	; (8005368 <MX_TIM15_Init+0x9c>)
 8005318:	f006 fb61 	bl	800b9de <HAL_TIM_Base_Init>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8005322:	f7ff fe01 	bl	8004f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800532a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800532c:	f107 0310 	add.w	r3, r7, #16
 8005330:	4619      	mov	r1, r3
 8005332:	480d      	ldr	r0, [pc, #52]	; (8005368 <MX_TIM15_Init+0x9c>)
 8005334:	f006 feb4 	bl	800c0a0 <HAL_TIM_ConfigClockSource>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800533e:	f7ff fdf3 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005342:	2300      	movs	r3, #0
 8005344:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800534a:	1d3b      	adds	r3, r7, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4806      	ldr	r0, [pc, #24]	; (8005368 <MX_TIM15_Init+0x9c>)
 8005350:	f007 f928 	bl	800c5a4 <HAL_TIMEx_MasterConfigSynchronization>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800535a:	f7ff fde5 	bl	8004f28 <Error_Handler>
  }

}
 800535e:	bf00      	nop
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20015ea4 	.word	0x20015ea4
 800536c:	40014000 	.word	0x40014000

08005370 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005380:	d114      	bne.n	80053ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005382:	4b2f      	ldr	r3, [pc, #188]	; (8005440 <HAL_TIM_Base_MspInit+0xd0>)
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	4a2e      	ldr	r2, [pc, #184]	; (8005440 <HAL_TIM_Base_MspInit+0xd0>)
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	6593      	str	r3, [r2, #88]	; 0x58
 800538e:	4b2c      	ldr	r3, [pc, #176]	; (8005440 <HAL_TIM_Base_MspInit+0xd0>)
 8005390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800539a:	2202      	movs	r2, #2
 800539c:	2100      	movs	r1, #0
 800539e:	201c      	movs	r0, #28
 80053a0:	f001 fff1 	bl	8007386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80053a4:	201c      	movs	r0, #28
 80053a6:	f002 f808 	bl	80073ba <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80053aa:	e044      	b.n	8005436 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a24      	ldr	r2, [pc, #144]	; (8005444 <HAL_TIM_Base_MspInit+0xd4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d114      	bne.n	80053e0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80053b6:	4b22      	ldr	r3, [pc, #136]	; (8005440 <HAL_TIM_Base_MspInit+0xd0>)
 80053b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ba:	4a21      	ldr	r2, [pc, #132]	; (8005440 <HAL_TIM_Base_MspInit+0xd0>)
 80053bc:	f043 0302 	orr.w	r3, r3, #2
 80053c0:	6593      	str	r3, [r2, #88]	; 0x58
 80053c2:	4b1f      	ldr	r3, [pc, #124]	; (8005440 <HAL_TIM_Base_MspInit+0xd0>)
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 4);
 80053ce:	2204      	movs	r2, #4
 80053d0:	2100      	movs	r1, #0
 80053d2:	201d      	movs	r0, #29
 80053d4:	f001 ffd7 	bl	8007386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80053d8:	201d      	movs	r0, #29
 80053da:	f001 ffee 	bl	80073ba <HAL_NVIC_EnableIRQ>
}
 80053de:	e02a      	b.n	8005436 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a18      	ldr	r2, [pc, #96]	; (8005448 <HAL_TIM_Base_MspInit+0xd8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d114      	bne.n	8005414 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80053ea:	4b15      	ldr	r3, [pc, #84]	; (8005440 <HAL_TIM_Base_MspInit+0xd0>)
 80053ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ee:	4a14      	ldr	r2, [pc, #80]	; (8005440 <HAL_TIM_Base_MspInit+0xd0>)
 80053f0:	f043 0310 	orr.w	r3, r3, #16
 80053f4:	6593      	str	r3, [r2, #88]	; 0x58
 80053f6:	4b12      	ldr	r3, [pc, #72]	; (8005440 <HAL_TIM_Base_MspInit+0xd0>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 3);
 8005402:	2203      	movs	r2, #3
 8005404:	2100      	movs	r1, #0
 8005406:	2036      	movs	r0, #54	; 0x36
 8005408:	f001 ffbd 	bl	8007386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800540c:	2036      	movs	r0, #54	; 0x36
 800540e:	f001 ffd4 	bl	80073ba <HAL_NVIC_EnableIRQ>
}
 8005412:	e010      	b.n	8005436 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM15)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a0c      	ldr	r2, [pc, #48]	; (800544c <HAL_TIM_Base_MspInit+0xdc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d10b      	bne.n	8005436 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800541e:	4b08      	ldr	r3, [pc, #32]	; (8005440 <HAL_TIM_Base_MspInit+0xd0>)
 8005420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005422:	4a07      	ldr	r2, [pc, #28]	; (8005440 <HAL_TIM_Base_MspInit+0xd0>)
 8005424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005428:	6613      	str	r3, [r2, #96]	; 0x60
 800542a:	4b05      	ldr	r3, [pc, #20]	; (8005440 <HAL_TIM_Base_MspInit+0xd0>)
 800542c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]
}
 8005436:	bf00      	nop
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40021000 	.word	0x40021000
 8005444:	40000400 	.word	0x40000400
 8005448:	40001000 	.word	0x40001000
 800544c:	40014000 	.word	0x40014000

08005450 <Reset_Handler>:
 8005450:	480d      	ldr	r0, [pc, #52]	; (8005488 <LoopForever+0x2>)
 8005452:	4685      	mov	sp, r0
 8005454:	480d      	ldr	r0, [pc, #52]	; (800548c <LoopForever+0x6>)
 8005456:	490e      	ldr	r1, [pc, #56]	; (8005490 <LoopForever+0xa>)
 8005458:	4a0e      	ldr	r2, [pc, #56]	; (8005494 <LoopForever+0xe>)
 800545a:	2300      	movs	r3, #0
 800545c:	e002      	b.n	8005464 <LoopCopyDataInit>

0800545e <CopyDataInit>:
 800545e:	58d4      	ldr	r4, [r2, r3]
 8005460:	50c4      	str	r4, [r0, r3]
 8005462:	3304      	adds	r3, #4

08005464 <LoopCopyDataInit>:
 8005464:	18c4      	adds	r4, r0, r3
 8005466:	428c      	cmp	r4, r1
 8005468:	d3f9      	bcc.n	800545e <CopyDataInit>
 800546a:	4a0b      	ldr	r2, [pc, #44]	; (8005498 <LoopForever+0x12>)
 800546c:	4c0b      	ldr	r4, [pc, #44]	; (800549c <LoopForever+0x16>)
 800546e:	2300      	movs	r3, #0
 8005470:	e001      	b.n	8005476 <LoopFillZerobss>

08005472 <FillZerobss>:
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	3204      	adds	r2, #4

08005476 <LoopFillZerobss>:
 8005476:	42a2      	cmp	r2, r4
 8005478:	d3fb      	bcc.n	8005472 <FillZerobss>
 800547a:	f7ff fe41 	bl	8005100 <SystemInit>
 800547e:	f007 f96d 	bl	800c75c <__libc_init_array>
 8005482:	f7ff f8a3 	bl	80045cc <main>

08005486 <LoopForever>:
 8005486:	e7fe      	b.n	8005486 <LoopForever>
 8005488:	20020000 	.word	0x20020000
 800548c:	20000000 	.word	0x20000000
 8005490:	2000002c 	.word	0x2000002c
 8005494:	0800d004 	.word	0x0800d004
 8005498:	2000002c 	.word	0x2000002c
 800549c:	20015fd8 	.word	0x20015fd8

080054a0 <ADC1_2_IRQHandler>:
 80054a0:	e7fe      	b.n	80054a0 <ADC1_2_IRQHandler>

080054a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054ac:	2003      	movs	r0, #3
 80054ae:	f001 ff5f 	bl	8007370 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054b2:	2000      	movs	r0, #0
 80054b4:	f000 f80e 	bl	80054d4 <HAL_InitTick>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	71fb      	strb	r3, [r7, #7]
 80054c2:	e001      	b.n	80054c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054c4:	f7ff fd6a 	bl	8004f9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054c8:	79fb      	ldrb	r3, [r7, #7]

}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80054e0:	4b16      	ldr	r3, [pc, #88]	; (800553c <HAL_InitTick+0x68>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d022      	beq.n	800552e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054e8:	4b15      	ldr	r3, [pc, #84]	; (8005540 <HAL_InitTick+0x6c>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b13      	ldr	r3, [pc, #76]	; (800553c <HAL_InitTick+0x68>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80054f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80054f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 ff6a 	bl	80073d6 <HAL_SYSTICK_Config>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10f      	bne.n	8005528 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b0f      	cmp	r3, #15
 800550c:	d809      	bhi.n	8005522 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800550e:	2200      	movs	r2, #0
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	f04f 30ff 	mov.w	r0, #4294967295
 8005516:	f001 ff36 	bl	8007386 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800551a:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <HAL_InitTick+0x70>)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	e007      	b.n	8005532 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	73fb      	strb	r3, [r7, #15]
 8005526:	e004      	b.n	8005532 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
 800552c:	e001      	b.n	8005532 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005532:	7bfb      	ldrb	r3, [r7, #15]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	2000000c 	.word	0x2000000c
 8005540:	20000004 	.word	0x20000004
 8005544:	20000008 	.word	0x20000008

08005548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <HAL_IncTick+0x1c>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_IncTick+0x20>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4413      	add	r3, r2
 8005556:	4a03      	ldr	r2, [pc, #12]	; (8005564 <HAL_IncTick+0x1c>)
 8005558:	6013      	str	r3, [r2, #0]
}
 800555a:	bf00      	nop
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	20015fd4 	.word	0x20015fd4
 8005568:	2000000c 	.word	0x2000000c

0800556c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  return uwTick;
 8005570:	4b03      	ldr	r3, [pc, #12]	; (8005580 <HAL_GetTick+0x14>)
 8005572:	681b      	ldr	r3, [r3, #0]
}
 8005574:	4618      	mov	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	20015fd4 	.word	0x20015fd4

08005584 <LL_ADC_SetCommonClock>:
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	609a      	str	r2, [r3, #8]
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <LL_ADC_SetCommonPathInternalCh>:
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	609a      	str	r2, [r3, #8]
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <LL_ADC_GetCommonPathInternalCh>:
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <LL_ADC_SetOffset>:
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3360      	adds	r3, #96	; 0x60
 80055fe:	461a      	mov	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	4b08      	ldr	r3, [pc, #32]	; (8005630 <LL_ADC_SetOffset+0x44>)
 800560e:	4013      	ands	r3, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	4313      	orrs	r3, r2
 800561c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	03fff000 	.word	0x03fff000

08005634 <LL_ADC_GetOffsetChannel>:
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3360      	adds	r3, #96	; 0x60
 8005642:	461a      	mov	r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <LL_ADC_SetOffsetState>:
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3360      	adds	r3, #96	; 0x60
 8005670:	461a      	mov	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	431a      	orrs	r2, r3
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <LL_ADC_SetOffsetSign>:
 8005696:	b480      	push	{r7}
 8005698:	b087      	sub	sp, #28
 800569a:	af00      	add	r7, sp, #0
 800569c:	60f8      	str	r0, [r7, #12]
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3360      	adds	r3, #96	; 0x60
 80056a6:	461a      	mov	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	bf00      	nop
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <LL_ADC_SetOffsetSaturation>:
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3360      	adds	r3, #96	; 0x60
 80056dc:	461a      	mov	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <LL_ADC_SetSamplingTimeCommonConfig>:
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	615a      	str	r2, [r3, #20]
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <LL_ADC_REG_IsTriggerSourceSWStart>:
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005740:	2300      	movs	r3, #0
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <LL_ADC_REG_SetSequencerRanks>:
 800574e:	b480      	push	{r7}
 8005750:	b087      	sub	sp, #28
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	607a      	str	r2, [r7, #4]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3330      	adds	r3, #48	; 0x30
 800575e:	461a      	mov	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	4413      	add	r3, r2
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	211f      	movs	r1, #31
 800577a:	fa01 f303 	lsl.w	r3, r1, r3
 800577e:	43db      	mvns	r3, r3
 8005780:	401a      	ands	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	0e9b      	lsrs	r3, r3, #26
 8005786:	f003 011f 	and.w	r1, r3, #31
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	fa01 f303 	lsl.w	r3, r1, r3
 8005794:	431a      	orrs	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <LL_ADC_SetChannelSamplingTime>:
 80057a6:	b480      	push	{r7}
 80057a8:	b087      	sub	sp, #28
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3314      	adds	r3, #20
 80057b6:	461a      	mov	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	0e5b      	lsrs	r3, r3, #25
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	4413      	add	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	0d1b      	lsrs	r3, r3, #20
 80057ce:	f003 031f 	and.w	r3, r3, #31
 80057d2:	2107      	movs	r1, #7
 80057d4:	fa01 f303 	lsl.w	r3, r1, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	401a      	ands	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	0d1b      	lsrs	r3, r3, #20
 80057e0:	f003 031f 	and.w	r3, r3, #31
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ea:	431a      	orrs	r2, r3
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	bf00      	nop
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <LL_ADC_SetChannelSingleDiff>:
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005814:	43db      	mvns	r3, r3
 8005816:	401a      	ands	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0318 	and.w	r3, r3, #24
 800581e:	4908      	ldr	r1, [pc, #32]	; (8005840 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005820:	40d9      	lsrs	r1, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	400b      	ands	r3, r1
 8005826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800582a:	431a      	orrs	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	0007ffff 	.word	0x0007ffff

08005844 <LL_ADC_SetAnalogWDMonitChannels>:
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	330c      	adds	r3, #12
 8005854:	4618      	mov	r0, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	0d1b      	lsrs	r3, r3, #20
 800585a:	f003 0103 	and.w	r1, r3, #3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f003 0201 	and.w	r2, r3, #1
 8005864:	4613      	mov	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4403      	add	r3, r0
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 800587e:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8005882:	43db      	mvns	r3, r3
 8005884:	401a      	ands	r2, r3
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	400b      	ands	r3, r1
 800588c:	431a      	orrs	r2, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <LL_ADC_ConfigAnalogWDThresholds>:
 800589e:	b480      	push	{r7}
 80058a0:	b087      	sub	sp, #28
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
 80058aa:	603b      	str	r3, [r7, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3320      	adds	r3, #32
 80058b0:	461a      	mov	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	0d1b      	lsrs	r3, r3, #20
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	f003 030c 	and.w	r3, r3, #12
 80058bc:	4413      	add	r3, r2
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	0419      	lsls	r1, r3, #16
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	430b      	orrs	r3, r1
 80058d0:	431a      	orrs	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <LL_ADC_GetMultimode>:
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 031f 	and.w	r3, r3, #31
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <LL_ADC_DisableDeepPowerDown>:
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800590e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6093      	str	r3, [r2, #8]
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <LL_ADC_IsDeepPowerDownEnabled>:
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005936:	d101      	bne.n	800593c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800593c:	2300      	movs	r3, #0
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <LL_ADC_EnableInternalRegulator>:
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800595a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800595e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	609a      	str	r2, [r3, #8]
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <LL_ADC_IsInternalRegulatorEnabled>:
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005986:	d101      	bne.n	800598c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800598c:	2300      	movs	r3, #0
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <LL_ADC_Enable>:
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059ae:	f043 0201 	orr.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	609a      	str	r2, [r3, #8]
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <LL_ADC_IsEnabled>:
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <LL_ADC_IsEnabled+0x18>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <LL_ADC_IsEnabled+0x1a>
 80059da:	2300      	movs	r3, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <LL_ADC_REG_StartConversion>:
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059fc:	f043 0204 	orr.w	r2, r3, #4
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	609a      	str	r2, [r3, #8]
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <LL_ADC_REG_IsConversionOngoing>:
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d101      	bne.n	8005a28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <LL_ADC_INJ_IsConversionOngoing>:
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d101      	bne.n	8005a4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <LL_ADC_ClearFlag_AWD1>:
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <LL_ADC_ClearFlag_AWD2>:
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <LL_ADC_ClearFlag_AWD3>:
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <LL_ADC_EnableIT_AWD1>:
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <LL_ADC_EnableIT_AWD2>:
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	605a      	str	r2, [r3, #4]
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <LL_ADC_EnableIT_AWD3>:
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	605a      	str	r2, [r3, #4]
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <LL_ADC_DisableIT_AWD1>:
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <LL_ADC_DisableIT_AWD2>:
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <LL_ADC_DisableIT_AWD3>:
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	605a      	str	r2, [r3, #4]
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <HAL_ADC_Init>:
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b089      	sub	sp, #36	; 0x24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_ADC_Init+0x1a>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e1ad      	b.n	8005ee6 <HAL_ADC_Init+0x376>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <HAL_ADC_Init+0x3c>
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7fd ffb3 	bl	8003b04 <HAL_ADC_MspInit>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	661a      	str	r2, [r3, #96]	; 0x60
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff feb6 	bl	8005922 <LL_ADC_IsDeepPowerDownEnabled>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <HAL_ADC_Init+0x56>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fe9c 	bl	80058fe <LL_ADC_DisableDeepPowerDown>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff fed1 	bl	8005972 <LL_ADC_IsInternalRegulatorEnabled>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d113      	bne.n	8005bfe <HAL_ADC_Init+0x8e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff feb5 	bl	800594a <LL_ADC_EnableInternalRegulator>
 8005be0:	4b9e      	ldr	r3, [pc, #632]	; (8005e5c <HAL_ADC_Init+0x2ec>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	4a9e      	ldr	r2, [pc, #632]	; (8005e60 <HAL_ADC_Init+0x2f0>)
 8005be8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bec:	099b      	lsrs	r3, r3, #6
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	e002      	b.n	8005bf8 <HAL_ADC_Init+0x88>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	60bb      	str	r3, [r7, #8]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f9      	bne.n	8005bf2 <HAL_ADC_Init+0x82>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff feb5 	bl	8005972 <LL_ADC_IsInternalRegulatorEnabled>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10d      	bne.n	8005c2a <HAL_ADC_Init+0xba>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c12:	f043 0210 	orr.w	r2, r3, #16
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1e:	f043 0201 	orr.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	661a      	str	r2, [r3, #96]	; 0x60
 8005c26:	2301      	movs	r3, #1
 8005c28:	77fb      	strb	r3, [r7, #31]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff feee 	bl	8005a10 <LL_ADC_REG_IsConversionOngoing>
 8005c34:	6178      	str	r0, [r7, #20]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f040 8148 	bne.w	8005ed4 <HAL_ADC_Init+0x364>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f040 8144 	bne.w	8005ed4 <HAL_ADC_Init+0x364>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005c54:	f043 0202 	orr.w	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff feae 	bl	80059c2 <LL_ADC_IsEnabled>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d141      	bne.n	8005cf0 <HAL_ADC_Init+0x180>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c74:	d004      	beq.n	8005c80 <HAL_ADC_Init+0x110>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a7a      	ldr	r2, [pc, #488]	; (8005e64 <HAL_ADC_Init+0x2f4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d10f      	bne.n	8005ca0 <HAL_ADC_Init+0x130>
 8005c80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005c84:	f7ff fe9d 	bl	80059c2 <LL_ADC_IsEnabled>
 8005c88:	4604      	mov	r4, r0
 8005c8a:	4876      	ldr	r0, [pc, #472]	; (8005e64 <HAL_ADC_Init+0x2f4>)
 8005c8c:	f7ff fe99 	bl	80059c2 <LL_ADC_IsEnabled>
 8005c90:	4603      	mov	r3, r0
 8005c92:	4323      	orrs	r3, r4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	bf0c      	ite	eq
 8005c98:	2301      	moveq	r3, #1
 8005c9a:	2300      	movne	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	e012      	b.n	8005cc6 <HAL_ADC_Init+0x156>
 8005ca0:	4871      	ldr	r0, [pc, #452]	; (8005e68 <HAL_ADC_Init+0x2f8>)
 8005ca2:	f7ff fe8e 	bl	80059c2 <LL_ADC_IsEnabled>
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4870      	ldr	r0, [pc, #448]	; (8005e6c <HAL_ADC_Init+0x2fc>)
 8005caa:	f7ff fe8a 	bl	80059c2 <LL_ADC_IsEnabled>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	431c      	orrs	r4, r3
 8005cb2:	486f      	ldr	r0, [pc, #444]	; (8005e70 <HAL_ADC_Init+0x300>)
 8005cb4:	f7ff fe85 	bl	80059c2 <LL_ADC_IsEnabled>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4323      	orrs	r3, r4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d012      	beq.n	8005cf0 <HAL_ADC_Init+0x180>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cd2:	d004      	beq.n	8005cde <HAL_ADC_Init+0x16e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a62      	ldr	r2, [pc, #392]	; (8005e64 <HAL_ADC_Init+0x2f4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_ADC_Init+0x172>
 8005cde:	4a65      	ldr	r2, [pc, #404]	; (8005e74 <HAL_ADC_Init+0x304>)
 8005ce0:	e000      	b.n	8005ce4 <HAL_ADC_Init+0x174>
 8005ce2:	4a65      	ldr	r2, [pc, #404]	; (8005e78 <HAL_ADC_Init+0x308>)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7ff fc4a 	bl	8005584 <LL_ADC_SetCommonClock>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	7f5b      	ldrb	r3, [r3, #29]
 8005cf4:	035a      	lsls	r2, r3, #13
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d0e:	041b      	lsls	r3, r3, #16
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d106      	bne.n	8005d2c <HAL_ADC_Init+0x1bc>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	3b01      	subs	r3, #1
 8005d24:	045b      	lsls	r3, r3, #17
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <HAL_ADC_Init+0x1d8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	4313      	orrs	r3, r2
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	4b4b      	ldr	r3, [pc, #300]	; (8005e7c <HAL_ADC_Init+0x30c>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	69b9      	ldr	r1, [r7, #24]
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	60d3      	str	r3, [r2, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	611a      	str	r2, [r3, #16]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fe4a 	bl	8005a10 <LL_ADC_REG_IsConversionOngoing>
 8005d7c:	6138      	str	r0, [r7, #16]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff fe57 	bl	8005a36 <LL_ADC_INJ_IsConversionOngoing>
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d17f      	bne.n	8005e90 <HAL_ADC_Init+0x320>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d17c      	bne.n	8005e90 <HAL_ADC_Init+0x320>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	7f1b      	ldrb	r3, [r3, #28]
 8005d9a:	039a      	lsls	r2, r3, #14
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4313      	orrs	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db2:	f023 0302 	bic.w	r3, r3, #2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	69b9      	ldr	r1, [r7, #24]
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	60d3      	str	r3, [r2, #12]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d017      	beq.n	8005df8 <HAL_ADC_Init+0x288>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691a      	ldr	r2, [r3, #16]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005dd6:	611a      	str	r2, [r3, #16]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005de0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005de4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6911      	ldr	r1, [r2, #16]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	430b      	orrs	r3, r1
 8005df2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005df6:	e013      	b.n	8005e20 <HAL_ADC_Init+0x2b0>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e06:	611a      	str	r2, [r3, #16]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005e18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e1c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d12a      	bne.n	8005e80 <HAL_ADC_Init+0x310>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e34:	f023 0304 	bic.w	r3, r3, #4
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e40:	4311      	orrs	r1, r2
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e46:	4311      	orrs	r1, r2
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0201 	orr.w	r2, r2, #1
 8005e58:	611a      	str	r2, [r3, #16]
 8005e5a:	e019      	b.n	8005e90 <HAL_ADC_Init+0x320>
 8005e5c:	20000004 	.word	0x20000004
 8005e60:	053e2d63 	.word	0x053e2d63
 8005e64:	50000100 	.word	0x50000100
 8005e68:	50000400 	.word	0x50000400
 8005e6c:	50000500 	.word	0x50000500
 8005e70:	50000600 	.word	0x50000600
 8005e74:	50000300 	.word	0x50000300
 8005e78:	50000700 	.word	0x50000700
 8005e7c:	fff04007 	.word	0xfff04007
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0201 	bic.w	r2, r2, #1
 8005e8e:	611a      	str	r2, [r3, #16]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d10c      	bne.n	8005eb2 <HAL_ADC_Init+0x342>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	f023 010f 	bic.w	r1, r3, #15
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	1e5a      	subs	r2, r3, #1
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30
 8005eb0:	e007      	b.n	8005ec2 <HAL_ADC_Init+0x352>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 020f 	bic.w	r2, r2, #15
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	f043 0201 	orr.w	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ed2:	e007      	b.n	8005ee4 <HAL_ADC_Init+0x374>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed8:	f043 0210 	orr.w	r2, r3, #16
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	7ffb      	ldrb	r3, [r7, #31]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3724      	adds	r7, #36	; 0x24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd90      	pop	{r4, r7, pc}
 8005eee:	bf00      	nop

08005ef0 <HAL_ADC_Start_DMA>:
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f04:	d004      	beq.n	8005f10 <HAL_ADC_Start_DMA+0x20>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a58      	ldr	r2, [pc, #352]	; (800606c <HAL_ADC_Start_DMA+0x17c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d101      	bne.n	8005f14 <HAL_ADC_Start_DMA+0x24>
 8005f10:	4b57      	ldr	r3, [pc, #348]	; (8006070 <HAL_ADC_Start_DMA+0x180>)
 8005f12:	e000      	b.n	8005f16 <HAL_ADC_Start_DMA+0x26>
 8005f14:	4b57      	ldr	r3, [pc, #348]	; (8006074 <HAL_ADC_Start_DMA+0x184>)
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fce3 	bl	80058e2 <LL_ADC_GetMultimode>
 8005f1c:	6138      	str	r0, [r7, #16]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fd74 	bl	8005a10 <LL_ADC_REG_IsConversionOngoing>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 8096 	bne.w	800605c <HAL_ADC_Start_DMA+0x16c>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <HAL_ADC_Start_DMA+0x4e>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e091      	b.n	8006062 <HAL_ADC_Start_DMA+0x172>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <HAL_ADC_Start_DMA+0x68>
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	d002      	beq.n	8005f58 <HAL_ADC_Start_DMA+0x68>
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2b09      	cmp	r3, #9
 8005f56:	d17a      	bne.n	800604e <HAL_ADC_Start_DMA+0x15e>
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 feef 	bl	8006d3c <ADC_Enable>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	75fb      	strb	r3, [r7, #23]
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d16d      	bne.n	8006044 <HAL_ADC_Start_DMA+0x154>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f70:	f023 0301 	bic.w	r3, r3, #1
 8005f74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a3a      	ldr	r2, [pc, #232]	; (800606c <HAL_ADC_Start_DMA+0x17c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d009      	beq.n	8005f9a <HAL_ADC_Start_DMA+0xaa>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a3b      	ldr	r2, [pc, #236]	; (8006078 <HAL_ADC_Start_DMA+0x188>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d002      	beq.n	8005f96 <HAL_ADC_Start_DMA+0xa6>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	e003      	b.n	8005f9e <HAL_ADC_Start_DMA+0xae>
 8005f96:	4b39      	ldr	r3, [pc, #228]	; (800607c <HAL_ADC_Start_DMA+0x18c>)
 8005f98:	e001      	b.n	8005f9e <HAL_ADC_Start_DMA+0xae>
 8005f9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d002      	beq.n	8005fac <HAL_ADC_Start_DMA+0xbc>
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d105      	bne.n	8005fb8 <HAL_ADC_Start_DMA+0xc8>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d006      	beq.n	8005fd2 <HAL_ADC_Start_DMA+0xe2>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc8:	f023 0206 	bic.w	r2, r3, #6
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	661a      	str	r2, [r3, #96]	; 0x60
 8005fd0:	e002      	b.n	8005fd8 <HAL_ADC_Start_DMA+0xe8>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	661a      	str	r2, [r3, #96]	; 0x60
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fdc:	4a28      	ldr	r2, [pc, #160]	; (8006080 <HAL_ADC_Start_DMA+0x190>)
 8005fde:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe4:	4a27      	ldr	r2, [pc, #156]	; (8006084 <HAL_ADC_Start_DMA+0x194>)
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fec:	4a26      	ldr	r2, [pc, #152]	; (8006088 <HAL_ADC_Start_DMA+0x198>)
 8005fee:	635a      	str	r2, [r3, #52]	; 0x34
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	221c      	movs	r2, #28
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0210 	orr.w	r2, r2, #16
 800600e:	605a      	str	r2, [r3, #4]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	60da      	str	r2, [r3, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3340      	adds	r3, #64	; 0x40
 800602a:	4619      	mov	r1, r3
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f001 fa86 	bl	8007540 <HAL_DMA_Start_IT>
 8006034:	4603      	mov	r3, r0
 8006036:	75fb      	strb	r3, [r7, #23]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff fcd3 	bl	80059e8 <LL_ADC_REG_StartConversion>
 8006042:	e00d      	b.n	8006060 <HAL_ADC_Start_DMA+0x170>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800604c:	e008      	b.n	8006060 <HAL_ADC_Start_DMA+0x170>
 800604e:	2301      	movs	r3, #1
 8006050:	75fb      	strb	r3, [r7, #23]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800605a:	e001      	b.n	8006060 <HAL_ADC_Start_DMA+0x170>
 800605c:	2302      	movs	r3, #2
 800605e:	75fb      	strb	r3, [r7, #23]
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	50000100 	.word	0x50000100
 8006070:	50000300 	.word	0x50000300
 8006074:	50000700 	.word	0x50000700
 8006078:	50000500 	.word	0x50000500
 800607c:	50000400 	.word	0x50000400
 8006080:	08006df1 	.word	0x08006df1
 8006084:	08006ec9 	.word	0x08006ec9
 8006088:	08006ee5 	.word	0x08006ee5

0800608c <HAL_ADC_ConvCpltCallback>:
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_ADC_ConvHalfCpltCallback>:
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_ADC_ErrorCallback>:
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_ADC_ConfigChannel>:
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b0b6      	sub	sp, #216	; 0xd8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
 80060d2:	2300      	movs	r3, #0
 80060d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d102      	bne.n	80060ec <HAL_ADC_ConfigChannel+0x24>
 80060e6:	2302      	movs	r3, #2
 80060e8:	f000 bc12 	b.w	8006910 <HAL_ADC_ConfigChannel+0x848>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fc89 	bl	8005a10 <LL_ADC_REG_IsConversionOngoing>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	f040 83f2 	bne.w	80068ea <HAL_ADC_ConfigChannel+0x822>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	6859      	ldr	r1, [r3, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	f7ff fb1b 	bl	800574e <LL_ADC_REG_SetSequencerRanks>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fc77 	bl	8005a10 <LL_ADC_REG_IsConversionOngoing>
 8006122:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fc83 	bl	8005a36 <LL_ADC_INJ_IsConversionOngoing>
 8006130:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8006134:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006138:	2b00      	cmp	r3, #0
 800613a:	f040 81d9 	bne.w	80064f0 <HAL_ADC_ConfigChannel+0x428>
 800613e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006142:	2b00      	cmp	r3, #0
 8006144:	f040 81d4 	bne.w	80064f0 <HAL_ADC_ConfigChannel+0x428>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006150:	d10f      	bne.n	8006172 <HAL_ADC_ConfigChannel+0xaa>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6818      	ldr	r0, [r3, #0]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2200      	movs	r2, #0
 800615c:	4619      	mov	r1, r3
 800615e:	f7ff fb22 	bl	80057a6 <LL_ADC_SetChannelSamplingTime>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff fac9 	bl	8005702 <LL_ADC_SetSamplingTimeCommonConfig>
 8006170:	e00e      	b.n	8006190 <HAL_ADC_ConfigChannel+0xc8>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6819      	ldr	r1, [r3, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	461a      	mov	r2, r3
 8006180:	f7ff fb11 	bl	80057a6 <LL_ADC_SetChannelSamplingTime>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff fab9 	bl	8005702 <LL_ADC_SetSamplingTimeCommonConfig>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695a      	ldr	r2, [r3, #20]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	08db      	lsrs	r3, r3, #3
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d022      	beq.n	80061f8 <HAL_ADC_ConfigChannel+0x130>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	6919      	ldr	r1, [r3, #16]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061c2:	f7ff fa13 	bl	80055ec <LL_ADC_SetOffset>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6919      	ldr	r1, [r3, #16]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f7ff fa5f 	bl	8005696 <LL_ADC_SetOffsetSign>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6919      	ldr	r1, [r3, #16]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	7f1b      	ldrb	r3, [r3, #28]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d102      	bne.n	80061ee <HAL_ADC_ConfigChannel+0x126>
 80061e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061ec:	e000      	b.n	80061f0 <HAL_ADC_ConfigChannel+0x128>
 80061ee:	2300      	movs	r3, #0
 80061f0:	461a      	mov	r2, r3
 80061f2:	f7ff fa6b 	bl	80056cc <LL_ADC_SetOffsetSaturation>
 80061f6:	e17b      	b.n	80064f0 <HAL_ADC_ConfigChannel+0x428>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2100      	movs	r1, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff fa18 	bl	8005634 <LL_ADC_GetOffsetChannel>
 8006204:	4603      	mov	r3, r0
 8006206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <HAL_ADC_ConfigChannel+0x15c>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2100      	movs	r1, #0
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fa0d 	bl	8005634 <LL_ADC_GetOffsetChannel>
 800621a:	4603      	mov	r3, r0
 800621c:	0e9b      	lsrs	r3, r3, #26
 800621e:	f003 021f 	and.w	r2, r3, #31
 8006222:	e01e      	b.n	8006262 <HAL_ADC_ConfigChannel+0x19a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2100      	movs	r1, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff fa02 	bl	8005634 <LL_ADC_GetOffsetChannel>
 8006230:	4603      	mov	r3, r0
 8006232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800623a:	fa93 f3a3 	rbit	r3, r3
 800623e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800624a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_ADC_ConfigChannel+0x18e>
 8006252:	2320      	movs	r3, #32
 8006254:	e004      	b.n	8006260 <HAL_ADC_ConfigChannel+0x198>
 8006256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800625a:	fab3 f383 	clz	r3, r3
 800625e:	b2db      	uxtb	r3, r3
 8006260:	461a      	mov	r2, r3
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800626a:	2b00      	cmp	r3, #0
 800626c:	d105      	bne.n	800627a <HAL_ADC_ConfigChannel+0x1b2>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	0e9b      	lsrs	r3, r3, #26
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	e018      	b.n	80062ac <HAL_ADC_ConfigChannel+0x1e4>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006282:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006286:	fa93 f3a3 	rbit	r3, r3
 800628a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800628e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006292:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_ADC_ConfigChannel+0x1da>
 800629e:	2320      	movs	r3, #32
 80062a0:	e004      	b.n	80062ac <HAL_ADC_ConfigChannel+0x1e4>
 80062a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062a6:	fab3 f383 	clz	r3, r3
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d106      	bne.n	80062be <HAL_ADC_ConfigChannel+0x1f6>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2200      	movs	r2, #0
 80062b6:	2100      	movs	r1, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff f9d1 	bl	8005660 <LL_ADC_SetOffsetState>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2101      	movs	r1, #1
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff f9b5 	bl	8005634 <LL_ADC_GetOffsetChannel>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <HAL_ADC_ConfigChannel+0x222>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2101      	movs	r1, #1
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff f9aa 	bl	8005634 <LL_ADC_GetOffsetChannel>
 80062e0:	4603      	mov	r3, r0
 80062e2:	0e9b      	lsrs	r3, r3, #26
 80062e4:	f003 021f 	and.w	r2, r3, #31
 80062e8:	e01e      	b.n	8006328 <HAL_ADC_ConfigChannel+0x260>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2101      	movs	r1, #1
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff f99f 	bl	8005634 <LL_ADC_GetOffsetChannel>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006300:	fa93 f3a3 	rbit	r3, r3
 8006304:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006308:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800630c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_ADC_ConfigChannel+0x254>
 8006318:	2320      	movs	r3, #32
 800631a:	e004      	b.n	8006326 <HAL_ADC_ConfigChannel+0x25e>
 800631c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006320:	fab3 f383 	clz	r3, r3
 8006324:	b2db      	uxtb	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006330:	2b00      	cmp	r3, #0
 8006332:	d105      	bne.n	8006340 <HAL_ADC_ConfigChannel+0x278>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	0e9b      	lsrs	r3, r3, #26
 800633a:	f003 031f 	and.w	r3, r3, #31
 800633e:	e018      	b.n	8006372 <HAL_ADC_ConfigChannel+0x2aa>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800634c:	fa93 f3a3 	rbit	r3, r3
 8006350:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006354:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800635c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x2a0>
 8006364:	2320      	movs	r3, #32
 8006366:	e004      	b.n	8006372 <HAL_ADC_ConfigChannel+0x2aa>
 8006368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800636c:	fab3 f383 	clz	r3, r3
 8006370:	b2db      	uxtb	r3, r3
 8006372:	429a      	cmp	r2, r3
 8006374:	d106      	bne.n	8006384 <HAL_ADC_ConfigChannel+0x2bc>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2200      	movs	r2, #0
 800637c:	2101      	movs	r1, #1
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff f96e 	bl	8005660 <LL_ADC_SetOffsetState>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2102      	movs	r1, #2
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff f952 	bl	8005634 <LL_ADC_GetOffsetChannel>
 8006390:	4603      	mov	r3, r0
 8006392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10a      	bne.n	80063b0 <HAL_ADC_ConfigChannel+0x2e8>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2102      	movs	r1, #2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff f947 	bl	8005634 <LL_ADC_GetOffsetChannel>
 80063a6:	4603      	mov	r3, r0
 80063a8:	0e9b      	lsrs	r3, r3, #26
 80063aa:	f003 021f 	and.w	r2, r3, #31
 80063ae:	e01e      	b.n	80063ee <HAL_ADC_ConfigChannel+0x326>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2102      	movs	r1, #2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff f93c 	bl	8005634 <LL_ADC_GetOffsetChannel>
 80063bc:	4603      	mov	r3, r0
 80063be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80063c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063c6:	fa93 f3a3 	rbit	r3, r3
 80063ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_ADC_ConfigChannel+0x31a>
 80063de:	2320      	movs	r3, #32
 80063e0:	e004      	b.n	80063ec <HAL_ADC_ConfigChannel+0x324>
 80063e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063e6:	fab3 f383 	clz	r3, r3
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d105      	bne.n	8006406 <HAL_ADC_ConfigChannel+0x33e>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	0e9b      	lsrs	r3, r3, #26
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	e016      	b.n	8006434 <HAL_ADC_ConfigChannel+0x36c>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800640e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006412:	fa93 f3a3 	rbit	r3, r3
 8006416:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800641a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800641e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_ADC_ConfigChannel+0x362>
 8006426:	2320      	movs	r3, #32
 8006428:	e004      	b.n	8006434 <HAL_ADC_ConfigChannel+0x36c>
 800642a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800642e:	fab3 f383 	clz	r3, r3
 8006432:	b2db      	uxtb	r3, r3
 8006434:	429a      	cmp	r2, r3
 8006436:	d106      	bne.n	8006446 <HAL_ADC_ConfigChannel+0x37e>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2200      	movs	r2, #0
 800643e:	2102      	movs	r1, #2
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff f90d 	bl	8005660 <LL_ADC_SetOffsetState>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2103      	movs	r1, #3
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff f8f1 	bl	8005634 <LL_ADC_GetOffsetChannel>
 8006452:	4603      	mov	r3, r0
 8006454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <HAL_ADC_ConfigChannel+0x3aa>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2103      	movs	r1, #3
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff f8e6 	bl	8005634 <LL_ADC_GetOffsetChannel>
 8006468:	4603      	mov	r3, r0
 800646a:	0e9b      	lsrs	r3, r3, #26
 800646c:	f003 021f 	and.w	r2, r3, #31
 8006470:	e017      	b.n	80064a2 <HAL_ADC_ConfigChannel+0x3da>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2103      	movs	r1, #3
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff f8db 	bl	8005634 <LL_ADC_GetOffsetChannel>
 800647e:	4603      	mov	r3, r0
 8006480:	677b      	str	r3, [r7, #116]	; 0x74
 8006482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006484:	fa93 f3a3 	rbit	r3, r3
 8006488:	673b      	str	r3, [r7, #112]	; 0x70
 800648a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800648c:	67bb      	str	r3, [r7, #120]	; 0x78
 800648e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <HAL_ADC_ConfigChannel+0x3d0>
 8006494:	2320      	movs	r3, #32
 8006496:	e003      	b.n	80064a0 <HAL_ADC_ConfigChannel+0x3d8>
 8006498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800649a:	fab3 f383 	clz	r3, r3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d105      	bne.n	80064ba <HAL_ADC_ConfigChannel+0x3f2>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	0e9b      	lsrs	r3, r3, #26
 80064b4:	f003 031f 	and.w	r3, r3, #31
 80064b8:	e011      	b.n	80064de <HAL_ADC_ConfigChannel+0x416>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	66bb      	str	r3, [r7, #104]	; 0x68
 80064c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064c2:	fa93 f3a3 	rbit	r3, r3
 80064c6:	667b      	str	r3, [r7, #100]	; 0x64
 80064c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_ADC_ConfigChannel+0x40e>
 80064d2:	2320      	movs	r3, #32
 80064d4:	e003      	b.n	80064de <HAL_ADC_ConfigChannel+0x416>
 80064d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d8:	fab3 f383 	clz	r3, r3
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	429a      	cmp	r2, r3
 80064e0:	d106      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x428>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2200      	movs	r2, #0
 80064e8:	2103      	movs	r1, #3
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff f8b8 	bl	8005660 <LL_ADC_SetOffsetState>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fa64 	bl	80059c2 <LL_ADC_IsEnabled>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f040 813d 	bne.w	800677c <HAL_ADC_ConfigChannel+0x6b4>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6819      	ldr	r1, [r3, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	461a      	mov	r2, r3
 8006510:	f7ff f974 	bl	80057fc <LL_ADC_SetChannelSingleDiff>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	4aa2      	ldr	r2, [pc, #648]	; (80067a4 <HAL_ADC_ConfigChannel+0x6dc>)
 800651a:	4293      	cmp	r3, r2
 800651c:	f040 812e 	bne.w	800677c <HAL_ADC_ConfigChannel+0x6b4>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <HAL_ADC_ConfigChannel+0x480>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	0e9b      	lsrs	r3, r3, #26
 8006536:	3301      	adds	r3, #1
 8006538:	f003 031f 	and.w	r3, r3, #31
 800653c:	2b09      	cmp	r3, #9
 800653e:	bf94      	ite	ls
 8006540:	2301      	movls	r3, #1
 8006542:	2300      	movhi	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	e019      	b.n	800657c <HAL_ADC_ConfigChannel+0x4b4>
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800654e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006550:	fa93 f3a3 	rbit	r3, r3
 8006554:	65bb      	str	r3, [r7, #88]	; 0x58
 8006556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006558:	663b      	str	r3, [r7, #96]	; 0x60
 800655a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <HAL_ADC_ConfigChannel+0x49c>
 8006560:	2320      	movs	r3, #32
 8006562:	e003      	b.n	800656c <HAL_ADC_ConfigChannel+0x4a4>
 8006564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006566:	fab3 f383 	clz	r3, r3
 800656a:	b2db      	uxtb	r3, r3
 800656c:	3301      	adds	r3, #1
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	2b09      	cmp	r3, #9
 8006574:	bf94      	ite	ls
 8006576:	2301      	movls	r3, #1
 8006578:	2300      	movhi	r3, #0
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d079      	beq.n	8006674 <HAL_ADC_ConfigChannel+0x5ac>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006588:	2b00      	cmp	r3, #0
 800658a:	d107      	bne.n	800659c <HAL_ADC_ConfigChannel+0x4d4>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	0e9b      	lsrs	r3, r3, #26
 8006592:	3301      	adds	r3, #1
 8006594:	069b      	lsls	r3, r3, #26
 8006596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800659a:	e015      	b.n	80065c8 <HAL_ADC_ConfigChannel+0x500>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	653b      	str	r3, [r7, #80]	; 0x50
 80065a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a4:	fa93 f3a3 	rbit	r3, r3
 80065a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ac:	657b      	str	r3, [r7, #84]	; 0x54
 80065ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_ADC_ConfigChannel+0x4f0>
 80065b4:	2320      	movs	r3, #32
 80065b6:	e003      	b.n	80065c0 <HAL_ADC_ConfigChannel+0x4f8>
 80065b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ba:	fab3 f383 	clz	r3, r3
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	3301      	adds	r3, #1
 80065c2:	069b      	lsls	r3, r3, #26
 80065c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <HAL_ADC_ConfigChannel+0x520>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	0e9b      	lsrs	r3, r3, #26
 80065da:	3301      	adds	r3, #1
 80065dc:	f003 031f 	and.w	r3, r3, #31
 80065e0:	2101      	movs	r1, #1
 80065e2:	fa01 f303 	lsl.w	r3, r1, r3
 80065e6:	e017      	b.n	8006618 <HAL_ADC_ConfigChannel+0x550>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	647b      	str	r3, [r7, #68]	; 0x44
 80065ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f0:	fa93 f3a3 	rbit	r3, r3
 80065f4:	643b      	str	r3, [r7, #64]	; 0x40
 80065f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80065fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_ADC_ConfigChannel+0x53c>
 8006600:	2320      	movs	r3, #32
 8006602:	e003      	b.n	800660c <HAL_ADC_ConfigChannel+0x544>
 8006604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006606:	fab3 f383 	clz	r3, r3
 800660a:	b2db      	uxtb	r3, r3
 800660c:	3301      	adds	r3, #1
 800660e:	f003 031f 	and.w	r3, r3, #31
 8006612:	2101      	movs	r1, #1
 8006614:	fa01 f303 	lsl.w	r3, r1, r3
 8006618:	ea42 0103 	orr.w	r1, r2, r3
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10a      	bne.n	800663e <HAL_ADC_ConfigChannel+0x576>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	0e9b      	lsrs	r3, r3, #26
 800662e:	3301      	adds	r3, #1
 8006630:	f003 021f 	and.w	r2, r3, #31
 8006634:	4613      	mov	r3, r2
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	4413      	add	r3, r2
 800663a:	051b      	lsls	r3, r3, #20
 800663c:	e018      	b.n	8006670 <HAL_ADC_ConfigChannel+0x5a8>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	63bb      	str	r3, [r7, #56]	; 0x38
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	fa93 f3a3 	rbit	r3, r3
 800664a:	637b      	str	r3, [r7, #52]	; 0x34
 800664c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_ADC_ConfigChannel+0x592>
 8006656:	2320      	movs	r3, #32
 8006658:	e003      	b.n	8006662 <HAL_ADC_ConfigChannel+0x59a>
 800665a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665c:	fab3 f383 	clz	r3, r3
 8006660:	b2db      	uxtb	r3, r3
 8006662:	3301      	adds	r3, #1
 8006664:	f003 021f 	and.w	r2, r3, #31
 8006668:	4613      	mov	r3, r2
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	4413      	add	r3, r2
 800666e:	051b      	lsls	r3, r3, #20
 8006670:	430b      	orrs	r3, r1
 8006672:	e07e      	b.n	8006772 <HAL_ADC_ConfigChannel+0x6aa>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800667c:	2b00      	cmp	r3, #0
 800667e:	d107      	bne.n	8006690 <HAL_ADC_ConfigChannel+0x5c8>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	0e9b      	lsrs	r3, r3, #26
 8006686:	3301      	adds	r3, #1
 8006688:	069b      	lsls	r3, r3, #26
 800668a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800668e:	e015      	b.n	80066bc <HAL_ADC_ConfigChannel+0x5f4>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	fa93 f3a3 	rbit	r3, r3
 800669c:	62bb      	str	r3, [r7, #40]	; 0x28
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_ADC_ConfigChannel+0x5e4>
 80066a8:	2320      	movs	r3, #32
 80066aa:	e003      	b.n	80066b4 <HAL_ADC_ConfigChannel+0x5ec>
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	fab3 f383 	clz	r3, r3
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	3301      	adds	r3, #1
 80066b6:	069b      	lsls	r3, r3, #26
 80066b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d109      	bne.n	80066dc <HAL_ADC_ConfigChannel+0x614>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	0e9b      	lsrs	r3, r3, #26
 80066ce:	3301      	adds	r3, #1
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	2101      	movs	r1, #1
 80066d6:	fa01 f303 	lsl.w	r3, r1, r3
 80066da:	e017      	b.n	800670c <HAL_ADC_ConfigChannel+0x644>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	623b      	str	r3, [r7, #32]
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	fa93 f3a3 	rbit	r3, r3
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_ADC_ConfigChannel+0x630>
 80066f4:	2320      	movs	r3, #32
 80066f6:	e003      	b.n	8006700 <HAL_ADC_ConfigChannel+0x638>
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	fab3 f383 	clz	r3, r3
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	3301      	adds	r3, #1
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	2101      	movs	r1, #1
 8006708:	fa01 f303 	lsl.w	r3, r1, r3
 800670c:	ea42 0103 	orr.w	r1, r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10d      	bne.n	8006738 <HAL_ADC_ConfigChannel+0x670>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	0e9b      	lsrs	r3, r3, #26
 8006722:	3301      	adds	r3, #1
 8006724:	f003 021f 	and.w	r2, r3, #31
 8006728:	4613      	mov	r3, r2
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	4413      	add	r3, r2
 800672e:	3b1e      	subs	r3, #30
 8006730:	051b      	lsls	r3, r3, #20
 8006732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006736:	e01b      	b.n	8006770 <HAL_ADC_ConfigChannel+0x6a8>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	fa93 f3a3 	rbit	r3, r3
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_ADC_ConfigChannel+0x68c>
 8006750:	2320      	movs	r3, #32
 8006752:	e003      	b.n	800675c <HAL_ADC_ConfigChannel+0x694>
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	fab3 f383 	clz	r3, r3
 800675a:	b2db      	uxtb	r3, r3
 800675c:	3301      	adds	r3, #1
 800675e:	f003 021f 	and.w	r2, r3, #31
 8006762:	4613      	mov	r3, r2
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	4413      	add	r3, r2
 8006768:	3b1e      	subs	r3, #30
 800676a:	051b      	lsls	r3, r3, #20
 800676c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006770:	430b      	orrs	r3, r1
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	6892      	ldr	r2, [r2, #8]
 8006776:	4619      	mov	r1, r3
 8006778:	f7ff f815 	bl	80057a6 <LL_ADC_SetChannelSamplingTime>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	4b09      	ldr	r3, [pc, #36]	; (80067a8 <HAL_ADC_ConfigChannel+0x6e0>)
 8006782:	4013      	ands	r3, r2
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 80bd 	beq.w	8006904 <HAL_ADC_ConfigChannel+0x83c>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006792:	d004      	beq.n	800679e <HAL_ADC_ConfigChannel+0x6d6>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a04      	ldr	r2, [pc, #16]	; (80067ac <HAL_ADC_ConfigChannel+0x6e4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d10a      	bne.n	80067b4 <HAL_ADC_ConfigChannel+0x6ec>
 800679e:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <HAL_ADC_ConfigChannel+0x6e8>)
 80067a0:	e009      	b.n	80067b6 <HAL_ADC_ConfigChannel+0x6ee>
 80067a2:	bf00      	nop
 80067a4:	407f0000 	.word	0x407f0000
 80067a8:	80080000 	.word	0x80080000
 80067ac:	50000100 	.word	0x50000100
 80067b0:	50000300 	.word	0x50000300
 80067b4:	4b58      	ldr	r3, [pc, #352]	; (8006918 <HAL_ADC_ConfigChannel+0x850>)
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe ff0a 	bl	80055d0 <LL_ADC_GetCommonPathInternalCh>
 80067bc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a55      	ldr	r2, [pc, #340]	; (800691c <HAL_ADC_ConfigChannel+0x854>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d004      	beq.n	80067d4 <HAL_ADC_ConfigChannel+0x70c>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a54      	ldr	r2, [pc, #336]	; (8006920 <HAL_ADC_ConfigChannel+0x858>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d139      	bne.n	8006848 <HAL_ADC_ConfigChannel+0x780>
 80067d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d133      	bne.n	8006848 <HAL_ADC_ConfigChannel+0x780>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067e8:	d005      	beq.n	80067f6 <HAL_ADC_ConfigChannel+0x72e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a4d      	ldr	r2, [pc, #308]	; (8006924 <HAL_ADC_ConfigChannel+0x85c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	f040 8084 	bne.w	80068fe <HAL_ADC_ConfigChannel+0x836>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067fe:	d004      	beq.n	800680a <HAL_ADC_ConfigChannel+0x742>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a48      	ldr	r2, [pc, #288]	; (8006928 <HAL_ADC_ConfigChannel+0x860>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d101      	bne.n	800680e <HAL_ADC_ConfigChannel+0x746>
 800680a:	4a48      	ldr	r2, [pc, #288]	; (800692c <HAL_ADC_ConfigChannel+0x864>)
 800680c:	e000      	b.n	8006810 <HAL_ADC_ConfigChannel+0x748>
 800680e:	4a42      	ldr	r2, [pc, #264]	; (8006918 <HAL_ADC_ConfigChannel+0x850>)
 8006810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006814:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006818:	4619      	mov	r1, r3
 800681a:	4610      	mov	r0, r2
 800681c:	f7fe fec5 	bl	80055aa <LL_ADC_SetCommonPathInternalCh>
 8006820:	4b43      	ldr	r3, [pc, #268]	; (8006930 <HAL_ADC_ConfigChannel+0x868>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	099b      	lsrs	r3, r3, #6
 8006826:	4a43      	ldr	r2, [pc, #268]	; (8006934 <HAL_ADC_ConfigChannel+0x86c>)
 8006828:	fba2 2303 	umull	r2, r3, r2, r3
 800682c:	099a      	lsrs	r2, r3, #6
 800682e:	4613      	mov	r3, r2
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	e002      	b.n	8006840 <HAL_ADC_ConfigChannel+0x778>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3b01      	subs	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f9      	bne.n	800683a <HAL_ADC_ConfigChannel+0x772>
 8006846:	e05a      	b.n	80068fe <HAL_ADC_ConfigChannel+0x836>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a3a      	ldr	r2, [pc, #232]	; (8006938 <HAL_ADC_ConfigChannel+0x870>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d125      	bne.n	800689e <HAL_ADC_ConfigChannel+0x7d6>
 8006852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d11f      	bne.n	800689e <HAL_ADC_ConfigChannel+0x7d6>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a31      	ldr	r2, [pc, #196]	; (8006928 <HAL_ADC_ConfigChannel+0x860>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d104      	bne.n	8006872 <HAL_ADC_ConfigChannel+0x7aa>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a33      	ldr	r2, [pc, #204]	; (800693c <HAL_ADC_ConfigChannel+0x874>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d047      	beq.n	8006902 <HAL_ADC_ConfigChannel+0x83a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800687a:	d004      	beq.n	8006886 <HAL_ADC_ConfigChannel+0x7be>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a29      	ldr	r2, [pc, #164]	; (8006928 <HAL_ADC_ConfigChannel+0x860>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d101      	bne.n	800688a <HAL_ADC_ConfigChannel+0x7c2>
 8006886:	4a29      	ldr	r2, [pc, #164]	; (800692c <HAL_ADC_ConfigChannel+0x864>)
 8006888:	e000      	b.n	800688c <HAL_ADC_ConfigChannel+0x7c4>
 800688a:	4a23      	ldr	r2, [pc, #140]	; (8006918 <HAL_ADC_ConfigChannel+0x850>)
 800688c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f7fe fe87 	bl	80055aa <LL_ADC_SetCommonPathInternalCh>
 800689c:	e031      	b.n	8006902 <HAL_ADC_ConfigChannel+0x83a>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a27      	ldr	r2, [pc, #156]	; (8006940 <HAL_ADC_ConfigChannel+0x878>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d12d      	bne.n	8006904 <HAL_ADC_ConfigChannel+0x83c>
 80068a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d127      	bne.n	8006904 <HAL_ADC_ConfigChannel+0x83c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a1b      	ldr	r2, [pc, #108]	; (8006928 <HAL_ADC_ConfigChannel+0x860>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d022      	beq.n	8006904 <HAL_ADC_ConfigChannel+0x83c>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068c6:	d004      	beq.n	80068d2 <HAL_ADC_ConfigChannel+0x80a>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a16      	ldr	r2, [pc, #88]	; (8006928 <HAL_ADC_ConfigChannel+0x860>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d101      	bne.n	80068d6 <HAL_ADC_ConfigChannel+0x80e>
 80068d2:	4a16      	ldr	r2, [pc, #88]	; (800692c <HAL_ADC_ConfigChannel+0x864>)
 80068d4:	e000      	b.n	80068d8 <HAL_ADC_ConfigChannel+0x810>
 80068d6:	4a10      	ldr	r2, [pc, #64]	; (8006918 <HAL_ADC_ConfigChannel+0x850>)
 80068d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068e0:	4619      	mov	r1, r3
 80068e2:	4610      	mov	r0, r2
 80068e4:	f7fe fe61 	bl	80055aa <LL_ADC_SetCommonPathInternalCh>
 80068e8:	e00c      	b.n	8006904 <HAL_ADC_ConfigChannel+0x83c>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ee:	f043 0220 	orr.w	r2, r3, #32
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80068fc:	e002      	b.n	8006904 <HAL_ADC_ConfigChannel+0x83c>
 80068fe:	bf00      	nop
 8006900:	e000      	b.n	8006904 <HAL_ADC_ConfigChannel+0x83c>
 8006902:	bf00      	nop
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800690c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006910:	4618      	mov	r0, r3
 8006912:	37d8      	adds	r7, #216	; 0xd8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	50000700 	.word	0x50000700
 800691c:	c3210000 	.word	0xc3210000
 8006920:	90c00010 	.word	0x90c00010
 8006924:	50000600 	.word	0x50000600
 8006928:	50000100 	.word	0x50000100
 800692c:	50000300 	.word	0x50000300
 8006930:	20000004 	.word	0x20000004
 8006934:	053e2d63 	.word	0x053e2d63
 8006938:	c7520000 	.word	0xc7520000
 800693c:	50000500 	.word	0x50000500
 8006940:	cb840000 	.word	0xcb840000

08006944 <HAL_ADC_AnalogWDGConfig>:
 8006944:	b580      	push	{r7, lr}
 8006946:	b08e      	sub	sp, #56	; 0x38
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
 800694e:	2300      	movs	r3, #0
 8006950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800695c:	d003      	beq.n	8006966 <HAL_ADC_AnalogWDGConfig+0x22>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_ADC_AnalogWDGConfig+0x30>
 8006970:	2302      	movs	r3, #2
 8006972:	e1dc      	b.n	8006d2e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff f845 	bl	8005a10 <LL_ADC_REG_IsConversionOngoing>
 8006986:	62b8      	str	r0, [r7, #40]	; 0x28
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff f852 	bl	8005a36 <LL_ADC_INJ_IsConversionOngoing>
 8006992:	6278      	str	r0, [r7, #36]	; 0x24
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	2b00      	cmp	r3, #0
 8006998:	f040 8163 	bne.w	8006c62 <HAL_ADC_AnalogWDGConfig+0x31e>
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f040 815f 	bne.w	8006c62 <HAL_ADC_AnalogWDGConfig+0x31e>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4aa6      	ldr	r2, [pc, #664]	; (8006c44 <HAL_ADC_AnalogWDGConfig+0x300>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	f040 8086 	bne.w	8006abc <HAL_ADC_AnalogWDGConfig+0x178>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069b8:	d042      	beq.n	8006a40 <HAL_ADC_AnalogWDGConfig+0xfc>
 80069ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069be:	d806      	bhi.n	80069ce <HAL_ADC_AnalogWDGConfig+0x8a>
 80069c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069c4:	d034      	beq.n	8006a30 <HAL_ADC_AnalogWDGConfig+0xec>
 80069c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80069ca:	d00a      	beq.n	80069e2 <HAL_ADC_AnalogWDGConfig+0x9e>
 80069cc:	e048      	b.n	8006a60 <HAL_ADC_AnalogWDGConfig+0x11c>
 80069ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069d2:	d03d      	beq.n	8006a50 <HAL_ADC_AnalogWDGConfig+0x10c>
 80069d4:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80069d8:	d01d      	beq.n	8006a16 <HAL_ADC_AnalogWDGConfig+0xd2>
 80069da:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80069de:	d00d      	beq.n	80069fc <HAL_ADC_AnalogWDGConfig+0xb8>
 80069e0:	e03e      	b.n	8006a60 <HAL_ADC_AnalogWDGConfig+0x11c>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80069ee:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80069f2:	461a      	mov	r2, r3
 80069f4:	4993      	ldr	r1, [pc, #588]	; (8006c44 <HAL_ADC_AnalogWDGConfig+0x300>)
 80069f6:	f7fe ff25 	bl	8005844 <LL_ADC_SetAnalogWDMonitChannels>
 80069fa:	e039      	b.n	8006a70 <HAL_ADC_AnalogWDGConfig+0x12c>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006a08:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	498d      	ldr	r1, [pc, #564]	; (8006c44 <HAL_ADC_AnalogWDGConfig+0x300>)
 8006a10:	f7fe ff18 	bl	8005844 <LL_ADC_SetAnalogWDMonitChannels>
 8006a14:	e02c      	b.n	8006a70 <HAL_ADC_AnalogWDGConfig+0x12c>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006a22:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8006a26:	461a      	mov	r2, r3
 8006a28:	4986      	ldr	r1, [pc, #536]	; (8006c44 <HAL_ADC_AnalogWDGConfig+0x300>)
 8006a2a:	f7fe ff0b 	bl	8005844 <LL_ADC_SetAnalogWDMonitChannels>
 8006a2e:	e01f      	b.n	8006a70 <HAL_ADC_AnalogWDGConfig+0x12c>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a84      	ldr	r2, [pc, #528]	; (8006c48 <HAL_ADC_AnalogWDGConfig+0x304>)
 8006a36:	4983      	ldr	r1, [pc, #524]	; (8006c44 <HAL_ADC_AnalogWDGConfig+0x300>)
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe ff03 	bl	8005844 <LL_ADC_SetAnalogWDMonitChannels>
 8006a3e:	e017      	b.n	8006a70 <HAL_ADC_AnalogWDGConfig+0x12c>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a81      	ldr	r2, [pc, #516]	; (8006c4c <HAL_ADC_AnalogWDGConfig+0x308>)
 8006a46:	497f      	ldr	r1, [pc, #508]	; (8006c44 <HAL_ADC_AnalogWDGConfig+0x300>)
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe fefb 	bl	8005844 <LL_ADC_SetAnalogWDMonitChannels>
 8006a4e:	e00f      	b.n	8006a70 <HAL_ADC_AnalogWDGConfig+0x12c>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a7e      	ldr	r2, [pc, #504]	; (8006c50 <HAL_ADC_AnalogWDGConfig+0x30c>)
 8006a56:	497b      	ldr	r1, [pc, #492]	; (8006c44 <HAL_ADC_AnalogWDGConfig+0x300>)
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fe fef3 	bl	8005844 <LL_ADC_SetAnalogWDMonitChannels>
 8006a5e:	e007      	b.n	8006a70 <HAL_ADC_AnalogWDGConfig+0x12c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2200      	movs	r2, #0
 8006a66:	4977      	ldr	r1, [pc, #476]	; (8006c44 <HAL_ADC_AnalogWDGConfig+0x300>)
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe feeb 	bl	8005844 <LL_ADC_SetAnalogWDMonitChannels>
 8006a6e:	bf00      	nop
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	621a      	str	r2, [r3, #32]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe ffe0 	bl	8005a5c <LL_ADC_ClearFlag_AWD1>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	7b1b      	ldrb	r3, [r3, #12]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d105      	bne.n	8006ab0 <HAL_ADC_AnalogWDGConfig+0x16c>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff f800 	bl	8005aae <LL_ADC_EnableIT_AWD1>
 8006aae:	e0d8      	b.n	8006c62 <HAL_ADC_AnalogWDGConfig+0x31e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff f82a 	bl	8005b0e <LL_ADC_DisableIT_AWD1>
 8006aba:	e0d2      	b.n	8006c62 <HAL_ADC_AnalogWDGConfig+0x31e>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ac4:	d077      	beq.n	8006bb6 <HAL_ADC_AnalogWDGConfig+0x272>
 8006ac6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006aca:	d806      	bhi.n	8006ada <HAL_ADC_AnalogWDGConfig+0x196>
 8006acc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ad0:	d071      	beq.n	8006bb6 <HAL_ADC_AnalogWDGConfig+0x272>
 8006ad2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ad6:	d009      	beq.n	8006aec <HAL_ADC_AnalogWDGConfig+0x1a8>
 8006ad8:	e076      	b.n	8006bc8 <HAL_ADC_AnalogWDGConfig+0x284>
 8006ada:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ade:	d06a      	beq.n	8006bb6 <HAL_ADC_AnalogWDGConfig+0x272>
 8006ae0:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8006ae4:	d002      	beq.n	8006aec <HAL_ADC_AnalogWDGConfig+0x1a8>
 8006ae6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006aea:	d16d      	bne.n	8006bc8 <HAL_ADC_AnalogWDGConfig+0x284>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a58      	ldr	r2, [pc, #352]	; (8006c54 <HAL_ADC_AnalogWDGConfig+0x310>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d12f      	bne.n	8006b56 <HAL_ADC_AnalogWDGConfig+0x212>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d108      	bne.n	8006b14 <HAL_ADC_AnalogWDGConfig+0x1d0>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	0e9b      	lsrs	r3, r3, #26
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b12:	e016      	b.n	8006b42 <HAL_ADC_AnalogWDGConfig+0x1fe>
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	fa93 f3a3 	rbit	r3, r3
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	623b      	str	r3, [r7, #32]
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <HAL_ADC_AnalogWDGConfig+0x1ec>
 8006b2c:	2320      	movs	r3, #32
 8006b2e:	e003      	b.n	8006b38 <HAL_ADC_AnalogWDGConfig+0x1f4>
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	fab3 f383 	clz	r3, r3
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	f003 031f 	and.w	r3, r3, #31
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	6812      	ldr	r2, [r2, #0]
 8006b46:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	430b      	orrs	r3, r1
 8006b50:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8006b54:	e041      	b.n	8006bda <HAL_ADC_AnalogWDGConfig+0x296>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d108      	bne.n	8006b74 <HAL_ADC_AnalogWDGConfig+0x230>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	0e9b      	lsrs	r3, r3, #26
 8006b68:	f003 031f 	and.w	r3, r3, #31
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	e016      	b.n	8006ba2 <HAL_ADC_AnalogWDGConfig+0x25e>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	613b      	str	r3, [r7, #16]
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	fa93 f3a3 	rbit	r3, r3
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <HAL_ADC_AnalogWDGConfig+0x24c>
 8006b8c:	2320      	movs	r3, #32
 8006b8e:	e003      	b.n	8006b98 <HAL_ADC_AnalogWDGConfig+0x254>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	fab3 f383 	clz	r3, r3
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6812      	ldr	r2, [r2, #0]
 8006ba6:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6812      	ldr	r2, [r2, #0]
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8006bb4:	e011      	b.n	8006bda <HAL_ADC_AnalogWDGConfig+0x296>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a24      	ldr	r2, [pc, #144]	; (8006c50 <HAL_ADC_AnalogWDGConfig+0x30c>)
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f7fe fe3f 	bl	8005844 <LL_ADC_SetAnalogWDMonitChannels>
 8006bc6:	e008      	b.n	8006bda <HAL_ADC_AnalogWDGConfig+0x296>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	f7fe fe36 	bl	8005844 <LL_ADC_SetAnalogWDMonitChannels>
 8006bd8:	bf00      	nop
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a1d      	ldr	r2, [pc, #116]	; (8006c54 <HAL_ADC_AnalogWDGConfig+0x310>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d11a      	bne.n	8006c1a <HAL_ADC_AnalogWDGConfig+0x2d6>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fe ff3e 	bl	8005a76 <LL_ADC_ClearFlag_AWD2>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	7b1b      	ldrb	r3, [r3, #12]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d105      	bne.n	8006c0e <HAL_ADC_AnalogWDGConfig+0x2ca>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe ff61 	bl	8005ace <LL_ADC_EnableIT_AWD2>
 8006c0c:	e029      	b.n	8006c62 <HAL_ADC_AnalogWDGConfig+0x31e>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe ff8b 	bl	8005b2e <LL_ADC_DisableIT_AWD2>
 8006c18:	e023      	b.n	8006c62 <HAL_ADC_AnalogWDGConfig+0x31e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe ff31 	bl	8005a92 <LL_ADC_ClearFlag_AWD3>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	7b1b      	ldrb	r3, [r3, #12]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d10f      	bne.n	8006c58 <HAL_ADC_AnalogWDGConfig+0x314>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe ff56 	bl	8005aee <LL_ADC_EnableIT_AWD3>
 8006c42:	e00e      	b.n	8006c62 <HAL_ADC_AnalogWDGConfig+0x31e>
 8006c44:	7dc00000 	.word	0x7dc00000
 8006c48:	0087ffff 	.word	0x0087ffff
 8006c4c:	0107ffff 	.word	0x0107ffff
 8006c50:	0187ffff 	.word	0x0187ffff
 8006c54:	0017ffff 	.word	0x0017ffff
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe ff76 	bl	8005b4e <LL_ADC_DisableIT_AWD3>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a34      	ldr	r2, [pc, #208]	; (8006d38 <HAL_ADC_AnalogWDGConfig+0x3f4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d118      	bne.n	8006c9e <HAL_ADC_AnalogWDGConfig+0x35a>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	08db      	lsrs	r3, r3, #3
 8006c78:	f003 0303 	and.w	r3, r3, #3
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	637b      	str	r3, [r7, #52]	; 0x34
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	695a      	ldr	r2, [r3, #20]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	08db      	lsrs	r3, r3, #3
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c9c:	e039      	b.n	8006d12 <HAL_ADC_AnalogWDGConfig+0x3ce>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f003 0318 	and.w	r3, r3, #24
 8006ca8:	2b18      	cmp	r3, #24
 8006caa:	d011      	beq.n	8006cd0 <HAL_ADC_AnalogWDGConfig+0x38c>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	6919      	ldr	r1, [r3, #16]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	08db      	lsrs	r3, r3, #3
 8006cb8:	f003 0203 	and.w	r2, r3, #3
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	07db      	lsls	r3, r3, #31
 8006cc0:	1a9b      	subs	r3, r3, r2
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	fa21 f303 	lsr.w	r3, r1, r3
 8006cce:	e002      	b.n	8006cd6 <HAL_ADC_AnalogWDGConfig+0x392>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f003 0318 	and.w	r3, r3, #24
 8006ce2:	2b18      	cmp	r3, #24
 8006ce4:	d011      	beq.n	8006d0a <HAL_ADC_AnalogWDGConfig+0x3c6>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	6959      	ldr	r1, [r3, #20]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	08db      	lsrs	r3, r3, #3
 8006cf2:	f003 0203 	and.w	r2, r3, #3
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	07db      	lsls	r3, r3, #31
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	3304      	adds	r3, #4
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	fa21 f303 	lsr.w	r3, r1, r3
 8006d08:	e002      	b.n	8006d10 <HAL_ADC_AnalogWDGConfig+0x3cc>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	633b      	str	r3, [r7, #48]	; 0x30
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6819      	ldr	r1, [r3, #0]
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d1e:	f7fe fdbe 	bl	800589e <LL_ADC_ConfigAnalogWDThresholds>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3738      	adds	r7, #56	; 0x38
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	7dc00000 	.word	0x7dc00000

08006d3c <ADC_Enable>:
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fe fe3a 	bl	80059c2 <LL_ADC_IsEnabled>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d146      	bne.n	8006de2 <ADC_Enable+0xa6>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	4b24      	ldr	r3, [pc, #144]	; (8006dec <ADC_Enable+0xb0>)
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00d      	beq.n	8006d7e <ADC_Enable+0x42>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d66:	f043 0210 	orr.w	r2, r3, #16
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d72:	f043 0201 	orr.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	661a      	str	r2, [r3, #96]	; 0x60
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e032      	b.n	8006de4 <ADC_Enable+0xa8>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fe fe09 	bl	800599a <LL_ADC_Enable>
 8006d88:	f7fe fbf0 	bl	800556c <HAL_GetTick>
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	e021      	b.n	8006dd4 <ADC_Enable+0x98>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe fe14 	bl	80059c2 <LL_ADC_IsEnabled>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <ADC_Enable+0x6e>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fe fdf8 	bl	800599a <LL_ADC_Enable>
 8006daa:	f7fe fbdf 	bl	800556c <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d90d      	bls.n	8006dd4 <ADC_Enable+0x98>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dbc:	f043 0210 	orr.w	r2, r3, #16
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc8:	f043 0201 	orr.w	r2, r3, #1
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	661a      	str	r2, [r3, #96]	; 0x60
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e007      	b.n	8006de4 <ADC_Enable+0xa8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d1d6      	bne.n	8006d90 <ADC_Enable+0x54>
 8006de2:	2300      	movs	r3, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	8000003f 	.word	0x8000003f

08006df0 <ADC_DMAConvCplt>:
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d14b      	bne.n	8006ea2 <ADC_DMAConvCplt+0xb2>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d021      	beq.n	8006e68 <ADC_DMAConvCplt+0x78>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe fc7d 	bl	8005728 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d032      	beq.n	8006e9a <ADC_DMAConvCplt+0xaa>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d12b      	bne.n	8006e9a <ADC_DMAConvCplt+0xaa>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d11f      	bne.n	8006e9a <ADC_DMAConvCplt+0xaa>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5e:	f043 0201 	orr.w	r2, r3, #1
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e66:	e018      	b.n	8006e9a <ADC_DMAConvCplt+0xaa>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d111      	bne.n	8006e9a <ADC_DMAConvCplt+0xaa>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d105      	bne.n	8006e9a <ADC_DMAConvCplt+0xaa>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e92:	f043 0201 	orr.w	r2, r3, #1
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f7ff f8f6 	bl	800608c <HAL_ADC_ConvCpltCallback>
 8006ea0:	e00e      	b.n	8006ec0 <ADC_DMAConvCplt+0xd0>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea6:	f003 0310 	and.w	r3, r3, #16
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <ADC_DMAConvCplt+0xc6>
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f7ff f900 	bl	80060b4 <HAL_ADC_ErrorCallback>
 8006eb4:	e004      	b.n	8006ec0 <ADC_DMAConvCplt+0xd0>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	4798      	blx	r3
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <ADC_DMAHalfConvCplt>:
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff f8e2 	bl	80060a0 <HAL_ADC_ConvHalfCpltCallback>
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <ADC_DMAError>:
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f02:	f043 0204 	orr.w	r2, r3, #4
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	661a      	str	r2, [r3, #96]	; 0x60
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f7ff f8d2 	bl	80060b4 <HAL_ADC_ErrorCallback>
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <LL_ADC_IsEnabled>:
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <LL_ADC_IsEnabled+0x18>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <LL_ADC_IsEnabled+0x1a>
 8006f30:	2300      	movs	r3, #0
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <LL_ADC_REG_IsConversionOngoing>:
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d101      	bne.n	8006f56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e000      	b.n	8006f58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f56:	2300      	movs	r3, #0
 8006f58:	4618      	mov	r0, r3
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_ADCEx_MultiModeConfigChannel>:
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b0a1      	sub	sp, #132	; 0x84
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e0e3      	b.n	800714a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f92:	d102      	bne.n	8006f9a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8006f94:	4b6f      	ldr	r3, [pc, #444]	; (8007154 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006f96:	60bb      	str	r3, [r7, #8]
 8006f98:	e009      	b.n	8006fae <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a6e      	ldr	r2, [pc, #440]	; (8007158 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d102      	bne.n	8006faa <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8006fa4:	4b6d      	ldr	r3, [pc, #436]	; (800715c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006fa6:	60bb      	str	r3, [r7, #8]
 8006fa8:	e001      	b.n	8006fae <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006faa:	2300      	movs	r3, #0
 8006fac:	60bb      	str	r3, [r7, #8]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10b      	bne.n	8006fcc <HAL_ADCEx_MultiModeConfigChannel+0x68>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb8:	f043 0220 	orr.w	r2, r3, #32
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e0be      	b.n	800714a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff ffb5 	bl	8006f3e <LL_ADC_REG_IsConversionOngoing>
 8006fd4:	67b8      	str	r0, [r7, #120]	; 0x78
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff ffaf 	bl	8006f3e <LL_ADC_REG_IsConversionOngoing>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f040 80a0 	bne.w	8007128 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
 8006fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f040 809c 	bne.w	8007128 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ff8:	d004      	beq.n	8007004 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a55      	ldr	r2, [pc, #340]	; (8007154 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d101      	bne.n	8007008 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8007004:	4b56      	ldr	r3, [pc, #344]	; (8007160 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007006:	e000      	b.n	800700a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8007008:	4b56      	ldr	r3, [pc, #344]	; (8007164 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800700a:	677b      	str	r3, [r7, #116]	; 0x74
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d04b      	beq.n	80070ac <HAL_ADCEx_MultiModeConfigChannel+0x148>
 8007014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	6859      	ldr	r1, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007026:	035b      	lsls	r3, r3, #13
 8007028:	430b      	orrs	r3, r1
 800702a:	431a      	orrs	r2, r3
 800702c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800702e:	609a      	str	r2, [r3, #8]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007038:	d004      	beq.n	8007044 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a45      	ldr	r2, [pc, #276]	; (8007154 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d10f      	bne.n	8007064 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8007044:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007048:	f7ff ff66 	bl	8006f18 <LL_ADC_IsEnabled>
 800704c:	4604      	mov	r4, r0
 800704e:	4841      	ldr	r0, [pc, #260]	; (8007154 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007050:	f7ff ff62 	bl	8006f18 <LL_ADC_IsEnabled>
 8007054:	4603      	mov	r3, r0
 8007056:	4323      	orrs	r3, r4
 8007058:	2b00      	cmp	r3, #0
 800705a:	bf0c      	ite	eq
 800705c:	2301      	moveq	r3, #1
 800705e:	2300      	movne	r3, #0
 8007060:	b2db      	uxtb	r3, r3
 8007062:	e012      	b.n	800708a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8007064:	483c      	ldr	r0, [pc, #240]	; (8007158 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8007066:	f7ff ff57 	bl	8006f18 <LL_ADC_IsEnabled>
 800706a:	4604      	mov	r4, r0
 800706c:	483b      	ldr	r0, [pc, #236]	; (800715c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800706e:	f7ff ff53 	bl	8006f18 <LL_ADC_IsEnabled>
 8007072:	4603      	mov	r3, r0
 8007074:	431c      	orrs	r4, r3
 8007076:	483c      	ldr	r0, [pc, #240]	; (8007168 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007078:	f7ff ff4e 	bl	8006f18 <LL_ADC_IsEnabled>
 800707c:	4603      	mov	r3, r0
 800707e:	4323      	orrs	r3, r4
 8007080:	2b00      	cmp	r3, #0
 8007082:	bf0c      	ite	eq
 8007084:	2301      	moveq	r3, #1
 8007086:	2300      	movne	r3, #0
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d056      	beq.n	800713c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
 800708e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007096:	f023 030f 	bic.w	r3, r3, #15
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	6811      	ldr	r1, [r2, #0]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	6892      	ldr	r2, [r2, #8]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	431a      	orrs	r2, r3
 80070a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070a8:	609a      	str	r2, [r3, #8]
 80070aa:	e047      	b.n	800713c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
 80070ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b6:	609a      	str	r2, [r3, #8]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070c0:	d004      	beq.n	80070cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a23      	ldr	r2, [pc, #140]	; (8007154 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d10f      	bne.n	80070ec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80070cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80070d0:	f7ff ff22 	bl	8006f18 <LL_ADC_IsEnabled>
 80070d4:	4604      	mov	r4, r0
 80070d6:	481f      	ldr	r0, [pc, #124]	; (8007154 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80070d8:	f7ff ff1e 	bl	8006f18 <LL_ADC_IsEnabled>
 80070dc:	4603      	mov	r3, r0
 80070de:	4323      	orrs	r3, r4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	bf0c      	ite	eq
 80070e4:	2301      	moveq	r3, #1
 80070e6:	2300      	movne	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	e012      	b.n	8007112 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80070ec:	481a      	ldr	r0, [pc, #104]	; (8007158 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80070ee:	f7ff ff13 	bl	8006f18 <LL_ADC_IsEnabled>
 80070f2:	4604      	mov	r4, r0
 80070f4:	4819      	ldr	r0, [pc, #100]	; (800715c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80070f6:	f7ff ff0f 	bl	8006f18 <LL_ADC_IsEnabled>
 80070fa:	4603      	mov	r3, r0
 80070fc:	431c      	orrs	r4, r3
 80070fe:	481a      	ldr	r0, [pc, #104]	; (8007168 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007100:	f7ff ff0a 	bl	8006f18 <LL_ADC_IsEnabled>
 8007104:	4603      	mov	r3, r0
 8007106:	4323      	orrs	r3, r4
 8007108:	2b00      	cmp	r3, #0
 800710a:	bf0c      	ite	eq
 800710c:	2301      	moveq	r3, #1
 800710e:	2300      	movne	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d012      	beq.n	800713c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
 8007116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800711e:	f023 030f 	bic.w	r3, r3, #15
 8007122:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007124:	6093      	str	r3, [r2, #8]
 8007126:	e009      	b.n	800713c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712c:	f043 0220 	orr.w	r2, r3, #32
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	65da      	str	r2, [r3, #92]	; 0x5c
 8007134:	2301      	movs	r3, #1
 8007136:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800713a:	e000      	b.n	800713e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
 800713c:	bf00      	nop
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007146:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800714a:	4618      	mov	r0, r3
 800714c:	3784      	adds	r7, #132	; 0x84
 800714e:	46bd      	mov	sp, r7
 8007150:	bd90      	pop	{r4, r7, pc}
 8007152:	bf00      	nop
 8007154:	50000100 	.word	0x50000100
 8007158:	50000400 	.word	0x50000400
 800715c:	50000500 	.word	0x50000500
 8007160:	50000300 	.word	0x50000300
 8007164:	50000700 	.word	0x50000700
 8007168:	50000600 	.word	0x50000600

0800716c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e023      	b.n	80071c6 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7fc fd80 	bl	8003c98 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f003 0307 	and.w	r3, r3, #7
 80071de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071e0:	4b0c      	ldr	r3, [pc, #48]	; (8007214 <__NVIC_SetPriorityGrouping+0x44>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80071ec:	4013      	ands	r3, r2
 80071ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80071f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80071fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007202:	4a04      	ldr	r2, [pc, #16]	; (8007214 <__NVIC_SetPriorityGrouping+0x44>)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	60d3      	str	r3, [r2, #12]
}
 8007208:	bf00      	nop
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	e000ed00 	.word	0xe000ed00

08007218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800721c:	4b04      	ldr	r3, [pc, #16]	; (8007230 <__NVIC_GetPriorityGrouping+0x18>)
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	0a1b      	lsrs	r3, r3, #8
 8007222:	f003 0307 	and.w	r3, r3, #7
}
 8007226:	4618      	mov	r0, r3
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	e000ed00 	.word	0xe000ed00

08007234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800723e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007242:	2b00      	cmp	r3, #0
 8007244:	db0b      	blt.n	800725e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	f003 021f 	and.w	r2, r3, #31
 800724c:	4907      	ldr	r1, [pc, #28]	; (800726c <__NVIC_EnableIRQ+0x38>)
 800724e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007252:	095b      	lsrs	r3, r3, #5
 8007254:	2001      	movs	r0, #1
 8007256:	fa00 f202 	lsl.w	r2, r0, r2
 800725a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	e000e100 	.word	0xe000e100

08007270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	6039      	str	r1, [r7, #0]
 800727a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800727c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007280:	2b00      	cmp	r3, #0
 8007282:	db0a      	blt.n	800729a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	b2da      	uxtb	r2, r3
 8007288:	490c      	ldr	r1, [pc, #48]	; (80072bc <__NVIC_SetPriority+0x4c>)
 800728a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800728e:	0112      	lsls	r2, r2, #4
 8007290:	b2d2      	uxtb	r2, r2
 8007292:	440b      	add	r3, r1
 8007294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007298:	e00a      	b.n	80072b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	b2da      	uxtb	r2, r3
 800729e:	4908      	ldr	r1, [pc, #32]	; (80072c0 <__NVIC_SetPriority+0x50>)
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	f003 030f 	and.w	r3, r3, #15
 80072a6:	3b04      	subs	r3, #4
 80072a8:	0112      	lsls	r2, r2, #4
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	440b      	add	r3, r1
 80072ae:	761a      	strb	r2, [r3, #24]
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	e000e100 	.word	0xe000e100
 80072c0:	e000ed00 	.word	0xe000ed00

080072c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b089      	sub	sp, #36	; 0x24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	f1c3 0307 	rsb	r3, r3, #7
 80072de:	2b04      	cmp	r3, #4
 80072e0:	bf28      	it	cs
 80072e2:	2304      	movcs	r3, #4
 80072e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	3304      	adds	r3, #4
 80072ea:	2b06      	cmp	r3, #6
 80072ec:	d902      	bls.n	80072f4 <NVIC_EncodePriority+0x30>
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	3b03      	subs	r3, #3
 80072f2:	e000      	b.n	80072f6 <NVIC_EncodePriority+0x32>
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072f8:	f04f 32ff 	mov.w	r2, #4294967295
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007302:	43da      	mvns	r2, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	401a      	ands	r2, r3
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800730c:	f04f 31ff 	mov.w	r1, #4294967295
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	fa01 f303 	lsl.w	r3, r1, r3
 8007316:	43d9      	mvns	r1, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800731c:	4313      	orrs	r3, r2
         );
}
 800731e:	4618      	mov	r0, r3
 8007320:	3724      	adds	r7, #36	; 0x24
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
	...

0800732c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3b01      	subs	r3, #1
 8007338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800733c:	d301      	bcc.n	8007342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800733e:	2301      	movs	r3, #1
 8007340:	e00f      	b.n	8007362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007342:	4a0a      	ldr	r2, [pc, #40]	; (800736c <SysTick_Config+0x40>)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3b01      	subs	r3, #1
 8007348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800734a:	210f      	movs	r1, #15
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	f7ff ff8e 	bl	8007270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007354:	4b05      	ldr	r3, [pc, #20]	; (800736c <SysTick_Config+0x40>)
 8007356:	2200      	movs	r2, #0
 8007358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800735a:	4b04      	ldr	r3, [pc, #16]	; (800736c <SysTick_Config+0x40>)
 800735c:	2207      	movs	r2, #7
 800735e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	e000e010 	.word	0xe000e010

08007370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff ff29 	bl	80071d0 <__NVIC_SetPriorityGrouping>
}
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af00      	add	r7, sp, #0
 800738c:	4603      	mov	r3, r0
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007394:	f7ff ff40 	bl	8007218 <__NVIC_GetPriorityGrouping>
 8007398:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	6978      	ldr	r0, [r7, #20]
 80073a0:	f7ff ff90 	bl	80072c4 <NVIC_EncodePriority>
 80073a4:	4602      	mov	r2, r0
 80073a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073aa:	4611      	mov	r1, r2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff ff5f 	bl	8007270 <__NVIC_SetPriority>
}
 80073b2:	bf00      	nop
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	4603      	mov	r3, r0
 80073c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff ff33 	bl	8007234 <__NVIC_EnableIRQ>
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff ffa4 	bl	800732c <SysTick_Config>
 80073e4:	4603      	mov	r3, r0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
	...

080073f0 <HAL_DMA_Init>:
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_DMA_Init+0x12>
 80073fe:	2301      	movs	r3, #1
 8007400:	e08d      	b.n	800751e <HAL_DMA_Init+0x12e>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	4b47      	ldr	r3, [pc, #284]	; (8007528 <HAL_DMA_Init+0x138>)
 800740a:	429a      	cmp	r2, r3
 800740c:	d80f      	bhi.n	800742e <HAL_DMA_Init+0x3e>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	4b45      	ldr	r3, [pc, #276]	; (800752c <HAL_DMA_Init+0x13c>)
 8007416:	4413      	add	r3, r2
 8007418:	4a45      	ldr	r2, [pc, #276]	; (8007530 <HAL_DMA_Init+0x140>)
 800741a:	fba2 2303 	umull	r2, r3, r2, r3
 800741e:	091b      	lsrs	r3, r3, #4
 8007420:	009a      	lsls	r2, r3, #2
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	645a      	str	r2, [r3, #68]	; 0x44
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a42      	ldr	r2, [pc, #264]	; (8007534 <HAL_DMA_Init+0x144>)
 800742a:	641a      	str	r2, [r3, #64]	; 0x40
 800742c:	e00e      	b.n	800744c <HAL_DMA_Init+0x5c>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	4b40      	ldr	r3, [pc, #256]	; (8007538 <HAL_DMA_Init+0x148>)
 8007436:	4413      	add	r3, r2
 8007438:	4a3d      	ldr	r2, [pc, #244]	; (8007530 <HAL_DMA_Init+0x140>)
 800743a:	fba2 2303 	umull	r2, r3, r2, r3
 800743e:	091b      	lsrs	r3, r3, #4
 8007440:	009a      	lsls	r2, r3, #2
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	645a      	str	r2, [r3, #68]	; 0x44
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a3c      	ldr	r2, [pc, #240]	; (800753c <HAL_DMA_Init+0x14c>)
 800744a:	641a      	str	r2, [r3, #64]	; 0x40
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	4313      	orrs	r3, r2
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f9b6 	bl	8007810 <DMA_CalcDMAMUXChannelBaseAndMask>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074ac:	d102      	bne.n	80074b4 <HAL_DMA_Init+0xc4>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	605a      	str	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074bc:	b2d2      	uxtb	r2, r2
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80074c8:	605a      	str	r2, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d010      	beq.n	80074f4 <HAL_DMA_Init+0x104>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d80c      	bhi.n	80074f4 <HAL_DMA_Init+0x104>
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f9d6 	bl	800788c <DMA_CalcDMAMUXRequestGenBaseAndMask>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	e008      	b.n	8007506 <HAL_DMA_Init+0x116>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	655a      	str	r2, [r3, #84]	; 0x54
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	659a      	str	r2, [r3, #88]	; 0x58
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	65da      	str	r2, [r3, #92]	; 0x5c
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	63da      	str	r2, [r3, #60]	; 0x3c
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800751c:	2300      	movs	r3, #0
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	40020407 	.word	0x40020407
 800752c:	bffdfff8 	.word	0xbffdfff8
 8007530:	cccccccd 	.word	0xcccccccd
 8007534:	40020000 	.word	0x40020000
 8007538:	bffdfbf8 	.word	0xbffdfbf8
 800753c:	40020400 	.word	0x40020400

08007540 <HAL_DMA_Start_IT>:
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
 800754e:	2300      	movs	r3, #0
 8007550:	75fb      	strb	r3, [r7, #23]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_DMA_Start_IT+0x20>
 800755c:	2302      	movs	r3, #2
 800755e:	e066      	b.n	800762e <HAL_DMA_Start_IT+0xee>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b01      	cmp	r3, #1
 8007572:	d155      	bne.n	8007620 <HAL_DMA_Start_IT+0xe0>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	63da      	str	r2, [r3, #60]	; 0x3c
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0201 	bic.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	68b9      	ldr	r1, [r7, #8]
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 f8fb 	bl	8007794 <DMA_SetConfig>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d008      	beq.n	80075b8 <HAL_DMA_Start_IT+0x78>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f042 020e 	orr.w	r2, r2, #14
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	e00f      	b.n	80075d8 <HAL_DMA_Start_IT+0x98>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0204 	bic.w	r2, r2, #4
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 020a 	orr.w	r2, r2, #10
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d007      	beq.n	80075f6 <HAL_DMA_Start_IT+0xb6>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d007      	beq.n	800760e <HAL_DMA_Start_IT+0xce>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 0201 	orr.w	r2, r2, #1
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	e005      	b.n	800762c <HAL_DMA_Start_IT+0xec>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007628:	2302      	movs	r3, #2
 800762a:	75fb      	strb	r3, [r7, #23]
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_DMA_IRQHandler>:
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60bb      	str	r3, [r7, #8]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007652:	f003 031f 	and.w	r3, r3, #31
 8007656:	2204      	movs	r2, #4
 8007658:	409a      	lsls	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4013      	ands	r3, r2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d026      	beq.n	80076b0 <HAL_DMA_IRQHandler+0x7a>
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b00      	cmp	r3, #0
 800766a:	d021      	beq.n	80076b0 <HAL_DMA_IRQHandler+0x7a>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0320 	and.w	r3, r3, #32
 8007676:	2b00      	cmp	r3, #0
 8007678:	d107      	bne.n	800768a <HAL_DMA_IRQHandler+0x54>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0204 	bic.w	r2, r2, #4
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768e:	f003 021f 	and.w	r2, r3, #31
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	2104      	movs	r1, #4
 8007698:	fa01 f202 	lsl.w	r2, r1, r2
 800769c:	605a      	str	r2, [r3, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d071      	beq.n	800778a <HAL_DMA_IRQHandler+0x154>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	4798      	blx	r3
 80076ae:	e06c      	b.n	800778a <HAL_DMA_IRQHandler+0x154>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	2202      	movs	r2, #2
 80076ba:	409a      	lsls	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4013      	ands	r3, r2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d02e      	beq.n	8007722 <HAL_DMA_IRQHandler+0xec>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f003 0302 	and.w	r3, r3, #2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d029      	beq.n	8007722 <HAL_DMA_IRQHandler+0xec>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0320 	and.w	r3, r3, #32
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10b      	bne.n	80076f4 <HAL_DMA_IRQHandler+0xbe>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 020a 	bic.w	r2, r2, #10
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f8:	f003 021f 	and.w	r2, r3, #31
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007700:	2102      	movs	r1, #2
 8007702:	fa01 f202 	lsl.w	r2, r1, r2
 8007706:	605a      	str	r2, [r3, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d038      	beq.n	800778a <HAL_DMA_IRQHandler+0x154>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	4798      	blx	r3
 8007720:	e033      	b.n	800778a <HAL_DMA_IRQHandler+0x154>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	2208      	movs	r2, #8
 800772c:	409a      	lsls	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4013      	ands	r3, r2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d02a      	beq.n	800778c <HAL_DMA_IRQHandler+0x156>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f003 0308 	and.w	r3, r3, #8
 800773c:	2b00      	cmp	r3, #0
 800773e:	d025      	beq.n	800778c <HAL_DMA_IRQHandler+0x156>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 020e 	bic.w	r2, r2, #14
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007754:	f003 021f 	and.w	r2, r3, #31
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	2101      	movs	r1, #1
 800775e:	fa01 f202 	lsl.w	r2, r1, r2
 8007762:	605a      	str	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	63da      	str	r2, [r3, #60]	; 0x3c
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777e:	2b00      	cmp	r3, #0
 8007780:	d004      	beq.n	800778c <HAL_DMA_IRQHandler+0x156>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	4798      	blx	r3
 800778a:	bf00      	nop
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <DMA_SetConfig>:
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80077aa:	605a      	str	r2, [r3, #4]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d004      	beq.n	80077be <DMA_SetConfig+0x2a>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80077bc:	605a      	str	r2, [r3, #4]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c2:	f003 021f 	and.w	r2, r3, #31
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	2101      	movs	r1, #1
 80077cc:	fa01 f202 	lsl.w	r2, r1, r2
 80077d0:	605a      	str	r2, [r3, #4]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	605a      	str	r2, [r3, #4]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d108      	bne.n	80077f4 <DMA_SetConfig+0x60>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	609a      	str	r2, [r3, #8]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	60da      	str	r2, [r3, #12]
 80077f2:	e007      	b.n	8007804 <DMA_SetConfig+0x70>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	609a      	str	r2, [r3, #8]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	60da      	str	r2, [r3, #12]
 8007804:	bf00      	nop
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <DMA_CalcDMAMUXChannelBaseAndMask>:
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	461a      	mov	r2, r3
 800781e:	4b16      	ldr	r3, [pc, #88]	; (8007878 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007820:	429a      	cmp	r2, r3
 8007822:	d802      	bhi.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
 8007824:	4b15      	ldr	r3, [pc, #84]	; (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	e001      	b.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
 800782a:	4b15      	ldr	r3, [pc, #84]	; (8007880 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	3b08      	subs	r3, #8
 800783a:	4a12      	ldr	r2, [pc, #72]	; (8007884 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800783c:	fba2 2303 	umull	r2, r3, r2, r3
 8007840:	091b      	lsrs	r3, r3, #4
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007848:	089b      	lsrs	r3, r3, #2
 800784a:	009a      	lsls	r2, r3, #2
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	4413      	add	r3, r2
 8007850:	461a      	mov	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	649a      	str	r2, [r3, #72]	; 0x48
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a0b      	ldr	r2, [pc, #44]	; (8007888 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800785a:	64da      	str	r2, [r3, #76]	; 0x4c
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	2201      	movs	r2, #1
 8007864:	409a      	lsls	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	651a      	str	r2, [r3, #80]	; 0x50
 800786a:	bf00      	nop
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40020407 	.word	0x40020407
 800787c:	40020800 	.word	0x40020800
 8007880:	40020820 	.word	0x40020820
 8007884:	cccccccd 	.word	0xcccccccd
 8007888:	40020880 	.word	0x40020880

0800788c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	461a      	mov	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	655a      	str	r2, [r3, #84]	; 0x54
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a08      	ldr	r2, [pc, #32]	; (80078d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80078ae:	659a      	str	r2, [r3, #88]	; 0x58
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	f003 031f 	and.w	r3, r3, #31
 80078b8:	2201      	movs	r2, #1
 80078ba:	409a      	lsls	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	65da      	str	r2, [r3, #92]	; 0x5c
 80078c0:	bf00      	nop
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	1000823f 	.word	0x1000823f
 80078d0:	40020940 	.word	0x40020940

080078d4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d12b      	bne.n	8007942 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_DMAEx_ConfigMuxSync+0x24>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e025      	b.n	8007944 <HAL_DMAEx_ConfigMuxSync+0x70>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	b2d9      	uxtb	r1, r3
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	061a      	lsls	r2, r3, #24
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	3b01      	subs	r3, #1
 8007914:	04db      	lsls	r3, r3, #19
 8007916:	431a      	orrs	r2, r3
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	431a      	orrs	r2, r3
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	7a1b      	ldrb	r3, [r3, #8]
 8007922:	041b      	lsls	r3, r3, #16
 8007924:	431a      	orrs	r2, r3
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	7a5b      	ldrb	r3, [r3, #9]
 800792a:	025b      	lsls	r3, r3, #9
 800792c:	431a      	orrs	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007932:	430a      	orrs	r2, r1
 8007934:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	e000      	b.n	8007944 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
  }
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007962:	4013      	ands	r3, r2
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01a      	beq.n	800799e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007972:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007976:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007980:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007986:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d022      	beq.n	80079ec <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b0:	4013      	ands	r3, r2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d01a      	beq.n	80079ec <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80079ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	4798      	blx	r3
      }
    }
  }
}
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e033      	b.n	8007a6e <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d106      	bne.n	8007a20 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7fc f9ba 	bl	8003d94 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f854 	bl	8007ad4 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_TIMEOUT)
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f822 	bl	8007a76 <FMAC_Reset>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d10c      	bne.n	8007a52 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3c:	f043 0210 	orr.w	r2, r3, #16
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	22a0      	movs	r2, #160	; 0xa0
 8007a48:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	73fb      	strb	r3, [r7, #15]
 8007a50:	e008      	b.n	8007a64 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a7e:	f7fd fd75 	bl	800556c <HAL_GetTick>
 8007a82:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007a92:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007a94:	e00f      	b.n	8007ab6 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007a96:	f7fd fd69 	bl	800556c <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007aa4:	d907      	bls.n	8007ab6 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aaa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e00a      	b.n	8007acc <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e8      	bne.n	8007a96 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f807 	bl	8007af0 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f81b 	bl	8007b1e <FMAC_ResetOutputStateAndDataPointers>
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007b5a:	e15a      	b.n	8007e12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	2101      	movs	r1, #1
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	fa01 f303 	lsl.w	r3, r1, r3
 8007b68:	4013      	ands	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 814c 	beq.w	8007e0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d00b      	beq.n	8007b94 <HAL_GPIO_Init+0x48>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d007      	beq.n	8007b94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007b88:	2b11      	cmp	r3, #17
 8007b8a:	d003      	beq.n	8007b94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	2b12      	cmp	r3, #18
 8007b92:	d130      	bne.n	8007bf6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	2203      	movs	r2, #3
 8007ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba4:	43db      	mvns	r3, r3
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4013      	ands	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	005b      	lsls	r3, r3, #1
 8007bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bca:	2201      	movs	r2, #1
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd2:	43db      	mvns	r3, r3
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	091b      	lsrs	r3, r3, #4
 8007be0:	f003 0201 	and.w	r2, r3, #1
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	2203      	movs	r2, #3
 8007c02:	fa02 f303 	lsl.w	r3, r2, r3
 8007c06:	43db      	mvns	r3, r3
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	689a      	ldr	r2, [r3, #8]
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d003      	beq.n	8007c36 <HAL_GPIO_Init+0xea>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b12      	cmp	r3, #18
 8007c34:	d123      	bne.n	8007c7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	08da      	lsrs	r2, r3, #3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3208      	adds	r2, #8
 8007c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	220f      	movs	r2, #15
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	43db      	mvns	r3, r3
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4013      	ands	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	691a      	ldr	r2, [r3, #16]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	08da      	lsrs	r2, r3, #3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3208      	adds	r2, #8
 8007c78:	6939      	ldr	r1, [r7, #16]
 8007c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	2203      	movs	r2, #3
 8007c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8e:	43db      	mvns	r3, r3
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	4013      	ands	r3, r2
 8007c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f003 0203 	and.w	r2, r3, #3
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 80a6 	beq.w	8007e0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cc0:	4b5b      	ldr	r3, [pc, #364]	; (8007e30 <HAL_GPIO_Init+0x2e4>)
 8007cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc4:	4a5a      	ldr	r2, [pc, #360]	; (8007e30 <HAL_GPIO_Init+0x2e4>)
 8007cc6:	f043 0301 	orr.w	r3, r3, #1
 8007cca:	6613      	str	r3, [r2, #96]	; 0x60
 8007ccc:	4b58      	ldr	r3, [pc, #352]	; (8007e30 <HAL_GPIO_Init+0x2e4>)
 8007cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	60bb      	str	r3, [r7, #8]
 8007cd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007cd8:	4a56      	ldr	r2, [pc, #344]	; (8007e34 <HAL_GPIO_Init+0x2e8>)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	089b      	lsrs	r3, r3, #2
 8007cde:	3302      	adds	r3, #2
 8007ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f003 0303 	and.w	r3, r3, #3
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	220f      	movs	r2, #15
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	43db      	mvns	r3, r3
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007d02:	d01f      	beq.n	8007d44 <HAL_GPIO_Init+0x1f8>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a4c      	ldr	r2, [pc, #304]	; (8007e38 <HAL_GPIO_Init+0x2ec>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d019      	beq.n	8007d40 <HAL_GPIO_Init+0x1f4>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a4b      	ldr	r2, [pc, #300]	; (8007e3c <HAL_GPIO_Init+0x2f0>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d013      	beq.n	8007d3c <HAL_GPIO_Init+0x1f0>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a4a      	ldr	r2, [pc, #296]	; (8007e40 <HAL_GPIO_Init+0x2f4>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00d      	beq.n	8007d38 <HAL_GPIO_Init+0x1ec>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a49      	ldr	r2, [pc, #292]	; (8007e44 <HAL_GPIO_Init+0x2f8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d007      	beq.n	8007d34 <HAL_GPIO_Init+0x1e8>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a48      	ldr	r2, [pc, #288]	; (8007e48 <HAL_GPIO_Init+0x2fc>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d101      	bne.n	8007d30 <HAL_GPIO_Init+0x1e4>
 8007d2c:	2305      	movs	r3, #5
 8007d2e:	e00a      	b.n	8007d46 <HAL_GPIO_Init+0x1fa>
 8007d30:	2306      	movs	r3, #6
 8007d32:	e008      	b.n	8007d46 <HAL_GPIO_Init+0x1fa>
 8007d34:	2304      	movs	r3, #4
 8007d36:	e006      	b.n	8007d46 <HAL_GPIO_Init+0x1fa>
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e004      	b.n	8007d46 <HAL_GPIO_Init+0x1fa>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e002      	b.n	8007d46 <HAL_GPIO_Init+0x1fa>
 8007d40:	2301      	movs	r3, #1
 8007d42:	e000      	b.n	8007d46 <HAL_GPIO_Init+0x1fa>
 8007d44:	2300      	movs	r3, #0
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	f002 0203 	and.w	r2, r2, #3
 8007d4c:	0092      	lsls	r2, r2, #2
 8007d4e:	4093      	lsls	r3, r2
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d56:	4937      	ldr	r1, [pc, #220]	; (8007e34 <HAL_GPIO_Init+0x2e8>)
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	089b      	lsrs	r3, r3, #2
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007d64:	4b39      	ldr	r3, [pc, #228]	; (8007e4c <HAL_GPIO_Init+0x300>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	43db      	mvns	r3, r3
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	4013      	ands	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007d88:	4a30      	ldr	r2, [pc, #192]	; (8007e4c <HAL_GPIO_Init+0x300>)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8007d8e:	4b2f      	ldr	r3, [pc, #188]	; (8007e4c <HAL_GPIO_Init+0x300>)
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	43db      	mvns	r3, r3
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007db2:	4a26      	ldr	r2, [pc, #152]	; (8007e4c <HAL_GPIO_Init+0x300>)
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007db8:	4b24      	ldr	r3, [pc, #144]	; (8007e4c <HAL_GPIO_Init+0x300>)
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007ddc:	4a1b      	ldr	r2, [pc, #108]	; (8007e4c <HAL_GPIO_Init+0x300>)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007de2:	4b1a      	ldr	r3, [pc, #104]	; (8007e4c <HAL_GPIO_Init+0x300>)
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	43db      	mvns	r3, r3
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4013      	ands	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007e06:	4a11      	ldr	r2, [pc, #68]	; (8007e4c <HAL_GPIO_Init+0x300>)
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f47f ae9d 	bne.w	8007b5c <HAL_GPIO_Init+0x10>
  }
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40021000 	.word	0x40021000
 8007e34:	40010000 	.word	0x40010000
 8007e38:	48000400 	.word	0x48000400
 8007e3c:	48000800 	.word	0x48000800
 8007e40:	48000c00 	.word	0x48000c00
 8007e44:	48001000 	.word	0x48001000
 8007e48:	48001400 	.word	0x48001400
 8007e4c:	40010400 	.word	0x40010400

08007e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	807b      	strh	r3, [r7, #2]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e60:	787b      	ldrb	r3, [r7, #1]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007e66:	887a      	ldrh	r2, [r7, #2]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007e6c:	e002      	b.n	8007e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007e6e:	887a      	ldrh	r2, [r7, #2]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e0be      	b.n	8008010 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2202      	movs	r2, #2
 8007e96:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d02e      	beq.n	8007f3c <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a4d      	ldr	r2, [pc, #308]	; (8008018 <HAL_HRTIM_Init+0x198>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d10b      	bne.n	8007f00 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007ee8:	4b4c      	ldr	r3, [pc, #304]	; (800801c <HAL_HRTIM_Init+0x19c>)
 8007eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eec:	4a4b      	ldr	r2, [pc, #300]	; (800801c <HAL_HRTIM_Init+0x19c>)
 8007eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ef2:	6613      	str	r3, [r2, #96]	; 0x60
 8007ef4:	4b49      	ldr	r3, [pc, #292]	; (800801c <HAL_HRTIM_Init+0x19c>)
 8007ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007f0e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f24:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7fc f9ab 	bl	8004298 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d012      	beq.n	8007f74 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f5c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007f84:	2300      	movs	r3, #0
 8007f86:	75fb      	strb	r3, [r7, #23]
 8007f88:	e03e      	b.n	8008008 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007f8a:	7dfa      	ldrb	r2, [r7, #23]
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	1a9b      	subs	r3, r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	440b      	add	r3, r1
 8007f98:	3318      	adds	r3, #24
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007f9e:	7dfa      	ldrb	r2, [r7, #23]
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	00db      	lsls	r3, r3, #3
 8007fa6:	1a9b      	subs	r3, r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	440b      	add	r3, r1
 8007fac:	331c      	adds	r3, #28
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007fb2:	7dfa      	ldrb	r2, [r7, #23]
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	1a9b      	subs	r3, r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	3320      	adds	r3, #32
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007fc6:	7dfa      	ldrb	r2, [r7, #23]
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	00db      	lsls	r3, r3, #3
 8007fce:	1a9b      	subs	r3, r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	3324      	adds	r3, #36	; 0x24
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007fda:	7dfa      	ldrb	r2, [r7, #23]
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	00db      	lsls	r3, r3, #3
 8007fe2:	1a9b      	subs	r3, r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	3328      	adds	r3, #40	; 0x28
 8007fea:	2200      	movs	r2, #0
 8007fec:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007fee:	7dfa      	ldrb	r2, [r7, #23]
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	00db      	lsls	r3, r3, #3
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	3330      	adds	r3, #48	; 0x30
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	3301      	adds	r3, #1
 8008006:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	2b06      	cmp	r3, #6
 800800c:	d9bd      	bls.n	8007f8a <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	40016800 	.word	0x40016800
 800801c:	40021000 	.word	0x40021000

08008020 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8008034:	2302      	movs	r3, #2
 8008036:	e045      	b.n	80080c4 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804e:	d114      	bne.n	800807a <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0202 	bic.w	r2, r2, #2
 8008060:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f042 0201 	orr.w	r2, r2, #1
 8008074:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8008078:	e01f      	b.n	80080ba <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f042 0202 	orr.w	r2, r2, #2
 800808a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008096:	f023 010c 	bic.w	r1, r3, #12
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	430a      	orrs	r2, r1
 80080a2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f042 0201 	orr.w	r2, r2, #1
 80080b6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80080da:	f7fd fa47 	bl	800556c <HAL_GetTick>
 80080de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80080e0:	e014      	b.n	800810c <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e8:	d010      	beq.n	800810c <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80080ea:	f7fd fa3f 	bl	800556c <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d302      	bcc.n	8008100 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d105      	bne.n	800810c <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2207      	movs	r2, #7
 8008104:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e011      	b.n	8008130 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800811c:	d1e1      	bne.n	80080e2 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b02      	cmp	r3, #2
 800814e:	d101      	bne.n	8008154 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8008150:	2302      	movs	r3, #2
 8008152:	e015      	b.n	8008180 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b06      	cmp	r3, #6
 8008160:	d104      	bne.n	800816c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f001 f97a 	bl	800945e <HRTIM_MasterBase_Config>
 800816a:	e004      	b.n	8008176 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f001 f9a3 	bl	80094bc <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_HRTIM_FaultConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Fault,
                                        HRTIM_FaultCfgTypeDef* pFaultCfg)
{
 8008188:	b480      	push	{r7}
 800818a:	b089      	sub	sp, #36	; 0x24
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_FAULTSOURCE(pFaultCfg->Source));
  assert_param(IS_HRTIM_FAULTPOLARITY(pFaultCfg->Polarity));
  assert_param(IS_HRTIM_FAULTFILTER(pFaultCfg->Filter));
  assert_param(IS_HRTIM_FAULTLOCK(pFaultCfg->Lock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d101      	bne.n	80081a4 <HAL_HRTIM_FaultConfig+0x1c>
  {
     return HAL_BUSY;
 80081a0:	2302      	movs	r3, #2
 80081a2:	e1aa      	b.n	80084fa <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d101      	bne.n	80081b2 <HAL_HRTIM_FaultConfig+0x2a>
 80081ae:	2302      	movs	r3, #2
 80081b0:	e1a3      	b.n	80084fa <HAL_HRTIM_FaultConfig+0x372>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2202      	movs	r2, #2
 80081be:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure fault channel */
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ca:	61fb      	str	r3, [r7, #28]
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081d4:	61bb      	str	r3, [r7, #24]

  source0 =  (pFaultCfg->Source & 1U);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	617b      	str	r3, [r7, #20]
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	085b      	lsrs	r3, r3, #1
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	613b      	str	r3, [r7, #16]

  switch (Fault)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	2b1f      	cmp	r3, #31
 80081f2:	f200 813f 	bhi.w	8008474 <HAL_HRTIM_FaultConfig+0x2ec>
 80081f6:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <HAL_HRTIM_FaultConfig+0x74>)
 80081f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fc:	0800827d 	.word	0x0800827d
 8008200:	080082cd 	.word	0x080082cd
 8008204:	08008475 	.word	0x08008475
 8008208:	08008323 	.word	0x08008323
 800820c:	08008475 	.word	0x08008475
 8008210:	08008475 	.word	0x08008475
 8008214:	08008475 	.word	0x08008475
 8008218:	08008379 	.word	0x08008379
 800821c:	08008475 	.word	0x08008475
 8008220:	08008475 	.word	0x08008475
 8008224:	08008475 	.word	0x08008475
 8008228:	08008475 	.word	0x08008475
 800822c:	08008475 	.word	0x08008475
 8008230:	08008475 	.word	0x08008475
 8008234:	08008475 	.word	0x08008475
 8008238:	080083cf 	.word	0x080083cf
 800823c:	08008475 	.word	0x08008475
 8008240:	08008475 	.word	0x08008475
 8008244:	08008475 	.word	0x08008475
 8008248:	08008475 	.word	0x08008475
 800824c:	08008475 	.word	0x08008475
 8008250:	08008475 	.word	0x08008475
 8008254:	08008475 	.word	0x08008475
 8008258:	08008475 	.word	0x08008475
 800825c:	08008475 	.word	0x08008475
 8008260:	08008475 	.word	0x08008475
 8008264:	08008475 	.word	0x08008475
 8008268:	08008475 	.word	0x08008475
 800826c:	08008475 	.word	0x08008475
 8008270:	08008475 	.word	0x08008475
 8008274:	08008475 	.word	0x08008475
 8008278:	0800841f 	.word	0x0800841f
  {
  case HRTIM_FAULT_1:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8008282:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	4313      	orrs	r3, r2
 8008290:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT1SRC_0_Pos);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	4313      	orrs	r3, r2
 800829a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT1SRC_1);
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082a2:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	041b      	lsls	r3, r3, #16
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80082b6:	69fa      	ldr	r2, [r7, #28]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	61fb      	str	r3, [r7, #28]
      break;
 80082ca:	e0dc      	b.n	8008486 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_2:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 80082d2:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	021b      	lsls	r3, r3, #8
 80082da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082de:	69fa      	ldr	r2, [r7, #28]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT2SRC_0_Pos);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	029b      	lsls	r3, r3, #10
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT2SRC_1);
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80082f4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	045b      	lsls	r3, r3, #17
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	021b      	lsls	r3, r3, #8
 8008306:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	4313      	orrs	r3, r2
 800830e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	021b      	lsls	r3, r3, #8
 8008316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800831a:	69fa      	ldr	r2, [r7, #28]
 800831c:	4313      	orrs	r3, r2
 800831e:	61fb      	str	r3, [r7, #28]
      break;
 8008320:	e0b1      	b.n	8008486 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_3:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
 8008328:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	041b      	lsls	r3, r3, #16
 8008330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008334:	69fa      	ldr	r2, [r7, #28]
 8008336:	4313      	orrs	r3, r2
 8008338:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT3SRC_0_Pos);
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	049b      	lsls	r3, r3, #18
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	4313      	orrs	r3, r2
 8008342:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT3SRC_1);
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800834a:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	049b      	lsls	r3, r3, #18
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	4313      	orrs	r3, r2
 8008354:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	041b      	lsls	r3, r3, #16
 800835c:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	4313      	orrs	r3, r2
 8008364:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	041b      	lsls	r3, r3, #16
 800836c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008370:	69fa      	ldr	r2, [r7, #28]
 8008372:	4313      	orrs	r3, r2
 8008374:	61fb      	str	r3, [r7, #28]
      break;
 8008376:	e086      	b.n	8008486 <HAL_HRTIM_FaultConfig+0x2fe>
     }

  case HRTIM_FAULT_4:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800837e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	061b      	lsls	r3, r3, #24
 8008386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800838a:	69fa      	ldr	r2, [r7, #28]
 800838c:	4313      	orrs	r3, r2
 800838e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT4SRC_0_Pos);
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	069b      	lsls	r3, r3, #26
 8008394:	69fa      	ldr	r2, [r7, #28]
 8008396:	4313      	orrs	r3, r2
 8008398:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT4SRC_1);
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80083a0:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	04db      	lsls	r3, r3, #19
 80083a6:	69ba      	ldr	r2, [r7, #24]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	061b      	lsls	r3, r3, #24
 80083b2:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 80083b6:	69fa      	ldr	r2, [r7, #28]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	061b      	lsls	r3, r3, #24
 80083c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	61fb      	str	r3, [r7, #28]
      break;
 80083cc:	e05b      	b.n	8008486 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_5:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC_0 | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80083d4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80083f4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT5SRC_1_Pos);
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	051b      	lsls	r3, r3, #20
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	4313      	orrs	r3, r2
 800840c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	4313      	orrs	r3, r2
 800841a:	61bb      	str	r3, [r7, #24]
      break;
 800841c:	e033      	b.n	8008486 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_6:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6P | HRTIM_FLTINR2_FLT6SRC_0 | HRTIM_FLTINR2_FLT6F | HRTIM_FLTINR2_FLT6LCK);
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8008424:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	021b      	lsls	r3, r3, #8
 800842c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	4313      	orrs	r3, r2
 8008434:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	029b      	lsls	r3, r3, #10
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	4313      	orrs	r3, r2
 800843e:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008446:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT6SRC_1_Pos);
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	055b      	lsls	r3, r3, #21
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	4313      	orrs	r3, r2
 8008450:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	4313      	orrs	r3, r2
 8008460:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	021b      	lsls	r3, r3, #8
 8008468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	4313      	orrs	r3, r2
 8008470:	61bb      	str	r3, [r7, #24]
      break;
 8008472:	e008      	b.n	8008486 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2207      	movs	r2, #7
 8008478:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8008484:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b07      	cmp	r3, #7
 8008490:	d101      	bne.n	8008496 <HAL_HRTIM_FaultConfig+0x30e>
  {
     return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e031      	b.n	80084fa <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Update the HRTIM registers except LOCK bit */
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 80084a0:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084b2:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  /* Update the HRTIM registers LOCK bit */
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	f248 0380 	movw	r3, #32896	; 0x8080
 80084dc:	4013      	ands	r3, r2
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	6812      	ldr	r2, [r2, #0]
 80084e2:	430b      	orrs	r3, r1
 80084e4:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3724      	adds	r7, #36	; 0x24
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop

08008508 <HAL_HRTIM_FaultPrescalerConfig>:
  * @note This function must be called before starting the timer and before
  *       enabling faults inputs
  */
HAL_StatusTypeDef HAL_HRTIM_FaultPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b02      	cmp	r3, #2
 800851c:	d101      	bne.n	8008522 <HAL_HRTIM_FaultPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 800851e:	2302      	movs	r3, #2
 8008520:	e025      	b.n	800856e <HAL_HRTIM_FaultPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_HRTIM_FaultPrescalerConfig+0x28>
 800852c:	2302      	movs	r3, #2
 800852e:	e01e      	b.n	800856e <HAL_HRTIM_FaultPrescalerConfig+0x66>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008548:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
	...

0800857c <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultBlankingConfigAndEnable(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t Fault,
                                                HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTBLANKNGMODE(pFaultBlkCfg->BlankingSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b02      	cmp	r3, #2
 8008592:	d101      	bne.n	8008598 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1c>
  {
     return HAL_BUSY;
 8008594:	2302      	movs	r3, #2
 8008596:	e0d7      	b.n	8008748 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x2a>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e0d0      	b.n	8008748 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2202      	movs	r2, #2
 80085b2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	2b1f      	cmp	r3, #31
 80085bc:	f200 80aa 	bhi.w	8008714 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x198>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x4c>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	08008649 	.word	0x08008649
 80085cc:	0800866b 	.word	0x0800866b
 80085d0:	08008715 	.word	0x08008715
 80085d4:	0800868d 	.word	0x0800868d
 80085d8:	08008715 	.word	0x08008715
 80085dc:	08008715 	.word	0x08008715
 80085e0:	08008715 	.word	0x08008715
 80085e4:	080086af 	.word	0x080086af
 80085e8:	08008715 	.word	0x08008715
 80085ec:	08008715 	.word	0x08008715
 80085f0:	08008715 	.word	0x08008715
 80085f4:	08008715 	.word	0x08008715
 80085f8:	08008715 	.word	0x08008715
 80085fc:	08008715 	.word	0x08008715
 8008600:	08008715 	.word	0x08008715
 8008604:	080086d1 	.word	0x080086d1
 8008608:	08008715 	.word	0x08008715
 800860c:	08008715 	.word	0x08008715
 8008610:	08008715 	.word	0x08008715
 8008614:	08008715 	.word	0x08008715
 8008618:	08008715 	.word	0x08008715
 800861c:	08008715 	.word	0x08008715
 8008620:	08008715 	.word	0x08008715
 8008624:	08008715 	.word	0x08008715
 8008628:	08008715 	.word	0x08008715
 800862c:	08008715 	.word	0x08008715
 8008630:	08008715 	.word	0x08008715
 8008634:	08008715 	.word	0x08008715
 8008638:	08008715 	.word	0x08008715
 800863c:	08008715 	.word	0x08008715
 8008640:	08008715 	.word	0x08008715
 8008644:	080086f3 	.word	0x080086f3
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008650:	f023 0203 	bic.w	r2, r3, #3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	431a      	orrs	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f042 0201 	orr.w	r2, r2, #1
 8008664:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1BLKS | HRTIM_FLTINR3_FLT1BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT1BLKS_Pos) |
                  HRTIM_FLTINR3_FLT1BLKE));
       break;
 8008668:	e05d      	b.n	8008726 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	025b      	lsls	r3, r3, #9
 800867c:	431a      	orrs	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008686:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2BLKS | HRTIM_FLTINR3_FLT2BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT2BLKS_Pos) |
                  HRTIM_FLTINR3_FLT2BLKE));
       break;
 800868a:	e04c      	b.n	8008726 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	045b      	lsls	r3, r3, #17
 800869e:	431a      	orrs	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80086a8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3BLKS | HRTIM_FLTINR3_FLT3BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT3BLKS_Pos) |
                  HRTIM_FLTINR3_FLT3BLKE));
       break;
 80086ac:	e03b      	b.n	8008726 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80086b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	065b      	lsls	r3, r3, #25
 80086c0:	431a      	orrs	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80086ca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4BLKS | HRTIM_FLTINR3_FLT4BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT4BLKS_Pos) |
                  HRTIM_FLTINR3_FLT4BLKE));
       break;
 80086ce:	e02a      	b.n	8008726 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80086d8:	f023 0203 	bic.w	r2, r3, #3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	431a      	orrs	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f042 0201 	orr.w	r2, r2, #1
 80086ec:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5BLKS | HRTIM_FLTINR4_FLT5BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT5BLKS_Pos) |
                  HRTIM_FLTINR4_FLT5BLKE));
      break;
 80086f0:	e019      	b.n	8008726 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80086fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	025b      	lsls	r3, r3, #9
 8008704:	431a      	orrs	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800870e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6BLKS | HRTIM_FLTINR4_FLT6BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT6BLKS_Pos) |
                  HRTIM_FLTINR4_FLT6BLKE));
      break;
 8008712:	e008      	b.n	8008726 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2207      	movs	r2, #7
 8008718:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8008724:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b07      	cmp	r3, #7
 8008730:	d101      	bne.n	8008736 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1ba>
  {
     return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e008      	b.n	8008748 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_HRTIM_FaultCounterConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultCounterConfig(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t Fault,
                                               HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTCOUNTER(pFaultBlkCfg->Threshold));
  assert_param(IS_HRTIM_FAULTCOUNTERRST(pFaultBlkCfg->ResetMode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b02      	cmp	r3, #2
 800876a:	d101      	bne.n	8008770 <HAL_HRTIM_FaultCounterConfig+0x1c>
  {
     return HAL_BUSY;
 800876c:	2302      	movs	r3, #2
 800876e:	e0e3      	b.n	8008938 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008776:	2b01      	cmp	r3, #1
 8008778:	d101      	bne.n	800877e <HAL_HRTIM_FaultCounterConfig+0x2a>
 800877a:	2302      	movs	r3, #2
 800877c:	e0dc      	b.n	8008938 <HAL_HRTIM_FaultCounterConfig+0x1e4>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2202      	movs	r2, #2
 800878a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	3b01      	subs	r3, #1
 8008792:	2b1f      	cmp	r3, #31
 8008794:	f200 80b6 	bhi.w	8008904 <HAL_HRTIM_FaultCounterConfig+0x1b0>
 8008798:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <HAL_HRTIM_FaultCounterConfig+0x4c>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	08008821 	.word	0x08008821
 80087a4:	08008847 	.word	0x08008847
 80087a8:	08008905 	.word	0x08008905
 80087ac:	0800886d 	.word	0x0800886d
 80087b0:	08008905 	.word	0x08008905
 80087b4:	08008905 	.word	0x08008905
 80087b8:	08008905 	.word	0x08008905
 80087bc:	08008893 	.word	0x08008893
 80087c0:	08008905 	.word	0x08008905
 80087c4:	08008905 	.word	0x08008905
 80087c8:	08008905 	.word	0x08008905
 80087cc:	08008905 	.word	0x08008905
 80087d0:	08008905 	.word	0x08008905
 80087d4:	08008905 	.word	0x08008905
 80087d8:	08008905 	.word	0x08008905
 80087dc:	080088b9 	.word	0x080088b9
 80087e0:	08008905 	.word	0x08008905
 80087e4:	08008905 	.word	0x08008905
 80087e8:	08008905 	.word	0x08008905
 80087ec:	08008905 	.word	0x08008905
 80087f0:	08008905 	.word	0x08008905
 80087f4:	08008905 	.word	0x08008905
 80087f8:	08008905 	.word	0x08008905
 80087fc:	08008905 	.word	0x08008905
 8008800:	08008905 	.word	0x08008905
 8008804:	08008905 	.word	0x08008905
 8008808:	08008905 	.word	0x08008905
 800880c:	08008905 	.word	0x08008905
 8008810:	08008905 	.word	0x08008905
 8008814:	08008905 	.word	0x08008905
 8008818:	08008905 	.word	0x08008905
 800881c:	080088df 	.word	0x080088df
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008828:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	009a      	lsls	r2, r3, #2
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	01db      	lsls	r3, r3, #7
 8008838:	431a      	orrs	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1RSTM | HRTIM_FLTINR3_FLT1CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT1CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT1RSTM_Pos));
       break;
 8008844:	e067      	b.n	8008916 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800884e:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	029a      	lsls	r2, r3, #10
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	03db      	lsls	r3, r3, #15
 800885e:	431a      	orrs	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2RSTM | HRTIM_FLTINR3_FLT2CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT2CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT2RSTM_Pos));
       break;
 800886a:	e054      	b.n	8008916 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008874:	f423 013c 	bic.w	r1, r3, #12320768	; 0xbc0000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	049a      	lsls	r2, r3, #18
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	05db      	lsls	r3, r3, #23
 8008884:	431a      	orrs	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3RSTM | HRTIM_FLTINR3_FLT3CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT3CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT3RSTM_Pos));
       break;
 8008890:	e041      	b.n	8008916 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800889a:	f023 413c 	bic.w	r1, r3, #3154116608	; 0xbc000000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	069a      	lsls	r2, r3, #26
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	07db      	lsls	r3, r3, #31
 80088aa:	431a      	orrs	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	430a      	orrs	r2, r1
 80088b2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4RSTM | HRTIM_FLTINR3_FLT4CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT4CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT4RSTM_Pos));
       break;
 80088b6:	e02e      	b.n	8008916 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_5:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80088c0:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	009a      	lsls	r2, r3, #2
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	01db      	lsls	r3, r3, #7
 80088d0:	431a      	orrs	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5RSTM | HRTIM_FLTINR4_FLT5CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT5CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT5RSTM_Pos));
       break;
 80088dc:	e01b      	b.n	8008916 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_6:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80088e6:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	029a      	lsls	r2, r3, #10
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	03db      	lsls	r3, r3, #15
 80088f6:	431a      	orrs	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6RSTM | HRTIM_FLTINR4_FLT6CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT6CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT6RSTM_Pos));
       break;
 8008902:	e008      	b.n	8008916 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2207      	movs	r2, #7
 8008908:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8008914:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b07      	cmp	r3, #7
 8008920:	d101      	bne.n	8008926 <HAL_HRTIM_FaultCounterConfig+0x1d2>
  {
     return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e008      	b.n	8008938 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_HRTIM_FaultModeCtl>:
  * @retval None
  */
void HAL_HRTIM_FaultModeCtl(HRTIM_HandleTypeDef * hhrtim,
                        uint32_t Faults,
                        uint32_t Enable)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Faults));
  assert_param(IS_HRTIM_FAULTMODECTL(Enable));

  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00d      	beq.n	8008976 <HAL_HRTIM_FaultModeCtl+0x32>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008962:	f023 0101 	bic.w	r1, r3, #1
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f003 0201 	and.w	r2, r3, #1
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	430a      	orrs	r2, r1
 8008972:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00e      	beq.n	800899e <HAL_HRTIM_FaultModeCtl+0x5a>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008988:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	021b      	lsls	r3, r3, #8
 8008990:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f003 0304 	and.w	r3, r3, #4
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00e      	beq.n	80089c6 <HAL_HRTIM_FaultModeCtl+0x82>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	041b      	lsls	r3, r3, #16
 80089b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f003 0308 	and.w	r3, r3, #8
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00e      	beq.n	80089ee <HAL_HRTIM_FaultModeCtl+0xaa>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089d8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	061b      	lsls	r3, r3, #24
 80089e0:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f003 0310 	and.w	r3, r3, #16
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00d      	beq.n	8008a14 <HAL_HRTIM_FaultModeCtl+0xd0>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a00:	f023 0101 	bic.w	r1, r3, #1
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f003 0201 	and.w	r2, r3, #1
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00e      	beq.n	8008a3c <HAL_HRTIM_FaultModeCtl+0xf8>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a26:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	021b      	lsls	r3, r3, #8
 8008a2e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
}
 8008a3c:	bf00      	nop
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d101      	bne.n	8008a64 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8008a60:	2302      	movs	r3, #2
 8008a62:	e05f      	b.n	8008b24 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d101      	bne.n	8008a72 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e058      	b.n	8008b24 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2202      	movs	r2, #2
 8008a7e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	2b06      	cmp	r3, #6
 8008a86:	d104      	bne.n	8008a92 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 fd56 	bl	800953c <HRTIM_MasterWaveform_Config>
 8008a90:	e004      	b.n	8008a9c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	68b9      	ldr	r1, [r7, #8]
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fdee 	bl	8009678 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6819      	ldr	r1, [r3, #0]
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	00db      	lsls	r3, r3, #3
 8008aa8:	1a9b      	subs	r3, r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4403      	add	r3, r0
 8008aae:	3320      	adds	r3, #32
 8008ab0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6859      	ldr	r1, [r3, #4]
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	00db      	lsls	r3, r3, #3
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4403      	add	r3, r0
 8008ac4:	3324      	adds	r3, #36	; 0x24
 8008ac6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6899      	ldr	r1, [r3, #8]
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4403      	add	r3, r0
 8008ada:	3328      	adds	r3, #40	; 0x28
 8008adc:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68d9      	ldr	r1, [r3, #12]
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	00db      	lsls	r3, r3, #3
 8008aea:	1a9b      	subs	r3, r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4403      	add	r3, r0
 8008af0:	332c      	adds	r3, #44	; 0x2c
 8008af2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6919      	ldr	r1, [r3, #16]
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	4613      	mov	r3, r2
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4403      	add	r3, r0
 8008b06:	3330      	adds	r3, #48	; 0x30
 8008b08:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8008b0a:	68b9      	ldr	r1, [r7, #8]
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f001 f8fb 	bl	8009d08 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d101      	bne.n	8008b48 <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 8008b44:	2302      	movs	r3, #2
 8008b46:	e020      	b.n	8008b8a <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d101      	bne.n	8008b56 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e019      	b.n	8008b8a <HAL_HRTIM_WaveformTimerControl+0x5e>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2202      	movs	r2, #2
 8008b62:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 ff18 	bl	80099a0 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8008b70:	68b9      	ldr	r1, [r7, #8]
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f001 f8c8 	bl	8009d08 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d101      	bne.n	8008bb2 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e157      	b.n	8008e62 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d101      	bne.n	8008bc0 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e150      	b.n	8008e62 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2b06      	cmp	r3, #6
 8008bd4:	d140      	bne.n	8008c58 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	2b07      	cmp	r3, #7
 8008bdc:	d82a      	bhi.n	8008c34 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8008bde:	a201      	add	r2, pc, #4	; (adr r2, 8008be4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be4:	08008c05 	.word	0x08008c05
 8008be8:	08008c11 	.word	0x08008c11
 8008bec:	08008c35 	.word	0x08008c35
 8008bf0:	08008c1d 	.word	0x08008c1d
 8008bf4:	08008c35 	.word	0x08008c35
 8008bf8:	08008c35 	.word	0x08008c35
 8008bfc:	08008c35 	.word	0x08008c35
 8008c00:	08008c29 	.word	0x08008c29
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	6812      	ldr	r2, [r2, #0]
 8008c0c:	61da      	str	r2, [r3, #28]
        break;
 8008c0e:	e01a      	b.n	8008c46 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	6812      	ldr	r2, [r2, #0]
 8008c18:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8008c1a:	e014      	b.n	8008c46 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	6812      	ldr	r2, [r2, #0]
 8008c24:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8008c26:	e00e      	b.n	8008c46 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	6812      	ldr	r2, [r2, #0]
 8008c30:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8008c32:	e008      	b.n	8008c46 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2207      	movs	r2, #7
 8008c38:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8008c44:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b07      	cmp	r3, #7
 8008c50:	f040 80fe 	bne.w	8008e50 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e104      	b.n	8008e62 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	2b07      	cmp	r3, #7
 8008c5e:	f200 80e3 	bhi.w	8008e28 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8008c62:	a201      	add	r2, pc, #4	; (adr r2, 8008c68 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008c89 	.word	0x08008c89
 8008c6c:	08008c9d 	.word	0x08008c9d
 8008c70:	08008e29 	.word	0x08008e29
 8008c74:	08008d59 	.word	0x08008d59
 8008c78:	08008e29 	.word	0x08008e29
 8008c7c:	08008e29 	.word	0x08008e29
 8008c80:	08008e29 	.word	0x08008e29
 8008c84:	08008d6d 	.word	0x08008d6d
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6819      	ldr	r1, [r3, #0]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	01db      	lsls	r3, r3, #7
 8008c94:	440b      	add	r3, r1
 8008c96:	339c      	adds	r3, #156	; 0x9c
 8008c98:	601a      	str	r2, [r3, #0]
        break;
 8008c9a:	e0d1      	b.n	8008e40 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6819      	ldr	r1, [r3, #0]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	01db      	lsls	r3, r3, #7
 8008ca8:	440b      	add	r3, r1
 8008caa:	33a4      	adds	r3, #164	; 0xa4
 8008cac:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d03f      	beq.n	8008d36 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	01db      	lsls	r3, r3, #7
 8008cc0:	4413      	add	r3, r2
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	6811      	ldr	r1, [r2, #0]
 8008cc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	01db      	lsls	r3, r3, #7
 8008cd2:	440b      	add	r3, r1
 8008cd4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	01db      	lsls	r3, r3, #7
 8008ce0:	4413      	add	r3, r2
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	68f9      	ldr	r1, [r7, #12]
 8008cea:	6809      	ldr	r1, [r1, #0]
 8008cec:	431a      	orrs	r2, r3
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	01db      	lsls	r3, r3, #7
 8008cf4:	440b      	add	r3, r1
 8008cf6:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d00:	d109      	bne.n	8008d16 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6819      	ldr	r1, [r3, #0]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	689a      	ldr	r2, [r3, #8]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	01db      	lsls	r3, r3, #7
 8008d0e:	440b      	add	r3, r1
 8008d10:	339c      	adds	r3, #156	; 0x9c
 8008d12:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8008d14:	e091      	b.n	8008e3a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d1e:	f040 808c 	bne.w	8008e3a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6819      	ldr	r1, [r3, #0]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	01db      	lsls	r3, r3, #7
 8008d2e:	440b      	add	r3, r1
 8008d30:	33a8      	adds	r3, #168	; 0xa8
 8008d32:	601a      	str	r2, [r3, #0]
         break;
 8008d34:	e081      	b.n	8008e3a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	01db      	lsls	r3, r3, #7
 8008d40:	4413      	add	r3, r2
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	6811      	ldr	r1, [r2, #0]
 8008d48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	01db      	lsls	r3, r3, #7
 8008d52:	440b      	add	r3, r1
 8008d54:	601a      	str	r2, [r3, #0]
         break;
 8008d56:	e070      	b.n	8008e3a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6819      	ldr	r1, [r3, #0]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	01db      	lsls	r3, r3, #7
 8008d64:	440b      	add	r3, r1
 8008d66:	33a8      	adds	r3, #168	; 0xa8
 8008d68:	601a      	str	r2, [r3, #0]
        break;
 8008d6a:	e069      	b.n	8008e40 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6819      	ldr	r1, [r3, #0]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	01db      	lsls	r3, r3, #7
 8008d78:	440b      	add	r3, r1
 8008d7a:	33ac      	adds	r3, #172	; 0xac
 8008d7c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d03f      	beq.n	8008e06 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	01db      	lsls	r3, r3, #7
 8008d90:	4413      	add	r3, r2
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	6811      	ldr	r1, [r2, #0]
 8008d98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	01db      	lsls	r3, r3, #7
 8008da2:	440b      	add	r3, r1
 8008da4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	3301      	adds	r3, #1
 8008dae:	01db      	lsls	r3, r3, #7
 8008db0:	4413      	add	r3, r2
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	6809      	ldr	r1, [r1, #0]
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	01db      	lsls	r3, r3, #7
 8008dc6:	440b      	add	r3, r1
 8008dc8:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd2:	d109      	bne.n	8008de8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6819      	ldr	r1, [r3, #0]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	01db      	lsls	r3, r3, #7
 8008de0:	440b      	add	r3, r1
 8008de2:	339c      	adds	r3, #156	; 0x9c
 8008de4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8008de6:	e02a      	b.n	8008e3e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008df0:	d125      	bne.n	8008e3e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6819      	ldr	r1, [r3, #0]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	01db      	lsls	r3, r3, #7
 8008dfe:	440b      	add	r3, r1
 8008e00:	33a8      	adds	r3, #168	; 0xa8
 8008e02:	601a      	str	r2, [r3, #0]
         break;
 8008e04:	e01b      	b.n	8008e3e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	01db      	lsls	r3, r3, #7
 8008e10:	4413      	add	r3, r2
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	6811      	ldr	r1, [r2, #0]
 8008e18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	01db      	lsls	r3, r3, #7
 8008e22:	440b      	add	r3, r1
 8008e24:	601a      	str	r2, [r3, #0]
         break;
 8008e26:	e00a      	b.n	8008e3e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2207      	movs	r2, #7
 8008e2c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8008e38:	e002      	b.n	8008e40 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008e3a:	bf00      	nop
 8008e3c:	e000      	b.n	8008e40 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008e3e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b07      	cmp	r3, #7
 8008e4a:	d101      	bne.n	8008e50 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e008      	b.n	8008e62 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop

08008e70 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d101      	bne.n	8008e8e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	e01d      	b.n	8008eca <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d101      	bne.n	8008e9c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	e016      	b.n	8008eca <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	68b9      	ldr	r1, [r7, #8]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 fdd4 	bl	8009a60 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d101      	bne.n	8008eea <HAL_HRTIM_WaveformOutputStart+0x18>
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	e01a      	b.n	8008f20 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d101      	bne.n	8008f44 <HAL_HRTIM_WaveformOutputStop+0x18>
 8008f40:	2302      	movs	r3, #2
 8008f42:	e01a      	b.n	8008f7a <HAL_HRTIM_WaveformOutputStop+0x4e>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	430a      	orrs	r2, r1
 8008f64:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
	...

08008f88 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e05b      	b.n	8009058 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d009      	beq.n	8008fe4 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68d9      	ldr	r1, [r3, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
 8008fe8:	e022      	b.n	8009030 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
 8008fec:	4a1d      	ldr	r2, [pc, #116]	; (8009064 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8008fee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d017      	beq.n	800902a <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
 8009000:	01db      	lsls	r3, r3, #7
 8009002:	4413      	add	r3, r2
 8009004:	338c      	adds	r3, #140	; 0x8c
 8009006:	6818      	ldr	r0, [r3, #0]
 8009008:	7bfa      	ldrb	r2, [r7, #15]
 800900a:	6879      	ldr	r1, [r7, #4]
 800900c:	4613      	mov	r3, r2
 800900e:	00db      	lsls	r3, r3, #3
 8009010:	1a9b      	subs	r3, r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	440b      	add	r3, r1
 8009016:	3320      	adds	r3, #32
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6819      	ldr	r1, [r3, #0]
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	4302      	orrs	r2, r0
 8009022:	01db      	lsls	r3, r3, #7
 8009024:	440b      	add	r3, r1
 8009026:	338c      	adds	r3, #140	; 0x8c
 8009028:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	3301      	adds	r3, #1
 800902e:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	2b05      	cmp	r3, #5
 8009034:	d9d9      	bls.n	8008fea <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6819      	ldr	r1, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;}
 8009056:	2300      	movs	r3, #0
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	20000010 	.word	0x20000010

08009068 <HAL_HRTIM_WaveformCountStart_DMA>:
  *       size of each DMA transfer are specified at timer configuration time
  *       (see HAL_HRTIM_WaveformTimerConfig)
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_DMA(HRTIM_HandleTypeDef * hhrtim,
                                                     uint32_t Timers)
{
 8009068:	b590      	push	{r4, r7, lr}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  DMA_HandleTypeDef * hdma;

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  if((hhrtim->State == HAL_HRTIM_STATE_BUSY))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b02      	cmp	r3, #2
 800907c:	d101      	bne.n	8009082 <HAL_HRTIM_WaveformCountStart_DMA+0x1a>
  {
     return HAL_BUSY;
 800907e:	2302      	movs	r3, #2
 8009080:	e0d2      	b.n	8009228 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
  }

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2202      	movs	r2, #2
 8009086:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8009090:	2b01      	cmp	r3, #1
 8009092:	d101      	bne.n	8009098 <HAL_HRTIM_WaveformCountStart_DMA+0x30>
 8009094:	2302      	movs	r3, #2
 8009096:	e0c7      	b.n	8009228 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d033      	beq.n	8009112 <HAL_HRTIM_WaveformCountStart_DMA+0xaa>
      (hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMARequests != 0U))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d02e      	beq.n	8009112 <HAL_HRTIM_WaveformCountStart_DMA+0xaa>
  {
      /* Set the DMA error callback */
      hhrtim->hdmaMaster->XferErrorCallback = HRTIM_DMAError ;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80090ba:	4a5d      	ldr	r2, [pc, #372]	; (8009230 <HAL_HRTIM_WaveformCountStart_DMA+0x1c8>)
 80090bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA transfer completed callback */
      hhrtim->hdmaMaster->XferCpltCallback = HRTIM_DMAMasterCplt;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80090c4:	4a5b      	ldr	r2, [pc, #364]	; (8009234 <HAL_HRTIM_WaveformCountStart_DMA+0x1cc>)
 80090c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(hhrtim->hdmaMaster,
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80090e0:	f7fe fa2e 	bl	8007540 <HAL_DMA_Start_IT>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d009      	beq.n	80090fe <HAL_HRTIM_WaveformCountStart_DMA+0x96>
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMASrcAddress,
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMADstAddress,
                       hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMASize) != HAL_OK)
    {
            hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2207      	movs	r2, #7
 80090ee:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

            /* Process Unlocked */
            __HAL_UNLOCK(hhrtim);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

            return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e094      	b.n	8009228 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
        }

      /* Enable the timer DMA request */
      __HAL_HRTIM_MASTER_ENABLE_DMA(hhrtim,
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68d9      	ldr	r1, [r3, #12]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	430a      	orrs	r2, r1
 8009110:	60da      	str	r2, [r3, #12]
                                   hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].DMARequests);
  }

  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8009112:	2300      	movs	r3, #0
 8009114:	73fb      	strb	r3, [r7, #15]
 8009116:	e073      	b.n	8009200 <HAL_HRTIM_WaveformCountStart_DMA+0x198>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	4a47      	ldr	r2, [pc, #284]	; (8009238 <HAL_HRTIM_WaveformCountStart_DMA+0x1d0>)
 800911c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	4013      	ands	r3, r2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d068      	beq.n	80091fa <HAL_HRTIM_WaveformCountStart_DMA+0x192>
         (hhrtim->TimerParam[timer_idx].DMARequests != 0U))
 8009128:	7bfa      	ldrb	r2, [r7, #15]
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	4613      	mov	r3, r2
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	1a9b      	subs	r3, r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	440b      	add	r3, r1
 8009136:	3324      	adds	r3, #36	; 0x24
 8009138:	681b      	ldr	r3, [r3, #0]
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 800913a:	2b00      	cmp	r3, #0
 800913c:	d05d      	beq.n	80091fa <HAL_HRTIM_WaveformCountStart_DMA+0x192>
    {
      /* Get the timer DMA handler */
      hdma = HRTIM_GetDMAHandleFromTimerIdx(hhrtim, timer_idx);
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fd4a 	bl	8009bdc <HRTIM_GetDMAHandleFromTimerIdx>
 8009148:	60b8      	str	r0, [r7, #8]

      if (hdma == NULL)
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d109      	bne.n	8009164 <HAL_HRTIM_WaveformCountStart_DMA+0xfc>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2207      	movs	r2, #7
 8009154:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e061      	b.n	8009228 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
      }

       /* Set the DMA error callback */
      hdma->XferErrorCallback = HRTIM_DMAError ;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4a32      	ldr	r2, [pc, #200]	; (8009230 <HAL_HRTIM_WaveformCountStart_DMA+0x1c8>)
 8009168:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA transfer completed callback */
      hdma->XferCpltCallback = HRTIM_DMATimerxCplt;
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	4a33      	ldr	r2, [pc, #204]	; (800923c <HAL_HRTIM_WaveformCountStart_DMA+0x1d4>)
 800916e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(hdma,
 8009170:	7bfa      	ldrb	r2, [r7, #15]
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4613      	mov	r3, r2
 8009176:	00db      	lsls	r3, r3, #3
 8009178:	1a9b      	subs	r3, r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	440b      	add	r3, r1
 800917e:	3328      	adds	r3, #40	; 0x28
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	7bfa      	ldrb	r2, [r7, #15]
 8009184:	6879      	ldr	r1, [r7, #4]
 8009186:	4613      	mov	r3, r2
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	1a9b      	subs	r3, r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	440b      	add	r3, r1
 8009190:	332c      	adds	r3, #44	; 0x2c
 8009192:	681c      	ldr	r4, [r3, #0]
 8009194:	7bfa      	ldrb	r2, [r7, #15]
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	4613      	mov	r3, r2
 800919a:	00db      	lsls	r3, r3, #3
 800919c:	1a9b      	subs	r3, r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	440b      	add	r3, r1
 80091a2:	3330      	adds	r3, #48	; 0x30
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4622      	mov	r2, r4
 80091a8:	4601      	mov	r1, r0
 80091aa:	68b8      	ldr	r0, [r7, #8]
 80091ac:	f7fe f9c8 	bl	8007540 <HAL_DMA_Start_IT>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d009      	beq.n	80091ca <HAL_HRTIM_WaveformCountStart_DMA+0x162>
                       hhrtim->TimerParam[timer_idx].DMASrcAddress,
                       hhrtim->TimerParam[timer_idx].DMADstAddress,
                       hhrtim->TimerParam[timer_idx].DMASize) != HAL_OK)
    {
              hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2207      	movs	r2, #7
 80091ba:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

              /* Process Unlocked */
              __HAL_UNLOCK(hhrtim);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

              return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e02e      	b.n	8009228 <HAL_HRTIM_WaveformCountStart_DMA+0x1c0>
        }

      /* Enable the timer DMA request */
      __HAL_HRTIM_TIMER_ENABLE_DMA(hhrtim,
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	01db      	lsls	r3, r3, #7
 80091d2:	4413      	add	r3, r2
 80091d4:	338c      	adds	r3, #140	; 0x8c
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	7bfa      	ldrb	r2, [r7, #15]
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4613      	mov	r3, r2
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	1a9b      	subs	r3, r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	440b      	add	r3, r1
 80091e6:	3324      	adds	r3, #36	; 0x24
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6819      	ldr	r1, [r3, #0]
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	4302      	orrs	r2, r0
 80091f2:	01db      	lsls	r3, r3, #7
 80091f4:	440b      	add	r3, r1
 80091f6:	338c      	adds	r3, #140	; 0x8c
 80091f8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	3301      	adds	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	2b05      	cmp	r3, #5
 8009204:	d988      	bls.n	8009118 <HAL_HRTIM_WaveformCountStart_DMA+0xb0>
                                   hhrtim->TimerParam[timer_idx].DMARequests);
    }
  }

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, Timers);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6819      	ldr	r1, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	430a      	orrs	r2, r1
 8009214:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	bd90      	pop	{r4, r7, pc}
 8009230:	0800a91d 	.word	0x0800a91d
 8009234:	0800a63f 	.word	0x0800a63f
 8009238:	20000010 	.word	0x20000010
 800923c:	0800a6f9 	.word	0x0800a6f9

08009240 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2bff      	cmp	r3, #255	; 0xff
 800924e:	d103      	bne.n	8009258 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fdc7 	bl	8009de4 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8009256:	e00a      	b.n	800926e <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b06      	cmp	r3, #6
 800925c:	d103      	bne.n	8009266 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fe93 	bl	8009f8a <HRTIM_Master_ISR>
}
 8009264:	e003      	b.n	800926e <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 ff9a 	bl	800a1a2 <HRTIM_Timer_ISR>
}
 800926e:	bf00      	nop
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8009276:	b480      	push	{r7}
 8009278:	b083      	sub	sp, #12
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800928a:	b480      	push	{r7}
 800928c:	b083      	sub	sp, #12
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8009292:	bf00      	nop
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800929e:	b480      	push	{r7}
 80092a0:	b083      	sub	sp, #12
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80092a6:	bf00      	nop
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b083      	sub	sp, #12
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 80092ba:	bf00      	nop
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b083      	sub	sp, #12
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80092ce:	bf00      	nop
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80092da:	b480      	push	{r7}
 80092dc:	b083      	sub	sp, #12
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 80092e2:	bf00      	nop
 80092e4:	370c      	adds	r7, #12
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr

080092ee <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 800930a:	bf00      	nop
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800936e:	b480      	push	{r7}
 8009370:	b083      	sub	sp, #12
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 800938e:	bf00      	nop
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800939a:	b480      	push	{r7}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8009412:	bf00      	nop
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800941e:	b480      	push	{r7}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <HAL_HRTIM_ErrorCallback>:
  * @brief  Callback function invoked when a DMA error occurs
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_ErrorCallback(HRTIM_HandleTypeDef *hhrtim)
{
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_ErrorCallback could be implemented in the user file
   */
}
 8009452:	bf00      	nop
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800945e:	b480      	push	{r7}
 8009460:	b085      	sub	sp, #20
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 0307 	bic.w	r3, r3, #7
 8009476:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	4313      	orrs	r3, r2
 8009480:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f023 0318 	bic.w	r3, r3, #24
 8009488:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4313      	orrs	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	683a      	ldr	r2, [r7, #0]
 80094a2:	6812      	ldr	r2, [r2, #0]
 80094a4:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	6852      	ldr	r2, [r2, #4]
 80094ae:	619a      	str	r2, [r3, #24]
}
 80094b0:	bf00      	nop
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	3301      	adds	r3, #1
 80094d0:	01db      	lsls	r3, r3, #7
 80094d2:	4413      	add	r3, r2
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f023 0307 	bic.w	r3, r3, #7
 80094de:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	697a      	ldr	r2, [r7, #20]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f023 0318 	bic.w	r3, r3, #24
 80094f0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	3301      	adds	r3, #1
 8009504:	01db      	lsls	r3, r3, #7
 8009506:	4413      	add	r3, r2
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6819      	ldr	r1, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	01db      	lsls	r3, r3, #7
 8009518:	440b      	add	r3, r1
 800951a:	3394      	adds	r3, #148	; 0x94
 800951c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6819      	ldr	r1, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	01db      	lsls	r3, r3, #7
 800952a:	440b      	add	r3, r1
 800952c:	3398      	adds	r3, #152	; 0x98
 800952e:	601a      	str	r2, [r3, #0]
}
 8009530:	bf00      	nop
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8009556:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f023 0320 	bic.w	r3, r3, #32
 800955e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	4313      	orrs	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009570:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	2b20      	cmp	r3, #32
 8009578:	d003      	beq.n	8009582 <HRTIM_MasterWaveform_Config+0x46>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	2b02      	cmp	r3, #2
 8009580:	d108      	bne.n	8009594 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009588:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f043 0320 	orr.w	r3, r3, #32
 8009590:	60fb      	str	r3, [r7, #12]
 8009592:	e021      	b.n	80095d8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	2b03      	cmp	r3, #3
 800959a:	d108      	bne.n	80095ae <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095a2:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	e014      	b.n	80095d8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d108      	bne.n	80095c8 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095bc:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095c4:	60fb      	str	r3, [r7, #12]
 80095c6:	e007      	b.n	80095d8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f023 0320 	bic.w	r3, r3, #32
 80095ce:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80095d6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095de:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095f0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009602:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8009614:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	4313      	orrs	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009626:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	4313      	orrs	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800963a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	4313      	orrs	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800964c:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	4313      	orrs	r3, r2
 8009656:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800966a:	bf00      	nop
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
	...

08009678 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8009678:	b480      	push	{r7}
 800967a:	b08b      	sub	sp, #44	; 0x2c
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	3301      	adds	r3, #1
 800968c:	01db      	lsls	r3, r3, #7
 800968e:	4413      	add	r3, r2
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	6811      	ldr	r1, [r2, #0]
 8009696:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	3301      	adds	r3, #1
 800969e:	01db      	lsls	r3, r3, #7
 80096a0:	440b      	add	r3, r1
 80096a2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	3301      	adds	r3, #1
 80096ac:	01db      	lsls	r3, r3, #7
 80096ae:	4413      	add	r3, r2
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	01db      	lsls	r3, r3, #7
 80096bc:	4413      	add	r3, r2
 80096be:	33e8      	adds	r3, #232	; 0xe8
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	01db      	lsls	r3, r3, #7
 80096cc:	4413      	add	r3, r2
 80096ce:	33e4      	adds	r3, #228	; 0xe4
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80096dc:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80096de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e0:	f023 0320 	bic.w	r3, r3, #32
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ec:	4313      	orrs	r3, r2
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	2b20      	cmp	r3, #32
 80096f6:	d003      	beq.n	8009700 <HRTIM_TimingUnitWaveform_Config+0x88>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d108      	bne.n	8009712 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8009706:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	f043 0320 	orr.w	r3, r3, #32
 800970e:	627b      	str	r3, [r7, #36]	; 0x24
 8009710:	e021      	b.n	8009756 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	2b03      	cmp	r3, #3
 8009718:	d108      	bne.n	800972c <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8009722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009728:	627b      	str	r3, [r7, #36]	; 0x24
 800972a:	e014      	b.n	8009756 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	2b04      	cmp	r3, #4
 8009732:	d108      	bne.n	8009746 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800973a:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
 8009744:	e007      	b.n	8009756 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8009746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009748:	f023 0320 	bic.w	r3, r3, #32
 800974c:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8009754:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800975c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009764:	4313      	orrs	r3, r2
 8009766:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009776:	4313      	orrs	r3, r2
 8009778:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009780:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009788:	4313      	orrs	r3, r2
 800978a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8009792:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800979a:	4313      	orrs	r3, r2
 800979c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80097a4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ac:	4313      	orrs	r3, r2
 80097ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d109      	bne.n	80097cc <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097be:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097c4:	025b      	lsls	r3, r3, #9
 80097c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c8:	4313      	orrs	r3, r2
 80097ca:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80097d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097dc:	d103      	bne.n	80097e6 <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f4:	4313      	orrs	r3, r2
 80097f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097fe:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009806:	4313      	orrs	r3, r2
 8009808:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980c:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8009810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981c:	4313      	orrs	r3, r2
 800981e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009826:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800982c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009830:	69ba      	ldr	r2, [r7, #24]
 8009832:	4313      	orrs	r3, r2
 8009834:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800983c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009842:	69ba      	ldr	r2, [r7, #24]
 8009844:	4313      	orrs	r3, r2
 8009846:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8009848:	6a3b      	ldr	r3, [r7, #32]
 800984a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800984e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009854:	6a3a      	ldr	r2, [r7, #32]
 8009856:	4313      	orrs	r3, r2
 8009858:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800985e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8009862:	d004      	beq.n	800986e <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009868:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800986c:	d103      	bne.n	8009876 <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009872:	2b40      	cmp	r3, #64	; 0x40
 8009874:	d108      	bne.n	8009888 <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800987c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009882:	6a3a      	ldr	r2, [r7, #32]
 8009884:	4313      	orrs	r3, r2
 8009886:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8009888:	6a3b      	ldr	r3, [r7, #32]
 800988a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800988e:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009894:	6a3a      	ldr	r2, [r7, #32]
 8009896:	4313      	orrs	r3, r2
 8009898:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800989e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2b05      	cmp	r3, #5
 80098a4:	d850      	bhi.n	8009948 <HRTIM_TimingUnitWaveform_Config+0x2d0>
 80098a6:	a201      	add	r2, pc, #4	; (adr r2, 80098ac <HRTIM_TimingUnitWaveform_Config+0x234>)
 80098a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ac:	080098c5 	.word	0x080098c5
 80098b0:	080098db 	.word	0x080098db
 80098b4:	080098f1 	.word	0x080098f1
 80098b8:	08009907 	.word	0x08009907
 80098bc:	0800991d 	.word	0x0800991d
 80098c0:	08009933 	.word	0x08009933
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80098ca:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d0:	005b      	lsls	r3, r3, #1
 80098d2:	69fa      	ldr	r2, [r7, #28]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	61fb      	str	r3, [r7, #28]
      break;
 80098d8:	e037      	b.n	800994a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098e0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	69fa      	ldr	r2, [r7, #28]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	61fb      	str	r3, [r7, #28]
      break;
 80098ee:	e02c      	b.n	800994a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80098f6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fc:	00db      	lsls	r3, r3, #3
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	4313      	orrs	r3, r2
 8009902:	61fb      	str	r3, [r7, #28]
      break;
 8009904:	e021      	b.n	800994a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800990c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009912:	011b      	lsls	r3, r3, #4
 8009914:	69fa      	ldr	r2, [r7, #28]
 8009916:	4313      	orrs	r3, r2
 8009918:	61fb      	str	r3, [r7, #28]
      break;
 800991a:	e016      	b.n	800994a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009922:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009928:	015b      	lsls	r3, r3, #5
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	4313      	orrs	r3, r2
 800992e:	61fb      	str	r3, [r7, #28]
      break;
 8009930:	e00b      	b.n	800994a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009938:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993e:	019b      	lsls	r3, r3, #6
 8009940:	69fa      	ldr	r2, [r7, #28]
 8009942:	4313      	orrs	r3, r2
 8009944:	61fb      	str	r3, [r7, #28]
      break;
 8009946:	e000      	b.n	800994a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 8009948:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	3301      	adds	r3, #1
 8009952:	01db      	lsls	r3, r3, #7
 8009954:	4413      	add	r3, r2
 8009956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009958:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	01db      	lsls	r3, r3, #7
 8009962:	4413      	add	r3, r2
 8009964:	33e8      	adds	r3, #232	; 0xe8
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	01db      	lsls	r3, r3, #7
 8009972:	4413      	add	r3, r2
 8009974:	33e4      	adds	r3, #228	; 0xe4
 8009976:	6a3a      	ldr	r2, [r7, #32]
 8009978:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	01db      	lsls	r3, r3, #7
 8009982:	4413      	add	r3, r2
 8009984:	33d4      	adds	r3, #212	; 0xd4
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8009994:	bf00      	nop
 8009996:	372c      	adds	r7, #44	; 0x2c
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	01db      	lsls	r3, r3, #7
 80099b4:	4413      	add	r3, r2
 80099b6:	33ec      	adds	r3, #236	; 0xec
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f023 0310 	bic.w	r3, r3, #16
 80099c2:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	011b      	lsls	r3, r3, #4
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80099d6:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	4313      	orrs	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099e8:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80099fa:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d11a      	bne.n	8009a44 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f023 0304 	bic.w	r3, r3, #4
 8009a14:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f023 0302 	bic.w	r3, r3, #2
 8009a26:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f023 0301 	bic.w	r3, r3, #1
 8009a38:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	01db      	lsls	r3, r3, #7
 8009a4c:	4413      	add	r3, r2
 8009a4e:	33ec      	adds	r3, #236	; 0xec
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	601a      	str	r2, [r3, #0]

}
 8009a54:	bf00      	nop
 8009a56:	371c      	adds	r7, #28
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b089      	sub	sp, #36	; 0x24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	01db      	lsls	r3, r3, #7
 8009a7a:	4413      	add	r3, r2
 8009a7c:	33e4      	adds	r3, #228	; 0xe4
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	01db      	lsls	r3, r3, #7
 8009a8a:	4413      	add	r3, r2
 8009a8c:	33b8      	adds	r3, #184	; 0xb8
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	617b      	str	r3, [r7, #20]

  switch (Output)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2b20      	cmp	r3, #32
 8009a96:	d037      	beq.n	8009b08 <HRTIM_OutputConfig+0xa8>
 8009a98:	2b20      	cmp	r3, #32
 8009a9a:	d80d      	bhi.n	8009ab8 <HRTIM_OutputConfig+0x58>
 8009a9c:	2b04      	cmp	r3, #4
 8009a9e:	d020      	beq.n	8009ae2 <HRTIM_OutputConfig+0x82>
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d804      	bhi.n	8009aae <HRTIM_OutputConfig+0x4e>
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d01c      	beq.n	8009ae2 <HRTIM_OutputConfig+0x82>
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d02d      	beq.n	8009b08 <HRTIM_OutputConfig+0xa8>
      shift = 16U;
      break;
    }

  default:
    break;
 8009aac:	e041      	b.n	8009b32 <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8009aae:	2b08      	cmp	r3, #8
 8009ab0:	d02a      	beq.n	8009b08 <HRTIM_OutputConfig+0xa8>
 8009ab2:	2b10      	cmp	r3, #16
 8009ab4:	d015      	beq.n	8009ae2 <HRTIM_OutputConfig+0x82>
    break;
 8009ab6:	e03c      	b.n	8009b32 <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8009ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009abc:	d011      	beq.n	8009ae2 <HRTIM_OutputConfig+0x82>
 8009abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ac2:	d804      	bhi.n	8009ace <HRTIM_OutputConfig+0x6e>
 8009ac4:	2b40      	cmp	r3, #64	; 0x40
 8009ac6:	d00c      	beq.n	8009ae2 <HRTIM_OutputConfig+0x82>
 8009ac8:	2b80      	cmp	r3, #128	; 0x80
 8009aca:	d01d      	beq.n	8009b08 <HRTIM_OutputConfig+0xa8>
    break;
 8009acc:	e031      	b.n	8009b32 <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8009ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ad2:	d006      	beq.n	8009ae2 <HRTIM_OutputConfig+0x82>
 8009ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ad8:	d016      	beq.n	8009b08 <HRTIM_OutputConfig+0xa8>
 8009ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ade:	d013      	beq.n	8009b08 <HRTIM_OutputConfig+0xa8>
    break;
 8009ae0:	e027      	b.n	8009b32 <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6819      	ldr	r1, [r3, #0]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	01db      	lsls	r3, r3, #7
 8009aee:	440b      	add	r3, r1
 8009af0:	33bc      	adds	r3, #188	; 0xbc
 8009af2:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6819      	ldr	r1, [r3, #0]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	689a      	ldr	r2, [r3, #8]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	01db      	lsls	r3, r3, #7
 8009b00:	440b      	add	r3, r1
 8009b02:	33c0      	adds	r3, #192	; 0xc0
 8009b04:	601a      	str	r2, [r3, #0]
      break;
 8009b06:	e014      	b.n	8009b32 <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6819      	ldr	r1, [r3, #0]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	01db      	lsls	r3, r3, #7
 8009b14:	440b      	add	r3, r1
 8009b16:	33c4      	adds	r3, #196	; 0xc4
 8009b18:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6819      	ldr	r1, [r3, #0]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	689a      	ldr	r2, [r3, #8]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	01db      	lsls	r3, r3, #7
 8009b26:	440b      	add	r3, r1
 8009b28:	33c8      	adds	r3, #200	; 0xc8
 8009b2a:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8009b2c:	2310      	movs	r3, #16
 8009b2e:	61bb      	str	r3, [r7, #24]
      break;
 8009b30:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8009b32:	22fe      	movs	r2, #254	; 0xfe
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8009b3a:	43db      	mvns	r3, r3
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	4013      	ands	r3, r2
 8009b40:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4c:	69fa      	ldr	r2, [r7, #28]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	68da      	ldr	r2, [r3, #12]
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5c:	69fa      	ldr	r2, [r7, #28]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	691a      	ldr	r2, [r3, #16]
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6c:	69fa      	ldr	r2, [r7, #28]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	695a      	ldr	r2, [r3, #20]
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8c:	69fa      	ldr	r2, [r7, #28]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b08      	cmp	r3, #8
 8009b98:	d111      	bne.n	8009bbe <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10c      	bne.n	8009bbe <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d107      	bne.n	8009bbe <HRTIM_OutputConfig+0x15e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	69da      	ldr	r2, [r3, #28]
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb8:	69fa      	ldr	r2, [r7, #28]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	01db      	lsls	r3, r3, #7
 8009bc6:	4413      	add	r3, r2
 8009bc8:	33e4      	adds	r3, #228	; 0xe4
 8009bca:	69fa      	ldr	r2, [r7, #28]
 8009bcc:	601a      	str	r2, [r3, #0]
}
 8009bce:	bf00      	nop
 8009bd0:	3724      	adds	r7, #36	; 0x24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
	...

08009bdc <HRTIM_GetDMAHandleFromTimerIdx>:
  return dma_request;
}

static DMA_HandleTypeDef * HRTIM_GetDMAHandleFromTimerIdx(HRTIM_HandleTypeDef * hhrtim,
                                                          uint32_t TimerIdx)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  DMA_HandleTypeDef * hdma = (DMA_HandleTypeDef *)NULL;
 8009be6:	2300      	movs	r3, #0
 8009be8:	60fb      	str	r3, [r7, #12]

  switch (TimerIdx)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b06      	cmp	r3, #6
 8009bee:	d834      	bhi.n	8009c5a <HRTIM_GetDMAHandleFromTimerIdx+0x7e>
 8009bf0:	a201      	add	r2, pc, #4	; (adr r2, 8009bf8 <HRTIM_GetDMAHandleFromTimerIdx+0x1c>)
 8009bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf6:	bf00      	nop
 8009bf8:	08009c1f 	.word	0x08009c1f
 8009bfc:	08009c29 	.word	0x08009c29
 8009c00:	08009c33 	.word	0x08009c33
 8009c04:	08009c3d 	.word	0x08009c3d
 8009c08:	08009c47 	.word	0x08009c47
 8009c0c:	08009c51 	.word	0x08009c51
 8009c10:	08009c15 	.word	0x08009c15
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hdma = hhrtim->hdmaMaster;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c1a:	60fb      	str	r3, [r7, #12]
      break;
 8009c1c:	e01e      	b.n	8009c5c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hdma = hhrtim->hdmaTimerA;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c24:	60fb      	str	r3, [r7, #12]
      break;
 8009c26:	e019      	b.n	8009c5c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hdma = hhrtim->hdmaTimerB;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009c2e:	60fb      	str	r3, [r7, #12]
      break;
 8009c30:	e014      	b.n	8009c5c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hdma = hhrtim->hdmaTimerC;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009c38:	60fb      	str	r3, [r7, #12]
      break;
 8009c3a:	e00f      	b.n	8009c5c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hdma = hhrtim->hdmaTimerD;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c42:	60fb      	str	r3, [r7, #12]
      break;
 8009c44:	e00a      	b.n	8009c5c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hdma = hhrtim->hdmaTimerE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c4c:	60fb      	str	r3, [r7, #12]
      break;
 8009c4e:	e005      	b.n	8009c5c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hdma = hhrtim->hdmaTimerF;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009c56:	60fb      	str	r3, [r7, #12]
      break;
 8009c58:	e000      	b.n	8009c5c <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  default:
    break;
 8009c5a:	bf00      	nop
  }

  return hdma;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop

08009c6c <GetTimerIdxFromDMAHandle>:

static uint32_t GetTimerIdxFromDMAHandle(HRTIM_HandleTypeDef * hhrtim,
                                         DMA_HandleTypeDef * hdma)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t timed_idx = 0xFFFFFFFFU;
 8009c76:	f04f 33ff 	mov.w	r3, #4294967295
 8009c7a:	60fb      	str	r3, [r7, #12]

  if (hdma == hhrtim->hdmaMaster)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d102      	bne.n	8009c8e <GetTimerIdxFromDMAHandle+0x22>
  {
    timed_idx = HRTIM_TIMERINDEX_MASTER;
 8009c88:	2306      	movs	r3, #6
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	e034      	b.n	8009cf8 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerA)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d102      	bne.n	8009ca0 <GetTimerIdxFromDMAHandle+0x34>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_A;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	e02b      	b.n	8009cf8 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerB)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d102      	bne.n	8009cb2 <GetTimerIdxFromDMAHandle+0x46>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_B;
 8009cac:	2301      	movs	r3, #1
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	e022      	b.n	8009cf8 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerC)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d102      	bne.n	8009cc4 <GetTimerIdxFromDMAHandle+0x58>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_C;
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	e019      	b.n	8009cf8 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerD)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d102      	bne.n	8009cd6 <GetTimerIdxFromDMAHandle+0x6a>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_D;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	e010      	b.n	8009cf8 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerE)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d102      	bne.n	8009ce8 <GetTimerIdxFromDMAHandle+0x7c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_E;
 8009ce2:	2304      	movs	r3, #4
 8009ce4:	60fb      	str	r3, [r7, #12]
 8009ce6:	e007      	b.n	8009cf8 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerF)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d101      	bne.n	8009cf8 <GetTimerIdxFromDMAHandle+0x8c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_F;
 8009cf4:	2305      	movs	r3, #5
 8009cf6:	60fb      	str	r3, [r7, #12]
  }
  else
  {
    /* nothing to do */
  }
  return timed_idx;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3714      	adds	r7, #20
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr
	...

08009d08 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b06      	cmp	r3, #6
 8009d16:	d85e      	bhi.n	8009dd6 <HRTIM_ForceRegistersUpdate+0xce>
 8009d18:	a201      	add	r2, pc, #4	; (adr r2, 8009d20 <HRTIM_ForceRegistersUpdate+0x18>)
 8009d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1e:	bf00      	nop
 8009d20:	08009d53 	.word	0x08009d53
 8009d24:	08009d69 	.word	0x08009d69
 8009d28:	08009d7f 	.word	0x08009d7f
 8009d2c:	08009d95 	.word	0x08009d95
 8009d30:	08009dab 	.word	0x08009dab
 8009d34:	08009dc1 	.word	0x08009dc1
 8009d38:	08009d3d 	.word	0x08009d3d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f042 0201 	orr.w	r2, r2, #1
 8009d4c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009d50:	e042      	b.n	8009dd8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f042 0202 	orr.w	r2, r2, #2
 8009d62:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009d66:	e037      	b.n	8009dd8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f042 0204 	orr.w	r2, r2, #4
 8009d78:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009d7c:	e02c      	b.n	8009dd8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f042 0208 	orr.w	r2, r2, #8
 8009d8e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009d92:	e021      	b.n	8009dd8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f042 0210 	orr.w	r2, r2, #16
 8009da4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009da8:	e016      	b.n	8009dd8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f042 0220 	orr.w	r2, r2, #32
 8009dba:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009dbe:	e00b      	b.n	8009dd8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dd0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009dd4:	e000      	b.n	8009dd8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8009dd6:	bf00      	nop
  }
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* Fault 1 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d101      	bne.n	8009e00 <HRTIM_HRTIM_ISR+0x1c>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e000      	b.n	8009e02 <HRTIM_HRTIM_ISR+0x1e>
 8009e00:	2300      	movs	r3, #0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00f      	beq.n	8009e26 <HRTIM_HRTIM_ISR+0x42>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT1) != RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d107      	bne.n	8009e26 <HRTIM_HRTIM_ISR+0x42>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7fb f86b 	bl	8004efc <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d101      	bne.n	8009e3a <HRTIM_HRTIM_ISR+0x56>
 8009e36:	2301      	movs	r3, #1
 8009e38:	e000      	b.n	8009e3c <HRTIM_HRTIM_ISR+0x58>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00f      	beq.n	8009e60 <HRTIM_HRTIM_ISR+0x7c>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT2) != RESET)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8009e48:	f003 0302 	and.w	r3, r3, #2
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d107      	bne.n	8009e60 <HRTIM_HRTIM_ISR+0x7c>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2202      	movs	r2, #2
 8009e56:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7ff fa0b 	bl	8009276 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009e68:	f003 0304 	and.w	r3, r3, #4
 8009e6c:	2b04      	cmp	r3, #4
 8009e6e:	d101      	bne.n	8009e74 <HRTIM_HRTIM_ISR+0x90>
 8009e70:	2301      	movs	r3, #1
 8009e72:	e000      	b.n	8009e76 <HRTIM_HRTIM_ISR+0x92>
 8009e74:	2300      	movs	r3, #0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00f      	beq.n	8009e9a <HRTIM_HRTIM_ISR+0xb6>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT3) != RESET)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8009e82:	f003 0304 	and.w	r3, r3, #4
 8009e86:	2b04      	cmp	r3, #4
 8009e88:	d107      	bne.n	8009e9a <HRTIM_HRTIM_ISR+0xb6>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2204      	movs	r2, #4
 8009e90:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7fb f83c 	bl	8004f12 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009ea2:	f003 0308 	and.w	r3, r3, #8
 8009ea6:	2b08      	cmp	r3, #8
 8009ea8:	d101      	bne.n	8009eae <HRTIM_HRTIM_ISR+0xca>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e000      	b.n	8009eb0 <HRTIM_HRTIM_ISR+0xcc>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00f      	beq.n	8009ed4 <HRTIM_HRTIM_ISR+0xf0>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT4) != RESET)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8009ebc:	f003 0308 	and.w	r3, r3, #8
 8009ec0:	2b08      	cmp	r3, #8
 8009ec2:	d107      	bne.n	8009ed4 <HRTIM_HRTIM_ISR+0xf0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2208      	movs	r2, #8
 8009eca:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff f9db 	bl	800928a <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009edc:	f003 0310 	and.w	r3, r3, #16
 8009ee0:	2b10      	cmp	r3, #16
 8009ee2:	d101      	bne.n	8009ee8 <HRTIM_HRTIM_ISR+0x104>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e000      	b.n	8009eea <HRTIM_HRTIM_ISR+0x106>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00f      	beq.n	8009f0e <HRTIM_HRTIM_ISR+0x12a>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT5) != RESET)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8009ef6:	f003 0310 	and.w	r3, r3, #16
 8009efa:	2b10      	cmp	r3, #16
 8009efc:	d107      	bne.n	8009f0e <HRTIM_HRTIM_ISR+0x12a>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2210      	movs	r2, #16
 8009f04:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f7ff f9c8 	bl	800929e <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f1a:	2b40      	cmp	r3, #64	; 0x40
 8009f1c:	d101      	bne.n	8009f22 <HRTIM_HRTIM_ISR+0x13e>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e000      	b.n	8009f24 <HRTIM_HRTIM_ISR+0x140>
 8009f22:	2300      	movs	r3, #0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00f      	beq.n	8009f48 <HRTIM_HRTIM_ISR+0x164>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT6) != RESET)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8009f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f34:	2b40      	cmp	r3, #64	; 0x40
 8009f36:	d107      	bne.n	8009f48 <HRTIM_HRTIM_ISR+0x164>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2240      	movs	r2, #64	; 0x40
 8009f3e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7ff f9b5 	bl	80092b2 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009f50:	f003 0320 	and.w	r3, r3, #32
 8009f54:	2b20      	cmp	r3, #32
 8009f56:	d101      	bne.n	8009f5c <HRTIM_HRTIM_ISR+0x178>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e000      	b.n	8009f5e <HRTIM_HRTIM_ISR+0x17a>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00f      	beq.n	8009f82 <HRTIM_HRTIM_ISR+0x19e>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_SYSFLT) != RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8009f6a:	f003 0320 	and.w	r3, r3, #32
 8009f6e:	2b20      	cmp	r3, #32
 8009f70:	d107      	bne.n	8009f82 <HRTIM_HRTIM_ISR+0x19e>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2220      	movs	r2, #32
 8009f78:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7ff f9a2 	bl	80092c6 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f82:	bf00      	nop
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  /* DLL calibration ready event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fa2:	d101      	bne.n	8009fa8 <HRTIM_Master_ISR+0x1e>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e000      	b.n	8009faa <HRTIM_Master_ISR+0x20>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d019      	beq.n	8009fe2 <HRTIM_Master_ISR+0x58>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_DLLRDY) != RESET)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8009fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fbe:	d110      	bne.n	8009fe2 <HRTIM_Master_ISR+0x58>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009fc8:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff f97c 	bl	80092da <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ff2:	d101      	bne.n	8009ff8 <HRTIM_Master_ISR+0x6e>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e000      	b.n	8009ffa <HRTIM_Master_ISR+0x70>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d011      	beq.n	800a022 <HRTIM_Master_ISR+0x98>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_BMPER) != RESET)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800a006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a00a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a00e:	d108      	bne.n	800a022 <HRTIM_Master_ISR+0x98>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a018:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7ff f966 	bl	80092ee <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d101      	bne.n	800a034 <HRTIM_Master_ISR+0xaa>
 800a030:	2301      	movs	r3, #1
 800a032:	e000      	b.n	800a036 <HRTIM_Master_ISR+0xac>
 800a034:	2300      	movs	r3, #0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00e      	beq.n	800a058 <HRTIM_Master_ISR+0xce>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP1) != RESET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	2b01      	cmp	r3, #1
 800a046:	d107      	bne.n	800a058 <HRTIM_Master_ISR+0xce>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2201      	movs	r2, #1
 800a04e:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800a050:	2106      	movs	r1, #6
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff f975 	bl	8009342 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f003 0302 	and.w	r3, r3, #2
 800a062:	2b02      	cmp	r3, #2
 800a064:	d101      	bne.n	800a06a <HRTIM_Master_ISR+0xe0>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <HRTIM_Master_ISR+0xe2>
 800a06a:	2300      	movs	r3, #0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00e      	beq.n	800a08e <HRTIM_Master_ISR+0x104>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP2) != RESET)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	f003 0302 	and.w	r3, r3, #2
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d107      	bne.n	800a08e <HRTIM_Master_ISR+0x104>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2202      	movs	r2, #2
 800a084:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800a086:	2106      	movs	r1, #6
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff f965 	bl	8009358 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b04      	cmp	r3, #4
 800a09a:	d101      	bne.n	800a0a0 <HRTIM_Master_ISR+0x116>
 800a09c:	2301      	movs	r3, #1
 800a09e:	e000      	b.n	800a0a2 <HRTIM_Master_ISR+0x118>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00e      	beq.n	800a0c4 <HRTIM_Master_ISR+0x13a>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP3) != RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b04      	cmp	r3, #4
 800a0b2:	d107      	bne.n	800a0c4 <HRTIM_Master_ISR+0x13a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2204      	movs	r2, #4
 800a0ba:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800a0bc:	2106      	movs	r1, #6
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7ff f955 	bl	800936e <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	f003 0308 	and.w	r3, r3, #8
 800a0ce:	2b08      	cmp	r3, #8
 800a0d0:	d101      	bne.n	800a0d6 <HRTIM_Master_ISR+0x14c>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e000      	b.n	800a0d8 <HRTIM_Master_ISR+0x14e>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00e      	beq.n	800a0fa <HRTIM_Master_ISR+0x170>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP4) != RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	f003 0308 	and.w	r3, r3, #8
 800a0e6:	2b08      	cmp	r3, #8
 800a0e8:	d107      	bne.n	800a0fa <HRTIM_Master_ISR+0x170>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2208      	movs	r2, #8
 800a0f0:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800a0f2:	2106      	movs	r1, #6
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff f945 	bl	8009384 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	f003 0310 	and.w	r3, r3, #16
 800a104:	2b10      	cmp	r3, #16
 800a106:	d101      	bne.n	800a10c <HRTIM_Master_ISR+0x182>
 800a108:	2301      	movs	r3, #1
 800a10a:	e000      	b.n	800a10e <HRTIM_Master_ISR+0x184>
 800a10c:	2300      	movs	r3, #0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00e      	beq.n	800a130 <HRTIM_Master_ISR+0x1a6>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MREP) != RESET)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	f003 0310 	and.w	r3, r3, #16
 800a11c:	2b10      	cmp	r3, #16
 800a11e:	d107      	bne.n	800a130 <HRTIM_Master_ISR+0x1a6>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2210      	movs	r2, #16
 800a126:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800a128:	2106      	movs	r1, #6
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7ff f8fe 	bl	800932c <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f003 0320 	and.w	r3, r3, #32
 800a13a:	2b20      	cmp	r3, #32
 800a13c:	d101      	bne.n	800a142 <HRTIM_Master_ISR+0x1b8>
 800a13e:	2301      	movs	r3, #1
 800a140:	e000      	b.n	800a144 <HRTIM_Master_ISR+0x1ba>
 800a142:	2300      	movs	r3, #0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00d      	beq.n	800a164 <HRTIM_Master_ISR+0x1da>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_SYNC) != RESET)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f003 0320 	and.w	r3, r3, #32
 800a152:	2b20      	cmp	r3, #32
 800a154:	d106      	bne.n	800a164 <HRTIM_Master_ISR+0x1da>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2220      	movs	r2, #32
 800a15c:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff f8cf 	bl	8009302 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16e:	2b40      	cmp	r3, #64	; 0x40
 800a170:	d101      	bne.n	800a176 <HRTIM_Master_ISR+0x1ec>
 800a172:	2301      	movs	r3, #1
 800a174:	e000      	b.n	800a178 <HRTIM_Master_ISR+0x1ee>
 800a176:	2300      	movs	r3, #0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00e      	beq.n	800a19a <HRTIM_Master_ISR+0x210>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MUPD) != RESET)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a186:	2b40      	cmp	r3, #64	; 0x40
 800a188:	d107      	bne.n	800a19a <HRTIM_Master_ISR+0x210>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2240      	movs	r2, #64	; 0x40
 800a190:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800a192:	2106      	movs	r1, #6
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7ff f8be 	bl	8009316 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800a19a:	bf00      	nop
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b082      	sub	sp, #8
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	6039      	str	r1, [r7, #0]
  /* Timer compare 1 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	01db      	lsls	r3, r3, #7
 800a1b6:	4413      	add	r3, r2
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0301 	and.w	r3, r3, #1
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d101      	bne.n	800a1c8 <HRTIM_Timer_ISR+0x26>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e000      	b.n	800a1ca <HRTIM_Timer_ISR+0x28>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d016      	beq.n	800a1fc <HRTIM_Timer_ISR+0x5a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1) != RESET)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	01db      	lsls	r3, r3, #7
 800a1d6:	4413      	add	r3, r2
 800a1d8:	338c      	adds	r3, #140	; 0x8c
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d10b      	bne.n	800a1fc <HRTIM_Timer_ISR+0x5a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	01db      	lsls	r3, r3, #7
 800a1ec:	4413      	add	r3, r2
 800a1ee:	3388      	adds	r3, #136	; 0x88
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 800a1f4:	6839      	ldr	r1, [r7, #0]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7ff f8a3 	bl	8009342 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	3301      	adds	r3, #1
 800a204:	01db      	lsls	r3, r3, #7
 800a206:	4413      	add	r3, r2
 800a208:	3304      	adds	r3, #4
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0302 	and.w	r3, r3, #2
 800a210:	2b02      	cmp	r3, #2
 800a212:	d101      	bne.n	800a218 <HRTIM_Timer_ISR+0x76>
 800a214:	2301      	movs	r3, #1
 800a216:	e000      	b.n	800a21a <HRTIM_Timer_ISR+0x78>
 800a218:	2300      	movs	r3, #0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d016      	beq.n	800a24c <HRTIM_Timer_ISR+0xaa>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2) != RESET)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	01db      	lsls	r3, r3, #7
 800a226:	4413      	add	r3, r2
 800a228:	338c      	adds	r3, #140	; 0x8c
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 0302 	and.w	r3, r3, #2
 800a230:	2b02      	cmp	r3, #2
 800a232:	d10b      	bne.n	800a24c <HRTIM_Timer_ISR+0xaa>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	01db      	lsls	r3, r3, #7
 800a23c:	4413      	add	r3, r2
 800a23e:	3388      	adds	r3, #136	; 0x88
 800a240:	2202      	movs	r2, #2
 800a242:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7ff f886 	bl	8009358 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	3301      	adds	r3, #1
 800a254:	01db      	lsls	r3, r3, #7
 800a256:	4413      	add	r3, r2
 800a258:	3304      	adds	r3, #4
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b04      	cmp	r3, #4
 800a262:	d101      	bne.n	800a268 <HRTIM_Timer_ISR+0xc6>
 800a264:	2301      	movs	r3, #1
 800a266:	e000      	b.n	800a26a <HRTIM_Timer_ISR+0xc8>
 800a268:	2300      	movs	r3, #0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d016      	beq.n	800a29c <HRTIM_Timer_ISR+0xfa>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3) != RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	01db      	lsls	r3, r3, #7
 800a276:	4413      	add	r3, r2
 800a278:	338c      	adds	r3, #140	; 0x8c
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	2b04      	cmp	r3, #4
 800a282:	d10b      	bne.n	800a29c <HRTIM_Timer_ISR+0xfa>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	01db      	lsls	r3, r3, #7
 800a28c:	4413      	add	r3, r2
 800a28e:	3388      	adds	r3, #136	; 0x88
 800a290:	2204      	movs	r2, #4
 800a292:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7ff f869 	bl	800936e <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	01db      	lsls	r3, r3, #7
 800a2a6:	4413      	add	r3, r2
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 0308 	and.w	r3, r3, #8
 800a2b0:	2b08      	cmp	r3, #8
 800a2b2:	d101      	bne.n	800a2b8 <HRTIM_Timer_ISR+0x116>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e000      	b.n	800a2ba <HRTIM_Timer_ISR+0x118>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d016      	beq.n	800a2ec <HRTIM_Timer_ISR+0x14a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4) != RESET)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	01db      	lsls	r3, r3, #7
 800a2c6:	4413      	add	r3, r2
 800a2c8:	338c      	adds	r3, #140	; 0x8c
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 0308 	and.w	r3, r3, #8
 800a2d0:	2b08      	cmp	r3, #8
 800a2d2:	d10b      	bne.n	800a2ec <HRTIM_Timer_ISR+0x14a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	01db      	lsls	r3, r3, #7
 800a2dc:	4413      	add	r3, r2
 800a2de:	3388      	adds	r3, #136	; 0x88
 800a2e0:	2208      	movs	r2, #8
 800a2e2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff f84c 	bl	8009384 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	01db      	lsls	r3, r3, #7
 800a2f6:	4413      	add	r3, r2
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0310 	and.w	r3, r3, #16
 800a300:	2b10      	cmp	r3, #16
 800a302:	d101      	bne.n	800a308 <HRTIM_Timer_ISR+0x166>
 800a304:	2301      	movs	r3, #1
 800a306:	e000      	b.n	800a30a <HRTIM_Timer_ISR+0x168>
 800a308:	2300      	movs	r3, #0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d016      	beq.n	800a33c <HRTIM_Timer_ISR+0x19a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_REP) != RESET)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	01db      	lsls	r3, r3, #7
 800a316:	4413      	add	r3, r2
 800a318:	338c      	adds	r3, #140	; 0x8c
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 0310 	and.w	r3, r3, #16
 800a320:	2b10      	cmp	r3, #16
 800a322:	d10b      	bne.n	800a33c <HRTIM_Timer_ISR+0x19a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	01db      	lsls	r3, r3, #7
 800a32c:	4413      	add	r3, r2
 800a32e:	3388      	adds	r3, #136	; 0x88
 800a330:	2210      	movs	r2, #16
 800a332:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7fe fff8 	bl	800932c <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	3301      	adds	r3, #1
 800a344:	01db      	lsls	r3, r3, #7
 800a346:	4413      	add	r3, r2
 800a348:	3304      	adds	r3, #4
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a350:	2b40      	cmp	r3, #64	; 0x40
 800a352:	d101      	bne.n	800a358 <HRTIM_Timer_ISR+0x1b6>
 800a354:	2301      	movs	r3, #1
 800a356:	e000      	b.n	800a35a <HRTIM_Timer_ISR+0x1b8>
 800a358:	2300      	movs	r3, #0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d016      	beq.n	800a38c <HRTIM_Timer_ISR+0x1ea>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD) != RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	01db      	lsls	r3, r3, #7
 800a366:	4413      	add	r3, r2
 800a368:	338c      	adds	r3, #140	; 0x8c
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a370:	2b40      	cmp	r3, #64	; 0x40
 800a372:	d10b      	bne.n	800a38c <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	01db      	lsls	r3, r3, #7
 800a37c:	4413      	add	r3, r2
 800a37e:	3388      	adds	r3, #136	; 0x88
 800a380:	2240      	movs	r2, #64	; 0x40
 800a382:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7fe ffc5 	bl	8009316 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	3301      	adds	r3, #1
 800a394:	01db      	lsls	r3, r3, #7
 800a396:	4413      	add	r3, r2
 800a398:	3304      	adds	r3, #4
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a0:	2b80      	cmp	r3, #128	; 0x80
 800a3a2:	d101      	bne.n	800a3a8 <HRTIM_Timer_ISR+0x206>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e000      	b.n	800a3aa <HRTIM_Timer_ISR+0x208>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d016      	beq.n	800a3dc <HRTIM_Timer_ISR+0x23a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1) != RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	01db      	lsls	r3, r3, #7
 800a3b6:	4413      	add	r3, r2
 800a3b8:	338c      	adds	r3, #140	; 0x8c
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c0:	2b80      	cmp	r3, #128	; 0x80
 800a3c2:	d10b      	bne.n	800a3dc <HRTIM_Timer_ISR+0x23a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	01db      	lsls	r3, r3, #7
 800a3cc:	4413      	add	r3, r2
 800a3ce:	3388      	adds	r3, #136	; 0x88
 800a3d0:	2280      	movs	r2, #128	; 0x80
 800a3d2:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7fe ffdf 	bl	800939a <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	01db      	lsls	r3, r3, #7
 800a3e6:	4413      	add	r3, r2
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3f4:	d101      	bne.n	800a3fa <HRTIM_Timer_ISR+0x258>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e000      	b.n	800a3fc <HRTIM_Timer_ISR+0x25a>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d018      	beq.n	800a432 <HRTIM_Timer_ISR+0x290>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2) != RESET)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	01db      	lsls	r3, r3, #7
 800a408:	4413      	add	r3, r2
 800a40a:	338c      	adds	r3, #140	; 0x8c
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a416:	d10c      	bne.n	800a432 <HRTIM_Timer_ISR+0x290>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	01db      	lsls	r3, r3, #7
 800a420:	4413      	add	r3, r2
 800a422:	3388      	adds	r3, #136	; 0x88
 800a424:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a428:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7fe ffbf 	bl	80093b0 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	3301      	adds	r3, #1
 800a43a:	01db      	lsls	r3, r3, #7
 800a43c:	4413      	add	r3, r2
 800a43e:	3304      	adds	r3, #4
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a44a:	d101      	bne.n	800a450 <HRTIM_Timer_ISR+0x2ae>
 800a44c:	2301      	movs	r3, #1
 800a44e:	e000      	b.n	800a452 <HRTIM_Timer_ISR+0x2b0>
 800a450:	2300      	movs	r3, #0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d018      	beq.n	800a488 <HRTIM_Timer_ISR+0x2e6>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1) != RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	01db      	lsls	r3, r3, #7
 800a45e:	4413      	add	r3, r2
 800a460:	338c      	adds	r3, #140	; 0x8c
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a46c:	d10c      	bne.n	800a488 <HRTIM_Timer_ISR+0x2e6>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	01db      	lsls	r3, r3, #7
 800a476:	4413      	add	r3, r2
 800a478:	3388      	adds	r3, #136	; 0x88
 800a47a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a47e:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7fe ffb5 	bl	80093f2 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	3301      	adds	r3, #1
 800a490:	01db      	lsls	r3, r3, #7
 800a492:	4413      	add	r3, r2
 800a494:	3304      	adds	r3, #4
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a49c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a0:	d101      	bne.n	800a4a6 <HRTIM_Timer_ISR+0x304>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e000      	b.n	800a4a8 <HRTIM_Timer_ISR+0x306>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d018      	beq.n	800a4de <HRTIM_Timer_ISR+0x33c>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1) != RESET)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	01db      	lsls	r3, r3, #7
 800a4b4:	4413      	add	r3, r2
 800a4b6:	338c      	adds	r3, #140	; 0x8c
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4c2:	d10c      	bne.n	800a4de <HRTIM_Timer_ISR+0x33c>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	01db      	lsls	r3, r3, #7
 800a4cc:	4413      	add	r3, r2
 800a4ce:	3388      	adds	r3, #136	; 0x88
 800a4d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a4d4:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7fe ff95 	bl	8009408 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	01db      	lsls	r3, r3, #7
 800a4e8:	4413      	add	r3, r2
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4f6:	d101      	bne.n	800a4fc <HRTIM_Timer_ISR+0x35a>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e000      	b.n	800a4fe <HRTIM_Timer_ISR+0x35c>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d018      	beq.n	800a534 <HRTIM_Timer_ISR+0x392>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2) != RESET)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	01db      	lsls	r3, r3, #7
 800a50a:	4413      	add	r3, r2
 800a50c:	338c      	adds	r3, #140	; 0x8c
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a518:	d10c      	bne.n	800a534 <HRTIM_Timer_ISR+0x392>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	01db      	lsls	r3, r3, #7
 800a522:	4413      	add	r3, r2
 800a524:	3388      	adds	r3, #136	; 0x88
 800a526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a52a:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7fe ff75 	bl	800941e <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	3301      	adds	r3, #1
 800a53c:	01db      	lsls	r3, r3, #7
 800a53e:	4413      	add	r3, r2
 800a540:	3304      	adds	r3, #4
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a54c:	d101      	bne.n	800a552 <HRTIM_Timer_ISR+0x3b0>
 800a54e:	2301      	movs	r3, #1
 800a550:	e000      	b.n	800a554 <HRTIM_Timer_ISR+0x3b2>
 800a552:	2300      	movs	r3, #0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d018      	beq.n	800a58a <HRTIM_Timer_ISR+0x3e8>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2) != RESET)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	01db      	lsls	r3, r3, #7
 800a560:	4413      	add	r3, r2
 800a562:	338c      	adds	r3, #140	; 0x8c
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a56a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a56e:	d10c      	bne.n	800a58a <HRTIM_Timer_ISR+0x3e8>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	01db      	lsls	r3, r3, #7
 800a578:	4413      	add	r3, r2
 800a57a:	3388      	adds	r3, #136	; 0x88
 800a57c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a580:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7fe ff55 	bl	8009434 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	3301      	adds	r3, #1
 800a592:	01db      	lsls	r3, r3, #7
 800a594:	4413      	add	r3, r2
 800a596:	3304      	adds	r3, #4
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a59e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5a2:	d101      	bne.n	800a5a8 <HRTIM_Timer_ISR+0x406>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e000      	b.n	800a5aa <HRTIM_Timer_ISR+0x408>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d018      	beq.n	800a5e0 <HRTIM_Timer_ISR+0x43e>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST) != RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	01db      	lsls	r3, r3, #7
 800a5b6:	4413      	add	r3, r2
 800a5b8:	338c      	adds	r3, #140	; 0x8c
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5c4:	d10c      	bne.n	800a5e0 <HRTIM_Timer_ISR+0x43e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	01db      	lsls	r3, r3, #7
 800a5ce:	4413      	add	r3, r2
 800a5d0:	3388      	adds	r3, #136	; 0x88
 800a5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a5d6:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 800a5d8:	6839      	ldr	r1, [r7, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7fe fefe 	bl	80093dc <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	01db      	lsls	r3, r3, #7
 800a5ea:	4413      	add	r3, r2
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5f8:	d101      	bne.n	800a5fe <HRTIM_Timer_ISR+0x45c>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e000      	b.n	800a600 <HRTIM_Timer_ISR+0x45e>
 800a5fe:	2300      	movs	r3, #0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d018      	beq.n	800a636 <HRTIM_Timer_ISR+0x494>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT) != RESET)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	01db      	lsls	r3, r3, #7
 800a60c:	4413      	add	r3, r2
 800a60e:	338c      	adds	r3, #140	; 0x8c
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a61a:	d10c      	bne.n	800a636 <HRTIM_Timer_ISR+0x494>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	01db      	lsls	r3, r3, #7
 800a624:	4413      	add	r3, r2
 800a626:	3388      	adds	r3, #136	; 0x88
 800a628:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a62c:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7fe fec8 	bl	80093c6 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800a636:	bf00      	nop
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <HRTIM_DMAMasterCplt>:
  * @brief  DMA callback invoked upon master timer related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMAMasterCplt(DMA_HandleTypeDef *hdma)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64a:	60fb      	str	r3, [r7, #12]

  if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP1) != (uint32_t)RESET)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a656:	2b00      	cmp	r3, #0
 800a658:	d004      	beq.n	800a664 <HRTIM_DMAMasterCplt+0x26>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800a65a:	2106      	movs	r1, #6
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f7fe fe70 	bl	8009342 <HAL_HRTIM_Compare1EventCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 800a662:	e045      	b.n	800a6f0 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP2) != (uint32_t)RESET)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d004      	beq.n	800a67c <HRTIM_DMAMasterCplt+0x3e>
    HAL_HRTIM_Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800a672:	2106      	movs	r1, #6
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f7fe fe6f 	bl	8009358 <HAL_HRTIM_Compare2EventCallback>
}
 800a67a:	e039      	b.n	800a6f0 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP3) != (uint32_t)RESET)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a686:	2b00      	cmp	r3, #0
 800a688:	d004      	beq.n	800a694 <HRTIM_DMAMasterCplt+0x56>
    HAL_HRTIM_Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800a68a:	2106      	movs	r1, #6
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f7fe fe6e 	bl	800936e <HAL_HRTIM_Compare3EventCallback>
}
 800a692:	e02d      	b.n	800a6f0 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP4) != (uint32_t)RESET)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d004      	beq.n	800a6ac <HRTIM_DMAMasterCplt+0x6e>
    HAL_HRTIM_Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800a6a2:	2106      	movs	r1, #6
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f7fe fe6d 	bl	8009384 <HAL_HRTIM_Compare4EventCallback>
}
 800a6aa:	e021      	b.n	800a6f0 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_SYNC) != (uint32_t)RESET)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <HRTIM_DMAMasterCplt+0x84>
    HAL_HRTIM_SynchronizationEventCallback(hrtim);
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f7fe fe21 	bl	8009302 <HAL_HRTIM_SynchronizationEventCallback>
}
 800a6c0:	e016      	b.n	800a6f0 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MUPD) != (uint32_t)RESET)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d004      	beq.n	800a6da <HRTIM_DMAMasterCplt+0x9c>
    HAL_HRTIM_RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800a6d0:	2106      	movs	r1, #6
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7fe fe1f 	bl	8009316 <HAL_HRTIM_RegistersUpdateCallback>
}
 800a6d8:	e00a      	b.n	800a6f0 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MREP) != (uint32_t)RESET)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <HRTIM_DMAMasterCplt+0xb2>
    HAL_HRTIM_RepetitionEventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800a6e8:	2106      	movs	r1, #6
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f7fe fe1e 	bl	800932c <HAL_HRTIM_RepetitionEventCallback>
}
 800a6f0:	bf00      	nop
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <HRTIM_DMATimerxCplt>:
  * @brief  DMA callback invoked upon timer A..F related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMATimerxCplt(DMA_HandleTypeDef *hdma)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;

  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a704:	60fb      	str	r3, [r7, #12]

  timer_idx = (uint8_t)GetTimerIdxFromDMAHandle(hrtim, hdma);
 800a706:	6879      	ldr	r1, [r7, #4]
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7ff faaf 	bl	8009c6c <GetTimerIdxFromDMAHandle>
 800a70e:	4603      	mov	r3, r0
 800a710:	72fb      	strb	r3, [r7, #11]

  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 800a712:	7afb      	ldrb	r3, [r7, #11]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00f      	beq.n	800a738 <HRTIM_DMATimerxCplt+0x40>
 800a718:	7afb      	ldrb	r3, [r7, #11]
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d00c      	beq.n	800a738 <HRTIM_DMATimerxCplt+0x40>
 800a71e:	7afb      	ldrb	r3, [r7, #11]
 800a720:	2b02      	cmp	r3, #2
 800a722:	d009      	beq.n	800a738 <HRTIM_DMATimerxCplt+0x40>
 800a724:	7afb      	ldrb	r3, [r7, #11]
 800a726:	2b03      	cmp	r3, #3
 800a728:	d006      	beq.n	800a738 <HRTIM_DMATimerxCplt+0x40>
 800a72a:	7afb      	ldrb	r3, [r7, #11]
 800a72c:	2b04      	cmp	r3, #4
 800a72e:	d003      	beq.n	800a738 <HRTIM_DMATimerxCplt+0x40>
 800a730:	7afb      	ldrb	r3, [r7, #11]
 800a732:	2b05      	cmp	r3, #5
 800a734:	f040 80ee 	bne.w	800a914 <HRTIM_DMATimerxCplt+0x21c>

  if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP1) != (uint32_t)RESET)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	7afb      	ldrb	r3, [r7, #11]
 800a73e:	01db      	lsls	r3, r3, #7
 800a740:	4413      	add	r3, r2
 800a742:	338c      	adds	r3, #140	; 0x8c
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d005      	beq.n	800a75a <HRTIM_DMATimerxCplt+0x62>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, timer_idx);
 800a74e:	7afb      	ldrb	r3, [r7, #11]
 800a750:	4619      	mov	r1, r3
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7fe fdf5 	bl	8009342 <HAL_HRTIM_Compare1EventCallback>
 800a758:	e0dd      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP2) != (uint32_t)RESET)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	7afb      	ldrb	r3, [r7, #11]
 800a760:	01db      	lsls	r3, r3, #7
 800a762:	4413      	add	r3, r2
 800a764:	338c      	adds	r3, #140	; 0x8c
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d005      	beq.n	800a77c <HRTIM_DMATimerxCplt+0x84>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare2EventCallback(hrtim, timer_idx);
 800a770:	7afb      	ldrb	r3, [r7, #11]
 800a772:	4619      	mov	r1, r3
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f7fe fdef 	bl	8009358 <HAL_HRTIM_Compare2EventCallback>
 800a77a:	e0cc      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP3) != (uint32_t)RESET)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	7afb      	ldrb	r3, [r7, #11]
 800a782:	01db      	lsls	r3, r3, #7
 800a784:	4413      	add	r3, r2
 800a786:	338c      	adds	r3, #140	; 0x8c
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d005      	beq.n	800a79e <HRTIM_DMATimerxCplt+0xa6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare3EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare3EventCallback(hrtim, timer_idx);
 800a792:	7afb      	ldrb	r3, [r7, #11]
 800a794:	4619      	mov	r1, r3
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f7fe fde9 	bl	800936e <HAL_HRTIM_Compare3EventCallback>
 800a79c:	e0bb      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP4) != (uint32_t)RESET)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	7afb      	ldrb	r3, [r7, #11]
 800a7a4:	01db      	lsls	r3, r3, #7
 800a7a6:	4413      	add	r3, r2
 800a7a8:	338c      	adds	r3, #140	; 0x8c
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d005      	beq.n	800a7c0 <HRTIM_DMATimerxCplt+0xc8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare4EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare4EventCallback(hrtim, timer_idx);
 800a7b4:	7afb      	ldrb	r3, [r7, #11]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f7fe fde3 	bl	8009384 <HAL_HRTIM_Compare4EventCallback>
 800a7be:	e0aa      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_UPD) != (uint32_t)RESET)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	7afb      	ldrb	r3, [r7, #11]
 800a7c6:	01db      	lsls	r3, r3, #7
 800a7c8:	4413      	add	r3, r2
 800a7ca:	338c      	adds	r3, #140	; 0x8c
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d005      	beq.n	800a7e2 <HRTIM_DMATimerxCplt+0xea>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RegistersUpdateCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RegistersUpdateCallback(hrtim, timer_idx);
 800a7d6:	7afb      	ldrb	r3, [r7, #11]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f7fe fd9b 	bl	8009316 <HAL_HRTIM_RegistersUpdateCallback>
 800a7e0:	e099      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT1) != (uint32_t)RESET)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	7afb      	ldrb	r3, [r7, #11]
 800a7e8:	01db      	lsls	r3, r3, #7
 800a7ea:	4413      	add	r3, r2
 800a7ec:	338c      	adds	r3, #140	; 0x8c
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d005      	beq.n	800a804 <HRTIM_DMATimerxCplt+0x10c>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture1EventCallback(hrtim, timer_idx);
 800a7f8:	7afb      	ldrb	r3, [r7, #11]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f7fe fdcc 	bl	800939a <HAL_HRTIM_Capture1EventCallback>
 800a802:	e088      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT2) != (uint32_t)RESET)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	7afb      	ldrb	r3, [r7, #11]
 800a80a:	01db      	lsls	r3, r3, #7
 800a80c:	4413      	add	r3, r2
 800a80e:	338c      	adds	r3, #140	; 0x8c
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d005      	beq.n	800a826 <HRTIM_DMATimerxCplt+0x12e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture2EventCallback(hrtim, timer_idx);
 800a81a:	7afb      	ldrb	r3, [r7, #11]
 800a81c:	4619      	mov	r1, r3
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f7fe fdc6 	bl	80093b0 <HAL_HRTIM_Capture2EventCallback>
 800a824:	e077      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET1) != (uint32_t)RESET)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	7afb      	ldrb	r3, [r7, #11]
 800a82c:	01db      	lsls	r3, r3, #7
 800a82e:	4413      	add	r3, r2
 800a830:	338c      	adds	r3, #140	; 0x8c
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <HRTIM_DMATimerxCplt+0x150>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1SetCallback(hrtim, timer_idx);
 800a83c:	7afb      	ldrb	r3, [r7, #11]
 800a83e:	4619      	mov	r1, r3
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f7fe fdd6 	bl	80093f2 <HAL_HRTIM_Output1SetCallback>
 800a846:	e066      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST1) != (uint32_t)RESET)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	7afb      	ldrb	r3, [r7, #11]
 800a84e:	01db      	lsls	r3, r3, #7
 800a850:	4413      	add	r3, r2
 800a852:	338c      	adds	r3, #140	; 0x8c
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d005      	beq.n	800a86a <HRTIM_DMATimerxCplt+0x172>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1ResetCallback(hrtim, timer_idx);
 800a85e:	7afb      	ldrb	r3, [r7, #11]
 800a860:	4619      	mov	r1, r3
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f7fe fdd0 	bl	8009408 <HAL_HRTIM_Output1ResetCallback>
 800a868:	e055      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET2) != (uint32_t)RESET)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	7afb      	ldrb	r3, [r7, #11]
 800a870:	01db      	lsls	r3, r3, #7
 800a872:	4413      	add	r3, r2
 800a874:	338c      	adds	r3, #140	; 0x8c
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d005      	beq.n	800a88c <HRTIM_DMATimerxCplt+0x194>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2SetCallback(hrtim, timer_idx);
 800a880:	7afb      	ldrb	r3, [r7, #11]
 800a882:	4619      	mov	r1, r3
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f7fe fdca 	bl	800941e <HAL_HRTIM_Output2SetCallback>
 800a88a:	e044      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST2) != (uint32_t)RESET)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	7afb      	ldrb	r3, [r7, #11]
 800a892:	01db      	lsls	r3, r3, #7
 800a894:	4413      	add	r3, r2
 800a896:	338c      	adds	r3, #140	; 0x8c
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d005      	beq.n	800a8ae <HRTIM_DMATimerxCplt+0x1b6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2ResetCallback(hrtim, timer_idx);
 800a8a2:	7afb      	ldrb	r3, [r7, #11]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f7fe fdc4 	bl	8009434 <HAL_HRTIM_Output2ResetCallback>
 800a8ac:	e033      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST) != (uint32_t)RESET)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	7afb      	ldrb	r3, [r7, #11]
 800a8b4:	01db      	lsls	r3, r3, #7
 800a8b6:	4413      	add	r3, r2
 800a8b8:	338c      	adds	r3, #140	; 0x8c
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <HRTIM_DMATimerxCplt+0x1d8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->CounterResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_CounterResetCallback(hrtim, timer_idx);
 800a8c4:	7afb      	ldrb	r3, [r7, #11]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f7fe fd87 	bl	80093dc <HAL_HRTIM_CounterResetCallback>
 800a8ce:	e022      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_DLYPRT) != (uint32_t)RESET)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	7afb      	ldrb	r3, [r7, #11]
 800a8d6:	01db      	lsls	r3, r3, #7
 800a8d8:	4413      	add	r3, r2
 800a8da:	338c      	adds	r3, #140	; 0x8c
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d005      	beq.n	800a8f2 <HRTIM_DMATimerxCplt+0x1fa>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->DelayedProtectionCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_DelayedProtectionCallback(hrtim, timer_idx);
 800a8e6:	7afb      	ldrb	r3, [r7, #11]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f7fe fd6b 	bl	80093c6 <HAL_HRTIM_DelayedProtectionCallback>
 800a8f0:	e011      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_REP) != (uint32_t)RESET)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	7afb      	ldrb	r3, [r7, #11]
 800a8f8:	01db      	lsls	r3, r3, #7
 800a8fa:	4413      	add	r3, r2
 800a8fc:	338c      	adds	r3, #140	; 0x8c
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d006      	beq.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RepetitionEventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RepetitionEventCallback(hrtim, timer_idx);
 800a908:	7afb      	ldrb	r3, [r7, #11]
 800a90a:	4619      	mov	r1, r3
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f7fe fd0d 	bl	800932c <HAL_HRTIM_RepetitionEventCallback>
 800a912:	e000      	b.n	800a916 <HRTIM_DMATimerxCplt+0x21e>
  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 800a914:	bf00      	nop
  }
  else
  {
    /* nothing to do */
  }
}
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <HRTIM_DMAError>:
* @brief  DMA error callback
* @param  hdma pointer to DMA handle.
* @retval None
*/
static void HRTIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a928:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->ErrorCallback(hrtim);
#else
  HAL_HRTIM_ErrorCallback(hrtim);
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7fe fd8d 	bl	800944a <HAL_HRTIM_ErrorCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
}
 800a930:	bf00      	nop
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d141      	bne.n	800a9ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a946:	4b4b      	ldr	r3, [pc, #300]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a94e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a952:	d131      	bne.n	800a9b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a954:	4b47      	ldr	r3, [pc, #284]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a95a:	4a46      	ldr	r2, [pc, #280]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a95c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a960:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a964:	4b43      	ldr	r3, [pc, #268]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a96c:	4a41      	ldr	r2, [pc, #260]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a96e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a972:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a974:	4b40      	ldr	r3, [pc, #256]	; (800aa78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2232      	movs	r2, #50	; 0x32
 800a97a:	fb02 f303 	mul.w	r3, r2, r3
 800a97e:	4a3f      	ldr	r2, [pc, #252]	; (800aa7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a980:	fba2 2303 	umull	r2, r3, r2, r3
 800a984:	0c9b      	lsrs	r3, r3, #18
 800a986:	3301      	adds	r3, #1
 800a988:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a98a:	e002      	b.n	800a992 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	3b01      	subs	r3, #1
 800a990:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a992:	4b38      	ldr	r3, [pc, #224]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a99a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a99e:	d102      	bne.n	800a9a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1f2      	bne.n	800a98c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a9a6:	4b33      	ldr	r3, [pc, #204]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9b2:	d158      	bne.n	800aa66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e057      	b.n	800aa68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a9b8:	4b2e      	ldr	r3, [pc, #184]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9be:	4a2d      	ldr	r2, [pc, #180]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a9c8:	e04d      	b.n	800aa66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9d0:	d141      	bne.n	800aa56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a9d2:	4b28      	ldr	r3, [pc, #160]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a9da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9de:	d131      	bne.n	800aa44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a9e0:	4b24      	ldr	r3, [pc, #144]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9e6:	4a23      	ldr	r2, [pc, #140]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a9f0:	4b20      	ldr	r3, [pc, #128]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a9f8:	4a1e      	ldr	r2, [pc, #120]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a9fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800aa00:	4b1d      	ldr	r3, [pc, #116]	; (800aa78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2232      	movs	r2, #50	; 0x32
 800aa06:	fb02 f303 	mul.w	r3, r2, r3
 800aa0a:	4a1c      	ldr	r2, [pc, #112]	; (800aa7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800aa0c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa10:	0c9b      	lsrs	r3, r3, #18
 800aa12:	3301      	adds	r3, #1
 800aa14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aa16:	e002      	b.n	800aa1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aa1e:	4b15      	ldr	r3, [pc, #84]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa2a:	d102      	bne.n	800aa32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1f2      	bne.n	800aa18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800aa32:	4b10      	ldr	r3, [pc, #64]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa3e:	d112      	bne.n	800aa66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e011      	b.n	800aa68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aa44:	4b0b      	ldr	r3, [pc, #44]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa4a:	4a0a      	ldr	r2, [pc, #40]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800aa54:	e007      	b.n	800aa66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800aa56:	4b07      	ldr	r3, [pc, #28]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aa5e:	4a05      	ldr	r2, [pc, #20]	; (800aa74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	40007000 	.word	0x40007000
 800aa78:	20000004 	.word	0x20000004
 800aa7c:	431bde83 	.word	0x431bde83

0800aa80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800aa84:	4b05      	ldr	r3, [pc, #20]	; (800aa9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	4a04      	ldr	r2, [pc, #16]	; (800aa9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800aa8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa8e:	6093      	str	r3, [r2, #8]
}
 800aa90:	bf00      	nop
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	40007000 	.word	0x40007000

0800aaa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b088      	sub	sp, #32
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d101      	bne.n	800aab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	e308      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 0301 	and.w	r3, r3, #1
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d075      	beq.n	800abaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aabe:	4ba3      	ldr	r3, [pc, #652]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	f003 030c 	and.w	r3, r3, #12
 800aac6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aac8:	4ba0      	ldr	r3, [pc, #640]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	f003 0303 	and.w	r3, r3, #3
 800aad0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	2b0c      	cmp	r3, #12
 800aad6:	d102      	bne.n	800aade <HAL_RCC_OscConfig+0x3e>
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d002      	beq.n	800aae4 <HAL_RCC_OscConfig+0x44>
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	2b08      	cmp	r3, #8
 800aae2:	d10b      	bne.n	800aafc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aae4:	4b99      	ldr	r3, [pc, #612]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d05b      	beq.n	800aba8 <HAL_RCC_OscConfig+0x108>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d157      	bne.n	800aba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e2e3      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab04:	d106      	bne.n	800ab14 <HAL_RCC_OscConfig+0x74>
 800ab06:	4b91      	ldr	r3, [pc, #580]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a90      	ldr	r2, [pc, #576]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ab0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab10:	6013      	str	r3, [r2, #0]
 800ab12:	e01d      	b.n	800ab50 <HAL_RCC_OscConfig+0xb0>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab1c:	d10c      	bne.n	800ab38 <HAL_RCC_OscConfig+0x98>
 800ab1e:	4b8b      	ldr	r3, [pc, #556]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a8a      	ldr	r2, [pc, #552]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ab24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab28:	6013      	str	r3, [r2, #0]
 800ab2a:	4b88      	ldr	r3, [pc, #544]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a87      	ldr	r2, [pc, #540]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ab30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	e00b      	b.n	800ab50 <HAL_RCC_OscConfig+0xb0>
 800ab38:	4b84      	ldr	r3, [pc, #528]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a83      	ldr	r2, [pc, #524]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ab3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab42:	6013      	str	r3, [r2, #0]
 800ab44:	4b81      	ldr	r3, [pc, #516]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a80      	ldr	r2, [pc, #512]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ab4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d013      	beq.n	800ab80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab58:	f7fa fd08 	bl	800556c <HAL_GetTick>
 800ab5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ab5e:	e008      	b.n	800ab72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab60:	f7fa fd04 	bl	800556c <HAL_GetTick>
 800ab64:	4602      	mov	r2, r0
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	2b64      	cmp	r3, #100	; 0x64
 800ab6c:	d901      	bls.n	800ab72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	e2a8      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ab72:	4b76      	ldr	r3, [pc, #472]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0f0      	beq.n	800ab60 <HAL_RCC_OscConfig+0xc0>
 800ab7e:	e014      	b.n	800abaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab80:	f7fa fcf4 	bl	800556c <HAL_GetTick>
 800ab84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ab86:	e008      	b.n	800ab9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab88:	f7fa fcf0 	bl	800556c <HAL_GetTick>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	2b64      	cmp	r3, #100	; 0x64
 800ab94:	d901      	bls.n	800ab9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ab96:	2303      	movs	r3, #3
 800ab98:	e294      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ab9a:	4b6c      	ldr	r3, [pc, #432]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1f0      	bne.n	800ab88 <HAL_RCC_OscConfig+0xe8>
 800aba6:	e000      	b.n	800abaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 0302 	and.w	r3, r3, #2
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d075      	beq.n	800aca2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abb6:	4b65      	ldr	r3, [pc, #404]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	f003 030c 	and.w	r3, r3, #12
 800abbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800abc0:	4b62      	ldr	r3, [pc, #392]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f003 0303 	and.w	r3, r3, #3
 800abc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	2b0c      	cmp	r3, #12
 800abce:	d102      	bne.n	800abd6 <HAL_RCC_OscConfig+0x136>
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d002      	beq.n	800abdc <HAL_RCC_OscConfig+0x13c>
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	2b04      	cmp	r3, #4
 800abda:	d11f      	bne.n	800ac1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abdc:	4b5b      	ldr	r3, [pc, #364]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d005      	beq.n	800abf4 <HAL_RCC_OscConfig+0x154>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e267      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abf4:	4b55      	ldr	r3, [pc, #340]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	061b      	lsls	r3, r3, #24
 800ac02:	4952      	ldr	r1, [pc, #328]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ac04:	4313      	orrs	r3, r2
 800ac06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ac08:	4b51      	ldr	r3, [pc, #324]	; (800ad50 <HAL_RCC_OscConfig+0x2b0>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7fa fc61 	bl	80054d4 <HAL_InitTick>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d043      	beq.n	800aca0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e253      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d023      	beq.n	800ac6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac24:	4b49      	ldr	r3, [pc, #292]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a48      	ldr	r2, [pc, #288]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ac2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac30:	f7fa fc9c 	bl	800556c <HAL_GetTick>
 800ac34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ac36:	e008      	b.n	800ac4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac38:	f7fa fc98 	bl	800556c <HAL_GetTick>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d901      	bls.n	800ac4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ac46:	2303      	movs	r3, #3
 800ac48:	e23c      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ac4a:	4b40      	ldr	r3, [pc, #256]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d0f0      	beq.n	800ac38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac56:	4b3d      	ldr	r3, [pc, #244]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	061b      	lsls	r3, r3, #24
 800ac64:	4939      	ldr	r1, [pc, #228]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ac66:	4313      	orrs	r3, r2
 800ac68:	604b      	str	r3, [r1, #4]
 800ac6a:	e01a      	b.n	800aca2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac6c:	4b37      	ldr	r3, [pc, #220]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a36      	ldr	r2, [pc, #216]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ac72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac78:	f7fa fc78 	bl	800556c <HAL_GetTick>
 800ac7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ac7e:	e008      	b.n	800ac92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac80:	f7fa fc74 	bl	800556c <HAL_GetTick>
 800ac84:	4602      	mov	r2, r0
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d901      	bls.n	800ac92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	e218      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ac92:	4b2e      	ldr	r3, [pc, #184]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1f0      	bne.n	800ac80 <HAL_RCC_OscConfig+0x1e0>
 800ac9e:	e000      	b.n	800aca2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aca0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 0308 	and.w	r3, r3, #8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d03c      	beq.n	800ad28 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d01c      	beq.n	800acf0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800acb6:	4b25      	ldr	r3, [pc, #148]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800acb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800acbc:	4a23      	ldr	r2, [pc, #140]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800acbe:	f043 0301 	orr.w	r3, r3, #1
 800acc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acc6:	f7fa fc51 	bl	800556c <HAL_GetTick>
 800acca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800accc:	e008      	b.n	800ace0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800acce:	f7fa fc4d 	bl	800556c <HAL_GetTick>
 800acd2:	4602      	mov	r2, r0
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d901      	bls.n	800ace0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e1f1      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ace0:	4b1a      	ldr	r3, [pc, #104]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ace2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ace6:	f003 0302 	and.w	r3, r3, #2
 800acea:	2b00      	cmp	r3, #0
 800acec:	d0ef      	beq.n	800acce <HAL_RCC_OscConfig+0x22e>
 800acee:	e01b      	b.n	800ad28 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800acf0:	4b16      	ldr	r3, [pc, #88]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800acf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800acf6:	4a15      	ldr	r2, [pc, #84]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800acf8:	f023 0301 	bic.w	r3, r3, #1
 800acfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad00:	f7fa fc34 	bl	800556c <HAL_GetTick>
 800ad04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ad06:	e008      	b.n	800ad1a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad08:	f7fa fc30 	bl	800556c <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d901      	bls.n	800ad1a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e1d4      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ad1a:	4b0c      	ldr	r3, [pc, #48]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ad1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad20:	f003 0302 	and.w	r3, r3, #2
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1ef      	bne.n	800ad08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0304 	and.w	r3, r3, #4
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 80ab 	beq.w	800ae8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad36:	2300      	movs	r3, #0
 800ad38:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ad3a:	4b04      	ldr	r3, [pc, #16]	; (800ad4c <HAL_RCC_OscConfig+0x2ac>)
 800ad3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d106      	bne.n	800ad54 <HAL_RCC_OscConfig+0x2b4>
 800ad46:	2301      	movs	r3, #1
 800ad48:	e005      	b.n	800ad56 <HAL_RCC_OscConfig+0x2b6>
 800ad4a:	bf00      	nop
 800ad4c:	40021000 	.word	0x40021000
 800ad50:	20000008 	.word	0x20000008
 800ad54:	2300      	movs	r3, #0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00d      	beq.n	800ad76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad5a:	4baf      	ldr	r3, [pc, #700]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800ad5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad5e:	4aae      	ldr	r2, [pc, #696]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800ad60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad64:	6593      	str	r3, [r2, #88]	; 0x58
 800ad66:	4bac      	ldr	r3, [pc, #688]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800ad68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ad72:	2301      	movs	r3, #1
 800ad74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ad76:	4ba9      	ldr	r3, [pc, #676]	; (800b01c <HAL_RCC_OscConfig+0x57c>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d118      	bne.n	800adb4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ad82:	4ba6      	ldr	r3, [pc, #664]	; (800b01c <HAL_RCC_OscConfig+0x57c>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4aa5      	ldr	r2, [pc, #660]	; (800b01c <HAL_RCC_OscConfig+0x57c>)
 800ad88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ad8e:	f7fa fbed 	bl	800556c <HAL_GetTick>
 800ad92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ad94:	e008      	b.n	800ada8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad96:	f7fa fbe9 	bl	800556c <HAL_GetTick>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d901      	bls.n	800ada8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e18d      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ada8:	4b9c      	ldr	r3, [pc, #624]	; (800b01c <HAL_RCC_OscConfig+0x57c>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d0f0      	beq.n	800ad96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d108      	bne.n	800adce <HAL_RCC_OscConfig+0x32e>
 800adbc:	4b96      	ldr	r3, [pc, #600]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800adbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adc2:	4a95      	ldr	r2, [pc, #596]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800adc4:	f043 0301 	orr.w	r3, r3, #1
 800adc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800adcc:	e024      	b.n	800ae18 <HAL_RCC_OscConfig+0x378>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	2b05      	cmp	r3, #5
 800add4:	d110      	bne.n	800adf8 <HAL_RCC_OscConfig+0x358>
 800add6:	4b90      	ldr	r3, [pc, #576]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800add8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800addc:	4a8e      	ldr	r2, [pc, #568]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800adde:	f043 0304 	orr.w	r3, r3, #4
 800ade2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ade6:	4b8c      	ldr	r3, [pc, #560]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800ade8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adec:	4a8a      	ldr	r2, [pc, #552]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800adee:	f043 0301 	orr.w	r3, r3, #1
 800adf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800adf6:	e00f      	b.n	800ae18 <HAL_RCC_OscConfig+0x378>
 800adf8:	4b87      	ldr	r3, [pc, #540]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800adfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adfe:	4a86      	ldr	r2, [pc, #536]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800ae00:	f023 0301 	bic.w	r3, r3, #1
 800ae04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ae08:	4b83      	ldr	r3, [pc, #524]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800ae0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae0e:	4a82      	ldr	r2, [pc, #520]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800ae10:	f023 0304 	bic.w	r3, r3, #4
 800ae14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d016      	beq.n	800ae4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae20:	f7fa fba4 	bl	800556c <HAL_GetTick>
 800ae24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ae26:	e00a      	b.n	800ae3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae28:	f7fa fba0 	bl	800556c <HAL_GetTick>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d901      	bls.n	800ae3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	e142      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ae3e:	4b76      	ldr	r3, [pc, #472]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800ae40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae44:	f003 0302 	and.w	r3, r3, #2
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d0ed      	beq.n	800ae28 <HAL_RCC_OscConfig+0x388>
 800ae4c:	e015      	b.n	800ae7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae4e:	f7fa fb8d 	bl	800556c <HAL_GetTick>
 800ae52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ae54:	e00a      	b.n	800ae6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae56:	f7fa fb89 	bl	800556c <HAL_GetTick>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d901      	bls.n	800ae6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e12b      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ae6c:	4b6a      	ldr	r3, [pc, #424]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800ae6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae72:	f003 0302 	and.w	r3, r3, #2
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d1ed      	bne.n	800ae56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ae7a:	7ffb      	ldrb	r3, [r7, #31]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d105      	bne.n	800ae8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae80:	4b65      	ldr	r3, [pc, #404]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800ae82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae84:	4a64      	ldr	r2, [pc, #400]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800ae86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0320 	and.w	r3, r3, #32
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d03c      	beq.n	800af12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d01c      	beq.n	800aeda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aea0:	4b5d      	ldr	r3, [pc, #372]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800aea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aea6:	4a5c      	ldr	r2, [pc, #368]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800aea8:	f043 0301 	orr.w	r3, r3, #1
 800aeac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aeb0:	f7fa fb5c 	bl	800556c <HAL_GetTick>
 800aeb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aeb6:	e008      	b.n	800aeca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aeb8:	f7fa fb58 	bl	800556c <HAL_GetTick>
 800aebc:	4602      	mov	r2, r0
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	1ad3      	subs	r3, r2, r3
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d901      	bls.n	800aeca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e0fc      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aeca:	4b53      	ldr	r3, [pc, #332]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800aecc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aed0:	f003 0302 	and.w	r3, r3, #2
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d0ef      	beq.n	800aeb8 <HAL_RCC_OscConfig+0x418>
 800aed8:	e01b      	b.n	800af12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aeda:	4b4f      	ldr	r3, [pc, #316]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800aedc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aee0:	4a4d      	ldr	r2, [pc, #308]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800aee2:	f023 0301 	bic.w	r3, r3, #1
 800aee6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aeea:	f7fa fb3f 	bl	800556c <HAL_GetTick>
 800aeee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aef0:	e008      	b.n	800af04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aef2:	f7fa fb3b 	bl	800556c <HAL_GetTick>
 800aef6:	4602      	mov	r2, r0
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d901      	bls.n	800af04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800af00:	2303      	movs	r3, #3
 800af02:	e0df      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800af04:	4b44      	ldr	r3, [pc, #272]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800af06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af0a:	f003 0302 	and.w	r3, r3, #2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1ef      	bne.n	800aef2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	69db      	ldr	r3, [r3, #28]
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 80d3 	beq.w	800b0c2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800af1c:	4b3e      	ldr	r3, [pc, #248]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	f003 030c 	and.w	r3, r3, #12
 800af24:	2b0c      	cmp	r3, #12
 800af26:	f000 808d 	beq.w	800b044 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d15a      	bne.n	800afe8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af32:	4b39      	ldr	r3, [pc, #228]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a38      	ldr	r2, [pc, #224]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800af38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af3e:	f7fa fb15 	bl	800556c <HAL_GetTick>
 800af42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800af44:	e008      	b.n	800af58 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af46:	f7fa fb11 	bl	800556c <HAL_GetTick>
 800af4a:	4602      	mov	r2, r0
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	2b02      	cmp	r3, #2
 800af52:	d901      	bls.n	800af58 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800af54:	2303      	movs	r3, #3
 800af56:	e0b5      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800af58:	4b2f      	ldr	r3, [pc, #188]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1f0      	bne.n	800af46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af64:	4b2c      	ldr	r3, [pc, #176]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800af66:	68da      	ldr	r2, [r3, #12]
 800af68:	4b2d      	ldr	r3, [pc, #180]	; (800b020 <HAL_RCC_OscConfig+0x580>)
 800af6a:	4013      	ands	r3, r2
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	6a11      	ldr	r1, [r2, #32]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800af74:	3a01      	subs	r2, #1
 800af76:	0112      	lsls	r2, r2, #4
 800af78:	4311      	orrs	r1, r2
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800af7e:	0212      	lsls	r2, r2, #8
 800af80:	4311      	orrs	r1, r2
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af86:	0852      	lsrs	r2, r2, #1
 800af88:	3a01      	subs	r2, #1
 800af8a:	0552      	lsls	r2, r2, #21
 800af8c:	4311      	orrs	r1, r2
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800af92:	0852      	lsrs	r2, r2, #1
 800af94:	3a01      	subs	r2, #1
 800af96:	0652      	lsls	r2, r2, #25
 800af98:	4311      	orrs	r1, r2
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af9e:	06d2      	lsls	r2, r2, #27
 800afa0:	430a      	orrs	r2, r1
 800afa2:	491d      	ldr	r1, [pc, #116]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800afa4:	4313      	orrs	r3, r2
 800afa6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800afa8:	4b1b      	ldr	r3, [pc, #108]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a1a      	ldr	r2, [pc, #104]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800afae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800afb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800afb4:	4b18      	ldr	r3, [pc, #96]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	4a17      	ldr	r2, [pc, #92]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800afba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800afbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afc0:	f7fa fad4 	bl	800556c <HAL_GetTick>
 800afc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800afc6:	e008      	b.n	800afda <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afc8:	f7fa fad0 	bl	800556c <HAL_GetTick>
 800afcc:	4602      	mov	r2, r0
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d901      	bls.n	800afda <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800afd6:	2303      	movs	r3, #3
 800afd8:	e074      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800afda:	4b0f      	ldr	r3, [pc, #60]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d0f0      	beq.n	800afc8 <HAL_RCC_OscConfig+0x528>
 800afe6:	e06c      	b.n	800b0c2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afe8:	4b0b      	ldr	r3, [pc, #44]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a0a      	ldr	r2, [pc, #40]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800afee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aff2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800aff4:	4b08      	ldr	r3, [pc, #32]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	4a07      	ldr	r2, [pc, #28]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800affa:	f023 0303 	bic.w	r3, r3, #3
 800affe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b000:	4b05      	ldr	r3, [pc, #20]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	4a04      	ldr	r2, [pc, #16]	; (800b018 <HAL_RCC_OscConfig+0x578>)
 800b006:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b00a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b00e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b010:	f7fa faac 	bl	800556c <HAL_GetTick>
 800b014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b016:	e00e      	b.n	800b036 <HAL_RCC_OscConfig+0x596>
 800b018:	40021000 	.word	0x40021000
 800b01c:	40007000 	.word	0x40007000
 800b020:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b024:	f7fa faa2 	bl	800556c <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d901      	bls.n	800b036 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e046      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b036:	4b25      	ldr	r3, [pc, #148]	; (800b0cc <HAL_RCC_OscConfig+0x62c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d1f0      	bne.n	800b024 <HAL_RCC_OscConfig+0x584>
 800b042:	e03e      	b.n	800b0c2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	69db      	ldr	r3, [r3, #28]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d101      	bne.n	800b050 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	e039      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b050:	4b1e      	ldr	r3, [pc, #120]	; (800b0cc <HAL_RCC_OscConfig+0x62c>)
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f003 0203 	and.w	r2, r3, #3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
 800b060:	429a      	cmp	r2, r3
 800b062:	d12c      	bne.n	800b0be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06e:	3b01      	subs	r3, #1
 800b070:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b072:	429a      	cmp	r2, r3
 800b074:	d123      	bne.n	800b0be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b080:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b082:	429a      	cmp	r2, r3
 800b084:	d11b      	bne.n	800b0be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b090:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b092:	429a      	cmp	r2, r3
 800b094:	d113      	bne.n	800b0be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a0:	085b      	lsrs	r3, r3, #1
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d109      	bne.n	800b0be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b4:	085b      	lsrs	r3, r3, #1
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d001      	beq.n	800b0c2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e000      	b.n	800b0c4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3720      	adds	r7, #32
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	40021000 	.word	0x40021000

0800b0d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e11e      	b.n	800b326 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b0e8:	4b91      	ldr	r3, [pc, #580]	; (800b330 <HAL_RCC_ClockConfig+0x260>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f003 030f 	and.w	r3, r3, #15
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d910      	bls.n	800b118 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0f6:	4b8e      	ldr	r3, [pc, #568]	; (800b330 <HAL_RCC_ClockConfig+0x260>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f023 020f 	bic.w	r2, r3, #15
 800b0fe:	498c      	ldr	r1, [pc, #560]	; (800b330 <HAL_RCC_ClockConfig+0x260>)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	4313      	orrs	r3, r2
 800b104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b106:	4b8a      	ldr	r3, [pc, #552]	; (800b330 <HAL_RCC_ClockConfig+0x260>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f003 030f 	and.w	r3, r3, #15
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	429a      	cmp	r2, r3
 800b112:	d001      	beq.n	800b118 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	e106      	b.n	800b326 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	d073      	beq.n	800b20c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	2b03      	cmp	r3, #3
 800b12a:	d129      	bne.n	800b180 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b12c:	4b81      	ldr	r3, [pc, #516]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e0f4      	b.n	800b326 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b13c:	f000 f988 	bl	800b450 <RCC_GetSysClockFreqFromPLLSource>
 800b140:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	4a7c      	ldr	r2, [pc, #496]	; (800b338 <HAL_RCC_ClockConfig+0x268>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d93f      	bls.n	800b1ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b14a:	4b7a      	ldr	r3, [pc, #488]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d009      	beq.n	800b16a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d033      	beq.n	800b1ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b166:	2b00      	cmp	r3, #0
 800b168:	d12f      	bne.n	800b1ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b16a:	4b72      	ldr	r3, [pc, #456]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b172:	4a70      	ldr	r2, [pc, #448]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b178:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b17a:	2380      	movs	r3, #128	; 0x80
 800b17c:	617b      	str	r3, [r7, #20]
 800b17e:	e024      	b.n	800b1ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	2b02      	cmp	r3, #2
 800b186:	d107      	bne.n	800b198 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b188:	4b6a      	ldr	r3, [pc, #424]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b190:	2b00      	cmp	r3, #0
 800b192:	d109      	bne.n	800b1a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	e0c6      	b.n	800b326 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b198:	4b66      	ldr	r3, [pc, #408]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e0be      	b.n	800b326 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b1a8:	f000 f8ce 	bl	800b348 <HAL_RCC_GetSysClockFreq>
 800b1ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	4a61      	ldr	r2, [pc, #388]	; (800b338 <HAL_RCC_ClockConfig+0x268>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d909      	bls.n	800b1ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b1b6:	4b5f      	ldr	r3, [pc, #380]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1be:	4a5d      	ldr	r2, [pc, #372]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b1c6:	2380      	movs	r3, #128	; 0x80
 800b1c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b1ca:	4b5a      	ldr	r3, [pc, #360]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	f023 0203 	bic.w	r2, r3, #3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	4957      	ldr	r1, [pc, #348]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1dc:	f7fa f9c6 	bl	800556c <HAL_GetTick>
 800b1e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1e2:	e00a      	b.n	800b1fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1e4:	f7fa f9c2 	bl	800556c <HAL_GetTick>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d901      	bls.n	800b1fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	e095      	b.n	800b326 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1fa:	4b4e      	ldr	r3, [pc, #312]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f003 020c 	and.w	r2, r3, #12
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	429a      	cmp	r2, r3
 800b20a:	d1eb      	bne.n	800b1e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 0302 	and.w	r3, r3, #2
 800b214:	2b00      	cmp	r3, #0
 800b216:	d023      	beq.n	800b260 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 0304 	and.w	r3, r3, #4
 800b220:	2b00      	cmp	r3, #0
 800b222:	d005      	beq.n	800b230 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b224:	4b43      	ldr	r3, [pc, #268]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	4a42      	ldr	r2, [pc, #264]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b22a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b22e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0308 	and.w	r3, r3, #8
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d007      	beq.n	800b24c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b23c:	4b3d      	ldr	r3, [pc, #244]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b244:	4a3b      	ldr	r2, [pc, #236]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b246:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b24a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b24c:	4b39      	ldr	r3, [pc, #228]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	4936      	ldr	r1, [pc, #216]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b25a:	4313      	orrs	r3, r2
 800b25c:	608b      	str	r3, [r1, #8]
 800b25e:	e008      	b.n	800b272 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	2b80      	cmp	r3, #128	; 0x80
 800b264:	d105      	bne.n	800b272 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b266:	4b33      	ldr	r3, [pc, #204]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	4a32      	ldr	r2, [pc, #200]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b26c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b270:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b272:	4b2f      	ldr	r3, [pc, #188]	; (800b330 <HAL_RCC_ClockConfig+0x260>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f003 030f 	and.w	r3, r3, #15
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d21d      	bcs.n	800b2bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b280:	4b2b      	ldr	r3, [pc, #172]	; (800b330 <HAL_RCC_ClockConfig+0x260>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f023 020f 	bic.w	r2, r3, #15
 800b288:	4929      	ldr	r1, [pc, #164]	; (800b330 <HAL_RCC_ClockConfig+0x260>)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	4313      	orrs	r3, r2
 800b28e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b290:	f7fa f96c 	bl	800556c <HAL_GetTick>
 800b294:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b296:	e00a      	b.n	800b2ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b298:	f7fa f968 	bl	800556c <HAL_GetTick>
 800b29c:	4602      	mov	r2, r0
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d901      	bls.n	800b2ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	e03b      	b.n	800b326 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2ae:	4b20      	ldr	r3, [pc, #128]	; (800b330 <HAL_RCC_ClockConfig+0x260>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 030f 	and.w	r3, r3, #15
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d1ed      	bne.n	800b298 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d008      	beq.n	800b2da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2c8:	4b1a      	ldr	r3, [pc, #104]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	4917      	ldr	r1, [pc, #92]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 0308 	and.w	r3, r3, #8
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d009      	beq.n	800b2fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b2e6:	4b13      	ldr	r3, [pc, #76]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	00db      	lsls	r3, r3, #3
 800b2f4:	490f      	ldr	r1, [pc, #60]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b2fa:	f000 f825 	bl	800b348 <HAL_RCC_GetSysClockFreq>
 800b2fe:	4601      	mov	r1, r0
 800b300:	4b0c      	ldr	r3, [pc, #48]	; (800b334 <HAL_RCC_ClockConfig+0x264>)
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	091b      	lsrs	r3, r3, #4
 800b306:	f003 030f 	and.w	r3, r3, #15
 800b30a:	4a0c      	ldr	r2, [pc, #48]	; (800b33c <HAL_RCC_ClockConfig+0x26c>)
 800b30c:	5cd3      	ldrb	r3, [r2, r3]
 800b30e:	f003 031f 	and.w	r3, r3, #31
 800b312:	fa21 f303 	lsr.w	r3, r1, r3
 800b316:	4a0a      	ldr	r2, [pc, #40]	; (800b340 <HAL_RCC_ClockConfig+0x270>)
 800b318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b31a:	4b0a      	ldr	r3, [pc, #40]	; (800b344 <HAL_RCC_ClockConfig+0x274>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fa f8d8 	bl	80054d4 <HAL_InitTick>
 800b324:	4603      	mov	r3, r0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3718      	adds	r7, #24
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	40022000 	.word	0x40022000
 800b334:	40021000 	.word	0x40021000
 800b338:	04c4b400 	.word	0x04c4b400
 800b33c:	0800cfe4 	.word	0x0800cfe4
 800b340:	20000004 	.word	0x20000004
 800b344:	20000008 	.word	0x20000008

0800b348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	b087      	sub	sp, #28
 800b34c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b34e:	4b2c      	ldr	r3, [pc, #176]	; (800b400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	f003 030c 	and.w	r3, r3, #12
 800b356:	2b04      	cmp	r3, #4
 800b358:	d102      	bne.n	800b360 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b35a:	4b2a      	ldr	r3, [pc, #168]	; (800b404 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b35c:	613b      	str	r3, [r7, #16]
 800b35e:	e047      	b.n	800b3f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b360:	4b27      	ldr	r3, [pc, #156]	; (800b400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	f003 030c 	and.w	r3, r3, #12
 800b368:	2b08      	cmp	r3, #8
 800b36a:	d102      	bne.n	800b372 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b36c:	4b26      	ldr	r3, [pc, #152]	; (800b408 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b36e:	613b      	str	r3, [r7, #16]
 800b370:	e03e      	b.n	800b3f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b372:	4b23      	ldr	r3, [pc, #140]	; (800b400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f003 030c 	and.w	r3, r3, #12
 800b37a:	2b0c      	cmp	r3, #12
 800b37c:	d136      	bne.n	800b3ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b37e:	4b20      	ldr	r3, [pc, #128]	; (800b400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	f003 0303 	and.w	r3, r3, #3
 800b386:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b388:	4b1d      	ldr	r3, [pc, #116]	; (800b400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	091b      	lsrs	r3, r3, #4
 800b38e:	f003 030f 	and.w	r3, r3, #15
 800b392:	3301      	adds	r3, #1
 800b394:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d10c      	bne.n	800b3b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b39c:	4a1a      	ldr	r2, [pc, #104]	; (800b408 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3a4:	4a16      	ldr	r2, [pc, #88]	; (800b400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b3a6:	68d2      	ldr	r2, [r2, #12]
 800b3a8:	0a12      	lsrs	r2, r2, #8
 800b3aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b3ae:	fb02 f303 	mul.w	r3, r2, r3
 800b3b2:	617b      	str	r3, [r7, #20]
      break;
 800b3b4:	e00c      	b.n	800b3d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b3b6:	4a13      	ldr	r2, [pc, #76]	; (800b404 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3be:	4a10      	ldr	r2, [pc, #64]	; (800b400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b3c0:	68d2      	ldr	r2, [r2, #12]
 800b3c2:	0a12      	lsrs	r2, r2, #8
 800b3c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b3c8:	fb02 f303 	mul.w	r3, r2, r3
 800b3cc:	617b      	str	r3, [r7, #20]
      break;
 800b3ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b3d0:	4b0b      	ldr	r3, [pc, #44]	; (800b400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	0e5b      	lsrs	r3, r3, #25
 800b3d6:	f003 0303 	and.w	r3, r3, #3
 800b3da:	3301      	adds	r3, #1
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b3e0:	697a      	ldr	r2, [r7, #20]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3e8:	613b      	str	r3, [r7, #16]
 800b3ea:	e001      	b.n	800b3f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b3f0:	693b      	ldr	r3, [r7, #16]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	371c      	adds	r7, #28
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	40021000 	.word	0x40021000
 800b404:	00f42400 	.word	0x00f42400
 800b408:	007a1200 	.word	0x007a1200

0800b40c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b40c:	b480      	push	{r7}
 800b40e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b410:	4b03      	ldr	r3, [pc, #12]	; (800b420 <HAL_RCC_GetHCLKFreq+0x14>)
 800b412:	681b      	ldr	r3, [r3, #0]
}
 800b414:	4618      	mov	r0, r3
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	20000004 	.word	0x20000004

0800b424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b428:	f7ff fff0 	bl	800b40c <HAL_RCC_GetHCLKFreq>
 800b42c:	4601      	mov	r1, r0
 800b42e:	4b06      	ldr	r3, [pc, #24]	; (800b448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	0adb      	lsrs	r3, r3, #11
 800b434:	f003 0307 	and.w	r3, r3, #7
 800b438:	4a04      	ldr	r2, [pc, #16]	; (800b44c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b43a:	5cd3      	ldrb	r3, [r2, r3]
 800b43c:	f003 031f 	and.w	r3, r3, #31
 800b440:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b444:	4618      	mov	r0, r3
 800b446:	bd80      	pop	{r7, pc}
 800b448:	40021000 	.word	0x40021000
 800b44c:	0800cff4 	.word	0x0800cff4

0800b450 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b450:	b480      	push	{r7}
 800b452:	b087      	sub	sp, #28
 800b454:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b456:	4b1e      	ldr	r3, [pc, #120]	; (800b4d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	f003 0303 	and.w	r3, r3, #3
 800b45e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b460:	4b1b      	ldr	r3, [pc, #108]	; (800b4d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	091b      	lsrs	r3, r3, #4
 800b466:	f003 030f 	and.w	r3, r3, #15
 800b46a:	3301      	adds	r3, #1
 800b46c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	2b03      	cmp	r3, #3
 800b472:	d10c      	bne.n	800b48e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b474:	4a17      	ldr	r2, [pc, #92]	; (800b4d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47c:	4a14      	ldr	r2, [pc, #80]	; (800b4d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b47e:	68d2      	ldr	r2, [r2, #12]
 800b480:	0a12      	lsrs	r2, r2, #8
 800b482:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b486:	fb02 f303 	mul.w	r3, r2, r3
 800b48a:	617b      	str	r3, [r7, #20]
    break;
 800b48c:	e00c      	b.n	800b4a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b48e:	4a12      	ldr	r2, [pc, #72]	; (800b4d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	fbb2 f3f3 	udiv	r3, r2, r3
 800b496:	4a0e      	ldr	r2, [pc, #56]	; (800b4d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b498:	68d2      	ldr	r2, [r2, #12]
 800b49a:	0a12      	lsrs	r2, r2, #8
 800b49c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b4a0:	fb02 f303 	mul.w	r3, r2, r3
 800b4a4:	617b      	str	r3, [r7, #20]
    break;
 800b4a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b4a8:	4b09      	ldr	r3, [pc, #36]	; (800b4d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	0e5b      	lsrs	r3, r3, #25
 800b4ae:	f003 0303 	and.w	r3, r3, #3
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	005b      	lsls	r3, r3, #1
 800b4b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b4b8:	697a      	ldr	r2, [r7, #20]
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b4c2:	687b      	ldr	r3, [r7, #4]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	371c      	adds	r7, #28
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	40021000 	.word	0x40021000
 800b4d4:	007a1200 	.word	0x007a1200
 800b4d8:	00f42400 	.word	0x00f42400

0800b4dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b086      	sub	sp, #24
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 8098 	beq.w	800b62a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b4fe:	4b43      	ldr	r3, [pc, #268]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10d      	bne.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b50a:	4b40      	ldr	r3, [pc, #256]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b50e:	4a3f      	ldr	r2, [pc, #252]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b514:	6593      	str	r3, [r2, #88]	; 0x58
 800b516:	4b3d      	ldr	r3, [pc, #244]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b51a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b51e:	60bb      	str	r3, [r7, #8]
 800b520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b522:	2301      	movs	r3, #1
 800b524:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b526:	4b3a      	ldr	r3, [pc, #232]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a39      	ldr	r2, [pc, #228]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b52c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b532:	f7fa f81b 	bl	800556c <HAL_GetTick>
 800b536:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b538:	e009      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b53a:	f7fa f817 	bl	800556c <HAL_GetTick>
 800b53e:	4602      	mov	r2, r0
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	2b02      	cmp	r3, #2
 800b546:	d902      	bls.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b548:	2303      	movs	r3, #3
 800b54a:	74fb      	strb	r3, [r7, #19]
        break;
 800b54c:	e005      	b.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b54e:	4b30      	ldr	r3, [pc, #192]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b556:	2b00      	cmp	r3, #0
 800b558:	d0ef      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b55a:	7cfb      	ldrb	r3, [r7, #19]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d159      	bne.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b560:	4b2a      	ldr	r3, [pc, #168]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b56a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d01e      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d019      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b57c:	4b23      	ldr	r3, [pc, #140]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b586:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b588:	4b20      	ldr	r3, [pc, #128]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b58e:	4a1f      	ldr	r2, [pc, #124]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b598:	4b1c      	ldr	r3, [pc, #112]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b59e:	4a1b      	ldr	r2, [pc, #108]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b5a8:	4a18      	ldr	r2, [pc, #96]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d016      	beq.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5ba:	f7f9 ffd7 	bl	800556c <HAL_GetTick>
 800b5be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b5c0:	e00b      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5c2:	f7f9 ffd3 	bl	800556c <HAL_GetTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d902      	bls.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	74fb      	strb	r3, [r7, #19]
            break;
 800b5d8:	e006      	b.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b5da:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5e0:	f003 0302 	and.w	r3, r3, #2
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d0ec      	beq.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b5e8:	7cfb      	ldrb	r3, [r7, #19]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10b      	bne.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5ee:	4b07      	ldr	r3, [pc, #28]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5fc:	4903      	ldr	r1, [pc, #12]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5fe:	4313      	orrs	r3, r2
 800b600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b604:	e008      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b606:	7cfb      	ldrb	r3, [r7, #19]
 800b608:	74bb      	strb	r3, [r7, #18]
 800b60a:	e005      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b60c:	40021000 	.word	0x40021000
 800b610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b614:	7cfb      	ldrb	r3, [r7, #19]
 800b616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b618:	7c7b      	ldrb	r3, [r7, #17]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d105      	bne.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b61e:	4baf      	ldr	r3, [pc, #700]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b622:	4aae      	ldr	r2, [pc, #696]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b628:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f003 0301 	and.w	r3, r3, #1
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00a      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b636:	4ba9      	ldr	r3, [pc, #676]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b63c:	f023 0203 	bic.w	r2, r3, #3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	49a5      	ldr	r1, [pc, #660]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b646:	4313      	orrs	r3, r2
 800b648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0302 	and.w	r3, r3, #2
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00a      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b658:	4ba0      	ldr	r3, [pc, #640]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b65e:	f023 020c 	bic.w	r2, r3, #12
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	499d      	ldr	r1, [pc, #628]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b668:	4313      	orrs	r3, r2
 800b66a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f003 0304 	and.w	r3, r3, #4
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00a      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b67a:	4b98      	ldr	r3, [pc, #608]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b680:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	4994      	ldr	r1, [pc, #592]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b68a:	4313      	orrs	r3, r2
 800b68c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 0308 	and.w	r3, r3, #8
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00a      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b69c:	4b8f      	ldr	r3, [pc, #572]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b69e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	498c      	ldr	r1, [pc, #560]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f003 0310 	and.w	r3, r3, #16
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00a      	beq.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b6be:	4b87      	ldr	r3, [pc, #540]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	695b      	ldr	r3, [r3, #20]
 800b6cc:	4983      	ldr	r1, [pc, #524]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f003 0320 	and.w	r3, r3, #32
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00a      	beq.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b6e0:	4b7e      	ldr	r3, [pc, #504]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	699b      	ldr	r3, [r3, #24]
 800b6ee:	497b      	ldr	r1, [pc, #492]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00a      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b702:	4b76      	ldr	r3, [pc, #472]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b708:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	69db      	ldr	r3, [r3, #28]
 800b710:	4972      	ldr	r1, [pc, #456]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b712:	4313      	orrs	r3, r2
 800b714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00a      	beq.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b724:	4b6d      	ldr	r3, [pc, #436]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b72a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	496a      	ldr	r1, [pc, #424]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b734:	4313      	orrs	r3, r2
 800b736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00a      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b746:	4b65      	ldr	r3, [pc, #404]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b74c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b754:	4961      	ldr	r1, [pc, #388]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b756:	4313      	orrs	r3, r2
 800b758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00a      	beq.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b768:	4b5c      	ldr	r3, [pc, #368]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b76a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b76e:	f023 0203 	bic.w	r2, r3, #3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b776:	4959      	ldr	r1, [pc, #356]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b778:	4313      	orrs	r3, r2
 800b77a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00a      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b78a:	4b54      	ldr	r3, [pc, #336]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b790:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b798:	4950      	ldr	r1, [pc, #320]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b79a:	4313      	orrs	r3, r2
 800b79c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d015      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b7ac:	4b4b      	ldr	r3, [pc, #300]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ba:	4948      	ldr	r1, [pc, #288]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7ca:	d105      	bne.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b7cc:	4b43      	ldr	r3, [pc, #268]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	4a42      	ldr	r2, [pc, #264]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d015      	beq.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b7e4:	4b3d      	ldr	r3, [pc, #244]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7f2:	493a      	ldr	r1, [pc, #232]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b802:	d105      	bne.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b804:	4b35      	ldr	r3, [pc, #212]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	4a34      	ldr	r2, [pc, #208]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b80a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b80e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d015      	beq.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b81c:	4b2f      	ldr	r3, [pc, #188]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b822:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82a:	492c      	ldr	r1, [pc, #176]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b82c:	4313      	orrs	r3, r2
 800b82e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b836:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b83a:	d105      	bne.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b83c:	4b27      	ldr	r3, [pc, #156]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	4a26      	ldr	r2, [pc, #152]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b846:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d015      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b854:	4b21      	ldr	r3, [pc, #132]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b85a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b862:	491e      	ldr	r1, [pc, #120]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b864:	4313      	orrs	r3, r2
 800b866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b86e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b872:	d105      	bne.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b874:	4b19      	ldr	r3, [pc, #100]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	4a18      	ldr	r2, [pc, #96]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b87a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b87e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d015      	beq.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b88c:	4b13      	ldr	r3, [pc, #76]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b88e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b892:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89a:	4910      	ldr	r1, [pc, #64]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b89c:	4313      	orrs	r3, r2
 800b89e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8aa:	d105      	bne.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b8ac:	4b0b      	ldr	r3, [pc, #44]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	4a0a      	ldr	r2, [pc, #40]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d018      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b8c4:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8d2:	4902      	ldr	r1, [pc, #8]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b8da:	e001      	b.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b8dc:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8e8:	d105      	bne.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b8ea:	4b21      	ldr	r3, [pc, #132]	; (800b970 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	4a20      	ldr	r2, [pc, #128]	; (800b970 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b8f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8f4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d015      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b902:	4b1b      	ldr	r3, [pc, #108]	; (800b970 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b908:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b910:	4917      	ldr	r1, [pc, #92]	; (800b970 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b912:	4313      	orrs	r3, r2
 800b914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b91c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b920:	d105      	bne.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b922:	4b13      	ldr	r3, [pc, #76]	; (800b970 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	4a12      	ldr	r2, [pc, #72]	; (800b970 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b92c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b936:	2b00      	cmp	r3, #0
 800b938:	d015      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b93a:	4b0d      	ldr	r3, [pc, #52]	; (800b970 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b93c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b940:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b948:	4909      	ldr	r1, [pc, #36]	; (800b970 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b94a:	4313      	orrs	r3, r2
 800b94c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b958:	d105      	bne.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b95a:	4b05      	ldr	r3, [pc, #20]	; (800b970 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	4a04      	ldr	r2, [pc, #16]	; (800b970 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b964:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b966:	7cbb      	ldrb	r3, [r7, #18]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3718      	adds	r7, #24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	40021000 	.word	0x40021000

0800b974 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d101      	bne.n	800b986 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	e027      	b.n	800b9d6 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	7a5b      	ldrb	r3, [r3, #9]
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d105      	bne.n	800b99c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7f9 fae0 	bl	8004f5c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2202      	movs	r2, #2
 800b9a0:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f023 0108 	bic.w	r1, r3, #8
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	685a      	ldr	r2, [r3, #4]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	430a      	orrs	r2, r1
 800b9b6:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f042 0204 	orr.w	r2, r2, #4
 800b9c6:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b082      	sub	sp, #8
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e049      	b.n	800ba84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d106      	bne.n	800ba0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7f9 fcb3 	bl	8005370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	3304      	adds	r3, #4
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	4610      	mov	r0, r2
 800ba1e:	f000 fc57 	bl	800c2d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2201      	movs	r2, #1
 800ba56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d001      	beq.n	800baa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e054      	b.n	800bb4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2202      	movs	r2, #2
 800baa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68da      	ldr	r2, [r3, #12]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f042 0201 	orr.w	r2, r2, #1
 800baba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a26      	ldr	r2, [pc, #152]	; (800bb5c <HAL_TIM_Base_Start_IT+0xd0>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d022      	beq.n	800bb0c <HAL_TIM_Base_Start_IT+0x80>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bace:	d01d      	beq.n	800bb0c <HAL_TIM_Base_Start_IT+0x80>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a22      	ldr	r2, [pc, #136]	; (800bb60 <HAL_TIM_Base_Start_IT+0xd4>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d018      	beq.n	800bb0c <HAL_TIM_Base_Start_IT+0x80>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a21      	ldr	r2, [pc, #132]	; (800bb64 <HAL_TIM_Base_Start_IT+0xd8>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d013      	beq.n	800bb0c <HAL_TIM_Base_Start_IT+0x80>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a1f      	ldr	r2, [pc, #124]	; (800bb68 <HAL_TIM_Base_Start_IT+0xdc>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d00e      	beq.n	800bb0c <HAL_TIM_Base_Start_IT+0x80>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a1e      	ldr	r2, [pc, #120]	; (800bb6c <HAL_TIM_Base_Start_IT+0xe0>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d009      	beq.n	800bb0c <HAL_TIM_Base_Start_IT+0x80>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a1c      	ldr	r2, [pc, #112]	; (800bb70 <HAL_TIM_Base_Start_IT+0xe4>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d004      	beq.n	800bb0c <HAL_TIM_Base_Start_IT+0x80>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a1b      	ldr	r2, [pc, #108]	; (800bb74 <HAL_TIM_Base_Start_IT+0xe8>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d115      	bne.n	800bb38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	689a      	ldr	r2, [r3, #8]
 800bb12:	4b19      	ldr	r3, [pc, #100]	; (800bb78 <HAL_TIM_Base_Start_IT+0xec>)
 800bb14:	4013      	ands	r3, r2
 800bb16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b06      	cmp	r3, #6
 800bb1c:	d015      	beq.n	800bb4a <HAL_TIM_Base_Start_IT+0xbe>
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb24:	d011      	beq.n	800bb4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f042 0201 	orr.w	r2, r2, #1
 800bb34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb36:	e008      	b.n	800bb4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f042 0201 	orr.w	r2, r2, #1
 800bb46:	601a      	str	r2, [r3, #0]
 800bb48:	e000      	b.n	800bb4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3714      	adds	r7, #20
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	40012c00 	.word	0x40012c00
 800bb60:	40000400 	.word	0x40000400
 800bb64:	40000800 	.word	0x40000800
 800bb68:	40000c00 	.word	0x40000c00
 800bb6c:	40013400 	.word	0x40013400
 800bb70:	40014000 	.word	0x40014000
 800bb74:	40015000 	.word	0x40015000
 800bb78:	00010007 	.word	0x00010007

0800bb7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d109      	bne.n	800bba0 <HAL_TIM_PWM_Start+0x24>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	bf14      	ite	ne
 800bb98:	2301      	movne	r3, #1
 800bb9a:	2300      	moveq	r3, #0
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	e03c      	b.n	800bc1a <HAL_TIM_PWM_Start+0x9e>
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	2b04      	cmp	r3, #4
 800bba4:	d109      	bne.n	800bbba <HAL_TIM_PWM_Start+0x3e>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	bf14      	ite	ne
 800bbb2:	2301      	movne	r3, #1
 800bbb4:	2300      	moveq	r3, #0
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	e02f      	b.n	800bc1a <HAL_TIM_PWM_Start+0x9e>
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	2b08      	cmp	r3, #8
 800bbbe:	d109      	bne.n	800bbd4 <HAL_TIM_PWM_Start+0x58>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	bf14      	ite	ne
 800bbcc:	2301      	movne	r3, #1
 800bbce:	2300      	moveq	r3, #0
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	e022      	b.n	800bc1a <HAL_TIM_PWM_Start+0x9e>
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2b0c      	cmp	r3, #12
 800bbd8:	d109      	bne.n	800bbee <HAL_TIM_PWM_Start+0x72>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	bf14      	ite	ne
 800bbe6:	2301      	movne	r3, #1
 800bbe8:	2300      	moveq	r3, #0
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	e015      	b.n	800bc1a <HAL_TIM_PWM_Start+0x9e>
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	2b10      	cmp	r3, #16
 800bbf2:	d109      	bne.n	800bc08 <HAL_TIM_PWM_Start+0x8c>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	bf14      	ite	ne
 800bc00:	2301      	movne	r3, #1
 800bc02:	2300      	moveq	r3, #0
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	e008      	b.n	800bc1a <HAL_TIM_PWM_Start+0x9e>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	bf14      	ite	ne
 800bc14:	2301      	movne	r3, #1
 800bc16:	2300      	moveq	r3, #0
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e0a6      	b.n	800bd70 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d104      	bne.n	800bc32 <HAL_TIM_PWM_Start+0xb6>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc30:	e023      	b.n	800bc7a <HAL_TIM_PWM_Start+0xfe>
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	2b04      	cmp	r3, #4
 800bc36:	d104      	bne.n	800bc42 <HAL_TIM_PWM_Start+0xc6>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc40:	e01b      	b.n	800bc7a <HAL_TIM_PWM_Start+0xfe>
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	2b08      	cmp	r3, #8
 800bc46:	d104      	bne.n	800bc52 <HAL_TIM_PWM_Start+0xd6>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2202      	movs	r2, #2
 800bc4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc50:	e013      	b.n	800bc7a <HAL_TIM_PWM_Start+0xfe>
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	2b0c      	cmp	r3, #12
 800bc56:	d104      	bne.n	800bc62 <HAL_TIM_PWM_Start+0xe6>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc60:	e00b      	b.n	800bc7a <HAL_TIM_PWM_Start+0xfe>
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	2b10      	cmp	r3, #16
 800bc66:	d104      	bne.n	800bc72 <HAL_TIM_PWM_Start+0xf6>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc70:	e003      	b.n	800bc7a <HAL_TIM_PWM_Start+0xfe>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2202      	movs	r2, #2
 800bc76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 fc68 	bl	800c558 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a3a      	ldr	r2, [pc, #232]	; (800bd78 <HAL_TIM_PWM_Start+0x1fc>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d018      	beq.n	800bcc4 <HAL_TIM_PWM_Start+0x148>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a39      	ldr	r2, [pc, #228]	; (800bd7c <HAL_TIM_PWM_Start+0x200>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d013      	beq.n	800bcc4 <HAL_TIM_PWM_Start+0x148>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a37      	ldr	r2, [pc, #220]	; (800bd80 <HAL_TIM_PWM_Start+0x204>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d00e      	beq.n	800bcc4 <HAL_TIM_PWM_Start+0x148>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a36      	ldr	r2, [pc, #216]	; (800bd84 <HAL_TIM_PWM_Start+0x208>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d009      	beq.n	800bcc4 <HAL_TIM_PWM_Start+0x148>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a34      	ldr	r2, [pc, #208]	; (800bd88 <HAL_TIM_PWM_Start+0x20c>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d004      	beq.n	800bcc4 <HAL_TIM_PWM_Start+0x148>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a33      	ldr	r2, [pc, #204]	; (800bd8c <HAL_TIM_PWM_Start+0x210>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d101      	bne.n	800bcc8 <HAL_TIM_PWM_Start+0x14c>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e000      	b.n	800bcca <HAL_TIM_PWM_Start+0x14e>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d007      	beq.n	800bcde <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bcdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a25      	ldr	r2, [pc, #148]	; (800bd78 <HAL_TIM_PWM_Start+0x1fc>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d022      	beq.n	800bd2e <HAL_TIM_PWM_Start+0x1b2>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcf0:	d01d      	beq.n	800bd2e <HAL_TIM_PWM_Start+0x1b2>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a26      	ldr	r2, [pc, #152]	; (800bd90 <HAL_TIM_PWM_Start+0x214>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d018      	beq.n	800bd2e <HAL_TIM_PWM_Start+0x1b2>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a24      	ldr	r2, [pc, #144]	; (800bd94 <HAL_TIM_PWM_Start+0x218>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d013      	beq.n	800bd2e <HAL_TIM_PWM_Start+0x1b2>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a23      	ldr	r2, [pc, #140]	; (800bd98 <HAL_TIM_PWM_Start+0x21c>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d00e      	beq.n	800bd2e <HAL_TIM_PWM_Start+0x1b2>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a19      	ldr	r2, [pc, #100]	; (800bd7c <HAL_TIM_PWM_Start+0x200>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d009      	beq.n	800bd2e <HAL_TIM_PWM_Start+0x1b2>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a18      	ldr	r2, [pc, #96]	; (800bd80 <HAL_TIM_PWM_Start+0x204>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d004      	beq.n	800bd2e <HAL_TIM_PWM_Start+0x1b2>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a18      	ldr	r2, [pc, #96]	; (800bd8c <HAL_TIM_PWM_Start+0x210>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d115      	bne.n	800bd5a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	689a      	ldr	r2, [r3, #8]
 800bd34:	4b19      	ldr	r3, [pc, #100]	; (800bd9c <HAL_TIM_PWM_Start+0x220>)
 800bd36:	4013      	ands	r3, r2
 800bd38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b06      	cmp	r3, #6
 800bd3e:	d015      	beq.n	800bd6c <HAL_TIM_PWM_Start+0x1f0>
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd46:	d011      	beq.n	800bd6c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f042 0201 	orr.w	r2, r2, #1
 800bd56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd58:	e008      	b.n	800bd6c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f042 0201 	orr.w	r2, r2, #1
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	e000      	b.n	800bd6e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	40012c00 	.word	0x40012c00
 800bd7c:	40013400 	.word	0x40013400
 800bd80:	40014000 	.word	0x40014000
 800bd84:	40014400 	.word	0x40014400
 800bd88:	40014800 	.word	0x40014800
 800bd8c:	40015000 	.word	0x40015000
 800bd90:	40000400 	.word	0x40000400
 800bd94:	40000800 	.word	0x40000800
 800bd98:	40000c00 	.word	0x40000c00
 800bd9c:	00010007 	.word	0x00010007

0800bda0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	f003 0302 	and.w	r3, r3, #2
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d122      	bne.n	800bdfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	f003 0302 	and.w	r3, r3, #2
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	d11b      	bne.n	800bdfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f06f 0202 	mvn.w	r2, #2
 800bdcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	699b      	ldr	r3, [r3, #24]
 800bdda:	f003 0303 	and.w	r3, r3, #3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d003      	beq.n	800bdea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fa56 	bl	800c294 <HAL_TIM_IC_CaptureCallback>
 800bde8:	e005      	b.n	800bdf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fa48 	bl	800c280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fa59 	bl	800c2a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	691b      	ldr	r3, [r3, #16]
 800be02:	f003 0304 	and.w	r3, r3, #4
 800be06:	2b04      	cmp	r3, #4
 800be08:	d122      	bne.n	800be50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	f003 0304 	and.w	r3, r3, #4
 800be14:	2b04      	cmp	r3, #4
 800be16:	d11b      	bne.n	800be50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f06f 0204 	mvn.w	r2, #4
 800be20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2202      	movs	r2, #2
 800be26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fa2c 	bl	800c294 <HAL_TIM_IC_CaptureCallback>
 800be3c:	e005      	b.n	800be4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fa1e 	bl	800c280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fa2f 	bl	800c2a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	f003 0308 	and.w	r3, r3, #8
 800be5a:	2b08      	cmp	r3, #8
 800be5c:	d122      	bne.n	800bea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	f003 0308 	and.w	r3, r3, #8
 800be68:	2b08      	cmp	r3, #8
 800be6a:	d11b      	bne.n	800bea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f06f 0208 	mvn.w	r2, #8
 800be74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2204      	movs	r2, #4
 800be7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	69db      	ldr	r3, [r3, #28]
 800be82:	f003 0303 	and.w	r3, r3, #3
 800be86:	2b00      	cmp	r3, #0
 800be88:	d003      	beq.n	800be92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 fa02 	bl	800c294 <HAL_TIM_IC_CaptureCallback>
 800be90:	e005      	b.n	800be9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f9f4 	bl	800c280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fa05 	bl	800c2a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	f003 0310 	and.w	r3, r3, #16
 800beae:	2b10      	cmp	r3, #16
 800beb0:	d122      	bne.n	800bef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	f003 0310 	and.w	r3, r3, #16
 800bebc:	2b10      	cmp	r3, #16
 800bebe:	d11b      	bne.n	800bef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f06f 0210 	mvn.w	r2, #16
 800bec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2208      	movs	r2, #8
 800bece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	69db      	ldr	r3, [r3, #28]
 800bed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d003      	beq.n	800bee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f9d8 	bl	800c294 <HAL_TIM_IC_CaptureCallback>
 800bee4:	e005      	b.n	800bef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 f9ca 	bl	800c280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 f9db 	bl	800c2a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	691b      	ldr	r3, [r3, #16]
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d10e      	bne.n	800bf24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	f003 0301 	and.w	r3, r3, #1
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d107      	bne.n	800bf24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f06f 0201 	mvn.w	r2, #1
 800bf1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7f8 fd5c 	bl	80049dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf2e:	2b80      	cmp	r3, #128	; 0x80
 800bf30:	d10e      	bne.n	800bf50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf3c:	2b80      	cmp	r3, #128	; 0x80
 800bf3e:	d107      	bne.n	800bf50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bf48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 fbca 	bl	800c6e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf5e:	d10e      	bne.n	800bf7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf6a:	2b80      	cmp	r3, #128	; 0x80
 800bf6c:	d107      	bne.n	800bf7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bf76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fbbd 	bl	800c6f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	691b      	ldr	r3, [r3, #16]
 800bf84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf88:	2b40      	cmp	r3, #64	; 0x40
 800bf8a:	d10e      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf96:	2b40      	cmp	r3, #64	; 0x40
 800bf98:	d107      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bfa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f989 	bl	800c2bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	f003 0320 	and.w	r3, r3, #32
 800bfb4:	2b20      	cmp	r3, #32
 800bfb6:	d10e      	bne.n	800bfd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	f003 0320 	and.w	r3, r3, #32
 800bfc2:	2b20      	cmp	r3, #32
 800bfc4:	d107      	bne.n	800bfd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f06f 0220 	mvn.w	r2, #32
 800bfce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 fb7d 	bl	800c6d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfe4:	d10f      	bne.n	800c006 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bff4:	d107      	bne.n	800c006 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800bffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fb83 	bl	800c70c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c014:	d10f      	bne.n	800c036 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c020:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c024:	d107      	bne.n	800c036 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c02e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 fb75 	bl	800c720 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c044:	d10f      	bne.n	800c066 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c054:	d107      	bne.n	800c066 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c05e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fb67 	bl	800c734 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c074:	d10f      	bne.n	800c096 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c080:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c084:	d107      	bne.n	800c096 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c08e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fb59 	bl	800c748 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c096:	bf00      	nop
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
	...

0800c0a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d101      	bne.n	800c0b8 <HAL_TIM_ConfigClockSource+0x18>
 800c0b4:	2302      	movs	r3, #2
 800c0b6:	e0d2      	b.n	800c25e <HAL_TIM_ConfigClockSource+0x1be>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c0d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c0da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0f4:	f000 80a9 	beq.w	800c24a <HAL_TIM_ConfigClockSource+0x1aa>
 800c0f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fc:	d81a      	bhi.n	800c134 <HAL_TIM_ConfigClockSource+0x94>
 800c0fe:	2b30      	cmp	r3, #48	; 0x30
 800c100:	f000 809a 	beq.w	800c238 <HAL_TIM_ConfigClockSource+0x198>
 800c104:	2b30      	cmp	r3, #48	; 0x30
 800c106:	d809      	bhi.n	800c11c <HAL_TIM_ConfigClockSource+0x7c>
 800c108:	2b10      	cmp	r3, #16
 800c10a:	f000 8095 	beq.w	800c238 <HAL_TIM_ConfigClockSource+0x198>
 800c10e:	2b20      	cmp	r3, #32
 800c110:	f000 8092 	beq.w	800c238 <HAL_TIM_ConfigClockSource+0x198>
 800c114:	2b00      	cmp	r3, #0
 800c116:	f000 808f 	beq.w	800c238 <HAL_TIM_ConfigClockSource+0x198>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c11a:	e097      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c11c:	2b50      	cmp	r3, #80	; 0x50
 800c11e:	d05b      	beq.n	800c1d8 <HAL_TIM_ConfigClockSource+0x138>
 800c120:	2b50      	cmp	r3, #80	; 0x50
 800c122:	d802      	bhi.n	800c12a <HAL_TIM_ConfigClockSource+0x8a>
 800c124:	2b40      	cmp	r3, #64	; 0x40
 800c126:	d077      	beq.n	800c218 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c128:	e090      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c12a:	2b60      	cmp	r3, #96	; 0x60
 800c12c:	d064      	beq.n	800c1f8 <HAL_TIM_ConfigClockSource+0x158>
 800c12e:	2b70      	cmp	r3, #112	; 0x70
 800c130:	d028      	beq.n	800c184 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800c132:	e08b      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c134:	4a4c      	ldr	r2, [pc, #304]	; (800c268 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d07e      	beq.n	800c238 <HAL_TIM_ConfigClockSource+0x198>
 800c13a:	4a4b      	ldr	r2, [pc, #300]	; (800c268 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d810      	bhi.n	800c162 <HAL_TIM_ConfigClockSource+0xc2>
 800c140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c144:	d078      	beq.n	800c238 <HAL_TIM_ConfigClockSource+0x198>
 800c146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c14a:	d803      	bhi.n	800c154 <HAL_TIM_ConfigClockSource+0xb4>
 800c14c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c150:	d02f      	beq.n	800c1b2 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800c152:	e07b      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c154:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c158:	d06e      	beq.n	800c238 <HAL_TIM_ConfigClockSource+0x198>
 800c15a:	4a44      	ldr	r2, [pc, #272]	; (800c26c <HAL_TIM_ConfigClockSource+0x1cc>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d06b      	beq.n	800c238 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c160:	e074      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c162:	4a43      	ldr	r2, [pc, #268]	; (800c270 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d067      	beq.n	800c238 <HAL_TIM_ConfigClockSource+0x198>
 800c168:	4a41      	ldr	r2, [pc, #260]	; (800c270 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d803      	bhi.n	800c176 <HAL_TIM_ConfigClockSource+0xd6>
 800c16e:	4a41      	ldr	r2, [pc, #260]	; (800c274 <HAL_TIM_ConfigClockSource+0x1d4>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d061      	beq.n	800c238 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c174:	e06a      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c176:	4a40      	ldr	r2, [pc, #256]	; (800c278 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d05d      	beq.n	800c238 <HAL_TIM_ConfigClockSource+0x198>
 800c17c:	4a3f      	ldr	r2, [pc, #252]	; (800c27c <HAL_TIM_ConfigClockSource+0x1dc>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d05a      	beq.n	800c238 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c182:	e063      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6818      	ldr	r0, [r3, #0]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	6899      	ldr	r1, [r3, #8]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	f000 f9c0 	bl	800c518 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c1a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	609a      	str	r2, [r3, #8]
      break;
 800c1b0:	e04c      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6818      	ldr	r0, [r3, #0]
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	6899      	ldr	r1, [r3, #8]
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	685a      	ldr	r2, [r3, #4]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	f000 f9a9 	bl	800c518 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	689a      	ldr	r2, [r3, #8]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1d4:	609a      	str	r2, [r3, #8]
      break;
 800c1d6:	e039      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6818      	ldr	r0, [r3, #0]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	6859      	ldr	r1, [r3, #4]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	f000 f91b 	bl	800c420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2150      	movs	r1, #80	; 0x50
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f000 f974 	bl	800c4de <TIM_ITRx_SetConfig>
      break;
 800c1f6:	e029      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6818      	ldr	r0, [r3, #0]
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	6859      	ldr	r1, [r3, #4]
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	461a      	mov	r2, r3
 800c206:	f000 f93a 	bl	800c47e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2160      	movs	r1, #96	; 0x60
 800c210:	4618      	mov	r0, r3
 800c212:	f000 f964 	bl	800c4de <TIM_ITRx_SetConfig>
      break;
 800c216:	e019      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6818      	ldr	r0, [r3, #0]
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	6859      	ldr	r1, [r3, #4]
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	461a      	mov	r2, r3
 800c226:	f000 f8fb 	bl	800c420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2140      	movs	r1, #64	; 0x40
 800c230:	4618      	mov	r0, r3
 800c232:	f000 f954 	bl	800c4de <TIM_ITRx_SetConfig>
      break;
 800c236:	e009      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4619      	mov	r1, r3
 800c242:	4610      	mov	r0, r2
 800c244:	f000 f94b 	bl	800c4de <TIM_ITRx_SetConfig>
        break;
 800c248:	e000      	b.n	800c24c <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800c24a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	00100030 	.word	0x00100030
 800c26c:	00100020 	.word	0x00100020
 800c270:	00100050 	.word	0x00100050
 800c274:	00100040 	.word	0x00100040
 800c278:	00100060 	.word	0x00100060
 800c27c:	00100070 	.word	0x00100070

0800c280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c288:	bf00      	nop
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c29c:	bf00      	nop
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c2c4:	bf00      	nop
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a46      	ldr	r2, [pc, #280]	; (800c3fc <TIM_Base_SetConfig+0x12c>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d017      	beq.n	800c318 <TIM_Base_SetConfig+0x48>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2ee:	d013      	beq.n	800c318 <TIM_Base_SetConfig+0x48>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a43      	ldr	r2, [pc, #268]	; (800c400 <TIM_Base_SetConfig+0x130>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d00f      	beq.n	800c318 <TIM_Base_SetConfig+0x48>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a42      	ldr	r2, [pc, #264]	; (800c404 <TIM_Base_SetConfig+0x134>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d00b      	beq.n	800c318 <TIM_Base_SetConfig+0x48>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a41      	ldr	r2, [pc, #260]	; (800c408 <TIM_Base_SetConfig+0x138>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d007      	beq.n	800c318 <TIM_Base_SetConfig+0x48>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a40      	ldr	r2, [pc, #256]	; (800c40c <TIM_Base_SetConfig+0x13c>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d003      	beq.n	800c318 <TIM_Base_SetConfig+0x48>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a3f      	ldr	r2, [pc, #252]	; (800c410 <TIM_Base_SetConfig+0x140>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d108      	bne.n	800c32a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c31e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	4313      	orrs	r3, r2
 800c328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a33      	ldr	r2, [pc, #204]	; (800c3fc <TIM_Base_SetConfig+0x12c>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d023      	beq.n	800c37a <TIM_Base_SetConfig+0xaa>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c338:	d01f      	beq.n	800c37a <TIM_Base_SetConfig+0xaa>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a30      	ldr	r2, [pc, #192]	; (800c400 <TIM_Base_SetConfig+0x130>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d01b      	beq.n	800c37a <TIM_Base_SetConfig+0xaa>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a2f      	ldr	r2, [pc, #188]	; (800c404 <TIM_Base_SetConfig+0x134>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d017      	beq.n	800c37a <TIM_Base_SetConfig+0xaa>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4a2e      	ldr	r2, [pc, #184]	; (800c408 <TIM_Base_SetConfig+0x138>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d013      	beq.n	800c37a <TIM_Base_SetConfig+0xaa>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4a2d      	ldr	r2, [pc, #180]	; (800c40c <TIM_Base_SetConfig+0x13c>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d00f      	beq.n	800c37a <TIM_Base_SetConfig+0xaa>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4a2d      	ldr	r2, [pc, #180]	; (800c414 <TIM_Base_SetConfig+0x144>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d00b      	beq.n	800c37a <TIM_Base_SetConfig+0xaa>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4a2c      	ldr	r2, [pc, #176]	; (800c418 <TIM_Base_SetConfig+0x148>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d007      	beq.n	800c37a <TIM_Base_SetConfig+0xaa>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	4a2b      	ldr	r2, [pc, #172]	; (800c41c <TIM_Base_SetConfig+0x14c>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d003      	beq.n	800c37a <TIM_Base_SetConfig+0xaa>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4a26      	ldr	r2, [pc, #152]	; (800c410 <TIM_Base_SetConfig+0x140>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d108      	bne.n	800c38c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	68fa      	ldr	r2, [r7, #12]
 800c388:	4313      	orrs	r3, r2
 800c38a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	695b      	ldr	r3, [r3, #20]
 800c396:	4313      	orrs	r3, r2
 800c398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	689a      	ldr	r2, [r3, #8]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4a12      	ldr	r2, [pc, #72]	; (800c3fc <TIM_Base_SetConfig+0x12c>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d013      	beq.n	800c3e0 <TIM_Base_SetConfig+0x110>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a14      	ldr	r2, [pc, #80]	; (800c40c <TIM_Base_SetConfig+0x13c>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d00f      	beq.n	800c3e0 <TIM_Base_SetConfig+0x110>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a14      	ldr	r2, [pc, #80]	; (800c414 <TIM_Base_SetConfig+0x144>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d00b      	beq.n	800c3e0 <TIM_Base_SetConfig+0x110>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a13      	ldr	r2, [pc, #76]	; (800c418 <TIM_Base_SetConfig+0x148>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d007      	beq.n	800c3e0 <TIM_Base_SetConfig+0x110>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a12      	ldr	r2, [pc, #72]	; (800c41c <TIM_Base_SetConfig+0x14c>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d003      	beq.n	800c3e0 <TIM_Base_SetConfig+0x110>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a0d      	ldr	r2, [pc, #52]	; (800c410 <TIM_Base_SetConfig+0x140>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d103      	bne.n	800c3e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	691a      	ldr	r2, [r3, #16]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	615a      	str	r2, [r3, #20]
}
 800c3ee:	bf00      	nop
 800c3f0:	3714      	adds	r7, #20
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	40012c00 	.word	0x40012c00
 800c400:	40000400 	.word	0x40000400
 800c404:	40000800 	.word	0x40000800
 800c408:	40000c00 	.word	0x40000c00
 800c40c:	40013400 	.word	0x40013400
 800c410:	40015000 	.word	0x40015000
 800c414:	40014000 	.word	0x40014000
 800c418:	40014400 	.word	0x40014400
 800c41c:	40014800 	.word	0x40014800

0800c420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c420:	b480      	push	{r7}
 800c422:	b087      	sub	sp, #28
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6a1b      	ldr	r3, [r3, #32]
 800c430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	6a1b      	ldr	r3, [r3, #32]
 800c436:	f023 0201 	bic.w	r2, r3, #1
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	699b      	ldr	r3, [r3, #24]
 800c442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c44a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	011b      	lsls	r3, r3, #4
 800c450:	693a      	ldr	r2, [r7, #16]
 800c452:	4313      	orrs	r3, r2
 800c454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	f023 030a 	bic.w	r3, r3, #10
 800c45c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	4313      	orrs	r3, r2
 800c464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	697a      	ldr	r2, [r7, #20]
 800c470:	621a      	str	r2, [r3, #32]
}
 800c472:	bf00      	nop
 800c474:	371c      	adds	r7, #28
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr

0800c47e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c47e:	b480      	push	{r7}
 800c480:	b087      	sub	sp, #28
 800c482:	af00      	add	r7, sp, #0
 800c484:	60f8      	str	r0, [r7, #12]
 800c486:	60b9      	str	r1, [r7, #8]
 800c488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6a1b      	ldr	r3, [r3, #32]
 800c48e:	f023 0210 	bic.w	r2, r3, #16
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6a1b      	ldr	r3, [r3, #32]
 800c4a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	031b      	lsls	r3, r3, #12
 800c4ae:	697a      	ldr	r2, [r7, #20]
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c4ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	011b      	lsls	r3, r3, #4
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	697a      	ldr	r2, [r7, #20]
 800c4ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	693a      	ldr	r2, [r7, #16]
 800c4d0:	621a      	str	r2, [r3, #32]
}
 800c4d2:	bf00      	nop
 800c4d4:	371c      	adds	r7, #28
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr

0800c4de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b085      	sub	sp, #20
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c4f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4fa:	683a      	ldr	r2, [r7, #0]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	f043 0307 	orr.w	r3, r3, #7
 800c504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	609a      	str	r2, [r3, #8]
}
 800c50c:	bf00      	nop
 800c50e:	3714      	adds	r7, #20
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c518:	b480      	push	{r7}
 800c51a:	b087      	sub	sp, #28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	021a      	lsls	r2, r3, #8
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	431a      	orrs	r2, r3
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	4313      	orrs	r3, r2
 800c540:	697a      	ldr	r2, [r7, #20]
 800c542:	4313      	orrs	r3, r2
 800c544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	697a      	ldr	r2, [r7, #20]
 800c54a:	609a      	str	r2, [r3, #8]
}
 800c54c:	bf00      	nop
 800c54e:	371c      	adds	r7, #28
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c558:	b480      	push	{r7}
 800c55a:	b087      	sub	sp, #28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	f003 031f 	and.w	r3, r3, #31
 800c56a:	2201      	movs	r2, #1
 800c56c:	fa02 f303 	lsl.w	r3, r2, r3
 800c570:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6a1a      	ldr	r2, [r3, #32]
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	43db      	mvns	r3, r3
 800c57a:	401a      	ands	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6a1a      	ldr	r2, [r3, #32]
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	f003 031f 	and.w	r3, r3, #31
 800c58a:	6879      	ldr	r1, [r7, #4]
 800c58c:	fa01 f303 	lsl.w	r3, r1, r3
 800c590:	431a      	orrs	r2, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	621a      	str	r2, [r3, #32]
}
 800c596:	bf00      	nop
 800c598:	371c      	adds	r7, #28
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
	...

0800c5a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d101      	bne.n	800c5bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c5b8:	2302      	movs	r3, #2
 800c5ba:	e074      	b.n	800c6a6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a34      	ldr	r2, [pc, #208]	; (800c6b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d009      	beq.n	800c5fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a33      	ldr	r2, [pc, #204]	; (800c6b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d004      	beq.n	800c5fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a31      	ldr	r2, [pc, #196]	; (800c6bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d108      	bne.n	800c60c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c600:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	4313      	orrs	r3, r2
 800c60a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	4313      	orrs	r3, r2
 800c620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a21      	ldr	r2, [pc, #132]	; (800c6b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d022      	beq.n	800c67a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c63c:	d01d      	beq.n	800c67a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a1f      	ldr	r2, [pc, #124]	; (800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d018      	beq.n	800c67a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a1d      	ldr	r2, [pc, #116]	; (800c6c4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d013      	beq.n	800c67a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a1c      	ldr	r2, [pc, #112]	; (800c6c8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d00e      	beq.n	800c67a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a15      	ldr	r2, [pc, #84]	; (800c6b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d009      	beq.n	800c67a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a18      	ldr	r2, [pc, #96]	; (800c6cc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d004      	beq.n	800c67a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a11      	ldr	r2, [pc, #68]	; (800c6bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d10c      	bne.n	800c694 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	4313      	orrs	r3, r2
 800c68a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3714      	adds	r7, #20
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	40012c00 	.word	0x40012c00
 800c6b8:	40013400 	.word	0x40013400
 800c6bc:	40015000 	.word	0x40015000
 800c6c0:	40000400 	.word	0x40000400
 800c6c4:	40000800 	.word	0x40000800
 800c6c8:	40000c00 	.word	0x40000c00
 800c6cc:	40014000 	.word	0x40014000

0800c6d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c6d8:	bf00      	nop
 800c6da:	370c      	adds	r7, #12
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c6ec:	bf00      	nop
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c700:	bf00      	nop
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c728:	bf00      	nop
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c73c:	bf00      	nop
 800c73e:	370c      	adds	r7, #12
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c750:	bf00      	nop
 800c752:	370c      	adds	r7, #12
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <__libc_init_array>:
 800c75c:	b570      	push	{r4, r5, r6, lr}
 800c75e:	4e0d      	ldr	r6, [pc, #52]	; (800c794 <__libc_init_array+0x38>)
 800c760:	4c0d      	ldr	r4, [pc, #52]	; (800c798 <__libc_init_array+0x3c>)
 800c762:	1ba4      	subs	r4, r4, r6
 800c764:	10a4      	asrs	r4, r4, #2
 800c766:	2500      	movs	r5, #0
 800c768:	42a5      	cmp	r5, r4
 800c76a:	d109      	bne.n	800c780 <__libc_init_array+0x24>
 800c76c:	4e0b      	ldr	r6, [pc, #44]	; (800c79c <__libc_init_array+0x40>)
 800c76e:	4c0c      	ldr	r4, [pc, #48]	; (800c7a0 <__libc_init_array+0x44>)
 800c770:	f000 f82c 	bl	800c7cc <_init>
 800c774:	1ba4      	subs	r4, r4, r6
 800c776:	10a4      	asrs	r4, r4, #2
 800c778:	2500      	movs	r5, #0
 800c77a:	42a5      	cmp	r5, r4
 800c77c:	d105      	bne.n	800c78a <__libc_init_array+0x2e>
 800c77e:	bd70      	pop	{r4, r5, r6, pc}
 800c780:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c784:	4798      	blx	r3
 800c786:	3501      	adds	r5, #1
 800c788:	e7ee      	b.n	800c768 <__libc_init_array+0xc>
 800c78a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c78e:	4798      	blx	r3
 800c790:	3501      	adds	r5, #1
 800c792:	e7f2      	b.n	800c77a <__libc_init_array+0x1e>
 800c794:	0800cffc 	.word	0x0800cffc
 800c798:	0800cffc 	.word	0x0800cffc
 800c79c:	0800cffc 	.word	0x0800cffc
 800c7a0:	0800d000 	.word	0x0800d000

0800c7a4 <memcpy>:
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	1e43      	subs	r3, r0, #1
 800c7a8:	440a      	add	r2, r1
 800c7aa:	4291      	cmp	r1, r2
 800c7ac:	d100      	bne.n	800c7b0 <memcpy+0xc>
 800c7ae:	bd10      	pop	{r4, pc}
 800c7b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7b8:	e7f7      	b.n	800c7aa <memcpy+0x6>

0800c7ba <memset>:
 800c7ba:	4402      	add	r2, r0
 800c7bc:	4603      	mov	r3, r0
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d100      	bne.n	800c7c4 <memset+0xa>
 800c7c2:	4770      	bx	lr
 800c7c4:	f803 1b01 	strb.w	r1, [r3], #1
 800c7c8:	e7f9      	b.n	800c7be <memset+0x4>
	...

0800c7cc <_init>:
 800c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ce:	bf00      	nop
 800c7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d2:	bc08      	pop	{r3}
 800c7d4:	469e      	mov	lr, r3
 800c7d6:	4770      	bx	lr

0800c7d8 <_fini>:
 800c7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7da:	bf00      	nop
 800c7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7de:	bc08      	pop	{r3}
 800c7e0:	469e      	mov	lr, r3
 800c7e2:	4770      	bx	lr
